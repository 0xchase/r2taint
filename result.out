00044e17: program
.address 0x4155E0
00043ce5: sub _obstack_allocated_p()
.address 0x4155E0
0000409e: 
.address 0x4155E0
000040a3: RAX := mem[RDI + 8, el]:u64
.address 0x4155E4
000040b0: #561 := RAX
.address 0x4155E4
000040b3: OF := 0
.address 0x4155E4
000040b6: CF := 0
.address 0x4155E4
000040b9: AF := unknown[bits]:u1
.address 0x4155E4
000040bc: PF := ~low:1[let $1 = #561 >> 4 ^ #561 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4155E4
000040bf: SF := high:1[#561]
.address 0x4155E4
000040c2: ZF := 0 = #561
.address 0x4155E7
000040cc: when ZF goto %000040c6
0004461c: goto %0002353f

.address 0x415616
000040c6: 
.address 0x415616
000040d8: #563 := mem[RSP, el]:u64
.address 0x415616
000040db: RSP := RSP + 8
.address 0x415616
000040df: call #563 with noreturn

.address 0x4155E9
0002353f: 
0004461d: goto %00023542

.address 0x4155F0
00023542: 
.address 0x4155F0
0002354d: #4983 := RSI - RAX
.address 0x4155F0
00023550: CF := RSI < RAX
.address 0x4155F0
00023553: OF := high:1[(RSI ^ RAX) & (RSI ^ #4983)]
.address 0x4155F0
00023556: AF := 0x10 = (0x10 & (#4983 ^ RSI ^ RAX))
.address 0x4155F0
00023559: PF := ~low:1[let $1 = #4983 >> 4 ^ #4983 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4155F0
0002355c: SF := high:1[#4983]
.address 0x4155F0
0002355f: ZF := 0 = #4983
.address 0x4155F3
00023569: when CF | ZF goto %00023563
0004461e: goto %000235ea

.address 0x4155F5
000235ea: 
.address 0x4155F5
000235f5: #4989 := mem[RAX, el]:u64 - RSI
.address 0x4155F5
000235f8: CF := mem[RAX, el]:u64 < RSI
.address 0x4155F5
000235fb: OF := high:1[(mem[RAX, el]:u64 ^ RSI) & (mem[RAX, el]:u64 ^ #4989)]
.address 0x4155F5
000235fe: AF := 0x10 = (0x10 & (#4989 ^ mem[RAX, el]:u64 ^ RSI))
.address 0x4155F5
00023601: PF := ~low:1[let $1 = #4989 >> 4 ^ #4989 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4155F5
00023604: SF := high:1[#4989]
.address 0x4155F5
00023607: ZF := 0 = #4989
.address 0x4155F8
00023610: when ~CF call @sub_415610 with noreturn
0004461f: goto %00023563

.address 0x4155FA
00023563: 
.address 0x4155FA
00023573: RAX := mem[RAX + 8, el]:u64
.address 0x4155FE
00023580: #4985 := RAX
.address 0x4155FE
00023583: OF := 0
.address 0x4155FE
00023586: CF := 0
.address 0x4155FE
00023589: AF := unknown[bits]:u1
.address 0x4155FE
0002358c: PF := ~low:1[let $1 = #4985 >> 4 ^ #4985 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4155FE
0002358f: SF := high:1[#4985]
.address 0x4155FE
00023592: ZF := 0 = #4985
.address 0x415601
0002359b: when ~ZF goto %00023542
00044620: goto %000235a1

.address 0x415603
000235a1: 
.address 0x415603
000235ac: RAX := 0
.address 0x415603
000235af: AF := unknown[bits]:u1
.address 0x415603
000235b2: ZF := 1
.address 0x415603
000235b5: PF := 1
.address 0x415603
000235b8: OF := 0
.address 0x415603
000235bb: CF := 0
.address 0x415603
000235be: SF := 0
.address 0x415605
000235c7: #4987 := mem[RSP, el]:u64
.address 0x415605
000235ca: RSP := RSP + 8
.address 0x415605
000235ce: call #4987 with noreturn


.address 0x4154B0
00043ceb: sub _obstack_begin()
.address 0x4154B0
00003e68: 
.address 0x4154B0
00003e73: mem := mem with [RDI + 0x50] <- mem[RDI + 0x50] & 0xFE
.address 0x4154B0
00003e76: OF := 0
.address 0x4154B0
00003e79: CF := 0
.address 0x4154B0
00003e7c: AF := unknown[bits]:u1
.address 0x4154B0
00003e7f: PF := ~low:1[let $1 = mem[RDI + 0x50] >> 4 ^ mem[RDI + 0x50] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4154B0
00003e82: SF := high:1[mem[RDI + 0x50]]
.address 0x4154B0
00003e85: ZF := 0 = mem[RDI + 0x50]
.address 0x4154B4
00003e8c: mem := mem with [RDI + 0x38, el]:u64 <- RCX
.address 0x4154B8
00003e93: mem := mem with [RDI + 0x40, el]:u64 <- R8
.address 0x4154BC
00003e9a: call @sub_415420 with noreturn


.address 0x4154D0
00043cec: sub _obstack_begin_1()
.address 0x4154D0
00003ea2: 
.address 0x4154D0
00003ead: mem := mem with [RDI + 0x50] <- mem[RDI + 0x50] | 1
.address 0x4154D0
00003eb0: OF := 0
.address 0x4154D0
00003eb3: CF := 0
.address 0x4154D0
00003eb6: AF := unknown[bits]:u1
.address 0x4154D0
00003eb9: PF := ~low:1[let $1 = mem[RDI + 0x50] >> 4 ^ mem[RDI + 0x50] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4154D0
00003ebc: SF := high:1[mem[RDI + 0x50]]
.address 0x4154D0
00003ebf: ZF := 0 = mem[RDI + 0x50]
.address 0x4154D4
00003ec6: mem := mem with [RDI + 0x38, el]:u64 <- RCX
.address 0x4154D8
00003ecd: mem := mem with [RDI + 0x40, el]:u64 <- R8
.address 0x4154DC
00003ed4: mem := mem with [RDI + 0x48, el]:u64 <- R9
.address 0x4154E0
00003edb: call @sub_415420 with noreturn


.address 0x415620
00043ced: sub _obstack_free()
.address 0x415620
000040e4: 
.address 0x415620
000040eb: #564 := R12
.address 0x415620
000040ee: RSP := RSP - 8
.address 0x415620
000040f1: mem := mem with [RSP, el]:u64 <- #564
.address 0x415622
000040fa: #565 := RBP
.address 0x415622
000040fd: RSP := RSP - 8
.address 0x415622
00004100: mem := mem with [RSP, el]:u64 <- #565
.address 0x415623
00004107: RBP := RSI
.address 0x415626
00004110: #566 := RBX
.address 0x415626
00004113: RSP := RSP - 8
.address 0x415626
00004116: mem := mem with [RSP, el]:u64 <- #566
.address 0x415627
0000411d: RSI := mem[RDI + 8, el]:u64
.address 0x41562B
00004124: RBX := RDI
.address 0x41562E
00004131: #567 := RSI
.address 0x41562E
00004134: OF := 0
.address 0x41562E
00004137: CF := 0
.address 0x41562E
0000413a: AF := unknown[bits]:u1
.address 0x41562E
0000413d: PF := ~low:1[let $1 = #567 >> 4 ^ #567 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41562E
00004140: SF := high:1[#567]
.address 0x41562E
00004143: ZF := 0 = #567
.address 0x415631
0000414d: when ZF goto %00004147
00044621: goto %0002346e

.address 0x415633
0002346e: 
00044622: goto %00023471

.address 0x415638
00023471: 
.address 0x415638
0002347c: #4976 := RSI - RBP
.address 0x415638
0002347f: CF := RSI < RBP
.address 0x415638
00023482: OF := high:1[(RSI ^ RBP) & (RSI ^ #4976)]
.address 0x415638
00023485: AF := 0x10 = (0x10 & (#4976 ^ RSI ^ RBP))
.address 0x415638
00023488: PF := ~low:1[let $1 = #4976 >> 4 ^ #4976 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415638
0002348b: SF := high:1[#4976]
.address 0x415638
0002348e: ZF := 0 = #4976
.address 0x41563B
00023498: when ~CF goto %00023492
00044623: goto %0002350c

.address 0x41563D
0002350c: 
.address 0x41563D
00023511: RAX := mem[RSI, el]:u64
.address 0x415640
0002351e: #4981 := RAX - RBP
.address 0x415640
00023521: CF := RAX < RBP
.address 0x415640
00023524: OF := high:1[(RAX ^ RBP) & (RAX ^ #4981)]
.address 0x415640
00023527: AF := 0x10 = (0x10 & (#4981 ^ RAX ^ RBP))
.address 0x415640
0002352a: PF := ~low:1[let $1 = #4981 >> 4 ^ #4981 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415640
0002352d: SF := high:1[#4981]
.address 0x415640
00023530: ZF := 0 = #4981
.address 0x415643
00023539: when ~CF goto %00023421
00044624: goto %00023492

.address 0x415670
00023421: 
.address 0x415670
00023426: mem := mem with [RBX + 0x18, el]:u64 <- RBP
.address 0x415674
0002342d: mem := mem with [RBX + 0x10, el]:u64 <- RBP
.address 0x415678
00023434: mem := mem with [RBX + 0x20, el]:u64 <- RAX
.address 0x41567C
0002343b: mem := mem with [RBX + 8, el]:u64 <- RSI
.address 0x415680
00023443: RBX := mem[RSP, el]:u64
.address 0x415680
00023446: RSP := RSP + 8
.address 0x415681
0002344e: RBP := mem[RSP, el]:u64
.address 0x415681
00023451: RSP := RSP + 8
.address 0x415682
00023459: R12 := mem[RSP, el]:u64
.address 0x415682
0002345c: RSP := RSP + 8
.address 0x415684
00023465: #4975 := mem[RSP, el]:u64
.address 0x415684
00023468: RSP := RSP + 8
.address 0x415684
0002346c: call #4975 with noreturn

.address 0x415645
00023492: 
.address 0x415645
000234a2: R12 := mem[RSI + 8, el]:u64
.address 0x415649
000234a9: RDI := RBX
.address 0x41564C
000234b2: RSP := RSP - 8
.address 0x41564C
000234b5: mem := mem with [RSP, el]:u64 <- 0x415651
.address 0x41564C
000234b8: call @sub_415400 with return %000234ba

.address 0x415651
000234ba: 
.address 0x415651
000234c5: mem := mem with [RBX + 0x50] <- mem[RBX + 0x50] | 2
.address 0x415651
000234c8: OF := 0
.address 0x415651
000234cb: CF := 0
.address 0x415651
000234ce: AF := unknown[bits]:u1
.address 0x415651
000234d1: PF := ~low:1[let $1 = mem[RBX + 0x50] >> 4 ^ mem[RBX + 0x50] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415651
000234d4: SF := high:1[mem[RBX + 0x50]]
.address 0x415651
000234d7: ZF := 0 = mem[RBX + 0x50]
.address 0x415655
000234e4: #4979 := R12
.address 0x415655
000234e7: OF := 0
.address 0x415655
000234ea: CF := 0
.address 0x415655
000234ed: AF := unknown[bits]:u1
.address 0x415655
000234f0: PF := ~low:1[let $1 = #4979 >> 4 ^ #4979 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415655
000234f3: SF := high:1[#4979]
.address 0x415655
000234f6: ZF := 0 = #4979
.address 0x415658
000234fd: RSI := R12
.address 0x41565B
00023506: when ~ZF goto %00023471
00044625: goto %00004147

.address 0x41565D
00004147: 
.address 0x41565D
0000415d: #569 := RBP
.address 0x41565D
00004160: OF := 0
.address 0x41565D
00004163: CF := 0
.address 0x41565D
00004166: AF := unknown[bits]:u1
.address 0x41565D
00004169: PF := ~low:1[let $1 = #569 >> 4 ^ #569 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41565D
0000416c: SF := high:1[#569]
.address 0x41565D
0000416f: ZF := 0 = #569
.address 0x415660
00004179: when ~ZF goto %00004173
00044626: goto %000233ed

.address 0x415685
00004173: 
.address 0x415685
00004185: RSP := RSP - 8
.address 0x415685
00004188: mem := mem with [RSP, el]:u64 <- 0x41568A
.address 0x415685
0000418b: call @sub_4037e0 with return %0000418d

.address 0x41568A
0000418d: 
00044627: call @_obstack_memory_used with noreturn

.address 0x415662
000233ed: 
.address 0x415662
000233f3: RBX := mem[RSP, el]:u64
.address 0x415662
000233f6: RSP := RSP + 8
.address 0x415663
000233fe: RBP := mem[RSP, el]:u64
.address 0x415663
00023401: RSP := RSP + 8
.address 0x415664
00023409: R12 := mem[RSP, el]:u64
.address 0x415664
0002340c: RSP := RSP + 8
.address 0x415666
00023415: #4974 := mem[RSP, el]:u64
.address 0x415666
00023418: RSP := RSP + 8
.address 0x415666
0002341c: call #4974 with noreturn


.address 0x415690
00043cf5: sub _obstack_memory_used()
.address 0x415690
00004190: 
.address 0x415690
00004195: RDX := mem[RDI + 8, el]:u64
.address 0x415694
000041a2: RAX := 0
.address 0x415694
000041a5: AF := unknown[bits]:u1
.address 0x415694
000041a8: ZF := 1
.address 0x415694
000041ab: PF := 1
.address 0x415694
000041ae: OF := 0
.address 0x415694
000041b1: CF := 0
.address 0x415694
000041b4: SF := 0
.address 0x415696
000041c1: #571 := RDX
.address 0x415696
000041c4: OF := 0
.address 0x415696
000041c7: CF := 0
.address 0x415696
000041ca: AF := unknown[bits]:u1
.address 0x415696
000041cd: PF := ~low:1[let $1 = #571 >> 4 ^ #571 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415696
000041d0: SF := high:1[#571]
.address 0x415696
000041d3: ZF := 0 = #571
.address 0x415699
000041dd: when ZF goto %000041d7
00044628: goto %0002334f

.address 0x4156B8
000041d7: 
.address 0x4156B8
000041e9: #573 := mem[RSP, el]:u64
.address 0x4156B8
000041ec: RSP := RSP + 8
.address 0x4156B8
000041f0: call #573 with noreturn

.address 0x41569B
0002334f: 
00044629: goto %00023352

.address 0x4156A0
00023352: 
.address 0x4156A0
00023357: RCX := mem[RDX, el]:u64
.address 0x4156A3
00023366: #4965 := RCX
.address 0x4156A3
00023369: #4966 := RDX
.address 0x4156A3
0002336c: RCX := RCX - RDX
.address 0x4156A3
0002336f: CF := #4965 < #4966
.address 0x4156A3
00023372: OF := high:1[(#4965 ^ #4966) & (#4965 ^ RCX)]
.address 0x4156A3
00023375: AF := 0x10 = (0x10 & (RCX ^ #4965 ^ #4966))
.address 0x4156A3
00023378: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4156A3
0002337b: SF := high:1[RCX]
.address 0x4156A3
0002337e: ZF := 0 = RCX
.address 0x4156A6
00023385: RDX := mem[RDX + 8, el]:u64
.address 0x4156AA
00023394: #4968 := RAX
.address 0x4156AA
00023397: #4969 := RCX
.address 0x4156AA
0002339a: RAX := RAX + #4969
.address 0x4156AA
0002339d: CF := RAX < #4968
.address 0x4156AA
000233a0: OF := high:1[#4968] = high:1[#4969] & (high:1[#4968] | high:1[RAX]) & ~(
high:1[#4968] & high:1[RAX])
.address 0x4156AA
000233a3: AF := 0x10 = (0x10 & (RAX ^ #4968 ^ #4969))
.address 0x4156AA
000233a6: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4156AA
000233a9: SF := high:1[RAX]
.address 0x4156AA
000233ac: ZF := 0 = RAX
.address 0x4156AD
000233b9: #4971 := RDX
.address 0x4156AD
000233bc: OF := 0
.address 0x4156AD
000233bf: CF := 0
.address 0x4156AD
000233c2: AF := unknown[bits]:u1
.address 0x4156AD
000233c5: PF := ~low:1[let $1 = #4971 >> 4 ^ #4971 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4156AD
000233c8: SF := high:1[#4971]
.address 0x4156AD
000233cb: ZF := 0 = #4971
.address 0x4156B0
000233d4: when ~ZF goto %00023352
0004462a: goto %000233da

.address 0x4156B2
000233da: 
.address 0x4156B2
000233e1: #4973 := mem[RSP, el]:u64
.address 0x4156B2
000233e4: RSP := RSP + 8
.address 0x4156B2
000233e8: call #4973 with noreturn


.address 0x4154F0
00043cf9: sub _obstack_newchunk()
.address 0x4154F0
00003ee3: 
.address 0x4154F0
00003eea: #538 := R14
.address 0x4154F0
00003eed: RSP := RSP - 8
.address 0x4154F0
00003ef0: mem := mem with [RSP, el]:u64 <- #538
.address 0x4154F2
00003ef9: #539 := R13
.address 0x4154F2
00003efc: RSP := RSP - 8
.address 0x4154F2
00003eff: mem := mem with [RSP, el]:u64 <- #539
.address 0x4154F4
00003f0c: RDX := 0
.address 0x4154F4
00003f0f: AF := unknown[bits]:u1
.address 0x4154F4
00003f12: ZF := 1
.address 0x4154F4
00003f15: PF := 1
.address 0x4154F4
00003f18: OF := 0
.address 0x4154F4
00003f1b: CF := 0
.address 0x4154F4
00003f1e: SF := 0
.address 0x4154F6
00003f27: #540 := R12
.address 0x4154F6
00003f2a: RSP := RSP - 8
.address 0x4154F6
00003f2d: mem := mem with [RSP, el]:u64 <- #540
.address 0x4154F8
00003f36: #541 := RBP
.address 0x4154F8
00003f39: RSP := RSP - 8
.address 0x4154F8
00003f3c: mem := mem with [RSP, el]:u64 <- #541
.address 0x4154F9
00003f45: #542 := RBX
.address 0x4154F9
00003f48: RSP := RSP - 8
.address 0x4154F9
00003f4b: mem := mem with [RSP, el]:u64 <- #542
.address 0x4154FA
00003f52: RBX := mem[RDI + 0x18, el]:u64
.address 0x4154FE
00003f61: #543 := RBX
.address 0x4154FE
00003f64: #544 := mem[RDI + 0x10, el]:u64
.address 0x4154FE
00003f67: RBX := RBX - mem[RDI + 0x10, el]:u64
.address 0x4154FE
00003f6a: CF := #543 < #544
.address 0x4154FE
00003f6d: OF := high:1[(#543 ^ #544) & (#543 ^ RBX)]
.address 0x4154FE
00003f70: AF := 0x10 = (0x10 & (RBX ^ #543 ^ #544))
.address 0x4154FE
00003f73: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4154FE
00003f76: SF := high:1[RBX]
.address 0x4154FE
00003f79: ZF := 0 = RBX
.address 0x415502
00003f80: RBP := mem[RDI + 8, el]:u64
.address 0x415506
00003f8f: #546 := RSI
.address 0x415506
00003f92: #547 := RBX
.address 0x415506
00003f95: RSI := RSI + #547
.address 0x415506
00003f98: CF := RSI < #546
.address 0x415506
00003f9b: OF := high:1[#546] = high:1[#547] & (high:1[#546] | high:1[RSI]) & ~(
high:1[#546] & high:1[RSI])
.address 0x415506
00003f9e: AF := 0x10 = (0x10 & (RSI ^ #546 ^ #547))
.address 0x415506
00003fa1: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415506
00003fa4: SF := high:1[RSI]
.address 0x415506
00003fa7: ZF := 0 = RSI
.address 0x415509
00003fae: RCX := RBX
.address 0x41550C
00003fb5: RDX := extract:63:8[RDX].pad:8[CF]
.address 0x41550F
00003fc4: #549 := RSI
.address 0x41550F
00003fc7: #550 := mem[RDI + 0x30, el]:u64
.address 0x41550F
00003fca: RSI := RSI + #550
.address 0x41550F
00003fcd: CF := RSI < #549
.address 0x41550F
00003fd0: OF := high:1[#549] = high:1[#550] & (high:1[#549] | high:1[RSI]) & ~(
high:1[#549] & high:1[RSI])
.address 0x41550F
00003fd3: AF := 0x10 = (0x10 & (RSI ^ #549 ^ #550))
.address 0x41550F
00003fd6: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41550F
00003fd9: SF := high:1[RSI]
.address 0x41550F
00003fdc: ZF := 0 = RSI
.address 0x415513
00003fe3: RAX := extract:63:8[RAX].pad:8[CF]
.address 0x415516
00003ff1: #552 := RCX
.address 0x415516
00003ff4: RCX := RCX >> 3
.address 0x415516
00003ff7: CF := high:1[#552 << 0x3D]
.address 0x415516
00003ffa: SF := high:1[RCX]
.address 0x415516
00003ffd: ZF := 0 = RCX
.address 0x415516
00004000: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415516
00004003: AF := unknown[bits]:u1
.address 0x415516
00004006: OF := unknown[bits]:u1
.address 0x41551A
00004013: #554 := mem[RDI, el]:u64 - RSI
.address 0x41551A
00004016: CF := mem[RDI, el]:u64 < RSI
.address 0x41551A
00004019: OF := high:1[(mem[RDI, el]:u64 ^ RSI) & (mem[RDI, el]:u64 ^ #554)]
.address 0x41551A
0000401c: AF := 0x10 = (0x10 & (#554 ^ mem[RDI, el]:u64 ^ RSI))
.address 0x41551A
0000401f: PF := ~low:1[let $1 = #554 >> 4 ^ #554 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41551A
00004022: SF := high:1[#554]
.address 0x41551A
00004025: ZF := 0 = #554
.address 0x41551D
0000402c: R12 := low:64[RSI + RCX + 0x64]
.address 0x415522
00004033: RSI := if ~CF then mem[RDI, el]:u64 else RSI
.address 0x415526
00004040: #556 := RSI - R12
.address 0x415526
00004043: CF := RSI < R12
.address 0x415526
00004046: OF := high:1[(RSI ^ R12) & (RSI ^ #556)]
.address 0x415526
00004049: AF := 0x10 = (0x10 & (#556 ^ RSI ^ R12))
.address 0x415526
0000404c: PF := ~low:1[let $1 = #556 >> 4 ^ #556 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415526
0000404f: SF := high:1[#556]
.address 0x415526
00004052: ZF := 0 = #556
.address 0x415529
00004059: R12 := if ~CF then RSI else R12
.address 0x41552D
00004066: #558 := RDX
.address 0x41552D
00004069: OF := 0
.address 0x41552D
0000406c: CF := 0
.address 0x41552D
0000406f: AF := unknown[bits]:u1
.address 0x41552D
00004072: PF := ~low:1[let $1 = #558 >> 4 ^ #558 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41552D
00004075: SF := high:1[#558]
.address 0x41552D
00004078: ZF := 0 = #558
.address 0x415530
00004082: when ~ZF goto %0000407c
0004462b: goto %00023616

.address 0x415536
00023616: 
.address 0x415536
0002361b: RAX := pad:64[pad:32[low:8[RAX]]]
.address 0x415539
00023628: #4991 := RAX
.address 0x415539
0002362b: OF := 0
.address 0x415539
0002362e: CF := 0
.address 0x415539
00023631: AF := unknown[bits]:u1
.address 0x415539
00023634: PF := ~low:1[let $1 = #4991 >> 4 ^ #4991 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415539
00023637: SF := high:1[#4991]
.address 0x415539
0002363a: ZF := 0 = #4991
.address 0x41553C
00023643: when ~ZF goto %0000407c
0004462c: goto %00023649

.address 0x415542
00023649: 
.address 0x415542
0002364e: RSI := R12
.address 0x415545
00023655: R13 := RDI
.address 0x415548
0002365e: RSP := RSP - 8
.address 0x415548
00023661: mem := mem with [RSP, el]:u64 <- 0x41554D
.address 0x415548
00023664: call @sub_4153e0 with return %00023666

.address 0x41554D
00023666: 
.address 0x41554D
00023671: #4993 := RAX
.address 0x41554D
00023674: OF := 0
.address 0x41554D
00023677: CF := 0
.address 0x41554D
0002367a: AF := unknown[bits]:u1
.address 0x41554D
0002367d: PF := ~low:1[let $1 = #4993 >> 4 ^ #4993 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41554D
00023680: SF := high:1[#4993]
.address 0x41554D
00023683: ZF := 0 = #4993
.address 0x415550
0002368a: R14 := RAX
.address 0x415553
00023693: when ZF goto %0000407c
0004462d: goto %00023699

.address 0x4155D5
0000407c: 
.address 0x4155D5
0000408f: #560 := mem[0x620260, el]:u64
.address 0x4155D5
00004092: RSP := RSP - 8
.address 0x4155D5
00004095: mem := mem with [RSP, el]:u64 <- 0x4155DB
.address 0x4155D5
00004099: call #560 with return %0000409b

.address 0x4155DB
0000409b: 
0004462e: call @_obstack_allocated_p with noreturn

.address 0x415559
00023699: 
.address 0x415559
0002369e: RSI := low:64[RAX + R12]
.address 0x41555D
000236a5: mem := mem with [R13 + 8, el]:u64 <- RAX
.address 0x415561
000236ac: mem := mem with [RAX + 8, el]:u64 <- RBP
.address 0x415565
000236b3: RDX := RBX
.address 0x415568
000236ba: mem := mem with [R13 + 0x20, el]:u64 <- RSI
.address 0x41556C
000236c1: mem := mem with [RAX, el]:u64 <- RSI
.address 0x41556F
000236c8: RAX := mem[R13 + 0x30, el]:u64
.address 0x415573
000236cf: RSI := mem[R13 + 0x10, el]:u64
.address 0x415577
000236d6: R12 := low:64[R14 + RAX + 0x10]
.address 0x41557C
000236dd: RAX := ~RAX
.address 0x41557F
000236ea: R12 := R12 & RAX
.address 0x41557F
000236ed: OF := 0
.address 0x41557F
000236f0: CF := 0
.address 0x41557F
000236f3: AF := unknown[bits]:u1
.address 0x41557F
000236f6: PF := ~low:1[let $1 = R12 >> 4 ^ R12 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41557F
000236f9: SF := high:1[R12]
.address 0x41557F
000236fc: ZF := 0 = R12
.address 0x415582
00023703: RDI := R12
.address 0x415585
0002370c: RSP := RSP - 8
.address 0x415585
0002370f: mem := mem with [RSP, el]:u64 <- 0x41558A
.address 0x415585
00023712: call @sub_403b80 with return %00023714

.address 0x41558A
00023714: 
.address 0x41558A
0002371f: #4996 := mem[R13 + 0x50] & 2
.address 0x41558A
00023722: OF := 0
.address 0x41558A
00023725: CF := 0
.address 0x41558A
00023728: AF := unknown[bits]:u1
.address 0x41558A
0002372b: PF := ~low:1[let $1 = #4996 >> 4 ^ #4996 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41558A
0002372e: SF := high:1[#4996]
.address 0x41558A
00023731: ZF := 0 = #4996
.address 0x41558F
0002373b: when ~ZF goto %00023735
0004462f: goto %00023810

.address 0x415591
00023810: 
.address 0x415591
00023815: RAX := mem[R13 + 0x30, el]:u64
.address 0x415595
0002381c: RDX := low:64[RBP + RAX + 0x10]
.address 0x41559A
00023823: RAX := ~RAX
.address 0x41559D
00023830: RAX := RAX & RDX
.address 0x41559D
00023833: OF := 0
.address 0x41559D
00023836: CF := 0
.address 0x41559D
00023839: AF := unknown[bits]:u1
.address 0x41559D
0002383c: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41559D
0002383f: SF := high:1[RAX]
.address 0x41559D
00023842: ZF := 0 = RAX
.address 0x4155A0
0002384f: #5004 := mem[R13 + 0x10, el]:u64 - RAX
.address 0x4155A0
00023852: CF := mem[R13 + 0x10, el]:u64 < RAX
.address 0x4155A0
00023855: OF := high:1[(mem[R13 + 0x10, el]:u64 ^ RAX) & (mem[R13 + 0x10, el]:u64 ^ #5004)]
.address 0x4155A0
00023858: AF := 0x10 = (0x10 & (#5004 ^ mem[R13 + 0x10, el]:u64 ^ RAX))
.address 0x4155A0
0002385b: PF := ~low:1[let $1 = #5004 >> 4 ^ #5004 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4155A0
0002385e: SF := high:1[#5004]
.address 0x4155A0
00023861: ZF := 0 = #5004
.address 0x4155A4
0002386a: when ZF goto %000237de
00044630: goto %00023735

.address 0x4155C0
000237de: 
.address 0x4155C0
000237e3: RAX := mem[RBP + 8, el]:u64
.address 0x4155C4
000237ea: RSI := RBP
.address 0x4155C7
000237f1: RDI := R13
.address 0x4155CA
000237f8: mem := mem with [R14 + 8, el]:u64 <- RAX
.address 0x4155CE
00023801: RSP := RSP - 8
.address 0x4155CE
00023804: mem := mem with [RSP, el]:u64 <- 0x4155D3
.address 0x4155CE
00023807: call @sub_415400 with return %00023809

.address 0x4155D3
00023809: 
.address 0x4155D3
0002380e: goto %00023735

.address 0x4155A6
00023735: 
.address 0x4155A6
0002374b: mem := mem with [R13 + 0x50] <- mem[R13 + 0x50] & 0xFD
.address 0x4155A6
0002374e: OF := 0
.address 0x4155A6
00023751: CF := 0
.address 0x4155A6
00023754: AF := unknown[bits]:u1
.address 0x4155A6
00023757: PF := ~low:1[let $1 = mem[R13 + 0x50] >> 4 ^ mem[R13 + 0x50] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4155A6
0002375a: SF := high:1[mem[R13 + 0x50]]
.address 0x4155A6
0002375d: ZF := 0 = mem[R13 + 0x50]
.address 0x4155AB
0002376c: #4999 := RBX
.address 0x4155AB
0002376f: #5000 := R12
.address 0x4155AB
00023772: RBX := RBX + #5000
.address 0x4155AB
00023775: CF := RBX < #4999
.address 0x4155AB
00023778: OF := high:1[#4999] = high:1[#5000] & (high:1[#4999] | high:1[RBX]) & ~(
high:1[#4999] & high:1[RBX])
.address 0x4155AB
0002377b: AF := 0x10 = (0x10 & (RBX ^ #4999 ^ #5000))
.address 0x4155AB
0002377e: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4155AB
00023781: SF := high:1[RBX]
.address 0x4155AB
00023784: ZF := 0 = RBX
.address 0x4155AE
0002378b: mem := mem with [R13 + 0x10, el]:u64 <- R12
.address 0x4155B2
00023792: mem := mem with [R13 + 0x18, el]:u64 <- RBX
.address 0x4155B6
0002379a: RBX := mem[RSP, el]:u64
.address 0x4155B6
0002379d: RSP := RSP + 8
.address 0x4155B7
000237a5: RBP := mem[RSP, el]:u64
.address 0x4155B7
000237a8: RSP := RSP + 8
.address 0x4155B8
000237b0: R12 := mem[RSP, el]:u64
.address 0x4155B8
000237b3: RSP := RSP + 8
.address 0x4155BA
000237bb: R13 := mem[RSP, el]:u64
.address 0x4155BA
000237be: RSP := RSP + 8
.address 0x4155BC
000237c6: R14 := mem[RSP, el]:u64
.address 0x4155BC
000237c9: RSP := RSP + 8
.address 0x4155BE
000237d2: #5002 := mem[RSP, el]:u64
.address 0x4155BE
000237d5: RSP := RSP + 8
.address 0x4155BE
000237d9: call #5002 with noreturn


.address 0x403758
00043d00: sub sub_403758()
.address 0x403758
00000005: 
.address 0x403758
00000011: #1 := RSP
.address 0x403758
00000015: RSP := RSP - 8
.address 0x403758
00000018: CF := #1 < 8
.address 0x403758
0000001b: OF := high:1[(#1 ^ 8) & (#1 ^ RSP)]
.address 0x403758
0000001e: AF := 0x10 = (0x10 & (RSP ^ #1 ^ 8))
.address 0x403758
00000021: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x403758
00000024: SF := high:1[RSP]
.address 0x403758
00000027: ZF := 0 = RSP
.address 0x40375C
0000002e: RAX := mem[0x61FFE0, el]:u64
.address 0x403763
0000003b: #4 := RAX
.address 0x403763
0000003e: OF := 0
.address 0x403763
00000041: CF := 0
.address 0x403763
00000044: AF := unknown[bits]:u1
.address 0x403763
00000047: PF := ~low:1[let $1 = #4 >> 4 ^ #4 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x403763
0000004a: SF := high:1[#4]
.address 0x403763
0000004d: ZF := 0 = #4
.address 0x403766
00000057: when ZF goto %00000051
00044631: goto %0000008f

.address 0x403768
0000008f: 
.address 0x403768
00000097: #10 := RAX
.address 0x403768
0000009a: RSP := RSP - 8
.address 0x403768
0000009d: mem := mem with [RSP, el]:u64 <- 0x40376A
.address 0x403768
000000a1: call #10 with return %00000051

.address 0x40376A
00000051: 
.address 0x40376A
00000068: #6 := RSP
.address 0x40376A
0000006b: RSP := RSP + 8
.address 0x40376A
0000006e: CF := RSP < #6
.address 0x40376A
00000071: OF := ~high:1[#6] & (high:1[#6] | high:1[RSP]) & ~(high:1[#6] & high:1[RSP])
.address 0x40376A
00000074: AF := 0x10 = (0x10 & (RSP ^ #6 ^ 8))
.address 0x40376A
00000077: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40376A
0000007a: SF := high:1[RSP]
.address 0x40376A
0000007d: ZF := 0 = RSP
.address 0x40376E
00000086: #9 := mem[RSP, el]:u64
.address 0x40376E
00000089: RSP := RSP + 8
.address 0x40376E
0000008d: call #9 with noreturn


.address 0x403780
00043d02: sub sub_403780()
.address 0x403780
000000bd: 
.address 0x403780
000000c3: call mem[0x61FC50, el]:u64 with noreturn


.address 0x403790
00043d03: sub sub_403790()
.address 0x403790
000000d7: 
.address 0x403790
000000dd: call mem[0x61FC58, el]:u64 with noreturn


.address 0x4037A0
00043d04: sub sub_4037a0()
.address 0x4037A0
000000f1: 
.address 0x4037A0
000000f7: call mem[0x61FC60, el]:u64 with noreturn


.address 0x4037B0
00043d05: sub sub_4037b0()
.address 0x4037B0
0000010b: 
.address 0x4037B0
00000111: call mem[0x61FC68, el]:u64 with noreturn


.address 0x4037C0
00043d06: sub sub_4037c0()
.address 0x4037C0
00000125: 
.address 0x4037C0
0000012b: call mem[0x61FC70, el]:u64 with noreturn


.address 0x4037D0
00043d07: sub sub_4037d0()
.address 0x4037D0
0000013f: 
.address 0x4037D0
00000145: call mem[0x61FC78, el]:u64 with noreturn


.address 0x4037E0
00043d08: sub sub_4037e0()
.address 0x4037E0
00000159: 
.address 0x4037E0
0000015f: call mem[0x61FC80, el]:u64 with noreturn


.address 0x4037F0
00043d09: sub sub_4037f0()
.address 0x4037F0
00000173: 
.address 0x4037F0
00000179: call mem[0x61FC88, el]:u64 with noreturn


.address 0x403800
00043d0a: sub sub_403800()
.address 0x403800
0000018d: 
.address 0x403800
00000193: call mem[0x61FC90, el]:u64 with noreturn


.address 0x403810
00043d0b: sub sub_403810()
.address 0x403810
000001a7: 
.address 0x403810
000001ad: call mem[0x61FC98, el]:u64 with noreturn


.address 0x403820
00043d0c: sub sub_403820()
.address 0x403820
000001c1: 
.address 0x403820
000001c7: call mem[0x61FCA0, el]:u64 with noreturn


.address 0x403830
00043d0d: sub sub_403830()
.address 0x403830
000001db: 
.address 0x403830
000001e1: call mem[0x61FCA8, el]:u64 with noreturn


.address 0x403840
00043d0e: sub sub_403840()
.address 0x403840
000001f5: 
.address 0x403840
000001fb: call mem[0x61FCB0, el]:u64 with noreturn


.address 0x403850
00043d0f: sub sub_403850()
.address 0x403850
0000020f: 
.address 0x403850
00000215: call mem[0x61FCB8, el]:u64 with noreturn


.address 0x403860
00043d10: sub sub_403860()
.address 0x403860
00000229: 
.address 0x403860
0000022f: call mem[0x61FCC0, el]:u64 with noreturn


.address 0x403870
00043d11: sub sub_403870()
.address 0x403870
00000243: 
.address 0x403870
00000249: call mem[0x61FCC8, el]:u64 with noreturn


.address 0x403880
00043d12: sub sub_403880()
.address 0x403880
0000025d: 
.address 0x403880
00000263: call mem[0x61FCD0, el]:u64 with noreturn


.address 0x403890
00043d13: sub sub_403890()
.address 0x403890
00000277: 
.address 0x403890
0000027d: call mem[0x61FCD8, el]:u64 with noreturn


.address 0x4038A0
00043d14: sub sub_4038a0()
.address 0x4038A0
00000291: 
.address 0x4038A0
00000297: call mem[0x61FCE0, el]:u64 with noreturn


.address 0x4038B0
00043d15: sub sub_4038b0()
.address 0x4038B0
000002ab: 
.address 0x4038B0
000002b1: call mem[0x61FCE8, el]:u64 with noreturn


.address 0x4038C0
00043d16: sub sub_4038c0()
.address 0x4038C0
000002c5: 
.address 0x4038C0
000002cb: call mem[0x61FCF0, el]:u64 with noreturn


.address 0x4038E0
00043d17: sub sub_4038e0()
.address 0x4038E0
000002f9: 
.address 0x4038E0
000002ff: call mem[0x61FD00, el]:u64 with noreturn


.address 0x4038F0
00043d18: sub sub_4038f0()
.address 0x4038F0
00000313: 
.address 0x4038F0
00000319: call mem[0x61FD08, el]:u64 with noreturn


.address 0x403900
00043d19: sub sub_403900()
.address 0x403900
0000032d: 
.address 0x403900
00000333: call mem[0x61FD10, el]:u64 with noreturn


.address 0x403910
00043d1a: sub sub_403910()
.address 0x403910
00000347: 
.address 0x403910
0000034d: call mem[0x61FD18, el]:u64 with noreturn


.address 0x403920
00043d1b: sub sub_403920()
.address 0x403920
00000361: 
.address 0x403920
00000367: call mem[0x61FD20, el]:u64 with noreturn


.address 0x403930
00043d1c: sub sub_403930()
.address 0x403930
0000037b: 
.address 0x403930
00000381: call mem[0x61FD28, el]:u64 with noreturn


.address 0x403940
00043d1d: sub sub_403940()
.address 0x403940
00000395: 
.address 0x403940
0000039b: call mem[0x61FD30, el]:u64 with noreturn


.address 0x403950
00043d1e: sub sub_403950()
.address 0x403950
000003af: 
.address 0x403950
000003b5: call mem[0x61FD38, el]:u64 with noreturn


.address 0x403960
00043d1f: sub sub_403960()
.address 0x403960
000003c9: 
.address 0x403960
000003cf: call mem[0x61FD40, el]:u64 with noreturn


.address 0x403970
00043d20: sub sub_403970()
.address 0x403970
000003e3: 
.address 0x403970
000003e9: call mem[0x61FD48, el]:u64 with noreturn


.address 0x403980
00043d21: sub sub_403980()
.address 0x403980
000003fd: 
.address 0x403980
00000403: call mem[0x61FD50, el]:u64 with noreturn


.address 0x403990
00043d22: sub sub_403990()
.address 0x403990
00000417: 
.address 0x403990
0000041d: call mem[0x61FD58, el]:u64 with noreturn


.address 0x4039A0
00043d23: sub sub_4039a0()
.address 0x4039A0
00000431: 
.address 0x4039A0
00000437: call mem[0x61FD60, el]:u64 with noreturn


.address 0x4039B0
00043d24: sub sub_4039b0()
.address 0x4039B0
0000044b: 
.address 0x4039B0
00000451: call mem[0x61FD68, el]:u64 with noreturn


.address 0x4039C0
00043d25: sub sub_4039c0()
.address 0x4039C0
00000465: 
.address 0x4039C0
0000046b: call mem[0x61FD70, el]:u64 with noreturn


.address 0x4039D0
00043d26: sub sub_4039d0()
.address 0x4039D0
0000047f: 
.address 0x4039D0
00000485: call mem[0x61FD78, el]:u64 with noreturn


.address 0x4039E0
00043d27: sub sub_4039e0()
.address 0x4039E0
00000499: 
.address 0x4039E0
0000049f: call mem[0x61FD80, el]:u64 with noreturn


.address 0x4039F0
00043d28: sub sub_4039f0()
.address 0x4039F0
000004b3: 
.address 0x4039F0
000004b9: call mem[0x61FD88, el]:u64 with noreturn


.address 0x403A10
00043d29: sub sub_403a10()
.address 0x403A10
000004e7: 
.address 0x403A10
000004ed: call mem[0x61FD98, el]:u64 with noreturn


.address 0x403A20
00043d2a: sub sub_403a20()
.address 0x403A20
00000501: 
.address 0x403A20
00000507: call mem[0x61FDA0, el]:u64 with noreturn


.address 0x403A30
00043d2b: sub sub_403a30()
.address 0x403A30
0000051b: 
.address 0x403A30
00000521: call mem[0x61FDA8, el]:u64 with noreturn


.address 0x403A40
00043d2c: sub sub_403a40()
.address 0x403A40
00000535: 
.address 0x403A40
0000053b: call mem[0x61FDB0, el]:u64 with noreturn


.address 0x403A50
00043d2d: sub sub_403a50()
.address 0x403A50
0000054f: 
.address 0x403A50
00000555: call mem[0x61FDB8, el]:u64 with noreturn


.address 0x403A60
00043d2e: sub sub_403a60()
.address 0x403A60
00000569: 
.address 0x403A60
0000056f: call mem[0x61FDC0, el]:u64 with noreturn


.address 0x403A70
00043d2f: sub sub_403a70()
.address 0x403A70
00000583: 
.address 0x403A70
00000589: call mem[0x61FDC8, el]:u64 with noreturn


.address 0x403A80
00043d30: sub sub_403a80()
.address 0x403A80
0000059d: 
.address 0x403A80
000005a3: call mem[0x61FDD0, el]:u64 with noreturn


.address 0x403A90
00043d31: sub sub_403a90()
.address 0x403A90
000005b7: 
.address 0x403A90
000005bd: call mem[0x61FDD8, el]:u64 with noreturn


.address 0x403AA0
00043d32: sub sub_403aa0()
.address 0x403AA0
000005d1: 
.address 0x403AA0
000005d7: call mem[0x61FDE0, el]:u64 with noreturn


.address 0x403AB0
00043d33: sub sub_403ab0()
.address 0x403AB0
000005eb: 
.address 0x403AB0
000005f1: call mem[0x61FDE8, el]:u64 with noreturn


.address 0x403AC0
00043d34: sub sub_403ac0()
.address 0x403AC0
00000605: 
.address 0x403AC0
0000060b: call mem[0x61FDF0, el]:u64 with noreturn


.address 0x403AD0
00043d35: sub sub_403ad0()
.address 0x403AD0
0000061f: 
.address 0x403AD0
00000625: call mem[0x61FDF8, el]:u64 with noreturn


.address 0x403AE0
00043d36: sub sub_403ae0()
.address 0x403AE0
00000639: 
.address 0x403AE0
0000063f: call mem[0x61FE00, el]:u64 with noreturn


.address 0x403AF0
00043d37: sub sub_403af0()
.address 0x403AF0
00000653: 
.address 0x403AF0
00000659: call mem[0x61FE08, el]:u64 with noreturn


.address 0x403B00
00043d38: sub sub_403b00()
.address 0x403B00
0000066d: 
.address 0x403B00
00000673: call mem[0x61FE10, el]:u64 with noreturn


.address 0x403B10
00043d39: sub sub_403b10()
.address 0x403B10
00000687: 
.address 0x403B10
0000068d: call mem[0x61FE18, el]:u64 with noreturn


.address 0x403B20
00043d3a: sub sub_403b20()
.address 0x403B20
000006a1: 
.address 0x403B20
000006a7: call mem[0x61FE20, el]:u64 with noreturn


.address 0x403B30
00043d3b: sub sub_403b30()
.address 0x403B30
000006bb: 
.address 0x403B30
000006c1: call mem[0x61FE28, el]:u64 with noreturn


.address 0x403B40
00043d3c: sub sub_403b40()
.address 0x403B40
000006d5: 
.address 0x403B40
000006db: call mem[0x61FE30, el]:u64 with noreturn


.address 0x403B50
00043d3d: sub sub_403b50()
.address 0x403B50
000006ef: 
.address 0x403B50
000006f5: call mem[0x61FE38, el]:u64 with noreturn


.address 0x403B60
00043d3e: sub sub_403b60()
.address 0x403B60
00000709: 
.address 0x403B60
0000070f: call mem[0x61FE40, el]:u64 with noreturn


.address 0x403B70
00043d3f: sub sub_403b70()
.address 0x403B70
00000723: 
.address 0x403B70
00000729: call mem[0x61FE48, el]:u64 with noreturn


.address 0x403B80
00043d40: sub sub_403b80()
.address 0x403B80
0000073d: 
.address 0x403B80
00000743: call mem[0x61FE50, el]:u64 with noreturn


.address 0x403B90
00043d41: sub sub_403b90()
.address 0x403B90
00000757: 
.address 0x403B90
0000075d: call mem[0x61FE58, el]:u64 with noreturn


.address 0x403BA0
00043d42: sub sub_403ba0()
.address 0x403BA0
00000771: 
.address 0x403BA0
00000777: call mem[0x61FE60, el]:u64 with noreturn


.address 0x403BB0
00043d43: sub sub_403bb0()
.address 0x403BB0
0000078b: 
.address 0x403BB0
00000791: call mem[0x61FE68, el]:u64 with noreturn


.address 0x403BC0
00043d44: sub sub_403bc0()
.address 0x403BC0
000007a5: 
.address 0x403BC0
000007ab: call mem[0x61FE70, el]:u64 with noreturn


.address 0x403BD0
00043d45: sub sub_403bd0()
.address 0x403BD0
000007bf: 
.address 0x403BD0
000007c5: call mem[0x61FE78, el]:u64 with noreturn


.address 0x403BE0
00043d46: sub sub_403be0()
.address 0x403BE0
000007d9: 
.address 0x403BE0
000007df: call mem[0x61FE80, el]:u64 with noreturn


.address 0x403BF0
00043d47: sub sub_403bf0()
.address 0x403BF0
000007f3: 
.address 0x403BF0
000007f9: call mem[0x61FE88, el]:u64 with noreturn


.address 0x403C00
00043d48: sub sub_403c00()
.address 0x403C00
0000080d: 
.address 0x403C00
00000813: call mem[0x61FE90, el]:u64 with noreturn


.address 0x403C20
00043d49: sub sub_403c20()
.address 0x403C20
00000841: 
.address 0x403C20
00000847: call mem[0x61FEA0, el]:u64 with noreturn


.address 0x403C30
00043d4a: sub sub_403c30()
.address 0x403C30
0000085b: 
.address 0x403C30
00000861: call mem[0x61FEA8, el]:u64 with noreturn


.address 0x403C40
00043d4b: sub sub_403c40()
.address 0x403C40
00000875: 
.address 0x403C40
0000087b: call mem[0x61FEB0, el]:u64 with noreturn


.address 0x403C60
00043d4c: sub sub_403c60()
.address 0x403C60
000008a9: 
.address 0x403C60
000008af: call mem[0x61FEC0, el]:u64 with noreturn


.address 0x403C70
00043d4d: sub sub_403c70()
.address 0x403C70
000008c3: 
.address 0x403C70
000008c9: call mem[0x61FEC8, el]:u64 with noreturn


.address 0x403C80
00043d4e: sub sub_403c80()
.address 0x403C80
000008dd: 
.address 0x403C80
000008e3: call mem[0x61FED0, el]:u64 with noreturn


.address 0x403C90
00043d4f: sub sub_403c90()
.address 0x403C90
000008f7: 
.address 0x403C90
000008fd: call mem[0x61FED8, el]:u64 with noreturn


.address 0x403CA0
00043d50: sub sub_403ca0()
.address 0x403CA0
00000911: 
.address 0x403CA0
00000917: call mem[0x61FEE0, el]:u64 with noreturn


.address 0x403CB0
00043d51: sub sub_403cb0()
.address 0x403CB0
0000092b: 
.address 0x403CB0
00000931: call mem[0x61FEE8, el]:u64 with noreturn


.address 0x403CC0
00043d52: sub sub_403cc0()
.address 0x403CC0
00000945: 
.address 0x403CC0
0000094b: call mem[0x61FEF0, el]:u64 with noreturn


.address 0x403CD0
00043d53: sub sub_403cd0()
.address 0x403CD0
0000095f: 
.address 0x403CD0
00000965: call mem[0x61FEF8, el]:u64 with noreturn


.address 0x403CE0
00043d54: sub sub_403ce0()
.address 0x403CE0
00000979: 
.address 0x403CE0
0000097f: call mem[0x61FF00, el]:u64 with noreturn


.address 0x403CF0
00043d55: sub sub_403cf0()
.address 0x403CF0
00000993: 
.address 0x403CF0
00000999: call mem[0x61FF08, el]:u64 with noreturn


.address 0x403D00
00043d56: sub sub_403d00()
.address 0x403D00
000009ad: 
.address 0x403D00
000009b3: call mem[0x61FF10, el]:u64 with noreturn


.address 0x403D10
00043d57: sub sub_403d10()
.address 0x403D10
000009c7: 
.address 0x403D10
000009cd: call mem[0x61FF18, el]:u64 with noreturn


.address 0x403D20
00043d58: sub sub_403d20()
.address 0x403D20
000009e1: 
.address 0x403D20
000009e7: call mem[0x61FF20, el]:u64 with noreturn


.address 0x403D30
00043d59: sub sub_403d30()
.address 0x403D30
000009fb: 
.address 0x403D30
00000a01: call mem[0x61FF28, el]:u64 with noreturn


.address 0x403D60
00043d5a: sub sub_403d60()
.address 0x403D60
00000a49: 
.address 0x403D60
00000a4f: call mem[0x61FF40, el]:u64 with noreturn


.address 0x403D80
00043d5b: sub sub_403d80()
.address 0x403D80
00000a7d: 
.address 0x403D80
00000a83: call mem[0x61FF50, el]:u64 with noreturn


.address 0x403D90
00043d5c: sub sub_403d90()
.address 0x403D90
00000a97: 
.address 0x403D90
00000a9d: call mem[0x61FF58, el]:u64 with noreturn


.address 0x403DA0
00043d5d: sub sub_403da0()
.address 0x403DA0
00000ab1: 
.address 0x403DA0
00000ab7: call mem[0x61FF60, el]:u64 with noreturn


.address 0x403DB0
00043d5e: sub sub_403db0()
.address 0x403DB0
00000acb: 
.address 0x403DB0
00000ad1: call mem[0x61FF68, el]:u64 with noreturn


.address 0x403DC0
00043d5f: sub sub_403dc0()
.address 0x403DC0
00000ae5: 
.address 0x403DC0
00000aeb: call mem[0x61FF70, el]:u64 with noreturn


.address 0x403DD0
00043d60: sub sub_403dd0()
.address 0x403DD0
00000aff: 
.address 0x403DD0
00000b05: call mem[0x61FF78, el]:u64 with noreturn


.address 0x403DE0
00043d61: sub sub_403de0()
.address 0x403DE0
00000b19: 
.address 0x403DE0
00000b1f: call mem[0x61FF80, el]:u64 with noreturn


.address 0x403DF0
00043d62: sub sub_403df0()
.address 0x403DF0
00000b33: 
.address 0x403DF0
00000b39: call mem[0x61FF88, el]:u64 with noreturn


.address 0x403E00
00043d63: sub sub_403e00()
.address 0x403E00
00000b4d: 
.address 0x403E00
00000b53: call mem[0x61FF90, el]:u64 with noreturn


.address 0x403E10
00043d64: sub sub_403e10()
.address 0x403E10
00000b67: 
.address 0x403E10
00000b6d: call mem[0x61FF98, el]:u64 with noreturn


.address 0x403E20
00043d65: sub sub_403e20()
.address 0x403E20
00000b81: 
.address 0x403E20
00000b87: call mem[0x61FFA0, el]:u64 with noreturn


.address 0x403E30
00043d66: sub sub_403e30()
.address 0x403E30
00000b9b: 
.address 0x403E30
00000ba1: call mem[0x61FFA8, el]:u64 with noreturn


.address 0x403E40
00043d67: sub sub_403e40()
.address 0x403E40
00000bb5: 
.address 0x403E40
00000bbb: call mem[0x61FFB0, el]:u64 with noreturn


.address 0x403E50
00043d68: sub sub_403e50()
.address 0x403E50
00000bcf: 
.address 0x403E50
00000bd5: call mem[0x61FFB8, el]:u64 with noreturn


.address 0x403E60
00043d69: sub sub_403e60()
.address 0x403E60
00000be9: 
.address 0x403E60
00000bef: call mem[0x61FFC0, el]:u64 with noreturn


.address 0x403E70
00043d6a: sub sub_403e70()
.address 0x403E70
00000c03: 
.address 0x403E70
00000c09: call mem[0x61FFC8, el]:u64 with noreturn


.address 0x403E78
00043d6b: sub sub_403e78()
.address 0x403E78
00000c0e: 
.address 0x403E78
00000c14: call mem[0x61FFE8, el]:u64 with noreturn


.address 0x403E80
00043d6c: sub sub_403e80()
.address 0x403E80
00000c19: 
.address 0x403E80
00000c1f: call mem[0x61FFF8, el]:u64 with noreturn


.address 0x403E90
00043d6d: sub sub_403e90()
.address 0x403E90
00000c24: 
.address 0x403E90
00000c2b: #123 := R15
.address 0x403E90
00000c2e: RSP := RSP - 8
.address 0x403E90
00000c31: mem := mem with [RSP, el]:u64 <- #123
00044632: call @sub_403e92 with noreturn


.address 0x403E92
00043d6f: sub sub_403e92()
.address 0x403E92
00000c33: 
.address 0x403E92
00000c3a: #124 := R14
.address 0x403E92
00000c3d: RSP := RSP - 8
.address 0x403E92
00000c40: mem := mem with [RSP, el]:u64 <- #124
.address 0x403E94
00000c49: #125 := R13
.address 0x403E94
00000c4c: RSP := RSP - 8
.address 0x403E94
00000c4f: mem := mem with [RSP, el]:u64 <- #125
.address 0x403E96
00000c58: #126 := R12
.address 0x403E96
00000c5b: RSP := RSP - 8
.address 0x403E96
00000c5e: mem := mem with [RSP, el]:u64 <- #126
.address 0x403E98
00000c67: #127 := RBP
.address 0x403E98
00000c6a: RSP := RSP - 8
.address 0x403E98
00000c6d: mem := mem with [RSP, el]:u64 <- #127
.address 0x403E99
00000c76: #128 := RBX
.address 0x403E99
00000c79: RSP := RSP - 8
.address 0x403E99
00000c7c: mem := mem with [RSP, el]:u64 <- #128
.address 0x403E9A
00000c83: RBP := pad:64[low:32[RDI]]
.address 0x403E9C
00000c8a: RBX := RSI
.address 0x403E9F
00000c98: #129 := RSP
.address 0x403E9F
00000c9b: RSP := RSP - 0x58
.address 0x403E9F
00000c9e: CF := #129 < 0x58
.address 0x403E9F
00000ca1: OF := high:1[(#129 ^ 0x58) & (#129 ^ RSP)]
.address 0x403E9F
00000ca4: AF := 0x10 = (0x10 & (RSP ^ #129 ^ 0x58))
.address 0x403E9F
00000ca7: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x403E9F
00000caa: SF := high:1[RSP]
.address 0x403E9F
00000cad: ZF := 0 = RSP
.address 0x403EA3
00000cb4: RDI := mem[RSI, el]:u64
.address 0x403EA6
00000cbb: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x403EAF
00000cc2: mem := mem with [RSP + 0x48, el]:u64 <- RAX
.address 0x403EB4
00000ccf: RAX := 0
.address 0x403EB4
00000cd2: AF := unknown[bits]:u1
.address 0x403EB4
00000cd5: ZF := 1
.address 0x403EB4
00000cd8: PF := 1
.address 0x403EB4
00000cdb: OF := 0
.address 0x403EB4
00000cde: CF := 0
.address 0x403EB4
00000ce1: SF := 0
.address 0x403EB6
00000ceb: RSP := RSP - 8
.address 0x403EB6
00000cee: mem := mem with [RSP, el]:u64 <- 0x403EBB
.address 0x403EB6
00000cf1: call @sub_411fd0 with return %0002955e

.address 0x403EBB
0002955e: 
.address 0x403EBB
00029563: RSI := 0x417C4A
.address 0x403EC2
0002956a: RDI := 6
.address 0x403EC7
00029573: RSP := RSP - 8
.address 0x403EC7
00029576: mem := mem with [RSP, el]:u64 <- 0x403ECC
.address 0x403EC7
00029579: call @sub_403cc0 with return %0002957b

.address 0x403ECC
0002957b: 
.address 0x403ECC
00029580: RSI := 0x417D95
.address 0x403ED3
00029587: RDI := 0x417D7B
.address 0x403EDA
00029590: RSP := RSP - 8
.address 0x403EDA
00029593: mem := mem with [RSP, el]:u64 <- 0x403EDF
.address 0x403EDA
00029596: call @sub_403920 with return %00029598

.address 0x403EDF
00029598: 
.address 0x403EDF
0002959d: RDI := 0x417D7B
.address 0x403EE6
000295a6: RSP := RSP - 8
.address 0x403EE6
000295a9: mem := mem with [RSP, el]:u64 <- 0x403EEB
.address 0x403EE6
000295ac: call @sub_4038e0 with return %000295ae

.address 0x403EEB
000295ae: 
.address 0x403EEB
000295b3: RDI := 0x40CCA0
.address 0x403EF2
000295ba: mem := mem with [0x6201F8, el]:u32 <- 2
.address 0x403EFC
000295c3: RSP := RSP - 8
.address 0x403EFC
000295c6: mem := mem with [RSP, el]:u64 <- 0x403F01
.address 0x403EFC
000295c9: call @sub_416340 with return %000295cb

.address 0x403F01
000295cb: 
.address 0x403F01
000295d0: RAX := 0x8000000000000000
.address 0x403F0B
000295d7: mem := mem with [0x621210, el]:u32 <- 0
.address 0x403F15
000295de: mem := mem with [0x6212B8] <- 1
.address 0x403F1C
000295e5: mem := mem with [0x621370, el]:u64 <- RAX
.address 0x403F23
000295ec: RAX := pad:64[mem[0x6201E0, el]:u32]
.address 0x403F29
000295f3: mem := mem with [0x621380, el]:u64 <- 0
.address 0x403F34
000295fa: mem := mem with [0x621378, el]:u64 <- 0xFFFFFFFFFFFFFFFF
.address 0x403F3F
00029601: mem := mem with [0x6212D8] <- 0
.address 0x403F46
0002960e: #5749 := low:32[RAX] - 2
.address 0x403F46
00029611: CF := low:32[RAX] < 2
.address 0x403F46
00029614: OF := high:1[(low:32[RAX] ^ 2) & (low:32[RAX] ^ #5749)]
.address 0x403F46
00029617: AF := 0x10 = (0x10 & (#5749 ^ low:32[RAX] ^ 2))
.address 0x403F46
0002961a: PF := ~low:1[let $1 = #5749 >> 4 ^ #5749 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x403F46
0002961d: SF := high:1[#5749]
.address 0x403F46
00029620: ZF := 0 = #5749
.address 0x403F49
0002962a: when ZF goto %00029624
00044633: goto %00043be8

.address 0x404CE7
00029624: 
.address 0x404CE7
00029634: RSI := 7
.address 0x404CEC
00029641: RDI := 0
.address 0x404CEC
00029644: AF := unknown[bits]:u1
.address 0x404CEC
00029647: ZF := 1
.address 0x404CEC
0002964a: PF := 1
.address 0x404CEC
0002964d: OF := 0
.address 0x404CEC
00029650: CF := 0
.address 0x404CEC
00029653: SF := 0
.address 0x404CEE
0002965a: mem := mem with [0x621338, el]:u32 <- 2
.address 0x404CF8
00029663: RSP := RSP - 8
.address 0x404CF8
00029666: mem := mem with [RSP, el]:u64 <- 0x404CFD
.address 0x404CF8
00029669: call @sub_4135b0 with return %0002966b

.address 0x404CFD
0002966b: 
.address 0x404CFD
00029671: goto %0002966d

.address 0x403F4F
00043be8: 
.address 0x403F4F
00043bf3: #9217 := low:32[RAX] - 3
.address 0x403F4F
00043bf6: CF := low:32[RAX] < 3
.address 0x403F4F
00043bf9: OF := high:1[(low:32[RAX] ^ 3) & (low:32[RAX] ^ #9217)]
.address 0x403F4F
00043bfc: AF := 0x10 = (0x10 & (#9217 ^ low:32[RAX] ^ 3))
.address 0x403F4F
00043bff: PF := ~low:1[let $1 = #9217 >> 4 ^ #9217 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x403F4F
00043c02: SF := high:1[#9217]
.address 0x403F4F
00043c05: ZF := 0 = #9217
.address 0x403F52
00043c0f: when ZF goto %00043c09
00044634: goto %00043c50

.address 0x403F54
00043c50: 
.address 0x403F54
00043c5c: #9219 := low:32[RAX]
.address 0x403F54
00043c5f: RAX := pad:64[low:32[RAX] - 1]
.address 0x403F54
00043c62: CF := #9219 < 1
.address 0x403F54
00043c65: OF := high:1[(#9219 ^ 1) & (#9219 ^ low:32[RAX])]
.address 0x403F54
00043c68: AF := 0x10 = (0x10 & (low:32[RAX] ^ #9219 ^ 1))
.address 0x403F54
00043c6b: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x403F54
00043c6e: SF := high:1[low:32[RAX]]
.address 0x403F54
00043c71: ZF := 0 = low:32[RAX]
.address 0x403F57
00043c7a: when ZF goto %0004198a
00044635: goto %00043c80

.address 0x404857
0004198a: 
.address 0x404857
0004198f: RDI := 1
.address 0x40485C
00041998: RSP := RSP - 8
.address 0x40485C
0004199b: mem := mem with [RSP, el]:u64 <- 0x404861
.address 0x40485C
0004199e: call @sub_403850 with return %000419a0

.address 0x404861
000419a0: 
.address 0x404861
000419ab: #8994 := low:32[RAX]
.address 0x404861
000419ae: OF := 0
.address 0x404861
000419b1: CF := 0
.address 0x404861
000419b4: AF := unknown[bits]:u1
.address 0x404861
000419b7: PF := ~low:1[let $1 = #8994 >> 4 ^ #8994 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404861
000419ba: SF := high:1[#8994]
.address 0x404861
000419bd: ZF := 0 = #8994
.address 0x404863
000419c7: when ~ZF goto %000419c1
00044636: goto %00041a50

.address 0x405311
000419c1: 
.address 0x405311
000419d1: RSI := 3
.address 0x405316
000419de: RDI := 0
.address 0x405316
000419e1: AF := unknown[bits]:u1
.address 0x405316
000419e4: ZF := 1
.address 0x405316
000419e7: PF := 1
.address 0x405316
000419ea: OF := 0
.address 0x405316
000419ed: CF := 0
.address 0x405316
000419f0: SF := 0
.address 0x405318
000419f7: mem := mem with [0x621338, el]:u32 <- 2
.address 0x405322
00041a00: RSP := RSP - 8
.address 0x405322
00041a03: mem := mem with [RSP, el]:u64 <- 0x405327
.address 0x405322
00041a06: call @sub_4135b0 with return %00041a08

.address 0x405327
00041a08: 
.address 0x405327
00041a0d: mem := mem with [0x6212D8] <- 1
.address 0x40532E
00041a14: goto %0002966d

.address 0x404869
00041a50: 
.address 0x404869
00041a55: mem := mem with [0x621338, el]:u32 <- 1
.address 0x404873
00041a5c: goto %0002966d

.address 0x403F5D
00043c80: 
.address 0x403F5D
00043c87: RSP := RSP - 8
.address 0x403F5D
00043c8a: mem := mem with [RSP, el]:u64 <- 0x403F62
.address 0x403F5D
00043c8d: call @sub_4037e0 with return %00043c09

.address 0x403F62
00043c09: 
.address 0x403F62
00043c19: RSI := 7
.address 0x403F67
00043c26: RDI := 0
.address 0x403F67
00043c29: AF := unknown[bits]:u1
.address 0x403F67
00043c2c: ZF := 1
.address 0x403F67
00043c2f: PF := 1
.address 0x403F67
00043c32: OF := 0
.address 0x403F67
00043c35: CF := 0
.address 0x403F67
00043c38: SF := 0
.address 0x403F69
00043c3f: mem := mem with [0x621338, el]:u32 <- 0
.address 0x403F73
00043c48: RSP := RSP - 8
.address 0x403F73
00043c4b: mem := mem with [RSP, el]:u64 <- 0x403F78
.address 0x403F73
00043c4e: call @sub_4135b0 with return %0002966d

.address 0x403F78
0002966d: 
.address 0x403F78
00029677: RDI := 0x417DA7
.address 0x403F7F
0002967e: mem := mem with [0x621334, el]:u32 <- 0
.address 0x403F89
00029685: mem := mem with [0x621330, el]:u32 <- 0
.address 0x403F93
0002968c: mem := mem with [0x62132F] <- 0
.address 0x403F9A
00029693: mem := mem with [0x62132D] <- 0
.address 0x403FA1
0002969a: mem := mem with [0x62132C] <- 0
.address 0x403FA8
000296a1: mem := mem with [0x621314, el]:u32 <- 0
.address 0x403FB2
000296a8: mem := mem with [0x6212FC] <- 0
.address 0x403FB9
000296af: mem := mem with [0x6212F8, el]:u32 <- 1
.address 0x403FC3
000296b6: mem := mem with [0x6212F6] <- 0
.address 0x403FCA
000296bd: mem := mem with [0x6212F5] <- 0
.address 0x403FD1
000296c4: mem := mem with [0x6212F0, el]:u32 <- 0
.address 0x403FDB
000296cb: mem := mem with [0x6212E8, el]:u64 <- 0
.address 0x403FE6
000296d2: mem := mem with [0x6212E0, el]:u64 <- 0
.address 0x403FF1
000296d9: mem := mem with [0x621365] <- 0
.address 0x403FF8
000296e2: RSP := RSP - 8
.address 0x403FF8
000296e5: mem := mem with [RSP, el]:u64 <- 0x403FFD
.address 0x403FF8
000296e8: call @sub_4037a0 with return %000296ea

.address 0x403FFD
000296ea: 
.address 0x403FFD
000296f5: #5751 := RAX
.address 0x403FFD
000296f8: OF := 0
.address 0x403FFD
000296fb: CF := 0
.address 0x403FFD
000296fe: AF := unknown[bits]:u1
.address 0x403FFD
00029701: PF := ~low:1[let $1 = #5751 >> 4 ^ #5751 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x403FFD
00029704: SF := high:1[#5751]
.address 0x403FFD
00029707: ZF := 0 = #5751
.address 0x404000
0002970e: R12 := RAX
.address 0x404003
00029718: when ZF goto %00029712
00044637: goto %00043a74

.address 0x404005
00043a74: 
.address 0x404005
00043a79: RDX := 0x41AB60
.address 0x40400C
00043a80: RSI := 0x61F9E0
.address 0x404013
00043a87: RCX := 4
.address 0x404018
00043a8e: RDI := RAX
.address 0x40401B
00043a97: RSP := RSP - 8
.address 0x40401B
00043a9a: mem := mem with [RSP, el]:u64 <- 0x404020
.address 0x40401B
00043a9d: call @sub_40c2c0 with return %00043a9f

.address 0x404020
00043a9f: 
.address 0x404020
00043aaa: #9215 := low:32[RAX]
.address 0x404020
00043aad: OF := 0
.address 0x404020
00043ab0: CF := 0
.address 0x404020
00043ab3: AF := unknown[bits]:u1
.address 0x404020
00043ab6: PF := ~low:1[let $1 = #9215 >> 4 ^ #9215 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404020
00043ab9: SF := high:1[#9215]
.address 0x404020
00043abc: ZF := 0 = #9215
.address 0x404022
00043ac6: when SF goto %00043ac0
00044638: goto %00043ba5

.address 0x404D02
00043ac0: 
.address 0x404D02
00043ad0: RDI := R12
.address 0x404D05
00043ad9: RSP := RSP - 8
.address 0x404D05
00043adc: mem := mem with [RSP, el]:u64 <- 0x404D0A
.address 0x404D05
00043adf: call @sub_413ce0 with return %00043ae1

.address 0x404D0A
00043ae1: 
.address 0x404D0A
00043ae6: RSI := 0x41A080
.address 0x404D11
00043aed: R12 := RAX
.address 0x404D14
00043afa: RDI := 0
.address 0x404D14
00043afd: AF := unknown[bits]:u1
.address 0x404D14
00043b00: ZF := 1
.address 0x404D14
00043b03: PF := 1
.address 0x404D14
00043b06: OF := 0
.address 0x404D14
00043b09: CF := 0
.address 0x404D14
00043b0c: SF := 0
.address 0x404D16
00043b13: RDX := 5
.address 0x404D1B
00043b1c: RSP := RSP - 8
.address 0x404D1B
00043b1f: mem := mem with [RSP, el]:u64 <- 0x404D20
.address 0x404D1B
00043b22: call @sub_403930 with return %00043b24

.address 0x404D20
00043b24: 
.address 0x404D20
00043b29: RCX := R12
.address 0x404D23
00043b30: RDX := RAX
.address 0x404D26
00043b3d: RSI := 0
.address 0x404D26
00043b40: AF := unknown[bits]:u1
.address 0x404D26
00043b43: ZF := 1
.address 0x404D26
00043b46: PF := 1
.address 0x404D26
00043b49: OF := 0
.address 0x404D26
00043b4c: CF := 0
.address 0x404D26
00043b4f: SF := 0
.address 0x404D28
00043b5c: RDI := 0
.address 0x404D28
00043b5f: AF := unknown[bits]:u1
.address 0x404D28
00043b62: ZF := 1
.address 0x404D28
00043b65: PF := 1
.address 0x404D28
00043b68: OF := 0
.address 0x404D28
00043b6b: CF := 0
.address 0x404D28
00043b6e: SF := 0
.address 0x404D2A
00043b7b: RAX := 0
.address 0x404D2A
00043b7e: AF := unknown[bits]:u1
.address 0x404D2A
00043b81: ZF := 1
.address 0x404D2A
00043b84: PF := 1
.address 0x404D2A
00043b87: OF := 0
.address 0x404D2A
00043b8a: CF := 0
.address 0x404D2A
00043b8d: SF := 0
.address 0x404D2C
00043b96: RSP := RSP - 8
.address 0x404D2C
00043b99: mem := mem with [RSP, el]:u64 <- 0x404D31
.address 0x404D2C
00043b9c: call @sub_403d20 with return %00043b9e

.address 0x404D31
00043b9e: 
.address 0x404D31
00043ba3: goto %00029712

.address 0x404028
00043ba5: 
.address 0x404028
00043baa: RDX := 0x41AB60
.address 0x40402F
00043bb1: RAX := extend:64[low:32[RAX]]
.address 0x404031
00043bbe: RDI := 0
.address 0x404031
00043bc1: AF := unknown[bits]:u1
.address 0x404031
00043bc4: ZF := 1
.address 0x404031
00043bc7: PF := 1
.address 0x404031
00043bca: OF := 0
.address 0x404031
00043bcd: CF := 0
.address 0x404031
00043bd0: SF := 0
.address 0x404033
00043bd7: RSI := pad:64[mem[RDX + (RAX << 2), el]:u32]
.address 0x404036
00043be0: RSP := RSP - 8
.address 0x404036
00043be3: mem := mem with [RSP, el]:u64 <- 0x40403B
.address 0x404036
00043be6: call @sub_4135b0 with return %00029712

.address 0x40403B
00029712: 
.address 0x40403B
00029722: RDI := 0x417DB5
.address 0x404042
00029729: mem := mem with [0x6212B0, el]:u64 <- 0x50
.address 0x40404D
00029732: RSP := RSP - 8
.address 0x40404D
00029735: mem := mem with [RSP, el]:u64 <- 0x404052
.address 0x40404D
00029738: call @sub_4037a0 with return %0002973a

.address 0x404052
0002973a: 
.address 0x404052
00029745: #5753 := RAX
.address 0x404052
00029748: OF := 0
.address 0x404052
0002974b: CF := 0
.address 0x404052
0002974e: AF := unknown[bits]:u1
.address 0x404052
00029751: PF := ~low:1[let $1 = #5753 >> 4 ^ #5753 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404052
00029754: SF := high:1[#5753]
.address 0x404052
00029757: ZF := 0 = #5753
.address 0x404055
0002975e: R12 := RAX
.address 0x404058
00029768: when ZF goto %00029762
00044639: goto %00043a48

.address 0x40405A
00043a48: 
.address 0x40405A
00043a53: #9213 := mem[RAX]
.address 0x40405A
00043a56: CF := mem[RAX] < 0
.address 0x40405A
00043a59: OF := high:1[mem[RAX] & (mem[RAX] ^ #9213)]
.address 0x40405A
00043a5c: AF := 0x10 = (0x10 & (#9213 ^ mem[RAX]))
.address 0x40405A
00043a5f: PF := ~low:1[let $1 = #9213 >> 4 ^ #9213 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40405A
00043a62: SF := high:1[#9213]
.address 0x40405A
00043a65: ZF := 0 = #9213
.address 0x40405D
00043a6e: when ~ZF goto %000435bb
0004463a: goto %00029762

.address 0x404D3D
000435bb: 
.address 0x404D3D
000435c0: RDI := RAX
.address 0x404D40
000435c9: RSP := RSP - 8
.address 0x404D40
000435cc: mem := mem with [RSP, el]:u64 <- 0x404D45
.address 0x404D40
000435cf: call @sub_405ca0 with return %000435d1

.address 0x404D45
000435d1: 
.address 0x404D45
000435dc: #9184 := low:8[RAX]
.address 0x404D45
000435df: OF := 0
.address 0x404D45
000435e2: CF := 0
.address 0x404D45
000435e5: AF := unknown[bits]:u1
.address 0x404D45
000435e8: PF := ~low:1[let $1 = #9184 >> 4 ^ #9184 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404D45
000435eb: SF := high:1[#9184]
.address 0x404D45
000435ee: ZF := 0 = #9184
.address 0x404D47
000435f7: when ~ZF goto %00029762
0004463b: goto %000435fd

.address 0x404D4D
000435fd: 
.address 0x404D4D
00043602: RDI := R12
.address 0x404D50
0004360b: RSP := RSP - 8
.address 0x404D50
0004360e: mem := mem with [RSP, el]:u64 <- 0x404D55
.address 0x404D50
00043611: call @sub_413ce0 with return %00043613

.address 0x404D55
00043613: 
.address 0x404D55
00043618: RSI := 0x41A0C8
.address 0x404D5C
0004361f: R12 := RAX
.address 0x404D5F
0004362c: RDI := 0
.address 0x404D5F
0004362f: AF := unknown[bits]:u1
.address 0x404D5F
00043632: ZF := 1
.address 0x404D5F
00043635: PF := 1
.address 0x404D5F
00043638: OF := 0
.address 0x404D5F
0004363b: CF := 0
.address 0x404D5F
0004363e: SF := 0
.address 0x404D61
00043645: RDX := 5
.address 0x404D66
0004364e: RSP := RSP - 8
.address 0x404D66
00043651: mem := mem with [RSP, el]:u64 <- 0x404D6B
.address 0x404D66
00043654: call @sub_403930 with return %00043656

.address 0x404D6B
00043656: 
.address 0x404D6B
0004365b: RCX := R12
.address 0x404D6E
00043662: RDX := RAX
.address 0x404D71
0004366f: RSI := 0
.address 0x404D71
00043672: AF := unknown[bits]:u1
.address 0x404D71
00043675: ZF := 1
.address 0x404D71
00043678: PF := 1
.address 0x404D71
0004367b: OF := 0
.address 0x404D71
0004367e: CF := 0
.address 0x404D71
00043681: SF := 0
.address 0x404D73
0004368e: RDI := 0
.address 0x404D73
00043691: AF := unknown[bits]:u1
.address 0x404D73
00043694: ZF := 1
.address 0x404D73
00043697: PF := 1
.address 0x404D73
0004369a: OF := 0
.address 0x404D73
0004369d: CF := 0
.address 0x404D73
000436a0: SF := 0
.address 0x404D75
000436ad: RAX := 0
.address 0x404D75
000436b0: AF := unknown[bits]:u1
.address 0x404D75
000436b3: ZF := 1
.address 0x404D75
000436b6: PF := 1
.address 0x404D75
000436b9: OF := 0
.address 0x404D75
000436bc: CF := 0
.address 0x404D75
000436bf: SF := 0
.address 0x404D77
000436c8: RSP := RSP - 8
.address 0x404D77
000436cb: mem := mem with [RSP, el]:u64 <- 0x404D7C
.address 0x404D77
000436ce: call @sub_403d20 with return %000436d0

.address 0x404D7C
000436d0: 
.address 0x404D7C
000436d5: goto %00029762

.address 0x404063
00029762: 
.address 0x404063
00029772: R12 := low:64[RSP + 0x30]
.address 0x404068
0002977f: RAX := 0
.address 0x404068
00029782: AF := unknown[bits]:u1
.address 0x404068
00029785: ZF := 1
.address 0x404068
00029788: PF := 1
.address 0x404068
0002978b: OF := 0
.address 0x404068
0002978e: CF := 0
.address 0x404068
00029791: SF := 0
.address 0x40406A
00029798: RSI := 0x5413
.address 0x40406F
0002979f: RDI := 1
.address 0x404074
000297a6: RDX := R12
.address 0x404077
000297af: RSP := RSP - 8
.address 0x404077
000297b2: mem := mem with [RSP, el]:u64 <- 0x40407C
.address 0x404077
000297b5: call @sub_403a80 with return %000297b7

.address 0x40407C
000297b7: 
.address 0x40407C
000297c2: #5755 := low:32[RAX] - 0xFFFFFFFF
.address 0x40407C
000297c5: CF := low:32[RAX] < 0xFFFFFFFF
.address 0x40407C
000297c8: OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ #5755)]
.address 0x40407C
000297cb: AF := 0x10 = (0x10 & (#5755 ^ low:32[RAX] ^ 0xFFFFFFFF))
.address 0x40407C
000297ce: PF := ~low:1[let $1 = #5755 >> 4 ^ #5755 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40407C
000297d1: SF := high:1[#5755]
.address 0x40407C
000297d4: ZF := 0 = #5755
.address 0x40407F
000297de: when ZF goto %000297d8
0004463c: goto %00043a0e

.address 0x404081
00043a0e: 
.address 0x404081
00043a13: RAX := pad:64[pad:32[mem[RSP + 0x32, el]:u16]]
.address 0x404086
00043a20: #9211 := low:16[RAX]
.address 0x404086
00043a23: OF := 0
.address 0x404086
00043a26: CF := 0
.address 0x404086
00043a29: AF := unknown[bits]:u1
.address 0x404086
00043a2c: PF := ~low:1[let $1 = #9211 >> 4 ^ #9211 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404086
00043a2f: SF := high:1[#9211]
.address 0x404086
00043a32: ZF := 0 = #9211
.address 0x404089
00043a3b: when ZF goto %000297d8
0004463d: goto %00043a41

.address 0x40408B
00043a41: 
.address 0x40408B
00043a46: mem := mem with [0x6212B0, el]:u64 <- RAX
0004463e: goto %000297d8

.address 0x404092
000297d8: 
.address 0x404092
000297e8: RDI := 0x417DBD
.address 0x404099
000297f1: RSP := RSP - 8
.address 0x404099
000297f4: mem := mem with [RSP, el]:u64 <- 0x40409E
.address 0x404099
000297f7: call @sub_4037a0 with return %000297f9

.address 0x40409E
000297f9: 
.address 0x40409E
00029804: #5757 := RAX
.address 0x40409E
00029807: OF := 0
.address 0x40409E
0002980a: CF := 0
.address 0x40409E
0002980d: AF := unknown[bits]:u1
.address 0x40409E
00029810: PF := ~low:1[let $1 = #5757 >> 4 ^ #5757 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40409E
00029813: SF := high:1[#5757]
.address 0x40409E
00029816: ZF := 0 = #5757
.address 0x4040A1
0002981d: R13 := RAX
.address 0x4040A4
00029824: mem := mem with [0x6212C0, el]:u64 <- 8
.address 0x4040AF
0002982e: when ZF goto %00029828
0004463f: goto %0004395a

.address 0x4040B1
0004395a: 
.address 0x4040B1
00043965: R8 := 0
.address 0x4040B1
00043968: AF := unknown[bits]:u1
.address 0x4040B1
0004396b: ZF := 1
.address 0x4040B1
0004396e: PF := 1
.address 0x4040B1
00043971: OF := 0
.address 0x4040B1
00043974: CF := 0
.address 0x4040B1
00043977: SF := 0
.address 0x4040B4
00043984: RDX := 0
.address 0x4040B4
00043987: AF := unknown[bits]:u1
.address 0x4040B4
0004398a: ZF := 1
.address 0x4040B4
0004398d: PF := 1
.address 0x4040B4
00043990: OF := 0
.address 0x4040B4
00043993: CF := 0
.address 0x4040B4
00043996: SF := 0
.address 0x4040B6
000439a3: RSI := 0
.address 0x4040B6
000439a6: AF := unknown[bits]:u1
.address 0x4040B6
000439a9: ZF := 1
.address 0x4040B6
000439ac: PF := 1
.address 0x4040B6
000439af: OF := 0
.address 0x4040B6
000439b2: CF := 0
.address 0x4040B6
000439b5: SF := 0
.address 0x4040B8
000439bc: RCX := R12
.address 0x4040BB
000439c3: RDI := RAX
.address 0x4040BE
000439cc: RSP := RSP - 8
.address 0x4040BE
000439cf: mem := mem with [RSP, el]:u64 <- 0x4040C3
.address 0x4040BE
000439d2: call @sub_414950 with return %000439d4

.address 0x4040C3
000439d4: 
.address 0x4040C3
000439df: #9209 := low:32[RAX]
.address 0x4040C3
000439e2: OF := 0
.address 0x4040C3
000439e5: CF := 0
.address 0x4040C3
000439e8: AF := unknown[bits]:u1
.address 0x4040C3
000439eb: PF := ~low:1[let $1 = #9209 >> 4 ^ #9209 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4040C3
000439ee: SF := high:1[#9209]
.address 0x4040C3
000439f1: ZF := 0 = #9209
.address 0x4040C5
000439fa: when ~ZF goto %00043048
00044640: goto %00043a00

.address 0x4051EF
00043048: 
.address 0x4051EF
0004304d: RDI := R13
.address 0x4051F2
00043056: RSP := RSP - 8
.address 0x4051F2
00043059: mem := mem with [RSP, el]:u64 <- 0x4051F7
.address 0x4051F2
0004305c: call @sub_413ce0 with return %0004305e

.address 0x4051F7
0004305e: 
.address 0x4051F7
00043063: RSI := 0x41A108
.address 0x4051FE
0004306a: R13 := RAX
.address 0x405201
00043077: RDI := 0
.address 0x405201
0004307a: AF := unknown[bits]:u1
.address 0x405201
0004307d: ZF := 1
.address 0x405201
00043080: PF := 1
.address 0x405201
00043083: OF := 0
.address 0x405201
00043086: CF := 0
.address 0x405201
00043089: SF := 0
.address 0x405203
00043090: RDX := 5
.address 0x405208
00043099: RSP := RSP - 8
.address 0x405208
0004309c: mem := mem with [RSP, el]:u64 <- 0x40520D
.address 0x405208
0004309f: call @sub_403930 with return %000430a1

.address 0x40520D
000430a1: 
.address 0x40520D
000430a6: RCX := R13
.address 0x405210
000430ad: RDX := RAX
.address 0x405213
000430ba: RSI := 0
.address 0x405213
000430bd: AF := unknown[bits]:u1
.address 0x405213
000430c0: ZF := 1
.address 0x405213
000430c3: PF := 1
.address 0x405213
000430c6: OF := 0
.address 0x405213
000430c9: CF := 0
.address 0x405213
000430cc: SF := 0
.address 0x405215
000430d9: RDI := 0
.address 0x405215
000430dc: AF := unknown[bits]:u1
.address 0x405215
000430df: ZF := 1
.address 0x405215
000430e2: PF := 1
.address 0x405215
000430e5: OF := 0
.address 0x405215
000430e8: CF := 0
.address 0x405215
000430eb: SF := 0
.address 0x405217
000430f8: RAX := 0
.address 0x405217
000430fb: AF := unknown[bits]:u1
.address 0x405217
000430fe: ZF := 1
.address 0x405217
00043101: PF := 1
.address 0x405217
00043104: OF := 0
.address 0x405217
00043107: CF := 0
.address 0x405217
0004310a: SF := 0
.address 0x405219
00043113: RSP := RSP - 8
.address 0x405219
00043116: mem := mem with [RSP, el]:u64 <- 0x40521E
.address 0x405219
00043119: call @sub_403d20 with return %0004311b

.address 0x40521E
0004311b: 
.address 0x40521E
00043120: goto %00029828

.address 0x4040CB
00043a00: 
.address 0x4040CB
00043a05: RAX := mem[RSP + 0x30, el]:u64
.address 0x4040D0
00043a0c: mem := mem with [0x6212C0, el]:u64 <- RAX
00044641: goto %00029828

.address 0x4040D7
00029828: 
.address 0x4040D7
00029838: R13 := 0x416598
.address 0x4040DE
0002983f: mem := mem with [RSP + 0x10] <- 0
.address 0x4040E3
00029846: mem := mem with [RSP + 8] <- 0
.address 0x4040E8
00029853: R14 := 0
.address 0x4040E8
00029856: AF := unknown[bits]:u1
.address 0x4040E8
00029859: ZF := 1
.address 0x4040E8
0002985c: PF := 1
.address 0x4040E8
0002985f: OF := 0
.address 0x4040E8
00029862: CF := 0
.address 0x4040E8
00029865: SF := 0
.address 0x4040EB
0002986c: R15 := 1
00044642: call @sub_4040f8 with noreturn


.address 0x4040F8
00043d80: sub sub_4040f8()
.address 0x4040F8
00029871: 
.address 0x4040F8
00029876: RCX := 0x61F2E0
.address 0x4040FF
0002987d: RDX := 0x41A148
.address 0x404106
00029884: R8 := R12
.address 0x404109
0002988b: RSI := RBX
.address 0x40410C
00029892: RDI := pad:64[low:32[RBP]]
.address 0x40410E
00029899: mem := mem with [RSP + 0x30, el]:u32 <- 0xFFFFFFFF
.address 0x404116
000298a2: RSP := RSP - 8
.address 0x404116
000298a5: mem := mem with [RSP, el]:u64 <- 0x40411B
.address 0x404116
000298a8: call @sub_403980 with return %000298aa

.address 0x40411B
000298aa: 
.address 0x40411B
000298b5: #5759 := low:32[RAX] - 0xFFFFFFFF
.address 0x40411B
000298b8: CF := low:32[RAX] < 0xFFFFFFFF
.address 0x40411B
000298bb: OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ #5759)]
.address 0x40411B
000298be: AF := 0x10 = (0x10 & (#5759 ^ low:32[RAX] ^ 0xFFFFFFFF))
.address 0x40411B
000298c1: PF := ~low:1[let $1 = #5759 >> 4 ^ #5759 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40411B
000298c4: SF := high:1[#5759]
.address 0x40411B
000298c7: ZF := 0 = #5759
.address 0x40411E
000298d1: when ZF goto %000298cb
00044643: goto %00043832

.address 0x4048B8
000298cb: 
.address 0x4048B8
000298e1: #5761 := mem[0x621320, el]:u64
.address 0x4048B8
000298e4: CF := mem[0x621320, el]:u64 < 0
.address 0x4048B8
000298e7: OF := high:1[mem[0x621320, el]:u64 & (mem[0x621320, el]:u64 ^ #5761)]
.address 0x4048B8
000298ea: AF := 0x10 = (0x10 & (#5761 ^ mem[0x621320, el]:u64))
.address 0x4048B8
000298ed: PF := ~low:1[let $1 = #5761 >> 4 ^ #5761 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4048B8
000298f0: SF := high:1[#5761]
.address 0x4048B8
000298f3: ZF := 0 = #5761
.address 0x4048C0
000298fd: when ZF goto %000298f7
00044644: goto %000299ee

.address 0x404EDB
000298f7: 
.address 0x404EDB
00029907: RDI := 0x417E65
.address 0x404EE2
00029910: RSP := RSP - 8
.address 0x404EE2
00029913: mem := mem with [RSP, el]:u64 <- 0x404EE7
.address 0x404EE2
00029916: call @sub_4037a0 with return %00029918

.address 0x404EE7
00029918: 
.address 0x404EE7
0002991d: RDX := 0x621320
.address 0x404EEE
00029924: RSI := 0x621328
.address 0x404EF5
0002992b: R13 := RAX
.address 0x404EF8
00029932: RDI := RAX
.address 0x404EFB
0002993b: RSP := RSP - 8
.address 0x404EFB
0002993e: mem := mem with [RSP, el]:u64 <- 0x404F00
.address 0x404EFB
00029941: call @sub_40f720 with return %00029943

.address 0x404F00
00029943: 
.address 0x404F00
0002994e: #5763 := R13
.address 0x404F00
00029951: OF := 0
.address 0x404F00
00029954: CF := 0
.address 0x404F00
00029957: AF := unknown[bits]:u1
.address 0x404F00
0002995a: PF := ~low:1[let $1 = #5763 >> 4 ^ #5763 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404F00
0002995d: SF := high:1[#5763]
.address 0x404F00
00029960: ZF := 0 = #5763
.address 0x404F03
0002996a: when ZF goto %00029964
00044645: goto %000299a6

.address 0x405717
00029964: 
.address 0x405717
00029974: RDI := 0x417E68
.address 0x40571E
0002997d: RSP := RSP - 8
.address 0x40571E
00029980: mem := mem with [RSP, el]:u64 <- 0x405723
.address 0x40571E
00029983: call @sub_4037a0 with return %00029985

.address 0x405723
00029985: 
.address 0x405723
00029990: #5765 := RAX
.address 0x405723
00029993: OF := 0
.address 0x405723
00029996: CF := 0
.address 0x405723
00029999: AF := unknown[bits]:u1
.address 0x405723
0002999c: PF := ~low:1[let $1 = #5765 >> 4 ^ #5765 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405723
0002999f: SF := high:1[#5765]
.address 0x405723
000299a2: ZF := 0 = #5765
.address 0x405726
000299ac: when ~ZF goto %000299a6
00044646: goto %0004382b

.address 0x40572C
0004382b: 
.address 0x40572C
00043830: goto %000299cd

.address 0x404F09
000299a6: 
.address 0x404F09
000299b6: RAX := pad:64[mem[0x621328, el]:u32]
.address 0x404F0F
000299bd: mem := mem with [0x62131C, el]:u32 <- low:32[RAX]
.address 0x404F15
000299c4: RAX := mem[0x621320, el]:u64
.address 0x404F1C
000299cb: mem := mem with [0x620018, el]:u64 <- RAX
00044647: goto %000299cd

.address 0x404F23
000299cd: 
.address 0x404F23
000299d8: #5767 := mem[RSP + 0x10]
.address 0x404F23
000299db: CF := mem[RSP + 0x10] < 0
.address 0x404F23
000299de: OF := high:1[mem[RSP + 0x10] & (mem[RSP + 0x10] ^ #5767)]
.address 0x404F23
000299e1: AF := 0x10 = (0x10 & (#5767 ^ mem[RSP + 0x10]))
.address 0x404F23
000299e4: PF := ~low:1[let $1 = #5767 >> 4 ^ #5767 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404F23
000299e7: SF := high:1[#5767]
.address 0x404F23
000299ea: ZF := 0 = #5767
.address 0x404F28
000299f4: when ZF goto %000299ee
00044648: goto %00043816

.address 0x404F2E
00043816: 
.address 0x404F2E
0004381b: mem := mem with [0x621328, el]:u32 <- 0
.address 0x404F38
00043822: mem := mem with [0x621320, el]:u64 <- 0x400
.address 0x404F43
00043829: goto %000299ee

.address 0x4048C6
000299ee: 
.address 0x4048C6
000299fe: RAX := mem[0x6212B0, el]:u64
.address 0x4048CD
00029a05: RCX := 3
.address 0x4048D2
00029a12: RDX := 0
.address 0x4048D2
00029a15: AF := unknown[bits]:u1
.address 0x4048D2
00029a18: ZF := 1
.address 0x4048D2
00029a1b: PF := 1
.address 0x4048D2
00029a1e: OF := 0
.address 0x4048D2
00029a21: CF := 0
.address 0x4048D2
00029a24: SF := 0
.address 0x4048D4
00029a3d: #5770 := pad:128[RCX]
.address 0x4048D4
00029a7c: goto %00029a3f

00029a56: 
.address 0x4048D4
00029a57: call %0000737f with noreturn

00029a4c: 
.address 0x4048D4
00029a4d: #5773 := low:64[#5772].low:64[#5771]
.address 0x4048D4
00029a50: RAX := extract:63:0[#5773]
.address 0x4048D4
00029a53: RDX := extract:127:64[#5773]
.address 0x4048D4
00029a5d: goto %00029a5a

00029a59: 
.address 0x4048D4
00029a5b: when high:64[#5771] = 0 goto %00029a4c
.address 0x4048D4
00029a5c: goto %00029a56

00029a49: 
.address 0x4048D4
00029a4a: #5772 := #5769 % #5770
.address 0x4048D4
00029a60: goto %00029a59

00029a46: 
.address 0x4048D4
00029a47: #5771 := #5769 / #5770
.address 0x4048D4
00029a61: goto %00029a49

00029a5a: 
.address 0x4048D4
00029a67: goto %00029a63

00029a42: 
.address 0x4048D4
00029a43: call %0000737f with noreturn

00029a62: 
.address 0x4048D4
00029a64: when #5770 = 0 goto %00029a42
.address 0x4048D4
00029a65: goto %00029a46

00029a3f: 
.address 0x4048D4
00029a40: #5769 := RDX.RAX
.address 0x4048D4
00029a7b: goto %00029a62

00029a63: 
.address 0x4048D4
00029a6a: CF := unknown[bits]:u1
.address 0x4048D4
00029a6d: OF := unknown[bits]:u1
.address 0x4048D4
00029a70: SF := unknown[bits]:u1
.address 0x4048D4
00029a73: ZF := unknown[bits]:u1
.address 0x4048D4
00029a76: AF := unknown[bits]:u1
.address 0x4048D4
00029a79: PF := unknown[bits]:u1
00044649: goto %00029a7d

.address 0x4048D7
00029a7d: 
.address 0x4048D7
00029a88: #5774 := RDX
.address 0x4048D7
00029a8b: OF := 0
.address 0x4048D7
00029a8e: CF := 0
.address 0x4048D7
00029a91: AF := unknown[bits]:u1
.address 0x4048D7
00029a94: PF := ~low:1[let $1 = #5774 >> 4 ^ #5774 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4048D7
00029a97: SF := high:1[#5774]
.address 0x4048D7
00029a9a: ZF := 0 = #5774
.address 0x4048DA
00029aa1: RDX := extract:63:8[RDX].pad:8[~ZF]
.address 0x4048DD
00029aae: RDI := 0
.address 0x4048DD
00029ab1: AF := unknown[bits]:u1
.address 0x4048DD
00029ab4: ZF := 1
.address 0x4048DD
00029ab7: PF := 1
.address 0x4048DD
00029aba: OF := 0
.address 0x4048DD
00029abd: CF := 0
.address 0x4048DD
00029ac0: SF := 0
.address 0x4048DF
00029ac7: RDX := pad:64[pad:32[low:8[RDX]]]
.address 0x4048E2
00029ad6: #5776 := RAX
.address 0x4048E2
00029ad9: #5777 := RDX
.address 0x4048E2
00029adc: RAX := RAX + #5777
.address 0x4048E2
00029adf: CF := RAX < #5776
.address 0x4048E2
00029ae2: OF := high:1[#5776] = high:1[#5777] & (high:1[#5776] | high:1[RAX]) & ~(
high:1[#5776] & high:1[RAX])
.address 0x4048E2
00029ae5: AF := 0x10 = (0x10 & (RAX ^ #5776 ^ #5777))
.address 0x4048E2
00029ae8: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4048E2
00029aeb: SF := high:1[RAX]
.address 0x4048E2
00029aee: ZF := 0 = RAX
.address 0x4048E5
00029af5: mem := mem with [0x621200, el]:u64 <- RAX
.address 0x4048EC
00029afe: RSP := RSP - 8
.address 0x4048EC
00029b01: mem := mem with [RSP, el]:u64 <- 0x4048F1
.address 0x4048EC
00029b04: call @sub_413590 with return %00029b06

.address 0x4048F1
00029b06: 
.address 0x4048F1
00029b0b: RDX := pad:64[mem[0x621338, el]:u32]
.address 0x4048F7
00029b12: R13 := pad:64[low:32[RAX]]
.address 0x4048FA
00029b1f: #5779 := low:32[RDX] - 4
.address 0x4048FA
00029b22: CF := low:32[RDX] < 4
.address 0x4048FA
00029b25: OF := high:1[(low:32[RDX] ^ 4) & (low:32[RDX] ^ #5779)]
.address 0x4048FA
00029b28: AF := 0x10 = (0x10 & (#5779 ^ low:32[RDX] ^ 4))
.address 0x4048FA
00029b2b: PF := ~low:1[let $1 = #5779 >> 4 ^ #5779 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4048FA
00029b2e: SF := high:1[#5779]
.address 0x4048FA
00029b31: ZF := 0 = #5779
.address 0x4048FD
00029b3b: when ZF goto %00029b35
0004464a: goto %000436d7

.address 0x404903
000436d7: 
.address 0x404903
000436e2: #9186 := low:32[RDX] - 1
.address 0x404903
000436e5: CF := low:32[RDX] < 1
.address 0x404903
000436e8: OF := high:1[(low:32[RDX] ^ 1) & (low:32[RDX] ^ #9186)]
.address 0x404903
000436eb: AF := 0x10 = (0x10 & (#9186 ^ low:32[RDX] ^ 1))
.address 0x404903
000436ee: PF := ~low:1[let $1 = #9186 >> 4 ^ #9186 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404903
000436f1: SF := high:1[#9186]
.address 0x404903
000436f4: ZF := 0 = #9186
.address 0x404906
000436fd: when ZF goto %00029b35
0004464b: goto %00043703

.address 0x404D36
00029b35: 
.address 0x404D36
00029b4b: RAX := 0
.address 0x404D36
00029b4e: AF := unknown[bits]:u1
.address 0x404D36
00029b51: ZF := 1
.address 0x404D36
00029b54: PF := 1
.address 0x404D36
00029b57: OF := 0
.address 0x404D36
00029b5a: CF := 0
.address 0x404D36
00029b5d: SF := 0
.address 0x404D38
00029b65: goto %00029b61

.address 0x40490C
00043703: 
.address 0x40490C
0004370e: #9188 := mem[0x6212B0, el]:u64
.address 0x40490C
00043711: CF := mem[0x6212B0, el]:u64 < 0
.address 0x40490C
00043714: OF := high:1[mem[0x6212B0, el]:u64 & (mem[0x6212B0, el]:u64 ^ #9188)]
.address 0x40490C
00043717: AF := 0x10 = (0x10 & (#9188 ^ mem[0x6212B0, el]:u64))
.address 0x40490C
0004371a: PF := ~low:1[let $1 = #9188 >> 4 ^ #9188 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40490C
0004371d: SF := high:1[#9188]
.address 0x40490C
00043720: ZF := 0 = #9188
.address 0x404914
0004372a: when ~ZF goto %00043724
0004464c: goto %000437cb

.address 0x404916
000437cb: 
.address 0x404916
000437d6: RAX := 0
.address 0x404916
000437d9: AF := unknown[bits]:u1
.address 0x404916
000437dc: ZF := 1
.address 0x404916
000437df: PF := 1
.address 0x404916
000437e2: OF := 0
.address 0x404916
000437e5: CF := 0
.address 0x404916
000437e8: SF := 0
.address 0x404918
000437f5: #9197 := low:32[RDX]
.address 0x404918
000437f8: OF := 0
.address 0x404918
000437fb: CF := 0
.address 0x404918
000437fe: AF := unknown[bits]:u1
.address 0x404918
00043801: PF := ~low:1[let $1 = #9197 >> 4 ^ #9197 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404918
00043804: SF := high:1[#9197]
.address 0x404918
00043807: ZF := 0 = #9197
.address 0x40491A
00043810: when ~ZF goto %00029b61
0004464d: goto %00043724

.address 0x40491C
00043724: 
.address 0x40491C
00043734: RAX := pad:64[low:32[R13]]
.address 0x40491F
00043741: RAX := pad:64[low:32[RAX] & 0xFFFFFFFD]
.address 0x40491F
00043744: OF := 0
.address 0x40491F
00043747: CF := 0
.address 0x40491F
0004374a: AF := unknown[bits]:u1
.address 0x40491F
0004374d: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40491F
00043750: SF := high:1[low:32[RAX]]
.address 0x40491F
00043753: ZF := 0 = low:32[RAX]
.address 0x404922
00043761: #9191 := low:32[RAX]
.address 0x404922
00043764: RAX := pad:64[low:32[RAX] - 1]
.address 0x404922
00043767: CF := #9191 < 1
.address 0x404922
0004376a: OF := high:1[(#9191 ^ 1) & (#9191 ^ low:32[RAX])]
.address 0x404922
0004376d: AF := 0x10 = (0x10 & (low:32[RAX] ^ #9191 ^ 1))
.address 0x404922
00043770: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404922
00043773: SF := high:1[low:32[RAX]]
.address 0x404922
00043776: ZF := 0 = low:32[RAX]
.address 0x404925
0004377d: RAX := extract:63:8[RAX].pad:8[ZF]
.address 0x404928
0004378a: #9194 := low:32[R13] - 6
.address 0x404928
0004378d: CF := low:32[R13] < 6
.address 0x404928
00043790: OF := high:1[(low:32[R13] ^ 6) & (low:32[R13] ^ #9194)]
.address 0x404928
00043793: AF := 0x10 = (0x10 & (#9194 ^ low:32[R13] ^ 6))
.address 0x404928
00043796: PF := ~low:1[let $1 = #9194 >> 4 ^ #9194 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404928
00043799: SF := high:1[#9194]
.address 0x404928
0004379c: ZF := 0 = #9194
.address 0x40492C
000437a3: RDX := extract:63:8[RDX].pad:8[ZF]
.address 0x40492F
000437b0: RAX := pad:64[low:32[RAX] | low:32[RDX]]
.address 0x40492F
000437b3: OF := 0
.address 0x40492F
000437b6: CF := 0
.address 0x40492F
000437b9: AF := unknown[bits]:u1
.address 0x40492F
000437bc: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40492F
000437bf: SF := high:1[low:32[RAX]]
.address 0x40492F
000437c2: ZF := 0 = low:32[RAX]
.address 0x404931
000437c9: RAX := pad:64[pad:32[low:8[RAX]]]
0004464e: goto %00029b61

.address 0x404934
00029b61: 
.address 0x404934
00029b71: RDI := 0
.address 0x404934
00029b74: AF := unknown[bits]:u1
.address 0x404934
00029b77: ZF := 1
.address 0x404934
00029b7a: PF := 1
.address 0x404934
00029b7d: OF := 0
.address 0x404934
00029b80: CF := 0
.address 0x404934
00029b83: SF := 0
.address 0x404936
00029b8a: mem := mem with [0x6213A8] <- low:8[RAX]
.address 0x40493C
00029b97: mem := mem with [0x6213A8] <- mem[0x6213A8] & 1
.address 0x40493C
00029b9a: OF := 0
.address 0x40493C
00029b9d: CF := 0
.address 0x40493C
00029ba0: AF := unknown[bits]:u1
.address 0x40493C
00029ba3: PF := ~low:1[let $1 = mem[0x6213A8] >> 4 ^ mem[0x6213A8] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40493C
00029ba6: SF := high:1[mem[0x6213A8]]
.address 0x40493C
00029ba9: ZF := 0 = mem[0x6213A8]
.address 0x404943
00029bb2: RSP := RSP - 8
.address 0x404943
00029bb5: mem := mem with [RSP, el]:u64 <- 0x404948
.address 0x404943
00029bb8: call @sub_413550 with return %00029bba

.address 0x404948
00029bba: 
.address 0x404948
00029bc5: #5782 := low:32[R13] - 7
.address 0x404948
00029bc8: CF := low:32[R13] < 7
.address 0x404948
00029bcb: OF := high:1[(low:32[R13] ^ 7) & (low:32[R13] ^ #5782)]
.address 0x404948
00029bce: AF := 0x10 = (0x10 & (#5782 ^ low:32[R13] ^ 7))
.address 0x404948
00029bd1: PF := ~low:1[let $1 = #5782 >> 4 ^ #5782 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404948
00029bd4: SF := high:1[#5782]
.address 0x404948
00029bd7: ZF := 0 = #5782
.address 0x40494C
00029bde: mem := mem with [0x6212D0, el]:u64 <- RAX
.address 0x404953
00029be8: when ZF goto %00029be2
0004464f: goto %00029c13

.address 0x4052FA
00029be2: 
.address 0x4052FA
00029bf2: RDX := 1
.address 0x4052FF
00029bf9: RSI := 0x20
.address 0x405304
00029c00: RDI := RAX
.address 0x405307
00029c09: RSP := RSP - 8
.address 0x405307
00029c0c: mem := mem with [RSP, el]:u64 <- 0x40530C
.address 0x405307
00029c0f: call @sub_4135d0 with return %00029c11

.address 0x40530C
00029c11: 
.address 0x40530C
00029c17: goto %00029c13

.address 0x404959
00029c13: 
.address 0x404959
00029c1d: RAX := pad:64[mem[0x621314, el]:u32]
.address 0x40495F
00029c2a: #5784 := low:32[RAX] - 1
.address 0x40495F
00029c2d: CF := low:32[RAX] < 1
.address 0x40495F
00029c30: OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #5784)]
.address 0x40495F
00029c33: AF := 0x10 = (0x10 & (#5784 ^ low:32[RAX] ^ 1))
.address 0x40495F
00029c36: PF := ~low:1[let $1 = #5784 >> 4 ^ #5784 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40495F
00029c39: SF := high:1[#5784]
.address 0x40495F
00029c3c: ZF := 0 = #5784
.address 0x404962
00029c46: when CF | ZF goto %00029c40
00044650: goto %000434e1

.address 0x404964
000434e1: 
.address 0x404964
000434e6: RDX := 0x417E73
.address 0x40496B
000434f4: #9174 := low:32[RAX]
.address 0x40496B
000434f7: RAX := pad:64[low:32[RAX] - 2]
.address 0x40496B
000434fa: CF := #9174 < 2
.address 0x40496B
000434fd: OF := high:1[(#9174 ^ 2) & (#9174 ^ low:32[RAX])]
.address 0x40496B
00043500: AF := 0x10 = (0x10 & (low:32[RAX] ^ #9174 ^ 2))
.address 0x40496B
00043503: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40496B
00043506: SF := high:1[low:32[RAX]]
.address 0x40496B
00043509: ZF := 0 = low:32[RAX]
.address 0x40496E
00043510: RSI := pad:64[extend:32[mem[RDX + RAX]]]
.address 0x404972
00043517: R13 := low:64[RAX + RDX]
.address 0x404976
00043524: #9177 := low:8[RSI]
.address 0x404976
00043527: OF := 0
.address 0x404976
0004352a: CF := 0
.address 0x404976
0004352d: AF := unknown[bits]:u1
.address 0x404976
00043530: PF := ~low:1[let $1 = #9177 >> 4 ^ #9177 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404976
00043533: SF := high:1[#9177]
.address 0x404976
00043536: ZF := 0 = #9177
.address 0x404979
0004353f: when ZF goto %00029c40
00044651: goto %00043545

.address 0x40497B
00043545: 
00044652: goto %00043548

.address 0x404980
00043548: 
.address 0x404980
0004354d: RDI := mem[0x6212D0, el]:u64
.address 0x404987
0004355b: #9179 := R13
.address 0x404987
0004355e: R13 := R13 + 1
.address 0x404987
00043561: CF := R13 < #9179
.address 0x404987
00043564: OF := ~high:1[#9179] & (high:1[#9179] | high:1[R13]) & ~(high:1[#9179] & high:1[R13])
.address 0x404987
00043567: AF := 0x10 = (0x10 & (R13 ^ #9179 ^ 1))
.address 0x404987
0004356a: PF := ~low:1[let $1 = R13 >> 4 ^ R13 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x404987
0004356d: SF := high:1[R13]
.address 0x404987
00043570: ZF := 0 = R13
.address 0x40498B
00043577: RDX := 1
.address 0x404990
00043580: RSP := RSP - 8
.address 0x404990
00043583: mem := mem with [RSP, el]:u64 <- 0x404995
.address 0x404990
00043586: call @sub_4135d0 with return %00043588

.address 0x404995
00043588: 
.address 0x404995
0004358d: RSI := pad:64[extend:32[mem[R13]]]
.address 0x40499A
0004359a: #9182 := low:8[RSI]
.address 0x40499A
0004359d: OF := 0
.address 0x40499A
000435a0: CF := 0
.address 0x40499A
000435a3: AF := unknown[bits]:u1
.address 0x40499A
000435a6: PF := ~low:1[let $1 = #9182 >> 4 ^ #9182 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40499A
000435a9: SF := high:1[#9182]
.address 0x40499A
000435ac: ZF := 0 = #9182
.address 0x40499D
000435b5: when ~ZF goto %00043548
00044653: goto %00029c40

.address 0x40499F
00029c40: 
.address 0x40499F
00029c56: RDI := 0
.address 0x40499F
00029c59: AF := unknown[bits]:u1
.address 0x40499F
00029c5c: ZF := 1
.address 0x40499F
00029c5f: PF := 1
.address 0x40499F
00029c62: OF := 0
.address 0x40499F
00029c65: CF := 0
.address 0x40499F
00029c68: SF := 0
.address 0x4049A1
00029c71: RSP := RSP - 8
.address 0x4049A1
00029c74: mem := mem with [RSP, el]:u64 <- 0x4049A6
.address 0x4049A1
00029c77: call @sub_413550 with return %00029c79

.address 0x4049A6
00029c79: 
.address 0x4049A6
00029c7e: RDX := 1
.address 0x4049AB
00029c85: RSI := 0x3A
.address 0x4049B0
00029c8c: RDI := RAX
.address 0x4049B3
00029c93: mem := mem with [0x6212C8, el]:u64 <- RAX
.address 0x4049BA
00029c9c: RSP := RSP - 8
.address 0x4049BA
00029c9f: mem := mem with [RSP, el]:u64 <- 0x4049BF
.address 0x4049BA
00029ca2: call @sub_4135d0 with return %00029ca4

.address 0x4049BF
00029ca4: 
.address 0x4049BF
00029caf: #5786 := mem[0x621318]
.address 0x4049BF
00029cb2: CF := mem[0x621318] < 0
.address 0x4049BF
00029cb5: OF := high:1[mem[0x621318] & (mem[0x621318] ^ #5786)]
.address 0x4049BF
00029cb8: AF := 0x10 = (0x10 & (#5786 ^ mem[0x621318]))
.address 0x4049BF
00029cbb: PF := ~low:1[let $1 = #5786 >> 4 ^ #5786 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4049BF
00029cbe: SF := high:1[#5786]
.address 0x4049BF
00029cc1: ZF := 0 = #5786
.address 0x4049C6
00029ccb: when ZF goto %00029cc5
00044654: goto %000434b5

.address 0x4049C8
000434b5: 
.address 0x4049C8
000434c0: #9172 := mem[0x621338, el]:u32
.address 0x4049C8
000434c3: CF := mem[0x621338, el]:u32 < 0
.address 0x4049C8
000434c6: OF := high:1[mem[0x621338, el]:u32 & (mem[0x621338, el]:u32 ^ #9172)]
.address 0x4049C8
000434c9: AF := 0x10 = (0x10 & (#9172 ^ mem[0x621338, el]:u32))
.address 0x4049C8
000434cc: PF := ~low:1[let $1 = #9172 >> 4 ^ #9172 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4049C8
000434cf: SF := high:1[#9172]
.address 0x4049C8
000434d2: ZF := 0 = #9172
.address 0x4049CF
000434db: when ZF goto %00040a3a
00044655: goto %0004285d

.address 0x404E80
00040a3a: 
.address 0x404E80
00040a45: #8935 := mem[0x621311]
.address 0x404E80
00040a48: CF := mem[0x621311] < 0
.address 0x404E80
00040a4b: OF := high:1[mem[0x621311] & (mem[0x621311] ^ #8935)]
.address 0x404E80
00040a4e: AF := 0x10 = (0x10 & (#8935 ^ mem[0x621311]))
.address 0x404E80
00040a51: PF := ~low:1[let $1 = #8935 >> 4 ^ #8935 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404E80
00040a54: SF := high:1[#8935]
.address 0x404E80
00040a57: ZF := 0 = #8935
.address 0x404E87
00040a61: when ZF goto %00040a5b
00044656: goto %0004285b

.address 0x404E8D
0004285b: 
.address 0x404E8D
00042861: goto %0004285d

.address 0x4049D5
0004285d: 
.address 0x4049D5
00042867: mem := mem with [0x621318] <- 0
00044657: goto %00029cc5

.address 0x4049DC
00029cc5: 
.address 0x4049DC
00029cd5: RAX := pad:64[mem[0x621334, el]:u32]
.address 0x4049E2
00029cdc: RDX := pad:64[mem[0x621338, el]:u32]
.address 0x4049E8
00029cea: #5788 := low:32[RAX]
.address 0x4049E8
00029ced: RAX := pad:64[low:32[RAX] - 1]
.address 0x4049E8
00029cf0: CF := #5788 < 1
.address 0x4049E8
00029cf3: OF := high:1[(#5788 ^ 1) & (#5788 ^ low:32[RAX])]
.address 0x4049E8
00029cf6: AF := 0x10 = (0x10 & (low:32[RAX] ^ #5788 ^ 1))
.address 0x4049E8
00029cf9: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4049E8
00029cfc: SF := high:1[low:32[RAX]]
.address 0x4049E8
00029cff: ZF := 0 = low:32[RAX]
.address 0x4049EB
00029d0c: #5791 := low:32[RAX] - 1
.address 0x4049EB
00029d0f: CF := low:32[RAX] < 1
.address 0x4049EB
00029d12: OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #5791)]
.address 0x4049EB
00029d15: AF := 0x10 = (0x10 & (#5791 ^ low:32[RAX] ^ 1))
.address 0x4049EB
00029d18: PF := ~low:1[let $1 = #5791 >> 4 ^ #5791 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4049EB
00029d1b: SF := high:1[#5791]
.address 0x4049EB
00029d1e: ZF := 0 = #5791
.address 0x4049EE
00029d28: when ~(CF | ZF) goto %00029d22
00044658: goto %00043489

.address 0x4049F0
00043489: 
.address 0x4049F0
00043494: #9170 := mem[RSP + 8]
.address 0x4049F0
00043497: CF := mem[RSP + 8] < 0
.address 0x4049F0
0004349a: OF := high:1[mem[RSP + 8] & (mem[RSP + 8] ^ #9170)]
.address 0x4049F0
0004349d: AF := 0x10 = (0x10 & (#9170 ^ mem[RSP + 8]))
.address 0x4049F0
000434a0: PF := ~low:1[let $1 = #9170 >> 4 ^ #9170 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4049F0
000434a3: SF := high:1[#9170]
.address 0x4049F0
000434a6: ZF := 0 = #9170
.address 0x4049F5
000434af: when ZF goto %00041a16
00044659: goto %00029d22

.address 0x405333
00041a16: 
.address 0x405333
00041a21: #8996 := low:32[RDX]
.address 0x405333
00041a24: OF := 0
.address 0x405333
00041a27: CF := 0
.address 0x405333
00041a2a: AF := unknown[bits]:u1
.address 0x405333
00041a2d: PF := ~low:1[let $1 = #8996 >> 4 ^ #8996 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405333
00041a30: SF := high:1[#8996]
.address 0x405333
00041a33: ZF := 0 = #8996
.address 0x405335
00041a3c: when ZF goto %00040a5b
0004465a: goto %00041a42

.address 0x40533B
00041a42: 
.address 0x40533B
00041a47: mem := mem with [0x621330, el]:u32 <- 4
.address 0x405345
00041a4e: goto %00029d4e

.address 0x4049FB
00029d22: 
.address 0x4049FB
00029d38: #5793 := low:32[RDX]
.address 0x4049FB
00029d3b: OF := 0
.address 0x4049FB
00029d3e: CF := 0
.address 0x4049FB
00029d41: AF := unknown[bits]:u1
.address 0x4049FB
00029d44: PF := ~low:1[let $1 = #5793 >> 4 ^ #5793 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4049FB
00029d47: SF := high:1[#5793]
.address 0x4049FB
00029d4a: ZF := 0 = #5793
.address 0x4049FD
00029d54: when ~ZF goto %00029d4e
0004465b: goto %00040a5b

.address 0x4049FF
00040a5b: 
.address 0x4049FF
00040a71: #8937 := R14
.address 0x4049FF
00040a74: OF := 0
.address 0x4049FF
00040a77: CF := 0
.address 0x4049FF
00040a7a: AF := unknown[bits]:u1
.address 0x4049FF
00040a7d: PF := ~low:1[let $1 = #8937 >> 4 ^ #8937 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4049FF
00040a80: SF := high:1[#8937]
.address 0x4049FF
00040a83: ZF := 0 = #8937
.address 0x404A02
00040a8d: when ZF goto %00040a87
0004465c: goto %00040ad0

.address 0x405367
00040a87: 
.address 0x405367
00040a97: RDI := 0x417E79
.address 0x40536E
00040aa0: RSP := RSP - 8
.address 0x40536E
00040aa3: mem := mem with [RSP, el]:u64 <- 0x405373
.address 0x40536E
00040aa6: call @sub_4037a0 with return %00040aa8

.address 0x405373
00040aa8: 
.address 0x405373
00040ab3: #8939 := RAX
.address 0x405373
00040ab6: OF := 0
.address 0x405373
00040ab9: CF := 0
.address 0x405373
00040abc: AF := unknown[bits]:u1
.address 0x405373
00040abf: PF := ~low:1[let $1 = #8939 >> 4 ^ #8939 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405373
00040ac2: SF := high:1[#8939]
.address 0x405373
00040ac5: ZF := 0 = #8939
.address 0x405376
00040acc: R14 := RAX
.address 0x405379
00040ad6: when ~ZF goto %00040ad0
0004465d: goto %0004284d

.address 0x40537F
0004284d: 
.address 0x40537F
00042852: R14 := 0x417DA0
.address 0x405386
00042859: goto %000425a8

.address 0x404A08
00040ad0: 
.address 0x404A08
00040ae0: R13 := 0x416AD3
.address 0x404A0F
00040ae8: goto %00040ae4

.address 0x404A1C
00040ae4: 
.address 0x404A1C
00040aee: RDX := 6
.address 0x404A21
00040af5: RSI := R13
.address 0x404A24
00040afc: RDI := R14
.address 0x404A27
00040b05: RSP := RSP - 8
.address 0x404A27
00040b08: mem := mem with [RSP, el]:u64 <- 0x404A2C
.address 0x404A27
00040b0b: call @sub_403800 with return %00040b0d

.address 0x404A2C
00040b0d: 
.address 0x404A2C
00040b18: #8941 := low:32[RAX]
.address 0x404A2C
00040b1b: OF := 0
.address 0x404A2C
00040b1e: CF := 0
.address 0x404A2C
00040b21: AF := unknown[bits]:u1
.address 0x404A2C
00040b24: PF := ~low:1[let $1 = #8941 >> 4 ^ #8941 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404A2C
00040b27: SF := high:1[#8941]
.address 0x404A2C
00040b2a: ZF := 0 = #8941
.address 0x404A2E
00040b34: when ~ZF goto %00040b2e
0004465e: goto %000427e5

.address 0x405243
00040b2e: 
.address 0x405243
00040b44: #8943 := mem[R14] - 0x2B
.address 0x405243
00040b47: CF := mem[R14] < 0x2B
.address 0x405243
00040b4a: OF := high:1[(mem[R14] ^ 0x2B) & (mem[R14] ^ #8943)]
.address 0x405243
00040b4d: AF := 0x10 = (0x10 & (#8943 ^ mem[R14] ^ 0x2B))
.address 0x405243
00040b50: PF := ~low:1[let $1 = #8943 >> 4 ^ #8943 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405243
00040b53: SF := high:1[#8943]
.address 0x405243
00040b56: ZF := 0 = #8943
.address 0x405247
00040b60: when ZF goto %00040b5a
0004465f: goto %000425a8

.address 0x40538B
00040b5a: 
.address 0x40538B
00040b71: #8945 := R14
.address 0x40538B
00040b74: R14 := R14 + 1
.address 0x40538B
00040b77: CF := R14 < #8945
.address 0x40538B
00040b7a: OF := ~high:1[#8945] & (high:1[#8945] | high:1[R14]) & ~(high:1[#8945] & high:1[R14])
.address 0x40538B
00040b7d: AF := 0x10 = (0x10 & (R14 ^ #8945 ^ 1))
.address 0x40538B
00040b80: PF := ~low:1[let $1 = R14 >> 4 ^ R14 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40538B
00040b83: SF := high:1[R14]
.address 0x40538B
00040b86: ZF := 0 = R14
.address 0x40538F
00040b8d: RSI := 0xA
.address 0x405394
00040b94: RDI := R14
.address 0x405397
00040b9d: RSP := RSP - 8
.address 0x405397
00040ba0: mem := mem with [RSP, el]:u64 <- 0x40539C
.address 0x405397
00040ba3: call @sub_4039a0 with return %00040ba5

.address 0x40539C
00040ba5: 
.address 0x40539C
00040bb0: #8948 := RAX
.address 0x40539C
00040bb3: OF := 0
.address 0x40539C
00040bb6: CF := 0
.address 0x40539C
00040bb9: AF := unknown[bits]:u1
.address 0x40539C
00040bbc: PF := ~low:1[let $1 = #8948 >> 4 ^ #8948 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40539C
00040bbf: SF := high:1[#8948]
.address 0x40539C
00040bc2: ZF := 0 = #8948
.address 0x40539F
00040bc9: R13 := RAX
.address 0x4053A2
00040bd3: when ZF goto %00040bcd
00044660: goto %00042551

.address 0x40559B
00040bcd: 
.address 0x40559B
00040bdd: R15 := R14
.address 0x40559E
00040be5: goto %00040be1

.address 0x4053A8
00042551: 
.address 0x4053A8
00042556: R15 := low:64[RAX + 1]
.address 0x4053AC
0004255d: RSI := 0xA
.address 0x4053B1
00042564: RDI := R15
.address 0x4053B4
0004256d: RSP := RSP - 8
.address 0x4053B4
00042570: mem := mem with [RSP, el]:u64 <- 0x4053B9
.address 0x4053B4
00042573: call @sub_4039a0 with return %00042575

.address 0x4053B9
00042575: 
.address 0x4053B9
00042580: #9053 := RAX
.address 0x4053B9
00042583: OF := 0
.address 0x4053B9
00042586: CF := 0
.address 0x4053B9
00042589: AF := unknown[bits]:u1
.address 0x4053B9
0004258c: PF := ~low:1[let $1 = #9053 >> 4 ^ #9053 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4053B9
0004258f: SF := high:1[#9053]
.address 0x4053B9
00042592: ZF := 0 = #9053
.address 0x4053BC
0004259b: when ~ZF goto %00042307
00044661: goto %000425a1

.address 0x405797
00042307: 
.address 0x405797
0004230c: RDI := R14
.address 0x40579A
00042315: RSP := RSP - 8
.address 0x40579A
00042318: mem := mem with [RSP, el]:u64 <- 0x40579F
.address 0x40579A
0004231b: call @sub_413ce0 with return %0004231d

.address 0x40579F
0004231d: 
.address 0x40579F
00042322: RSI := 0x417E84
.address 0x4057A6
00042329: RBX := RAX
.address 0x4057A9
00042330: RDX := 5
.address 0x4057AE
0004233d: RDI := 0
.address 0x4057AE
00042340: AF := unknown[bits]:u1
.address 0x4057AE
00042343: ZF := 1
.address 0x4057AE
00042346: PF := 1
.address 0x4057AE
00042349: OF := 0
.address 0x4057AE
0004234c: CF := 0
.address 0x4057AE
0004234f: SF := 0
.address 0x4057B0
00042358: RSP := RSP - 8
.address 0x4057B0
0004235b: mem := mem with [RSP, el]:u64 <- 0x4057B5
.address 0x4057B0
0004235e: call @sub_403930 with return %00042360

.address 0x4057B5
00042360: 
.address 0x4057B5
00042365: RCX := RBX
.address 0x4057B8
0004236c: RDX := RAX
.address 0x4057BB
00042379: RSI := 0
.address 0x4057BB
0004237c: AF := unknown[bits]:u1
.address 0x4057BB
0004237f: ZF := 1
.address 0x4057BB
00042382: PF := 1
.address 0x4057BB
00042385: OF := 0
.address 0x4057BB
00042388: CF := 0
.address 0x4057BB
0004238b: SF := 0
.address 0x4057BD
00042392: RDI := 2
.address 0x4057C2
0004239f: RAX := 0
.address 0x4057C2
000423a2: AF := unknown[bits]:u1
.address 0x4057C2
000423a5: ZF := 1
.address 0x4057C2
000423a8: PF := 1
.address 0x4057C2
000423ab: OF := 0
.address 0x4057C2
000423ae: CF := 0
.address 0x4057C2
000423b1: SF := 0
.address 0x4057C4
000423ba: RSP := RSP - 8
.address 0x4057C4
000423bd: mem := mem with [RSP, el]:u64 <- 0x4057C9
.address 0x4057C4
000423c0: call @sub_403d20 with return %00041709

.address 0x4057C9
00041709: 
.address 0x4057C9
00041719: R8 := mem[0x6202A0, el]:u64
.address 0x4057D0
00041720: RSI := pad:64[mem[RSP + 0x30, el]:u32]
.address 0x4057D4
00041727: RCX := 0x61F2E0
.address 0x4057DB
00041734: RDX := 0
.address 0x4057DB
00041737: AF := unknown[bits]:u1
.address 0x4057DB
0004173a: ZF := 1
.address 0x4057DB
0004173d: PF := 1
.address 0x4057DB
00041740: OF := 0
.address 0x4057DB
00041743: CF := 0
.address 0x4057DB
00041746: SF := 0
.address 0x4057DD
0004174d: RDI := pad:64[low:32[RAX]]
.address 0x4057DF
00041756: RSP := RSP - 8
.address 0x4057DF
00041759: mem := mem with [RSP, el]:u64 <- 0x4057E4
.address 0x4057DF
0004175c: call @sub_414d70 with return %0004175e

.address 0x4053C2
000425a1: 
.address 0x4053C2
000425a6: mem := mem with [R13] <- 0
00044662: goto %00040be1

.address 0x4053C7
00040be1: 
.address 0x4053C7
00040beb: mem := mem with [0x620040, el]:u64 <- R14
.address 0x4053CE
00040bf2: mem := mem with [0x620048, el]:u64 <- R15
.address 0x4053D5
00040bfa: goto %00040bf6

.address 0x40524D
000425a8: 
.address 0x40524D
000425ad: RDX := 0x416B80
.address 0x405254
000425b4: RSI := 0x61F980
.address 0x40525B
000425bb: RCX := 4
.address 0x405260
000425c2: RDI := R14
.address 0x405263
000425cb: RSP := RSP - 8
.address 0x405263
000425ce: mem := mem with [RSP, el]:u64 <- 0x405268
.address 0x405263
000425d1: call @sub_40c2c0 with return %000425d3

.address 0x405268
000425d3: 
.address 0x405268
000425de: #9055 := RAX
.address 0x405268
000425e1: OF := 0
.address 0x405268
000425e4: CF := 0
.address 0x405268
000425e7: AF := unknown[bits]:u1
.address 0x405268
000425ea: PF := ~low:1[let $1 = #9055 >> 4 ^ #9055 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405268
000425ed: SF := high:1[#9055]
.address 0x405268
000425f0: ZF := 0 = #9055
.address 0x40526B
000425f9: when SF goto %00041eb3
00044663: goto %000425ff

.address 0x405606
00041eb3: 
.address 0x405606
00041eb8: RDI := 0x417EA1
.address 0x40560D
00041ebf: RDX := RAX
.address 0x405610
00041ec6: RSI := R14
.address 0x405613
00041ecd: RBP := 0x417EC2
.address 0x40561A
00041ed6: RSP := RSP - 8
.address 0x40561A
00041ed9: mem := mem with [RSP, el]:u64 <- 0x40561F
.address 0x40561A
00041edc: call @sub_40c3e0 with return %00041ede

.address 0x40561F
00041ede: 
.address 0x40561F
00041ee3: RBX := mem[0x6202C0, el]:u64
.address 0x405626
00041eea: RSI := 0x417EAC
.address 0x40562D
00041ef1: RDX := 5
.address 0x405632
00041efe: RDI := 0
.address 0x405632
00041f01: AF := unknown[bits]:u1
.address 0x405632
00041f04: ZF := 1
.address 0x405632
00041f07: PF := 1
.address 0x405632
00041f0a: OF := 0
.address 0x405632
00041f0d: CF := 0
.address 0x405632
00041f10: SF := 0
.address 0x405634
00041f19: RSP := RSP - 8
.address 0x405634
00041f1c: mem := mem with [RSP, el]:u64 <- 0x405639
.address 0x405634
00041f1f: call @sub_403930 with return %00041f21

.address 0x405639
00041f21: 
.address 0x405639
00041f26: RSI := RBX
.address 0x40563C
00041f2d: RDI := RAX
.address 0x40563F
00041f34: RBX := 0x61F980
.address 0x405646
00041f3d: RSP := RSP - 8
.address 0x405646
00041f40: mem := mem with [RSP, el]:u64 <- 0x40564B
.address 0x405646
00041f43: call @sub_403af0 with return %00041f45

.address 0x40564B
00041f45: 
.address 0x40564B
00041f4a: RCX := 0x417D89
00044664: goto %00041f4c

.address 0x405652
00041f4c: 
.address 0x405652
00041f51: RDI := mem[0x6202C0, el]:u64
.address 0x405659
00041f5f: #9021 := RBX
.address 0x405659
00041f62: RBX := RBX + 8
.address 0x405659
00041f65: CF := RBX < #9021
.address 0x405659
00041f68: OF := ~high:1[#9021] & (high:1[#9021] | high:1[RBX]) & ~(high:1[#9021] & high:1[RBX])
.address 0x405659
00041f6b: AF := 0x10 = (0x10 & (RBX ^ #9021 ^ 8))
.address 0x405659
00041f6e: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405659
00041f71: SF := high:1[RBX]
.address 0x405659
00041f74: ZF := 0 = RBX
.address 0x40565D
00041f81: RAX := 0
.address 0x40565D
00041f84: AF := unknown[bits]:u1
.address 0x40565D
00041f87: ZF := 1
.address 0x40565D
00041f8a: PF := 1
.address 0x40565D
00041f8d: OF := 0
.address 0x40565D
00041f90: CF := 0
.address 0x40565D
00041f93: SF := 0
.address 0x40565F
00041f9a: RDX := RBP
.address 0x405662
00041fa1: RSI := 1
.address 0x405667
00041faa: RSP := RSP - 8
.address 0x405667
00041fad: mem := mem with [RSP, el]:u64 <- 0x40566C
.address 0x405667
00041fb0: call @sub_403df0 with return %00041fb2

.address 0x40566C
00041fb2: 
.address 0x40566C
00041fb7: RCX := mem[RBX, el]:u64
.address 0x40566F
00041fc4: #9024 := RCX
.address 0x40566F
00041fc7: OF := 0
.address 0x40566F
00041fca: CF := 0
.address 0x40566F
00041fcd: AF := unknown[bits]:u1
.address 0x40566F
00041fd0: PF := ~low:1[let $1 = #9024 >> 4 ^ #9024 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40566F
00041fd3: SF := high:1[#9024]
.address 0x40566F
00041fd6: ZF := 0 = #9024
.address 0x405672
00041fdf: when ~ZF goto %00041f4c
00044665: goto %00041fe5

.address 0x405674
00041fe5: 
.address 0x405674
00041fea: RBX := mem[0x6202C0, el]:u64
.address 0x40567B
00041ff1: RSI := 0x41A178
.address 0x405682
00041ffe: RDI := 0
.address 0x405682
00042001: AF := unknown[bits]:u1
.address 0x405682
00042004: ZF := 1
.address 0x405682
00042007: PF := 1
.address 0x405682
0004200a: OF := 0
.address 0x405682
0004200d: CF := 0
.address 0x405682
00042010: SF := 0
.address 0x405684
00042017: RDX := 5
.address 0x405689
00042020: RSP := RSP - 8
.address 0x405689
00042023: mem := mem with [RSP, el]:u64 <- 0x40568E
.address 0x405689
00042026: call @sub_403930 with return %00042028

.address 0x40568E
00042028: 
.address 0x40568E
0004202d: RSI := RBX
.address 0x405691
00042034: RDI := RAX
.address 0x405694
0004203d: RSP := RSP - 8
.address 0x405694
00042040: mem := mem with [RSP, el]:u64 <- 0x405699
.address 0x405694
00042043: call @sub_403af0 with return %00042045

.address 0x405271
000425ff: 
.address 0x405271
0004260a: #9057 := RAX - 1
.address 0x405271
0004260d: CF := RAX < 1
.address 0x405271
00042610: OF := high:1[(RAX ^ 1) & (RAX ^ #9057)]
.address 0x405271
00042613: AF := 0x10 = (0x10 & (#9057 ^ RAX ^ 1))
.address 0x405271
00042616: PF := ~low:1[let $1 = #9057 >> 4 ^ #9057 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405271
00042619: SF := high:1[#9057]
.address 0x405271
0004261c: ZF := 0 = #9057
.address 0x405275
00042626: when ZF goto %00042620
00044666: goto %000426b8

.address 0x405731
00042620: 
.address 0x405731
00042630: RAX := 0x417EEA
.address 0x405738
00042637: mem := mem with [0x620048, el]:u64 <- RAX
.address 0x40573F
0004263e: mem := mem with [0x620040, el]:u64 <- RAX
.address 0x405746
00042645: goto %00040bf6

.address 0x40527B
000426b8: 
.address 0x40527B
000426bf: when ZF | (SF | OF) & ~(SF & OF) goto %00041e3d
00044667: goto %000426c5

.address 0x405578
00041e3d: 
.address 0x405578
00041e48: #9019 := RAX
.address 0x405578
00041e4b: OF := 0
.address 0x405578
00041e4e: CF := 0
.address 0x405578
00041e51: AF := unknown[bits]:u1
.address 0x405578
00041e54: PF := ~low:1[let $1 = #9019 >> 4 ^ #9019 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405578
00041e57: SF := high:1[#9019]
.address 0x405578
00041e5a: ZF := 0 = #9019
.address 0x40557B
00041e63: when ~ZF goto %00040bf6
00044668: goto %00041e69

.address 0x405581
00041e69: 
.address 0x405581
00041e6e: RAX := 0x417ED2
.address 0x405588
00041e75: mem := mem with [0x620048, el]:u64 <- RAX
.address 0x40558F
00041e7c: mem := mem with [0x620040, el]:u64 <- RAX
.address 0x405596
00041e83: goto %00040bf6

.address 0x405281
000426c5: 
.address 0x405281
000426d0: #9062 := RAX - 2
.address 0x405281
000426d3: CF := RAX < 2
.address 0x405281
000426d6: OF := high:1[(RAX ^ 2) & (RAX ^ #9062)]
.address 0x405281
000426d9: AF := 0x10 = (0x10 & (#9062 ^ RAX ^ 2))
.address 0x405281
000426dc: PF := ~low:1[let $1 = #9062 >> 4 ^ #9062 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405281
000426df: SF := high:1[#9062]
.address 0x405281
000426e2: ZF := 0 = #9062
.address 0x405285
000426eb: when ZF goto %00042647
00044669: goto %000426f1

.address 0x40574B
00042647: 
.address 0x40574B
0004264c: RAX := 0x417EF9
.address 0x405752
00042653: mem := mem with [0x620040, el]:u64 <- RAX
.address 0x405759
0004265a: RAX := 0x417EED
.address 0x405760
00042661: mem := mem with [0x620048, el]:u64 <- RAX
.address 0x405767
00042668: goto %00040bf6

.address 0x40528B
000426f1: 
.address 0x40528B
000426fc: #9064 := RAX - 3
.address 0x40528B
000426ff: CF := RAX < 3
.address 0x40528B
00042702: OF := high:1[(RAX ^ 3) & (RAX ^ #9064)]
.address 0x40528B
00042705: AF := 0x10 = (0x10 & (#9064 ^ RAX ^ 3))
.address 0x40528B
00042708: PF := ~low:1[let $1 = #9064 >> 4 ^ #9064 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40528B
0004270b: SF := high:1[#9064]
.address 0x40528B
0004270e: ZF := 0 = #9064
.address 0x40528F
00042717: when ~ZF goto %00040bf6
0004466a: goto %0004271d

.address 0x405291
0004271d: 
.address 0x405291
00042722: RDI := 2
.address 0x405296
0004272b: RSP := RSP - 8
.address 0x405296
0004272e: mem := mem with [RSP, el]:u64 <- 0x40529B
.address 0x405296
00042731: call @sub_40d830 with return %00042733

.address 0x40529B
00042733: 
.address 0x40529B
0004273e: #9066 := low:8[RAX]
.address 0x40529B
00042741: OF := 0
.address 0x40529B
00042744: CF := 0
.address 0x40529B
00042747: AF := unknown[bits]:u1
.address 0x40529B
0004274a: PF := ~low:1[let $1 = #9066 >> 4 ^ #9066 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40529B
0004274d: SF := high:1[#9066]
.address 0x40529B
00042750: ZF := 0 = #9066
.address 0x40529D
00042759: when ZF goto %00040bf6
0004466b: goto %0004275f

.address 0x40529F
0004275f: 
.address 0x40529F
00042764: RSI := mem[0x620040, el]:u64
.address 0x4052A6
0004276b: RDX := 2
.address 0x4052AB
00042778: RDI := 0
.address 0x4052AB
0004277b: AF := unknown[bits]:u1
.address 0x4052AB
0004277e: ZF := 1
.address 0x4052AB
00042781: PF := 1
.address 0x4052AB
00042784: OF := 0
.address 0x4052AB
00042787: CF := 0
.address 0x4052AB
0004278a: SF := 0
.address 0x4052AD
00042793: RSP := RSP - 8
.address 0x4052AD
00042796: mem := mem with [RSP, el]:u64 <- 0x4052B2
.address 0x4052AD
00042799: call @sub_403930 with return %0004279b

.address 0x4052B2
0004279b: 
.address 0x4052B2
000427a0: RSI := mem[0x620048, el]:u64
.address 0x4052B9
000427a7: RDX := 2
.address 0x4052BE
000427b4: RDI := 0
.address 0x4052BE
000427b7: AF := unknown[bits]:u1
.address 0x4052BE
000427ba: ZF := 1
.address 0x4052BE
000427bd: PF := 1
.address 0x4052BE
000427c0: OF := 0
.address 0x4052BE
000427c3: CF := 0
.address 0x4052BE
000427c6: SF := 0
.address 0x4052C0
000427cd: mem := mem with [0x620040, el]:u64 <- RAX
.address 0x4052C7
000427d6: RSP := RSP - 8
.address 0x4052C7
000427d9: mem := mem with [RSP, el]:u64 <- 0x4052CC
.address 0x4052C7
000427dc: call @sub_403930 with return %000427de

.address 0x4052CC
000427de: 
.address 0x4052CC
000427e3: mem := mem with [0x620048, el]:u64 <- RAX
0004466c: goto %00040bf6

.address 0x4052D3
00040bf6: 
.address 0x4052D3
00040c02: RSP := RSP - 8
.address 0x4052D3
00040c05: mem := mem with [RSP, el]:u64 <- 0x4052D8
.address 0x4052D3
00040c08: call @sub_405d20 with return %00040c0a

.address 0x4052D8
00040c0a: 
.address 0x4052D8
00040c0f: goto %00029d4e

.address 0x404A34
000427e5: 
.address 0x404A34
000427ea: RDI := 2
.address 0x404A39
000427f3: RSP := RSP - 8
.address 0x404A39
000427f6: mem := mem with [RSP, el]:u64 <- 0x404A3E
.address 0x404A39
000427f9: call @sub_40d830 with return %000427fb

.address 0x404A3E
000427fb: 
.address 0x404A3E
00042806: #9068 := low:8[RAX]
.address 0x404A3E
00042809: OF := 0
.address 0x404A3E
0004280c: CF := 0
.address 0x404A3E
0004280f: AF := unknown[bits]:u1
.address 0x404A3E
00042812: PF := ~low:1[let $1 = #9068 >> 4 ^ #9068 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404A3E
00042815: SF := high:1[#9068]
.address 0x404A3E
00042818: ZF := 0 = #9068
.address 0x404A40
00042822: when ~ZF goto %0004281c
0004466d: goto %00029d4e

.address 0x404A42
00029d4e: 
.address 0x404A42
00029d64: #5795 := mem[0x621312]
.address 0x404A42
00029d67: CF := mem[0x621312] < 0
.address 0x404A42
00029d6a: OF := high:1[mem[0x621312] & (mem[0x621312] ^ #5795)]
.address 0x404A42
00029d6d: AF := 0x10 = (0x10 & (#5795 ^ mem[0x621312]))
.address 0x404A42
00029d70: PF := ~low:1[let $1 = #5795 >> 4 ^ #5795 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404A42
00029d73: SF := high:1[#5795]
.address 0x404A42
00029d76: ZF := 0 = #5795
.address 0x404A49
00029d7d: R13 := extend:64[mem[0x620290, el]:u32]
.address 0x404A50
00029d87: when ~ZF goto %00029d81
0004466e: goto %00029e88

.address 0x4050C1
00029d81: 
.address 0x4050C1
00029d91: RDI := 0x417F03
.address 0x4050C8
00029d9a: RSP := RSP - 8
.address 0x4050C8
00029d9d: mem := mem with [RSP, el]:u64 <- 0x4050CD
.address 0x4050C8
00029da0: call @sub_4037a0 with return %00029da2

.address 0x4050CD
00029da2: 
.address 0x4050CD
00029dad: #5797 := RAX
.address 0x4050CD
00029db0: OF := 0
.address 0x4050CD
00029db3: CF := 0
.address 0x4050CD
00029db6: AF := unknown[bits]:u1
.address 0x4050CD
00029db9: PF := ~low:1[let $1 = #5797 >> 4 ^ #5797 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4050CD
00029dbc: SF := high:1[#5797]
.address 0x4050CD
00029dbf: ZF := 0 = #5797
.address 0x4050D0
00029dc6: mem := mem with [RSP + 0x28, el]:u64 <- RAX
.address 0x4050D5
00029dd0: when ZF goto %00029dca
0004466f: goto %0004345d

.address 0x4050D7
0004345d: 
.address 0x4050D7
00043468: #9168 := mem[RAX]
.address 0x4050D7
0004346b: CF := mem[RAX] < 0
.address 0x4050D7
0004346e: OF := high:1[mem[RAX] & (mem[RAX] ^ #9168)]
.address 0x4050D7
00043471: AF := 0x10 = (0x10 & (#9168 ^ mem[RAX]))
.address 0x4050D7
00043474: PF := ~low:1[let $1 = #9168 >> 4 ^ #9168 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4050D7
00043477: SF := high:1[#9168]
.address 0x4050D7
0004347a: ZF := 0 = #9168
.address 0x4050DA
00043483: when ~ZF goto %00041a92
00044670: goto %00029dca

.address 0x4053DA
00041a92: 
.address 0x4053DA
00041a97: RDI := RAX
.address 0x4053DD
00041a9e: R15 := 0x61F860
.address 0x4053E4
00041aa5: mem := mem with [RSP + 0x45, el]:u16 <- 0x3F3F
.address 0x4053EB
00041aac: mem := mem with [RSP + 0x47] <- 0
.address 0x4053F0
00041ab5: RSP := RSP - 8
.address 0x4053F0
00041ab8: mem := mem with [RSP, el]:u64 <- 0x4053F5
.address 0x4053F0
00041abb: call @sub_4146b0 with return %00041abd

.address 0x4053F5
00041abd: 
.address 0x4053F5
00041ac2: mem := mem with [RSP + 8, el]:u32 <- low:32[RBP]
.address 0x4053F9
00041ac9: mem := mem with [0x621300, el]:u64 <- RAX
.address 0x405400
00041ad0: mem := mem with [RSP + 0x30, el]:u64 <- RAX
.address 0x405405
00041ad7: mem := mem with [RSP + 0x10, el]:u64 <- RBX
00044671: goto %00041ad9

.address 0x4050E0
00029dca: 
.address 0x4050E0
00029dda: RDI := 0x417F0D
.address 0x4050E7
00029de3: RSP := RSP - 8
.address 0x4050E7
00029de6: mem := mem with [RSP, el]:u64 <- 0x4050EC
.address 0x4050E7
00029de9: call @sub_4037a0 with return %00029deb

.address 0x4050EC
00029deb: 
.address 0x4050EC
00029df6: #5799 := RAX
.address 0x4050EC
00029df9: OF := 0
.address 0x4050EC
00029dfc: CF := 0
.address 0x4050EC
00029dff: AF := unknown[bits]:u1
.address 0x4050EC
00029e02: PF := ~low:1[let $1 = #5799 >> 4 ^ #5799 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4050EC
00029e05: SF := high:1[#5799]
.address 0x4050EC
00029e08: ZF := 0 = #5799
.address 0x4050EF
00029e12: when ZF goto %00029e0c
00044672: goto %00043431

.address 0x4050F1
00043431: 
.address 0x4050F1
0004343c: #9166 := mem[RAX]
.address 0x4050F1
0004343f: CF := mem[RAX] < 0
.address 0x4050F1
00043442: OF := high:1[mem[RAX] & (mem[RAX] ^ #9166)]
.address 0x4050F1
00043445: AF := 0x10 = (0x10 & (#9166 ^ mem[RAX]))
.address 0x4050F1
00043448: PF := ~low:1[let $1 = #9166 >> 4 ^ #9166 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4050F1
0004344b: SF := high:1[#9166]
.address 0x4050F1
0004344e: ZF := 0 = #9166
.address 0x4050F4
00043457: when ~ZF goto %00029e67
00044673: goto %00029e0c

.address 0x4050FA
00029e0c: 
.address 0x4050FA
00029e1c: RDI := 0x417F12
.address 0x405101
00029e25: RSP := RSP - 8
.address 0x405101
00029e28: mem := mem with [RSP, el]:u64 <- 0x405106
.address 0x405101
00029e2b: call @sub_4037a0 with return %00029e2d

.address 0x405106
00029e2d: 
.address 0x405106
00029e38: #5801 := RAX
.address 0x405106
00029e3b: OF := 0
.address 0x405106
00029e3e: CF := 0
.address 0x405106
00029e41: AF := unknown[bits]:u1
.address 0x405106
00029e44: PF := ~low:1[let $1 = #5801 >> 4 ^ #5801 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405106
00029e47: SF := high:1[#5801]
.address 0x405106
00029e4a: ZF := 0 = #5801
.address 0x405109
00029e51: mem := mem with [RSP + 8, el]:u64 <- RAX
.address 0x40510E
00029e5b: when ZF goto %00029e55
00044674: goto %000431fe

.address 0x405110
000431fe: 
.address 0x405110
00043203: RAX := mem[RSP + 8, el]:u64
.address 0x405115
00043210: #9146 := mem[RAX]
.address 0x405115
00043213: CF := mem[RAX] < 0
.address 0x405115
00043216: OF := high:1[mem[RAX] & (mem[RAX] ^ #9146)]
.address 0x405115
00043219: AF := 0x10 = (0x10 & (#9146 ^ mem[RAX]))
.address 0x405115
0004321c: PF := ~low:1[let $1 = #9146 >> 4 ^ #9146 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405115
0004321f: SF := high:1[#9146]
.address 0x405115
00043222: ZF := 0 = #9146
.address 0x405118
0004322b: when ZF goto %00029e55
00044675: goto %00043231

.address 0x40511A
00043231: 
.address 0x40511A
00043236: R14 := 0x416BA0
.address 0x405121
0004323d: RAX := R12
.address 0x405124
00043244: R12 := RBX
.address 0x405127
0004324b: R15 := RAX
.address 0x40512A
00043252: RBX := R14
.address 0x40512D
0004325a: goto %00043256

.address 0x405143
00043256: 
.address 0x405143
00043260: RAX := RBX
.address 0x405146
0004326f: #9148 := RAX
.address 0x405146
00043272: #9149 := R14
.address 0x405146
00043275: RAX := RAX - R14
.address 0x405146
00043278: CF := #9148 < #9149
.address 0x405146
0004327b: OF := high:1[(#9148 ^ #9149) & (#9148 ^ RAX)]
.address 0x405146
0004327e: AF := 0x10 = (0x10 & (RAX ^ #9148 ^ #9149))
.address 0x405146
00043281: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405146
00043284: SF := high:1[RAX]
.address 0x405146
00043287: ZF := 0 = RAX
.address 0x405149
00043294: #9151 := RAX - 0x104C
.address 0x405149
00043297: CF := RAX < 0x104C
.address 0x405149
0004329a: OF := high:1[(RAX ^ 0x104C) & (RAX ^ #9151)]
.address 0x405149
0004329d: AF := 0x10 = (0x10 & (#9151 ^ RAX ^ 0x104C))
.address 0x405149
000432a0: PF := ~low:1[let $1 = #9151 >> 4 ^ #9151 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405149
000432a3: SF := high:1[#9151]
.address 0x405149
000432a6: ZF := 0 = #9151
.address 0x40514F
000432b0: when ~(CF | ZF) goto %000432aa
00044676: goto %000432c3

.address 0x405185
000432aa: 
.address 0x405185
000432ba: RBX := R12
.address 0x405188
000432c1: R12 := R15
00044677: goto %00029e55

.address 0x40518B
00029e55: 
.address 0x40518B
00029e65: mem := mem with [0x621312] <- 0
00044678: goto %00029e67

.address 0x405151
000432c3: 
.address 0x405151
000432c8: RSI := 0x417F17
.address 0x405158
000432cf: RDX := 5
.address 0x40515D
000432d6: RDI := RBX
.address 0x405160
000432df: RSP := RSP - 8
.address 0x405160
000432e2: mem := mem with [RSP, el]:u64 <- 0x405165
.address 0x405160
000432e5: call @sub_403800 with return %000432e7

.address 0x405165
000432e7: 
.address 0x405165
000432f2: #9153 := low:32[RAX]
.address 0x405165
000432f5: OF := 0
.address 0x405165
000432f8: CF := 0
.address 0x405165
000432fb: AF := unknown[bits]:u1
.address 0x405165
000432fe: PF := ~low:1[let $1 = #9153 >> 4 ^ #9153 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405165
00043301: SF := high:1[#9153]
.address 0x405165
00043304: ZF := 0 = #9153
.address 0x405167
0004330e: when ~ZF goto %00043308
00044679: goto %000433b4

.address 0x405169
000433b4: 
.address 0x405169
000433b9: RSI := mem[RSP + 8, el]:u64
.address 0x40516E
000433c0: RDI := low:64[RBX + 5]
.address 0x405172
000433cd: RDX := 0
.address 0x405172
000433d0: AF := unknown[bits]:u1
.address 0x405172
000433d3: ZF := 1
.address 0x405172
000433d6: PF := 1
.address 0x405172
000433d9: OF := 0
.address 0x405172
000433dc: CF := 0
.address 0x405172
000433df: SF := 0
.address 0x405174
000433e8: RSP := RSP - 8
.address 0x405174
000433eb: mem := mem with [RSP, el]:u64 <- 0x405179
.address 0x405174
000433ee: call @sub_403a50 with return %000433f0

.address 0x405179
000433f0: 
.address 0x405179
000433fb: #9164 := low:32[RAX]
.address 0x405179
000433fe: OF := 0
.address 0x405179
00043401: CF := 0
.address 0x405179
00043404: AF := unknown[bits]:u1
.address 0x405179
00043407: PF := ~low:1[let $1 = #9164 >> 4 ^ #9164 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405179
0004340a: SF := high:1[#9164]
.address 0x405179
0004340d: ZF := 0 = #9164
.address 0x40517B
00043416: when ~ZF goto %00043308
0004467a: goto %0004341c

.address 0x40517D
0004341c: 
.address 0x40517D
00043421: RBX := R12
.address 0x405180
00043428: R12 := R15
.address 0x405183
0004342f: goto %00029e67

.address 0x40512F
00043308: 
.address 0x40512F
0004331e: RAX := 0
.address 0x40512F
00043321: AF := unknown[bits]:u1
.address 0x40512F
00043324: ZF := 1
.address 0x40512F
00043327: PF := 1
.address 0x40512F
0004332a: OF := 0
.address 0x40512F
0004332d: CF := 0
.address 0x40512F
00043330: SF := 0
.address 0x405131
00043337: RDI := RBX
.address 0x405134
00043344: RCX := 0xFFFFFFFFFFFFFFFF
.address 0x405134
00043347: OF := 0
.address 0x405134
0004334a: CF := 0
.address 0x405134
0004334d: AF := unknown[bits]:u1
.address 0x405134
00043350: PF := 1
.address 0x405134
00043353: SF := 1
.address 0x405134
00043356: ZF := 0
.address 0x405138
0004335e: #9160 := 1
.address 0x405138
0004337e: goto %00043378

00043360: 
.address 0x405138
00043361: #9156 := low:8[RAX]
.address 0x405138
00043363: #9157 := mem[RDI]
.address 0x405138
00043365: #9158 := #9156 - #9157
.address 0x405138
00043367: RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x405138
00043369: CF := #9156 < #9157
.address 0x405138
0004336b: OF := high:1[(#9156 ^ #9157) & (#9156 ^ #9158)]
.address 0x405138
0004336d: AF := 0x10 = (0x10 & (#9158 ^ #9156 ^ #9157))
.address 0x405138
0004336f: PF := ~low:1[let $1 = #9158 >> 4 ^ #9158 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405138
00043371: SF := high:1[#9158]
.address 0x405138
00043373: ZF := 0 = #9158
.address 0x405138
00043375: RCX := RCX - 1
.address 0x405138
00043377: #9160 := ~ZF
.address 0x405138
0004337c: goto %00043379

00043378: 
.address 0x405138
0004337b: goto %00043379

00043379: 
.address 0x405138
0004337a: when RCX <> 0 & #9160 goto %00043360
0004467b: goto %00043383

00043383: 
.address 0x40513A
00043384: RAX := RCX
.address 0x40513D
0004338b: RAX := ~RAX
.address 0x405140
0004339a: #9161 := RBX
.address 0x405140
0004339d: #9162 := RAX
.address 0x405140
000433a0: RBX := RBX + #9162
.address 0x405140
000433a3: CF := RBX < #9161
.address 0x405140
000433a6: OF := high:1[#9161] = high:1[#9162] & (high:1[#9161] | high:1[RBX]) & ~(
high:1[#9161] & high:1[RBX])
.address 0x405140
000433a9: AF := 0x10 = (0x10 & (RBX ^ #9161 ^ #9162))
.address 0x405140
000433ac: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405140
000433af: SF := high:1[RBX]
.address 0x405140
000433b2: ZF := 0 = RBX
0004467c: goto %00043256

.address 0x404A18
0004281c: 
.address 0x404A18
00042833: #9070 := R14
.address 0x404A18
00042836: R14 := R14 + 6
.address 0x404A18
00042839: CF := R14 < #9070
.address 0x404A18
0004283c: OF := ~high:1[#9070] & (high:1[#9070] | high:1[R14]) & ~(high:1[#9070] & high:1[R14])
.address 0x404A18
0004283f: AF := 0x10 = (0x10 & (R14 ^ #9070 ^ 6))
.address 0x404A18
00042842: PF := ~low:1[let $1 = R14 >> 4 ^ R14 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x404A18
00042845: SF := high:1[R14]
.address 0x404A18
00042848: ZF := 0 = R14
0004467d: goto %00040ae4

.address 0x404124
00043832: 
.address 0x404124
0004383e: #9199 := low:32[RAX]
.address 0x404124
00043841: RAX := pad:64[low:32[RAX] + 0x83]
.address 0x404124
00043844: CF := low:32[RAX] < #9199
.address 0x404124
00043847: OF := ~high:1[#9199] & (high:1[#9199] | high:1[low:32[RAX]]) & ~(
high:1[#9199] & high:1[low:32[RAX]])
.address 0x404124
0004384a: AF := 0x10 = (0x10 & (low:32[RAX] ^ #9199 ^ 0x83))
.address 0x404124
0004384d: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404124
00043850: SF := high:1[low:32[RAX]]
.address 0x404124
00043853: ZF := 0 = low:32[RAX]
.address 0x404129
00043860: #9202 := low:32[RAX] - 0x113
.address 0x404129
00043863: CF := low:32[RAX] < 0x113
.address 0x404129
00043866: OF := high:1[(low:32[RAX] ^ 0x113) & (low:32[RAX] ^ #9202)]
.address 0x404129
00043869: AF := 0x10 = (0x10 & (#9202 ^ low:32[RAX] ^ 0x113))
.address 0x404129
0004386c: PF := ~low:1[let $1 = #9202 >> 4 ^ #9202 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404129
0004386f: SF := high:1[#9202]
.address 0x404129
00043872: ZF := 0 = #9202
.address 0x40412E
0004387b: when ~(CF | ZF) goto %00042045
0004467e: goto %00043881

.address 0x405699
00042045: 
.address 0x405699
0004204a: RDI := 2
.address 0x40569E
00042053: RSP := RSP - 8
.address 0x40569E
00042056: mem := mem with [RSP, el]:u64 <- 0x4056A3
.address 0x40569E
00042059: call @sub_40bb20 with return %00041bc9

.address 0x4056A3
00041bc9: 
.address 0x4056A3
00041bd9: RAX := mem[RSP + 0x28, el]:u64
.address 0x4056A8
00041be0: RDX := low:64[RAX + 1]
.address 0x4056AC
00041be7: mem := mem with [RSP + 0x28, el]:u64 <- RDX
.address 0x4056B1
00041bf4: #9007 := mem[RAX] - 0x3D
.address 0x4056B1
00041bf7: CF := mem[RAX] < 0x3D
.address 0x4056B1
00041bfa: OF := high:1[(mem[RAX] ^ 0x3D) & (mem[RAX] ^ #9007)]
.address 0x4056B1
00041bfd: AF := 0x10 = (0x10 & (#9007 ^ mem[RAX] ^ 0x3D))
.address 0x4056B1
00041c00: PF := ~low:1[let $1 = #9007 >> 4 ^ #9007 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4056B1
00041c03: SF := high:1[#9007]
.address 0x4056B1
00041c06: ZF := 0 = #9007
.address 0x4056B4
00041c10: when ~ZF goto %00041c0a
0004467f: goto %0004205b

.address 0x4056BA
0004205b: 
.address 0x4056BA
00042060: RAX := mem[RSP + 0x30, el]:u64
.address 0x4056BF
00042067: RCX := low:64[R14 + 0x10]
.address 0x4056C3
00042074: RDX := 0
.address 0x4056C3
00042077: AF := unknown[bits]:u1
.address 0x4056C3
0004207a: ZF := 1
.address 0x4056C3
0004207d: PF := 1
.address 0x4056C3
00042080: OF := 0
.address 0x4056C3
00042083: CF := 0
.address 0x4056C3
00042086: SF := 0
.address 0x4056C5
0004208d: RSI := RBX
.address 0x4056C8
00042094: RDI := R12
.address 0x4056CB
0004209b: mem := mem with [R14 + 0x18, el]:u64 <- RAX
.address 0x4056CF
000420a4: RSP := RSP - 8
.address 0x4056CF
000420a7: mem := mem with [RSP, el]:u64 <- 0x4056D4
.address 0x4056CF
000420aa: call @sub_4059c0 with return %000420ac

.address 0x4056D4
000420ac: 
.address 0x4056D4
000420b7: #9026 := low:8[RAX]
.address 0x4056D4
000420ba: OF := 0
.address 0x4056D4
000420bd: CF := 0
.address 0x4056D4
000420c0: AF := unknown[bits]:u1
.address 0x4056D4
000420c3: PF := ~low:1[let $1 = #9026 >> 4 ^ #9026 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4056D4
000420c6: SF := high:1[#9026]
.address 0x4056D4
000420c9: ZF := 0 = #9026
.address 0x4056D6
000420d2: when ~ZF goto %00041ad9
00044680: goto %000420d8

.address 0x4056DC
000420d8: 
.address 0x4056DC
000420dd: goto %00041c0a

.address 0x40540A
00041ad9: 
.address 0x40540A
00041ade: RAX := mem[RSP + 0x28, el]:u64
.address 0x40540F
00041ae5: RDX := pad:64[pad:32[mem[RAX]]]
.address 0x405412
00041af2: #9000 := low:8[RDX] - 0x2A
.address 0x405412
00041af5: CF := low:8[RDX] < 0x2A
.address 0x405412
00041af8: OF := high:1[(low:8[RDX] ^ 0x2A) & (low:8[RDX] ^ #9000)]
.address 0x405412
00041afb: AF := 0x10 = (0x10 & (#9000 ^ low:8[RDX] ^ 0x2A))
.address 0x405412
00041afe: PF := ~low:1[let $1 = #9000 >> 4 ^ #9000 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405412
00041b01: SF := high:1[#9000]
.address 0x405412
00041b04: ZF := 0 = #9000
.address 0x405415
00041b0e: when ZF goto %00041b08
00044681: goto %00042295

.address 0x4055A3
00041b08: 
.address 0x4055A3
00041b18: RDI := 0x28
.address 0x4055A8
00041b1f: RBX := low:64[RSP + 0x28]
.address 0x4055AD
00041b28: RSP := RSP - 8
.address 0x4055AD
00041b2b: mem := mem with [RSP, el]:u64 <- 0x4055B2
.address 0x4055AD
00041b2e: call @sub_414480 with return %00041b30

.address 0x4055B2
00041b30: 
.address 0x4055B2
00041b35: R14 := RAX
.address 0x4055B5
00041b3c: RAX := mem[0x621308, el]:u64
.address 0x4055BC
00041b43: RDX := 1
.address 0x4055C1
00041b4a: RCX := R14
.address 0x4055C4
00041b51: RSI := RBX
.address 0x4055C7
00041b58: RDI := R12
.address 0x4055CA
00041b66: #9002 := mem[RSP + 0x28, el]:u64
.address 0x4055CA
00041b69: mem := mem with [RSP + 0x28, el]:u64 <- mem[RSP + 0x28, el]:u64 + 1
.address 0x4055CA
00041b6c: CF := mem[RSP + 0x28, el]:u64 < #9002
.address 0x4055CA
00041b6f: OF := ~high:1[#9002] & (high:1[#9002] | high:1[mem[RSP + 0x28, el]:u64]) & ~(
high:1[#9002] & high:1[mem[RSP + 0x28, el]:u64])
.address 0x4055CA
00041b72: AF := 0x10 = (0x10 & (mem[RSP + 0x28, el]:u64 ^ #9002 ^ 1))
.address 0x4055CA
00041b75: PF := ~low:1[let $1 = mem[RSP + 0x28, el]:u64 >> 4 ^ mem[RSP + 0x28, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4055CA
00041b78: SF := high:1[mem[RSP + 0x28, el]:u64]
.address 0x4055CA
00041b7b: ZF := 0 = mem[RSP + 0x28, el]:u64
.address 0x4055D0
00041b82: mem := mem with [0x621308, el]:u64 <- R14
.address 0x4055D7
00041b89: mem := mem with [R14 + 0x20, el]:u64 <- RAX
.address 0x4055DB
00041b90: RAX := mem[RSP + 0x30, el]:u64
.address 0x4055E0
00041b97: mem := mem with [R14 + 8, el]:u64 <- RAX
.address 0x4055E4
00041ba0: RSP := RSP - 8
.address 0x4055E4
00041ba3: mem := mem with [RSP, el]:u64 <- 0x4055E9
.address 0x4055E4
00041ba6: call @sub_4059c0 with return %00041ba8

.address 0x4055E9
00041ba8: 
.address 0x4055E9
00041bb3: #9005 := low:8[RAX]
.address 0x4055E9
00041bb6: OF := 0
.address 0x4055E9
00041bb9: CF := 0
.address 0x4055E9
00041bbc: AF := unknown[bits]:u1
.address 0x4055E9
00041bbf: PF := ~low:1[let $1 = #9005 >> 4 ^ #9005 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4055E9
00041bc2: SF := high:1[#9005]
.address 0x4055E9
00041bc5: ZF := 0 = #9005
.address 0x4055EB
00041bcf: when ~ZF goto %00041bc9
00044682: goto %00041c0a

.address 0x40541B
00042295: 
.address 0x40541B
000422a0: #9035 := low:8[RDX] - 0x3A
.address 0x40541B
000422a3: CF := low:8[RDX] < 0x3A
.address 0x40541B
000422a6: OF := high:1[(low:8[RDX] ^ 0x3A) & (low:8[RDX] ^ #9035)]
.address 0x40541B
000422a9: AF := 0x10 = (0x10 & (#9035 ^ low:8[RDX] ^ 0x3A))
.address 0x40541B
000422ac: PF := ~low:1[let $1 = #9035 >> 4 ^ #9035 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40541B
000422af: SF := high:1[#9035]
.address 0x40541B
000422b2: ZF := 0 = #9035
.address 0x40541E
000422bc: when ZF goto %000422b6
00044683: goto %000423c2

.address 0x40577B
000422b6: 
.address 0x40577B
000422cd: #9037 := RAX
.address 0x40577B
000422d0: RAX := RAX + 1
.address 0x40577B
000422d3: CF := RAX < #9037
.address 0x40577B
000422d6: OF := ~high:1[#9037] & (high:1[#9037] | high:1[RAX]) & ~(high:1[#9037] & high:1[RAX])
.address 0x40577B
000422d9: AF := 0x10 = (0x10 & (RAX ^ #9037 ^ 1))
.address 0x40577B
000422dc: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40577B
000422df: SF := high:1[RAX]
.address 0x40577B
000422e2: ZF := 0 = RAX
.address 0x40577F
000422e9: mem := mem with [RSP + 0x28, el]:u64 <- RAX
.address 0x405784
000422f0: goto %00041ad9

.address 0x405424
000423c2: 
.address 0x405424
000423cd: #9040 := low:8[RDX]
.address 0x405424
000423d0: OF := 0
.address 0x405424
000423d3: CF := 0
.address 0x405424
000423d6: AF := unknown[bits]:u1
.address 0x405424
000423d9: PF := ~low:1[let $1 = #9040 >> 4 ^ #9040 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405424
000423dc: SF := high:1[#9040]
.address 0x405424
000423df: ZF := 0 = #9040
.address 0x405426
000423e8: when ZF goto %000422f2
00044684: goto %000423ee

.address 0x405789
000422f2: 
.address 0x405789
000422f7: RBP := pad:64[mem[RSP + 8, el]:u32]
.address 0x40578D
000422fe: RBX := mem[RSP + 0x10, el]:u64
.address 0x405792
00042305: goto %00041d4d

.address 0x40542C
000423ee: 
.address 0x40542C
000423f3: RDX := low:64[RAX + 1]
.address 0x405430
000423fa: mem := mem with [RSP + 0x28, el]:u64 <- RDX
.address 0x405435
00042401: RDX := pad:64[pad:32[mem[RAX]]]
.address 0x405438
00042408: mem := mem with [RSP + 0x45] <- low:8[RDX]
.address 0x40543C
00042415: #9042 := mem[RAX + 1]
.address 0x40543C
00042418: CF := mem[RAX + 1] < 0
.address 0x40543C
0004241b: OF := high:1[mem[RAX + 1] & (mem[RAX + 1] ^ #9042)]
.address 0x40543C
0004241e: AF := 0x10 = (0x10 & (#9042 ^ mem[RAX + 1]))
.address 0x40543C
00042421: PF := ~low:1[let $1 = #9042 >> 4 ^ #9042 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40543C
00042424: SF := high:1[#9042]
.address 0x40543C
00042427: ZF := 0 = #9042
.address 0x405440
00042430: when ZF goto %00041c0a
00044685: goto %00042436

.address 0x405446
00042436: 
.address 0x405446
0004243b: RDX := low:64[RAX + 2]
.address 0x40544A
00042442: mem := mem with [RSP + 0x28, el]:u64 <- RDX
.address 0x40544F
00042449: RDX := pad:64[pad:32[mem[RAX + 1]]]
.address 0x405453
00042450: mem := mem with [RSP + 0x46] <- low:8[RDX]
.address 0x405457
00042457: RDX := low:64[RAX + 3]
.address 0x40545B
0004245e: mem := mem with [RSP + 0x28, el]:u64 <- RDX
.address 0x405460
0004246b: #9044 := mem[RAX + 2] - 0x3D
.address 0x405460
0004246e: CF := mem[RAX + 2] < 0x3D
.address 0x405460
00042471: OF := high:1[(mem[RAX + 2] ^ 0x3D) & (mem[RAX + 2] ^ #9044)]
.address 0x405460
00042474: AF := 0x10 = (0x10 & (#9044 ^ mem[RAX + 2] ^ 0x3D))
.address 0x405460
00042477: PF := ~low:1[let $1 = #9044 >> 4 ^ #9044 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405460
0004247a: SF := high:1[#9044]
.address 0x405460
0004247d: ZF := 0 = #9044
.address 0x405464
00042486: when ~ZF goto %00041c0a
00044686: goto %0004248c

.address 0x40546A
0004248c: 
.address 0x40546A
00042491: RSI := 0x417D92
.address 0x405471
00042498: RBX := low:64[RSP + 0x45]
.address 0x405476
000424a5: RBP := 0
.address 0x405476
000424a8: AF := unknown[bits]:u1
.address 0x405476
000424ab: ZF := 1
.address 0x405476
000424ae: PF := 1
.address 0x405476
000424b1: OF := 0
.address 0x405476
000424b4: CF := 0
.address 0x405476
000424b7: SF := 0
00044687: goto %000424b9

.address 0x405478
000424b9: 
.address 0x405478
000424be: RDI := RBX
.address 0x40547B
000424c7: RSP := RSP - 8
.address 0x40547B
000424ca: mem := mem with [RSP, el]:u64 <- 0x405480
.address 0x40547B
000424cd: call @sub_403b20 with return %000424cf

.address 0x405480
000424cf: 
.address 0x405480
000424da: #9046 := low:32[RAX]
.address 0x405480
000424dd: OF := 0
.address 0x405480
000424e0: CF := 0
.address 0x405480
000424e3: AF := unknown[bits]:u1
.address 0x405480
000424e6: PF := ~low:1[let $1 = #9046 >> 4 ^ #9046 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405480
000424e9: SF := high:1[#9046]
.address 0x405480
000424ec: ZF := 0 = #9046
.address 0x405482
000424f5: when ZF goto %000420df
00044688: goto %000424fb

.address 0x4056E1
000420df: 
.address 0x4056E1
000420e4: RAX := 0x620060
.address 0x4056E8
000420eb: RCX := extend:64[low:32[RBP]]
.address 0x4056EB
000420f2: RSI := low:64[RSP + 0x28]
.address 0x4056F0
00042100: #9028 := RCX
.address 0x4056F0
00042103: RCX := RCX << 4
.address 0x4056F0
00042106: CF := low:1[#9028 >> 0x3C]
.address 0x4056F0
00042109: SF := high:1[RCX]
.address 0x4056F0
0004210c: ZF := 0 = RCX
.address 0x4056F0
0004210f: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4056F0
00042112: AF := unknown[bits]:u1
.address 0x4056F0
00042115: OF := unknown[bits]:u1
.address 0x4056F4
00042122: RDX := 0
.address 0x4056F4
00042125: AF := unknown[bits]:u1
.address 0x4056F4
00042128: ZF := 1
.address 0x4056F4
0004212b: PF := 1
.address 0x4056F4
0004212e: OF := 0
.address 0x4056F4
00042131: CF := 0
.address 0x4056F4
00042134: SF := 0
.address 0x4056F6
0004213b: RDI := R12
.address 0x4056F9
0004214a: #9030 := RCX
.address 0x4056F9
0004214d: #9031 := RAX
.address 0x4056F9
00042150: RCX := RCX + #9031
.address 0x4056F9
00042153: CF := RCX < #9030
.address 0x4056F9
00042156: OF := high:1[#9030] = high:1[#9031] & (high:1[#9030] | high:1[RCX]) & ~(
high:1[#9030] & high:1[RCX])
.address 0x4056F9
00042159: AF := 0x10 = (0x10 & (RCX ^ #9030 ^ #9031))
.address 0x4056F9
0004215c: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4056F9
0004215f: SF := high:1[RCX]
.address 0x4056F9
00042162: ZF := 0 = RCX
.address 0x4056FC
00042169: RAX := mem[RSP + 0x30, el]:u64
.address 0x405701
00042170: mem := mem with [RCX + 8, el]:u64 <- RAX
.address 0x405705
00042179: RSP := RSP - 8
.address 0x405705
0004217c: mem := mem with [RSP, el]:u64 <- 0x40570A
.address 0x405705
0004217f: call @sub_4059c0 with return %00042181

.address 0x40570A
00042181: 
.address 0x40570A
0004218c: #9033 := low:8[RAX]
.address 0x40570A
0004218f: OF := 0
.address 0x40570A
00042192: CF := 0
.address 0x40570A
00042195: AF := unknown[bits]:u1
.address 0x40570A
00042198: PF := ~low:1[let $1 = #9033 >> 4 ^ #9033 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40570A
0004219b: SF := high:1[#9033]
.address 0x40570A
0004219e: ZF := 0 = #9033
.address 0x40570C
000421a7: when ~ZF goto %00041ad9
00044689: goto %000421ad

.address 0x405712
000421ad: 
.address 0x405712
000421b3: goto %000421af

.address 0x405488
000424fb: 
.address 0x405488
00042507: #9048 := RBP
.address 0x405488
0004250a: RBP := RBP + 1
.address 0x405488
0004250d: CF := RBP < #9048
.address 0x405488
00042510: OF := ~high:1[#9048] & (high:1[#9048] | high:1[RBP]) & ~(high:1[#9048] & high:1[RBP])
.address 0x405488
00042513: AF := 0x10 = (0x10 & (RBP ^ #9048 ^ 1))
.address 0x405488
00042516: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405488
00042519: SF := high:1[RBP]
.address 0x405488
0004251c: ZF := 0 = RBP
.address 0x40548C
00042523: RSI := mem[R15 + (RBP << 3), el]:u64
.address 0x405490
00042530: #9051 := RSI
.address 0x405490
00042533: OF := 0
.address 0x405490
00042536: CF := 0
.address 0x405490
00042539: AF := unknown[bits]:u1
.address 0x405490
0004253c: PF := ~low:1[let $1 = #9051 >> 4 ^ #9051 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405490
0004253f: SF := high:1[#9051]
.address 0x405490
00042542: ZF := 0 = #9051
.address 0x405493
0004254b: when ~ZF goto %000424b9
0004468a: goto %000421af

.address 0x405495
000421af: 
.address 0x405495
000421b9: RDI := RBX
.address 0x405498
000421c0: RBP := pad:64[mem[RSP + 8, el]:u32]
.address 0x40549C
000421c7: RBX := mem[RSP + 0x10, el]:u64
.address 0x4054A1
000421d0: RSP := RSP - 8
.address 0x4054A1
000421d3: mem := mem with [RSP, el]:u64 <- 0x4054A6
.address 0x4054A1
000421d6: call @sub_413ce0 with return %000421d8

.address 0x4054A6
000421d8: 
.address 0x4054A6
000421dd: RSI := 0x417F1D
.address 0x4054AD
000421e4: R14 := RAX
.address 0x4054B0
000421eb: RDX := 5
.address 0x4054B5
000421f8: RDI := 0
.address 0x4054B5
000421fb: AF := unknown[bits]:u1
.address 0x4054B5
000421fe: ZF := 1
.address 0x4054B5
00042201: PF := 1
.address 0x4054B5
00042204: OF := 0
.address 0x4054B5
00042207: CF := 0
.address 0x4054B5
0004220a: SF := 0
.address 0x4054B7
00042213: RSP := RSP - 8
.address 0x4054B7
00042216: mem := mem with [RSP, el]:u64 <- 0x4054BC
.address 0x4054B7
00042219: call @sub_403930 with return %0004221b

.address 0x4054BC
0004221b: 
.address 0x4054BC
00042220: RCX := R14
.address 0x4054BF
00042227: RDX := RAX
.address 0x4054C2
00042234: RSI := 0
.address 0x4054C2
00042237: AF := unknown[bits]:u1
.address 0x4054C2
0004223a: ZF := 1
.address 0x4054C2
0004223d: PF := 1
.address 0x4054C2
00042240: OF := 0
.address 0x4054C2
00042243: CF := 0
.address 0x4054C2
00042246: SF := 0
.address 0x4054C4
00042253: RDI := 0
.address 0x4054C4
00042256: AF := unknown[bits]:u1
.address 0x4054C4
00042259: ZF := 1
.address 0x4054C4
0004225c: PF := 1
.address 0x4054C4
0004225f: OF := 0
.address 0x4054C4
00042262: CF := 0
.address 0x4054C4
00042265: SF := 0
.address 0x4054C6
00042272: RAX := 0
.address 0x4054C6
00042275: AF := unknown[bits]:u1
.address 0x4054C6
00042278: ZF := 1
.address 0x4054C6
0004227b: PF := 1
.address 0x4054C6
0004227e: OF := 0
.address 0x4054C6
00042281: CF := 0
.address 0x4054C6
00042284: SF := 0
.address 0x4054C8
0004228d: RSP := RSP - 8
.address 0x4054C8
00042290: mem := mem with [RSP, el]:u64 <- 0x4054CD
.address 0x4054C8
00042293: call @sub_403d20 with return %00041c25

.address 0x4055F1
00041c0a: 
.address 0x4055F1
00041c1a: RBP := pad:64[mem[RSP + 8, el]:u32]
.address 0x4055F5
00041c21: RBX := mem[RSP + 0x10, el]:u64
.address 0x4055FA
00041c29: goto %00041c25

.address 0x4054CD
00041c25: 
.address 0x4054CD
00041c2f: RSI := 0x41A240
.address 0x4054D4
00041c36: RDX := 5
.address 0x4054D9
00041c43: RDI := 0
.address 0x4054D9
00041c46: AF := unknown[bits]:u1
.address 0x4054D9
00041c49: ZF := 1
.address 0x4054D9
00041c4c: PF := 1
.address 0x4054D9
00041c4f: OF := 0
.address 0x4054D9
00041c52: CF := 0
.address 0x4054D9
00041c55: SF := 0
.address 0x4054DB
00041c5e: RSP := RSP - 8
.address 0x4054DB
00041c61: mem := mem with [RSP, el]:u64 <- 0x4054E0
.address 0x4054DB
00041c64: call @sub_403930 with return %00041c66

.address 0x4054E0
00041c66: 
.address 0x4054E0
00041c71: RSI := 0
.address 0x4054E0
00041c74: AF := unknown[bits]:u1
.address 0x4054E0
00041c77: ZF := 1
.address 0x4054E0
00041c7a: PF := 1
.address 0x4054E0
00041c7d: OF := 0
.address 0x4054E0
00041c80: CF := 0
.address 0x4054E0
00041c83: SF := 0
.address 0x4054E2
00041c8a: RDX := RAX
.address 0x4054E5
00041c97: RDI := 0
.address 0x4054E5
00041c9a: AF := unknown[bits]:u1
.address 0x4054E5
00041c9d: ZF := 1
.address 0x4054E5
00041ca0: PF := 1
.address 0x4054E5
00041ca3: OF := 0
.address 0x4054E5
00041ca6: CF := 0
.address 0x4054E5
00041ca9: SF := 0
.address 0x4054E7
00041cb6: RAX := 0
.address 0x4054E7
00041cb9: AF := unknown[bits]:u1
.address 0x4054E7
00041cbc: ZF := 1
.address 0x4054E7
00041cbf: PF := 1
.address 0x4054E7
00041cc2: OF := 0
.address 0x4054E7
00041cc5: CF := 0
.address 0x4054E7
00041cc8: SF := 0
.address 0x4054E9
00041cd1: RSP := RSP - 8
.address 0x4054E9
00041cd4: mem := mem with [RSP, el]:u64 <- 0x4054EE
.address 0x4054E9
00041cd7: call @sub_403d20 with return %00041cd9

.address 0x4054EE
00041cd9: 
.address 0x4054EE
00041cde: RDI := mem[0x621300, el]:u64
.address 0x4054F5
00041ce7: RSP := RSP - 8
.address 0x4054F5
00041cea: mem := mem with [RSP, el]:u64 <- 0x4054FA
.address 0x4054F5
00041ced: call @sub_403e70 with return %00041cef

.address 0x4054FA
00041cef: 
.address 0x4054FA
00041cf4: RDI := mem[0x621308, el]:u64
.address 0x405501
00041cfc: goto %00041cf8

.address 0x40550F
00041cf8: 
.address 0x40550F
00041d08: #9009 := RDI
.address 0x40550F
00041d0b: OF := 0
.address 0x40550F
00041d0e: CF := 0
.address 0x40550F
00041d11: AF := unknown[bits]:u1
.address 0x40550F
00041d14: PF := ~low:1[let $1 = #9009 >> 4 ^ #9009 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40550F
00041d17: SF := high:1[#9009]
.address 0x40550F
00041d1a: ZF := 0 = #9009
.address 0x405512
00041d24: when ~ZF goto %00041d1e
0004468b: goto %00041d46

.address 0x405514
00041d46: 
.address 0x405514
00041d4b: mem := mem with [0x621312] <- 0
0004468c: goto %00041d4d

.address 0x40551B
00041d4d: 
.address 0x40551B
00041d58: #9011 := mem[0x6200D0, el]:u64 - 6
.address 0x40551B
00041d5b: CF := mem[0x6200D0, el]:u64 < 6
.address 0x40551B
00041d5e: OF := high:1[(mem[0x6200D0, el]:u64 ^ 6) & (mem[0x6200D0, el]:u64 ^ #9011)]
.address 0x40551B
00041d61: AF := 0x10 = (0x10 & (#9011 ^ mem[0x6200D0, el]:u64 ^ 6))
.address 0x40551B
00041d64: PF := ~low:1[let $1 = #9011 >> 4 ^ #9011 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40551B
00041d67: SF := high:1[#9011]
.address 0x40551B
00041d6a: ZF := 0 = #9011
.address 0x405523
00041d73: when ~ZF goto %00029e67
0004468d: goto %00041d79

.address 0x405529
00041d79: 
.address 0x405529
00041d7e: RDI := mem[0x6200D8, el]:u64
.address 0x405530
00041d85: RSI := 0x417F35
.address 0x405537
00041d8c: RDX := 6
.address 0x40553C
00041d95: RSP := RSP - 8
.address 0x40553C
00041d98: mem := mem with [RSP, el]:u64 <- 0x405541
.address 0x40553C
00041d9b: call @sub_403800 with return %00041d9d

.address 0x405541
00041d9d: 
.address 0x405541
00041da8: #9013 := low:32[RAX]
.address 0x405541
00041dab: OF := 0
.address 0x405541
00041dae: CF := 0
.address 0x405541
00041db1: AF := unknown[bits]:u1
.address 0x405541
00041db4: PF := ~low:1[let $1 = #9013 >> 4 ^ #9013 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405541
00041db7: SF := high:1[#9013]
.address 0x405541
00041dba: ZF := 0 = #9013
.address 0x405543
00041dc3: when ~ZF goto %00029e67
0004468e: goto %00041dc9

.address 0x405549
00041dc9: 
.address 0x405549
00041dce: mem := mem with [0x621390] <- 1
.address 0x405550
00041dd5: goto %00029e67

.address 0x405192
00029e67: 
.address 0x405192
00029e72: #5803 := mem[0x621312]
.address 0x405192
00029e75: CF := mem[0x621312] < 0
.address 0x405192
00029e78: OF := high:1[mem[0x621312] & (mem[0x621312] ^ #5803)]
.address 0x405192
00029e7b: AF := 0x10 = (0x10 & (#5803 ^ mem[0x621312]))
.address 0x405192
00029e7e: PF := ~low:1[let $1 = #5803 >> 4 ^ #5803 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405192
00029e81: SF := high:1[#5803]
.address 0x405192
00029e84: ZF := 0 = #5803
.address 0x405199
00029e8e: when ZF goto %00029e88
0004468f: goto %00042ff8

.address 0x40519F
00042ff8: 
.address 0x40519F
00042ffd: RDI := 0xD
.address 0x4051A4
00043006: RSP := RSP - 8
.address 0x4051A4
00043009: mem := mem with [RSP, el]:u64 <- 0x4051A9
.address 0x4051A4
0004300c: call @sub_405c50 with return %0004300e

.address 0x4051A9
0004300e: 
.address 0x4051A9
00043019: #9136 := low:8[RAX]
.address 0x4051A9
0004301c: OF := 0
.address 0x4051A9
0004301f: CF := 0
.address 0x4051A9
00043022: AF := unknown[bits]:u1
.address 0x4051A9
00043025: PF := ~low:1[let $1 = #9136 >> 4 ^ #9136 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4051A9
00043028: SF := high:1[#9136]
.address 0x4051A9
0004302b: ZF := 0 = #9136
.address 0x4051AB
00043035: when ~ZF goto %0004302f
00044690: goto %00043122

.address 0x4051AD
00043122: 
.address 0x4051AD
00043127: RDI := 0xE
.address 0x4051B2
00043130: RSP := RSP - 8
.address 0x4051B2
00043133: mem := mem with [RSP, el]:u64 <- 0x4051B7
.address 0x4051B2
00043136: call @sub_405c50 with return %00043138

.address 0x4051B7
00043138: 
.address 0x4051B7
00043143: #9138 := low:8[RAX]
.address 0x4051B7
00043146: OF := 0
.address 0x4051B7
00043149: CF := 0
.address 0x4051B7
0004314c: AF := unknown[bits]:u1
.address 0x4051B7
0004314f: PF := ~low:1[let $1 = #9138 >> 4 ^ #9138 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4051B7
00043152: SF := high:1[#9138]
.address 0x4051B7
00043155: ZF := 0 = #9138
.address 0x4051B9
0004315f: when ZF goto %00043159
00044691: goto %000431d2

.address 0x4051BB
000431d2: 
.address 0x4051BB
000431dd: #9144 := mem[0x621390]
.address 0x4051BB
000431e0: CF := mem[0x621390] < 0
.address 0x4051BB
000431e3: OF := high:1[mem[0x621390] & (mem[0x621390] ^ #9144)]
.address 0x4051BB
000431e6: AF := 0x10 = (0x10 & (#9144 ^ mem[0x621390]))
.address 0x4051BB
000431e9: PF := ~low:1[let $1 = #9144 >> 4 ^ #9144 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4051BB
000431ec: SF := high:1[#9144]
.address 0x4051BB
000431ef: ZF := 0 = #9144
.address 0x4051C2
000431f8: when ~ZF goto %0004302f
00044692: goto %00043159

.address 0x4051C4
00043159: 
.address 0x4051C4
00043169: RDI := 0xC
.address 0x4051C9
00043172: RSP := RSP - 8
.address 0x4051C9
00043175: mem := mem with [RSP, el]:u64 <- 0x4051CE
.address 0x4051C9
00043178: call @sub_405c50 with return %0004317a

.address 0x4051CE
0004317a: 
.address 0x4051CE
00043185: #9140 := low:8[RAX]
.address 0x4051CE
00043188: OF := 0
.address 0x4051CE
0004318b: CF := 0
.address 0x4051CE
0004318e: AF := unknown[bits]:u1
.address 0x4051CE
00043191: PF := ~low:1[let $1 = #9140 >> 4 ^ #9140 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4051CE
00043194: SF := high:1[#9140]
.address 0x4051CE
00043197: ZF := 0 = #9140
.address 0x4051D0
000431a0: when ZF goto %00029e88
00044693: goto %000431a6

.address 0x4051D6
000431a6: 
.address 0x4051D6
000431b1: #9142 := mem[0x621338, el]:u32
.address 0x4051D6
000431b4: CF := mem[0x621338, el]:u32 < 0
.address 0x4051D6
000431b7: OF := high:1[mem[0x621338, el]:u32 & (mem[0x621338, el]:u32 ^ #9142)]
.address 0x4051D6
000431ba: AF := 0x10 = (0x10 & (#9142 ^ mem[0x621338, el]:u32))
.address 0x4051D6
000431bd: PF := ~low:1[let $1 = #9142 >> 4 ^ #9142 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4051D6
000431c0: SF := high:1[#9142]
.address 0x4051D6
000431c3: ZF := 0 = #9142
.address 0x4051DD
000431cc: when ~ZF goto %00029e88
00044694: goto %0004302f

.address 0x4051E3
0004302f: 
.address 0x4051E3
0004303f: mem := mem with [0x6212FD] <- 1
.address 0x4051EA
00043046: goto %00029e88

.address 0x404A56
00029e88: 
.address 0x404A56
00029e9e: #5805 := mem[0x6212F8, el]:u32 - 1
.address 0x404A56
00029ea1: CF := mem[0x6212F8, el]:u32 < 1
.address 0x404A56
00029ea4: OF := high:1[(mem[0x6212F8, el]:u32 ^ 1) & (mem[0x6212F8, el]:u32 ^ #5805)]
.address 0x404A56
00029ea7: AF := 0x10 = (0x10 & (#5805 ^ mem[0x6212F8, el]:u32 ^ 1))
.address 0x404A56
00029eaa: PF := ~low:1[let $1 = #5805 >> 4 ^ #5805 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404A56
00029ead: SF := high:1[#5805]
.address 0x404A56
00029eb0: ZF := 0 = #5805
.address 0x404A5D
00029eba: when ZF goto %00029eb4
00044695: goto %00029efb

.address 0x404EAA
00029eb4: 
.address 0x404EAA
00029eca: #5807 := mem[0x6212F5]
.address 0x404EAA
00029ecd: CF := mem[0x6212F5] < 0
.address 0x404EAA
00029ed0: OF := high:1[mem[0x6212F5] & (mem[0x6212F5] ^ #5807)]
.address 0x404EAA
00029ed3: AF := 0x10 = (0x10 & (#5807 ^ mem[0x6212F5]))
.address 0x404EAA
00029ed6: PF := ~low:1[let $1 = #5807 >> 4 ^ #5807 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404EAA
00029ed9: SF := high:1[#5807]
.address 0x404EAA
00029edc: ZF := 0 = #5807
.address 0x404EB1
00029ee3: RAX := 2
.address 0x404EB6
00029eed: when ~ZF goto %00029ee7
00044696: goto %00042f44

.address 0x404EB8
00042f44: 
.address 0x404EB8
00042f4f: #9125 := mem[0x621314, el]:u32 - 3
.address 0x404EB8
00042f52: CF := mem[0x621314, el]:u32 < 3
.address 0x404EB8
00042f55: OF := high:1[(mem[0x621314, el]:u32 ^ 3) & (mem[0x621314, el]:u32 ^ #9125)]
.address 0x404EB8
00042f58: AF := 0x10 = (0x10 & (#9125 ^ mem[0x621314, el]:u32 ^ 3))
.address 0x404EB8
00042f5b: PF := ~low:1[let $1 = #9125 >> 4 ^ #9125 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404EB8
00042f5e: SF := high:1[#9125]
.address 0x404EB8
00042f61: ZF := 0 = #9125
.address 0x404EBF
00042f6a: when ZF goto %00029ee7
00044697: goto %00042f70

.address 0x404EC1
00042f70: 
.address 0x404EC1
00042f7b: #9127 := mem[0x621338, el]:u32 - 1
.address 0x404EC1
00042f7e: CF := mem[0x621338, el]:u32 < 1
.address 0x404EC1
00042f81: OF := high:1[(mem[0x621338, el]:u32 ^ 1) & (mem[0x621338, el]:u32 ^ #9127)]
.address 0x404EC1
00042f84: AF := 0x10 = (0x10 & (#9127 ^ mem[0x621338, el]:u32 ^ 1))
.address 0x404EC1
00042f87: PF := ~low:1[let $1 = #9127 >> 4 ^ #9127 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404EC1
00042f8a: SF := high:1[#9127]
.address 0x404EC1
00042f8d: ZF := 0 = #9127
.address 0x404EC8
00042f9c: #9129 := low:32[RAX]
.address 0x404EC8
00042f9f: #9130 := low:32[RAX]
.address 0x404EC8
00042fa2: RAX := pad:64[#9130 - #9129 + pad:32[CF]]
.address 0x404EC8
00042fa5: OF := high:1[(#9129 ^ #9130) & (#9130 ^ low:32[RAX])]
.address 0x404EC8
00042fa8: CF := #9130 < #9129 + pad:32[CF] | #9129 + pad:32[CF] < #9129
.address 0x404EC8
00042fab: AF := 0x10 = (0x10 & (low:32[RAX] ^ #9129 ^ #9130))
.address 0x404EC8
00042fae: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404EC8
00042fb1: SF := high:1[low:32[RAX]]
.address 0x404EC8
00042fb4: ZF := 0 = low:32[RAX]
.address 0x404ECA
00042fc1: RAX := pad:64[low:32[RAX] & 0xFFFFFFFE]
.address 0x404ECA
00042fc4: OF := 0
.address 0x404ECA
00042fc7: CF := 0
.address 0x404ECA
00042fca: AF := unknown[bits]:u1
.address 0x404ECA
00042fcd: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404ECA
00042fd0: SF := high:1[low:32[RAX]]
.address 0x404ECA
00042fd3: ZF := 0 = low:32[RAX]
.address 0x404ECD
00042fe1: #9133 := low:32[RAX]
.address 0x404ECD
00042fe4: RAX := pad:64[low:32[RAX] + 4]
.address 0x404ECD
00042fe7: CF := low:32[RAX] < #9133
.address 0x404ECD
00042fea: OF := ~high:1[#9133] & (high:1[#9133] | high:1[low:32[RAX]]) & ~(
high:1[#9133] & high:1[low:32[RAX]])
.address 0x404ECD
00042fed: AF := 0x10 = (0x10 & (low:32[RAX] ^ #9133 ^ 4))
.address 0x404ECD
00042ff0: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404ECD
00042ff3: SF := high:1[low:32[RAX]]
.address 0x404ECD
00042ff6: ZF := 0 = low:32[RAX]
00044698: goto %00029ee7

.address 0x404ED0
00029ee7: 
.address 0x404ED0
00029ef7: mem := mem with [0x6212F8, el]:u32 <- low:32[RAX]
.address 0x404ED6
00029eff: goto %00029efb

.address 0x404A63
00029efb: 
.address 0x404A63
00029f0b: #5809 := mem[0x6212F6]
.address 0x404A63
00029f0e: CF := mem[0x6212F6] < 0
.address 0x404A63
00029f11: OF := high:1[mem[0x6212F6] & (mem[0x6212F6] ^ #5809)]
.address 0x404A63
00029f14: AF := 0x10 = (0x10 & (#5809 ^ mem[0x6212F6]))
.address 0x404A63
00029f17: PF := ~low:1[let $1 = #5809 >> 4 ^ #5809 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404A63
00029f1a: SF := high:1[#5809]
.address 0x404A63
00029f1d: ZF := 0 = #5809
.address 0x404A6A
00029f27: when ZF goto %00029f21
00044699: goto %00042e65

.address 0x404A6C
00042e65: 
.address 0x404A6C
00042e6a: R8 := 0x4059B0
.address 0x404A73
00042e71: RCX := 0x405970
.address 0x404A7A
00042e78: RDX := 0x405960
.address 0x404A81
00042e85: RSI := 0
.address 0x404A81
00042e88: AF := unknown[bits]:u1
.address 0x404A81
00042e8b: ZF := 1
.address 0x404A81
00042e8e: PF := 1
.address 0x404A81
00042e91: OF := 0
.address 0x404A81
00042e94: CF := 0
.address 0x404A81
00042e97: SF := 0
.address 0x404A83
00042e9e: RDI := 0x1E
.address 0x404A88
00042ea7: RSP := RSP - 8
.address 0x404A88
00042eaa: mem := mem with [RSP, el]:u64 <- 0x404A8D
.address 0x404A88
00042ead: call @sub_40e100 with return %00042eaf

.address 0x404A8D
00042eaf: 
.address 0x404A8D
00042eba: #9123 := RAX
.address 0x404A8D
00042ebd: OF := 0
.address 0x404A8D
00042ec0: CF := 0
.address 0x404A8D
00042ec3: AF := unknown[bits]:u1
.address 0x404A8D
00042ec6: PF := ~low:1[let $1 = #9123 >> 4 ^ #9123 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404A8D
00042ec9: SF := high:1[#9123]
.address 0x404A8D
00042ecc: ZF := 0 = #9123
.address 0x404A90
00042ed3: mem := mem with [0x6213C8, el]:u64 <- RAX
.address 0x404A97
00042edc: when ZF goto %0003f833
0004469a: goto %00042ee2

.address 0x404A9D
00042ee2: 
.address 0x404A9D
00042ee7: R8 := mem[0x61FFC8, el]:u64
.address 0x404AA4
00042eee: RCX := mem[0x61FFE8, el]:u64
.address 0x404AAB
00042ef5: RDI := 0x6210E0
.address 0x404AB2
00042f02: RDX := 0
.address 0x404AB2
00042f05: AF := unknown[bits]:u1
.address 0x404AB2
00042f08: ZF := 1
.address 0x404AB2
00042f0b: PF := 1
.address 0x404AB2
00042f0e: OF := 0
.address 0x404AB2
00042f11: CF := 0
.address 0x404AB2
00042f14: SF := 0
.address 0x404AB4
00042f21: RSI := 0
.address 0x404AB4
00042f24: AF := unknown[bits]:u1
.address 0x404AB4
00042f27: ZF := 1
.address 0x404AB4
00042f2a: PF := 1
.address 0x404AB4
00042f2d: OF := 0
.address 0x404AB4
00042f30: CF := 0
.address 0x404AB4
00042f33: SF := 0
.address 0x404AB6
00042f3c: RSP := RSP - 8
.address 0x404AB6
00042f3f: mem := mem with [RSP, el]:u64 <- 0x404ABB
.address 0x404AB6
00042f42: call @_obstack_begin with return %00029f21

.address 0x404ABB
00029f21: 
.address 0x404ABB
00029f31: RDI := 0x417F3C
.address 0x404AC2
00029f3a: RSP := RSP - 8
.address 0x404AC2
00029f3d: mem := mem with [RSP, el]:u64 <- 0x404AC7
.address 0x404AC2
00029f40: call @sub_4037a0 with return %00029f42

.address 0x404AC7
00029f42: 
.address 0x404AC7
00029f47: RDI := RAX
.address 0x404ACA
00029f50: RSP := RSP - 8
.address 0x404ACA
00029f53: mem := mem with [RSP, el]:u64 <- 0x404ACF
.address 0x404ACA
00029f56: call @sub_415780 with return %00029f58

.address 0x404ACF
00029f58: 
.address 0x404ACF
00029f5d: mem := mem with [0x6212A8, el]:u64 <- RAX
.address 0x404AD6
00029f64: RAX := pad:64[mem[0x621330, el]:u32]
.address 0x404ADC
00029f72: #5811 := low:32[RAX]
.address 0x404ADC
00029f75: RAX := pad:64[low:32[RAX] - 2]
.address 0x404ADC
00029f78: CF := #5811 < 2
.address 0x404ADC
00029f7b: OF := high:1[(#5811 ^ 2) & (#5811 ^ low:32[RAX])]
.address 0x404ADC
00029f7e: AF := 0x10 = (0x10 & (low:32[RAX] ^ #5811 ^ 2))
.address 0x404ADC
00029f81: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404ADC
00029f84: SF := high:1[low:32[RAX]]
.address 0x404ADC
00029f87: ZF := 0 = low:32[RAX]
.address 0x404ADF
00029f94: RAX := pad:64[low:32[RAX] & 0xFFFFFFFD]
.address 0x404ADF
00029f97: OF := 0
.address 0x404ADF
00029f9a: CF := 0
.address 0x404ADF
00029f9d: AF := unknown[bits]:u1
.address 0x404ADF
00029fa0: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404ADF
00029fa3: SF := high:1[low:32[RAX]]
.address 0x404ADF
00029fa6: ZF := 0 = low:32[RAX]
.address 0x404AE2
00029fb0: when ZF goto %00029faa
0004469b: goto %00042e39

.address 0x404AE4
00042e39: 
.address 0x404AE4
00042e44: #9121 := mem[0x621338, el]:u32
.address 0x404AE4
00042e47: CF := mem[0x621338, el]:u32 < 0
.address 0x404AE4
00042e4a: OF := high:1[mem[0x621338, el]:u32 & (mem[0x621338, el]:u32 ^ #9121)]
.address 0x404AE4
00042e4d: AF := 0x10 = (0x10 & (#9121 ^ mem[0x621338, el]:u32))
.address 0x404AE4
00042e50: PF := ~low:1[let $1 = #9121 >> 4 ^ #9121 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404AE4
00042e53: SF := high:1[#9121]
.address 0x404AE4
00042e56: ZF := 0 = #9121
.address 0x404AEB
00042e5f: when ~ZF goto %00040942
0004469c: goto %00029faa

.address 0x404E27
00040942: 
.address 0x404E27
0004094d: #8925 := mem[0x621365]
.address 0x404E27
00040950: CF := mem[0x621365] < 0
.address 0x404E27
00040953: OF := high:1[mem[0x621365] & (mem[0x621365] ^ #8925)]
.address 0x404E27
00040956: AF := 0x10 = (0x10 & (#8925 ^ mem[0x621365]))
.address 0x404E27
00040959: PF := ~low:1[let $1 = #8925 >> 4 ^ #8925 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404E27
0004095c: SF := high:1[#8925]
.address 0x404E27
0004095f: ZF := 0 = #8925
.address 0x404E2E
00040968: when ~ZF goto %00029faa
0004469d: goto %0004096e

.address 0x404E34
0004096e: 
.address 0x404E34
00040979: #8927 := mem[0x62132C]
.address 0x404E34
0004097c: CF := mem[0x62132C] < 0
.address 0x404E34
0004097f: OF := high:1[mem[0x62132C] & (mem[0x62132C] ^ #8927)]
.address 0x404E34
00040982: AF := 0x10 = (0x10 & (#8927 ^ mem[0x62132C]))
.address 0x404E34
00040985: PF := ~low:1[let $1 = #8927 >> 4 ^ #8927 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404E34
00040988: SF := high:1[#8927]
.address 0x404E34
0004098b: ZF := 0 = #8927
.address 0x404E3B
00040994: when ~ZF goto %00029faa
0004469e: goto %0004099a

.address 0x404E41
0004099a: 
.address 0x404E41
000409a5: #8929 := mem[0x6212F6]
.address 0x404E41
000409a8: CF := mem[0x6212F6] < 0
.address 0x404E41
000409ab: OF := high:1[mem[0x6212F6] & (mem[0x6212F6] ^ #8929)]
.address 0x404E41
000409ae: AF := 0x10 = (0x10 & (#8929 ^ mem[0x6212F6]))
.address 0x404E41
000409b1: PF := ~low:1[let $1 = #8929 >> 4 ^ #8929 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404E41
000409b4: SF := high:1[#8929]
.address 0x404E41
000409b7: ZF := 0 = #8929
.address 0x404E48
000409be: mem := mem with [0x6212A1] <- 0
.address 0x404E4F
000409c5: RAX := 1
.address 0x404E54
000409ce: when ~ZF goto %00029fdb
0004469f: goto %000409d4

.address 0x404E5A
000409d4: 
.address 0x404E5A
000409df: #8931 := mem[0x621312]
.address 0x404E5A
000409e2: CF := mem[0x621312] < 0
.address 0x404E5A
000409e5: OF := high:1[mem[0x621312] & (mem[0x621312] ^ #8931)]
.address 0x404E5A
000409e8: AF := 0x10 = (0x10 & (#8931 ^ mem[0x621312]))
.address 0x404E5A
000409eb: PF := ~low:1[let $1 = #8931 >> 4 ^ #8931 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404E5A
000409ee: SF := high:1[#8931]
.address 0x404E5A
000409f1: ZF := 0 = #8931
.address 0x404E61
000409fa: when ~ZF goto %00029fdb
000446a0: goto %00040a00

.address 0x404E67
00040a00: 
.address 0x404E67
00040a0b: #8933 := mem[0x621314, el]:u32
.address 0x404E67
00040a0e: CF := mem[0x621314, el]:u32 < 0
.address 0x404E67
00040a11: OF := high:1[mem[0x621314, el]:u32 & (mem[0x621314, el]:u32 ^ #8933)]
.address 0x404E67
00040a14: AF := 0x10 = (0x10 & (#8933 ^ mem[0x621314, el]:u32))
.address 0x404E67
00040a17: PF := ~low:1[let $1 = #8933 >> 4 ^ #8933 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404E67
00040a1a: SF := high:1[#8933]
.address 0x404E67
00040a1d: ZF := 0 = #8933
.address 0x404E6E
00040a26: when ~ZF goto %00029fdb
000446a1: goto %00040a2c

.address 0x404E74
00040a2c: 
.address 0x404E74
00040a31: RAX := pad:64[pad:32[mem[0x6212F4]]]
.address 0x404E7B
00040a38: goto %00029fdb

.address 0x404AF1
00029faa: 
.address 0x404AF1
00029fba: mem := mem with [0x6212A1] <- 1
.address 0x404AF8
00029fc7: RAX := 0
.address 0x404AF8
00029fca: AF := unknown[bits]:u1
.address 0x404AF8
00029fcd: ZF := 1
.address 0x404AF8
00029fd0: PF := 1
.address 0x404AF8
00029fd3: OF := 0
.address 0x404AF8
00029fd6: CF := 0
.address 0x404AF8
00029fd9: SF := 0
000446a2: goto %00029fdb

.address 0x404AFA
00029fdb: 
.address 0x404AFA
00029fe0: mem := mem with [0x6212A0] <- low:8[RAX]
.address 0x404B00
00029fed: mem := mem with [0x6212A0] <- mem[0x6212A0] & 1
.address 0x404B00
00029ff0: OF := 0
.address 0x404B00
00029ff3: CF := 0
.address 0x404B00
00029ff6: AF := unknown[bits]:u1
.address 0x404B00
00029ff9: PF := ~low:1[let $1 = mem[0x6212A0] >> 4 ^ mem[0x6212A0] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404B00
00029ffc: SF := high:1[mem[0x6212A0]]
.address 0x404B00
00029fff: ZF := 0 = mem[0x6212A0]
.address 0x404B07
0002a00c: #5816 := mem[0x621318]
.address 0x404B07
0002a00f: CF := mem[0x621318] < 0
.address 0x404B07
0002a012: OF := high:1[mem[0x621318] & (mem[0x621318] ^ #5816)]
.address 0x404B07
0002a015: AF := 0x10 = (0x10 & (#5816 ^ mem[0x621318]))
.address 0x404B07
0002a018: PF := ~low:1[let $1 = #5816 >> 4 ^ #5816 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404B07
0002a01b: SF := high:1[#5816]
.address 0x404B07
0002a01e: ZF := 0 = #5816
.address 0x404B0E
0002a028: when ~ZF goto %0002a022
000446a3: goto %0002a101

.address 0x404FC4
0002a022: 
.address 0x404FC4
0002a032: R15 := mem[0x61FFC8, el]:u64
.address 0x404FCB
0002a039: R14 := mem[0x61FFE8, el]:u64
.address 0x404FD2
0002a040: RDI := 0x6211A0
.address 0x404FD9
0002a04d: RDX := 0
.address 0x404FD9
0002a050: AF := unknown[bits]:u1
.address 0x404FD9
0002a053: ZF := 1
.address 0x404FD9
0002a056: PF := 1
.address 0x404FD9
0002a059: OF := 0
.address 0x404FD9
0002a05c: CF := 0
.address 0x404FD9
0002a05f: SF := 0
.address 0x404FDB
0002a06c: RSI := 0
.address 0x404FDB
0002a06f: AF := unknown[bits]:u1
.address 0x404FDB
0002a072: ZF := 1
.address 0x404FDB
0002a075: PF := 1
.address 0x404FDB
0002a078: OF := 0
.address 0x404FDB
0002a07b: CF := 0
.address 0x404FDB
0002a07e: SF := 0
.address 0x404FDD
0002a085: R8 := R15
.address 0x404FE0
0002a08c: RCX := R14
.address 0x404FE3
0002a095: RSP := RSP - 8
.address 0x404FE3
0002a098: mem := mem with [RSP, el]:u64 <- 0x404FE8
.address 0x404FE3
0002a09b: call @_obstack_begin with return %0002a09d

.address 0x404FE8
0002a09d: 
.address 0x404FE8
0002a0a2: RDI := 0x621140
.address 0x404FEF
0002a0a9: R8 := R15
.address 0x404FF2
0002a0b0: RCX := R14
.address 0x404FF5
0002a0bd: RDX := 0
.address 0x404FF5
0002a0c0: AF := unknown[bits]:u1
.address 0x404FF5
0002a0c3: ZF := 1
.address 0x404FF5
0002a0c6: PF := 1
.address 0x404FF5
0002a0c9: OF := 0
.address 0x404FF5
0002a0cc: CF := 0
.address 0x404FF5
0002a0cf: SF := 0
.address 0x404FF7
0002a0dc: RSI := 0
.address 0x404FF7
0002a0df: AF := unknown[bits]:u1
.address 0x404FF7
0002a0e2: ZF := 1
.address 0x404FF7
0002a0e5: PF := 1
.address 0x404FF7
0002a0e8: OF := 0
.address 0x404FF7
0002a0eb: CF := 0
.address 0x404FF7
0002a0ee: SF := 0
.address 0x404FF9
0002a0f7: RSP := RSP - 8
.address 0x404FF9
0002a0fa: mem := mem with [RSP, el]:u64 <- 0x404FFE
.address 0x404FF9
0002a0fd: call @_obstack_begin with return %0002a0ff

.address 0x404FFE
0002a0ff: 
.address 0x404FFE
0002a105: goto %0002a101

.address 0x404B14
0002a101: 
.address 0x404B14
0002a111: #5818 := mem[0x621311]
.address 0x404B14
0002a114: CF := mem[0x621311] < 0
.address 0x404B14
0002a117: OF := high:1[mem[0x621311] & (mem[0x621311] ^ #5818)]
.address 0x404B14
0002a11a: AF := 0x10 = (0x10 & (#5818 ^ mem[0x621311]))
.address 0x404B14
0002a11d: PF := ~low:1[let $1 = #5818 >> 4 ^ #5818 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404B14
0002a120: SF := high:1[#5818]
.address 0x404B14
0002a123: ZF := 0 = #5818
.address 0x404B1B
0002a12d: when ~ZF goto %0002a127
000446a4: goto %0002a2a1

.address 0x404F48
0002a127: 
.address 0x404F48
0002a137: RDX := 0x620FE0
.address 0x404F4F
0002a144: RAX := 0
.address 0x404F4F
0002a147: AF := unknown[bits]:u1
.address 0x404F4F
0002a14a: ZF := 1
.address 0x404F4F
0002a14d: PF := 1
.address 0x404F4F
0002a150: OF := 0
.address 0x404F4F
0002a153: CF := 0
.address 0x404F4F
0002a156: SF := 0
.address 0x404F51
0002a15e: goto %0002a15a

.address 0x404F88
0002a15a: 
.address 0x404F88
0002a16a: #5820 := low:32[RAX] - 0x5A
.address 0x404F88
0002a16d: CF := low:32[RAX] < 0x5A
.address 0x404F88
0002a170: OF := high:1[(low:32[RAX] ^ 0x5A) & (low:32[RAX] ^ #5820)]
.address 0x404F88
0002a173: AF := 0x10 = (0x10 & (#5820 ^ low:32[RAX] ^ 0x5A))
.address 0x404F88
0002a176: PF := ~low:1[let $1 = #5820 >> 4 ^ #5820 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404F88
0002a179: SF := high:1[#5820]
.address 0x404F88
0002a17c: ZF := 0 = #5820
.address 0x404F8B
0002a186: when ZF | (SF | OF) & ~(SF & OF) goto %0002a180
000446a5: goto %00042e03

.address 0x404F8D
00042e03: 
.address 0x404F8D
00042e08: RCX := pad:64[low:32[RAX - 0x61]]
.address 0x404F90
00042e15: #9119 := low:32[RCX] - 0x19
.address 0x404F90
00042e18: CF := low:32[RCX] < 0x19
.address 0x404F90
00042e1b: OF := high:1[(low:32[RCX] ^ 0x19) & (low:32[RCX] ^ #9119)]
.address 0x404F90
00042e1e: AF := 0x10 = (0x10 & (#9119 ^ low:32[RCX] ^ 0x19))
.address 0x404F90
00042e21: PF := ~low:1[let $1 = #9119 >> 4 ^ #9119 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404F90
00042e24: SF := high:1[#9119]
.address 0x404F90
00042e27: ZF := 0 = #9119
.address 0x404F93
00042e30: when ~(CF | ZF) goto %00042ced
000446a6: goto %0002a1ac

.address 0x404F58
0002a180: 
.address 0x404F58
0002a196: #5822 := low:32[RAX] - 0x41
.address 0x404F58
0002a199: CF := low:32[RAX] < 0x41
.address 0x404F58
0002a19c: OF := high:1[(low:32[RAX] ^ 0x41) & (low:32[RAX] ^ #5822)]
.address 0x404F58
0002a19f: AF := 0x10 = (0x10 & (#5822 ^ low:32[RAX] ^ 0x41))
.address 0x404F58
0002a1a2: PF := ~low:1[let $1 = #5822 >> 4 ^ #5822 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404F58
0002a1a5: SF := high:1[#5822]
.address 0x404F58
0002a1a8: ZF := 0 = #5822
.address 0x404F5B
0002a1b2: when ~((SF | OF) & ~(SF & OF)) goto %0002a1ac
000446a7: goto %00042cba

.address 0x404F5D
00042cba: 
.address 0x404F5D
00042cbf: RCX := pad:64[low:32[RAX - 0x30]]
.address 0x404F60
00042ccc: #9102 := low:32[RCX] - 9
.address 0x404F60
00042ccf: CF := low:32[RCX] < 9
.address 0x404F60
00042cd2: OF := high:1[(low:32[RCX] ^ 9) & (low:32[RCX] ^ #9102)]
.address 0x404F60
00042cd5: AF := 0x10 = (0x10 & (#9102 ^ low:32[RCX] ^ 9))
.address 0x404F60
00042cd8: PF := ~low:1[let $1 = #9102 >> 4 ^ #9102 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404F60
00042cdb: SF := high:1[#9102]
.address 0x404F60
00042cde: ZF := 0 = #9102
.address 0x404F63
00042ce7: when CF | ZF goto %0002a1ac
000446a8: goto %00042ced

.address 0x404F65
00042ced: 
.address 0x404F65
00042cf2: RCX := pad:64[low:32[RAX - 0x2D]]
.address 0x404F68
00042cff: #9104 := low:32[RCX] - 1
.address 0x404F68
00042d02: CF := low:32[RCX] < 1
.address 0x404F68
00042d05: OF := high:1[(low:32[RCX] ^ 1) & (low:32[RCX] ^ #9104)]
.address 0x404F68
00042d08: AF := 0x10 = (0x10 & (#9104 ^ low:32[RCX] ^ 1))
.address 0x404F68
00042d0b: PF := ~low:1[let $1 = #9104 >> 4 ^ #9104 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404F68
00042d0e: SF := high:1[#9104]
.address 0x404F68
00042d11: ZF := 0 = #9104
.address 0x404F6B
00042d1a: when CF | ZF goto %0002a1ac
000446a9: goto %00042d20

.address 0x404F6D
00042d20: 
.address 0x404F6D
00042d2b: #9106 := low:32[RAX] - 0x7E
.address 0x404F6D
00042d2e: CF := low:32[RAX] < 0x7E
.address 0x404F6D
00042d31: OF := high:1[(low:32[RAX] ^ 0x7E) & (low:32[RAX] ^ #9106)]
.address 0x404F6D
00042d34: AF := 0x10 = (0x10 & (#9106 ^ low:32[RAX] ^ 0x7E))
.address 0x404F6D
00042d37: PF := ~low:1[let $1 = #9106 >> 4 ^ #9106 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404F6D
00042d3a: SF := high:1[#9106]
.address 0x404F6D
00042d3d: ZF := 0 = #9106
.address 0x404F70
00042d46: when ZF goto %0002a1ac
000446aa: goto %00042d4c

.address 0x404F95
0002a1ac: 
.address 0x404F95
0002a1c3: #5824 := low:32[RAX]
.address 0x404F95
0002a1c6: RAX := pad:64[low:32[RAX] + 1]
.address 0x404F95
0002a1c9: CF := low:32[RAX] < #5824
.address 0x404F95
0002a1cc: OF := ~high:1[#5824] & (high:1[#5824] | high:1[low:32[RAX]]) & ~(
high:1[#5824] & high:1[low:32[RAX]])
.address 0x404F95
0002a1cf: AF := 0x10 = (0x10 & (low:32[RAX] ^ #5824 ^ 1))
.address 0x404F95
0002a1d2: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404F95
0002a1d5: SF := high:1[low:32[RAX]]
.address 0x404F95
0002a1d8: ZF := 0 = low:32[RAX]
.address 0x404F98
0002a1df: RCX := 1
.address 0x404F9D
0002a1ec: mem := mem with [RDX] <- mem[RDX] | low:8[RCX]
.address 0x404F9D
0002a1ef: OF := 0
.address 0x404F9D
0002a1f2: CF := 0
.address 0x404F9D
0002a1f5: AF := unknown[bits]:u1
.address 0x404F9D
0002a1f8: PF := ~low:1[let $1 = mem[RDX] >> 4 ^ mem[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404F9D
0002a1fb: SF := high:1[mem[RDX]]
.address 0x404F9D
0002a1fe: ZF := 0 = mem[RDX]
.address 0x404F9F
0002a20c: #5828 := RDX
.address 0x404F9F
0002a20f: RDX := RDX + 1
.address 0x404F9F
0002a212: CF := RDX < #5828
.address 0x404F9F
0002a215: OF := ~high:1[#5828] & (high:1[#5828] | high:1[RDX]) & ~(high:1[#5828] & high:1[RDX])
.address 0x404F9F
0002a218: AF := 0x10 = (0x10 & (RDX ^ #5828 ^ 1))
.address 0x404F9F
0002a21b: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x404F9F
0002a21e: SF := high:1[RDX]
.address 0x404F9F
0002a221: ZF := 0 = RDX
.address 0x404FA3
0002a22e: #5831 := low:32[RAX] - 0x100
.address 0x404FA3
0002a231: CF := low:32[RAX] < 0x100
.address 0x404FA3
0002a234: OF := high:1[(low:32[RAX] ^ 0x100) & (low:32[RAX] ^ #5831)]
.address 0x404FA3
0002a237: AF := 0x10 = (0x10 & (#5831 ^ low:32[RAX] ^ 0x100))
.address 0x404FA3
0002a23a: PF := ~low:1[let $1 = #5831 >> 4 ^ #5831 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404FA3
0002a23d: SF := high:1[#5831]
.address 0x404FA3
0002a240: ZF := 0 = #5831
.address 0x404FA8
0002a249: when ~ZF goto %0002a15a
000446ab: goto %0002a24f

.address 0x404F72
00042d4c: 
.address 0x404F72
00042d57: #9108 := low:32[RAX] - 0x5F
.address 0x404F72
00042d5a: CF := low:32[RAX] < 0x5F
.address 0x404F72
00042d5d: OF := high:1[(low:32[RAX] ^ 0x5F) & (low:32[RAX] ^ #9108)]
.address 0x404F72
00042d60: AF := 0x10 = (0x10 & (#9108 ^ low:32[RAX] ^ 0x5F))
.address 0x404F72
00042d63: PF := ~low:1[let $1 = #9108 >> 4 ^ #9108 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404F72
00042d66: SF := high:1[#9108]
.address 0x404F72
00042d69: ZF := 0 = #9108
.address 0x404F75
00042d70: RCX := extract:63:8[RCX].pad:8[ZF]
.address 0x404F78
00042d7e: #9110 := low:32[RAX]
.address 0x404F78
00042d81: RAX := pad:64[low:32[RAX] + 1]
.address 0x404F78
00042d84: CF := low:32[RAX] < #9110
.address 0x404F78
00042d87: OF := ~high:1[#9110] & (high:1[#9110] | high:1[low:32[RAX]]) & ~(
high:1[#9110] & high:1[low:32[RAX]])
.address 0x404F78
00042d8a: AF := 0x10 = (0x10 & (low:32[RAX] ^ #9110 ^ 1))
.address 0x404F78
00042d8d: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404F78
00042d90: SF := high:1[low:32[RAX]]
.address 0x404F78
00042d93: ZF := 0 = low:32[RAX]
.address 0x404F7B
00042da0: mem := mem with [RDX] <- mem[RDX] | low:8[RCX]
.address 0x404F7B
00042da3: OF := 0
.address 0x404F7B
00042da6: CF := 0
.address 0x404F7B
00042da9: AF := unknown[bits]:u1
.address 0x404F7B
00042dac: PF := ~low:1[let $1 = mem[RDX] >> 4 ^ mem[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404F7B
00042daf: SF := high:1[mem[RDX]]
.address 0x404F7B
00042db2: ZF := 0 = mem[RDX]
.address 0x404F7D
00042dc0: #9114 := RDX
.address 0x404F7D
00042dc3: RDX := RDX + 1
.address 0x404F7D
00042dc6: CF := RDX < #9114
.address 0x404F7D
00042dc9: OF := ~high:1[#9114] & (high:1[#9114] | high:1[RDX]) & ~(high:1[#9114] & high:1[RDX])
.address 0x404F7D
00042dcc: AF := 0x10 = (0x10 & (RDX ^ #9114 ^ 1))
.address 0x404F7D
00042dcf: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x404F7D
00042dd2: SF := high:1[RDX]
.address 0x404F7D
00042dd5: ZF := 0 = RDX
.address 0x404F81
00042de2: #9117 := low:32[RAX] - 0x100
.address 0x404F81
00042de5: CF := low:32[RAX] < 0x100
.address 0x404F81
00042de8: OF := high:1[(low:32[RAX] ^ 0x100) & (low:32[RAX] ^ #9117)]
.address 0x404F81
00042deb: AF := 0x10 = (0x10 & (#9117 ^ low:32[RAX] ^ 0x100))
.address 0x404F81
00042dee: PF := ~low:1[let $1 = #9117 >> 4 ^ #9117 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404F81
00042df1: SF := high:1[#9117]
.address 0x404F81
00042df4: ZF := 0 = #9117
.address 0x404F86
00042dfd: when ZF goto %0002a24f
000446ac: goto %0002a15a

.address 0x404FAA
0002a24f: 
.address 0x404FAA
0002a256: RSP := RSP - 8
.address 0x404FAA
0002a259: mem := mem with [RSP, el]:u64 <- 0x404FAF
.address 0x404FAA
0002a25c: call @sub_414870 with return %0002a25e

.address 0x404FAF
0002a25e: 
.address 0x404FAF
0002a269: #5833 := RAX
.address 0x404FAF
0002a26c: OF := 0
.address 0x404FAF
0002a26f: CF := 0
.address 0x404FAF
0002a272: AF := unknown[bits]:u1
.address 0x404FAF
0002a275: PF := ~low:1[let $1 = #5833 >> 4 ^ #5833 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404FAF
0002a278: SF := high:1[#5833]
.address 0x404FAF
0002a27b: ZF := 0 = #5833
.address 0x404FB2
0002a285: when ZF goto %0002a27f
000446ad: goto %0002a293

.address 0x40535B
0002a27f: 
.address 0x40535B
0002a28f: RAX := 0x417C4A
.address 0x405362
0002a297: goto %0002a293

.address 0x404FB8
0002a293: 
.address 0x404FB8
0002a29d: mem := mem with [0x621388, el]:u64 <- RAX
.address 0x404FBF
0002a2a5: goto %0002a2a1

.address 0x404B21
0002a2a1: 
.address 0x404B21
0002a2ab: R14 := pad:64[low:32[RBP]]
.address 0x404B24
0002a2b2: RDI := 0x4E20
.address 0x404B29
0002a2b9: mem := mem with [0x6213B8, el]:u64 <- 0x64
.address 0x404B34
0002a2c8: #5835 := low:32[R14]
.address 0x404B34
0002a2cb: #5836 := low:32[R13]
.address 0x404B34
0002a2ce: R14 := pad:64[low:32[R14] - low:32[R13]]
.address 0x404B34
0002a2d1: CF := #5835 < #5836
.address 0x404B34
0002a2d4: OF := high:1[(#5835 ^ #5836) & (#5835 ^ low:32[R14])]
.address 0x404B34
0002a2d7: AF := 0x10 = (0x10 & (low:32[R14] ^ #5835 ^ #5836))
.address 0x404B34
0002a2da: PF := ~low:1[let $1 = low:32[R14] >> 4 ^ low:32[R14] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404B34
0002a2dd: SF := high:1[low:32[R14]]
.address 0x404B34
0002a2e0: ZF := 0 = low:32[R14]
.address 0x404B37
0002a2e7: R15 := 0x417C4A
.address 0x404B3E
0002a2f0: RSP := RSP - 8
.address 0x404B3E
0002a2f3: mem := mem with [RSP, el]:u64 <- 0x404B43
.address 0x404B3E
0002a2f6: call @sub_414480 with return %0002a2f8

.address 0x404B43
0002a2f8: 
.address 0x404B43
0002a2fd: mem := mem with [0x6213B0, el]:u64 <- 0
.address 0x404B4E
0002a304: mem := mem with [0x6213C0, el]:u64 <- RAX
.address 0x404B55
0002a30e: RSP := RSP - 8
.address 0x404B55
0002a311: mem := mem with [RSP, el]:u64 <- 0x404B5A
.address 0x404B55
0002a314: call @sub_4060e0 with return %0003f4ea

.address 0x404B5A
0003f4ea: 
.address 0x404B5A
0003f4f5: #8739 := low:32[R14]
.address 0x404B5A
0003f4f8: OF := 0
.address 0x404B5A
0003f4fb: CF := 0
.address 0x404B5A
0003f4fe: AF := unknown[bits]:u1
.address 0x404B5A
0003f501: PF := ~low:1[let $1 = #8739 >> 4 ^ #8739 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404B5A
0003f504: SF := high:1[#8739]
.address 0x404B5A
0003f507: ZF := 0 = #8739
.address 0x404B5D
0003f511: when ZF | (SF | OF) & ~(SF & OF) goto %0003f50b
000446ae: goto %00042c25

.address 0x404D81
0003f50b: 
.address 0x404D81
0003f521: #8741 := mem[0x6212F5]
.address 0x404D81
0003f524: CF := mem[0x6212F5] < 0
.address 0x404D81
0003f527: OF := high:1[mem[0x6212F5] & (mem[0x6212F5] ^ #8741)]
.address 0x404D81
0003f52a: AF := 0x10 = (0x10 & (#8741 ^ mem[0x6212F5]))
.address 0x404D81
0003f52d: PF := ~low:1[let $1 = #8741 >> 4 ^ #8741 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404D81
0003f530: SF := high:1[#8741]
.address 0x404D81
0003f533: ZF := 0 = #8741
.address 0x404D88
0003f53d: when ZF goto %0003f537
000446af: goto %00042bf3

.address 0x404E92
0003f537: 
.address 0x404E92
0003f547: RDI := 0x41A33D
.address 0x404E99
0003f54e: RDX := 1
.address 0x404E9E
0003f55b: RSI := 0
.address 0x404E9E
0003f55e: AF := unknown[bits]:u1
.address 0x404E9E
0003f561: ZF := 1
.address 0x404E9E
0003f564: PF := 1
.address 0x404E9E
0003f567: OF := 0
.address 0x404E9E
0003f56a: CF := 0
.address 0x404E9E
0003f56d: SF := 0
.address 0x404EA0
0003f576: RSP := RSP - 8
.address 0x404EA0
0003f579: mem := mem with [RSP, el]:u64 <- 0x404EA5
.address 0x404EA0
0003f57c: call @sub_405f80 with return %0003f57e

.address 0x404EA5
0003f57e: 
.address 0x404EA5
0003f584: goto %0003f580

.address 0x404D8E
00042bf3: 
.address 0x404D8E
00042bf8: RDI := 0x41A33D
.address 0x404D95
00042bff: RCX := R15
.address 0x404D98
00042c06: RDX := 1
.address 0x404D9D
00042c0d: RSI := 3
.address 0x404DA2
00042c16: RSP := RSP - 8
.address 0x404DA2
00042c19: mem := mem with [RSP, el]:u64 <- 0x404DA7
.address 0x404DA2
00042c1c: call @sub_4099e0 with return %00042c1e

.address 0x404DA7
00042c1e: 
.address 0x404DA7
00042c23: goto %0003f580

.address 0x404B63
00042c25: 
000446b0: goto %00042c28

.address 0x404B68
00042c28: 
.address 0x404B68
00042c2d: RDI := mem[RBX + (R13 << 3), el]:u64
.address 0x404B6C
00042c3a: RSI := 0
.address 0x404B6C
00042c3d: AF := unknown[bits]:u1
.address 0x404B6C
00042c40: ZF := 1
.address 0x404B6C
00042c43: PF := 1
.address 0x404B6C
00042c46: OF := 0
.address 0x404B6C
00042c49: CF := 0
.address 0x404B6C
00042c4c: SF := 0
.address 0x404B6E
00042c53: RCX := R15
.address 0x404B71
00042c5a: RDX := 1
.address 0x404B76
00042c68: #9097 := R13
.address 0x404B76
00042c6b: R13 := R13 + 1
.address 0x404B76
00042c6e: CF := R13 < #9097
.address 0x404B76
00042c71: OF := ~high:1[#9097] & (high:1[#9097] | high:1[R13]) & ~(high:1[#9097] & high:1[R13])
.address 0x404B76
00042c74: AF := 0x10 = (0x10 & (R13 ^ #9097 ^ 1))
.address 0x404B76
00042c77: PF := ~low:1[let $1 = R13 >> 4 ^ R13 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x404B76
00042c7a: SF := high:1[R13]
.address 0x404B76
00042c7d: ZF := 0 = R13
.address 0x404B7A
00042c86: RSP := RSP - 8
.address 0x404B7A
00042c89: mem := mem with [RSP, el]:u64 <- 0x404B7F
.address 0x404B7A
00042c8c: call @sub_4099e0 with return %00042c8e

.address 0x404B7F
00042c8e: 
.address 0x404B7F
00042c99: #9100 := low:32[RBP] - low:32[R13]
.address 0x404B7F
00042c9c: CF := low:32[RBP] < low:32[R13]
.address 0x404B7F
00042c9f: OF := high:1[(low:32[RBP] ^ low:32[R13]) & (low:32[RBP] ^ #9100)]
.address 0x404B7F
00042ca2: AF := 0x10 = (0x10 & (#9100 ^ low:32[RBP] ^ low:32[R13]))
.address 0x404B7F
00042ca5: PF := ~low:1[let $1 = #9100 >> 4 ^ #9100 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404B7F
00042ca8: SF := high:1[#9100]
.address 0x404B7F
00042cab: ZF := 0 = #9100
.address 0x404B82
00042cb4: when ~(ZF | (SF | OF) & ~(SF & OF)) goto %00042c28
000446b1: goto %0003f580

.address 0x404B84
0003f580: 
.address 0x404B84
0003f590: #8743 := mem[0x6213B0, el]:u64
.address 0x404B84
0003f593: CF := mem[0x6213B0, el]:u64 < 0
.address 0x404B84
0003f596: OF := high:1[mem[0x6213B0, el]:u64 & (mem[0x6213B0, el]:u64 ^ #8743)]
.address 0x404B84
0003f599: AF := 0x10 = (0x10 & (#8743 ^ mem[0x6213B0, el]:u64))
.address 0x404B84
0003f59c: PF := ~low:1[let $1 = #8743 >> 4 ^ #8743 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404B84
0003f59f: SF := high:1[#8743]
.address 0x404B84
0003f5a2: ZF := 0 = #8743
.address 0x404B8C
0003f5ac: when ~ZF goto %0003f5a6
000446b2: goto %0003f649

.address 0x405003
0003f5a6: 
.address 0x405003
0003f5b8: RSP := RSP - 8
.address 0x405003
0003f5bb: mem := mem with [RSP, el]:u64 <- 0x405008
.address 0x405003
0003f5be: call @sub_4062f0 with return %0003f5c0

.address 0x405008
0003f5c0: 
.address 0x405008
0003f5cb: #8745 := mem[0x6212F5]
.address 0x405008
0003f5ce: CF := mem[0x6212F5] < 0
.address 0x405008
0003f5d1: OF := high:1[mem[0x6212F5] & (mem[0x6212F5] ^ #8745)]
.address 0x405008
0003f5d4: AF := 0x10 = (0x10 & (#8745 ^ mem[0x6212F5]))
.address 0x405008
0003f5d7: PF := ~low:1[let $1 = #8745 >> 4 ^ #8745 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405008
0003f5da: SF := high:1[#8745]
.address 0x405008
0003f5dd: ZF := 0 = #8745
.address 0x40500F
0003f5e7: when ZF goto %0003f5e1
000446b3: goto %0003f623

.address 0x40534A
0003f5e1: 
.address 0x40534A
0003f5f1: RSI := 1
.address 0x40534F
0003f5fe: RDI := 0
.address 0x40534F
0003f601: AF := unknown[bits]:u1
.address 0x40534F
0003f604: ZF := 1
.address 0x40534F
0003f607: PF := 1
.address 0x40534F
0003f60a: OF := 0
.address 0x40534F
0003f60d: CF := 0
.address 0x40534F
0003f610: SF := 0
.address 0x405351
0003f619: RSP := RSP - 8
.address 0x405351
0003f61c: mem := mem with [RSP, el]:u64 <- 0x405356
.address 0x405351
0003f61f: call @sub_406570 with return %0003f621

.address 0x405356
0003f621: 
.address 0x405356
0003f627: goto %0003f623

.address 0x405015
0003f623: 
.address 0x405015
0003f633: #8747 := mem[0x6213B0, el]:u64
.address 0x405015
0003f636: CF := mem[0x6213B0, el]:u64 < 0
.address 0x405015
0003f639: OF := high:1[mem[0x6213B0, el]:u64 & (mem[0x6213B0, el]:u64 ^ #8747)]
.address 0x405015
0003f63c: AF := 0x10 = (0x10 & (#8747 ^ mem[0x6213B0, el]:u64))
.address 0x405015
0003f63f: PF := ~low:1[let $1 = #8747 >> 4 ^ #8747 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405015
0003f642: SF := high:1[#8747]
.address 0x405015
0003f645: ZF := 0 = #8747
.address 0x40501D
0003f64f: when ZF goto %0003f649
000446b4: goto %00042b69

.address 0x405023
00042b69: 
.address 0x405023
00042b70: RSP := RSP - 8
.address 0x405023
00042b73: mem := mem with [RSP, el]:u64 <- 0x405028
.address 0x405023
00042b76: call @sub_409420 with return %00042b78

.address 0x405028
00042b78: 
.address 0x405028
00042b83: #9093 := mem[0x621380, el]:u64
.address 0x405028
00042b86: CF := mem[0x621380, el]:u64 < 0
.address 0x405028
00042b89: OF := high:1[mem[0x621380, el]:u64 & (mem[0x621380, el]:u64 ^ #9093)]
.address 0x405028
00042b8c: AF := 0x10 = (0x10 & (#9093 ^ mem[0x621380, el]:u64))
.address 0x405028
00042b8f: PF := ~low:1[let $1 = #9093 >> 4 ^ #9093 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405028
00042b92: SF := high:1[#9093]
.address 0x405028
00042b95: ZF := 0 = #9093
.address 0x405030
00042b9e: when ZF goto %0003f6ac
000446b5: goto %00042ba4

.address 0x405036
00042ba4: 
.address 0x405036
00042ba9: RDI := mem[0x620288, el]:u64
.address 0x40503D
00042bb0: RAX := mem[RDI + 0x28, el]:u64
.address 0x405041
00042bbd: #9095 := mem[RDI + 0x30, el]:u64 - RAX
.address 0x405041
00042bc0: CF := mem[RDI + 0x30, el]:u64 < RAX
.address 0x405041
00042bc3: OF := high:1[(mem[RDI + 0x30, el]:u64 ^ RAX) & (mem[RDI + 0x30, el]:u64 ^ #9095)]
.address 0x405041
00042bc6: AF := 0x10 = (0x10 & (#9095 ^ mem[RDI + 0x30, el]:u64 ^ RAX))
.address 0x405041
00042bc9: PF := ~low:1[let $1 = #9095 >> 4 ^ #9095 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405041
00042bcc: SF := high:1[#9095]
.address 0x405041
00042bcf: ZF := 0 = #9095
.address 0x405045
00042bd8: when CF | ZF goto %0004266a
000446b6: goto %00042bde

.address 0x40576C
0004266a: 
.address 0x40576C
0004266f: RSI := 0xA
.address 0x405771
00042678: RSP := RSP - 8
.address 0x405771
0004267b: mem := mem with [RSP, el]:u64 <- 0x405776
.address 0x405771
0004267e: call @sub_4039d0 with return %00042680

.address 0x405776
00042680: 
.address 0x405776
00042686: goto %00042682

.address 0x40504B
00042bde: 
.address 0x40504B
00042be3: RDX := low:64[RAX + 1]
.address 0x40504F
00042bea: mem := mem with [RDI + 0x28, el]:u64 <- RDX
.address 0x405053
00042bf1: mem := mem with [RAX] <- 0xA
000446b7: goto %00042682

.address 0x405056
00042682: 
.address 0x405056
00042693: #9059 := mem[0x6211F8, el]:u64
.address 0x405056
00042696: mem := mem with [0x6211F8, el]:u64 <- mem[0x6211F8, el]:u64 + 1
.address 0x405056
00042699: CF := mem[0x6211F8, el]:u64 < #9059
.address 0x405056
0004269c: OF := ~high:1[#9059] & (high:1[#9059] | high:1[mem[0x6211F8, el]:u64]) & ~(
high:1[#9059] & high:1[mem[0x6211F8, el]:u64])
.address 0x405056
0004269f: AF := 0x10 = (0x10 & (mem[0x6211F8, el]:u64 ^ #9059 ^ 1))
.address 0x405056
000426a2: PF := ~low:1[let $1 = mem[0x6211F8, el]:u64 >> 4 ^ mem[0x6211F8, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405056
000426a5: SF := high:1[mem[0x6211F8, el]:u64]
.address 0x405056
000426a8: ZF := 0 = mem[0x6211F8, el]:u64
.address 0x40505E
000426af: RBX := mem[0x621380, el]:u64
.address 0x405065
000426b6: goto %0003f680

.address 0x404B92
0003f649: 
.address 0x404B92
0003f660: #8749 := low:32[R14]
.address 0x404B92
0003f663: R14 := pad:64[low:32[R14] - 1]
.address 0x404B92
0003f666: CF := #8749 < 1
.address 0x404B92
0003f669: OF := high:1[(#8749 ^ 1) & (#8749 ^ low:32[R14])]
.address 0x404B92
0003f66c: AF := 0x10 = (0x10 & (low:32[R14] ^ #8749 ^ 1))
.address 0x404B92
0003f66f: PF := ~low:1[let $1 = low:32[R14] >> 4 ^ low:32[R14] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404B92
0003f672: SF := high:1[low:32[R14]]
.address 0x404B92
0003f675: ZF := 0 = low:32[R14]
.address 0x404B96
0003f67c: RBX := mem[0x621380, el]:u64
.address 0x404B9D
0003f686: when ~(ZF | (SF | OF) & ~(SF & OF)) goto %0003f680
000446b8: goto %00042af9

.address 0x404B9F
00042af9: 
.address 0x404B9F
00042aff: goto %00042afb

.address 0x405223
00042afb: 
.address 0x405223
00042b0b: #9089 := RBX
.address 0x405223
00042b0e: OF := 0
.address 0x405223
00042b11: CF := 0
.address 0x405223
00042b14: AF := unknown[bits]:u1
.address 0x405223
00042b17: PF := ~low:1[let $1 = #9089 >> 4 ^ #9089 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405223
00042b1a: SF := high:1[#9089]
.address 0x405223
00042b1d: ZF := 0 = #9089
.address 0x405226
00042b26: when ZF goto %0003f6ac
000446b9: goto %00042b2c

.address 0x40522C
00042b2c: 
.address 0x40522C
00042b37: #9091 := mem[RBX + 0x18, el]:u64
.address 0x40522C
00042b3a: CF := mem[RBX + 0x18, el]:u64 < 0
.address 0x40522C
00042b3d: OF := high:1[mem[RBX + 0x18, el]:u64 & (mem[RBX + 0x18, el]:u64 ^ #9091)]
.address 0x40522C
00042b40: AF := 0x10 = (0x10 & (#9091 ^ mem[RBX + 0x18, el]:u64))
.address 0x40522C
00042b43: PF := ~low:1[let $1 = #9091 >> 4 ^ #9091 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40522C
00042b46: SF := high:1[#9091]
.address 0x40522C
00042b49: ZF := 0 = #9091
.address 0x405231
00042b52: when ~ZF goto %0003f680
000446ba: goto %00042b58

.address 0x405237
00042b58: 
.address 0x405237
00042b5d: mem := mem with [0x6212B8] <- 0
.address 0x40523E
00042b64: goto %0003f680

.address 0x404BDC
0003f680: 
.address 0x404BDC
0003f696: #8752 := RBX
.address 0x404BDC
0003f699: OF := 0
.address 0x404BDC
0003f69c: CF := 0
.address 0x404BDC
0003f69f: AF := unknown[bits]:u1
.address 0x404BDC
0003f6a2: PF := ~low:1[let $1 = #8752 >> 4 ^ #8752 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404BDC
0003f6a5: SF := high:1[#8752]
.address 0x404BDC
0003f6a8: ZF := 0 = #8752
.address 0x404BDF
0003f6b2: when ZF goto %0003f6ac
000446bb: goto %000428e5

.address 0x404BE5
000428e5: 
.address 0x404BE5
000428ea: RAX := mem[RBX + 0x18, el]:u64
.address 0x404BE9
000428f1: RDI := mem[RBX, el]:u64
.address 0x404BEC
000428f8: mem := mem with [0x621380, el]:u64 <- RAX
.address 0x404BF3
000428ff: RAX := mem[0x6213C8, el]:u64
.address 0x404BFA
0004290c: #9078 := RAX
.address 0x404BFA
0004290f: OF := 0
.address 0x404BFA
00042912: CF := 0
.address 0x404BFA
00042915: AF := unknown[bits]:u1
.address 0x404BFA
00042918: PF := ~low:1[let $1 = #9078 >> 4 ^ #9078 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404BFA
0004291b: SF := high:1[#9078]
.address 0x404BFA
0004291e: ZF := 0 = #9078
.address 0x404BFD
00042928: when ZF goto %00042922
000446bc: goto %0004299a

.address 0x404BFF
0004299a: 
.address 0x404BFF
000429a5: #9080 := RDI
.address 0x404BFF
000429a8: OF := 0
.address 0x404BFF
000429ab: CF := 0
.address 0x404BFF
000429ae: AF := unknown[bits]:u1
.address 0x404BFF
000429b1: PF := ~low:1[let $1 = #9080 >> 4 ^ #9080 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404BFF
000429b4: SF := high:1[#9080]
.address 0x404BFF
000429b7: ZF := 0 = #9080
.address 0x404C02
000429c0: when ~ZF goto %00042922
000446bd: goto %000429c6

.address 0x404C04
000429c6: 
.address 0x404C04
000429cb: RDX := mem[0x6210F8, el]:u64
.address 0x404C0B
000429d2: RCX := RDX
.address 0x404C0E
000429e1: #9082 := RCX
.address 0x404C0E
000429e4: #9083 := mem[0x6210F0, el]:u64
.address 0x404C0E
000429e7: RCX := RCX - mem[0x6210F0, el]:u64
.address 0x404C0E
000429ea: CF := #9082 < #9083
.address 0x404C0E
000429ed: OF := high:1[(#9082 ^ #9083) & (#9082 ^ RCX)]
.address 0x404C0E
000429f0: AF := 0x10 = (0x10 & (RCX ^ #9082 ^ #9083))
.address 0x404C0E
000429f3: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x404C0E
000429f6: SF := high:1[RCX]
.address 0x404C0E
000429f9: ZF := 0 = RCX
.address 0x404C15
00042a06: #9085 := RCX - 0xF
.address 0x404C15
00042a09: CF := RCX < 0xF
.address 0x404C15
00042a0c: OF := high:1[(RCX ^ 0xF) & (RCX ^ #9085)]
.address 0x404C15
00042a0f: AF := 0x10 = (0x10 & (#9085 ^ RCX ^ 0xF))
.address 0x404C15
00042a12: PF := ~low:1[let $1 = #9085 >> 4 ^ #9085 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404C15
00042a15: SF := high:1[#9085]
.address 0x404C15
00042a18: ZF := 0 = #9085
.address 0x404C19
00042a21: when CF | ZF goto %0004175e
000446be: goto %00042a27

.address 0x4057E4
0004175e: 
.address 0x4057E4
00041763: RCX := 0x416A38
.address 0x4057EB
0004176a: RSI := 0x417C00
.address 0x4057F2
00041771: RDI := 0x41A1B0
.address 0x4057F9
00041778: RDX := 0x402
.address 0x4057FE
00041781: RSP := RSP - 8
.address 0x4057FE
00041784: mem := mem with [RSP, el]:u64 <- 0x405803
.address 0x4057FE
00041787: call @sub_403a30 with return %00041789

.address 0x404C1F
00042a27: 
.address 0x404C1F
00042a2c: RCX := low:64[RDX - 0x10]
.address 0x404C23
00042a33: RSI := R12
.address 0x404C26
00042a3a: RDI := RAX
.address 0x404C29
00042a41: mem := mem with [0x6210F8, el]:u64 <- RCX
.address 0x404C30
00042a48: RCX := mem[RDX - 0x10, el]:u64
.address 0x404C34
00042a4f: RDX := mem[RDX - 8, el]:u64
.address 0x404C38
00042a56: mem := mem with [RSP + 0x30, el]:u64 <- RCX
.address 0x404C3D
00042a5d: mem := mem with [RSP + 0x38, el]:u64 <- RDX
.address 0x404C42
00042a66: RSP := RSP - 8
.address 0x404C42
00042a69: mem := mem with [RSP, el]:u64 <- 0x404C47
.address 0x404C42
00042a6c: call @sub_40e960 with return %00042a6e

.address 0x404C47
00042a6e: 
.address 0x404C47
00042a79: #9087 := RAX
.address 0x404C47
00042a7c: OF := 0
.address 0x404C47
00042a7f: CF := 0
.address 0x404C47
00042a82: AF := unknown[bits]:u1
.address 0x404C47
00042a85: PF := ~low:1[let $1 = #9087 >> 4 ^ #9087 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404C47
00042a88: SF := high:1[#9087]
.address 0x404C47
00042a8b: ZF := 0 = #9087
.address 0x404C4A
00042a94: when ZF goto %00041789
000446bf: goto %00042a9a

.address 0x405803
00041789: 
.address 0x405803
0004178e: RCX := 0x416ADA
.address 0x40580A
00041795: RSI := 0x417C00
.address 0x405811
0004179c: RDI := 0x417F3F
.address 0x405818
000417a3: RDX := 0x638
.address 0x40581D
000417ac: RSP := RSP - 8
.address 0x40581D
000417af: mem := mem with [RSP, el]:u64 <- 0x405822
.address 0x40581D
000417b2: call @sub_403a30 with return %000407b2

.address 0x404C50
00042a9a: 
.address 0x404C50
00042a9f: RDI := RAX
.address 0x404C53
00042aa8: RSP := RSP - 8
.address 0x404C53
00042aab: mem := mem with [RSP, el]:u64 <- 0x404C58
.address 0x404C53
00042aae: call @sub_403e70 with return %00042ab0

.address 0x404C58
00042ab0: 
.address 0x404C58
00042ab5: RDI := mem[RBX, el]:u64
.address 0x404C5B
00042abe: RSP := RSP - 8
.address 0x404C5B
00042ac1: mem := mem with [RSP, el]:u64 <- 0x404C60
.address 0x404C5B
00042ac4: call @sub_403e70 with return %00042ac6

.address 0x404C60
00042ac6: 
.address 0x404C60
00042acb: RDI := mem[RBX + 8, el]:u64
.address 0x404C64
00042ad4: RSP := RSP - 8
.address 0x404C64
00042ad7: mem := mem with [RSP, el]:u64 <- 0x404C69
.address 0x404C64
00042ada: call @sub_403e70 with return %00042adc

.address 0x404C69
00042adc: 
.address 0x404C69
00042ae1: RDI := RBX
.address 0x404C6C
00042aea: RSP := RSP - 8
.address 0x404C6C
00042aed: mem := mem with [RSP, el]:u64 <- 0x404C71
.address 0x404C6C
00042af0: call @sub_403e70 with return %00042af2

.address 0x404C71
00042af2: 
.address 0x404C71
00042af7: goto %00042993

.address 0x404BA8
00042922: 
.address 0x404BA8
00042932: RDX := pad:64[pad:32[mem[RBX + 0x10]]]
.address 0x404BAC
00042939: RSI := mem[RBX + 8, el]:u64
.address 0x404BB0
00042942: RSP := RSP - 8
.address 0x404BB0
00042945: mem := mem with [RSP, el]:u64 <- 0x404BB5
.address 0x404BB0
00042948: call @sub_40a860 with return %0004294a

.address 0x404BB5
0004294a: 
.address 0x404BB5
0004294f: RDI := mem[RBX, el]:u64
.address 0x404BB8
00042958: RSP := RSP - 8
.address 0x404BB8
0004295b: mem := mem with [RSP, el]:u64 <- 0x404BBD
.address 0x404BB8
0004295e: call @sub_403e70 with return %00042960

.address 0x404BBD
00042960: 
.address 0x404BBD
00042965: RDI := mem[RBX + 8, el]:u64
.address 0x404BC1
0004296e: RSP := RSP - 8
.address 0x404BC1
00042971: mem := mem with [RSP, el]:u64 <- 0x404BC6
.address 0x404BC1
00042974: call @sub_403e70 with return %00042976

.address 0x404BC6
00042976: 
.address 0x404BC6
0004297b: RDI := RBX
.address 0x404BC9
00042984: RSP := RSP - 8
.address 0x404BC9
00042987: mem := mem with [RSP, el]:u64 <- 0x404BCE
.address 0x404BC9
0004298a: call @sub_403e70 with return %0004298c

.address 0x404BCE
0004298c: 
.address 0x404BCE
00042991: mem := mem with [0x6212B8] <- 1
000446c0: goto %00042993

.address 0x404BD5
00042993: 
.address 0x404BD5
00042998: RBX := mem[0x621380, el]:u64
000446c1: goto %0003f680

.address 0x404C76
0003f6ac: 
.address 0x404C76
0003f6c2: #8754 := mem[0x621312]
.address 0x404C76
0003f6c5: CF := mem[0x621312] < 0
.address 0x404C76
0003f6c8: OF := high:1[mem[0x621312] & (mem[0x621312] ^ #8754)]
.address 0x404C76
0003f6cb: AF := 0x10 = (0x10 & (#8754 ^ mem[0x621312]))
.address 0x404C76
0003f6ce: PF := ~low:1[let $1 = #8754 >> 4 ^ #8754 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404C76
0003f6d1: SF := high:1[#8754]
.address 0x404C76
0003f6d4: ZF := 0 = #8754
.address 0x404C7D
0003f6de: when ZF goto %0003f6d8
000446c2: goto %000407fe

.address 0x404C7F
000407fe: 
.address 0x404C7F
00040809: #8917 := mem[0x621310]
.address 0x404C7F
0004080c: CF := mem[0x621310] < 0
.address 0x404C7F
0004080f: OF := high:1[mem[0x621310] & (mem[0x621310] ^ #8917)]
.address 0x404C7F
00040812: AF := 0x10 = (0x10 & (#8917 ^ mem[0x621310]))
.address 0x404C7F
00040815: PF := ~low:1[let $1 = #8917 >> 4 ^ #8917 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404C7F
00040818: SF := high:1[#8917]
.address 0x404C7F
0004081b: ZF := 0 = #8917
.address 0x404C86
00040825: when ~ZF goto %0004081f
000446c3: goto %0003f6d8

.address 0x404DAC
0004081f: 
.address 0x404DAC
00040835: #8919 := mem[0x620060, el]:u64 - 2
.address 0x404DAC
00040838: CF := mem[0x620060, el]:u64 < 2
.address 0x404DAC
0004083b: OF := high:1[(mem[0x620060, el]:u64 ^ 2) & (mem[0x620060, el]:u64 ^ #8919)]
.address 0x404DAC
0004083e: AF := 0x10 = (0x10 & (#8919 ^ mem[0x620060, el]:u64 ^ 2))
.address 0x404DAC
00040841: PF := ~low:1[let $1 = #8919 >> 4 ^ #8919 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404DAC
00040844: SF := high:1[#8919]
.address 0x404DAC
00040847: ZF := 0 = #8919
.address 0x404DB4
00040851: when ~ZF goto %0004084b
000446c4: goto %000428b2

.address 0x404DB6
000428b2: 
.address 0x404DB6
000428b7: RAX := mem[0x620068, el]:u64
.address 0x404DBD
000428c4: #9076 := mem[RAX, el]:u16 - 0x5B1B
.address 0x404DBD
000428c7: CF := mem[RAX, el]:u16 < 0x5B1B
.address 0x404DBD
000428ca: OF := high:1[(mem[RAX, el]:u16 ^ 0x5B1B) & (mem[RAX, el]:u16 ^ #9076)]
.address 0x404DBD
000428cd: AF := 0x10 = (0x10 & (#9076 ^ mem[RAX, el]:u16 ^ 0x5B1B))
.address 0x404DBD
000428d0: PF := ~low:1[let $1 = #9076 >> 4 ^ #9076 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404DBD
000428d3: SF := high:1[#9076]
.address 0x404DBD
000428d6: ZF := 0 = #9076
.address 0x404DC2
000428df: when ZF goto %00041dd7
000446c5: goto %0004084b

.address 0x405555
00041dd7: 
.address 0x405555
00041de2: #9015 := mem[0x620070, el]:u64 - 1
.address 0x405555
00041de5: CF := mem[0x620070, el]:u64 < 1
.address 0x405555
00041de8: OF := high:1[(mem[0x620070, el]:u64 ^ 1) & (mem[0x620070, el]:u64 ^ #9015)]
.address 0x405555
00041deb: AF := 0x10 = (0x10 & (#9015 ^ mem[0x620070, el]:u64 ^ 1))
.address 0x405555
00041dee: PF := ~low:1[let $1 = #9015 >> 4 ^ #9015 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405555
00041df1: SF := high:1[#9015]
.address 0x405555
00041df4: ZF := 0 = #9015
.address 0x40555D
00041dfd: when ~ZF goto %0004084b
000446c6: goto %00041e03

.address 0x405563
00041e03: 
.address 0x405563
00041e08: RAX := mem[0x620078, el]:u64
.address 0x40556A
00041e15: #9017 := mem[RAX] - 0x6D
.address 0x40556A
00041e18: CF := mem[RAX] < 0x6D
.address 0x40556A
00041e1b: OF := high:1[(mem[RAX] ^ 0x6D) & (mem[RAX] ^ #9017)]
.address 0x40556A
00041e1e: AF := 0x10 = (0x10 & (#9017 ^ mem[RAX] ^ 0x6D))
.address 0x40556A
00041e21: PF := ~low:1[let $1 = #9017 >> 4 ^ #9017 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40556A
00041e24: SF := high:1[#9017]
.address 0x40556A
00041e27: ZF := 0 = #9017
.address 0x40556D
00041e30: when ~ZF goto %0004084b
000446c7: goto %00041e36

.address 0x405573
00041e36: 
.address 0x405573
00041e3b: goto %00040882

.address 0x404DC8
0004084b: 
.address 0x404DC8
0004085b: RDI := 0x620060
.address 0x404DCF
00040864: RSP := RSP - 8
.address 0x404DCF
00040867: mem := mem with [RSP, el]:u64 <- 0x404DD4
.address 0x404DCF
0004086a: call @sub_4072f0 with return %0004086c

.address 0x404DD4
0004086c: 
.address 0x404DD4
00040871: RDI := 0x620070
.address 0x404DDB
0004087a: RSP := RSP - 8
.address 0x404DDB
0004087d: mem := mem with [RSP, el]:u64 <- 0x404DE0
.address 0x404DDB
00040880: call @sub_4072f0 with return %00040882

.address 0x404DE0
00040882: 
.address 0x404DE0
00040887: RDI := mem[0x620288, el]:u64
.address 0x404DE7
00040890: RSP := RSP - 8
.address 0x404DE7
00040893: mem := mem with [RSP, el]:u64 <- 0x404DEC
.address 0x404DE7
00040896: call @sub_403e00 with return %00040898

.address 0x404DEC
00040898: 
.address 0x404DEC
000408a3: RDI := 0
.address 0x404DEC
000408a6: AF := unknown[bits]:u1
.address 0x404DEC
000408a9: ZF := 1
.address 0x404DEC
000408ac: PF := 1
.address 0x404DEC
000408af: OF := 0
.address 0x404DEC
000408b2: CF := 0
.address 0x404DEC
000408b5: SF := 0
.address 0x404DEE
000408be: RSP := RSP - 8
.address 0x404DEE
000408c1: mem := mem with [RSP, el]:u64 <- 0x404DF3
.address 0x404DEE
000408c4: call @sub_4070d0 with return %000408c6

.address 0x404DF3
000408c6: 
.address 0x404DF3
000408cb: RBX := pad:64[mem[0x621214, el]:u32]
.address 0x404DF9
000408d8: #8921 := low:32[RBX]
.address 0x404DF9
000408db: OF := 0
.address 0x404DF9
000408de: CF := 0
.address 0x404DF9
000408e1: AF := unknown[bits]:u1
.address 0x404DF9
000408e4: PF := ~low:1[let $1 = #8921 >> 4 ^ #8921 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404DF9
000408e7: SF := high:1[#8921]
.address 0x404DF9
000408ea: ZF := 0 = #8921
.address 0x404DFB
000408f4: when ZF goto %000408ee
000446c8: goto %00042869

.address 0x404DFD
00042869: 
000446c9: goto %0004286c

.address 0x404E00
0004286c: 
.address 0x404E00
00042871: RDI := 0x13
.address 0x404E05
0004287a: RSP := RSP - 8
.address 0x404E05
0004287d: mem := mem with [RSP, el]:u64 <- 0x404E0A
.address 0x404E05
00042880: call @sub_4037d0 with return %00042882

.address 0x404E0A
00042882: 
.address 0x404E0A
0004288e: #9073 := low:32[RBX]
.address 0x404E0A
00042891: RBX := pad:64[low:32[RBX] - 1]
.address 0x404E0A
00042894: CF := #9073 < 1
.address 0x404E0A
00042897: OF := high:1[(#9073 ^ 1) & (#9073 ^ low:32[RBX])]
.address 0x404E0A
0004289a: AF := 0x10 = (0x10 & (low:32[RBX] ^ #9073 ^ 1))
.address 0x404E0A
0004289d: PF := ~low:1[let $1 = low:32[RBX] >> 4 ^ low:32[RBX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404E0A
000428a0: SF := high:1[low:32[RBX]]
.address 0x404E0A
000428a3: ZF := 0 = low:32[RBX]
.address 0x404E0D
000428ac: when ~ZF goto %0004286c
000446ca: goto %000408ee

.address 0x404E0F
000408ee: 
.address 0x404E0F
000408fe: RDI := pad:64[mem[0x621218, el]:u32]
.address 0x404E15
0004090b: #8923 := low:32[RDI]
.address 0x404E15
0004090e: OF := 0
.address 0x404E15
00040911: CF := 0
.address 0x404E15
00040914: AF := unknown[bits]:u1
.address 0x404E15
00040917: PF := ~low:1[let $1 = #8923 >> 4 ^ #8923 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404E15
0004091a: SF := high:1[#8923]
.address 0x404E15
0004091d: ZF := 0 = #8923
.address 0x404E17
00040926: when ZF goto %0003f6d8
000446cb: goto %0004092c

.address 0x404E1D
0004092c: 
.address 0x404E1D
00040933: RSP := RSP - 8
.address 0x404E1D
00040936: mem := mem with [RSP, el]:u64 <- 0x404E22
.address 0x404E1D
00040939: call @sub_4037d0 with return %0004093b

.address 0x404E22
0004093b: 
.address 0x404E22
00040940: goto %0003f6d8

.address 0x404C8C
0003f6d8: 
.address 0x404C8C
0003f6ee: #8756 := mem[0x621318]
.address 0x404C8C
0003f6f1: CF := mem[0x621318] < 0
.address 0x404C8C
0003f6f4: OF := high:1[mem[0x621318] & (mem[0x621318] ^ #8756)]
.address 0x404C8C
0003f6f7: AF := 0x10 = (0x10 & (#8756 ^ mem[0x621318]))
.address 0x404C8C
0003f6fa: PF := ~low:1[let $1 = #8756 >> 4 ^ #8756 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404C8C
0003f6fd: SF := high:1[#8756]
.address 0x404C8C
0003f700: ZF := 0 = #8756
.address 0x404C93
0003f70a: when ~ZF goto %0003f704
000446cc: goto %0003f7b2

.address 0x40506A
0003f704: 
.address 0x40506A
0003f714: RSI := 0x6211A0
.address 0x405071
0003f71b: RDI := 0x417F45
.address 0x405078
0003f724: RSP := RSP - 8
.address 0x405078
0003f727: mem := mem with [RSP, el]:u64 <- 0x40507D
.address 0x405078
0003f72a: call @sub_4067b0 with return %0003f72c

.address 0x40507D
0003f72c: 
.address 0x40507D
0003f731: RSI := 0x621140
.address 0x405084
0003f738: RDI := 0x417F4F
.address 0x40508B
0003f741: RSP := RSP - 8
.address 0x40508B
0003f744: mem := mem with [RSP, el]:u64 <- 0x405090
.address 0x40508B
0003f747: call @sub_4067b0 with return %0003f749

.address 0x405090
0003f749: 
.address 0x405090
0003f74e: RDI := mem[0x6212D0, el]:u64
.address 0x405097
0003f757: RSP := RSP - 8
.address 0x405097
0003f75a: mem := mem with [RSP, el]:u64 <- 0x40509C
.address 0x405097
0003f75d: call @sub_413590 with return %0003f75f

.address 0x40509C
0003f75f: 
.address 0x40509C
0003f764: RDX := 0x61F9E0
.address 0x4050A3
0003f76b: RAX := pad:64[low:32[RAX]]
.address 0x4050A5
0003f772: RSI := 0x41A1E8
.address 0x4050AC
0003f779: RDI := 1
.address 0x4050B1
0003f780: RDX := mem[RDX + (RAX << 3), el]:u64
.address 0x4050B5
0003f78d: RAX := 0
.address 0x4050B5
0003f790: AF := unknown[bits]:u1
.address 0x4050B5
0003f793: ZF := 1
.address 0x4050B5
0003f796: PF := 1
.address 0x4050B5
0003f799: OF := 0
.address 0x4050B5
0003f79c: CF := 0
.address 0x4050B5
0003f79f: SF := 0
.address 0x4050B7
0003f7a8: RSP := RSP - 8
.address 0x4050B7
0003f7ab: mem := mem with [RSP, el]:u64 <- 0x4050BC
.address 0x4050B7
0003f7ae: call @sub_403cd0 with return %0003f7b0

.address 0x4050BC
0003f7b0: 
.address 0x4050BC
0003f7b6: goto %0003f7b2

.address 0x404C99
0003f7b2: 
.address 0x404C99
0003f7bc: RBX := mem[0x6213C8, el]:u64
.address 0x404CA0
0003f7c9: #8758 := RBX
.address 0x404CA0
0003f7cc: OF := 0
.address 0x404CA0
0003f7cf: CF := 0
.address 0x404CA0
0003f7d2: AF := unknown[bits]:u1
.address 0x404CA0
0003f7d5: PF := ~low:1[let $1 = #8758 >> 4 ^ #8758 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404CA0
0003f7d8: SF := high:1[#8758]
.address 0x404CA0
0003f7db: ZF := 0 = #8758
.address 0x404CA3
0003f7e5: when ZF goto %0003f7df
000446cd: goto %0004077b

.address 0x404CA5
0004077b: 
.address 0x404CA5
00040780: RDI := RBX
.address 0x404CA8
00040789: RSP := RSP - 8
.address 0x404CA8
0004078c: mem := mem with [RSP, el]:u64 <- 0x404CAD
.address 0x404CA8
0004078f: call @sub_40dc80 with return %00040791

.address 0x404CAD
00040791: 
.address 0x404CAD
0004079c: #8915 := RAX
.address 0x404CAD
0004079f: OF := 0
.address 0x404CAD
000407a2: CF := 0
.address 0x404CAD
000407a5: AF := unknown[bits]:u1
.address 0x404CAD
000407a8: PF := ~low:1[let $1 = #8915 >> 4 ^ #8915 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x404CAD
000407ab: SF := high:1[#8915]
.address 0x404CAD
000407ae: ZF := 0 = #8915
.address 0x404CB0
000407b8: when ~ZF goto %000407b2
000446ce: goto %000407e8

.address 0x405822
000407b2: 
.address 0x405822
000407c2: RCX := 0x416ADA
.address 0x405829
000407c9: RSI := 0x417C00
.address 0x405830
000407d0: RDI := 0x41A210
.address 0x405837
000407d7: RDX := 0x66C
.address 0x40583C
000407e0: RSP := RSP - 8
.address 0x40583C
000407e3: mem := mem with [RSP, el]:u64 <- 0x405841
.address 0x40583C
000407e6: call @sub_403a30 with return %0003f819

.address 0x404CB6
000407e8: 
.address 0x404CB6
000407ed: RDI := RBX
.address 0x404CB9
000407f6: RSP := RSP - 8
.address 0x404CB9
000407f9: mem := mem with [RSP, el]:u64 <- 0x404CBE
.address 0x404CB9
000407fc: call @sub_40e350 with return %0003f7df

.address 0x404CBE
0003f7df: 
.address 0x404CBE
0003f7ef: RSI := mem[RSP + 0x48, el]:u64
.address 0x404CC3
0003f7fc: RSI := RSI ^ mem[FS_BASE + 0x28, el]:u64
.address 0x404CC3
0003f7ff: OF := 0
.address 0x404CC3
0003f802: CF := 0
.address 0x404CC3
0003f805: AF := unknown[bits]:u1
.address 0x404CC3
0003f808: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x404CC3
0003f80b: SF := high:1[RSI]
.address 0x404CC3
0003f80e: ZF := 0 = RSI
.address 0x404CCC
0003f815: RAX := pad:64[mem[0x621210, el]:u32]
.address 0x404CD2
0003f81f: when ~ZF goto %0003f819
000446cf: goto %00040706

.address 0x405841
0003f819: 
.address 0x405841
0003f82b: RSP := RSP - 8
.address 0x405841
0003f82e: mem := mem with [RSP, el]:u64 <- 0x405846
.address 0x405841
0003f831: call @sub_403970 with return %0003f833

.address 0x405846
0003f833: 
.address 0x405846
0003f83a: RSP := RSP - 8
.address 0x405846
0003f83d: mem := mem with [RSP, el]:u64 <- 0x40584B
.address 0x405846
0003f840: call @sub_4146d0 with return %0003f842

.address 0x40584B
0003f842: 
000446d0: call @sub_405850 with noreturn

.address 0x404CD8
00040706: 
.address 0x404CD8
00040712: #8911 := RSP
.address 0x404CD8
00040715: RSP := RSP + 0x58
.address 0x404CD8
00040718: CF := RSP < #8911
.address 0x404CD8
0004071b: OF := ~high:1[#8911] & (high:1[#8911] | high:1[RSP]) & ~(high:1[#8911] & high:1[RSP])
.address 0x404CD8
0004071e: AF := 0x10 = (0x10 & (RSP ^ #8911 ^ 0x58))
.address 0x404CD8
00040721: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x404CD8
00040724: SF := high:1[RSP]
.address 0x404CD8
00040727: ZF := 0 = RSP
.address 0x404CDC
0004072f: RBX := mem[RSP, el]:u64
.address 0x404CDC
00040732: RSP := RSP + 8
.address 0x404CDD
0004073a: RBP := mem[RSP, el]:u64
.address 0x404CDD
0004073d: RSP := RSP + 8
.address 0x404CDE
00040745: R12 := mem[RSP, el]:u64
.address 0x404CDE
00040748: RSP := RSP + 8
.address 0x404CE0
00040750: R13 := mem[RSP, el]:u64
.address 0x404CE0
00040753: RSP := RSP + 8
.address 0x404CE2
0004075b: R14 := mem[RSP, el]:u64
.address 0x404CE2
0004075e: RSP := RSP + 8
.address 0x404CE4
00040766: R15 := mem[RSP, el]:u64
.address 0x404CE4
00040769: RSP := RSP + 8
.address 0x404CE6
00040772: #8914 := mem[RSP, el]:u64
.address 0x404CE6
00040775: RSP := RSP + 8
.address 0x404CE6
00040779: call #8914 with noreturn

.address 0x405503
00041d1e: 
.address 0x405503
00041d2e: R14 := mem[RDI + 0x20, el]:u64
.address 0x405507
00041d37: RSP := RSP - 8
.address 0x405507
00041d3a: mem := mem with [RSP, el]:u64 <- 0x40550C
.address 0x405507
00041d3d: call @sub_403e70 with return %00041d3f

.address 0x40550C
00041d3f: 
.address 0x40550C
00041d44: RDI := R14
000446d1: goto %00041cf8

.address 0x404134
00043881: 
.address 0x404134
00043886: RAX := extend:64[mem[R13 + (RAX << 2), el]:u32]
.address 0x404139
00043895: #9204 := RAX
.address 0x404139
00043898: #9205 := R13
.address 0x404139
0004389b: RAX := RAX + #9205
.address 0x404139
0004389e: CF := RAX < #9204
.address 0x404139
000438a1: OF := high:1[#9204] = high:1[#9205] & (high:1[#9204] | high:1[RAX]) & ~(
high:1[#9204] & high:1[RAX])
.address 0x404139
000438a4: AF := 0x10 = (0x10 & (RAX ^ #9204 ^ #9205))
.address 0x404139
000438a7: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x404139
000438aa: SF := high:1[RAX]
.address 0x404139
000438ad: ZF := 0 = RAX
.address 0x40413C
000438b5: call RAX with noreturn


.address 0x404268
00043e10: sub sub_404268()
.address 0x404268
00040d9b: 
.address 0x404268
00040da7: #8958 := RSP
.address 0x404268
00040daa: RSP := RSP - 8
.address 0x404268
00040dad: CF := #8958 < 8
.address 0x404268
00040db0: OF := high:1[(#8958 ^ 8) & (#8958 ^ RSP)]
.address 0x404268
00040db3: AF := 0x10 = (0x10 & (RSP ^ #8958 ^ 8))
.address 0x404268
00040db6: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x404268
00040db9: SF := high:1[RSP]
.address 0x404268
00040dbc: ZF := 0 = RSP
.address 0x40426C
00040dc3: RDI := mem[0x6202A0, el]:u64
.address 0x404273
00040dca: R8 := 0x417C4A
.address 0x40427A
00040dd2: RSP := RSP - 8
.address 0x40427A
00040dd5: mem := mem with [RSP, el]:u64 <- 2
.address 0x40427C
00040de2: RDX := 0
.address 0x40427C
00040de5: AF := unknown[bits]:u1
.address 0x40427C
00040de8: ZF := 1
.address 0x40427C
00040deb: PF := 1
.address 0x40427C
00040dee: OF := 0
.address 0x40427C
00040df1: CF := 0
.address 0x40427C
00040df4: SF := 0
.address 0x40427E
00040dfb: R9 := RAX
.address 0x404281
00040e08: RCX := 0xFFFFFFFFFFFFFFFF
.address 0x404281
00040e0b: OF := 0
.address 0x404281
00040e0e: CF := 0
.address 0x404281
00040e11: AF := unknown[bits]:u1
.address 0x404281
00040e14: PF := 1
.address 0x404281
00040e17: SF := 1
.address 0x404281
00040e1a: ZF := 0
.address 0x404285
00040e27: RSI := 0
.address 0x404285
00040e2a: AF := unknown[bits]:u1
.address 0x404285
00040e2d: ZF := 1
.address 0x404285
00040e30: PF := 1
.address 0x404285
00040e33: OF := 0
.address 0x404285
00040e36: CF := 0
.address 0x404285
00040e39: SF := 0
.address 0x404287
00040e42: RSP := RSP - 8
.address 0x404287
00040e45: mem := mem with [RSP, el]:u64 <- 0x40428C
.address 0x404287
00040e48: call @sub_414710 with return %00040e4a

.address 0x40428C
00040e4a: 
.address 0x40428C
00040e4f: mem := mem with [0x6212C0, el]:u64 <- RAX
.address 0x404293
00040e57: RAX := mem[RSP, el]:u64
.address 0x404293
00040e5a: RSP := RSP + 8
.address 0x404294
00040e62: RDX := mem[RSP, el]:u64
.address 0x404294
00040e65: RSP := RSP + 8
.address 0x404295
00040e6c: call @sub_4040f8 with noreturn


.address 0x405850
00043e11: sub sub_405850()
.address 0x405850
0003f845: 
.address 0x405850
0003f850: RBP := 0
.address 0x405850
0003f853: AF := unknown[bits]:u1
.address 0x405850
0003f856: ZF := 1
.address 0x405850
0003f859: PF := 1
.address 0x405850
0003f85c: OF := 0
.address 0x405850
0003f85f: CF := 0
.address 0x405850
0003f862: SF := 0
.address 0x405852
0003f869: R9 := RDX
.address 0x405855
0003f871: RSI := mem[RSP, el]:u64
.address 0x405855
0003f874: RSP := RSP + 8
.address 0x405856
0003f87b: RDX := RSP
.address 0x405859
0003f888: RSP := RSP & 0xFFFFFFFFFFFFFFF0
.address 0x405859
0003f88b: OF := 0
.address 0x405859
0003f88e: CF := 0
.address 0x405859
0003f891: AF := unknown[bits]:u1
.address 0x405859
0003f894: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405859
0003f897: SF := high:1[RSP]
.address 0x405859
0003f89a: ZF := 0 = RSP
.address 0x40585D
0003f8a3: #8762 := RAX
.address 0x40585D
0003f8a6: RSP := RSP - 8
.address 0x40585D
0003f8a9: mem := mem with [RSP, el]:u64 <- #8762
.address 0x40585E
0003f8b2: #8763 := RSP
.address 0x40585E
0003f8b5: RSP := RSP - 8
.address 0x40585E
0003f8b8: mem := mem with [RSP, el]:u64 <- #8763
.address 0x40585F
0003f8bf: R8 := 0x416330
.address 0x405866
0003f8c6: RCX := 0x4162C0
.address 0x40586D
0003f8cd: RDI := 0x403E90
.address 0x405874
0003f8d7: #8764 := mem[0x61FFD8, el]:u64
.address 0x405874
0003f8da: RSP := RSP - 8
.address 0x405874
0003f8dd: mem := mem with [RSP, el]:u64 <- 0x40587A
.address 0x405874
0003f8e1: call #8764 with return %0003f8e3

.address 0x40587A
0003f8e3: 
000446d2: call @sub_405880 with noreturn


.address 0x405880
00043e13: sub sub_405880()
.address 0x405880
0003f8e9: 
.address 0x405880
0003f8ee: RDI := 0x620268
.address 0x405887
0003f8f7: #8765 := RBP
.address 0x405887
0003f8fa: RSP := RSP - 8
.address 0x405887
0003f8fd: mem := mem with [RSP, el]:u64 <- #8765
.address 0x405888
0003f904: RAX := 0x620268
.address 0x40588F
0003f911: #8766 := RAX - RDI
.address 0x40588F
0003f914: CF := RAX < RDI
.address 0x40588F
0003f917: OF := high:1[(RAX ^ RDI) & (RAX ^ #8766)]
.address 0x40588F
0003f91a: AF := 0x10 = (0x10 & (#8766 ^ RAX ^ RDI))
.address 0x40588F
0003f91d: PF := ~low:1[let $1 = #8766 >> 4 ^ #8766 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40588F
0003f920: SF := high:1[#8766]
.address 0x40588F
0003f923: ZF := 0 = #8766
.address 0x405892
0003f92a: RBP := RSP
.address 0x405895
0003f934: when ZF goto %0003f92e
000446d3: goto %000406bd

.address 0x405897
000406bd: 
.address 0x405897
000406c2: RAX := mem[0x61FFD0, el]:u64
.address 0x40589E
000406cf: #8909 := RAX
.address 0x40589E
000406d2: OF := 0
.address 0x40589E
000406d5: CF := 0
.address 0x40589E
000406d8: AF := unknown[bits]:u1
.address 0x40589E
000406db: PF := ~low:1[let $1 = #8909 >> 4 ^ #8909 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40589E
000406de: SF := high:1[#8909]
.address 0x40589E
000406e1: ZF := 0 = #8909
.address 0x4058A1
000406ea: when ZF goto %0003f92e
000446d4: goto %000406f0

.address 0x4058B0
0003f92e: 
.address 0x4058B0
0003f93f: RBP := mem[RSP, el]:u64
.address 0x4058B0
0003f942: RSP := RSP + 8
.address 0x4058B1
0003f94b: #8768 := mem[RSP, el]:u64
.address 0x4058B1
0003f94e: RSP := RSP + 8
.address 0x4058B1
0003f952: call #8768 with noreturn

.address 0x4058A3
000406f0: 
.address 0x4058A3
000406f6: RBP := mem[RSP, el]:u64
.address 0x4058A3
000406f9: RSP := RSP + 8
.address 0x4058A4
00040701: call RAX with noreturn


.address 0x405960
00043e16: sub sub_405960()
.address 0x405960
0003fad4: 
.address 0x405960
0003fad9: RAX := mem[RDI, el]:u64
.address 0x405963
0003fae6: RDX := 0
.address 0x405963
0003fae9: AF := unknown[bits]:u1
.address 0x405963
0003faec: ZF := 1
.address 0x405963
0003faef: PF := 1
.address 0x405963
0003faf2: OF := 0
.address 0x405963
0003faf5: CF := 0
.address 0x405963
0003faf8: SF := 0
.address 0x405965
0003fb11: #8788 := pad:128[RSI]
.address 0x405965
0003fb50: goto %0003fb13

0003fb2a: 
.address 0x405965
0003fb2b: call %0000737f with noreturn

0003fb20: 
.address 0x405965
0003fb21: #8791 := low:64[#8790].low:64[#8789]
.address 0x405965
0003fb24: RAX := extract:63:0[#8791]
.address 0x405965
0003fb27: RDX := extract:127:64[#8791]
.address 0x405965
0003fb31: goto %0003fb2e

0003fb2d: 
.address 0x405965
0003fb2f: when high:64[#8789] = 0 goto %0003fb20
.address 0x405965
0003fb30: goto %0003fb2a

0003fb1d: 
.address 0x405965
0003fb1e: #8790 := #8787 % #8788
.address 0x405965
0003fb34: goto %0003fb2d

0003fb1a: 
.address 0x405965
0003fb1b: #8789 := #8787 / #8788
.address 0x405965
0003fb35: goto %0003fb1d

0003fb2e: 
.address 0x405965
0003fb3b: goto %0003fb37

0003fb16: 
.address 0x405965
0003fb17: call %0000737f with noreturn

0003fb36: 
.address 0x405965
0003fb38: when #8788 = 0 goto %0003fb16
.address 0x405965
0003fb39: goto %0003fb1a

0003fb13: 
.address 0x405965
0003fb14: #8787 := RDX.RAX
.address 0x405965
0003fb4f: goto %0003fb36

0003fb37: 
.address 0x405965
0003fb3e: CF := unknown[bits]:u1
.address 0x405965
0003fb41: OF := unknown[bits]:u1
.address 0x405965
0003fb44: SF := unknown[bits]:u1
.address 0x405965
0003fb47: ZF := unknown[bits]:u1
.address 0x405965
0003fb4a: AF := unknown[bits]:u1
.address 0x405965
0003fb4d: PF := unknown[bits]:u1
000446d5: goto %0003fb51

.address 0x405968
0003fb51: 
.address 0x405968
0003fb56: RAX := RDX
.address 0x40596B
0003fb5f: #8792 := mem[RSP, el]:u64
.address 0x40596B
0003fb62: RSP := RSP + 8
.address 0x40596B
0003fb66: call #8792 with noreturn


.address 0x405970
00043e18: sub sub_405970()
.address 0x405970
0003fb6b: 
.address 0x405970
0003fb76: RAX := 0
.address 0x405970
0003fb79: AF := unknown[bits]:u1
.address 0x405970
0003fb7c: ZF := 1
.address 0x405970
0003fb7f: PF := 1
.address 0x405970
0003fb82: OF := 0
.address 0x405970
0003fb85: CF := 0
.address 0x405970
0003fb88: SF := 0
.address 0x405972
0003fb8f: RDX := mem[RSI, el]:u64
.address 0x405975
0003fb9c: #8793 := mem[RDI, el]:u64 - RDX
.address 0x405975
0003fb9f: CF := mem[RDI, el]:u64 < RDX
.address 0x405975
0003fba2: OF := high:1[(mem[RDI, el]:u64 ^ RDX) & (mem[RDI, el]:u64 ^ #8793)]
.address 0x405975
0003fba5: AF := 0x10 = (0x10 & (#8793 ^ mem[RDI, el]:u64 ^ RDX))
.address 0x405975
0003fba8: PF := ~low:1[let $1 = #8793 >> 4 ^ #8793 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405975
0003fbab: SF := high:1[#8793]
.address 0x405975
0003fbae: ZF := 0 = #8793
.address 0x405978
0003fbb8: when ZF goto %0003fbb2
000446d6: goto %000405d5

.address 0x405980
0003fbb2: 
.address 0x405980
0003fbc2: RAX := mem[RSI + 8, el]:u64
.address 0x405984
0003fbcf: #8795 := mem[RDI + 8, el]:u64 - RAX
.address 0x405984
0003fbd2: CF := mem[RDI + 8, el]:u64 < RAX
.address 0x405984
0003fbd5: OF := high:1[(mem[RDI + 8, el]:u64 ^ RAX) & (mem[RDI + 8, el]:u64 ^ #8795)]
.address 0x405984
0003fbd8: AF := 0x10 = (0x10 & (#8795 ^ mem[RDI + 8, el]:u64 ^ RAX))
.address 0x405984
0003fbdb: PF := ~low:1[let $1 = #8795 >> 4 ^ #8795 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405984
0003fbde: SF := high:1[#8795]
.address 0x405984
0003fbe1: ZF := 0 = #8795
.address 0x405988
0003fbe8: RAX := extract:63:8[RAX].pad:8[ZF]
.address 0x40598B
0003fbf1: #8797 := mem[RSP, el]:u64
.address 0x40598B
0003fbf4: RSP := RSP + 8
.address 0x40598B
0003fbf8: call #8797 with noreturn

.address 0x40597A
000405d5: 
.address 0x40597A
000405dc: #8902 := mem[RSP, el]:u64
.address 0x40597A
000405df: RSP := RSP + 8
.address 0x40597A
000405e3: call #8902 with noreturn


.address 0x4059C0
00043e1a: sub sub_4059c0()
.address 0x4059C0
0003fc53: 
.address 0x4059C0
0003fc58: R8 := mem[RSI, el]:u64
.address 0x4059C3
0003fc5f: R9 := mem[RDI, el]:u64
.address 0x4059C6
0003fc66: R11 := 0x4163A0
.address 0x4059CD
0003fc6f: #8801 := R15
.address 0x4059CD
0003fc72: RSP := RSP - 8
.address 0x4059CD
0003fc75: mem := mem with [RSP, el]:u64 <- #8801
.address 0x4059CF
0003fc82: R10 := 0
.address 0x4059CF
0003fc85: AF := unknown[bits]:u1
.address 0x4059CF
0003fc88: ZF := 1
.address 0x4059CF
0003fc8b: PF := 1
.address 0x4059CF
0003fc8e: OF := 0
.address 0x4059CF
0003fc91: CF := 0
.address 0x4059CF
0003fc94: SF := 0
.address 0x4059D2
0003fc9d: #8802 := R14
.address 0x4059D2
0003fca0: RSP := RSP - 8
.address 0x4059D2
0003fca3: mem := mem with [RSP, el]:u64 <- #8802
.address 0x4059D4
0003fcaa: RAX := 1
.address 0x4059D9
0003fcb3: #8803 := R13
.address 0x4059D9
0003fcb6: RSP := RSP - 8
.address 0x4059D9
0003fcb9: mem := mem with [RSP, el]:u64 <- #8803
.address 0x4059DB
0003fcc2: #8804 := R12
.address 0x4059DB
0003fcc5: RSP := RSP - 8
.address 0x4059DB
0003fcc8: mem := mem with [RSP, el]:u64 <- #8804
.address 0x4059DD
0003fccf: R12 := pad:64[low:32[RDX]]
.address 0x4059E0
0003fcd8: #8805 := RBP
.address 0x4059E0
0003fcdb: RSP := RSP - 8
.address 0x4059E0
0003fcde: mem := mem with [RSP, el]:u64 <- #8805
.address 0x4059E1
0003fce5: RBP := 0x7E000000000000
.address 0x4059EB
0003fcee: #8806 := RBX
.address 0x4059EB
0003fcf1: RSP := RSP - 8
.address 0x4059EB
0003fcf4: mem := mem with [RSP, el]:u64 <- #8806
.address 0x4059EC
0003fcfb: RBX := RCX
000446d7: goto %0003fcfd

.address 0x4059EF
0003fcfd: 
.address 0x4059EF
0003fd02: RCX := pad:64[pad:32[mem[R8]]]
.address 0x4059F3
0003fd0f: #8807 := low:8[RCX] - 0x3D
.address 0x4059F3
0003fd12: CF := low:8[RCX] < 0x3D
.address 0x4059F3
0003fd15: OF := high:1[(low:8[RCX] ^ 0x3D) & (low:8[RCX] ^ #8807)]
.address 0x4059F3
0003fd18: AF := 0x10 = (0x10 & (#8807 ^ low:8[RCX] ^ 0x3D))
.address 0x4059F3
0003fd1b: PF := ~low:1[let $1 = #8807 >> 4 ^ #8807 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4059F3
0003fd1e: SF := high:1[#8807]
.address 0x4059F3
0003fd21: ZF := 0 = #8807
.address 0x4059F6
0003fd2b: when ZF goto %0003fd25
000446d8: goto %000405cb

.address 0x4059F8
000405cb: 
000446d9: goto %0003fea1

.address 0x405A00
0003fea1: 
.address 0x405A00
0003feb4: when ZF | (SF | OF) & ~(SF & OF) goto %0003feae
000446da: goto %00040382

.address 0x405AD8
0003feae: 
.address 0x405AD8
0003fec4: #8833 := low:8[RCX]
.address 0x405AD8
0003fec7: OF := 0
.address 0x405AD8
0003feca: CF := 0
.address 0x405AD8
0003fecd: AF := unknown[bits]:u1
.address 0x405AD8
0003fed0: PF := ~low:1[let $1 = #8833 >> 4 ^ #8833 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405AD8
0003fed3: SF := high:1[#8833]
.address 0x405AD8
0003fed6: ZF := 0 = #8833
.address 0x405ADA
0003fee0: when ZF goto %0003feda
000446db: goto %00040356

.address 0x405ADC
00040356: 
.address 0x405ADC
00040361: #8875 := low:8[RCX] - 0x3A
.address 0x405ADC
00040364: CF := low:8[RCX] < 0x3A
.address 0x405ADC
00040367: OF := high:1[(low:8[RCX] ^ 0x3A) & (low:8[RCX] ^ #8875)]
.address 0x405ADC
0004036a: AF := 0x10 = (0x10 & (#8875 ^ low:8[RCX] ^ 0x3A))
.address 0x405ADC
0004036d: PF := ~low:1[let $1 = #8875 >> 4 ^ #8875 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405ADC
00040370: SF := high:1[#8875]
.address 0x405ADC
00040373: ZF := 0 = #8875
.address 0x405ADF
0004037c: when ~ZF goto %0003fd51
000446dc: goto %0003feda

.address 0x405AE5
0003feda: 
.address 0x405AE5
0003feea: R14 := R8
.address 0x405AE8
0003fef1: RAX := 1
.address 0x405AED
0003fef9: goto %0003fef5

.address 0x405A06
00040382: 
.address 0x405A06
0004038d: #8877 := low:8[RCX] - 0x5C
.address 0x405A06
00040390: CF := low:8[RCX] < 0x5C
.address 0x405A06
00040393: OF := high:1[(low:8[RCX] ^ 0x5C) & (low:8[RCX] ^ #8877)]
.address 0x405A06
00040396: AF := 0x10 = (0x10 & (#8877 ^ low:8[RCX] ^ 0x5C))
.address 0x405A06
00040399: PF := ~low:1[let $1 = #8877 >> 4 ^ #8877 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405A06
0004039c: SF := high:1[#8877]
.address 0x405A06
0004039f: ZF := 0 = #8877
.address 0x405A09
000403a8: when ZF goto %0003fdd6
000446dd: goto %000403ae

.address 0x405A68
0003fdd6: 
.address 0x405A68
0003fddb: RCX := pad:64[pad:32[mem[R8 + 1]]]
.address 0x405A6D
0003fde9: #8820 := R8
.address 0x405A6D
0003fdec: R8 := R8 + 2
.address 0x405A6D
0003fdef: CF := R8 < #8820
.address 0x405A6D
0003fdf2: OF := ~high:1[#8820] & (high:1[#8820] | high:1[R8]) & ~(high:1[#8820] & high:1[R8])
.address 0x405A6D
0003fdf5: AF := 0x10 = (0x10 & (R8 ^ #8820 ^ 2))
.address 0x405A6D
0003fdf8: PF := ~low:1[let $1 = R8 >> 4 ^ R8 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405A6D
0003fdfb: SF := high:1[R8]
.address 0x405A6D
0003fdfe: ZF := 0 = R8
.address 0x405A71
0003fe0b: #8823 := low:8[RCX] - 0x78
.address 0x405A71
0003fe0e: CF := low:8[RCX] < 0x78
.address 0x405A71
0003fe11: OF := high:1[(low:8[RCX] ^ 0x78) & (low:8[RCX] ^ #8823)]
.address 0x405A71
0003fe14: AF := 0x10 = (0x10 & (#8823 ^ low:8[RCX] ^ 0x78))
.address 0x405A71
0003fe17: PF := ~low:1[let $1 = #8823 >> 4 ^ #8823 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405A71
0003fe1a: SF := high:1[#8823]
.address 0x405A71
0003fe1d: ZF := 0 = #8823
.address 0x405A74
0003fe27: when ~(CF | ZF) goto %0003fe21
000446de: goto %000404a8

.address 0x405A76
000404a8: 
.address 0x405A76
000404ad: R13 := pad:64[pad:32[low:8[RCX]]]
.address 0x405A7A
000404b4: R13 := extend:64[mem[R11 + (R13 << 2), el]:u32]
.address 0x405A7E
000404c3: #8889 := R13
.address 0x405A7E
000404c6: #8890 := R11
.address 0x405A7E
000404c9: R13 := R13 + #8890
.address 0x405A7E
000404cc: CF := R13 < #8889
.address 0x405A7E
000404cf: OF := high:1[#8889] = high:1[#8890] & (high:1[#8889] | high:1[R13]) & ~(
high:1[#8889] & high:1[R13])
.address 0x405A7E
000404d2: AF := 0x10 = (0x10 & (R13 ^ #8889 ^ #8890))
.address 0x405A7E
000404d5: PF := ~low:1[let $1 = R13 >> 4 ^ R13 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405A7E
000404d8: SF := high:1[R13]
.address 0x405A7E
000404db: ZF := 0 = R13
.address 0x405A81
000404e3: call R13 with noreturn

.address 0x405A0B
000403ae: 
.address 0x405A0B
000403b9: #8879 := low:8[RCX] - 0x5E
.address 0x405A0B
000403bc: CF := low:8[RCX] < 0x5E
.address 0x405A0B
000403bf: OF := high:1[(low:8[RCX] ^ 0x5E) & (low:8[RCX] ^ #8879)]
.address 0x405A0B
000403c2: AF := 0x10 = (0x10 & (#8879 ^ low:8[RCX] ^ 0x5E))
.address 0x405A0B
000403c5: PF := ~low:1[let $1 = #8879 >> 4 ^ #8879 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405A0B
000403c8: SF := high:1[#8879]
.address 0x405A0B
000403cb: ZF := 0 = #8879
.address 0x405A0E
000403d4: when ~ZF goto %0003fd51
000446df: goto %000403da

.address 0x405A10
000403da: 
.address 0x405A10
000403df: RCX := pad:64[pad:32[mem[R8 + 1]]]
.address 0x405A15
000403e6: R14 := low:64[R8 + 1]
.address 0x405A19
000403ed: R13 := pad:64[low:32[RCX - 0x40]]
.address 0x405A1D
000403fa: #8881 := low:8[R13] - 0x3E
.address 0x405A1D
000403fd: CF := low:8[R13] < 0x3E
.address 0x405A1D
00040400: OF := high:1[(low:8[R13] ^ 0x3E) & (low:8[R13] ^ #8881)]
.address 0x405A1D
00040403: AF := 0x10 = (0x10 & (#8881 ^ low:8[R13] ^ 0x3E))
.address 0x405A1D
00040406: PF := ~low:1[let $1 = #8881 >> 4 ^ #8881 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405A1D
00040409: SF := high:1[#8881]
.address 0x405A1D
0004040c: ZF := 0 = #8881
.address 0x405A21
00040416: when ~(CF | ZF) goto %00040410
000446e0: goto %00040466

.address 0x405AB8
00040410: 
.address 0x405AB8
00040426: #8883 := low:8[RCX] - 0x3F
.address 0x405AB8
00040429: CF := low:8[RCX] < 0x3F
.address 0x405AB8
0004042c: OF := high:1[(low:8[RCX] ^ 0x3F) & (low:8[RCX] ^ #8883)]
.address 0x405AB8
0004042f: AF := 0x10 = (0x10 & (#8883 ^ low:8[RCX] ^ 0x3F))
.address 0x405AB8
00040432: PF := ~low:1[let $1 = #8883 >> 4 ^ #8883 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405AB8
00040435: SF := high:1[#8883]
.address 0x405AB8
00040438: ZF := 0 = #8883
.address 0x405ABB
00040441: when ZF goto %0003ff67
000446e1: goto %00040447

.address 0x405AF0
0003ff67: 
.address 0x405AF0
0003ff6c: mem := mem with [R9] <- 0x7F
.address 0x405AF4
0003ff7a: #8836 := R10
.address 0x405AF4
0003ff7d: R10 := R10 + 1
.address 0x405AF4
0003ff80: CF := R10 < #8836
.address 0x405AF4
0003ff83: OF := ~high:1[#8836] & (high:1[#8836] | high:1[R10]) & ~(high:1[#8836] & high:1[R10])
.address 0x405AF4
0003ff86: AF := 0x10 = (0x10 & (R10 ^ #8836 ^ 1))
.address 0x405AF4
0003ff89: PF := ~low:1[let $1 = R10 >> 4 ^ R10 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405AF4
0003ff8c: SF := high:1[R10]
.address 0x405AF4
0003ff8f: ZF := 0 = R10
.address 0x405AF8
0003ff9d: #8839 := R9
.address 0x405AF8
0003ffa0: R9 := R9 + 1
.address 0x405AF8
0003ffa3: CF := R9 < #8839
.address 0x405AF8
0003ffa6: OF := ~high:1[#8839] & (high:1[#8839] | high:1[R9]) & ~(high:1[#8839] & high:1[R9])
.address 0x405AF8
0003ffa9: AF := 0x10 = (0x10 & (R9 ^ #8839 ^ 1))
.address 0x405AF8
0003ffac: PF := ~low:1[let $1 = R9 >> 4 ^ R9 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405AF8
0003ffaf: SF := high:1[R9]
.address 0x405AF8
0003ffb2: ZF := 0 = R9
.address 0x405AFC
0003ffb9: R8 := R14
.address 0x405AFF
0003ffc0: goto %0003fcfd

.address 0x405ABD
00040447: 
.address 0x405ABD
00040452: RAX := 0
.address 0x405ABD
00040455: AF := unknown[bits]:u1
.address 0x405ABD
00040458: ZF := 1
.address 0x405ABD
0004045b: PF := 1
.address 0x405ABD
0004045e: OF := 0
.address 0x405ABD
00040461: CF := 0
.address 0x405ABD
00040464: SF := 0
000446e2: goto %0003fef5

.address 0x405A27
00040466: 
.address 0x405A27
00040472: #8885 := R8
.address 0x405A27
00040475: R8 := R8 + 2
.address 0x405A27
00040478: CF := R8 < #8885
.address 0x405A27
0004047b: OF := ~high:1[#8885] & (high:1[#8885] | high:1[R8]) & ~(high:1[#8885] & high:1[R8])
.address 0x405A27
0004047e: AF := 0x10 = (0x10 & (R8 ^ #8885 ^ 2))
.address 0x405A27
00040481: PF := ~low:1[let $1 = R8 >> 4 ^ R8 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405A27
00040484: SF := high:1[R8]
.address 0x405A27
00040487: ZF := 0 = R8
.address 0x405A2B
00040494: RCX := pad:64[low:32[RCX] & 0x1F]
.address 0x405A2B
00040497: OF := 0
.address 0x405A2B
0004049a: CF := 0
.address 0x405A2B
0004049d: AF := unknown[bits]:u1
.address 0x405A2B
000404a0: PF := ~low:1[let $1 = low:32[RCX] >> 4 ^ low:32[RCX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405A2B
000404a3: SF := high:1[low:32[RCX]]
.address 0x405A2B
000404a6: ZF := 0 = low:32[RCX]
000446e3: goto %0003fe21

.address 0x405A2E
0003fe21: 
.address 0x405A2E
0003fe31: mem := mem with [R9] <- low:8[RCX]
.address 0x405A31
0003fe38: RCX := pad:64[pad:32[mem[R8]]]
.address 0x405A35
0003fe46: #8825 := R10
.address 0x405A35
0003fe49: R10 := R10 + 1
.address 0x405A35
0003fe4c: CF := R10 < #8825
.address 0x405A35
0003fe4f: OF := ~high:1[#8825] & (high:1[#8825] | high:1[R10]) & ~(high:1[#8825] & high:1[R10])
.address 0x405A35
0003fe52: AF := 0x10 = (0x10 & (R10 ^ #8825 ^ 1))
.address 0x405A35
0003fe55: PF := ~low:1[let $1 = R10 >> 4 ^ R10 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405A35
0003fe58: SF := high:1[R10]
.address 0x405A35
0003fe5b: ZF := 0 = R10
.address 0x405A39
0003fe69: #8828 := R9
.address 0x405A39
0003fe6c: R9 := R9 + 1
.address 0x405A39
0003fe6f: CF := R9 < #8828
.address 0x405A39
0003fe72: OF := ~high:1[#8828] & (high:1[#8828] | high:1[R9]) & ~(high:1[#8828] & high:1[R9])
.address 0x405A39
0003fe75: AF := 0x10 = (0x10 & (R9 ^ #8828 ^ 1))
.address 0x405A39
0003fe78: PF := ~low:1[let $1 = R9 >> 4 ^ R9 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405A39
0003fe7b: SF := high:1[R9]
.address 0x405A39
0003fe7e: ZF := 0 = R9
.address 0x405A3D
0003fe8b: #8831 := low:8[RCX] - 0x3D
.address 0x405A3D
0003fe8e: CF := low:8[RCX] < 0x3D
.address 0x405A3D
0003fe91: OF := high:1[(low:8[RCX] ^ 0x3D) & (low:8[RCX] ^ #8831)]
.address 0x405A3D
0003fe94: AF := 0x10 = (0x10 & (#8831 ^ low:8[RCX] ^ 0x3D))
.address 0x405A3D
0003fe97: PF := ~low:1[let $1 = #8831 >> 4 ^ #8831 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405A3D
0003fe9a: SF := high:1[#8831]
.address 0x405A3D
0003fe9d: ZF := 0 = #8831
.address 0x405A40
0003fea7: when ~ZF goto %0003fea1
000446e4: goto %0003fd25

.address 0x405A42
0003fd25: 
.address 0x405A42
0003fd3b: #8809 := low:8[R12]
.address 0x405A42
0003fd3e: OF := 0
.address 0x405A42
0003fd41: CF := 0
.address 0x405A42
0003fd44: AF := unknown[bits]:u1
.address 0x405A42
0003fd47: PF := ~low:1[let $1 = #8809 >> 4 ^ #8809 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405A42
0003fd4a: SF := high:1[#8809]
.address 0x405A42
0003fd4d: ZF := 0 = #8809
.address 0x405A45
0003fd57: when ZF goto %0003fd51
000446e5: goto %000405b3

.address 0x405A50
0003fd51: 
.address 0x405A50
0003fd61: mem := mem with [R9] <- low:8[RCX]
.address 0x405A53
0003fd6f: #8811 := R8
.address 0x405A53
0003fd72: R8 := R8 + 1
.address 0x405A53
0003fd75: CF := R8 < #8811
.address 0x405A53
0003fd78: OF := ~high:1[#8811] & (high:1[#8811] | high:1[R8]) & ~(high:1[#8811] & high:1[R8])
.address 0x405A53
0003fd7b: AF := 0x10 = (0x10 & (R8 ^ #8811 ^ 1))
.address 0x405A53
0003fd7e: PF := ~low:1[let $1 = R8 >> 4 ^ R8 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405A53
0003fd81: SF := high:1[R8]
.address 0x405A53
0003fd84: ZF := 0 = R8
.address 0x405A57
0003fd92: #8814 := R10
.address 0x405A57
0003fd95: R10 := R10 + 1
.address 0x405A57
0003fd98: CF := R10 < #8814
.address 0x405A57
0003fd9b: OF := ~high:1[#8814] & (high:1[#8814] | high:1[R10]) & ~(high:1[#8814] & high:1[R10])
.address 0x405A57
0003fd9e: AF := 0x10 = (0x10 & (R10 ^ #8814 ^ 1))
.address 0x405A57
0003fda1: PF := ~low:1[let $1 = R10 >> 4 ^ R10 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405A57
0003fda4: SF := high:1[R10]
.address 0x405A57
0003fda7: ZF := 0 = R10
.address 0x405A5B
0003fdb5: #8817 := R9
.address 0x405A5B
0003fdb8: R9 := R9 + 1
.address 0x405A5B
0003fdbb: CF := R9 < #8817
.address 0x405A5B
0003fdbe: OF := ~high:1[#8817] & (high:1[#8817] | high:1[R9]) & ~(high:1[#8817] & high:1[R9])
.address 0x405A5B
0003fdc1: AF := 0x10 = (0x10 & (R9 ^ #8817 ^ 1))
.address 0x405A5B
0003fdc4: PF := ~low:1[let $1 = R9 >> 4 ^ R9 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405A5B
0003fdc7: SF := high:1[R9]
.address 0x405A5B
0003fdca: ZF := 0 = R9
.address 0x405A5F
0003fdd1: goto %0003fcfd

.address 0x405A47
000405b3: 
.address 0x405A47
000405b8: RAX := pad:64[low:32[RDX]]
.address 0x405A49
000405bf: R14 := R8
.address 0x405A4C
000405c6: goto %0003fef5

.address 0x405ABF
0003fef5: 
.address 0x405ABF
0003feff: mem := mem with [RDI, el]:u64 <- R9
.address 0x405AC2
0003ff06: mem := mem with [RSI, el]:u64 <- R14
.address 0x405AC5
0003ff0d: mem := mem with [RBX, el]:u64 <- R10
.address 0x405AC8
0003ff15: RBX := mem[RSP, el]:u64
.address 0x405AC8
0003ff18: RSP := RSP + 8
.address 0x405AC9
0003ff20: RBP := mem[RSP, el]:u64
.address 0x405AC9
0003ff23: RSP := RSP + 8
.address 0x405ACA
0003ff2b: R12 := mem[RSP, el]:u64
.address 0x405ACA
0003ff2e: RSP := RSP + 8
.address 0x405ACC
0003ff36: R13 := mem[RSP, el]:u64
.address 0x405ACC
0003ff39: RSP := RSP + 8
.address 0x405ACE
0003ff41: R14 := mem[RSP, el]:u64
.address 0x405ACE
0003ff44: RSP := RSP + 8
.address 0x405AD0
0003ff4c: R15 := mem[RSP, el]:u64
.address 0x405AD0
0003ff4f: RSP := RSP + 8
.address 0x405AD2
0003ff58: #8835 := mem[RSP, el]:u64
.address 0x405AD2
0003ff5b: RSP := RSP + 8
.address 0x405AD2
0003ff5f: call #8835 with noreturn


.address 0x405C50
00043e2a: sub sub_405c50()
.address 0x405C50
0002ef30: 
.address 0x405C50
0002ef40: RAX := 0x620060
.address 0x405C57
0002ef47: RDI := pad:64[low:32[RDI]]
.address 0x405C59
0002ef55: #6507 := RDI
.address 0x405C59
0002ef58: RDI := RDI << 4
.address 0x405C59
0002ef5b: CF := low:1[#6507 >> 0x3C]
.address 0x405C59
0002ef5e: SF := high:1[RDI]
.address 0x405C59
0002ef61: ZF := 0 = RDI
.address 0x405C59
0002ef64: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405C59
0002ef67: AF := unknown[bits]:u1
.address 0x405C59
0002ef6a: OF := unknown[bits]:u1
.address 0x405C5D
0002ef79: #6509 := RDI
.address 0x405C5D
0002ef7c: #6510 := RAX
.address 0x405C5D
0002ef7f: RDI := RDI + #6510
.address 0x405C5D
0002ef82: CF := RDI < #6509
.address 0x405C5D
0002ef85: OF := high:1[#6509] = high:1[#6510] & (high:1[#6509] | high:1[RDI]) & ~(
high:1[#6509] & high:1[RDI])
.address 0x405C5D
0002ef88: AF := 0x10 = (0x10 & (RDI ^ #6509 ^ #6510))
.address 0x405C5D
0002ef8b: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405C5D
0002ef8e: SF := high:1[RDI]
.address 0x405C5D
0002ef91: ZF := 0 = RDI
.address 0x405C60
0002ef9e: RAX := 0
.address 0x405C60
0002efa1: AF := unknown[bits]:u1
.address 0x405C60
0002efa4: ZF := 1
.address 0x405C60
0002efa7: PF := 1
.address 0x405C60
0002efaa: OF := 0
.address 0x405C60
0002efad: CF := 0
.address 0x405C60
0002efb0: SF := 0
.address 0x405C62
0002efb7: RDX := mem[RDI, el]:u64
.address 0x405C65
0002efc4: #6512 := RDX
.address 0x405C65
0002efc7: OF := 0
.address 0x405C65
0002efca: CF := 0
.address 0x405C65
0002efcd: AF := unknown[bits]:u1
.address 0x405C65
0002efd0: PF := ~low:1[let $1 = #6512 >> 4 ^ #6512 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405C65
0002efd3: SF := high:1[#6512]
.address 0x405C65
0002efd6: ZF := 0 = #6512
.address 0x405C68
0002efe0: when ZF goto %0002efda
000446e6: goto %0002fb42

.address 0x405C6A
0002fb42: 
.address 0x405C6A
0002fb4d: #6617 := RDX - 1
.address 0x405C6A
0002fb50: CF := RDX < 1
.address 0x405C6A
0002fb53: OF := high:1[(RDX ^ 1) & (RDX ^ #6617)]
.address 0x405C6A
0002fb56: AF := 0x10 = (0x10 & (#6617 ^ RDX ^ 1))
.address 0x405C6A
0002fb59: PF := ~low:1[let $1 = #6617 >> 4 ^ #6617 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405C6A
0002fb5c: SF := high:1[#6617]
.address 0x405C6A
0002fb5f: ZF := 0 = #6617
.address 0x405C6E
0002fb66: RSI := mem[RDI + 8, el]:u64
.address 0x405C72
0002fb6f: when ZF goto %0002eff8
000446e7: goto %0002fb75

.address 0x405C98
0002eff8: 
.address 0x405C98
0002f003: #6515 := mem[RSI] - 0x30
.address 0x405C98
0002f006: CF := mem[RSI] < 0x30
.address 0x405C98
0002f009: OF := high:1[(mem[RSI] ^ 0x30) & (mem[RSI] ^ #6515)]
.address 0x405C98
0002f00c: AF := 0x10 = (0x10 & (#6515 ^ mem[RSI] ^ 0x30))
.address 0x405C98
0002f00f: PF := ~low:1[let $1 = #6515 >> 4 ^ #6515 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405C98
0002f012: SF := high:1[#6515]
.address 0x405C98
0002f015: ZF := 0 = #6515
.address 0x405C9B
0002f01c: RAX := extract:63:8[RAX].pad:8[~ZF]
.address 0x405C9E
0002f025: #6517 := mem[RSP, el]:u64
.address 0x405C9E
0002f028: RSP := RSP + 8
.address 0x405C9E
0002f02c: call #6517 with noreturn

.address 0x405C74
0002fb75: 
.address 0x405C74
0002fb80: #6619 := RDX - 2
.address 0x405C74
0002fb83: CF := RDX < 2
.address 0x405C74
0002fb86: OF := high:1[(RDX ^ 2) & (RDX ^ #6619)]
.address 0x405C74
0002fb89: AF := 0x10 = (0x10 & (#6619 ^ RDX ^ 2))
.address 0x405C74
0002fb8c: PF := ~low:1[let $1 = #6619 >> 4 ^ #6619 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405C74
0002fb8f: SF := high:1[#6619]
.address 0x405C74
0002fb92: ZF := 0 = #6619
.address 0x405C78
0002fb99: RAX := 1
.address 0x405C7D
0002fba2: when ~ZF goto %0002efda
000446e8: goto %0002fba8

.address 0x405C7F
0002fba8: 
.address 0x405C7F
0002fbad: RDI := 0x417BED
.address 0x405C86
0002fbb4: RCX := 2
.address 0x405C8B
0002fbbc: #6625 := 1
.address 0x405C8B
0002fbde: goto %0002fbd8

0002fbbe: 
.address 0x405C8B
0002fbbf: #6621 := mem[RSI]
.address 0x405C8B
0002fbc1: #6622 := mem[RDI]
.address 0x405C8B
0002fbc3: #6623 := #6621 - #6622
.address 0x405C8B
0002fbc5: RSI := RSI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x405C8B
0002fbc7: RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x405C8B
0002fbc9: CF := #6621 < #6622
.address 0x405C8B
0002fbcb: OF := high:1[(#6621 ^ #6622) & (#6621 ^ #6623)]
.address 0x405C8B
0002fbcd: AF := 0x10 = (0x10 & (#6623 ^ #6621 ^ #6622))
.address 0x405C8B
0002fbcf: PF := ~low:1[let $1 = #6623 >> 4 ^ #6623 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405C8B
0002fbd1: SF := high:1[#6623]
.address 0x405C8B
0002fbd3: ZF := 0 = #6623
.address 0x405C8B
0002fbd5: RCX := RCX - 1
.address 0x405C8B
0002fbd7: #6625 := ZF
.address 0x405C8B
0002fbdc: goto %0002fbd9

0002fbd8: 
.address 0x405C8B
0002fbdb: goto %0002fbd9

0002fbd9: 
.address 0x405C8B
0002fbda: when RCX <> 0 & #6625 goto %0002fbbe
000446e9: goto %0002fbe3

0002fbe3: 
.address 0x405C8D
0002fbe4: RAX := extract:63:8[RAX].pad:8[~ZF]
000446ea: goto %0002efda

.address 0x405C90
0002efda: 
.address 0x405C90
0002efec: #6514 := mem[RSP, el]:u64
.address 0x405C90
0002efef: RSP := RSP + 8
.address 0x405C90
0002eff3: call #6514 with noreturn


.address 0x405CA0
00043e30: sub sub_405ca0()
.address 0x405CA0
0002f031: 
.address 0x405CA0
0002f03d: #6518 := RSP
.address 0x405CA0
0002f040: RSP := RSP - 0x18
.address 0x405CA0
0002f043: CF := #6518 < 0x18
.address 0x405CA0
0002f046: OF := high:1[(#6518 ^ 0x18) & (#6518 ^ RSP)]
.address 0x405CA0
0002f049: AF := 0x10 = (0x10 & (RSP ^ #6518 ^ 0x18))
.address 0x405CA0
0002f04c: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405CA0
0002f04f: SF := high:1[RSP]
.address 0x405CA0
0002f052: ZF := 0 = RSP
.address 0x405CA4
0002f059: R8 := 0x417C4A
.address 0x405CAB
0002f066: RDX := 0
.address 0x405CAB
0002f069: AF := unknown[bits]:u1
.address 0x405CAB
0002f06c: ZF := 1
.address 0x405CAB
0002f06f: PF := 1
.address 0x405CAB
0002f072: OF := 0
.address 0x405CAB
0002f075: CF := 0
.address 0x405CAB
0002f078: SF := 0
.address 0x405CAD
0002f085: RSI := 0
.address 0x405CAD
0002f088: AF := unknown[bits]:u1
.address 0x405CAD
0002f08b: ZF := 1
.address 0x405CAD
0002f08e: PF := 1
.address 0x405CAD
0002f091: OF := 0
.address 0x405CAD
0002f094: CF := 0
.address 0x405CAD
0002f097: SF := 0
.address 0x405CAF
0002f09e: RCX := RSP
.address 0x405CB2
0002f0a5: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x405CBB
0002f0ac: mem := mem with [RSP + 8, el]:u64 <- RAX
.address 0x405CC0
0002f0b9: RAX := 0
.address 0x405CC0
0002f0bc: AF := unknown[bits]:u1
.address 0x405CC0
0002f0bf: ZF := 1
.address 0x405CC0
0002f0c2: PF := 1
.address 0x405CC0
0002f0c5: OF := 0
.address 0x405CC0
0002f0c8: CF := 0
.address 0x405CC0
0002f0cb: SF := 0
.address 0x405CC2
0002f0d4: RSP := RSP - 8
.address 0x405CC2
0002f0d7: mem := mem with [RSP, el]:u64 <- 0x405CC7
.address 0x405CC2
0002f0da: call @sub_414e20 with return %0002f0dc

.address 0x405CC7
0002f0dc: 
.address 0x405CC7
0002f0e7: #6521 := low:32[RAX]
.address 0x405CC7
0002f0ea: OF := 0
.address 0x405CC7
0002f0ed: CF := 0
.address 0x405CC7
0002f0f0: AF := unknown[bits]:u1
.address 0x405CC7
0002f0f3: PF := ~low:1[let $1 = #6521 >> 4 ^ #6521 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405CC7
0002f0f6: SF := high:1[#6521]
.address 0x405CC7
0002f0f9: ZF := 0 = #6521
.address 0x405CC9
0002f103: when ZF goto %0002f0fd
000446eb: goto %0002faf7

.address 0x405D08
0002f0fd: 
.address 0x405D08
0002f10d: RAX := mem[RSP, el]:u64
.address 0x405D0C
0002f114: mem := mem with [0x6212B0, el]:u64 <- RAX
.address 0x405D13
0002f11b: RAX := 1
.address 0x405D18
0002f123: goto %0002f11f

.address 0x405CCB
0002faf7: 
.address 0x405CCB
0002fb02: #6615 := low:32[RAX] - 1
.address 0x405CCB
0002fb05: CF := low:32[RAX] < 1
.address 0x405CCB
0002fb08: OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #6615)]
.address 0x405CCB
0002fb0b: AF := 0x10 = (0x10 & (#6615 ^ low:32[RAX] ^ 1))
.address 0x405CCB
0002fb0e: PF := ~low:1[let $1 = #6615 >> 4 ^ #6615 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405CCB
0002fb11: SF := high:1[#6615]
.address 0x405CCB
0002fb14: ZF := 0 = #6615
.address 0x405CCE
0002fb1d: when ZF goto %0002fadf
000446ec: goto %0002fb23

.address 0x405CF0
0002fadf: 
.address 0x405CF0
0002fae4: mem := mem with [0x6212B0, el]:u64 <- 0xFFFFFFFFFFFFFFFF
.address 0x405CFB
0002faeb: RAX := 1
.address 0x405D00
0002faf2: goto %0002f11f

.address 0x405CD0
0002fb23: 
.address 0x405CD0
0002fb2e: RAX := 0
.address 0x405CD0
0002fb31: AF := unknown[bits]:u1
.address 0x405CD0
0002fb34: ZF := 1
.address 0x405CD0
0002fb37: PF := 1
.address 0x405CD0
0002fb3a: OF := 0
.address 0x405CD0
0002fb3d: CF := 0
.address 0x405CD0
0002fb40: SF := 0
000446ed: goto %0002f11f

.address 0x405CD2
0002f11f: 
.address 0x405CD2
0002f129: RDX := mem[RSP + 8, el]:u64
.address 0x405CD7
0002f136: RDX := RDX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x405CD7
0002f139: OF := 0
.address 0x405CD7
0002f13c: CF := 0
.address 0x405CD7
0002f13f: AF := unknown[bits]:u1
.address 0x405CD7
0002f142: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405CD7
0002f145: SF := high:1[RDX]
.address 0x405CD7
0002f148: ZF := 0 = RDX
.address 0x405CE0
0002f152: when ~ZF goto %0002f14c
000446ee: goto %0002faa9

.address 0x405D1A
0002f14c: 
.address 0x405D1A
0002f15e: RSP := RSP - 8
.address 0x405D1A
0002f161: mem := mem with [RSP, el]:u64 <- 0x405D1F
.address 0x405D1A
0002f164: call @sub_403970 with return %0002f166

.address 0x405D1F
0002f166: 
000446ef: call @sub_405d20 with noreturn

.address 0x405CE2
0002faa9: 
.address 0x405CE2
0002fab5: #6611 := RSP
.address 0x405CE2
0002fab8: RSP := RSP + 0x18
.address 0x405CE2
0002fabb: CF := RSP < #6611
.address 0x405CE2
0002fabe: OF := ~high:1[#6611] & (high:1[#6611] | high:1[RSP]) & ~(high:1[#6611] & high:1[RSP])
.address 0x405CE2
0002fac1: AF := 0x10 = (0x10 & (RSP ^ #6611 ^ 0x18))
.address 0x405CE2
0002fac4: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405CE2
0002fac7: SF := high:1[RSP]
.address 0x405CE2
0002faca: ZF := 0 = RSP
.address 0x405CE6
0002fad3: #6614 := mem[RSP, el]:u64
.address 0x405CE6
0002fad6: RSP := RSP + 8
.address 0x405CE6
0002fada: call #6614 with noreturn


.address 0x405D20
00043e36: sub sub_405d20()
.address 0x405D20
0002f169: 
.address 0x405D20
0002f170: #6524 := R15
.address 0x405D20
0002f173: RSP := RSP - 8
.address 0x405D20
0002f176: mem := mem with [RSP, el]:u64 <- #6524
.address 0x405D22
0002f17f: #6525 := R14
.address 0x405D22
0002f182: RSP := RSP - 8
.address 0x405D22
0002f185: mem := mem with [RSP, el]:u64 <- #6525
.address 0x405D24
0002f192: RSI := 0
.address 0x405D24
0002f195: AF := unknown[bits]:u1
.address 0x405D24
0002f198: ZF := 1
.address 0x405D24
0002f19b: PF := 1
.address 0x405D24
0002f19e: OF := 0
.address 0x405D24
0002f1a1: CF := 0
.address 0x405D24
0002f1a4: SF := 0
.address 0x405D26
0002f1ad: #6526 := R13
.address 0x405D26
0002f1b0: RSP := RSP - 8
.address 0x405D26
0002f1b3: mem := mem with [RSP, el]:u64 <- #6526
.address 0x405D28
0002f1bc: #6527 := R12
.address 0x405D28
0002f1bf: RSP := RSP - 8
.address 0x405D28
0002f1c2: mem := mem with [RSP, el]:u64 <- #6527
.address 0x405D2A
0002f1cb: #6528 := RBP
.address 0x405D2A
0002f1ce: RSP := RSP - 8
.address 0x405D2A
0002f1d1: mem := mem with [RSP, el]:u64 <- #6528
.address 0x405D2B
0002f1da: #6529 := RBX
.address 0x405D2B
0002f1dd: RSP := RSP - 8
.address 0x405D2B
0002f1e0: mem := mem with [RSP, el]:u64 <- #6529
.address 0x405D2C
0002f1ee: #6530 := RSP
.address 0x405D2C
0002f1f1: RSP := RSP - 0x658
.address 0x405D2C
0002f1f4: CF := #6530 < 0x658
.address 0x405D2C
0002f1f7: OF := high:1[(#6530 ^ 0x658) & (#6530 ^ RSP)]
.address 0x405D2C
0002f1fa: AF := 0x10 = (0x10 & (RSP ^ #6530 ^ 0x658))
.address 0x405D2C
0002f1fd: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405D2C
0002f200: SF := high:1[RSP]
.address 0x405D2C
0002f203: ZF := 0 = RSP
.address 0x405D33
0002f20a: RDI := low:64[RSP + 0x30]
.address 0x405D38
0002f211: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x405D41
0002f218: mem := mem with [RSP + 0x648, el]:u64 <- RAX
.address 0x405D49
0002f225: RAX := 0
.address 0x405D49
0002f228: AF := unknown[bits]:u1
.address 0x405D49
0002f22b: ZF := 1
.address 0x405D49
0002f22e: PF := 1
.address 0x405D49
0002f231: OF := 0
.address 0x405D49
0002f234: CF := 0
.address 0x405D49
0002f237: SF := 0
.address 0x405D4B
0002f23e: mem := mem with [RSP + 0x10, el]:u64 <- RDI
000446f0: goto %0002f240

.address 0x405D50
0002f240: 
.address 0x405D50
0002f245: RAX := 0x620040
.address 0x405D57
0002f24c: RAX := mem[RAX + RSI, el]:u64
.address 0x405D5B
0002f253: RDX := pad:64[pad:32[mem[RAX]]]
.address 0x405D5E
0002f260: #6533 := low:8[RDX]
.address 0x405D5E
0002f263: OF := 0
.address 0x405D5E
0002f266: CF := 0
.address 0x405D5E
0002f269: AF := unknown[bits]:u1
.address 0x405D5E
0002f26c: PF := ~low:1[let $1 = #6533 >> 4 ^ #6533 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405D5E
0002f26f: SF := high:1[#6533]
.address 0x405D5E
0002f272: ZF := 0 = #6533
.address 0x405D60
0002f27c: when ZF goto %0002f276
000446f1: goto %0002faa6

.address 0x405D62
0002faa6: 
000446f2: goto %0002f9ff

.address 0x405D68
0002f9ff: 
.address 0x405D68
0002fa15: #6605 := low:8[RDX] - 0x25
.address 0x405D68
0002fa18: CF := low:8[RDX] < 0x25
.address 0x405D68
0002fa1b: OF := high:1[(low:8[RDX] ^ 0x25) & (low:8[RDX] ^ #6605)]
.address 0x405D68
0002fa1e: AF := 0x10 = (0x10 & (#6605 ^ low:8[RDX] ^ 0x25))
.address 0x405D68
0002fa21: PF := ~low:1[let $1 = #6605 >> 4 ^ #6605 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405D68
0002fa24: SF := high:1[#6605]
.address 0x405D68
0002fa27: ZF := 0 = #6605
.address 0x405D6B
0002fa2e: RCX := pad:64[pad:32[mem[RAX + 1]]]
.address 0x405D6F
0002fa38: when ZF goto %0002fa32
000446f3: goto %0002fa8a

.address 0x405D80
0002fa32: 
.address 0x405D80
0002fa48: #6607 := low:8[RCX] - 0x25
.address 0x405D80
0002fa4b: CF := low:8[RCX] < 0x25
.address 0x405D80
0002fa4e: OF := high:1[(low:8[RCX] ^ 0x25) & (low:8[RCX] ^ #6607)]
.address 0x405D80
0002fa51: AF := 0x10 = (0x10 & (#6607 ^ low:8[RCX] ^ 0x25))
.address 0x405D80
0002fa54: PF := ~low:1[let $1 = #6607 >> 4 ^ #6607 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405D80
0002fa57: SF := high:1[#6607]
.address 0x405D80
0002fa5a: ZF := 0 = #6607
.address 0x405D83
0002fa63: when ZF goto %0002f98a
000446f4: goto %0002fa69

.address 0x405E40
0002f98a: 
.address 0x405E40
0002f98f: RDX := pad:64[pad:32[mem[RAX + 2]]]
.address 0x405E44
0002f99d: #6597 := RAX
.address 0x405E44
0002f9a0: RAX := RAX + 1
.address 0x405E44
0002f9a3: CF := RAX < #6597
.address 0x405E44
0002f9a6: OF := ~high:1[#6597] & (high:1[#6597] | high:1[RAX]) & ~(high:1[#6597] & high:1[RAX])
.address 0x405E44
0002f9a9: AF := 0x10 = (0x10 & (RAX ^ #6597 ^ 1))
.address 0x405E44
0002f9ac: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405E44
0002f9af: SF := high:1[RAX]
.address 0x405E44
0002f9b2: ZF := 0 = RAX
.address 0x405E48
0002f9ba: goto %0002f9b6

.address 0x405D89
0002fa69: 
.address 0x405D89
0002fa74: #6609 := low:8[RCX] - 0x62
.address 0x405D89
0002fa77: CF := low:8[RCX] < 0x62
.address 0x405D89
0002fa7a: OF := high:1[(low:8[RCX] ^ 0x62) & (low:8[RCX] ^ #6609)]
.address 0x405D89
0002fa7d: AF := 0x10 = (0x10 & (#6609 ^ low:8[RCX] ^ 0x62))
.address 0x405D89
0002fa80: PF := ~low:1[let $1 = #6609 >> 4 ^ #6609 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405D89
0002fa83: SF := high:1[#6609]
.address 0x405D89
0002fa86: ZF := 0 = #6609
.address 0x405D8C
0002fa90: when ~ZF goto %0002fa8a
000446f5: goto %0002f2a2

.address 0x405D71
0002fa8a: 
.address 0x405D71
0002fa9a: RDX := pad:64[low:32[RCX]]
000446f6: goto %0002f9b6

.address 0x405D73
0002f9b6: 
.address 0x405D73
0002f9c7: #6600 := RAX
.address 0x405D73
0002f9ca: RAX := RAX + 1
.address 0x405D73
0002f9cd: CF := RAX < #6600
.address 0x405D73
0002f9d0: OF := ~high:1[#6600] & (high:1[#6600] | high:1[RAX]) & ~(high:1[#6600] & high:1[RAX])
.address 0x405D73
0002f9d3: AF := 0x10 = (0x10 & (RAX ^ #6600 ^ 1))
.address 0x405D73
0002f9d6: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405D73
0002f9d9: SF := high:1[RAX]
.address 0x405D73
0002f9dc: ZF := 0 = RAX
.address 0x405D77
0002f9e9: #6603 := low:8[RDX]
.address 0x405D77
0002f9ec: OF := 0
.address 0x405D77
0002f9ef: CF := 0
.address 0x405D77
0002f9f2: AF := unknown[bits]:u1
.address 0x405D77
0002f9f5: PF := ~low:1[let $1 = #6603 >> 4 ^ #6603 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405D77
0002f9f8: SF := high:1[#6603]
.address 0x405D77
0002f9fb: ZF := 0 = #6603
.address 0x405D79
0002fa05: when ~ZF goto %0002f9ff
000446f7: goto %0002f276

.address 0x405D7B
0002f276: 
.address 0x405D7B
0002f28c: RAX := 0
.address 0x405D7B
0002f28f: AF := unknown[bits]:u1
.address 0x405D7B
0002f292: ZF := 1
.address 0x405D7B
0002f295: PF := 1
.address 0x405D7B
0002f298: OF := 0
.address 0x405D7B
0002f29b: CF := 0
.address 0x405D7B
0002f29e: SF := 0
.address 0x405D7D
0002f2a6: goto %0002f2a2

.address 0x405D8E
0002f2a2: 
.address 0x405D8E
0002f2ac: mem := mem with [RDI + RSI, el]:u64 <- RAX
.address 0x405D92
0002f2ba: #6535 := RSI
.address 0x405D92
0002f2bd: RSI := RSI + 8
.address 0x405D92
0002f2c0: CF := RSI < #6535
.address 0x405D92
0002f2c3: OF := ~high:1[#6535] & (high:1[#6535] | high:1[RSI]) & ~(high:1[#6535] & high:1[RSI])
.address 0x405D92
0002f2c6: AF := 0x10 = (0x10 & (RSI ^ #6535 ^ 8))
.address 0x405D92
0002f2c9: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405D92
0002f2cc: SF := high:1[RSI]
.address 0x405D92
0002f2cf: ZF := 0 = RSI
.address 0x405D96
0002f2dc: #6538 := RSI - 0x10
.address 0x405D96
0002f2df: CF := RSI < 0x10
.address 0x405D96
0002f2e2: OF := high:1[(RSI ^ 0x10) & (RSI ^ #6538)]
.address 0x405D96
0002f2e5: AF := 0x10 = (0x10 & (#6538 ^ RSI ^ 0x10))
.address 0x405D96
0002f2e8: PF := ~low:1[let $1 = #6538 >> 4 ^ #6538 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405D96
0002f2eb: SF := high:1[#6538]
.address 0x405D96
0002f2ee: ZF := 0 = #6538
.address 0x405D9A
0002f2f7: when ~ZF goto %0002f240
000446f8: goto %0002f2fd

.address 0x405D9C
0002f2fd: 
.address 0x405D9C
0002f308: #6540 := mem[RSP + 0x30, el]:u64
.address 0x405D9C
0002f30b: CF := mem[RSP + 0x30, el]:u64 < 0
.address 0x405D9C
0002f30e: OF := high:1[mem[RSP + 0x30, el]:u64 & (mem[RSP + 0x30, el]:u64 ^ #6540)]
.address 0x405D9C
0002f311: AF := 0x10 = (0x10 & (#6540 ^ mem[RSP + 0x30, el]:u64))
.address 0x405D9C
0002f314: PF := ~low:1[let $1 = #6540 >> 4 ^ #6540 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405D9C
0002f317: SF := high:1[#6540]
.address 0x405D9C
0002f31a: ZF := 0 = #6540
.address 0x405DA2
0002f321: R13 := 5
.address 0x405DA8
0002f32b: when ZF goto %0002f325
000446f9: goto %0002f351

.address 0x405E91
0002f325: 
.address 0x405E91
0002f33b: #6542 := mem[RSP + 0x38, el]:u64
.address 0x405E91
0002f33e: CF := mem[RSP + 0x38, el]:u64 < 0
.address 0x405E91
0002f341: OF := high:1[mem[RSP + 0x38, el]:u64 & (mem[RSP + 0x38, el]:u64 ^ #6542)]
.address 0x405E91
0002f344: AF := 0x10 = (0x10 & (#6542 ^ mem[RSP + 0x38, el]:u64))
.address 0x405E91
0002f347: PF := ~low:1[let $1 = #6542 >> 4 ^ #6542 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405E91
0002f34a: SF := high:1[#6542]
.address 0x405E91
0002f34d: ZF := 0 = #6542
.address 0x405E97
0002f357: when ~ZF goto %0002f351
000446fa: goto %0002fa9c

.address 0x405E9D
0002fa9c: 
.address 0x405E9D
0002faa1: goto %0002f411

.address 0x405DAE
0002f351: 
.address 0x405DAE
0002f361: RAX := low:64[RSP + 0x40]
.address 0x405DB3
0002f368: mem := mem with [RSP + 8, el]:u64 <- RAX
.address 0x405DB8
0002f36f: RAX := low:64[RSP + 0x28]
.address 0x405DBD
0002f376: mem := mem with [RSP, el]:u64 <- RAX
000446fb: goto %0002f378

.address 0x405DC1
0002f378: 
.address 0x405DC1
0002f37d: RBX := mem[RSP + 8, el]:u64
.address 0x405DC6
0002f384: R12 := 0x2000E
.address 0x405DCC
0002f391: RBP := 0
.address 0x405DCC
0002f394: AF := unknown[bits]:u1
.address 0x405DCC
0002f397: ZF := 1
.address 0x405DCC
0002f39a: PF := 1
.address 0x405DCC
0002f39d: OF := 0
.address 0x405DCC
0002f3a0: CF := 0
.address 0x405DCC
0002f3a3: SF := 0
.address 0x405DCE
0002f3aa: R14 := low:64[RBX + 0x600]
000446fc: goto %0002f3af

.address 0x405DD8
0002f3af: 
.address 0x405DD8
0002f3b4: RDI := pad:64[low:32[R12]]
.address 0x405DDB
0002f3bb: mem := mem with [RSP + 0x28, el]:u64 <- R13
.address 0x405DE0
0002f3c4: RSP := RSP - 8
.address 0x405DE0
0002f3c7: mem := mem with [RSP, el]:u64 <- 0x405DE5
.address 0x405DE0
0002f3ca: call @sub_403c20 with return %0002f3cc

.address 0x405DE5
0002f3cc: 
.address 0x405DE5
0002f3d1: RSI := 0x25
.address 0x405DEA
0002f3d8: RDI := RAX
.address 0x405DED
0002f3df: R15 := RAX
.address 0x405DF0
0002f3e8: RSP := RSP - 8
.address 0x405DF0
0002f3eb: mem := mem with [RSP, el]:u64 <- 0x405DF5
.address 0x405DF0
0002f3ee: call @sub_4039a0 with return %0002f3f0

.address 0x405DF5
0002f3f0: 
.address 0x405DF5
0002f3fb: #6544 := RAX
.address 0x405DF5
0002f3fe: OF := 0
.address 0x405DF5
0002f401: CF := 0
.address 0x405DF5
0002f404: AF := unknown[bits]:u1
.address 0x405DF5
0002f407: PF := ~low:1[let $1 = #6544 >> 4 ^ #6544 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405DF5
0002f40a: SF := high:1[#6544]
.address 0x405DF5
0002f40d: ZF := 0 = #6544
.address 0x405DF8
0002f417: when ~ZF goto %0002f411
000446fd: goto %0002f4d9

.address 0x405DFA
0002f4d9: 
.address 0x405DFA
0002f4de: RCX := mem[RSP, el]:u64
.address 0x405DFE
0002f4eb: R9 := 0
.address 0x405DFE
0002f4ee: AF := unknown[bits]:u1
.address 0x405DFE
0002f4f1: ZF := 1
.address 0x405DFE
0002f4f4: PF := 1
.address 0x405DFE
0002f4f7: OF := 0
.address 0x405DFE
0002f4fa: CF := 0
.address 0x405DFE
0002f4fd: SF := 0
.address 0x405E01
0002f50a: R8 := 0
.address 0x405E01
0002f50d: AF := unknown[bits]:u1
.address 0x405E01
0002f510: ZF := 1
.address 0x405E01
0002f513: PF := 1
.address 0x405E01
0002f516: OF := 0
.address 0x405E01
0002f519: CF := 0
.address 0x405E01
0002f51c: SF := 0
.address 0x405E04
0002f523: RDX := 0x80
.address 0x405E09
0002f52a: RSI := RBX
.address 0x405E0C
0002f531: RDI := R15
.address 0x405E0F
0002f53a: RSP := RSP - 8
.address 0x405E0F
0002f53d: mem := mem with [RSP, el]:u64 <- 0x405E14
.address 0x405E0F
0002f540: call @sub_40fd40 with return %0002f542

.address 0x405E14
0002f542: 
.address 0x405E14
0002f54d: #6551 := RAX - 0x7F
.address 0x405E14
0002f550: CF := RAX < 0x7F
.address 0x405E14
0002f553: OF := high:1[(RAX ^ 0x7F) & (RAX ^ #6551)]
.address 0x405E14
0002f556: AF := 0x10 = (0x10 & (#6551 ^ RAX ^ 0x7F))
.address 0x405E14
0002f559: PF := ~low:1[let $1 = #6551 >> 4 ^ #6551 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405E14
0002f55c: SF := high:1[#6551]
.address 0x405E14
0002f55f: ZF := 0 = #6551
.address 0x405E18
0002f568: when ~(CF | ZF) goto %0002f411
000446fe: goto %0002f56e

.address 0x405E1A
0002f56e: 
.address 0x405E1A
0002f573: RAX := mem[RSP + 0x28, el]:u64
.address 0x405E1F
0002f580: #6553 := RBP - RAX
.address 0x405E1F
0002f583: CF := RBP < RAX
.address 0x405E1F
0002f586: OF := high:1[(RBP ^ RAX) & (RBP ^ #6553)]
.address 0x405E1F
0002f589: AF := 0x10 = (0x10 & (#6553 ^ RBP ^ RAX))
.address 0x405E1F
0002f58c: PF := ~low:1[let $1 = #6553 >> 4 ^ #6553 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405E1F
0002f58f: SF := high:1[#6553]
.address 0x405E1F
0002f592: ZF := 0 = #6553
.address 0x405E22
0002f599: RBP := if CF then RAX else RBP
.address 0x405E26
0002f5a7: #6555 := RBX
.address 0x405E26
0002f5aa: RBX := RBX - 0xFFFFFFFFFFFFFF80
.address 0x405E26
0002f5ad: CF := #6555 < 0xFFFFFFFFFFFFFF80
.address 0x405E26
0002f5b0: OF := high:1[(#6555 ^ 0xFFFFFFFFFFFFFF80) & (#6555 ^ RBX)]
.address 0x405E26
0002f5b3: AF := 0x10 = (0x10 & (RBX ^ #6555 ^ 0xFFFFFFFFFFFFFF80))
.address 0x405E26
0002f5b6: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405E26
0002f5b9: SF := high:1[RBX]
.address 0x405E26
0002f5bc: ZF := 0 = RBX
.address 0x405E2A
0002f5ca: #6558 := low:32[R12]
.address 0x405E2A
0002f5cd: R12 := pad:64[low:32[R12] + 1]
.address 0x405E2A
0002f5d0: CF := low:32[R12] < #6558
.address 0x405E2A
0002f5d3: OF := ~high:1[#6558] & (high:1[#6558] | high:1[low:32[R12]]) & ~(
high:1[#6558] & high:1[low:32[R12]])
.address 0x405E2A
0002f5d6: AF := 0x10 = (0x10 & (low:32[R12] ^ #6558 ^ 1))
.address 0x405E2A
0002f5d9: PF := ~low:1[let $1 = low:32[R12] >> 4 ^ low:32[R12] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405E2A
0002f5dc: SF := high:1[low:32[R12]]
.address 0x405E2A
0002f5df: ZF := 0 = low:32[R12]
.address 0x405E2E
0002f5ec: #6561 := RBX - R14
.address 0x405E2E
0002f5ef: CF := RBX < R14
.address 0x405E2E
0002f5f2: OF := high:1[(RBX ^ R14) & (RBX ^ #6561)]
.address 0x405E2E
0002f5f5: AF := 0x10 = (0x10 & (#6561 ^ RBX ^ R14))
.address 0x405E2E
0002f5f8: PF := ~low:1[let $1 = #6561 >> 4 ^ #6561 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405E2E
0002f5fb: SF := high:1[#6561]
.address 0x405E2E
0002f5fe: ZF := 0 = #6561
.address 0x405E31
0002f607: when ~ZF goto %0002f3af
000446ff: goto %0002f60d

.address 0x405E33
0002f60d: 
.address 0x405E33
0002f618: #6563 := R13 - RBP
.address 0x405E33
0002f61b: CF := R13 < RBP
.address 0x405E33
0002f61e: OF := high:1[(R13 ^ RBP) & (R13 ^ #6563)]
.address 0x405E33
0002f621: AF := 0x10 = (0x10 & (#6563 ^ R13 ^ RBP))
.address 0x405E33
0002f624: PF := ~low:1[let $1 = #6563 >> 4 ^ #6563 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405E33
0002f627: SF := high:1[#6563]
.address 0x405E33
0002f62a: ZF := 0 = #6563
.address 0x405E36
0002f634: when CF | ZF goto %0002f62e
00044700: goto %0002f979

.address 0x405E9F
0002f62e: 
.address 0x405E9F
0002f644: R14 := 0
.address 0x405E9F
0002f647: AF := unknown[bits]:u1
.address 0x405E9F
0002f64a: ZF := 1
.address 0x405E9F
0002f64d: PF := 1
.address 0x405E9F
0002f650: OF := 0
.address 0x405E9F
0002f653: CF := 0
.address 0x405E9F
0002f656: SF := 0
.address 0x405EA2
0002f65d: mem := mem with [RSP + 0x18, el]:u64 <- RBX
00044701: goto %0002f65f

.address 0x405EA7
0002f65f: 
.address 0x405EA7
0002f664: RAX := 0x620040
.address 0x405EAE
0002f66b: mem := mem with [RSP, el]:u64 <- R14
.address 0x405EB2
0002f672: RBP := mem[RSP + 8, el]:u64
.address 0x405EB7
0002f680: #6565 := extend:128[R14] * 0xC0
.address 0x405EB7
0002f683: R10 := low:64[#6565]
.address 0x405EB7
0002f686: OF := #6565 <> extend:128[R10]
.address 0x405EB7
0002f689: CF := #6565 <> extend:128[R10]
.address 0x405EB7
0002f68c: PF := unknown[bits]:u1
.address 0x405EB7
0002f68f: SF := unknown[bits]:u1
.address 0x405EB7
0002f692: ZF := unknown[bits]:u1
.address 0x405EB7
0002f695: AF := unknown[bits]:u1
.address 0x405EBE
0002f69c: R13 := mem[RAX + R14, el]:u64
.address 0x405EC2
0002f6a3: RAX := mem[RSP + 0x10, el]:u64
.address 0x405EC7
0002f6aa: R15 := mem[RAX + R14, el]:u64
.address 0x405ECB
0002f6b1: RAX := 0x6203E0
.address 0x405ED2
0002f6b8: RBX := low:64[RAX + R10]
.address 0x405ED6
0002f6bf: R12 := R15
.address 0x405ED9
0002f6c6: R14 := R15
.address 0x405EDC
0002f6cd: R15 := mem[RSP + 0x18, el]:u64
.address 0x405EE1
0002f6dc: #6566 := R12
.address 0x405EE1
0002f6df: #6567 := R13
.address 0x405EE1
0002f6e2: R12 := R12 - R13
.address 0x405EE1
0002f6e5: CF := #6566 < #6567
.address 0x405EE1
0002f6e8: OF := high:1[(#6566 ^ #6567) & (#6566 ^ R12)]
.address 0x405EE1
0002f6eb: AF := 0x10 = (0x10 & (R12 ^ #6566 ^ #6567))
.address 0x405EE1
0002f6ee: PF := ~low:1[let $1 = R12 >> 4 ^ R12 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405EE1
0002f6f1: SF := high:1[R12]
.address 0x405EE1
0002f6f4: ZF := 0 = R12
.address 0x405EE4
0002f6fc: goto %0002f6f8

.address 0x405F4C
0002f6f8: 
.address 0x405F4C
0002f708: #6569 := R14
.address 0x405F4C
0002f70b: OF := 0
.address 0x405F4C
0002f70e: CF := 0
.address 0x405F4C
0002f711: AF := unknown[bits]:u1
.address 0x405F4C
0002f714: PF := ~low:1[let $1 = #6569 >> 4 ^ #6569 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405F4C
0002f717: SF := high:1[#6569]
.address 0x405F4C
0002f71a: ZF := 0 = #6569
.address 0x405F4F
0002f724: when ~ZF goto %0002f71e
00044702: goto %0002f925

.address 0x405F51
0002f925: 
.address 0x405F51
0002f92a: RDX := 0x41A2FC
.address 0x405F58
0002f931: RCX := R13
.address 0x405F5B
0002f938: RSI := 0x80
.address 0x405F60
0002f93f: RDI := RBX
.address 0x405F63
0002f94c: RAX := 0
.address 0x405F63
0002f94f: AF := unknown[bits]:u1
.address 0x405F63
0002f952: ZF := 1
.address 0x405F63
0002f955: PF := 1
.address 0x405F63
0002f958: OF := 0
.address 0x405F63
0002f95b: CF := 0
.address 0x405F63
0002f95e: SF := 0
.address 0x405F65
0002f967: RSP := RSP - 8
.address 0x405F65
0002f96a: mem := mem with [RSP, el]:u64 <- 0x405F6A
.address 0x405F65
0002f96d: call @sub_4039c0 with return %0002f96f

.address 0x405F6A
0002f96f: 
.address 0x405F6A
0002f974: goto %0002f827

.address 0x405EF0
0002f71e: 
.address 0x405EF0
0002f734: #6571 := R12 - 0x80
.address 0x405EF0
0002f737: CF := R12 < 0x80
.address 0x405EF0
0002f73a: OF := high:1[(R12 ^ 0x80) & (R12 ^ #6571)]
.address 0x405EF0
0002f73d: AF := 0x10 = (0x10 & (#6571 ^ R12 ^ 0x80))
.address 0x405EF0
0002f740: PF := ~low:1[let $1 = #6571 >> 4 ^ #6571 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405EF0
0002f743: SF := high:1[#6571]
.address 0x405EF0
0002f746: ZF := 0 = #6571
.address 0x405EF7
0002f74f: when ~(ZF | (SF | OF) & ~(SF & OF)) goto %0002f411
00044703: goto %0002f755

.address 0x405EFD
0002f755: 
.address 0x405EFD
0002f75a: RAX := low:64[R14 + 2]
.address 0x405F01
0002f768: #6573 := RSP
.address 0x405F01
0002f76b: RSP := RSP - 8
.address 0x405F01
0002f76e: CF := #6573 < 8
.address 0x405F01
0002f771: OF := high:1[(#6573 ^ 8) & (#6573 ^ RSP)]
.address 0x405F01
0002f774: AF := 0x10 = (0x10 & (RSP ^ #6573 ^ 8))
.address 0x405F01
0002f777: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405F01
0002f77a: SF := high:1[RSP]
.address 0x405F01
0002f77d: ZF := 0 = RSP
.address 0x405F05
0002f784: R8 := 0x417BF0
.address 0x405F0C
0002f78b: R9 := pad:64[low:32[R12]]
.address 0x405F0F
0002f792: RCX := 0xFFFFFFFFFFFFFFFF
.address 0x405F16
0002f799: RDX := 1
.address 0x405F1B
0002f7a2: #6576 := RAX
.address 0x405F1B
0002f7a5: RSP := RSP - 8
.address 0x405F1B
0002f7a8: mem := mem with [RSP, el]:u64 <- #6576
.address 0x405F1C
0002f7b1: #6577 := RBP
.address 0x405F1C
0002f7b4: RSP := RSP - 8
.address 0x405F1C
0002f7b7: mem := mem with [RSP, el]:u64 <- #6577
.address 0x405F1D
0002f7be: RSI := 0x80
.address 0x405F22
0002f7c7: #6578 := R13
.address 0x405F22
0002f7ca: RSP := RSP - 8
.address 0x405F22
0002f7cd: mem := mem with [RSP, el]:u64 <- #6578
.address 0x405F24
0002f7d4: RDI := RBX
.address 0x405F27
0002f7e1: RAX := 0
.address 0x405F27
0002f7e4: AF := unknown[bits]:u1
.address 0x405F27
0002f7e7: ZF := 1
.address 0x405F27
0002f7ea: PF := 1
.address 0x405F27
0002f7ed: OF := 0
.address 0x405F27
0002f7f0: CF := 0
.address 0x405F27
0002f7f3: SF := 0
.address 0x405F29
0002f7fc: RSP := RSP - 8
.address 0x405F29
0002f7ff: mem := mem with [RSP, el]:u64 <- 0x405F2E
.address 0x405F29
0002f802: call @sub_4037c0 with return %0002f804

.address 0x405F2E
0002f804: 
.address 0x405F2E
0002f810: #6579 := RSP
.address 0x405F2E
0002f813: RSP := RSP + 0x20
.address 0x405F2E
0002f816: CF := RSP < #6579
.address 0x405F2E
0002f819: OF := ~high:1[#6579] & (high:1[#6579] | high:1[RSP]) & ~(high:1[#6579] & high:1[RSP])
.address 0x405F2E
0002f81c: AF := 0x10 = (0x10 & (RSP ^ #6579 ^ 0x20))
.address 0x405F2E
0002f81f: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405F2E
0002f822: SF := high:1[RSP]
.address 0x405F2E
0002f825: ZF := 0 = RSP
00044704: goto %0002f827

.address 0x405F32
0002f827: 
.address 0x405F32
0002f832: #6582 := low:32[RAX] - 0x7F
.address 0x405F32
0002f835: CF := low:32[RAX] < 0x7F
.address 0x405F32
0002f838: OF := high:1[(low:32[RAX] ^ 0x7F) & (low:32[RAX] ^ #6582)]
.address 0x405F32
0002f83b: AF := 0x10 = (0x10 & (#6582 ^ low:32[RAX] ^ 0x7F))
.address 0x405F32
0002f83e: PF := ~low:1[let $1 = #6582 >> 4 ^ #6582 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405F32
0002f841: SF := high:1[#6582]
.address 0x405F32
0002f844: ZF := 0 = #6582
.address 0x405F35
0002f84d: when ~(CF | ZF) goto %0002f411
00044705: goto %0002f853

.address 0x405F3B
0002f853: 
.address 0x405F3B
0002f85f: #6584 := RBP
.address 0x405F3B
0002f862: RBP := RBP - 0xFFFFFFFFFFFFFF80
.address 0x405F3B
0002f865: CF := #6584 < 0xFFFFFFFFFFFFFF80
.address 0x405F3B
0002f868: OF := high:1[(#6584 ^ 0xFFFFFFFFFFFFFF80) & (#6584 ^ RBP)]
.address 0x405F3B
0002f86b: AF := 0x10 = (0x10 & (RBP ^ #6584 ^ 0xFFFFFFFFFFFFFF80))
.address 0x405F3B
0002f86e: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405F3B
0002f871: SF := high:1[RBP]
.address 0x405F3B
0002f874: ZF := 0 = RBP
.address 0x405F3F
0002f882: #6587 := RBX
.address 0x405F3F
0002f885: RBX := RBX - 0xFFFFFFFFFFFFFF80
.address 0x405F3F
0002f888: CF := #6587 < 0xFFFFFFFFFFFFFF80
.address 0x405F3F
0002f88b: OF := high:1[(#6587 ^ 0xFFFFFFFFFFFFFF80) & (#6587 ^ RBX)]
.address 0x405F3F
0002f88e: AF := 0x10 = (0x10 & (RBX ^ #6587 ^ 0xFFFFFFFFFFFFFF80))
.address 0x405F3F
0002f891: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405F3F
0002f894: SF := high:1[RBX]
.address 0x405F3F
0002f897: ZF := 0 = RBX
.address 0x405F43
0002f8a4: #6590 := RBP - R15
.address 0x405F43
0002f8a7: CF := RBP < R15
.address 0x405F43
0002f8aa: OF := high:1[(RBP ^ R15) & (RBP ^ #6590)]
.address 0x405F43
0002f8ad: AF := 0x10 = (0x10 & (#6590 ^ RBP ^ R15))
.address 0x405F43
0002f8b0: PF := ~low:1[let $1 = #6590 >> 4 ^ #6590 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405F43
0002f8b3: SF := high:1[#6590]
.address 0x405F43
0002f8b6: ZF := 0 = #6590
.address 0x405F46
0002f8c0: when ZF goto %0002f8ba
00044706: goto %0002f6f8

.address 0x405E4D
0002f8ba: 
.address 0x405E4D
0002f8ca: R14 := mem[RSP, el]:u64
.address 0x405E51
0002f8d8: #6592 := R14
.address 0x405E51
0002f8db: R14 := R14 + 8
.address 0x405E51
0002f8de: CF := R14 < #6592
.address 0x405E51
0002f8e1: OF := ~high:1[#6592] & (high:1[#6592] | high:1[R14]) & ~(high:1[#6592] & high:1[R14])
.address 0x405E51
0002f8e4: AF := 0x10 = (0x10 & (R14 ^ #6592 ^ 8))
.address 0x405E51
0002f8e7: PF := ~low:1[let $1 = R14 >> 4 ^ R14 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405E51
0002f8ea: SF := high:1[R14]
.address 0x405E51
0002f8ed: ZF := 0 = R14
.address 0x405E55
0002f8fa: #6595 := R14 - 0x10
.address 0x405E55
0002f8fd: CF := R14 < 0x10
.address 0x405E55
0002f900: OF := high:1[(R14 ^ 0x10) & (R14 ^ #6595)]
.address 0x405E55
0002f903: AF := 0x10 = (0x10 & (#6595 ^ R14 ^ 0x10))
.address 0x405E55
0002f906: PF := ~low:1[let $1 = #6595 >> 4 ^ #6595 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405E55
0002f909: SF := high:1[#6595]
.address 0x405E55
0002f90c: ZF := 0 = #6595
.address 0x405E59
0002f915: when ~ZF goto %0002f65f
00044707: goto %0002f91b

.address 0x405E5B
0002f91b: 
.address 0x405E5B
0002f920: mem := mem with [0x6203C8] <- 1
00044708: goto %0002f411

.address 0x405E68
0002f411: 
.address 0x405E68
0002f421: RAX := mem[RSP + 0x648, el]:u64
.address 0x405E70
0002f42e: RAX := RAX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x405E70
0002f431: OF := 0
.address 0x405E70
0002f434: CF := 0
.address 0x405E70
0002f437: AF := unknown[bits]:u1
.address 0x405E70
0002f43a: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405E70
0002f43d: SF := high:1[RAX]
.address 0x405E70
0002f440: ZF := 0 = RAX
.address 0x405E79
0002f44a: when ~ZF goto %0002f444
00044709: goto %0002f464

.address 0x405F6C
0002f444: 
.address 0x405F6C
0002f456: RSP := RSP - 8
.address 0x405F6C
0002f459: mem := mem with [RSP, el]:u64 <- 0x405F71
.address 0x405F6C
0002f45c: call @sub_403970 with return %0002f45e

.address 0x405F71
0002f45e: 
0004470a: call @sub_405f80 with noreturn

.address 0x405E7F
0002f464: 
.address 0x405E7F
0002f470: #6547 := RSP
.address 0x405E7F
0002f473: RSP := RSP + 0x658
.address 0x405E7F
0002f476: CF := RSP < #6547
.address 0x405E7F
0002f479: OF := ~high:1[#6547] & (high:1[#6547] | high:1[RSP]) & ~(high:1[#6547] & high:1[RSP])
.address 0x405E7F
0002f47c: AF := 0x10 = (0x10 & (RSP ^ #6547 ^ 0x658))
.address 0x405E7F
0002f47f: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405E7F
0002f482: SF := high:1[RSP]
.address 0x405E7F
0002f485: ZF := 0 = RSP
.address 0x405E86
0002f48d: RBX := mem[RSP, el]:u64
.address 0x405E86
0002f490: RSP := RSP + 8
.address 0x405E87
0002f498: RBP := mem[RSP, el]:u64
.address 0x405E87
0002f49b: RSP := RSP + 8
.address 0x405E88
0002f4a3: R12 := mem[RSP, el]:u64
.address 0x405E88
0002f4a6: RSP := RSP + 8
.address 0x405E8A
0002f4ae: R13 := mem[RSP, el]:u64
.address 0x405E8A
0002f4b1: RSP := RSP + 8
.address 0x405E8C
0002f4b9: R14 := mem[RSP, el]:u64
.address 0x405E8C
0002f4bc: RSP := RSP + 8
.address 0x405E8E
0002f4c4: R15 := mem[RSP, el]:u64
.address 0x405E8E
0002f4c7: RSP := RSP + 8
.address 0x405E90
0002f4d0: #6550 := mem[RSP, el]:u64
.address 0x405E90
0002f4d3: RSP := RSP + 8
.address 0x405E90
0002f4d7: call #6550 with noreturn

.address 0x405E38
0002f979: 
.address 0x405E38
0002f97e: R13 := RBP
.address 0x405E3B
0002f985: goto %0002f378


.address 0x405F80
00043e52: sub sub_405f80()
.address 0x405F80
0002ab88: 
.address 0x405F80
0002ab9a: #5911 := R13
.address 0x405F80
0002ab9d: RSP := RSP - 8
.address 0x405F80
0002aba0: mem := mem with [RSP, el]:u64 <- #5911
.address 0x405F82
0002aba9: #5912 := R12
.address 0x405F82
0002abac: RSP := RSP - 8
.address 0x405F82
0002abaf: mem := mem with [RSP, el]:u64 <- #5912
.address 0x405F84
0002abb6: R12 := RSI
.address 0x405F87
0002abbf: #5913 := RBP
.address 0x405F87
0002abc2: RSP := RSP - 8
.address 0x405F87
0002abc5: mem := mem with [RSP, el]:u64 <- #5913
.address 0x405F88
0002abce: #5914 := RBX
.address 0x405F88
0002abd1: RSP := RSP - 8
.address 0x405F88
0002abd4: mem := mem with [RSP, el]:u64 <- #5914
.address 0x405F89
0002abdb: RBP := RDI
.address 0x405F8C
0002abe2: RDI := 0x20
.address 0x405F91
0002abe9: R13 := pad:64[low:32[RDX]]
.address 0x405F94
0002abf7: #5915 := RSP
.address 0x405F94
0002abfa: RSP := RSP - 8
.address 0x405F94
0002abfd: CF := #5915 < 8
.address 0x405F94
0002ac00: OF := high:1[(#5915 ^ 8) & (#5915 ^ RSP)]
.address 0x405F94
0002ac03: AF := 0x10 = (0x10 & (RSP ^ #5915 ^ 8))
.address 0x405F94
0002ac06: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405F94
0002ac09: SF := high:1[RSP]
.address 0x405F94
0002ac0c: ZF := 0 = RSP
.address 0x405F98
0002ac15: RSP := RSP - 8
.address 0x405F98
0002ac18: mem := mem with [RSP, el]:u64 <- 0x405F9D
.address 0x405F98
0002ac1b: call @sub_414480 with return %0002ac1d

.address 0x405F9D
0002ac1d: 
.address 0x405F9D
0002ac22: RBX := RAX
.address 0x405FA0
0002ac2f: RAX := 0
.address 0x405FA0
0002ac32: AF := unknown[bits]:u1
.address 0x405FA0
0002ac35: ZF := 1
.address 0x405FA0
0002ac38: PF := 1
.address 0x405FA0
0002ac3b: OF := 0
.address 0x405FA0
0002ac3e: CF := 0
.address 0x405FA0
0002ac41: SF := 0
.address 0x405FA2
0002ac4e: #5918 := R12
.address 0x405FA2
0002ac51: OF := 0
.address 0x405FA2
0002ac54: CF := 0
.address 0x405FA2
0002ac57: AF := unknown[bits]:u1
.address 0x405FA2
0002ac5a: PF := ~low:1[let $1 = #5918 >> 4 ^ #5918 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405FA2
0002ac5d: SF := high:1[#5918]
.address 0x405FA2
0002ac60: ZF := 0 = #5918
.address 0x405FA5
0002ac6a: when ZF goto %0002ac64
0004470b: goto %0002af7a

.address 0x405FA7
0002af7a: 
.address 0x405FA7
0002af7f: RDI := R12
.address 0x405FAA
0002af88: RSP := RSP - 8
.address 0x405FAA
0002af8b: mem := mem with [RSP, el]:u64 <- 0x405FAF
.address 0x405FAA
0002af8e: call @sub_4146b0 with return %0002ac64

.address 0x405FAF
0002ac64: 
.address 0x405FAF
0002ac74: mem := mem with [RBX + 8, el]:u64 <- RAX
.address 0x405FB3
0002ac81: RAX := 0
.address 0x405FB3
0002ac84: AF := unknown[bits]:u1
.address 0x405FB3
0002ac87: ZF := 1
.address 0x405FB3
0002ac8a: PF := 1
.address 0x405FB3
0002ac8d: OF := 0
.address 0x405FB3
0002ac90: CF := 0
.address 0x405FB3
0002ac93: SF := 0
.address 0x405FB5
0002aca0: #5920 := RBP
.address 0x405FB5
0002aca3: OF := 0
.address 0x405FB5
0002aca6: CF := 0
.address 0x405FB5
0002aca9: AF := unknown[bits]:u1
.address 0x405FB5
0002acac: PF := ~low:1[let $1 = #5920 >> 4 ^ #5920 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x405FB5
0002acaf: SF := high:1[#5920]
.address 0x405FB5
0002acb2: ZF := 0 = #5920
.address 0x405FB8
0002acbc: when ZF goto %0002acb6
0004470c: goto %0002af64

.address 0x405FBA
0002af64: 
.address 0x405FBA
0002af69: RDI := RBP
.address 0x405FBD
0002af72: RSP := RSP - 8
.address 0x405FBD
0002af75: mem := mem with [RSP, el]:u64 <- 0x405FC2
.address 0x405FBD
0002af78: call @sub_4146b0 with return %0002acb6

.address 0x405FC2
0002acb6: 
.address 0x405FC2
0002acc6: mem := mem with [RBX, el]:u64 <- RAX
.address 0x405FC5
0002accd: RAX := mem[0x621380, el]:u64
.address 0x405FCC
0002acd4: mem := mem with [RBX + 0x10] <- low:8[R13]
.address 0x405FD0
0002acdb: mem := mem with [0x621380, el]:u64 <- RBX
.address 0x405FD7
0002ace2: mem := mem with [RBX + 0x18, el]:u64 <- RAX
.address 0x405FDB
0002acf0: #5922 := RSP
.address 0x405FDB
0002acf3: RSP := RSP + 8
.address 0x405FDB
0002acf6: CF := RSP < #5922
.address 0x405FDB
0002acf9: OF := ~high:1[#5922] & (high:1[#5922] | high:1[RSP]) & ~(high:1[#5922] & high:1[RSP])
.address 0x405FDB
0002acfc: AF := 0x10 = (0x10 & (RSP ^ #5922 ^ 8))
.address 0x405FDB
0002acff: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x405FDB
0002ad02: SF := high:1[RSP]
.address 0x405FDB
0002ad05: ZF := 0 = RSP
.address 0x405FDF
0002ad0d: RBX := mem[RSP, el]:u64
.address 0x405FDF
0002ad10: RSP := RSP + 8
.address 0x405FE0
0002ad18: RBP := mem[RSP, el]:u64
.address 0x405FE0
0002ad1b: RSP := RSP + 8
.address 0x405FE1
0002ad23: R12 := mem[RSP, el]:u64
.address 0x405FE1
0002ad26: RSP := RSP + 8
.address 0x405FE3
0002ad2e: R13 := mem[RSP, el]:u64
.address 0x405FE3
0002ad31: RSP := RSP + 8
.address 0x405FE5
0002ad3a: #5925 := mem[RSP, el]:u64
.address 0x405FE5
0002ad3d: RSP := RSP + 8
.address 0x405FE5
0002ad41: call #5925 with noreturn


.address 0x406080
00043e55: sub sub_406080()
.address 0x406080
0002adff: 
.address 0x406080
0002ae04: RAX := RSI
.address 0x406083
0002ae0b: RSI := mem[RDI, el]:u64
.address 0x406086
0002ae12: RDI := mem[RAX, el]:u64
.address 0x406089
0002ae19: call @sub_403b20 with noreturn


.address 0x406090
00043e56: sub sub_406090()
.address 0x406090
0002ae1e: 
.address 0x406090
0002ae25: #5932 := RBX
.address 0x406090
0002ae28: RSP := RSP - 8
.address 0x406090
0002ae2b: mem := mem with [RSP, el]:u64 <- #5932
.address 0x406091
0002ae32: RBX := RDI
.address 0x406094
0002ae39: RDI := mem[RDI, el]:u64
.address 0x406097
0002ae42: RSP := RSP - 8
.address 0x406097
0002ae45: mem := mem with [RSP, el]:u64 <- 0x40609C
.address 0x406097
0002ae48: call @sub_403e70 with return %0002ae4a

.address 0x40609C
0002ae4a: 
.address 0x40609C
0002ae4f: RDI := mem[RBX + 8, el]:u64
.address 0x4060A0
0002ae58: RSP := RSP - 8
.address 0x4060A0
0002ae5b: mem := mem with [RSP, el]:u64 <- 0x4060A5
.address 0x4060A0
0002ae5e: call @sub_403e70 with return %0002ae60

.address 0x4060A5
0002ae60: 
.address 0x4060A5
0002ae65: RDI := mem[RBX + 0x10, el]:u64
.address 0x4060A9
0002ae6e: RSP := RSP - 8
.address 0x4060A9
0002ae71: mem := mem with [RSP, el]:u64 <- 0x4060AE
.address 0x4060A9
0002ae74: call @sub_403e70 with return %0002ae76

.address 0x4060AE
0002ae76: 
.address 0x4060AE
0002ae7b: RDI := mem[RBX + 0xB0, el]:u64
.address 0x4060B5
0002ae82: RAX := 0x620022
.address 0x4060BC
0002ae8f: #5933 := RDI - RAX
.address 0x4060BC
0002ae92: CF := RDI < RAX
.address 0x4060BC
0002ae95: OF := high:1[(RDI ^ RAX) & (RDI ^ #5933)]
.address 0x4060BC
0002ae98: AF := 0x10 = (0x10 & (#5933 ^ RDI ^ RAX))
.address 0x4060BC
0002ae9b: PF := ~low:1[let $1 = #5933 >> 4 ^ #5933 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4060BC
0002ae9e: SF := high:1[#5933]
.address 0x4060BC
0002aea1: ZF := 0 = #5933
.address 0x4060BF
0002aeab: when ZF goto %0002aea5
0004470d: goto %0002aed1

.address 0x4060D0
0002aea5: 
.address 0x4060D0
0002aeb6: RBX := mem[RSP, el]:u64
.address 0x4060D0
0002aeb9: RSP := RSP + 8
.address 0x4060D1
0002aec2: #5935 := mem[RSP, el]:u64
.address 0x4060D1
0002aec5: RSP := RSP + 8
.address 0x4060D1
0002aec9: call #5935 with noreturn

.address 0x4060C1
0002aed1: 
.address 0x4060C1
0002aed7: RBX := mem[RSP, el]:u64
.address 0x4060C1
0002aeda: RSP := RSP + 8
.address 0x4060C2
0002aee1: call @sub_403da0 with noreturn


.address 0x4060E0
00043e58: sub sub_4060e0()
.address 0x4060E0
0002a30a: 
.address 0x4060E0
0002a320: #5838 := mem[0x6213B0, el]:u64
.address 0x4060E0
0002a323: CF := mem[0x6213B0, el]:u64 < 0
.address 0x4060E0
0002a326: OF := high:1[mem[0x6213B0, el]:u64 & (mem[0x6213B0, el]:u64 ^ #5838)]
.address 0x4060E0
0002a329: AF := 0x10 = (0x10 & (#5838 ^ mem[0x6213B0, el]:u64))
.address 0x4060E0
0002a32c: PF := ~low:1[let $1 = #5838 >> 4 ^ #5838 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4060E0
0002a32f: SF := high:1[#5838]
.address 0x4060E0
0002a332: ZF := 0 = #5838
.address 0x4060E8
0002a33b: #5840 := RBX
.address 0x4060E8
0002a33e: RSP := RSP - 8
.address 0x4060E8
0002a341: mem := mem with [RSP, el]:u64 <- #5840
.address 0x4060E9
0002a34b: when ZF goto %0002a345
0004470e: goto %0003f45c

.address 0x4060EB
0003f45c: 
.address 0x4060EB
0003f467: RBX := 0
.address 0x4060EB
0003f46a: AF := unknown[bits]:u1
.address 0x4060EB
0003f46d: ZF := 1
.address 0x4060EB
0003f470: PF := 1
.address 0x4060EB
0003f473: OF := 0
.address 0x4060EB
0003f476: CF := 0
.address 0x4060EB
0003f479: SF := 0
0004470f: goto %0003f47e

.address 0x4060F0
0003f47e: 
.address 0x4060F0
0003f483: RAX := mem[0x6213A0, el]:u64
.address 0x4060F7
0003f48a: RDI := mem[RAX + (RBX << 3), el]:u64
.address 0x4060FB
0003f498: #8734 := RBX
.address 0x4060FB
0003f49b: RBX := RBX + 1
.address 0x4060FB
0003f49e: CF := RBX < #8734
.address 0x4060FB
0003f4a1: OF := ~high:1[#8734] & (high:1[#8734] | high:1[RBX]) & ~(high:1[#8734] & high:1[RBX])
.address 0x4060FB
0003f4a4: AF := 0x10 = (0x10 & (RBX ^ #8734 ^ 1))
.address 0x4060FB
0003f4a7: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4060FB
0003f4aa: SF := high:1[RBX]
.address 0x4060FB
0003f4ad: ZF := 0 = RBX
.address 0x4060FF
0003f4b6: RSP := RSP - 8
.address 0x4060FF
0003f4b9: mem := mem with [RSP, el]:u64 <- 0x406104
.address 0x4060FF
0003f4bc: call @sub_406090 with return %0003f4be

.address 0x406104
0003f4be: 
.address 0x406104
0003f4c9: #8737 := mem[0x6213B0, el]:u64 - RBX
.address 0x406104
0003f4cc: CF := mem[0x6213B0, el]:u64 < RBX
.address 0x406104
0003f4cf: OF := high:1[(mem[0x6213B0, el]:u64 ^ RBX) & (mem[0x6213B0, el]:u64 ^ #8737)]
.address 0x406104
0003f4d2: AF := 0x10 = (0x10 & (#8737 ^ mem[0x6213B0, el]:u64 ^ RBX))
.address 0x406104
0003f4d5: PF := ~low:1[let $1 = #8737 >> 4 ^ #8737 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406104
0003f4d8: SF := high:1[#8737]
.address 0x406104
0003f4db: ZF := 0 = #8737
.address 0x40610B
0003f4e4: when ~(CF | ZF) goto %0003f47e
00044710: goto %0002a345

.address 0x40610D
0002a345: 
.address 0x40610D
0002a355: mem := mem with [0x6213B0, el]:u64 <- 0
.address 0x406118
0002a35c: mem := mem with [0x6213A9] <- 0
.address 0x40611F
0002a363: mem := mem with [0x621364] <- 0
.address 0x406126
0002a36a: mem := mem with [0x621360, el]:u32 <- 0
.address 0x406130
0002a371: mem := mem with [0x62135C, el]:u32 <- 0
.address 0x40613A
0002a378: mem := mem with [0x621358, el]:u32 <- 0
.address 0x406144
0002a37f: mem := mem with [0x621350, el]:u32 <- 0
.address 0x40614E
0002a386: mem := mem with [0x62134C, el]:u32 <- 0
.address 0x406158
0002a38d: mem := mem with [0x621348, el]:u32 <- 0
.address 0x406162
0002a394: mem := mem with [0x621354, el]:u32 <- 0
.address 0x40616C
0002a39b: mem := mem with [0x621344, el]:u32 <- 0
.address 0x406176
0002a3a2: mem := mem with [0x621340, el]:u32 <- 0
.address 0x406180
0002a3a9: mem := mem with [0x62133C, el]:u32 <- 0
.address 0x40618A
0002a3b1: RBX := mem[RSP, el]:u64
.address 0x40618A
0002a3b4: RSP := RSP + 8
.address 0x40618B
0002a3bd: #5841 := mem[RSP, el]:u64
.address 0x40618B
0002a3c0: RSP := RSP + 8
.address 0x40618B
0002a3c4: call #5841 with noreturn


.address 0x406190
00043e5c: sub sub_406190()
.address 0x406190
0002a3c9: 
.address 0x406190
0002a3d0: #5842 := RBP
.address 0x406190
0002a3d3: RSP := RSP - 8
.address 0x406190
0002a3d6: mem := mem with [RSP, el]:u64 <- #5842
.address 0x406191
0002a3df: #5843 := RBX
.address 0x406191
0002a3e2: RSP := RSP - 8
.address 0x406191
0002a3e5: mem := mem with [RSP, el]:u64 <- #5843
.address 0x406192
0002a3ec: RBX := RDI
.address 0x406195
0002a3f3: RDX := RBX
.address 0x406198
0002a3fa: RCX := 0xFFFFFFFFFFFFFFFF
.address 0x40619F
0002a401: RSI := 2
.address 0x4061A4
0002a40f: #5844 := RSP
.address 0x4061A4
0002a412: RSP := RSP - 0x18
.address 0x4061A4
0002a415: CF := #5844 < 0x18
.address 0x4061A4
0002a418: OF := high:1[(#5844 ^ 0x18) & (#5844 ^ RSP)]
.address 0x4061A4
0002a41b: AF := 0x10 = (0x10 & (RSP ^ #5844 ^ 0x18))
.address 0x4061A4
0002a41e: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4061A4
0002a421: SF := high:1[RSP]
.address 0x4061A4
0002a424: ZF := 0 = RSP
.address 0x4061A8
0002a42b: R8 := mem[0x6212D0, el]:u64
.address 0x4061AF
0002a432: RDI := low:64[RSP + 6]
.address 0x4061B4
0002a439: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x4061BD
0002a440: mem := mem with [RSP + 8, el]:u64 <- RAX
.address 0x4061C2
0002a44d: RAX := 0
.address 0x4061C2
0002a450: AF := unknown[bits]:u1
.address 0x4061C2
0002a453: ZF := 1
.address 0x4061C2
0002a456: PF := 1
.address 0x4061C2
0002a459: OF := 0
.address 0x4061C2
0002a45c: CF := 0
.address 0x4061C2
0002a45f: SF := 0
.address 0x4061C4
0002a468: RSP := RSP - 8
.address 0x4061C4
0002a46b: mem := mem with [RSP, el]:u64 <- 0x4061C9
.address 0x4061C4
0002a46e: call @sub_413660 with return %0002a470

.address 0x4061C9
0002a470: 
.address 0x4061C9
0002a475: RDX := pad:64[pad:32[mem[RSP + 6]]]
.address 0x4061CE
0002a482: #5847 := mem[RBX] - low:8[RDX]
.address 0x4061CE
0002a485: CF := mem[RBX] < low:8[RDX]
.address 0x4061CE
0002a488: OF := high:1[(mem[RBX] ^ low:8[RDX]) & (mem[RBX] ^ #5847)]
.address 0x4061CE
0002a48b: AF := 0x10 = (0x10 & (#5847 ^ mem[RBX] ^ low:8[RDX]))
.address 0x4061CE
0002a48e: PF := ~low:1[let $1 = #5847 >> 4 ^ #5847 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4061CE
0002a491: SF := high:1[#5847]
.address 0x4061CE
0002a494: ZF := 0 = #5847
.address 0x4061D0
0002a49e: when ZF goto %0002a498
00044711: goto %0003f455

.address 0x4061F0
0002a498: 
.address 0x4061F0
0002a4a8: RBP := RAX
.address 0x4061F3
0002a4af: RDI := RBX
.address 0x4061F6
0002a4b8: RSP := RSP - 8
.address 0x4061F6
0002a4bb: mem := mem with [RSP, el]:u64 <- 0x4061FB
.address 0x4061F6
0002a4be: call @sub_403950 with return %0002a4c0

.address 0x4061FB
0002a4c0: 
.address 0x4061FB
0002a4cb: #5849 := RAX - RBP
.address 0x4061FB
0002a4ce: CF := RAX < RBP
.address 0x4061FB
0002a4d1: OF := high:1[(RAX ^ RBP) & (RAX ^ #5849)]
.address 0x4061FB
0002a4d4: AF := 0x10 = (0x10 & (#5849 ^ RAX ^ RBP))
.address 0x4061FB
0002a4d7: PF := ~low:1[let $1 = #5849 >> 4 ^ #5849 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4061FB
0002a4da: SF := high:1[#5849]
.address 0x4061FB
0002a4dd: ZF := 0 = #5849
.address 0x4061FE
0002a4e4: RAX := extract:63:8[RAX].pad:8[~ZF]
.address 0x406201
0002a4ec: goto %0002a4e8

.address 0x4061D2
0003f455: 
.address 0x4061D2
0003f45a: RAX := 1
00044712: goto %0002a4e8

.address 0x4061D7
0002a4e8: 
.address 0x4061D7
0002a4f2: RCX := mem[RSP + 8, el]:u64
.address 0x4061DC
0002a4ff: RCX := RCX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x4061DC
0002a502: OF := 0
.address 0x4061DC
0002a505: CF := 0
.address 0x4061DC
0002a508: AF := unknown[bits]:u1
.address 0x4061DC
0002a50b: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4061DC
0002a50e: SF := high:1[RCX]
.address 0x4061DC
0002a511: ZF := 0 = RCX
.address 0x4061E5
0002a51b: when ~ZF goto %0002a515
00044713: goto %0003f409

.address 0x406203
0002a515: 
.address 0x406203
0002a527: RSP := RSP - 8
.address 0x406203
0002a52a: mem := mem with [RSP, el]:u64 <- 0x406208
.address 0x406203
0002a52d: call @sub_403970 with return %0002a52f

.address 0x406208
0002a52f: 
00044714: call @sub_406210 with noreturn

.address 0x4061E7
0003f409: 
.address 0x4061E7
0003f415: #8730 := RSP
.address 0x4061E7
0003f418: RSP := RSP + 0x18
.address 0x4061E7
0003f41b: CF := RSP < #8730
.address 0x4061E7
0003f41e: OF := ~high:1[#8730] & (high:1[#8730] | high:1[RSP]) & ~(high:1[#8730] & high:1[RSP])
.address 0x4061E7
0003f421: AF := 0x10 = (0x10 & (RSP ^ #8730 ^ 0x18))
.address 0x4061E7
0003f424: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4061E7
0003f427: SF := high:1[RSP]
.address 0x4061E7
0003f42a: ZF := 0 = RSP
.address 0x4061EB
0003f432: RBX := mem[RSP, el]:u64
.address 0x4061EB
0003f435: RSP := RSP + 8
.address 0x4061EC
0003f43d: RBP := mem[RSP, el]:u64
.address 0x4061EC
0003f440: RSP := RSP + 8
.address 0x4061ED
0003f449: #8733 := mem[RSP, el]:u64
.address 0x4061ED
0003f44c: RSP := RSP + 8
.address 0x4061ED
0003f450: call #8733 with noreturn


.address 0x406210
00043e61: sub sub_406210()
.address 0x406210
0002a532: 
.address 0x406210
0002a539: #5852 := R14
.address 0x406210
0002a53c: RSP := RSP - 8
.address 0x406210
0002a53f: mem := mem with [RSP, el]:u64 <- #5852
.address 0x406212
0002a548: #5853 := R13
.address 0x406212
0002a54b: RSP := RSP - 8
.address 0x406212
0002a54e: mem := mem with [RSP, el]:u64 <- #5853
.address 0x406214
0002a557: #5854 := R12
.address 0x406214
0002a55a: RSP := RSP - 8
.address 0x406214
0002a55d: mem := mem with [RSP, el]:u64 <- #5854
.address 0x406216
0002a566: #5855 := RBP
.address 0x406216
0002a569: RSP := RSP - 8
.address 0x406216
0002a56c: mem := mem with [RSP, el]:u64 <- #5855
.address 0x406217
0002a573: R12 := pad:64[low:32[RSI]]
.address 0x40621A
0002a57c: #5856 := RBX
.address 0x40621A
0002a57f: RSP := RSP - 8
.address 0x40621A
0002a582: mem := mem with [RSP, el]:u64 <- #5856
.address 0x40621B
0002a589: RBX := RDI
.address 0x40621E
0002a592: RSP := RSP - 8
.address 0x40621E
0002a595: mem := mem with [RSP, el]:u64 <- 0x406223
.address 0x40621E
0002a598: call @sub_403950 with return %0002a59a

.address 0x406223
0002a59a: 
.address 0x406223
0002a59f: RCX := low:64[RAX + 1]
.address 0x406227
0002a5a6: RAX := 3
.address 0x40622C
0002a5b5: #5857 := pad:128[RAX] * pad:128[RCX]
.address 0x40622C
0002a5b8: RAX := extract:63:0[#5857]
.address 0x40622C
0002a5bb: RDX := extract:127:64[#5857]
.address 0x40622C
0002a5be: OF := extract:127:64[#5857] <> 0
.address 0x40622C
0002a5c1: CF := extract:127:64[#5857] <> 0
.address 0x40622C
0002a5c4: SF := unknown[bits]:u1
.address 0x40622C
0002a5c7: ZF := unknown[bits]:u1
.address 0x40622C
0002a5ca: AF := unknown[bits]:u1
.address 0x40622C
0002a5cd: PF := unknown[bits]:u1
.address 0x40622F
0002a5d7: when OF goto %0002a5d1
00044715: goto %0003f3ea

.address 0x4062D2
0002a5d1: 
.address 0x4062D2
0002a5e1: RSI := 1
.address 0x4062D7
0002a5e9: goto %0002a5e5

.address 0x406235
0003f3ea: 
.address 0x406235
0003f3f5: RSI := 0
.address 0x406235
0003f3f8: AF := unknown[bits]:u1
.address 0x406235
0003f3fb: ZF := 1
.address 0x406235
0003f3fe: PF := 1
.address 0x406235
0003f401: OF := 0
.address 0x406235
0003f404: CF := 0
.address 0x406235
0003f407: SF := 0
00044716: goto %0002a5e5

.address 0x406237
0002a5e5: 
.address 0x406237
0002a5f5: #5858 := RAX
.address 0x406237
0002a5f8: OF := 0
.address 0x406237
0002a5fb: CF := 0
.address 0x406237
0002a5fe: AF := unknown[bits]:u1
.address 0x406237
0002a601: PF := ~low:1[let $1 = #5858 >> 4 ^ #5858 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406237
0002a604: SF := high:1[#5858]
.address 0x406237
0002a607: ZF := 0 = #5858
.address 0x40623A
0002a611: when SF goto %0002a60b
00044717: goto %0003f14e

.address 0x406240
0003f14e: 
.address 0x406240
0003f159: #8705 := RSI
.address 0x406240
0003f15c: OF := 0
.address 0x406240
0003f15f: CF := 0
.address 0x406240
0003f162: AF := unknown[bits]:u1
.address 0x406240
0003f165: PF := ~low:1[let $1 = #8705 >> 4 ^ #8705 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406240
0003f168: SF := high:1[#8705]
.address 0x406240
0003f16b: ZF := 0 = #8705
.address 0x406243
0003f174: when ~ZF goto %0002a60b
00044718: goto %0003f17a

.address 0x4062DC
0002a60b: 
.address 0x4062DC
0002a61d: RSP := RSP - 8
.address 0x4062DC
0002a620: mem := mem with [RSP, el]:u64 <- 0x4062E1
.address 0x4062DC
0002a623: call @sub_4146d0 with return %0002a625

.address 0x4062E1
0002a625: 
00044719: call @sub_4062f0 with noreturn

.address 0x406249
0003f17a: 
.address 0x406249
0003f17f: RDI := low:64[RCX + (RCX << 1)]
.address 0x40624D
0003f186: R14 := 0x620FE0
.address 0x406254
0003f18f: RSP := RSP - 8
.address 0x406254
0003f192: mem := mem with [RSP, el]:u64 <- 0x406259
.address 0x406254
0003f195: call @sub_414480 with return %0003f197

.address 0x406259
0003f197: 
.address 0x406259
0003f19c: R13 := RAX
.address 0x40625C
0003f1a3: RBP := RAX
0004471a: goto %0003f1a5

.address 0x40625F
0003f1a5: 
.address 0x40625F
0003f1aa: RAX := pad:64[pad:32[mem[RBX]]]
.address 0x406262
0003f1b7: #8707 := low:8[RAX]
.address 0x406262
0003f1ba: OF := 0
.address 0x406262
0003f1bd: CF := 0
.address 0x406262
0003f1c0: AF := unknown[bits]:u1
.address 0x406262
0003f1c3: PF := ~low:1[let $1 = #8707 >> 4 ^ #8707 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406262
0003f1c6: SF := high:1[#8707]
.address 0x406262
0003f1c9: ZF := 0 = #8707
.address 0x406264
0003f1d3: when ZF goto %0003f1cd
0004471b: goto %0003f2d8

.address 0x406266
0003f2d8: 
.address 0x406266
0003f2e4: #8716 := RBX
.address 0x406266
0003f2e7: RBX := RBX + 1
.address 0x406266
0003f2ea: CF := RBX < #8716
.address 0x406266
0003f2ed: OF := ~high:1[#8716] & (high:1[#8716] | high:1[RBX]) & ~(high:1[#8716] & high:1[RBX])
.address 0x406266
0003f2f0: AF := 0x10 = (0x10 & (RBX ^ #8716 ^ 1))
.address 0x406266
0003f2f3: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x406266
0003f2f6: SF := high:1[RBX]
.address 0x406266
0003f2f9: ZF := 0 = RBX
.address 0x40626A
0003f306: #8719 := low:8[RAX] - 0x2F
.address 0x40626A
0003f309: CF := low:8[RAX] < 0x2F
.address 0x40626A
0003f30c: OF := high:1[(low:8[RAX] ^ 0x2F) & (low:8[RAX] ^ #8719)]
.address 0x40626A
0003f30f: AF := 0x10 = (0x10 & (#8719 ^ low:8[RAX] ^ 0x2F))
.address 0x40626A
0003f312: PF := ~low:1[let $1 = #8719 >> 4 ^ #8719 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40626A
0003f315: SF := high:1[#8719]
.address 0x40626A
0003f318: ZF := 0 = #8719
.address 0x40626C
0003f322: when ~ZF goto %0003f31c
0004471c: goto %0003f3be

.address 0x40626E
0003f3be: 
.address 0x40626E
0003f3c9: #8728 := low:8[R12]
.address 0x40626E
0003f3cc: OF := 0
.address 0x40626E
0003f3cf: CF := 0
.address 0x40626E
0003f3d2: AF := unknown[bits]:u1
.address 0x40626E
0003f3d5: PF := ~low:1[let $1 = #8728 >> 4 ^ #8728 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40626E
0003f3d8: SF := high:1[#8728]
.address 0x40626E
0003f3db: ZF := 0 = #8728
.address 0x406271
0003f3e4: when ~ZF goto %0003f2a7
0004471d: goto %0003f31c

.address 0x4062C8
0003f2a7: 
.address 0x4062C8
0003f2ac: mem := mem with [RBP] <- 0x2F
.address 0x4062CC
0003f2ba: #8713 := RBP
.address 0x4062CC
0003f2bd: RBP := RBP + 1
.address 0x4062CC
0003f2c0: CF := RBP < #8713
.address 0x4062CC
0003f2c3: OF := ~high:1[#8713] & (high:1[#8713] | high:1[RBP]) & ~(high:1[#8713] & high:1[RBP])
.address 0x4062CC
0003f2c6: AF := 0x10 = (0x10 & (RBP ^ #8713 ^ 1))
.address 0x4062CC
0003f2c9: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4062CC
0003f2cc: SF := high:1[RBP]
.address 0x4062CC
0003f2cf: ZF := 0 = RBP
.address 0x4062D0
0003f2d6: goto %0003f1a5

.address 0x406273
0003f31c: 
.address 0x406273
0003f32c: RDX := pad:64[pad:32[low:8[RAX]]]
.address 0x406276
0003f339: #8721 := mem[R14 + RDX]
.address 0x406276
0003f33c: CF := mem[R14 + RDX] < 0
.address 0x406276
0003f33f: OF := high:1[mem[R14 + RDX] & (mem[R14 + RDX] ^ #8721)]
.address 0x406276
0003f342: AF := 0x10 = (0x10 & (#8721 ^ mem[R14 + RDX]))
.address 0x406276
0003f345: PF := ~low:1[let $1 = #8721 >> 4 ^ #8721 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406276
0003f348: SF := high:1[#8721]
.address 0x406276
0003f34b: ZF := 0 = #8721
.address 0x40627B
0003f352: R8 := RDX
.address 0x40627E
0003f35b: when ZF goto %0003f230
0004471e: goto %0003f361

.address 0x4062A0
0003f230: 
.address 0x4062A0
0003f235: RCX := 0x417BF9
.address 0x4062A7
0003f23c: RDI := RBP
.address 0x4062AA
0003f243: RDX := 0xFFFFFFFFFFFFFFFF
.address 0x4062B1
0003f24a: RSI := 1
.address 0x4062B6
0003f257: RAX := 0
.address 0x4062B6
0003f25a: AF := unknown[bits]:u1
.address 0x4062B6
0003f25d: ZF := 1
.address 0x4062B6
0003f260: PF := 1
.address 0x4062B6
0003f263: OF := 0
.address 0x4062B6
0003f266: CF := 0
.address 0x4062B6
0003f269: SF := 0
.address 0x4062B8
0003f277: #8710 := RBP
.address 0x4062B8
0003f27a: RBP := RBP + 3
.address 0x4062B8
0003f27d: CF := RBP < #8710
.address 0x4062B8
0003f280: OF := ~high:1[#8710] & (high:1[#8710] | high:1[RBP]) & ~(high:1[#8710] & high:1[RBP])
.address 0x4062B8
0003f283: AF := 0x10 = (0x10 & (RBP ^ #8710 ^ 3))
.address 0x4062B8
0003f286: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4062B8
0003f289: SF := high:1[RBP]
.address 0x4062B8
0003f28c: ZF := 0 = RBP
.address 0x4062BC
0003f295: RSP := RSP - 8
.address 0x4062BC
0003f298: mem := mem with [RSP, el]:u64 <- 0x4062C1
.address 0x4062BC
0003f29b: call @sub_403e60 with return %0003f29d

.address 0x4062C1
0003f29d: 
.address 0x4062C1
0003f2a2: goto %0003f1a5

.address 0x406280
0003f361: 
.address 0x406280
0003f366: mem := mem with [RBP] <- low:8[RAX]
.address 0x406283
0003f36d: RAX := pad:64[pad:32[mem[RBX]]]
.address 0x406286
0003f37b: #8723 := RBP
.address 0x406286
0003f37e: RBP := RBP + 1
.address 0x406286
0003f381: CF := RBP < #8723
.address 0x406286
0003f384: OF := ~high:1[#8723] & (high:1[#8723] | high:1[RBP]) & ~(high:1[#8723] & high:1[RBP])
.address 0x406286
0003f387: AF := 0x10 = (0x10 & (RBP ^ #8723 ^ 1))
.address 0x406286
0003f38a: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x406286
0003f38d: SF := high:1[RBP]
.address 0x406286
0003f390: ZF := 0 = RBP
.address 0x40628A
0003f39d: #8726 := low:8[RAX]
.address 0x40628A
0003f3a0: OF := 0
.address 0x40628A
0003f3a3: CF := 0
.address 0x40628A
0003f3a6: AF := unknown[bits]:u1
.address 0x40628A
0003f3a9: PF := ~low:1[let $1 = #8726 >> 4 ^ #8726 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40628A
0003f3ac: SF := high:1[#8726]
.address 0x40628A
0003f3af: ZF := 0 = #8726
.address 0x40628C
0003f3b8: when ~ZF goto %0003f2d8
0004471f: goto %0003f1cd

.address 0x40628E
0003f1cd: 
.address 0x40628E
0003f1dd: mem := mem with [RBP] <- 0
.address 0x406292
0003f1e4: RAX := R13
.address 0x406295
0003f1ec: RBX := mem[RSP, el]:u64
.address 0x406295
0003f1ef: RSP := RSP + 8
.address 0x406296
0003f1f7: RBP := mem[RSP, el]:u64
.address 0x406296
0003f1fa: RSP := RSP + 8
.address 0x406297
0003f202: R12 := mem[RSP, el]:u64
.address 0x406297
0003f205: RSP := RSP + 8
.address 0x406299
0003f20d: R13 := mem[RSP, el]:u64
.address 0x406299
0003f210: RSP := RSP + 8
.address 0x40629B
0003f218: R14 := mem[RSP, el]:u64
.address 0x40629B
0003f21b: RSP := RSP + 8
.address 0x40629D
0003f224: #8709 := mem[RSP, el]:u64
.address 0x40629D
0003f227: RSP := RSP + 8
.address 0x40629D
0003f22b: call #8709 with noreturn


.address 0x4062F0
00043e6d: sub sub_4062f0()
.address 0x4062F0
0002a62b: 
.address 0x4062F0
0002a632: #5860 := RBX
.address 0x4062F0
0002a635: RSP := RSP - 8
.address 0x4062F0
0002a638: mem := mem with [RSP, el]:u64 <- #5860
.address 0x4062F1
0002a63f: RBX := mem[0x6213B0, el]:u64
.address 0x4062F8
0002a646: RAX := RBX
.address 0x4062FB
0002a654: #5861 := RAX
.address 0x4062FB
0002a657: RAX := RAX >> 1
.address 0x4062FB
0002a65a: CF := high:1[#5861 << 0x3F]
.address 0x4062FB
0002a65d: SF := high:1[RAX]
.address 0x4062FB
0002a660: ZF := 0 = RAX
.address 0x4062FB
0002a663: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4062FB
0002a666: AF := unknown[bits]:u1
.address 0x4062FB
0002a669: OF := high:1[#5861]
.address 0x4062FE
0002a678: #5863 := RAX
.address 0x4062FE
0002a67b: #5864 := RBX
.address 0x4062FE
0002a67e: RAX := RAX + #5864
.address 0x4062FE
0002a681: CF := RAX < #5863
.address 0x4062FE
0002a684: OF := high:1[#5863] = high:1[#5864] & (high:1[#5863] | high:1[RAX]) & ~(
high:1[#5863] & high:1[RAX])
.address 0x4062FE
0002a687: AF := 0x10 = (0x10 & (RAX ^ #5863 ^ #5864))
.address 0x4062FE
0002a68a: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4062FE
0002a68d: SF := high:1[RAX]
.address 0x4062FE
0002a690: ZF := 0 = RAX
.address 0x406301
0002a69d: #5866 := RAX - mem[0x621398, el]:u64
.address 0x406301
0002a6a0: CF := RAX < mem[0x621398, el]:u64
.address 0x406301
0002a6a3: OF := high:1[(RAX ^ mem[0x621398, el]:u64) & (RAX ^ #5866)]
.address 0x406301
0002a6a6: AF := 0x10 = (0x10 & (#5866 ^ RAX ^ mem[0x621398, el]:u64))
.address 0x406301
0002a6a9: PF := ~low:1[let $1 = #5866 >> 4 ^ #5866 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406301
0002a6ac: SF := high:1[#5866]
.address 0x406301
0002a6af: ZF := 0 = #5866
.address 0x406308
0002a6b9: when ~(CF | ZF) goto %0002a6b3
00044720: goto %0003ee0f

.address 0x406400
0002a6b3: 
.address 0x406400
0002a6c3: RDI := mem[0x6213A0, el]:u64
.address 0x406407
0002a6cc: RSP := RSP - 8
.address 0x406407
0002a6cf: mem := mem with [RSP, el]:u64 <- 0x40640C
.address 0x406407
0002a6d2: call @sub_403e70 with return %0002a6d4

.address 0x40640C
0002a6d4: 
.address 0x40640C
0002a6d9: RDX := 0x18
.address 0x406411
0002a6e6: RCX := 0
.address 0x406411
0002a6e9: AF := unknown[bits]:u1
.address 0x406411
0002a6ec: ZF := 1
.address 0x406411
0002a6ef: PF := 1
.address 0x406411
0002a6f2: OF := 0
.address 0x406411
0002a6f5: CF := 0
.address 0x406411
0002a6f8: SF := 0
.address 0x406413
0002a6ff: RAX := RDX
.address 0x406416
0002a70e: #5868 := pad:128[RAX] * pad:128[RBX]
.address 0x406416
0002a711: RAX := extract:63:0[#5868]
.address 0x406416
0002a714: RDX := extract:127:64[#5868]
.address 0x406416
0002a717: OF := extract:127:64[#5868] <> 0
.address 0x406416
0002a71a: CF := extract:127:64[#5868] <> 0
.address 0x406416
0002a71d: SF := unknown[bits]:u1
.address 0x406416
0002a720: ZF := unknown[bits]:u1
.address 0x406416
0002a723: AF := unknown[bits]:u1
.address 0x406416
0002a726: PF := unknown[bits]:u1
.address 0x406419
0002a730: when OF goto %0002a72a
00044721: goto %0002a73e

.address 0x40630E
0003ee0f: 
.address 0x40630E
0003ee1f: #8673 := RBX
.address 0x40630E
0003ee22: OF := 0
.address 0x40630E
0003ee25: CF := 0
.address 0x40630E
0003ee28: AF := unknown[bits]:u1
.address 0x40630E
0003ee2b: PF := ~low:1[let $1 = #8673 >> 4 ^ #8673 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40630E
0003ee2e: SF := high:1[#8673]
.address 0x40630E
0003ee31: ZF := 0 = #8673
.address 0x406311
0003ee3b: when ZF goto %0003ee35
00044722: goto %0003f0af

.address 0x406313
0003f0af: 
.address 0x406313
0003f0b4: RCX := low:64[RBX + (RBX << 2)]
.address 0x406317
0003f0bb: RAX := mem[0x6213C0, el]:u64
.address 0x40631E
0003f0c2: RDX := mem[0x6213A0, el]:u64
.address 0x406325
0003f0c9: RCX := low:64[RCX + (RCX << 2)]
.address 0x406329
0003f0d0: RCX := low:64[RAX + (RCX << 3)]
00044723: goto %0003f0d5

.address 0x406330
0003f0d5: 
.address 0x406330
0003f0da: mem := mem with [RDX, el]:u64 <- RAX
.address 0x406333
0003f0e8: #8697 := RAX
.address 0x406333
0003f0eb: RAX := RAX + 0xC8
.address 0x406333
0003f0ee: CF := RAX < #8697
.address 0x406333
0003f0f1: OF := ~high:1[#8697] & (high:1[#8697] | high:1[RAX]) & ~(high:1[#8697] & high:1[RAX])
.address 0x406333
0003f0f4: AF := 0x10 = (0x10 & (RAX ^ #8697 ^ 0xC8))
.address 0x406333
0003f0f7: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x406333
0003f0fa: SF := high:1[RAX]
.address 0x406333
0003f0fd: ZF := 0 = RAX
.address 0x406339
0003f10b: #8700 := RDX
.address 0x406339
0003f10e: RDX := RDX + 8
.address 0x406339
0003f111: CF := RDX < #8700
.address 0x406339
0003f114: OF := ~high:1[#8700] & (high:1[#8700] | high:1[RDX]) & ~(high:1[#8700] & high:1[RDX])
.address 0x406339
0003f117: AF := 0x10 = (0x10 & (RDX ^ #8700 ^ 8))
.address 0x406339
0003f11a: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x406339
0003f11d: SF := high:1[RDX]
.address 0x406339
0003f120: ZF := 0 = RDX
.address 0x40633D
0003f12d: #8703 := RCX - RAX
.address 0x40633D
0003f130: CF := RCX < RAX
.address 0x40633D
0003f133: OF := high:1[(RCX ^ RAX) & (RCX ^ #8703)]
.address 0x40633D
0003f136: AF := 0x10 = (0x10 & (#8703 ^ RCX ^ RAX))
.address 0x40633D
0003f139: PF := ~low:1[let $1 = #8703 >> 4 ^ #8703 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40633D
0003f13c: SF := high:1[#8703]
.address 0x40633D
0003f13f: ZF := 0 = #8703
.address 0x406340
0003f148: when ~ZF goto %0003f0d5
00044724: goto %0003ee35

.address 0x406342
0003ee35: 
.address 0x406342
0003ee4b: #8675 := mem[0x621330, el]:u32 - 0xFFFFFFFF
.address 0x406342
0003ee4e: CF := mem[0x621330, el]:u32 < 0xFFFFFFFF
.address 0x406342
0003ee51: OF := high:1[(mem[0x621330, el]:u32 ^ 0xFFFFFFFF) & (mem[0x621330, el]:u32 ^ #8675)]
.address 0x406342
0003ee54: AF := 0x10 = (0x10 & (#8675 ^ mem[0x621330, el]:u32 ^ 0xFFFFFFFF))
.address 0x406342
0003ee57: PF := ~low:1[let $1 = #8675 >> 4 ^ #8675 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406342
0003ee5a: SF := high:1[#8675]
.address 0x406342
0003ee5d: ZF := 0 = #8675
.address 0x406349
0003ee67: when ZF goto %0003ee61
00044725: goto %0003ee8a

.address 0x40634F
0003ee8a: 
.address 0x40634F
0003ee8f: RDI := 0x620300
.address 0x406356
0003ee98: RSP := RSP - 8
.address 0x406356
0003ee9b: mem := mem with [RSP, el]:u64 <- 0x40635B
.address 0x406356
0003ee9e: call @sub_403ae0 with return %0003eea0

.address 0x40635B
0003eea0: 
.address 0x40635B
0003eeab: #8678 := low:32[RAX]
.address 0x40635B
0003eeae: OF := 0
.address 0x40635B
0003eeb1: CF := 0
.address 0x40635B
0003eeb4: AF := unknown[bits]:u1
.address 0x40635B
0003eeb7: PF := ~low:1[let $1 = #8678 >> 4 ^ #8678 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40635B
0003eeba: SF := high:1[#8678]
.address 0x40635B
0003eebd: ZF := 0 = #8678
.address 0x40635D
0003eec4: RCX := pad:64[mem[0x621330, el]:u32]
.address 0x406363
0003eece: when ZF goto %0003eec8
00044726: goto %0003ef7c

.address 0x4063B0
0003eec8: 
.address 0x4063B0
0003eed8: RSI := mem[0x6213B0, el]:u64
.address 0x4063B7
0003eedf: RDI := mem[0x6213A0, el]:u64
00044727: goto %0003eee1

.address 0x406365
0003ef7c: 
.address 0x406365
0003ef87: #8685 := low:32[RCX] - 3
.address 0x406365
0003ef8a: CF := low:32[RCX] < 3
.address 0x406365
0003ef8d: OF := high:1[(low:32[RCX] ^ 3) & (low:32[RCX] ^ #8685)]
.address 0x406365
0003ef90: AF := 0x10 = (0x10 & (#8685 ^ low:32[RCX] ^ 3))
.address 0x406365
0003ef93: PF := ~low:1[let $1 = #8685 >> 4 ^ #8685 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406365
0003ef96: SF := high:1[#8685]
.address 0x406365
0003ef99: ZF := 0 = #8685
.address 0x406368
0003efa3: when ZF goto %0003ef9d
00044728: goto %0003efd3

.address 0x406457
0003ef9d: 
.address 0x406457
0003efad: RCX := 0x416AC8
.address 0x40645E
0003efb4: RSI := 0x417C00
.address 0x406465
0003efbb: RDI := 0x417C09
.address 0x40646C
0003efc2: RDX := 0xEE5
.address 0x406471
0003efcb: RSP := RSP - 8
.address 0x406471
0003efce: mem := mem with [RSP, el]:u64 <- 0x406476
.address 0x406471
0003efd1: call @sub_403a30 with return %0002a72a

.address 0x406476
0002a72a: 
.address 0x406476
0002a73a: RCX := 1
.address 0x40647B
0002a742: goto %0002a73e

.address 0x40641B
0002a73e: 
.address 0x40641B
0002a74e: #5869 := RAX
.address 0x40641B
0002a751: OF := 0
.address 0x40641B
0002a754: CF := 0
.address 0x40641B
0002a757: AF := unknown[bits]:u1
.address 0x40641B
0002a75a: PF := ~low:1[let $1 = #5869 >> 4 ^ #5869 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40641B
0002a75d: SF := high:1[#5869]
.address 0x40641B
0002a760: ZF := 0 = #5869
.address 0x40641E
0002a767: RAX := 1
.address 0x406423
0002a76e: RCX := if SF then RAX else RCX
.address 0x406427
0002a77b: #5871 := RCX
.address 0x406427
0002a77e: OF := 0
.address 0x406427
0002a781: CF := 0
.address 0x406427
0002a784: AF := unknown[bits]:u1
.address 0x406427
0002a787: PF := ~low:1[let $1 = #5871 >> 4 ^ #5871 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406427
0002a78a: SF := high:1[#5871]
.address 0x406427
0002a78d: ZF := 0 = #5871
.address 0x40642A
0002a797: when ~ZF goto %0002a791
00044729: goto %0003edb8

.address 0x40647D
0002a791: 
.address 0x40647D
0002a7a3: RSP := RSP - 8
.address 0x40647D
0002a7a6: mem := mem with [RSP, el]:u64 <- 0x406482
.address 0x40647D
0002a7a9: call @sub_4146d0 with return %0002a7ab

.address 0x406482
0002a7ab: 
0004472a: call @sub_406490 with noreturn

.address 0x40642C
0003edb8: 
.address 0x40642C
0003edbd: RDI := low:64[RBX + (RBX << 1)]
.address 0x406430
0003edcb: #8671 := RDI
.address 0x406430
0003edce: RDI := RDI << 3
.address 0x406430
0003edd1: CF := low:1[#8671 >> 0x3D]
.address 0x406430
0003edd4: SF := high:1[RDI]
.address 0x406430
0003edd7: ZF := 0 = RDI
.address 0x406430
0003edda: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x406430
0003eddd: AF := unknown[bits]:u1
.address 0x406430
0003ede0: OF := unknown[bits]:u1
.address 0x406434
0003ede9: RSP := RSP - 8
.address 0x406434
0003edec: mem := mem with [RSP, el]:u64 <- 0x406439
.address 0x406434
0003edef: call @sub_414480 with return %0003edf1

.address 0x406439
0003edf1: 
.address 0x406439
0003edf6: RBX := mem[0x6213B0, el]:u64
.address 0x406440
0003edfd: mem := mem with [0x6213A0, el]:u64 <- RAX
.address 0x406447
0003ee04: RAX := low:64[RBX + (RBX << 1)]
.address 0x40644B
0003ee0b: mem := mem with [0x621398, el]:u64 <- RAX
.address 0x406452
0003ee13: goto %0003ee0f

.address 0x40636E
0003efd3: 
.address 0x40636E
0003efd8: RSI := mem[0x6213B0, el]:u64
.address 0x406375
0003efdf: RDI := mem[0x6213A0, el]:u64
.address 0x40637C
0003efec: #8687 := RSI
.address 0x40637C
0003efef: OF := 0
.address 0x40637C
0003eff2: CF := 0
.address 0x40637C
0003eff5: AF := unknown[bits]:u1
.address 0x40637C
0003eff8: PF := ~low:1[let $1 = #8687 >> 4 ^ #8687 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40637C
0003effb: SF := high:1[#8687]
.address 0x40637C
0003effe: ZF := 0 = #8687
.address 0x40637F
0003f008: when ZF goto %0003f002
0004472b: goto %0003f01e

.address 0x406381
0003f01e: 
.address 0x406381
0003f023: RDX := mem[0x6213C0, el]:u64
.address 0x406388
0003f02a: R8 := low:64[RDI + (RSI << 3)]
.address 0x40638C
0003f031: RAX := RDI
0004472c: goto %0003f036

.address 0x406390
0003f036: 
.address 0x406390
0003f03b: mem := mem with [RAX, el]:u64 <- RDX
.address 0x406393
0003f049: #8689 := RAX
.address 0x406393
0003f04c: RAX := RAX + 8
.address 0x406393
0003f04f: CF := RAX < #8689
.address 0x406393
0003f052: OF := ~high:1[#8689] & (high:1[#8689] | high:1[RAX]) & ~(high:1[#8689] & high:1[RAX])
.address 0x406393
0003f055: AF := 0x10 = (0x10 & (RAX ^ #8689 ^ 8))
.address 0x406393
0003f058: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x406393
0003f05b: SF := high:1[RAX]
.address 0x406393
0003f05e: ZF := 0 = RAX
.address 0x406397
0003f06c: #8692 := RDX
.address 0x406397
0003f06f: RDX := RDX + 0xC8
.address 0x406397
0003f072: CF := RDX < #8692
.address 0x406397
0003f075: OF := ~high:1[#8692] & (high:1[#8692] | high:1[RDX]) & ~(high:1[#8692] & high:1[RDX])
.address 0x406397
0003f078: AF := 0x10 = (0x10 & (RDX ^ #8692 ^ 0xC8))
.address 0x406397
0003f07b: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x406397
0003f07e: SF := high:1[RDX]
.address 0x406397
0003f081: ZF := 0 = RDX
.address 0x40639E
0003f08e: #8695 := RAX - R8
.address 0x40639E
0003f091: CF := RAX < R8
.address 0x40639E
0003f094: OF := high:1[(RAX ^ R8) & (RAX ^ #8695)]
.address 0x40639E
0003f097: AF := 0x10 = (0x10 & (#8695 ^ RAX ^ R8))
.address 0x40639E
0003f09a: PF := ~low:1[let $1 = #8695 >> 4 ^ #8695 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40639E
0003f09d: SF := high:1[#8695]
.address 0x40639E
0003f0a0: ZF := 0 = #8695
.address 0x4063A1
0003f0a9: when ~ZF goto %0003f036
0004472d: goto %0003f002

.address 0x4063A3
0003f002: 
.address 0x4063A3
0003f012: RAX := 1
.address 0x4063A8
0003f019: goto %0003eee1

.address 0x4063BE
0003eee1: 
.address 0x4063BE
0003eeec: #8680 := low:32[RCX] - 4
.address 0x4063BE
0003eeef: CF := low:32[RCX] < 4
.address 0x4063BE
0003eef2: OF := high:1[(low:32[RCX] ^ 4) & (low:32[RCX] ^ #8680)]
.address 0x4063BE
0003eef5: AF := 0x10 = (0x10 & (#8680 ^ low:32[RCX] ^ 4))
.address 0x4063BE
0003eef8: PF := ~low:1[let $1 = #8680 >> 4 ^ #8680 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4063BE
0003eefb: SF := high:1[#8680]
.address 0x4063BE
0003eefe: ZF := 0 = #8680
.address 0x4063C1
0003ef05: RDX := 0
.address 0x4063C6
0003ef0c: RDX := pad:64[if ZF then mem[0x621334, el]:u32 else low:32[RDX]]
.address 0x4063CD
0003ef13: RAX := extend:64[low:32[RAX]]
.address 0x4063CF
0003ef1a: R8 := pad:64[pad:32[mem[0x6212F4]]]
.address 0x4063D7
0003ef29: #8682 := low:32[RDX]
.address 0x4063D7
0003ef2c: #8683 := low:32[RCX]
.address 0x4063D7
0003ef2f: RDX := pad:64[low:32[RDX] + #8683]
.address 0x4063D7
0003ef32: CF := low:32[RDX] < #8682
.address 0x4063D7
0003ef35: OF := high:1[#8682] = high:1[#8683] & (high:1[#8682] | high:1[low:32[RDX]]) & ~(
high:1[#8682] & high:1[low:32[RDX]])
.address 0x4063D7
0003ef38: AF := 0x10 = (0x10 & (low:32[RDX] ^ #8682 ^ #8683))
.address 0x4063D7
0003ef3b: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4063D7
0003ef3e: SF := high:1[low:32[RDX]]
.address 0x4063D7
0003ef41: ZF := 0 = low:32[RDX]
.address 0x4063D9
0003ef48: RDX := low:64[RAX + (RDX << 1)]
.address 0x4063DD
0003ef4f: RAX := pad:64[pad:32[mem[0x62132F]]]
.address 0x4063E4
0003ef56: RAX := low:64[RAX + (RDX << 1)]
.address 0x4063E8
0003ef5d: RDX := low:64[R8 + (RAX << 1)]
.address 0x4063EC
0003ef64: RAX := 0x61F000
.address 0x4063F3
0003ef6b: RDX := mem[RAX + (RDX << 3), el]:u64
.address 0x4063F7
0003ef74: RSP := RSP - 8
.address 0x4063F7
0003ef77: mem := mem with [RSP, el]:u64 <- 0x4063FC
.address 0x4063F7
0003ef7a: call @sub_4105e0 with return %0003ee61

.address 0x4063FC
0003ee61: 
.address 0x4063FC
0003ee72: RBX := mem[RSP, el]:u64
.address 0x4063FC
0003ee75: RSP := RSP + 8
.address 0x4063FD
0003ee7e: #8677 := mem[RSP, el]:u64
.address 0x4063FD
0003ee81: RSP := RSP + 8
.address 0x4063FD
0003ee85: call #8677 with noreturn


.address 0x406490
00043e7c: sub sub_406490()
.address 0x406490
0002a7b1: 
.address 0x406490
0002a7b8: #5873 := RBP
.address 0x406490
0002a7bb: RSP := RSP - 8
.address 0x406490
0002a7be: mem := mem with [RSP, el]:u64 <- #5873
.address 0x406491
0002a7c7: #5874 := RBX
.address 0x406491
0002a7ca: RSP := RSP - 8
.address 0x406491
0002a7cd: mem := mem with [RSP, el]:u64 <- #5874
.address 0x406492
0002a7d4: RBP := RSI
.address 0x406495
0002a7db: RBX := RDI
.address 0x406498
0002a7e9: #5875 := RSP
.address 0x406498
0002a7ec: RSP := RSP - 8
.address 0x406498
0002a7ef: CF := #5875 < 8
.address 0x406498
0002a7f2: OF := high:1[(#5875 ^ 8) & (#5875 ^ RSP)]
.address 0x406498
0002a7f5: AF := 0x10 = (0x10 & (RSP ^ #5875 ^ 8))
.address 0x406498
0002a7f8: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x406498
0002a7fb: SF := high:1[RSP]
.address 0x406498
0002a7fe: ZF := 0 = RSP
.address 0x40649C
0002a807: RSP := RSP - 8
.address 0x40649C
0002a80a: mem := mem with [RSP, el]:u64 <- 0x4064A1
.address 0x40649C
0002a80d: call @sub_4037f0 with return %0002a80f

.address 0x4064A1
0002a80f: 
.address 0x4064A1
0002a814: mem := mem with [RAX, el]:u32 <- 0
.address 0x4064A7
0002a822: #5878 := RSP
.address 0x4064A7
0002a825: RSP := RSP + 8
.address 0x4064A7
0002a828: CF := RSP < #5878
.address 0x4064A7
0002a82b: OF := ~high:1[#5878] & (high:1[#5878] | high:1[RSP]) & ~(high:1[#5878] & high:1[RSP])
.address 0x4064A7
0002a82e: AF := 0x10 = (0x10 & (RSP ^ #5878 ^ 8))
.address 0x4064A7
0002a831: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4064A7
0002a834: SF := high:1[RSP]
.address 0x4064A7
0002a837: ZF := 0 = RSP
.address 0x4064AB
0002a83e: RSI := RBP
.address 0x4064AE
0002a845: RDI := RBX
.address 0x4064B1
0002a84d: RBX := mem[RSP, el]:u64
.address 0x4064B1
0002a850: RSP := RSP + 8
.address 0x4064B2
0002a858: RBP := mem[RSP, el]:u64
.address 0x4064B2
0002a85b: RSP := RSP + 8
.address 0x4064B3
0002a862: goto %0000088f

.address 0x403C50
0000088f: 
.address 0x403C50
00000895: call mem[0x61FEB8, el]:u64 with noreturn


.address 0x406530
00043e7d: sub sub_406530()
.address 0x406530
0002a908: 
.address 0x406530
0002a90d: RSI := mem[RSI, el]:u64
.address 0x406533
0002a914: RDI := mem[RDI, el]:u64
.address 0x406536
0002a91b: call @sub_406490 with noreturn


.address 0x406540
00043e7e: sub sub_406540()
.address 0x406540
0002a920: 
.address 0x406540
0002a925: RAX := RSI
.address 0x406543
0002a92c: RSI := mem[RDI, el]:u64
.address 0x406546
0002a933: RDI := mem[RAX, el]:u64
.address 0x406549
0002a93a: call @sub_406490 with noreturn


.address 0x406550
00043e7f: sub sub_406550()
.address 0x406550
0002a93f: 
.address 0x406550
0002a944: RAX := RSI
.address 0x406553
0002a94b: RSI := mem[RDI, el]:u64
.address 0x406556
0002a952: RDI := mem[RAX, el]:u64
.address 0x406559
0002a959: call @sub_40d3c0 with noreturn


.address 0x406560
00043e80: sub sub_406560()
.address 0x406560
0002a95e: 
.address 0x406560
0002a963: RSI := mem[RSI, el]:u64
.address 0x406563
0002a96a: RDI := mem[RDI, el]:u64
.address 0x406566
0002a971: call @sub_40d3c0 with noreturn


.address 0x406570
00043e81: sub sub_406570()
.address 0x406570
0002a976: 
.address 0x406570
0002a97d: #5887 := R15
.address 0x406570
0002a980: RSP := RSP - 8
.address 0x406570
0002a983: mem := mem with [RSP, el]:u64 <- #5887
.address 0x406572
0002a98c: #5888 := R14
.address 0x406572
0002a98f: RSP := RSP - 8
.address 0x406572
0002a992: mem := mem with [RSP, el]:u64 <- #5888
.address 0x406574
0002a999: R14 := RDI
.address 0x406577
0002a9a2: #5889 := R13
.address 0x406577
0002a9a5: RSP := RSP - 8
.address 0x406577
0002a9a8: mem := mem with [RSP, el]:u64 <- #5889
.address 0x406579
0002a9b1: #5890 := R12
.address 0x406579
0002a9b4: RSP := RSP - 8
.address 0x406579
0002a9b7: mem := mem with [RSP, el]:u64 <- #5890
.address 0x40657B
0002a9be: R13 := pad:64[pad:32[low:8[RSI]]]
0004472e: call @sub_40657f with noreturn


.address 0x40657F
00043e83: sub sub_40657f()
.address 0x40657F
0002a9c0: 
.address 0x40657F
0002a9c7: #5891 := RBP
.address 0x40657F
0002a9ca: RSP := RSP - 8
.address 0x40657F
0002a9cd: mem := mem with [RSP, el]:u64 <- #5891
.address 0x406580
0002a9d6: #5892 := RBX
.address 0x406580
0002a9d9: RSP := RSP - 8
.address 0x406580
0002a9dc: mem := mem with [RSP, el]:u64 <- #5892
.address 0x406581
0002a9ea: #5893 := RSP
.address 0x406581
0002a9ed: RSP := RSP - 8
.address 0x406581
0002a9f0: CF := #5893 < 8
.address 0x406581
0002a9f3: OF := high:1[(#5893 ^ 8) & (#5893 ^ RSP)]
.address 0x406581
0002a9f6: AF := 0x10 = (0x10 & (RSP ^ #5893 ^ 8))
.address 0x406581
0002a9f9: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x406581
0002a9fc: SF := high:1[RSP]
.address 0x406581
0002a9ff: ZF := 0 = RSP
.address 0x406585
0002aa0c: #5896 := RDI
.address 0x406585
0002aa0f: OF := 0
.address 0x406585
0002aa12: CF := 0
.address 0x406585
0002aa15: AF := unknown[bits]:u1
.address 0x406585
0002aa18: PF := ~low:1[let $1 = #5896 >> 4 ^ #5896 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406585
0002aa1b: SF := high:1[#5896]
.address 0x406585
0002aa1e: ZF := 0 = #5896
.address 0x406588
0002aa28: when ZF goto %0002aa22
0004472f: goto %0003ecbd

.address 0x40658A
0003ecbd: 
.address 0x40658A
0003ecc8: #8667 := mem[0x6213C8, el]:u64
.address 0x40658A
0003eccb: CF := mem[0x6213C8, el]:u64 < 0
.address 0x40658A
0003ecce: OF := high:1[mem[0x6213C8, el]:u64 & (mem[0x6213C8, el]:u64 ^ #8667)]
.address 0x40658A
0003ecd1: AF := 0x10 = (0x10 & (#8667 ^ mem[0x6213C8, el]:u64))
.address 0x40658A
0003ecd4: PF := ~low:1[let $1 = #8667 >> 4 ^ #8667 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40658A
0003ecd7: SF := high:1[#8667]
.address 0x40658A
0003ecda: ZF := 0 = #8667
.address 0x406592
0003ece3: when ZF goto %0002aa22
00044730: goto %0003ece9

.address 0x406594
0003ece9: 
.address 0x406594
0003ecee: RSI := RDI
.address 0x406597
0003ecfb: RDX := 0
.address 0x406597
0003ecfe: AF := unknown[bits]:u1
.address 0x406597
0003ed01: ZF := 1
.address 0x406597
0003ed04: PF := 1
.address 0x406597
0003ed07: OF := 0
.address 0x406597
0003ed0a: CF := 0
.address 0x406597
0003ed0d: SF := 0
.address 0x406599
0003ed1a: RDI := 0
.address 0x406599
0003ed1d: AF := unknown[bits]:u1
.address 0x406599
0003ed20: ZF := 1
.address 0x406599
0003ed23: PF := 1
.address 0x406599
0003ed26: OF := 0
.address 0x406599
0003ed29: CF := 0
.address 0x406599
0003ed2c: SF := 0
.address 0x40659B
0003ed35: RSP := RSP - 8
.address 0x40659B
0003ed38: mem := mem with [RSP, el]:u64 <- 0x4065A0
.address 0x40659B
0003ed3b: call @sub_405f80 with return %0002aa22

.address 0x4065A0
0002aa22: 
.address 0x4065A0
0002aa32: RBX := mem[0x6213B0, el]:u64
.address 0x4065A7
0002aa39: R12 := low:64[0xFFFFFFFFFFFFFFF8 + (RBX << 3)]
.address 0x4065AF
0002aa47: #5898 := RBX
.address 0x4065AF
0002aa4a: RBX := RBX - 1
.address 0x4065AF
0002aa4d: CF := #5898 < 1
.address 0x4065AF
0002aa50: OF := high:1[(#5898 ^ 1) & (#5898 ^ RBX)]
.address 0x4065AF
0002aa53: AF := 0x10 = (0x10 & (RBX ^ #5898 ^ 1))
.address 0x4065AF
0002aa56: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4065AF
0002aa59: SF := high:1[RBX]
.address 0x4065AF
0002aa5c: ZF := 0 = RBX
.address 0x4065B3
0002aa69: #5901 := RBX - 0xFFFFFFFFFFFFFFFF
.address 0x4065B3
0002aa6c: CF := RBX < 0xFFFFFFFFFFFFFFFF
.address 0x4065B3
0002aa6f: OF := high:1[(RBX ^ 0xFFFFFFFFFFFFFFFF) & (RBX ^ #5901)]
.address 0x4065B3
0002aa72: AF := 0x10 = (0x10 & (#5901 ^ RBX ^ 0xFFFFFFFFFFFFFFFF))
.address 0x4065B3
0002aa75: PF := ~low:1[let $1 = #5901 >> 4 ^ #5901 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4065B3
0002aa78: SF := high:1[#5901]
.address 0x4065B3
0002aa7b: ZF := 0 = #5901
.address 0x4065B7
0002aa85: when ZF goto %0002aa7f
00044731: goto %0003ecba

.address 0x4065B9
0003ecba: 
00044732: goto %0002b02a

.address 0x4065C0
0002b02a: 
.address 0x4065C0
0002b03a: RAX := mem[0x6213A0, el]:u64
.address 0x4065C7
0002b041: RBP := mem[RAX + R12, el]:u64
.address 0x4065CB
0002b048: RAX := pad:64[mem[RBP + 0xA8, el]:u32]
.address 0x4065D1
0002b055: #5948 := low:32[RAX] - 3
.address 0x4065D1
0002b058: CF := low:32[RAX] < 3
.address 0x4065D1
0002b05b: OF := high:1[(low:32[RAX] ^ 3) & (low:32[RAX] ^ #5948)]
.address 0x4065D1
0002b05e: AF := 0x10 = (0x10 & (#5948 ^ low:32[RAX] ^ 3))
.address 0x4065D1
0002b061: PF := ~low:1[let $1 = #5948 >> 4 ^ #5948 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4065D1
0002b064: SF := high:1[#5948]
.address 0x4065D1
0002b067: ZF := 0 = #5948
.address 0x4065D4
0002b070: when ZF goto %0002ab3c
00044733: goto %0002b076

.address 0x4065D6
0002b076: 
.address 0x4065D6
0002b081: #5950 := low:32[RAX] - 9
.address 0x4065D6
0002b084: CF := low:32[RAX] < 9
.address 0x4065D6
0002b087: OF := high:1[(low:32[RAX] ^ 9) & (low:32[RAX] ^ #5950)]
.address 0x4065D6
0002b08a: AF := 0x10 = (0x10 & (#5950 ^ low:32[RAX] ^ 9))
.address 0x4065D6
0002b08d: PF := ~low:1[let $1 = #5950 >> 4 ^ #5950 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4065D6
0002b090: SF := high:1[#5950]
.address 0x4065D6
0002b093: ZF := 0 = #5950
.address 0x4065D9
0002b09c: when ZF goto %0002ab3c
00044734: goto %0002afb8

.address 0x406640
0002ab3c: 
.address 0x406640
0002ab47: #5909 := R14
.address 0x406640
0002ab4a: OF := 0
.address 0x406640
0002ab4d: CF := 0
.address 0x406640
0002ab50: AF := unknown[bits]:u1
.address 0x406640
0002ab53: PF := ~low:1[let $1 = #5909 >> 4 ^ #5909 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406640
0002ab56: SF := high:1[#5909]
.address 0x406640
0002ab59: ZF := 0 = #5909
.address 0x406643
0002ab60: R15 := mem[RBP, el]:u64
.address 0x406647
0002ab6a: when ZF goto %0002ab64
00044735: goto %0003eb90

.address 0x406649
0003eb90: 
.address 0x406649
0003eb95: RDI := R15
.address 0x40664C
0003eb9e: RSP := RSP - 8
.address 0x40664C
0003eba1: mem := mem with [RSP, el]:u64 <- 0x406651
.address 0x40664C
0003eba4: call @sub_40ce10 with return %0003eba6

.address 0x406651
0003eba6: 
.address 0x406651
0003ebb1: #8655 := mem[RAX] - 0x2E
.address 0x406651
0003ebb4: CF := mem[RAX] < 0x2E
.address 0x406651
0003ebb7: OF := high:1[(mem[RAX] ^ 0x2E) & (mem[RAX] ^ #8655)]
.address 0x406651
0003ebba: AF := 0x10 = (0x10 & (#8655 ^ mem[RAX] ^ 0x2E))
.address 0x406651
0003ebbd: PF := ~low:1[let $1 = #8655 >> 4 ^ #8655 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406651
0003ebc0: SF := high:1[#8655]
.address 0x406651
0003ebc3: ZF := 0 = #8655
.address 0x406654
0003ebcc: when ZF goto %0002b0c5
00044736: goto %0002b16b

.address 0x4066B8
0002b0c5: 
.address 0x4066B8
0002b0d0: RDX := 0
.address 0x4066B8
0002b0d3: AF := unknown[bits]:u1
.address 0x4066B8
0002b0d6: ZF := 1
.address 0x4066B8
0002b0d9: PF := 1
.address 0x4066B8
0002b0dc: OF := 0
.address 0x4066B8
0002b0df: CF := 0
.address 0x4066B8
0002b0e2: SF := 0
.address 0x4066BA
0002b0ef: #5952 := mem[RAX + 1] - 0x2E
.address 0x4066BA
0002b0f2: CF := mem[RAX + 1] < 0x2E
.address 0x4066BA
0002b0f5: OF := high:1[(mem[RAX + 1] ^ 0x2E) & (mem[RAX + 1] ^ #5952)]
.address 0x4066BA
0002b0f8: AF := 0x10 = (0x10 & (#5952 ^ mem[RAX + 1] ^ 0x2E))
.address 0x4066BA
0002b0fb: PF := ~low:1[let $1 = #5952 >> 4 ^ #5952 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4066BA
0002b0fe: SF := high:1[#5952]
.address 0x4066BA
0002b101: ZF := 0 = #5952
.address 0x4066BE
0002b108: RDX := extract:63:8[RDX].pad:8[ZF]
.address 0x4066C1
0002b10f: RAX := pad:64[pad:32[mem[RAX + RDX + 1]]]
.address 0x4066C6
0002b11c: #5954 := low:8[RAX]
.address 0x4066C6
0002b11f: OF := 0
.address 0x4066C6
0002b122: CF := 0
.address 0x4066C6
0002b125: AF := unknown[bits]:u1
.address 0x4066C6
0002b128: PF := ~low:1[let $1 = #5954 >> 4 ^ #5954 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4066C6
0002b12b: SF := high:1[#5954]
.address 0x4066C6
0002b12e: ZF := 0 = #5954
.address 0x4066C8
0002b137: when ZF goto %0002afb8
00044737: goto %0002b13d

.address 0x4066CE
0002b13d: 
.address 0x4066CE
0002b148: #5956 := low:8[RAX] - 0x2F
.address 0x4066CE
0002b14b: CF := low:8[RAX] < 0x2F
.address 0x4066CE
0002b14e: OF := high:1[(low:8[RAX] ^ 0x2F) & (low:8[RAX] ^ #5956)]
.address 0x4066CE
0002b151: AF := 0x10 = (0x10 & (#5956 ^ low:8[RAX] ^ 0x2F))
.address 0x4066CE
0002b154: PF := ~low:1[let $1 = #5956 >> 4 ^ #5956 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4066CE
0002b157: SF := high:1[#5956]
.address 0x4066CE
0002b15a: ZF := 0 = #5956
.address 0x4066D0
0002b163: when ZF goto %0002afb8
00044738: goto %0002b169

.address 0x4066D6
0002b169: 
.address 0x4066D6
0002b16f: goto %0002b16b

.address 0x406656
0002b16b: 
.address 0x406656
0002b17b: #5958 := mem[R15] - 0x2F
.address 0x406656
0002b17e: CF := mem[R15] < 0x2F
.address 0x406656
0002b181: OF := high:1[(mem[R15] ^ 0x2F) & (mem[R15] ^ #5958)]
.address 0x406656
0002b184: AF := 0x10 = (0x10 & (#5958 ^ mem[R15] ^ 0x2F))
.address 0x406656
0002b187: PF := ~low:1[let $1 = #5958 >> 4 ^ #5958 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406656
0002b18a: SF := high:1[#5958]
.address 0x406656
0002b18d: ZF := 0 = #5958
.address 0x40665A
0002b196: when ZF goto %0002ab64
00044739: goto %0002b19c

.address 0x4066A0
0002ab64: 
.address 0x4066A0
0002ab74: RSI := mem[RBP + 8, el]:u64
.address 0x4066A4
0002ab7b: RDX := pad:64[low:32[R13]]
.address 0x4066A7
0002ab82: RDI := R15
.address 0x4066AA
0002ab8c: RSP := RSP - 8
.address 0x4066AA
0002ab8f: mem := mem with [RSP, el]:u64 <- 0x4066AF
.address 0x4066AA
0002ab92: call @sub_405f80 with return %0002af90

.address 0x4066AF
0002af90: 
.address 0x4066AF
0002af96: goto %0002af92

.address 0x40665C
0002b19c: 
.address 0x40665C
0002b1a1: RSI := R15
.address 0x40665F
0002b1ae: RDX := 0
.address 0x40665F
0002b1b1: AF := unknown[bits]:u1
.address 0x40665F
0002b1b4: ZF := 1
.address 0x40665F
0002b1b7: PF := 1
.address 0x40665F
0002b1ba: OF := 0
.address 0x40665F
0002b1bd: CF := 0
.address 0x40665F
0002b1c0: SF := 0
.address 0x406661
0002b1c7: RDI := R14
.address 0x406664
0002b1d0: RSP := RSP - 8
.address 0x406664
0002b1d3: mem := mem with [RSP, el]:u64 <- 0x406669
.address 0x406664
0002b1d6: call @sub_40d200 with return %0002b1d8

.address 0x406669
0002b1d8: 
.address 0x406669
0002b1dd: RSI := mem[RBP + 8, el]:u64
.address 0x40666D
0002b1e4: R15 := RAX
.address 0x406670
0002b1eb: RDI := RAX
.address 0x406673
0002b1f2: RDX := pad:64[low:32[R13]]
.address 0x406676
0002b1fb: RSP := RSP - 8
.address 0x406676
0002b1fe: mem := mem with [RSP, el]:u64 <- 0x40667B
.address 0x406676
0002b201: call @sub_405f80 with return %0002b203

.address 0x40667B
0002b203: 
.address 0x40667B
0002b208: RDI := R15
.address 0x40667E
0002b211: RSP := RSP - 8
.address 0x40667E
0002b214: mem := mem with [RSP, el]:u64 <- 0x406683
.address 0x40667E
0002b217: call @sub_403e70 with return %0002af92

.address 0x406683
0002af92: 
.address 0x406683
0002afa2: #5938 := mem[RBP + 0xA8, el]:u32 - 9
.address 0x406683
0002afa5: CF := mem[RBP + 0xA8, el]:u32 < 9
.address 0x406683
0002afa8: OF := high:1[(mem[RBP + 0xA8, el]:u32 ^ 9) & (mem[RBP + 0xA8, el]:u32 ^ #5938)]
.address 0x406683
0002afab: AF := 0x10 = (0x10 & (#5938 ^ mem[RBP + 0xA8, el]:u32 ^ 9))
.address 0x406683
0002afae: PF := ~low:1[let $1 = #5938 >> 4 ^ #5938 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406683
0002afb1: SF := high:1[#5938]
.address 0x406683
0002afb4: ZF := 0 = #5938
.address 0x40668A
0002afbe: when ~ZF goto %0002afb8
0004473a: goto %0002b0a2

.address 0x406690
0002b0a2: 
.address 0x406690
0002b0a7: RDI := RBP
.address 0x406693
0002b0b0: RSP := RSP - 8
.address 0x406693
0002b0b3: mem := mem with [RSP, el]:u64 <- 0x406698
.address 0x406693
0002b0b6: call @sub_406090 with return %0002b0b8

.address 0x406698
0002b0b8: 
.address 0x406698
0002b0bd: goto %0002afb8

.address 0x4065DB
0002afb8: 
.address 0x4065DB
0002afcf: #5940 := RBX
.address 0x4065DB
0002afd2: RBX := RBX - 1
.address 0x4065DB
0002afd5: CF := #5940 < 1
.address 0x4065DB
0002afd8: OF := high:1[(#5940 ^ 1) & (#5940 ^ RBX)]
.address 0x4065DB
0002afdb: AF := 0x10 = (0x10 & (RBX ^ #5940 ^ 1))
.address 0x4065DB
0002afde: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4065DB
0002afe1: SF := high:1[RBX]
.address 0x4065DB
0002afe4: ZF := 0 = RBX
.address 0x4065DF
0002aff2: #5943 := R12
.address 0x4065DF
0002aff5: R12 := R12 - 8
.address 0x4065DF
0002aff8: CF := #5943 < 8
.address 0x4065DF
0002affb: OF := high:1[(#5943 ^ 8) & (#5943 ^ R12)]
.address 0x4065DF
0002affe: AF := 0x10 = (0x10 & (R12 ^ #5943 ^ 8))
.address 0x4065DF
0002b001: PF := ~low:1[let $1 = R12 >> 4 ^ R12 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4065DF
0002b004: SF := high:1[R12]
.address 0x4065DF
0002b007: ZF := 0 = R12
.address 0x4065E3
0002b014: #5946 := RBX - 0xFFFFFFFFFFFFFFFF
.address 0x4065E3
0002b017: CF := RBX < 0xFFFFFFFFFFFFFFFF
.address 0x4065E3
0002b01a: OF := high:1[(RBX ^ 0xFFFFFFFFFFFFFFFF) & (RBX ^ #5946)]
.address 0x4065E3
0002b01d: AF := 0x10 = (0x10 & (#5946 ^ RBX ^ 0xFFFFFFFFFFFFFFFF))
.address 0x4065E3
0002b020: PF := ~low:1[let $1 = #5946 >> 4 ^ #5946 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4065E3
0002b023: SF := high:1[#5946]
.address 0x4065E3
0002b026: ZF := 0 = #5946
.address 0x4065E7
0002b030: when ~ZF goto %0002b02a
0004473b: goto %0002aa7f

.address 0x4065E9
0002aa7f: 
.address 0x4065E9
0002aa8f: RDX := mem[0x6213B0, el]:u64
.address 0x4065F0
0002aa9c: #5903 := RDX
.address 0x4065F0
0002aa9f: OF := 0
.address 0x4065F0
0002aaa2: CF := 0
.address 0x4065F0
0002aaa5: AF := unknown[bits]:u1
.address 0x4065F0
0002aaa8: PF := ~low:1[let $1 = #5903 >> 4 ^ #5903 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4065F0
0002aaab: SF := high:1[#5903]
.address 0x4065F0
0002aaae: ZF := 0 = #5903
.address 0x4065F3
0002aab8: when ZF call @sub_406628 with noreturn
0004473c: goto %0003ebd2

.address 0x4065F5
0003ebd2: 
.address 0x4065F5
0003ebd7: RSI := mem[0x6213A0, el]:u64
.address 0x4065FC
0003ebde: RDI := low:64[RSI + (RDX << 3)]
0004473d: call @sub_406600 with noreturn


.address 0x406600
00043e93: sub sub_406600()
.address 0x406600
0003ebe0: 
.address 0x406600
0003ebe5: RAX := RSI
.address 0x406603
0003ebf2: RDX := 0
.address 0x406603
0003ebf5: AF := unknown[bits]:u1
.address 0x406603
0003ebf8: ZF := 1
.address 0x406603
0003ebfb: PF := 1
.address 0x406603
0003ebfe: OF := 0
.address 0x406603
0003ec01: CF := 0
.address 0x406603
0003ec04: SF := 0
0004473e: goto %0003ec09

.address 0x406608
0003ec09: 
.address 0x406608
0003ec0e: RCX := mem[RAX, el]:u64
.address 0x40660B
0003ec1b: #8657 := mem[RCX + 0xA8, el]:u32 - 9
.address 0x40660B
0003ec1e: CF := mem[RCX + 0xA8, el]:u32 < 9
.address 0x40660B
0003ec21: OF := high:1[(mem[RCX + 0xA8, el]:u32 ^ 9) & (mem[RCX + 0xA8, el]:u32 ^ #8657)]
.address 0x40660B
0003ec24: AF := 0x10 = (0x10 & (#8657 ^ mem[RCX + 0xA8, el]:u32 ^ 9))
.address 0x40660B
0003ec27: PF := ~low:1[let $1 = #8657 >> 4 ^ #8657 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40660B
0003ec2a: SF := high:1[#8657]
.address 0x40660B
0003ec2d: ZF := 0 = #8657
.address 0x406612
0003ec34: mem := mem with [RSI + (RDX << 3), el]:u64 <- RCX
.address 0x406616
0003ec3b: RCX := extract:63:8[RCX].pad:8[~ZF]
.address 0x406619
0003ec49: #8659 := RAX
.address 0x406619
0003ec4c: RAX := RAX + 8
.address 0x406619
0003ec4f: CF := RAX < #8659
.address 0x406619
0003ec52: OF := ~high:1[#8659] & (high:1[#8659] | high:1[RAX]) & ~(high:1[#8659] & high:1[RAX])
.address 0x406619
0003ec55: AF := 0x10 = (0x10 & (RAX ^ #8659 ^ 8))
.address 0x406619
0003ec58: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x406619
0003ec5b: SF := high:1[RAX]
.address 0x406619
0003ec5e: ZF := 0 = RAX
.address 0x40661D
0003ec65: RCX := pad:64[pad:32[low:8[RCX]]]
.address 0x406620
0003ec74: #8662 := RDX
.address 0x406620
0003ec77: #8663 := RCX
.address 0x406620
0003ec7a: RDX := RDX + #8663
.address 0x406620
0003ec7d: CF := RDX < #8662
.address 0x406620
0003ec80: OF := high:1[#8662] = high:1[#8663] & (high:1[#8662] | high:1[RDX]) & ~(
high:1[#8662] & high:1[RDX])
.address 0x406620
0003ec83: AF := 0x10 = (0x10 & (RDX ^ #8662 ^ #8663))
.address 0x406620
0003ec86: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x406620
0003ec89: SF := high:1[RDX]
.address 0x406620
0003ec8c: ZF := 0 = RDX
.address 0x406623
0003ec99: #8665 := RDI - RAX
.address 0x406623
0003ec9c: CF := RDI < RAX
.address 0x406623
0003ec9f: OF := high:1[(RDI ^ RAX) & (RDI ^ #8665)]
.address 0x406623
0003eca2: AF := 0x10 = (0x10 & (#8665 ^ RDI ^ RAX))
.address 0x406623
0003eca5: PF := ~low:1[let $1 = #8665 >> 4 ^ #8665 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406623
0003eca8: SF := high:1[#8665]
.address 0x406623
0003ecab: ZF := 0 = #8665
.address 0x406626
0003ecb4: when ~ZF goto %0003ec09
0004473f: call @sub_406628 with noreturn


.address 0x406628
00043e96: sub sub_406628()
.address 0x406628
0002aab2: 
.address 0x406628
0002aac2: mem := mem with [0x6213B0, el]:u64 <- RDX
.address 0x40662F
0002aad0: #5905 := RSP
.address 0x40662F
0002aad3: RSP := RSP + 8
.address 0x40662F
0002aad6: CF := RSP < #5905
.address 0x40662F
0002aad9: OF := ~high:1[#5905] & (high:1[#5905] | high:1[RSP]) & ~(high:1[#5905] & high:1[RSP])
.address 0x40662F
0002aadc: AF := 0x10 = (0x10 & (RSP ^ #5905 ^ 8))
.address 0x40662F
0002aadf: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40662F
0002aae2: SF := high:1[RSP]
.address 0x40662F
0002aae5: ZF := 0 = RSP
.address 0x406633
0002aaed: RBX := mem[RSP, el]:u64
.address 0x406633
0002aaf0: RSP := RSP + 8
.address 0x406634
0002aaf8: RBP := mem[RSP, el]:u64
.address 0x406634
0002aafb: RSP := RSP + 8
.address 0x406635
0002ab03: R12 := mem[RSP, el]:u64
.address 0x406635
0002ab06: RSP := RSP + 8
.address 0x406637
0002ab0e: R13 := mem[RSP, el]:u64
.address 0x406637
0002ab11: RSP := RSP + 8
.address 0x406639
0002ab19: R14 := mem[RSP, el]:u64
.address 0x406639
0002ab1c: RSP := RSP + 8
.address 0x40663B
0002ab24: R15 := mem[RSP, el]:u64
.address 0x40663B
0002ab27: RSP := RSP + 8
.address 0x40663D
0002ab30: #5908 := mem[RSP, el]:u64
.address 0x40663D
0002ab33: RSP := RSP + 8
.address 0x40663D
0002ab37: call #5908 with noreturn


.address 0x4066E0
00043e97: sub sub_4066e0()
.address 0x4066E0
0002b21c: 
.address 0x4066E0
0002b227: #5960 := RDI - RSI
.address 0x4066E0
0002b22a: CF := RDI < RSI
.address 0x4066E0
0002b22d: OF := high:1[(RDI ^ RSI) & (RDI ^ #5960)]
.address 0x4066E0
0002b230: AF := 0x10 = (0x10 & (#5960 ^ RDI ^ RSI))
.address 0x4066E0
0002b233: PF := ~low:1[let $1 = #5960 >> 4 ^ #5960 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4066E0
0002b236: SF := high:1[#5960]
.address 0x4066E0
0002b239: ZF := 0 = #5960
.address 0x4066E3
0002b243: when ~CF goto %0002b23d
00044740: goto %0003eb4b

.address 0x406788
0002b23d: 
.address 0x406788
0002b24f: #5962 := mem[RSP, el]:u64
.address 0x406788
0002b252: RSP := RSP + 8
.address 0x406788
0002b256: call #5962 with noreturn

.address 0x4066E9
0003eb4b: 
.address 0x4066E9
0003eb52: #8652 := R12
.address 0x4066E9
0003eb55: RSP := RSP - 8
.address 0x4066E9
0003eb58: mem := mem with [RSP, el]:u64 <- #8652
.address 0x4066EB
0003eb5f: R12 := RSI
.address 0x4066EE
0003eb68: #8653 := RBP
.address 0x4066EE
0003eb6b: RSP := RSP - 8
.address 0x4066EE
0003eb6e: mem := mem with [RSP, el]:u64 <- #8653
.address 0x4066EF
0003eb77: #8654 := RBX
.address 0x4066EF
0003eb7a: RSP := RSP - 8
.address 0x4066EF
0003eb7d: mem := mem with [RSP, el]:u64 <- #8654
.address 0x4066F0
0003eb84: RBX := RDI
.address 0x4066F3
0003eb8b: goto %0002b3f6

.address 0x406736
0002b3f6: 
.address 0x406736
0002b406: RCX := mem[0x6212C0, el]:u64
.address 0x40673D
0002b40d: RDI := mem[0x620288, el]:u64
.address 0x406744
0002b414: RBP := low:64[RBX + 1]
.address 0x406748
0002b421: #5979 := RCX
.address 0x406748
0002b424: OF := 0
.address 0x406748
0002b427: CF := 0
.address 0x406748
0002b42a: AF := unknown[bits]:u1
.address 0x406748
0002b42d: PF := ~low:1[let $1 = #5979 >> 4 ^ #5979 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406748
0002b430: SF := high:1[#5979]
.address 0x406748
0002b433: ZF := 0 = #5979
.address 0x40674B
0002b43a: RSI := mem[RDI + 0x28, el]:u64
.address 0x40674F
0002b441: R8 := mem[RDI + 0x30, el]:u64
.address 0x406753
0002b44b: when ~ZF goto %0002b445
00044741: goto %0002b572

.address 0x4066F8
0002b445: 
.address 0x4066F8
0002b45b: RDX := 0
.address 0x4066F8
0002b45e: AF := unknown[bits]:u1
.address 0x4066F8
0002b461: ZF := 1
.address 0x4066F8
0002b464: PF := 1
.address 0x4066F8
0002b467: OF := 0
.address 0x4066F8
0002b46a: CF := 0
.address 0x4066F8
0002b46d: SF := 0
.address 0x4066FA
0002b474: RAX := R12
.address 0x4066FD
0002b48d: #5982 := pad:128[RCX]
.address 0x4066FD
0002b4cc: goto %0002b48f

0002b4a6: 
.address 0x4066FD
0002b4a7: call %0000737f with noreturn

0002b49c: 
.address 0x4066FD
0002b49d: #5985 := low:64[#5984].low:64[#5983]
.address 0x4066FD
0002b4a0: RAX := extract:63:0[#5985]
.address 0x4066FD
0002b4a3: RDX := extract:127:64[#5985]
.address 0x4066FD
0002b4ad: goto %0002b4aa

0002b4a9: 
.address 0x4066FD
0002b4ab: when high:64[#5983] = 0 goto %0002b49c
.address 0x4066FD
0002b4ac: goto %0002b4a6

0002b499: 
.address 0x4066FD
0002b49a: #5984 := #5981 % #5982
.address 0x4066FD
0002b4b0: goto %0002b4a9

0002b496: 
.address 0x4066FD
0002b497: #5983 := #5981 / #5982
.address 0x4066FD
0002b4b1: goto %0002b499

0002b4aa: 
.address 0x4066FD
0002b4b7: goto %0002b4b3

0002b492: 
.address 0x4066FD
0002b493: call %0000737f with noreturn

0002b4b2: 
.address 0x4066FD
0002b4b4: when #5982 = 0 goto %0002b492
.address 0x4066FD
0002b4b5: goto %0002b496

0002b48f: 
.address 0x4066FD
0002b490: #5981 := RDX.RAX
.address 0x4066FD
0002b4cb: goto %0002b4b2

0002b4b3: 
.address 0x4066FD
0002b4ba: CF := unknown[bits]:u1
.address 0x4066FD
0002b4bd: OF := unknown[bits]:u1
.address 0x4066FD
0002b4c0: SF := unknown[bits]:u1
.address 0x4066FD
0002b4c3: ZF := unknown[bits]:u1
.address 0x4066FD
0002b4c6: AF := unknown[bits]:u1
.address 0x4066FD
0002b4c9: PF := unknown[bits]:u1
00044742: goto %0002b4cd

.address 0x406700
0002b4cd: 
.address 0x406700
0002b4d8: RDX := 0
.address 0x406700
0002b4db: AF := unknown[bits]:u1
.address 0x406700
0002b4de: ZF := 1
.address 0x406700
0002b4e1: PF := 1
.address 0x406700
0002b4e4: OF := 0
.address 0x406700
0002b4e7: CF := 0
.address 0x406700
0002b4ea: SF := 0
.address 0x406702
0002b4f1: R9 := RAX
.address 0x406705
0002b4f8: RAX := RBP
.address 0x406708
0002b511: #5987 := pad:128[RCX]
.address 0x406708
0002b550: goto %0002b513

0002b52a: 
.address 0x406708
0002b52b: call %0000737f with noreturn

0002b520: 
.address 0x406708
0002b521: #5990 := low:64[#5989].low:64[#5988]
.address 0x406708
0002b524: RAX := extract:63:0[#5990]
.address 0x406708
0002b527: RDX := extract:127:64[#5990]
.address 0x406708
0002b531: goto %0002b52e

0002b52d: 
.address 0x406708
0002b52f: when high:64[#5988] = 0 goto %0002b520
.address 0x406708
0002b530: goto %0002b52a

0002b51d: 
.address 0x406708
0002b51e: #5989 := #5986 % #5987
.address 0x406708
0002b534: goto %0002b52d

0002b51a: 
.address 0x406708
0002b51b: #5988 := #5986 / #5987
.address 0x406708
0002b535: goto %0002b51d

0002b52e: 
.address 0x406708
0002b53b: goto %0002b537

0002b516: 
.address 0x406708
0002b517: call %0000737f with noreturn

0002b536: 
.address 0x406708
0002b538: when #5987 = 0 goto %0002b516
.address 0x406708
0002b539: goto %0002b51a

0002b513: 
.address 0x406708
0002b514: #5986 := RDX.RAX
.address 0x406708
0002b54f: goto %0002b536

0002b537: 
.address 0x406708
0002b53e: CF := unknown[bits]:u1
.address 0x406708
0002b541: OF := unknown[bits]:u1
.address 0x406708
0002b544: SF := unknown[bits]:u1
.address 0x406708
0002b547: ZF := unknown[bits]:u1
.address 0x406708
0002b54a: AF := unknown[bits]:u1
.address 0x406708
0002b54d: PF := unknown[bits]:u1
00044743: goto %0002b551

.address 0x40670B
0002b551: 
.address 0x40670B
0002b55c: #5991 := R9 - RAX
.address 0x40670B
0002b55f: CF := R9 < RAX
.address 0x40670B
0002b562: OF := high:1[(R9 ^ RAX) & (R9 ^ #5991)]
.address 0x40670B
0002b565: AF := 0x10 = (0x10 & (#5991 ^ R9 ^ RAX))
.address 0x40670B
0002b568: PF := ~low:1[let $1 = #5991 >> 4 ^ #5991 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40670B
0002b56b: SF := high:1[#5991]
.address 0x40670B
0002b56e: ZF := 0 = #5991
.address 0x40670E
0002b578: when CF | ZF goto %0002b572
00044744: goto %0002b5be

.address 0x406755
0002b572: 
.address 0x406755
0002b588: #5993 := RSI - R8
.address 0x406755
0002b58b: CF := RSI < R8
.address 0x406755
0002b58e: OF := high:1[(RSI ^ R8) & (RSI ^ #5993)]
.address 0x406755
0002b591: AF := 0x10 = (0x10 & (#5993 ^ RSI ^ R8))
.address 0x406755
0002b594: PF := ~low:1[let $1 = #5993 >> 4 ^ #5993 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406755
0002b597: SF := high:1[#5993]
.address 0x406755
0002b59a: ZF := 0 = #5993
.address 0x406758
0002b5a3: when ~CF goto %0002b3b1
00044745: goto %0002b5a9

.address 0x406778
0002b3b1: 
.address 0x406778
0002b3b6: RSI := 0x20
.address 0x40677D
0002b3bf: RSP := RSP - 8
.address 0x40677D
0002b3c2: mem := mem with [RSP, el]:u64 <- 0x406782
.address 0x40677D
0002b3c5: call @sub_4039d0 with return %0002b3c7

.address 0x406782
0002b3c7: 
.address 0x406782
0002b3cd: goto %0002b3c9

.address 0x40675A
0002b5a9: 
.address 0x40675A
0002b5ae: RAX := low:64[RSI + 1]
.address 0x40675E
0002b5b5: mem := mem with [RDI + 0x28, el]:u64 <- RAX
.address 0x406762
0002b5bc: mem := mem with [RSI] <- 0x20
00044746: goto %0002b3c9

.address 0x406765
0002b3c9: 
.address 0x406765
0002b3d3: RBX := RBP
.address 0x406768
0002b3e0: #5977 := RBX - R12
.address 0x406768
0002b3e3: CF := RBX < R12
.address 0x406768
0002b3e6: OF := high:1[(RBX ^ R12) & (RBX ^ #5977)]
.address 0x406768
0002b3e9: AF := 0x10 = (0x10 & (#5977 ^ RBX ^ R12))
.address 0x406768
0002b3ec: PF := ~low:1[let $1 = #5977 >> 4 ^ #5977 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406768
0002b3ef: SF := high:1[#5977]
.address 0x406768
0002b3f2: ZF := 0 = #5977
.address 0x40676B
0002b3fc: when CF goto %0002b3f6
00044747: goto %0002b372

.address 0x406710
0002b5be: 
.address 0x406710
0002b5c9: #5995 := RSI - R8
.address 0x406710
0002b5cc: CF := RSI < R8
.address 0x406710
0002b5cf: OF := high:1[(RSI ^ R8) & (RSI ^ #5995)]
.address 0x406710
0002b5d2: AF := 0x10 = (0x10 & (#5995 ^ RSI ^ R8))
.address 0x406710
0002b5d5: PF := ~low:1[let $1 = #5995 >> 4 ^ #5995 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406710
0002b5d8: SF := high:1[#5995]
.address 0x406710
0002b5db: ZF := 0 = #5995
.address 0x406713
0002b5e4: when ~CF goto %0002b25b
00044748: goto %0002b5ea

.address 0x406790
0002b25b: 
.address 0x406790
0002b260: RSI := 9
.address 0x406795
0002b269: RSP := RSP - 8
.address 0x406795
0002b26c: mem := mem with [RSP, el]:u64 <- 0x40679A
.address 0x406795
0002b26f: call @sub_4039d0 with return %0002b271

.address 0x40679A
0002b271: 
.address 0x40679A
0002b276: RCX := mem[0x6212C0, el]:u64
.address 0x4067A1
0002b27e: goto %0002b27a

.address 0x406715
0002b5ea: 
.address 0x406715
0002b5ef: RAX := low:64[RSI + 1]
.address 0x406719
0002b5f6: mem := mem with [RDI + 0x28, el]:u64 <- RAX
.address 0x40671D
0002b5fd: mem := mem with [RSI] <- 9
00044749: goto %0002b27a

.address 0x406720
0002b27a: 
.address 0x406720
0002b284: RAX := RBX
.address 0x406723
0002b291: RDX := 0
.address 0x406723
0002b294: AF := unknown[bits]:u1
.address 0x406723
0002b297: ZF := 1
.address 0x406723
0002b29a: PF := 1
.address 0x406723
0002b29d: OF := 0
.address 0x406723
0002b2a0: CF := 0
.address 0x406723
0002b2a3: SF := 0
.address 0x406725
0002b2bc: #5964 := pad:128[RCX]
.address 0x406725
0002b2fb: goto %0002b2be

0002b2d5: 
.address 0x406725
0002b2d6: call %0000737f with noreturn

0002b2cb: 
.address 0x406725
0002b2cc: #5967 := low:64[#5966].low:64[#5965]
.address 0x406725
0002b2cf: RAX := extract:63:0[#5967]
.address 0x406725
0002b2d2: RDX := extract:127:64[#5967]
.address 0x406725
0002b2dc: goto %0002b2d9

0002b2d8: 
.address 0x406725
0002b2da: when high:64[#5965] = 0 goto %0002b2cb
.address 0x406725
0002b2db: goto %0002b2d5

0002b2c8: 
.address 0x406725
0002b2c9: #5966 := #5963 % #5964
.address 0x406725
0002b2df: goto %0002b2d8

0002b2c5: 
.address 0x406725
0002b2c6: #5965 := #5963 / #5964
.address 0x406725
0002b2e0: goto %0002b2c8

0002b2d9: 
.address 0x406725
0002b2e6: goto %0002b2e2

0002b2c1: 
.address 0x406725
0002b2c2: call %0000737f with noreturn

0002b2e1: 
.address 0x406725
0002b2e3: when #5964 = 0 goto %0002b2c1
.address 0x406725
0002b2e4: goto %0002b2c5

0002b2be: 
.address 0x406725
0002b2bf: #5963 := RDX.RAX
.address 0x406725
0002b2fa: goto %0002b2e1

0002b2e2: 
.address 0x406725
0002b2e9: CF := unknown[bits]:u1
.address 0x406725
0002b2ec: OF := unknown[bits]:u1
.address 0x406725
0002b2ef: SF := unknown[bits]:u1
.address 0x406725
0002b2f2: ZF := unknown[bits]:u1
.address 0x406725
0002b2f5: AF := unknown[bits]:u1
.address 0x406725
0002b2f8: PF := unknown[bits]:u1
0004474a: goto %0002b2fc

.address 0x406728
0002b2fc: 
.address 0x406728
0002b309: #5968 := RCX
.address 0x406728
0002b30c: #5969 := RBX
.address 0x406728
0002b30f: RCX := RCX + #5969
.address 0x406728
0002b312: CF := RCX < #5968
.address 0x406728
0002b315: OF := high:1[#5968] = high:1[#5969] & (high:1[#5968] | high:1[RCX]) & ~(
high:1[#5968] & high:1[RCX])
.address 0x406728
0002b318: AF := 0x10 = (0x10 & (RCX ^ #5968 ^ #5969))
.address 0x406728
0002b31b: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x406728
0002b31e: SF := high:1[RCX]
.address 0x406728
0002b321: ZF := 0 = RCX
.address 0x40672B
0002b328: RBX := RCX
.address 0x40672E
0002b337: #5971 := RBX
.address 0x40672E
0002b33a: #5972 := RDX
.address 0x40672E
0002b33d: RBX := RBX - RDX
.address 0x40672E
0002b340: CF := #5971 < #5972
.address 0x40672E
0002b343: OF := high:1[(#5971 ^ #5972) & (#5971 ^ RBX)]
.address 0x40672E
0002b346: AF := 0x10 = (0x10 & (RBX ^ #5971 ^ #5972))
.address 0x40672E
0002b349: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40672E
0002b34c: SF := high:1[RBX]
.address 0x40672E
0002b34f: ZF := 0 = RBX
.address 0x406731
0002b35c: #5974 := RBX - R12
.address 0x406731
0002b35f: CF := RBX < R12
.address 0x406731
0002b362: OF := high:1[(RBX ^ R12) & (RBX ^ #5974)]
.address 0x406731
0002b365: AF := 0x10 = (0x10 & (#5974 ^ RBX ^ R12))
.address 0x406731
0002b368: PF := ~low:1[let $1 = #5974 >> 4 ^ #5974 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406731
0002b36b: SF := high:1[#5974]
.address 0x406731
0002b36e: ZF := 0 = #5974
.address 0x406734
0002b378: when ~CF goto %0002b372
0004474b: goto %0002b3f6

.address 0x40676D
0002b372: 
.address 0x40676D
0002b383: RBX := mem[RSP, el]:u64
.address 0x40676D
0002b386: RSP := RSP + 8
.address 0x40676E
0002b38e: RBP := mem[RSP, el]:u64
.address 0x40676E
0002b391: RSP := RSP + 8
.address 0x40676F
0002b399: R12 := mem[RSP, el]:u64
.address 0x40676F
0002b39c: RSP := RSP + 8
.address 0x406771
0002b3a5: #5976 := mem[RSP, el]:u64
.address 0x406771
0002b3a8: RSP := RSP + 8
.address 0x406771
0002b3ac: call #5976 with noreturn


.address 0x4067B0
00043ea4: sub sub_4067b0()
.address 0x4067B0
0002b605: 
.address 0x4067B0
0002b60c: #5997 := R12
.address 0x4067B0
0002b60f: RSP := RSP - 8
.address 0x4067B0
0002b612: mem := mem with [RSP, el]:u64 <- #5997
.address 0x4067B2
0002b61b: #5998 := RBP
.address 0x4067B2
0002b61e: RSP := RSP - 8
.address 0x4067B2
0002b621: mem := mem with [RSP, el]:u64 <- #5998
.address 0x4067B3
0002b62a: #5999 := RBX
.address 0x4067B3
0002b62d: RSP := RSP - 8
.address 0x4067B3
0002b630: mem := mem with [RSP, el]:u64 <- #5999
.address 0x4067B4
0002b637: RAX := mem[RSI + 0x18, el]:u64
.address 0x4067B8
0002b63e: RBX := mem[RSI + 0x10, el]:u64
.address 0x4067BC
0002b645: RBP := RAX
.address 0x4067BF
0002b654: #6000 := RBP
.address 0x4067BF
0002b657: #6001 := RBX
.address 0x4067BF
0002b65a: RBP := RBP - RBX
.address 0x4067BF
0002b65d: CF := #6000 < #6001
.address 0x4067BF
0002b660: OF := high:1[(#6000 ^ #6001) & (#6000 ^ RBP)]
.address 0x4067BF
0002b663: AF := 0x10 = (0x10 & (RBP ^ #6000 ^ #6001))
.address 0x4067BF
0002b666: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4067BF
0002b669: SF := high:1[RBP]
.address 0x4067BF
0002b66c: ZF := 0 = RBP
.address 0x4067C2
0002b67a: #6003 := RBP
.address 0x4067C2
0002b67d: RBP := RBP >> 3
.address 0x4067C2
0002b680: CF := high:1[#6003 << 0x3D]
.address 0x4067C2
0002b683: SF := high:1[RBP]
.address 0x4067C2
0002b686: ZF := 0 = RBP
.address 0x4067C2
0002b689: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4067C2
0002b68c: AF := unknown[bits]:u1
.address 0x4067C2
0002b68f: OF := unknown[bits]:u1
.address 0x4067C6
0002b69c: #6005 := RBP
.address 0x4067C6
0002b69f: OF := 0
.address 0x4067C6
0002b6a2: CF := 0
.address 0x4067C6
0002b6a5: AF := unknown[bits]:u1
.address 0x4067C6
0002b6a8: PF := ~low:1[let $1 = #6005 >> 4 ^ #6005 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4067C6
0002b6ab: SF := high:1[#6005]
.address 0x4067C6
0002b6ae: ZF := 0 = #6005
.address 0x4067C9
0002b6b8: when ZF goto %0002b6b2
0004474c: goto %0003eb1f

.address 0x4067CF
0003eb1f: 
.address 0x4067CF
0003eb2a: #8650 := RAX - RBX
.address 0x4067CF
0003eb2d: CF := RAX < RBX
.address 0x4067CF
0003eb30: OF := high:1[(RAX ^ RBX) & (RAX ^ #8650)]
.address 0x4067CF
0003eb33: AF := 0x10 = (0x10 & (#8650 ^ RAX ^ RBX))
.address 0x4067CF
0003eb36: PF := ~low:1[let $1 = #8650 >> 4 ^ #8650 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4067CF
0003eb39: SF := high:1[#8650]
.address 0x4067CF
0003eb3c: ZF := 0 = #8650
.address 0x4067D2
0003eb45: when ZF goto %0003ea0f
0004474d: goto %0003ea30

.address 0x406862
0003ea0f: 
.address 0x406862
0003ea1a: mem := mem with [RSI + 0x50] <- mem[RSI + 0x50] | 2
.address 0x406862
0003ea1d: OF := 0
.address 0x406862
0003ea20: CF := 0
.address 0x406862
0003ea23: AF := unknown[bits]:u1
.address 0x406862
0003ea26: PF := ~low:1[let $1 = mem[RSI + 0x50] >> 4 ^ mem[RSI + 0x50] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406862
0003ea29: SF := high:1[mem[RSI + 0x50]]
.address 0x406862
0003ea2c: ZF := 0 = mem[RSI + 0x50]
.address 0x406866
0003ea34: goto %0003ea30

.address 0x4067D8
0003ea30: 
.address 0x4067D8
0003ea3a: RDX := mem[RSI + 0x30, el]:u64
.address 0x4067DC
0003ea41: RCX := mem[RSI + 0x20, el]:u64
.address 0x4067E0
0003ea50: #8638 := RAX
.address 0x4067E0
0003ea53: #8639 := RDX
.address 0x4067E0
0003ea56: RAX := RAX + #8639
.address 0x4067E0
0003ea59: CF := RAX < #8638
.address 0x4067E0
0003ea5c: OF := high:1[#8638] = high:1[#8639] & (high:1[#8638] | high:1[RAX]) & ~(
high:1[#8638] & high:1[RAX])
.address 0x4067E0
0003ea5f: AF := 0x10 = (0x10 & (RAX ^ #8638 ^ #8639))
.address 0x4067E0
0003ea62: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4067E0
0003ea65: SF := high:1[RAX]
.address 0x4067E0
0003ea68: ZF := 0 = RAX
.address 0x4067E3
0003ea6f: RDX := ~RDX
.address 0x4067E6
0003ea76: R8 := RCX
.address 0x4067E9
0003ea83: RAX := RAX & RDX
.address 0x4067E9
0003ea86: OF := 0
.address 0x4067E9
0003ea89: CF := 0
.address 0x4067E9
0003ea8c: AF := unknown[bits]:u1
.address 0x4067E9
0003ea8f: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4067E9
0003ea92: SF := high:1[RAX]
.address 0x4067E9
0003ea95: ZF := 0 = RAX
.address 0x4067EC
0003ea9c: RDX := mem[RSI + 8, el]:u64
.address 0x4067F0
0003eaa3: mem := mem with [RSI + 0x18, el]:u64 <- RAX
.address 0x4067F4
0003eab2: #8642 := R8
.address 0x4067F4
0003eab5: #8643 := RDX
.address 0x4067F4
0003eab8: R8 := R8 - RDX
.address 0x4067F4
0003eabb: CF := #8642 < #8643
.address 0x4067F4
0003eabe: OF := high:1[(#8642 ^ #8643) & (#8642 ^ R8)]
.address 0x4067F4
0003eac1: AF := 0x10 = (0x10 & (R8 ^ #8642 ^ #8643))
.address 0x4067F4
0003eac4: PF := ~low:1[let $1 = R8 >> 4 ^ R8 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4067F4
0003eac7: SF := high:1[R8]
.address 0x4067F4
0003eaca: ZF := 0 = R8
.address 0x4067F7
0003ead9: #8645 := RAX
.address 0x4067F7
0003eadc: #8646 := RDX
.address 0x4067F7
0003eadf: RAX := RAX - RDX
.address 0x4067F7
0003eae2: CF := #8645 < #8646
.address 0x4067F7
0003eae5: OF := high:1[(#8645 ^ #8646) & (#8645 ^ RAX)]
.address 0x4067F7
0003eae8: AF := 0x10 = (0x10 & (RAX ^ #8645 ^ #8646))
.address 0x4067F7
0003eaeb: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4067F7
0003eaee: SF := high:1[RAX]
.address 0x4067F7
0003eaf1: ZF := 0 = RAX
.address 0x4067FA
0003eafe: #8648 := RAX - R8
.address 0x4067FA
0003eb01: CF := RAX < R8
.address 0x4067FA
0003eb04: OF := high:1[(RAX ^ R8) & (RAX ^ #8648)]
.address 0x4067FA
0003eb07: AF := 0x10 = (0x10 & (#8648 ^ RAX ^ R8))
.address 0x4067FA
0003eb0a: PF := ~low:1[let $1 = #8648 >> 4 ^ #8648 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4067FA
0003eb0d: SF := high:1[#8648]
.address 0x4067FA
0003eb10: ZF := 0 = #8648
.address 0x4067FD
0003eb19: when ~(CF | ZF) goto %0002b6ee
0004474e: goto %0002b6f7

.address 0x40685C
0002b6ee: 
.address 0x40685C
0002b6f3: mem := mem with [RSI + 0x18, el]:u64 <- RCX
.address 0x406860
0002b6fb: goto %0002b6f7

.address 0x4067FF
0002b6f7: 
.address 0x4067FF
0002b701: RAX := mem[RSI + 0x18, el]:u64
.address 0x406803
0002b708: R12 := low:64[RBX + (RBP << 3)]
.address 0x406807
0002b70f: RBP := 0x417C23
.address 0x40680E
0002b716: mem := mem with [RSI + 0x10, el]:u64 <- RAX
.address 0x406812
0002b71d: RSI := mem[0x620288, el]:u64
.address 0x406819
0002b726: RSP := RSP - 8
.address 0x406819
0002b729: mem := mem with [RSP, el]:u64 <- 0x40681E
.address 0x406819
0002b72c: call @sub_403af0 with return %0002b72e

.address 0x40681E
0002b72e: 
0004474f: goto %0002b731

.address 0x406820
0002b731: 
.address 0x406820
0002b736: RDX := mem[RBX, el]:u64
.address 0x406823
0002b743: RAX := 0
.address 0x406823
0002b746: AF := unknown[bits]:u1
.address 0x406823
0002b749: ZF := 1
.address 0x406823
0002b74c: PF := 1
.address 0x406823
0002b74f: OF := 0
.address 0x406823
0002b752: CF := 0
.address 0x406823
0002b755: SF := 0
.address 0x406825
0002b75c: RSI := RBP
.address 0x406828
0002b763: RDI := 1
.address 0x40682D
0002b771: #6008 := RBX
.address 0x40682D
0002b774: RBX := RBX + 8
.address 0x40682D
0002b777: CF := RBX < #6008
.address 0x40682D
0002b77a: OF := ~high:1[#6008] & (high:1[#6008] | high:1[RBX]) & ~(high:1[#6008] & high:1[RBX])
.address 0x40682D
0002b77d: AF := 0x10 = (0x10 & (RBX ^ #6008 ^ 8))
.address 0x40682D
0002b780: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40682D
0002b783: SF := high:1[RBX]
.address 0x40682D
0002b786: ZF := 0 = RBX
.address 0x406831
0002b78f: RSP := RSP - 8
.address 0x406831
0002b792: mem := mem with [RSP, el]:u64 <- 0x406836
.address 0x406831
0002b795: call @sub_403cd0 with return %0002b797

.address 0x406836
0002b797: 
.address 0x406836
0002b7a2: #6011 := RBX - R12
.address 0x406836
0002b7a5: CF := RBX < R12
.address 0x406836
0002b7a8: OF := high:1[(RBX ^ R12) & (RBX ^ #6011)]
.address 0x406836
0002b7ab: AF := 0x10 = (0x10 & (#6011 ^ RBX ^ R12))
.address 0x406836
0002b7ae: PF := ~low:1[let $1 = #6011 >> 4 ^ #6011 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406836
0002b7b1: SF := high:1[#6011]
.address 0x406836
0002b7b4: ZF := 0 = #6011
.address 0x406839
0002b7bd: when ~ZF goto %0002b731
00044750: goto %0002b7c3

.address 0x40683B
0002b7c3: 
.address 0x40683B
0002b7c8: RDI := mem[0x620288, el]:u64
.address 0x406842
0002b7cf: RAX := mem[RDI + 0x28, el]:u64
.address 0x406846
0002b7dc: #6013 := RAX - mem[RDI + 0x30, el]:u64
.address 0x406846
0002b7df: CF := RAX < mem[RDI + 0x30, el]:u64
.address 0x406846
0002b7e2: OF := high:1[(RAX ^ mem[RDI + 0x30, el]:u64) & (RAX ^ #6013)]
.address 0x406846
0002b7e5: AF := 0x10 = (0x10 & (#6013 ^ RAX ^ mem[RDI + 0x30, el]:u64))
.address 0x406846
0002b7e8: PF := ~low:1[let $1 = #6013 >> 4 ^ #6013 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406846
0002b7eb: SF := high:1[#6013]
.address 0x406846
0002b7ee: ZF := 0 = #6013
.address 0x40684A
0002b7f8: when ~CF goto %0002b7f2
00044751: goto %0003e9fa

.address 0x40686B
0002b7f2: 
.address 0x40686B
0002b803: RBX := mem[RSP, el]:u64
.address 0x40686B
0002b806: RSP := RSP + 8
.address 0x40686C
0002b80e: RBP := mem[RSP, el]:u64
.address 0x40686C
0002b811: RSP := RSP + 8
.address 0x40686D
0002b819: R12 := mem[RSP, el]:u64
.address 0x40686D
0002b81c: RSP := RSP + 8
.address 0x40686F
0002b823: RSI := 0xA
.address 0x406874
0002b82a: call @sub_4039d0 with noreturn

.address 0x40684C
0003e9fa: 
.address 0x40684C
0003e9ff: RDX := low:64[RAX + 1]
.address 0x406850
0003ea06: mem := mem with [RDI + 0x28, el]:u64 <- RDX
.address 0x406854
0003ea0d: mem := mem with [RAX] <- 0xA
00044752: goto %0002b6b2

.address 0x406857
0002b6b2: 
.address 0x406857
0002b6c3: RBX := mem[RSP, el]:u64
.address 0x406857
0002b6c6: RSP := RSP + 8
.address 0x406858
0002b6ce: RBP := mem[RSP, el]:u64
.address 0x406858
0002b6d1: RSP := RSP + 8
.address 0x406859
0002b6d9: R12 := mem[RSP, el]:u64
.address 0x406859
0002b6dc: RSP := RSP + 8
.address 0x40685B
0002b6e5: #6007 := mem[RSP, el]:u64
.address 0x40685B
0002b6e8: RSP := RSP + 8
.address 0x40685B
0002b6ec: call #6007 with noreturn


.address 0x406880
00043eac: sub sub_406880()
.address 0x406880
0002b82f: 
.address 0x406880
0002b836: #6015 := RBP
.address 0x406880
0002b839: RSP := RSP - 8
.address 0x406880
0002b83c: mem := mem with [RSP, el]:u64 <- #6015
.address 0x406881
0002b845: #6016 := RBX
.address 0x406881
0002b848: RSP := RSP - 8
.address 0x406881
0002b84b: mem := mem with [RSP, el]:u64 <- #6016
.address 0x406882
0002b852: RBX := pad:64[low:32[RDX]]
.address 0x406884
0002b860: #6017 := RSP
.address 0x406884
0002b863: RSP := RSP - 8
.address 0x406884
0002b866: CF := #6017 < 8
.address 0x406884
0002b869: OF := high:1[(#6017 ^ 8) & (#6017 ^ RSP)]
.address 0x406884
0002b86c: AF := 0x10 = (0x10 & (RSP ^ #6017 ^ 8))
.address 0x406884
0002b86f: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x406884
0002b872: SF := high:1[RSP]
.address 0x406884
0002b875: ZF := 0 = RSP
.address 0x406888
0002b882: #6020 := RDI
.address 0x406888
0002b885: OF := 0
.address 0x406888
0002b888: CF := 0
.address 0x406888
0002b88b: AF := unknown[bits]:u1
.address 0x406888
0002b88e: PF := ~low:1[let $1 = #6020 >> 4 ^ #6020 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406888
0002b891: SF := high:1[#6020]
.address 0x406888
0002b894: ZF := 0 = #6020
.address 0x40688B
0002b89e: when ZF goto %0002b898
00044753: goto %0003e92c

.address 0x406920
0002b898: 
.address 0x406920
0002b8a8: RCX := RSI
.address 0x406923
0002b8af: RSI := 0x417C28
.address 0x40692A
0002b8b6: RDI := 1
.address 0x40692F
0002b8c3: RAX := 0
.address 0x40692F
0002b8c6: AF := unknown[bits]:u1
.address 0x40692F
0002b8c9: ZF := 1
.address 0x40692F
0002b8cc: PF := 1
.address 0x40692F
0002b8cf: OF := 0
.address 0x40692F
0002b8d2: CF := 0
.address 0x40692F
0002b8d5: SF := 0
.address 0x406931
0002b8dc: RBP := extend:64[low:32[RBX]]
.address 0x406934
0002b8e5: RSP := RSP - 8
.address 0x406934
0002b8e8: mem := mem with [RSP, el]:u64 <- 0x406939
.address 0x406934
0002b8eb: call @sub_403cd0 with return %0002b8ed

.address 0x406939
0002b8ed: 
.address 0x406939
0002b8f3: goto %0002b8ef

.address 0x406891
0003e92c: 
.address 0x406891
0003e937: RSI := 0
.address 0x406891
0003e93a: AF := unknown[bits]:u1
.address 0x406891
0003e93d: ZF := 1
.address 0x406891
0003e940: PF := 1
.address 0x406891
0003e943: OF := 0
.address 0x406891
0003e946: CF := 0
.address 0x406891
0003e949: SF := 0
.address 0x406893
0003e950: RBP := RDI
.address 0x406896
0003e959: RSP := RSP - 8
.address 0x406896
0003e95c: mem := mem with [RSP, el]:u64 <- 0x40689B
.address 0x406896
0003e95f: call @sub_410370 with return %0003e961

.address 0x40689B
0003e961: 
.address 0x40689B
0003e966: RSI := mem[0x620288, el]:u64
.address 0x4068A2
0003e975: #8631 := low:32[RBX]
.address 0x4068A2
0003e978: #8632 := low:32[RAX]
.address 0x4068A2
0003e97b: RBX := pad:64[low:32[RBX] - low:32[RAX]]
.address 0x4068A2
0003e97e: CF := #8631 < #8632
.address 0x4068A2
0003e981: OF := high:1[(#8631 ^ #8632) & (#8631 ^ low:32[RBX])]
.address 0x4068A2
0003e984: AF := 0x10 = (0x10 & (low:32[RBX] ^ #8631 ^ #8632))
.address 0x4068A2
0003e987: PF := ~low:1[let $1 = low:32[RBX] >> 4 ^ low:32[RBX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4068A2
0003e98a: SF := high:1[low:32[RBX]]
.address 0x4068A2
0003e98d: ZF := 0 = low:32[RBX]
.address 0x4068A4
0003e994: RAX := 0
.address 0x4068A9
0003e99b: RBX := pad:64[if SF then low:32[RAX] else low:32[RBX]]
.address 0x4068AC
0003e9a2: RDI := RBP
.address 0x4068AF
0003e9ab: RSP := RSP - 8
.address 0x4068AF
0003e9ae: mem := mem with [RSP, el]:u64 <- 0x4068B4
.address 0x4068AF
0003e9b1: call @sub_403af0 with return %0003e9b3

.address 0x4068B4
0003e9b3: 
.address 0x4068B4
0003e9b8: RDI := RBP
.address 0x4068B7
0003e9bf: RBP := extend:64[low:32[RBX]]
.address 0x4068BA
0003e9c8: RSP := RSP - 8
.address 0x4068BA
0003e9cb: mem := mem with [RSP, el]:u64 <- 0x4068BF
.address 0x4068BA
0003e9ce: call @sub_403950 with return %0003e9d0

.address 0x4068BF
0003e9d0: 
.address 0x4068BF
0003e9dd: #8634 := RBP
.address 0x4068BF
0003e9e0: #8635 := RAX
.address 0x4068BF
0003e9e3: RBP := RBP + #8635
.address 0x4068BF
0003e9e6: CF := RBP < #8634
.address 0x4068BF
0003e9e9: OF := high:1[#8634] = high:1[#8635] & (high:1[#8634] | high:1[RBP]) & ~(
high:1[#8634] & high:1[RBP])
.address 0x4068BF
0003e9ec: AF := 0x10 = (0x10 & (RBP ^ #8634 ^ #8635))
.address 0x4068BF
0003e9ef: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4068BF
0003e9f2: SF := high:1[RBP]
.address 0x4068BF
0003e9f5: ZF := 0 = RBP
00044754: goto %0002b9b6

.address 0x4068C8
0002b9b6: 
.address 0x4068C8
0002b9c6: RDI := mem[0x620288, el]:u64
.address 0x4068CF
0002b9cd: RDX := mem[RDI + 0x28, el]:u64
.address 0x4068D3
0002b9da: #6031 := RDX - mem[RDI + 0x30, el]:u64
.address 0x4068D3
0002b9dd: CF := RDX < mem[RDI + 0x30, el]:u64
.address 0x4068D3
0002b9e0: OF := high:1[(RDX ^ mem[RDI + 0x30, el]:u64) & (RDX ^ #6031)]
.address 0x4068D3
0002b9e3: AF := 0x10 = (0x10 & (#6031 ^ RDX ^ mem[RDI + 0x30, el]:u64))
.address 0x4068D3
0002b9e6: PF := ~low:1[let $1 = #6031 >> 4 ^ #6031 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4068D3
0002b9e9: SF := high:1[#6031]
.address 0x4068D3
0002b9ec: ZF := 0 = #6031
.address 0x4068D7
0002b9f5: when ~CF goto %0002b955
00044755: goto %0002b9fb

.address 0x406910
0002b955: 
.address 0x406910
0002b95a: RSI := 0x20
.address 0x406915
0002b963: RSP := RSP - 8
.address 0x406915
0002b966: mem := mem with [RSP, el]:u64 <- 0x40691A
.address 0x406915
0002b969: call @sub_4039d0 with return %0002b96b

.address 0x40691A
0002b96b: 
.address 0x40691A
0002b971: goto %0002b96d

.address 0x4068D9
0002b9fb: 
.address 0x4068D9
0002ba00: RCX := low:64[RDX + 1]
.address 0x4068DD
0002ba07: mem := mem with [RDI + 0x28, el]:u64 <- RCX
.address 0x4068E1
0002ba0e: mem := mem with [RDX] <- 0x20
00044756: goto %0002b96d

.address 0x4068E4
0002b96d: 
.address 0x4068E4
0002b97e: #6026 := low:32[RBX]
.address 0x4068E4
0002b981: RBX := pad:64[low:32[RBX] - 1]
.address 0x4068E4
0002b984: CF := #6026 < 1
.address 0x4068E4
0002b987: OF := high:1[(#6026 ^ 1) & (#6026 ^ low:32[RBX])]
.address 0x4068E4
0002b98a: AF := 0x10 = (0x10 & (low:32[RBX] ^ #6026 ^ 1))
.address 0x4068E4
0002b98d: PF := ~low:1[let $1 = low:32[RBX] >> 4 ^ low:32[RBX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4068E4
0002b990: SF := high:1[low:32[RBX]]
.address 0x4068E4
0002b993: ZF := 0 = low:32[RBX]
.address 0x4068E7
0002b9a0: #6029 := low:32[RBX] - 0xFFFFFFFF
.address 0x4068E7
0002b9a3: CF := low:32[RBX] < 0xFFFFFFFF
.address 0x4068E7
0002b9a6: OF := high:1[(low:32[RBX] ^ 0xFFFFFFFF) & (low:32[RBX] ^ #6029)]
.address 0x4068E7
0002b9a9: AF := 0x10 = (0x10 & (#6029 ^ low:32[RBX] ^ 0xFFFFFFFF))
.address 0x4068E7
0002b9ac: PF := ~low:1[let $1 = #6029 >> 4 ^ #6029 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4068E7
0002b9af: SF := high:1[#6029]
.address 0x4068E7
0002b9b2: ZF := 0 = #6029
.address 0x4068EA
0002b9bc: when ~ZF goto %0002b9b6
00044757: goto %0002b8ef

.address 0x4068EC
0002b8ef: 
.address 0x4068EC
0002b8f9: RAX := mem[0x6211F8, el]:u64
.address 0x4068F3
0002b900: RAX := low:64[RBP + RAX + 1]
.address 0x4068F8
0002b907: mem := mem with [0x6211F8, el]:u64 <- RAX
.address 0x4068FF
0002b915: #6022 := RSP
.address 0x4068FF
0002b918: RSP := RSP + 8
.address 0x4068FF
0002b91b: CF := RSP < #6022
.address 0x4068FF
0002b91e: OF := ~high:1[#6022] & (high:1[#6022] | high:1[RSP]) & ~(high:1[#6022] & high:1[RSP])
.address 0x4068FF
0002b921: AF := 0x10 = (0x10 & (RSP ^ #6022 ^ 8))
.address 0x4068FF
0002b924: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4068FF
0002b927: SF := high:1[RSP]
.address 0x4068FF
0002b92a: ZF := 0 = RSP
.address 0x406903
0002b932: RBX := mem[RSP, el]:u64
.address 0x406903
0002b935: RSP := RSP + 8
.address 0x406904
0002b93d: RBP := mem[RSP, el]:u64
.address 0x406904
0002b940: RSP := RSP + 8
.address 0x406905
0002b949: #6025 := mem[RSP, el]:u64
.address 0x406905
0002b94c: RSP := RSP + 8
.address 0x406905
0002b950: call #6025 with noreturn


.address 0x406940
00043eb2: sub sub_406940()
.address 0x406940
0002ba16: 
.address 0x406940
0002ba1d: #6033 := RBX
.address 0x406940
0002ba20: RSP := RSP - 8
.address 0x406940
0002ba23: mem := mem with [RSP, el]:u64 <- #6033
.address 0x406941
0002ba2a: RAX := 0x417C2E
.address 0x406948
0002ba31: RBX := pad:64[low:32[RDI]]
.address 0x40694A
0002ba3f: #6034 := RSP
.address 0x40694A
0002ba42: RSP := RSP - 0x10
.address 0x40694A
0002ba45: CF := #6034 < 0x10
.address 0x40694A
0002ba48: OF := high:1[(#6034 ^ 0x10) & (#6034 ^ RSP)]
.address 0x40694A
0002ba4b: AF := 0x10 = (0x10 & (RSP ^ #6034 ^ 0x10))
.address 0x40694A
0002ba4e: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40694A
0002ba51: SF := high:1[RSP]
.address 0x40694A
0002ba54: ZF := 0 = RSP
.address 0x40694E
0002ba61: #6037 := low:8[RDX]
.address 0x40694E
0002ba64: OF := 0
.address 0x40694E
0002ba67: CF := 0
.address 0x40694E
0002ba6a: AF := unknown[bits]:u1
.address 0x40694E
0002ba6d: PF := ~low:1[let $1 = #6037 >> 4 ^ #6037 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40694E
0002ba70: SF := high:1[#6037]
.address 0x40694E
0002ba73: ZF := 0 = #6037
.address 0x406950
0002ba7d: when ZF goto %0002ba77
00044758: goto %0003e8e1

.address 0x406952
0003e8e1: 
.address 0x406952
0003e8ec: RAX := 0
.address 0x406952
0003e8ef: AF := unknown[bits]:u1
.address 0x406952
0003e8f2: ZF := 1
.address 0x406952
0003e8f5: PF := 1
.address 0x406952
0003e8f8: OF := 0
.address 0x406952
0003e8fb: CF := 0
.address 0x406952
0003e8fe: SF := 0
.address 0x406954
0003e90b: #8629 := mem[0x62132D]
.address 0x406954
0003e90e: CF := mem[0x62132D] < 0
.address 0x406954
0003e911: OF := high:1[mem[0x62132D] & (mem[0x62132D] ^ #8629)]
.address 0x406954
0003e914: AF := 0x10 = (0x10 & (#8629 ^ mem[0x62132D]))
.address 0x406954
0003e917: PF := ~low:1[let $1 = #8629 >> 4 ^ #8629 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406954
0003e91a: SF := high:1[#8629]
.address 0x406954
0003e91d: ZF := 0 = #8629
.address 0x40695B
0003e926: when ZF goto %0002bacf
00044759: goto %0002ba77

.address 0x406970
0002bacf: 
.address 0x406970
0002bad4: mem := mem with [RSP + 0xC, el]:u32 <- low:32[RSI]
.address 0x406974
0002badd: RSP := RSP - 8
.address 0x406974
0002bae0: mem := mem with [RSP, el]:u64 <- 0x406979
.address 0x406974
0002bae3: call @sub_40f910 with return %0002bae5

.address 0x406979
0002bae5: 
.address 0x406979
0002baea: RSI := pad:64[mem[RSP + 0xC, el]:u32]
.address 0x40697D
0002baf1: goto %0002ba77

.address 0x40695D
0002ba77: 
.address 0x40695D
0002ba8e: #6039 := RSP
.address 0x40695D
0002ba91: RSP := RSP + 0x10
.address 0x40695D
0002ba94: CF := RSP < #6039
.address 0x40695D
0002ba97: OF := ~high:1[#6039] & (high:1[#6039] | high:1[RSP]) & ~(high:1[#6039] & high:1[RSP])
.address 0x40695D
0002ba9a: AF := 0x10 = (0x10 & (RSP ^ #6039 ^ 0x10))
.address 0x40695D
0002ba9d: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40695D
0002baa0: SF := high:1[RSP]
.address 0x40695D
0002baa3: ZF := 0 = RSP
.address 0x406961
0002baaa: RDX := pad:64[low:32[RSI]]
.address 0x406963
0002bab1: RSI := RBX
.address 0x406966
0002bab9: RBX := mem[RSP, el]:u64
.address 0x406966
0002babc: RSP := RSP + 8
.address 0x406967
0002bac3: RDI := RAX
.address 0x40696A
0002baca: call @sub_406880 with noreturn


.address 0x4069A0
00043eb5: sub sub_4069a0()
.address 0x4069A0
0002bb3c: 
.address 0x4069A0
0002bb43: #6045 := R12
.address 0x4069A0
0002bb46: RSP := RSP - 8
.address 0x4069A0
0002bb49: mem := mem with [RSP, el]:u64 <- #6045
.address 0x4069A2
0002bb52: #6046 := RBP
.address 0x4069A2
0002bb55: RSP := RSP - 8
.address 0x4069A2
0002bb58: mem := mem with [RSP, el]:u64 <- #6046
.address 0x4069A3
0002bb5f: RBP := RSI
.address 0x4069A6
0002bb68: #6047 := RBX
.address 0x4069A6
0002bb6b: RSP := RSP - 8
.address 0x4069A6
0002bb6e: mem := mem with [RSP, el]:u64 <- #6047
.address 0x4069A7
0002bb75: RSI := RDX
.address 0x4069AA
0002bb7c: RBX := pad:64[low:32[RDI]]
.address 0x4069AC
0002bb83: RDI := 4
.address 0x4069B1
0002bb8c: RSP := RSP - 8
.address 0x4069B1
0002bb8f: mem := mem with [RSP, el]:u64 <- 0x4069B6
.address 0x4069B1
0002bb92: call @sub_413a10 with return %0002bb94

.address 0x4069B6
0002bb94: 
.address 0x4069B6
0002bb99: R12 := RAX
.address 0x4069B9
0002bba2: RSP := RSP - 8
.address 0x4069B9
0002bba5: mem := mem with [RSP, el]:u64 <- 0x4069BE
.address 0x4069B9
0002bba8: call @sub_4037f0 with return %0002bbaa

.address 0x4069BE
0002bbaa: 
.address 0x4069BE
0002bbaf: RSI := pad:64[mem[RAX, el]:u32]
.address 0x4069C0
0002bbbc: RDI := 0
.address 0x4069C0
0002bbbf: AF := unknown[bits]:u1
.address 0x4069C0
0002bbc2: ZF := 1
.address 0x4069C0
0002bbc5: PF := 1
.address 0x4069C0
0002bbc8: OF := 0
.address 0x4069C0
0002bbcb: CF := 0
.address 0x4069C0
0002bbce: SF := 0
.address 0x4069C2
0002bbdb: RAX := 0
.address 0x4069C2
0002bbde: AF := unknown[bits]:u1
.address 0x4069C2
0002bbe1: ZF := 1
.address 0x4069C2
0002bbe4: PF := 1
.address 0x4069C2
0002bbe7: OF := 0
.address 0x4069C2
0002bbea: CF := 0
.address 0x4069C2
0002bbed: SF := 0
.address 0x4069C4
0002bbf4: RCX := R12
.address 0x4069C7
0002bbfb: RDX := RBP
.address 0x4069CA
0002bc04: RSP := RSP - 8
.address 0x4069CA
0002bc07: mem := mem with [RSP, el]:u64 <- 0x4069CF
.address 0x4069CA
0002bc0a: call @sub_403d20 with return %0002bc0c

.address 0x4069CF
0002bc0c: 
.address 0x4069CF
0002bc17: #6048 := low:8[RBX]
.address 0x4069CF
0002bc1a: OF := 0
.address 0x4069CF
0002bc1d: CF := 0
.address 0x4069CF
0002bc20: AF := unknown[bits]:u1
.address 0x4069CF
0002bc23: PF := ~low:1[let $1 = #6048 >> 4 ^ #6048 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4069CF
0002bc26: SF := high:1[#6048]
.address 0x4069CF
0002bc29: ZF := 0 = #6048
.address 0x4069D1
0002bc33: when ZF goto %0002bc2d
0004475a: goto %0003e8a9

.address 0x4069E8
0002bc2d: 
.address 0x4069E8
0002bc3d: RAX := pad:64[mem[0x621210, el]:u32]
.address 0x4069EE
0002bc4a: #6050 := low:32[RAX]
.address 0x4069EE
0002bc4d: OF := 0
.address 0x4069EE
0002bc50: CF := 0
.address 0x4069EE
0002bc53: AF := unknown[bits]:u1
.address 0x4069EE
0002bc56: PF := ~low:1[let $1 = #6050 >> 4 ^ #6050 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4069EE
0002bc59: SF := high:1[#6050]
.address 0x4069EE
0002bc5c: ZF := 0 = #6050
.address 0x4069F0
0002bc66: when ~ZF goto %0002bc60
0004475b: goto %0002bc9f

.address 0x4069F2
0002bc9f: 
.address 0x4069F2
0002bca5: RBX := mem[RSP, el]:u64
.address 0x4069F2
0002bca8: RSP := RSP + 8
.address 0x4069F3
0002bcaf: mem := mem with [0x621210, el]:u32 <- 1
.address 0x4069FD
0002bcb7: RBP := mem[RSP, el]:u64
.address 0x4069FD
0002bcba: RSP := RSP + 8
.address 0x4069FE
0002bcc2: R12 := mem[RSP, el]:u64
.address 0x4069FE
0002bcc5: RSP := RSP + 8
.address 0x406A00
0002bcce: #6053 := mem[RSP, el]:u64
.address 0x406A00
0002bcd1: RSP := RSP + 8
.address 0x406A00
0002bcd5: call #6053 with noreturn

.address 0x4069D3
0003e8a9: 
.address 0x4069D3
0003e8ae: mem := mem with [0x621210, el]:u32 <- 2
0004475c: goto %0002bc60

.address 0x4069DD
0002bc60: 
.address 0x4069DD
0002bc71: RBX := mem[RSP, el]:u64
.address 0x4069DD
0002bc74: RSP := RSP + 8
.address 0x4069DE
0002bc7c: RBP := mem[RSP, el]:u64
.address 0x4069DE
0002bc7f: RSP := RSP + 8
.address 0x4069DF
0002bc87: R12 := mem[RSP, el]:u64
.address 0x4069DF
0002bc8a: RSP := RSP + 8
.address 0x4069E1
0002bc93: #6052 := mem[RSP, el]:u64
.address 0x4069E1
0002bc96: RSP := RSP + 8
.address 0x4069E1
0002bc9a: call #6052 with noreturn


.address 0x406CB0
00043eb9: sub sub_406cb0()
.address 0x406CB0
0002c50f: 
.address 0x406CB0
0002c51f: RSI := mem[RSI, el]:u64
.address 0x406CB3
0002c526: RDI := mem[RDI, el]:u64
.address 0x406CB6
0002c52d: call @sub_406490 with noreturn


.address 0x406DF0
00043eba: sub sub_406df0()
.address 0x406DF0
0002c947: 
.address 0x406DF0
0002c952: #6181 := low:8[RDI]
.address 0x406DF0
0002c955: OF := 0
.address 0x406DF0
0002c958: CF := 0
.address 0x406DF0
0002c95b: AF := unknown[bits]:u1
.address 0x406DF0
0002c95e: PF := ~low:1[let $1 = #6181 >> 4 ^ #6181 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406DF0
0002c961: SF := high:1[#6181]
.address 0x406DF0
0002c964: ZF := 0 = #6181
.address 0x406DF3
0002c96e: when ZF goto %0002c968
0004475d: goto %0003e2c9

.address 0x406E18
0002c968: 
.address 0x406E18
0002c97e: RAX := 0
.address 0x406E18
0002c981: AF := unknown[bits]:u1
.address 0x406E18
0002c984: ZF := 1
.address 0x406E18
0002c987: PF := 1
.address 0x406E18
0002c98a: OF := 0
.address 0x406E18
0002c98d: CF := 0
.address 0x406E18
0002c990: SF := 0
.address 0x406E1A
0002c99d: #6183 := low:32[RDX] - 5
.address 0x406E1A
0002c9a0: CF := low:32[RDX] < 5
.address 0x406E1A
0002c9a3: OF := high:1[(low:32[RDX] ^ 5) & (low:32[RDX] ^ #6183)]
.address 0x406E1A
0002c9a6: AF := 0x10 = (0x10 & (#6183 ^ low:32[RDX] ^ 5))
.address 0x406E1A
0002c9a9: PF := ~low:1[let $1 = #6183 >> 4 ^ #6183 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406E1A
0002c9ac: SF := high:1[#6183]
.address 0x406E1A
0002c9af: ZF := 0 = #6183
.address 0x406E1D
0002c9b9: when ZF goto %0002c9b3
0004475e: goto %0003e25e

.address 0x406E80
0002c9b3: 
.address 0x406E80
0002c9c5: #6185 := mem[RSP, el]:u64
.address 0x406E80
0002c9c8: RSP := RSP + 8
.address 0x406E80
0002c9cc: call #6185 with noreturn

.address 0x406E1F
0003e25e: 
.address 0x406E1F
0003e269: #8565 := low:32[RDX] - 3
.address 0x406E1F
0003e26c: CF := low:32[RDX] < 3
.address 0x406E1F
0003e26f: OF := high:1[(low:32[RDX] ^ 3) & (low:32[RDX] ^ #8565)]
.address 0x406E1F
0003e272: AF := 0x10 = (0x10 & (#8565 ^ low:32[RDX] ^ 3))
.address 0x406E1F
0003e275: PF := ~low:1[let $1 = #8565 >> 4 ^ #8565 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406E1F
0003e278: SF := high:1[#8565]
.address 0x406E1F
0003e27b: ZF := 0 = #8565
.address 0x406E22
0003e282: RCX := extract:63:8[RCX].pad:8[ZF]
.address 0x406E25
0003e28f: #8567 := low:32[RDX] - 9
.address 0x406E25
0003e292: CF := low:32[RDX] < 9
.address 0x406E25
0003e295: OF := high:1[(low:32[RDX] ^ 9) & (low:32[RDX] ^ #8567)]
.address 0x406E25
0003e298: AF := 0x10 = (0x10 & (#8567 ^ low:32[RDX] ^ 9))
.address 0x406E25
0003e29b: PF := ~low:1[let $1 = #8567 >> 4 ^ #8567 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406E25
0003e29e: SF := high:1[#8567]
.address 0x406E25
0003e2a1: ZF := 0 = #8567
.address 0x406E28
0003e2a8: RAX := extract:63:8[RAX].pad:8[ZF]
.address 0x406E2B
0003e2b5: RCX := pad:64[low:32[RCX] | low:32[RAX]]
.address 0x406E2B
0003e2b8: OF := 0
.address 0x406E2B
0003e2bb: CF := 0
.address 0x406E2B
0003e2be: AF := unknown[bits]:u1
.address 0x406E2B
0003e2c1: PF := ~low:1[let $1 = low:32[RCX] >> 4 ^ low:32[RCX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406E2B
0003e2c4: SF := high:1[low:32[RCX]]
.address 0x406E2B
0003e2c7: ZF := 0 = low:32[RCX]
0004475f: goto %0003e059

.address 0x406DF5
0003e2c9: 
.address 0x406DF5
0003e2ce: RAX := pad:64[low:32[RSI]]
.address 0x406DF7
0003e2db: RAX := pad:64[low:32[RAX] & 0xF000]
.address 0x406DF7
0003e2de: OF := 0
.address 0x406DF7
0003e2e1: CF := 0
.address 0x406DF7
0003e2e4: AF := unknown[bits]:u1
.address 0x406DF7
0003e2e7: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406DF7
0003e2ea: SF := high:1[low:32[RAX]]
.address 0x406DF7
0003e2ed: ZF := 0 = low:32[RAX]
.address 0x406DFC
0003e2fa: #8571 := low:32[RAX] - 0x8000
.address 0x406DFC
0003e2fd: CF := low:32[RAX] < 0x8000
.address 0x406DFC
0003e300: OF := high:1[(low:32[RAX] ^ 0x8000) & (low:32[RAX] ^ #8571)]
.address 0x406DFC
0003e303: AF := 0x10 = (0x10 & (#8571 ^ low:32[RAX] ^ 0x8000))
.address 0x406DFC
0003e306: PF := ~low:1[let $1 = #8571 >> 4 ^ #8571 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406DFC
0003e309: SF := high:1[#8571]
.address 0x406DFC
0003e30c: ZF := 0 = #8571
.address 0x406E01
0003e315: when ~ZF goto %0003e031
00044760: goto %0003e31b

.address 0x406E70
0003e031: 
.address 0x406E70
0003e03c: #8541 := low:32[RAX] - 0x4000
.address 0x406E70
0003e03f: CF := low:32[RAX] < 0x4000
.address 0x406E70
0003e042: OF := high:1[(low:32[RAX] ^ 0x4000) & (low:32[RAX] ^ #8541)]
.address 0x406E70
0003e045: AF := 0x10 = (0x10 & (#8541 ^ low:32[RAX] ^ 0x4000))
.address 0x406E70
0003e048: PF := ~low:1[let $1 = #8541 >> 4 ^ #8541 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406E70
0003e04b: SF := high:1[#8541]
.address 0x406E70
0003e04e: ZF := 0 = #8541
.address 0x406E75
0003e055: RCX := extract:63:8[RCX].pad:8[ZF]
.address 0x406E78
0003e05d: goto %0003e059

.address 0x406E2D
0003e059: 
.address 0x406E2D
0003e069: #8543 := low:8[RCX]
.address 0x406E2D
0003e06c: OF := 0
.address 0x406E2D
0003e06f: CF := 0
.address 0x406E2D
0003e072: AF := unknown[bits]:u1
.address 0x406E2D
0003e075: PF := ~low:1[let $1 = #8543 >> 4 ^ #8543 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406E2D
0003e078: SF := high:1[#8543]
.address 0x406E2D
0003e07b: ZF := 0 = #8543
.address 0x406E2F
0003e082: RAX := 0x2F
.address 0x406E34
0003e08c: when ~ZF goto %0003e086
00044761: goto %0003e0a4

.address 0x406E36
0003e0a4: 
.address 0x406E36
0003e0af: RAX := 0
.address 0x406E36
0003e0b2: AF := unknown[bits]:u1
.address 0x406E36
0003e0b5: ZF := 1
.address 0x406E36
0003e0b8: PF := 1
.address 0x406E36
0003e0bb: OF := 0
.address 0x406E36
0003e0be: CF := 0
.address 0x406E36
0003e0c1: SF := 0
.address 0x406E38
0003e0ce: #8546 := mem[0x621314, el]:u32 - 1
.address 0x406E38
0003e0d1: CF := mem[0x621314, el]:u32 < 1
.address 0x406E38
0003e0d4: OF := high:1[(mem[0x621314, el]:u32 ^ 1) & (mem[0x621314, el]:u32 ^ #8546)]
.address 0x406E38
0003e0d7: AF := 0x10 = (0x10 & (#8546 ^ mem[0x621314, el]:u32 ^ 1))
.address 0x406E38
0003e0da: PF := ~low:1[let $1 = #8546 >> 4 ^ #8546 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406E38
0003e0dd: SF := high:1[#8546]
.address 0x406E38
0003e0e0: ZF := 0 = #8546
.address 0x406E3F
0003e0e9: when ZF goto %0003e086
00044762: goto %0003e0ef

.address 0x406E41
0003e0ef: 
.address 0x406E41
0003e0fa: #8548 := low:8[RDI]
.address 0x406E41
0003e0fd: OF := 0
.address 0x406E41
0003e100: CF := 0
.address 0x406E41
0003e103: AF := unknown[bits]:u1
.address 0x406E41
0003e106: PF := ~low:1[let $1 = #8548 >> 4 ^ #8548 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406E41
0003e109: SF := high:1[#8548]
.address 0x406E41
0003e10c: ZF := 0 = #8548
.address 0x406E44
0003e115: when ~ZF goto %0002c9d1
00044763: goto %0003e11b

.address 0x406E88
0002c9d1: 
.address 0x406E88
0002c9dc: RSI := pad:64[low:32[RSI] & 0xF000]
.address 0x406E88
0002c9df: OF := 0
.address 0x406E88
0002c9e2: CF := 0
.address 0x406E88
0002c9e5: AF := unknown[bits]:u1
.address 0x406E88
0002c9e8: PF := ~low:1[let $1 = low:32[RSI] >> 4 ^ low:32[RSI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406E88
0002c9eb: SF := high:1[low:32[RSI]]
.address 0x406E88
0002c9ee: ZF := 0 = low:32[RSI]
.address 0x406E8E
0002c9f5: RAX := 0x40
.address 0x406E93
0002ca02: #6187 := low:32[RSI] - 0xA000
.address 0x406E93
0002ca05: CF := low:32[RSI] < 0xA000
.address 0x406E93
0002ca08: OF := high:1[(low:32[RSI] ^ 0xA000) & (low:32[RSI] ^ #6187)]
.address 0x406E93
0002ca0b: AF := 0x10 = (0x10 & (#6187 ^ low:32[RSI] ^ 0xA000))
.address 0x406E93
0002ca0e: PF := ~low:1[let $1 = #6187 >> 4 ^ #6187 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406E93
0002ca11: SF := high:1[#6187]
.address 0x406E93
0002ca14: ZF := 0 = #6187
.address 0x406E99
0002ca1e: when ZF goto %0002ca18
00044764: goto %0003df7c

.address 0x406ED8
0002ca18: 
.address 0x406ED8
0002ca2a: #6189 := mem[RSP, el]:u64
.address 0x406ED8
0002ca2d: RSP := RSP + 8
.address 0x406ED8
0002ca31: call #6189 with noreturn

.address 0x406E9B
0003df7c: 
.address 0x406E9B
0003df87: #8533 := low:32[RSI] - 0x1000
.address 0x406E9B
0003df8a: CF := low:32[RSI] < 0x1000
.address 0x406E9B
0003df8d: OF := high:1[(low:32[RSI] ^ 0x1000) & (low:32[RSI] ^ #8533)]
.address 0x406E9B
0003df90: AF := 0x10 = (0x10 & (#8533 ^ low:32[RSI] ^ 0x1000))
.address 0x406E9B
0003df93: PF := ~low:1[let $1 = #8533 >> 4 ^ #8533 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406E9B
0003df96: SF := high:1[#8533]
.address 0x406E9B
0003df99: ZF := 0 = #8533
.address 0x406EA1
0003dfa0: RAX := 0x7C
.address 0x406EA6
0003dfa9: when ZF goto %0002ca36
00044765: goto %0003dfaf

.address 0x406EE0
0002ca36: 
.address 0x406EE0
0002ca3d: #6190 := mem[RSP, el]:u64
.address 0x406EE0
0002ca40: RSP := RSP + 8
.address 0x406EE0
0002ca44: call #6190 with noreturn

.address 0x406EA8
0003dfaf: 
.address 0x406EA8
0003dfba: #8535 := low:32[RSI] - 0xC000
.address 0x406EA8
0003dfbd: CF := low:32[RSI] < 0xC000
.address 0x406EA8
0003dfc0: OF := high:1[(low:32[RSI] ^ 0xC000) & (low:32[RSI] ^ #8535)]
.address 0x406EA8
0003dfc3: AF := 0x10 = (0x10 & (#8535 ^ low:32[RSI] ^ 0xC000))
.address 0x406EA8
0003dfc6: PF := ~low:1[let $1 = #8535 >> 4 ^ #8535 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406EA8
0003dfc9: SF := high:1[#8535]
.address 0x406EA8
0003dfcc: ZF := 0 = #8535
.address 0x406EAE
0003dfd3: RAX := extract:63:8[RAX].pad:8[ZF]
.address 0x406EB1
0003dfdb: goto %0003dfd7

.address 0x406E46
0003e11b: 
.address 0x406E46
0003e126: #8550 := low:32[RDX] - 6
.address 0x406E46
0003e129: CF := low:32[RDX] < 6
.address 0x406E46
0003e12c: OF := high:1[(low:32[RDX] ^ 6) & (low:32[RDX] ^ #8550)]
.address 0x406E46
0003e12f: AF := 0x10 = (0x10 & (#8550 ^ low:32[RDX] ^ 6))
.address 0x406E46
0003e132: PF := ~low:1[let $1 = #8550 >> 4 ^ #8550 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406E46
0003e135: SF := high:1[#8550]
.address 0x406E46
0003e138: ZF := 0 = #8550
.address 0x406E49
0003e13f: RAX := 0x40
.address 0x406E4E
0003e149: when ZF goto %0003e143
00044766: goto %0003e161

.address 0x406ED0
0003e143: 
.address 0x406ED0
0003e155: #8552 := mem[RSP, el]:u64
.address 0x406ED0
0003e158: RSP := RSP + 8
.address 0x406ED0
0003e15c: call #8552 with noreturn

.address 0x406E54
0003e161: 
.address 0x406E54
0003e16c: #8553 := low:32[RDX] - 1
.address 0x406E54
0003e16f: CF := low:32[RDX] < 1
.address 0x406E54
0003e172: OF := high:1[(low:32[RDX] ^ 1) & (low:32[RDX] ^ #8553)]
.address 0x406E54
0003e175: AF := 0x10 = (0x10 & (#8553 ^ low:32[RDX] ^ 1))
.address 0x406E54
0003e178: PF := ~low:1[let $1 = #8553 >> 4 ^ #8553 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406E54
0003e17b: SF := high:1[#8553]
.address 0x406E54
0003e17e: ZF := 0 = #8553
.address 0x406E57
0003e185: RAX := 0x7C
.address 0x406E5C
0003e18e: when ZF goto %0002ca49
00044767: goto %0003e194

.address 0x406EE8
0002ca49: 
.address 0x406EE8
0002ca50: #6191 := mem[RSP, el]:u64
.address 0x406EE8
0002ca53: RSP := RSP + 8
.address 0x406EE8
0002ca57: call #6191 with noreturn

.address 0x406E62
0003e194: 
.address 0x406E62
0003e19f: #8555 := low:32[RDX] - 7
.address 0x406E62
0003e1a2: CF := low:32[RDX] < 7
.address 0x406E62
0003e1a5: OF := high:1[(low:32[RDX] ^ 7) & (low:32[RDX] ^ #8555)]
.address 0x406E62
0003e1a8: AF := 0x10 = (0x10 & (#8555 ^ low:32[RDX] ^ 7))
.address 0x406E62
0003e1ab: PF := ~low:1[let $1 = #8555 >> 4 ^ #8555 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406E62
0003e1ae: SF := high:1[#8555]
.address 0x406E62
0003e1b1: ZF := 0 = #8555
.address 0x406E65
0003e1b8: RAX := extract:63:8[RAX].pad:8[ZF]
00044768: goto %0003dfd7

.address 0x406E68
0003dfd7: 
.address 0x406E68
0003dfe8: #8537 := low:32[RAX]
.address 0x406E68
0003dfeb: RAX := pad:64[-low:32[RAX]]
.address 0x406E68
0003dfee: CF := if #8537 = 0 then 0 else 1
.address 0x406E68
0003dff1: OF := if #8537 = 0x80000000 then 1 else 0
.address 0x406E68
0003dff4: AF := 0x10 = (0x10 & (low:32[RAX] ^ #8537))
.address 0x406E68
0003dff7: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406E68
0003dffa: SF := high:1[low:32[RAX]]
.address 0x406E68
0003dffd: ZF := 0 = low:32[RAX]
.address 0x406E6A
0003e00a: RAX := pad:64[low:32[RAX] & 0x3D]
.address 0x406E6A
0003e00d: OF := 0
.address 0x406E6A
0003e010: CF := 0
.address 0x406E6A
0003e013: AF := unknown[bits]:u1
.address 0x406E6A
0003e016: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406E6A
0003e019: SF := high:1[low:32[RAX]]
.address 0x406E6A
0003e01c: ZF := 0 = low:32[RAX]
.address 0x406E6D
0003e025: #8540 := mem[RSP, el]:u64
.address 0x406E6D
0003e028: RSP := RSP + 8
.address 0x406E6D
0003e02c: call #8540 with noreturn

.address 0x406E03
0003e31b: 
.address 0x406E03
0003e326: RAX := 0
.address 0x406E03
0003e329: AF := unknown[bits]:u1
.address 0x406E03
0003e32c: ZF := 1
.address 0x406E03
0003e32f: PF := 1
.address 0x406E03
0003e332: OF := 0
.address 0x406E03
0003e335: CF := 0
.address 0x406E03
0003e338: SF := 0
.address 0x406E05
0003e345: #8573 := mem[0x621314, el]:u32 - 3
.address 0x406E05
0003e348: CF := mem[0x621314, el]:u32 < 3
.address 0x406E05
0003e34b: OF := high:1[(mem[0x621314, el]:u32 ^ 3) & (mem[0x621314, el]:u32 ^ #8573)]
.address 0x406E05
0003e34e: AF := 0x10 = (0x10 & (#8573 ^ mem[0x621314, el]:u32 ^ 3))
.address 0x406E05
0003e351: PF := ~low:1[let $1 = #8573 >> 4 ^ #8573 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406E05
0003e354: SF := high:1[#8573]
.address 0x406E05
0003e357: ZF := 0 = #8573
.address 0x406E0C
0003e360: when ZF goto %0003e1c0
00044769: goto %0003e086

.address 0x406EB8
0003e1c0: 
.address 0x406EB8
0003e1cb: RSI := pad:64[low:32[RSI] & 0x49]
.address 0x406EB8
0003e1ce: OF := 0
.address 0x406EB8
0003e1d1: CF := 0
.address 0x406EB8
0003e1d4: AF := unknown[bits]:u1
.address 0x406EB8
0003e1d7: PF := ~low:1[let $1 = low:32[RSI] >> 4 ^ low:32[RSI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406EB8
0003e1da: SF := high:1[low:32[RSI]]
.address 0x406EB8
0003e1dd: ZF := 0 = low:32[RSI]
.address 0x406EBB
0003e1ea: #8558 := low:32[RSI] - 1
.address 0x406EBB
0003e1ed: CF := low:32[RSI] < 1
.address 0x406EBB
0003e1f0: OF := high:1[(low:32[RSI] ^ 1) & (low:32[RSI] ^ #8558)]
.address 0x406EBB
0003e1f3: AF := 0x10 = (0x10 & (#8558 ^ low:32[RSI] ^ 1))
.address 0x406EBB
0003e1f6: PF := ~low:1[let $1 = #8558 >> 4 ^ #8558 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406EBB
0003e1f9: SF := high:1[#8558]
.address 0x406EBB
0003e1fc: ZF := 0 = #8558
.address 0x406EBE
0003e20b: #8560 := low:32[RAX]
.address 0x406EBE
0003e20e: #8561 := low:32[RAX]
.address 0x406EBE
0003e211: RAX := pad:64[#8561 - #8560 + pad:32[CF]]
.address 0x406EBE
0003e214: OF := high:1[(#8560 ^ #8561) & (#8561 ^ low:32[RAX])]
.address 0x406EBE
0003e217: CF := #8561 < #8560 + pad:32[CF] | #8560 + pad:32[CF] < #8560
.address 0x406EBE
0003e21a: AF := 0x10 = (0x10 & (low:32[RAX] ^ #8560 ^ #8561))
.address 0x406EBE
0003e21d: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406EBE
0003e220: SF := high:1[low:32[RAX]]
.address 0x406EBE
0003e223: ZF := 0 = low:32[RAX]
.address 0x406EC0
0003e22a: RAX := pad:64[~low:32[RAX]]
.address 0x406EC2
0003e237: RAX := pad:64[low:32[RAX] & 0x2A]
.address 0x406EC2
0003e23a: OF := 0
.address 0x406EC2
0003e23d: CF := 0
.address 0x406EC2
0003e240: AF := unknown[bits]:u1
.address 0x406EC2
0003e243: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406EC2
0003e246: SF := high:1[low:32[RAX]]
.address 0x406EC2
0003e249: ZF := 0 = low:32[RAX]
.address 0x406EC5
0003e252: #8564 := mem[RSP, el]:u64
.address 0x406EC5
0003e255: RSP := RSP + 8
.address 0x406EC5
0003e259: call #8564 with noreturn

.address 0x406E12
0003e086: 
.address 0x406E12
0003e098: #8545 := mem[RSP, el]:u64
.address 0x406E12
0003e09b: RSP := RSP + 8
.address 0x406E12
0003e09f: call #8545 with noreturn


.address 0x406EF0
00043ec8: sub sub_406ef0()
.address 0x406EF0
0002ca5c: 
.address 0x406EF0
0002ca63: #6192 := RBX
.address 0x406EF0
0002ca66: RSP := RSP - 8
.address 0x406EF0
0002ca69: mem := mem with [RSP, el]:u64 <- #6192
.address 0x406EF1
0002ca70: RDI := pad:64[pad:32[low:8[RDI]]]
.address 0x406EF5
0002ca79: RSP := RSP - 8
.address 0x406EF5
0002ca7c: mem := mem with [RSP, el]:u64 <- 0x406EFA
.address 0x406EF5
0002ca7f: call @sub_406df0 with return %0002ca81

.address 0x406EFA
0002ca81: 
.address 0x406EFA
0002ca8c: #6193 := low:8[RAX]
.address 0x406EFA
0002ca8f: OF := 0
.address 0x406EFA
0002ca92: CF := 0
.address 0x406EFA
0002ca95: AF := unknown[bits]:u1
.address 0x406EFA
0002ca98: PF := ~low:1[let $1 = #6193 >> 4 ^ #6193 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406EFA
0002ca9b: SF := high:1[#6193]
.address 0x406EFA
0002ca9e: ZF := 0 = #6193
.address 0x406EFC
0002caa5: RBX := pad:64[low:32[RAX]]
.address 0x406EFE
0002caaf: when ZF goto %0002caa9
0004476a: goto %0003df2d

.address 0x406F00
0003df2d: 
.address 0x406F00
0003df32: RDI := mem[0x620288, el]:u64
.address 0x406F07
0003df39: RAX := mem[RDI + 0x28, el]:u64
.address 0x406F0B
0003df46: #8531 := RAX - mem[RDI + 0x30, el]:u64
.address 0x406F0B
0003df49: CF := RAX < mem[RDI + 0x30, el]:u64
.address 0x406F0B
0003df4c: OF := high:1[(RAX ^ mem[RDI + 0x30, el]:u64) & (RAX ^ #8531)]
.address 0x406F0B
0003df4f: AF := 0x10 = (0x10 & (#8531 ^ RAX ^ mem[RDI + 0x30, el]:u64))
.address 0x406F0B
0003df52: PF := ~low:1[let $1 = #8531 >> 4 ^ #8531 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406F0B
0003df55: SF := high:1[#8531]
.address 0x406F0B
0003df58: ZF := 0 = #8531
.address 0x406F0F
0003df61: when ~CF goto %0002caf8
0004476b: goto %0003df67

.address 0x406F30
0002caf8: 
.address 0x406F30
0002cafd: RSI := pad:64[pad:32[low:8[RBX]]]
.address 0x406F33
0002cb06: RSP := RSP - 8
.address 0x406F33
0002cb09: mem := mem with [RSP, el]:u64 <- 0x406F38
.address 0x406F33
0002cb0c: call @sub_4039d0 with return %0002cb0e

.address 0x406F38
0002cb0e: 
.address 0x406F38
0002cb14: goto %0002cb10

.address 0x406F11
0003df67: 
.address 0x406F11
0003df6c: RDX := low:64[RAX + 1]
.address 0x406F15
0003df73: mem := mem with [RDI + 0x28, el]:u64 <- RDX
.address 0x406F19
0003df7a: mem := mem with [RAX] <- low:8[RBX]
0004476c: goto %0002cb10

.address 0x406F1B
0002cb10: 
.address 0x406F1B
0002cb21: #6198 := mem[0x6211F8, el]:u64
.address 0x406F1B
0002cb24: mem := mem with [0x6211F8, el]:u64 <- mem[0x6211F8, el]:u64 + 1
.address 0x406F1B
0002cb27: CF := mem[0x6211F8, el]:u64 < #6198
.address 0x406F1B
0002cb2a: OF := ~high:1[#6198] & (high:1[#6198] | high:1[mem[0x6211F8, el]:u64]) & ~(
high:1[#6198] & high:1[mem[0x6211F8, el]:u64])
.address 0x406F1B
0002cb2d: AF := 0x10 = (0x10 & (mem[0x6211F8, el]:u64 ^ #6198 ^ 1))
.address 0x406F1B
0002cb30: PF := ~low:1[let $1 = mem[0x6211F8, el]:u64 >> 4 ^ mem[0x6211F8, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406F1B
0002cb33: SF := high:1[mem[0x6211F8, el]:u64]
.address 0x406F1B
0002cb36: ZF := 0 = mem[0x6211F8, el]:u64
0004476d: goto %0002caa9

.address 0x406F23
0002caa9: 
.address 0x406F23
0002cabf: #6195 := low:8[RBX]
.address 0x406F23
0002cac2: OF := 0
.address 0x406F23
0002cac5: CF := 0
.address 0x406F23
0002cac8: AF := unknown[bits]:u1
.address 0x406F23
0002cacb: PF := ~low:1[let $1 = #6195 >> 4 ^ #6195 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x406F23
0002cace: SF := high:1[#6195]
.address 0x406F23
0002cad1: ZF := 0 = #6195
.address 0x406F25
0002cad8: RAX := extract:63:8[RAX].pad:8[~ZF]
.address 0x406F28
0002cae0: RBX := mem[RSP, el]:u64
.address 0x406F28
0002cae3: RSP := RSP + 8
.address 0x406F29
0002caec: #6197 := mem[RSP, el]:u64
.address 0x406F29
0002caef: RSP := RSP + 8
.address 0x406F29
0002caf3: call #6197 with noreturn


.address 0x406FE0
00043ecd: sub sub_406fe0()
.address 0x406FE0
0002cda3: 
.address 0x406FE0
0002cdb3: RSI := mem[RSI, el]:u64
.address 0x406FE3
0002cdba: RDI := mem[RDI, el]:u64
.address 0x406FE6
0002cdc1: call @sub_40d3c0 with noreturn


.address 0x4070D0
00043ece: sub sub_4070d0()
.address 0x4070D0
0002d0b9: 
.address 0x4070D0
0002d0c0: #6250 := R15
.address 0x4070D0
0002d0c3: RSP := RSP - 8
.address 0x4070D0
0002d0c6: mem := mem with [RSP, el]:u64 <- #6250
.address 0x4070D2
0002d0cf: #6251 := R14
.address 0x4070D2
0002d0d2: RSP := RSP - 8
.address 0x4070D2
0002d0d5: mem := mem with [RSP, el]:u64 <- #6251
.address 0x4070D4
0002d0de: #6252 := R13
.address 0x4070D4
0002d0e1: RSP := RSP - 8
.address 0x4070D4
0002d0e4: mem := mem with [RSP, el]:u64 <- #6252
.address 0x4070D6
0002d0ed: #6253 := R12
.address 0x4070D6
0002d0f0: RSP := RSP - 8
.address 0x4070D6
0002d0f3: mem := mem with [RSP, el]:u64 <- #6253
.address 0x4070D8
0002d0fc: #6254 := RBP
.address 0x4070D8
0002d0ff: RSP := RSP - 8
.address 0x4070D8
0002d102: mem := mem with [RSP, el]:u64 <- #6254
.address 0x4070D9
0002d10b: #6255 := RBX
.address 0x4070D9
0002d10e: RSP := RSP - 8
.address 0x4070D9
0002d111: mem := mem with [RSP, el]:u64 <- #6255
.address 0x4070DA
0002d11f: #6256 := RSP
.address 0x4070DA
0002d122: RSP := RSP - 0xA8
.address 0x4070DA
0002d125: CF := #6256 < 0xA8
.address 0x4070DA
0002d128: OF := high:1[(#6256 ^ 0xA8) & (#6256 ^ RSP)]
.address 0x4070DA
0002d12b: AF := 0x10 = (0x10 & (RSP ^ #6256 ^ 0xA8))
.address 0x4070DA
0002d12e: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4070DA
0002d131: SF := high:1[RSP]
.address 0x4070DA
0002d134: ZF := 0 = RSP
.address 0x4070E1
0002d13b: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x4070EA
0002d142: mem := mem with [RSP + 0x98, el]:u64 <- RAX
.address 0x4070F2
0002d14f: RAX := 0
.address 0x4070F2
0002d152: AF := unknown[bits]:u1
.address 0x4070F2
0002d155: ZF := 1
.address 0x4070F2
0002d158: PF := 1
.address 0x4070F2
0002d15b: OF := 0
.address 0x4070F2
0002d15e: CF := 0
.address 0x4070F2
0002d161: SF := 0
.address 0x4070F4
0002d16e: #6259 := low:8[RDI]
.address 0x4070F4
0002d171: OF := 0
.address 0x4070F4
0002d174: CF := 0
.address 0x4070F4
0002d177: AF := unknown[bits]:u1
.address 0x4070F4
0002d17a: PF := ~low:1[let $1 = #6259 >> 4 ^ #6259 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4070F4
0002d17d: SF := high:1[#6259]
.address 0x4070F4
0002d180: ZF := 0 = #6259
.address 0x4070F7
0002d18a: when ~ZF goto %0002d184
0004476e: goto %0003dc87

.address 0x407170
0002d184: 
.address 0x407170
0002d194: RBP := 0x416A64
.address 0x407177
0002d19b: RDI := 0x621220
.address 0x40717E
0002d1a2: R13 := 0x14
.address 0x407184
0002d1a9: R12 := RSP
.address 0x407187
0002d1b0: R15 := 0x621220
.address 0x40718E
0002d1b9: RSP := RSP - 8
.address 0x40718E
0002d1bc: mem := mem with [RSP, el]:u64 <- 0x407193
.address 0x40718E
0002d1bf: call @sub_403b70 with return %0002d1c1

.address 0x407193
0002d1c1: 
.address 0x407193
0002d1c6: R14 := low:64[RBP + 0x2C]
.address 0x407197
0002d1cd: RBX := RBP
.address 0x40719A
0002d1d5: goto %0002d1d1

.address 0x4071A7
0002d1d1: 
.address 0x4071A7
0002d1e1: RSI := 0
.address 0x4071A7
0002d1e4: AF := unknown[bits]:u1
.address 0x4071A7
0002d1e7: ZF := 1
.address 0x4071A7
0002d1ea: PF := 1
.address 0x4071A7
0002d1ed: OF := 0
.address 0x4071A7
0002d1f0: CF := 0
.address 0x4071A7
0002d1f3: SF := 0
.address 0x4071A9
0002d1fa: RDX := R12
.address 0x4071AC
0002d201: RDI := pad:64[low:32[R13]]
.address 0x4071AF
0002d20a: RSP := RSP - 8
.address 0x4071AF
0002d20d: mem := mem with [RSP, el]:u64 <- 0x4071B4
.address 0x4071AF
0002d210: call @sub_403860 with return %0002d212

.address 0x4071B4
0002d212: 
.address 0x4071B4
0002d21d: #6261 := mem[RSP, el]:u64 - 1
.address 0x4071B4
0002d220: CF := mem[RSP, el]:u64 < 1
.address 0x4071B4
0002d223: OF := high:1[(mem[RSP, el]:u64 ^ 1) & (mem[RSP, el]:u64 ^ #6261)]
.address 0x4071B4
0002d226: AF := 0x10 = (0x10 & (#6261 ^ mem[RSP, el]:u64 ^ 1))
.address 0x4071B4
0002d229: PF := ~low:1[let $1 = #6261 >> 4 ^ #6261 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4071B4
0002d22c: SF := high:1[#6261]
.address 0x4071B4
0002d22f: ZF := 0 = #6261
.address 0x4071B9
0002d239: when ZF goto %0002d233
0004476f: goto %0003dc67

.address 0x4071BB
0003dc67: 
.address 0x4071BB
0003dc6c: RSI := pad:64[low:32[R13]]
.address 0x4071BE
0003dc73: RDI := R15
.address 0x4071C1
0003dc7c: RSP := RSP - 8
.address 0x4071C1
0003dc7f: mem := mem with [RSP, el]:u64 <- 0x4071C6
.address 0x4071C1
0003dc82: call @sub_403e30 with return %0002d233

.address 0x4071C6
0002d233: 
.address 0x4071C6
0002d249: #6263 := RBX - R14
.address 0x4071C6
0002d24c: CF := RBX < R14
.address 0x4071C6
0002d24f: OF := high:1[(RBX ^ R14) & (RBX ^ #6263)]
.address 0x4071C6
0002d252: AF := 0x10 = (0x10 & (#6263 ^ RBX ^ R14))
.address 0x4071C6
0002d255: PF := ~low:1[let $1 = #6263 >> 4 ^ #6263 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4071C6
0002d258: SF := high:1[#6263]
.address 0x4071C6
0002d25b: ZF := 0 = #6263
.address 0x4071C9
0002d265: when ~ZF goto %0002d25f
00044770: goto %0002d294

.address 0x4071CB
0002d294: 
.address 0x4071CB
0002d299: YMM0 := extract:255:128[YMM0].pad:128[mem[0x621220, el]:u128]
.address 0x4071D3
0002d2a0: R14 := 0x14
.address 0x4071D9
0002d2a7: mem := mem with [RSP + 0x88, el]:u32 <- 0x10000000
.address 0x4071E4
0002d2ae: R13 := 0x621220
.address 0x4071EB
0002d2b5: R15 := 0x405990
.address 0x4071F2
0002d2bc: mem := mem with [RSP + 8, el]:u128 <- low:128[YMM0]
.address 0x4071F7
0002d2c3: YMM0 := extract:255:128[YMM0].pad:128[mem[0x621230, el]:u128]
.address 0x4071FF
0002d2ca: mem := mem with [RSP + 0x18, el]:u128 <- low:128[YMM0]
.address 0x407204
0002d2d1: YMM0 := extract:255:128[YMM0].pad:128[mem[0x621240, el]:u128]
.address 0x40720C
0002d2d8: mem := mem with [RSP + 0x28, el]:u128 <- low:128[YMM0]
.address 0x407211
0002d2df: YMM0 := extract:255:128[YMM0].pad:128[mem[0x621250, el]:u128]
.address 0x407219
0002d2e6: mem := mem with [RSP + 0x38, el]:u128 <- low:128[YMM0]
.address 0x40721E
0002d2ed: YMM0 := extract:255:128[YMM0].pad:128[mem[0x621260, el]:u128]
.address 0x407226
0002d2f4: mem := mem with [RSP + 0x48, el]:u128 <- low:128[YMM0]
.address 0x40722B
0002d2fb: YMM0 := extract:255:128[YMM0].pad:128[mem[0x621270, el]:u128]
.address 0x407233
0002d302: mem := mem with [RSP + 0x58, el]:u128 <- low:128[YMM0]
.address 0x407238
0002d309: YMM0 := extract:255:128[YMM0].pad:128[mem[0x621280, el]:u128]
.address 0x407240
0002d310: mem := mem with [RSP + 0x68, el]:u128 <- low:128[YMM0]
.address 0x407245
0002d317: YMM0 := extract:255:128[YMM0].pad:128[mem[0x621290, el]:u128]
.address 0x40724D
0002d31e: mem := mem with [RSP + 0x78, el]:u128 <- low:128[YMM0]
.address 0x407252
0002d326: goto %0002d322

.address 0x407260
0002d322: 
.address 0x407260
0002d32c: RSI := pad:64[low:32[R14]]
.address 0x407263
0002d333: RDI := R13
.address 0x407266
0002d33c: RSP := RSP - 8
.address 0x407266
0002d33f: mem := mem with [RSP, el]:u64 <- 0x40726B
.address 0x407266
0002d342: call @sub_403dc0 with return %0002d344

.address 0x40726B
0002d344: 
.address 0x40726B
0002d34f: #6268 := low:32[RAX]
.address 0x40726B
0002d352: OF := 0
.address 0x40726B
0002d355: CF := 0
.address 0x40726B
0002d358: AF := unknown[bits]:u1
.address 0x40726B
0002d35b: PF := ~low:1[let $1 = #6268 >> 4 ^ #6268 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40726B
0002d35e: SF := high:1[#6268]
.address 0x40726B
0002d361: ZF := 0 = #6268
.address 0x40726D
0002d36b: when ZF goto %0002d365
00044771: goto %0003dbf4

.address 0x40726F
0003dbf4: 
.address 0x40726F
0003dbf9: RAX := 0x406980
.address 0x407276
0003dc06: #8503 := low:32[R14] - 0x14
.address 0x407276
0003dc09: CF := low:32[R14] < 0x14
.address 0x407276
0003dc0c: OF := high:1[(low:32[R14] ^ 0x14) & (low:32[R14] ^ #8503)]
.address 0x407276
0003dc0f: AF := 0x10 = (0x10 & (#8503 ^ low:32[R14] ^ 0x14))
.address 0x407276
0003dc12: PF := ~low:1[let $1 = #8503 >> 4 ^ #8503 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407276
0003dc15: SF := high:1[#8503]
.address 0x407276
0003dc18: ZF := 0 = #8503
.address 0x40727A
0003dc1f: RSI := R12
.address 0x40727D
0003dc26: RDI := pad:64[low:32[R14]]
.address 0x407280
0003dc2d: RAX := if ~ZF then R15 else RAX
.address 0x407284
0003dc3a: RDX := 0
.address 0x407284
0003dc3d: AF := unknown[bits]:u1
.address 0x407284
0003dc40: ZF := 1
.address 0x407284
0003dc43: PF := 1
.address 0x407284
0003dc46: OF := 0
.address 0x407284
0003dc49: CF := 0
.address 0x407284
0003dc4c: SF := 0
.address 0x407286
0003dc53: mem := mem with [RSP, el]:u64 <- RAX
.address 0x40728A
0003dc5c: RSP := RSP - 8
.address 0x40728A
0003dc5f: mem := mem with [RSP, el]:u64 <- 0x40728F
.address 0x40728A
0003dc62: call @sub_403860 with return %0002d365

.address 0x40728F
0002d365: 
.address 0x40728F
0002d37b: #6270 := RBP - RBX
.address 0x40728F
0002d37e: CF := RBP < RBX
.address 0x40728F
0002d381: OF := high:1[(RBP ^ RBX) & (RBP ^ #6270)]
.address 0x40728F
0002d384: AF := 0x10 = (0x10 & (#6270 ^ RBP ^ RBX))
.address 0x40728F
0002d387: PF := ~low:1[let $1 = #6270 >> 4 ^ #6270 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40728F
0002d38a: SF := high:1[#6270]
.address 0x40728F
0002d38d: ZF := 0 = #6270
.address 0x407292
0002d397: when ~ZF goto %0002d391
00044772: goto %0002d3c6

.address 0x407294
0002d3c6: 
.address 0x407294
0002d3cc: goto %0002d3c8

.address 0x407258
0002d391: 
.address 0x407258
0002d3a1: R14 := pad:64[mem[RBP, el]:u32]
.address 0x40725C
0002d3af: #6272 := RBP
.address 0x40725C
0002d3b2: RBP := RBP + 4
.address 0x40725C
0002d3b5: CF := RBP < #6272
.address 0x40725C
0002d3b8: OF := ~high:1[#6272] & (high:1[#6272] | high:1[RBP]) & ~(high:1[#6272] & high:1[RBP])
.address 0x40725C
0002d3bb: AF := 0x10 = (0x10 & (RBP ^ #6272 ^ 4))
.address 0x40725C
0002d3be: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40725C
0002d3c1: SF := high:1[RBP]
.address 0x40725C
0002d3c4: ZF := 0 = RBP
00044773: goto %0002d322

.address 0x4071A0
0002d25f: 
.address 0x4071A0
0002d26f: R13 := pad:64[mem[RBX, el]:u32]
.address 0x4071A3
0002d27d: #6265 := RBX
.address 0x4071A3
0002d280: RBX := RBX + 4
.address 0x4071A3
0002d283: CF := RBX < #6265
.address 0x4071A3
0002d286: OF := ~high:1[#6265] & (high:1[#6265] | high:1[RBX]) & ~(high:1[#6265] & high:1[RBX])
.address 0x4071A3
0002d289: AF := 0x10 = (0x10 & (RBX ^ #6265 ^ 4))
.address 0x4071A3
0002d28c: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4071A3
0002d28f: SF := high:1[RBX]
.address 0x4071A3
0002d292: ZF := 0 = RBX
00044774: goto %0002d1d1

.address 0x4070F9
0003dc87: 
.address 0x4070F9
0003dc8c: RBX := 0x416A64
.address 0x407100
0003dc93: RBP := 0x14
.address 0x407105
0003dc9a: R12 := 0x621220
.address 0x40710C
0003dca1: R13 := low:64[RBX + 0x2C]
.address 0x407110
0003dca9: goto %0003dca5

.address 0x407123
0003dca5: 
.address 0x407123
0003dcaf: RSI := pad:64[low:32[RBP]]
.address 0x407125
0003dcb6: RDI := R12
.address 0x407128
0003dcbf: RSP := RSP - 8
.address 0x407128
0003dcc2: mem := mem with [RSP, el]:u64 <- 0x40712D
.address 0x407128
0003dcc5: call @sub_403dc0 with return %0003dcc7

.address 0x40712D
0003dcc7: 
.address 0x40712D
0003dcd2: #8505 := low:32[RAX]
.address 0x40712D
0003dcd5: OF := 0
.address 0x40712D
0003dcd8: CF := 0
.address 0x40712D
0003dcdb: AF := unknown[bits]:u1
.address 0x40712D
0003dcde: PF := ~low:1[let $1 = #8505 >> 4 ^ #8505 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40712D
0003dce1: SF := high:1[#8505]
.address 0x40712D
0003dce4: ZF := 0 = #8505
.address 0x40712F
0003dcee: when ZF goto %0003dce8
00044775: goto %0003dd49

.address 0x407131
0003dd49: 
.address 0x407131
0003dd54: RSI := 0
.address 0x407131
0003dd57: AF := unknown[bits]:u1
.address 0x407131
0003dd5a: ZF := 1
.address 0x407131
0003dd5d: PF := 1
.address 0x407131
0003dd60: OF := 0
.address 0x407131
0003dd63: CF := 0
.address 0x407131
0003dd66: SF := 0
.address 0x407133
0003dd6d: RDI := pad:64[low:32[RBP]]
.address 0x407135
0003dd76: RSP := RSP - 8
.address 0x407135
0003dd79: mem := mem with [RSP, el]:u64 <- 0x40713A
.address 0x407135
0003dd7c: call @sub_403b30 with return %0003dd7e

.address 0x40713A
0003dd7e: 
.address 0x40713A
0003dd89: #8512 := RBX - R13
.address 0x40713A
0003dd8c: CF := RBX < R13
.address 0x40713A
0003dd8f: OF := high:1[(RBX ^ R13) & (RBX ^ #8512)]
.address 0x40713A
0003dd92: AF := 0x10 = (0x10 & (#8512 ^ RBX ^ R13))
.address 0x40713A
0003dd95: PF := ~low:1[let $1 = #8512 >> 4 ^ #8512 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40713A
0003dd98: SF := high:1[#8512]
.address 0x40713A
0003dd9b: ZF := 0 = #8512
.address 0x40713D
0003dda4: when ~ZF goto %0003dd1f
00044776: goto %0002d3c8

.address 0x407118
0003dce8: 
.address 0x407118
0003dcfe: #8507 := RBX - R13
.address 0x407118
0003dd01: CF := RBX < R13
.address 0x407118
0003dd04: OF := high:1[(RBX ^ R13) & (RBX ^ #8507)]
.address 0x407118
0003dd07: AF := 0x10 = (0x10 & (#8507 ^ RBX ^ R13))
.address 0x407118
0003dd0a: PF := ~low:1[let $1 = #8507 >> 4 ^ #8507 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407118
0003dd0d: SF := high:1[#8507]
.address 0x407118
0003dd10: ZF := 0 = #8507
.address 0x40711B
0003dd19: when ZF goto %0002d3c8
00044777: goto %0003dd1f

.address 0x40713F
0002d3c8: 
.address 0x40713F
0002d3d2: RAX := mem[RSP + 0x98, el]:u64
.address 0x407147
0002d3df: RAX := RAX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x407147
0002d3e2: OF := 0
.address 0x407147
0002d3e5: CF := 0
.address 0x407147
0002d3e8: AF := unknown[bits]:u1
.address 0x407147
0002d3eb: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407147
0002d3ee: SF := high:1[RAX]
.address 0x407147
0002d3f1: ZF := 0 = RAX
.address 0x407150
0002d3fb: when ~ZF goto %0002d3f5
00044778: goto %0003db7c

.address 0x407299
0002d3f5: 
.address 0x407299
0002d407: RSP := RSP - 8
.address 0x407299
0002d40a: mem := mem with [RSP, el]:u64 <- 0x40729E
.address 0x407299
0002d40d: call @sub_403970 with return %0002d40f

.address 0x40729E
0002d40f: 
00044779: call @sub_4072a0 with noreturn

.address 0x407156
0003db7c: 
.address 0x407156
0003db88: #8499 := RSP
.address 0x407156
0003db8b: RSP := RSP + 0xA8
.address 0x407156
0003db8e: CF := RSP < #8499
.address 0x407156
0003db91: OF := ~high:1[#8499] & (high:1[#8499] | high:1[RSP]) & ~(high:1[#8499] & high:1[RSP])
.address 0x407156
0003db94: AF := 0x10 = (0x10 & (RSP ^ #8499 ^ 0xA8))
.address 0x407156
0003db97: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407156
0003db9a: SF := high:1[RSP]
.address 0x407156
0003db9d: ZF := 0 = RSP
.address 0x40715D
0003dba5: RBX := mem[RSP, el]:u64
.address 0x40715D
0003dba8: RSP := RSP + 8
.address 0x40715E
0003dbb0: RBP := mem[RSP, el]:u64
.address 0x40715E
0003dbb3: RSP := RSP + 8
.address 0x40715F
0003dbbb: R12 := mem[RSP, el]:u64
.address 0x40715F
0003dbbe: RSP := RSP + 8
.address 0x407161
0003dbc6: R13 := mem[RSP, el]:u64
.address 0x407161
0003dbc9: RSP := RSP + 8
.address 0x407163
0003dbd1: R14 := mem[RSP, el]:u64
.address 0x407163
0003dbd4: RSP := RSP + 8
.address 0x407165
0003dbdc: R15 := mem[RSP, el]:u64
.address 0x407165
0003dbdf: RSP := RSP + 8
.address 0x407167
0003dbe8: #8502 := mem[RSP, el]:u64
.address 0x407167
0003dbeb: RSP := RSP + 8
.address 0x407167
0003dbef: call #8502 with noreturn

.address 0x40711D
0003dd1f: 
.address 0x40711D
0003dd24: RBP := pad:64[mem[RBX, el]:u32]
.address 0x40711F
0003dd32: #8509 := RBX
.address 0x40711F
0003dd35: RBX := RBX + 4
.address 0x40711F
0003dd38: CF := RBX < #8509
.address 0x40711F
0003dd3b: OF := ~high:1[#8509] & (high:1[#8509] | high:1[RBX]) & ~(high:1[#8509] & high:1[RBX])
.address 0x40711F
0003dd3e: AF := 0x10 = (0x10 & (RBX ^ #8509 ^ 4))
.address 0x40711F
0003dd41: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40711F
0003dd44: SF := high:1[RBX]
.address 0x40711F
0003dd47: ZF := 0 = RBX
0004477a: goto %0003dca5


.address 0x4072A0
00043edc: sub sub_4072a0()
.address 0x4072A0
0002d412: 
.address 0x4072A0
0002d41d: #6276 := mem[0x620088, el]:u64
.address 0x4072A0
0002d420: CF := mem[0x620088, el]:u64 < 0
.address 0x4072A0
0002d423: OF := high:1[mem[0x620088, el]:u64 & (mem[0x620088, el]:u64 ^ #6276)]
.address 0x4072A0
0002d426: AF := 0x10 = (0x10 & (#6276 ^ mem[0x620088, el]:u64))
.address 0x4072A0
0002d429: PF := ~low:1[let $1 = #6276 >> 4 ^ #6276 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4072A0
0002d42c: SF := high:1[#6276]
.address 0x4072A0
0002d42f: ZF := 0 = #6276
.address 0x4072A8
0002d439: when ZF goto %0002d433
0004477b: goto %0003db6b

.address 0x4072B8
0002d433: 
.address 0x4072B8
0002d443: RDI := 0x620060
.address 0x4072BF
0002d451: #6278 := RSP
.address 0x4072BF
0002d454: RSP := RSP - 8
.address 0x4072BF
0002d457: CF := #6278 < 8
.address 0x4072BF
0002d45a: OF := high:1[(#6278 ^ 8) & (#6278 ^ RSP)]
.address 0x4072BF
0002d45d: AF := 0x10 = (0x10 & (RSP ^ #6278 ^ 8))
.address 0x4072BF
0002d460: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4072BF
0002d463: SF := high:1[RSP]
.address 0x4072BF
0002d466: ZF := 0 = RSP
.address 0x4072C3
0002d470: RSP := RSP - 8
.address 0x4072C3
0002d473: mem := mem with [RSP, el]:u64 <- 0x4072C8
.address 0x4072C3
0002d476: call @sub_4072f0 with return %0003db1e

.address 0x4072C8
0003db1e: 
.address 0x4072C8
0003db23: RDI := 0x620090
.address 0x4072CF
0003db2c: RSP := RSP - 8
.address 0x4072CF
0003db2f: mem := mem with [RSP, el]:u64 <- 0x4072D4
.address 0x4072CF
0003db32: call @sub_4072f0 with return %0003db34

.address 0x4072D4
0003db34: 
.address 0x4072D4
0003db39: RDI := 0x620070
.address 0x4072DB
0003db47: #8496 := RSP
.address 0x4072DB
0003db4a: RSP := RSP + 8
.address 0x4072DB
0003db4d: CF := RSP < #8496
.address 0x4072DB
0003db50: OF := ~high:1[#8496] & (high:1[#8496] | high:1[RSP]) & ~(high:1[#8496] & high:1[RSP])
.address 0x4072DB
0003db53: AF := 0x10 = (0x10 & (RSP ^ #8496 ^ 8))
.address 0x4072DB
0003db56: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4072DB
0003db59: SF := high:1[RSP]
.address 0x4072DB
0003db5c: ZF := 0 = RSP
.address 0x4072DF
0003db63: call @sub_4072f0 with noreturn

.address 0x4072AA
0003db6b: 
.address 0x4072AA
0003db70: RDI := 0x620080
.address 0x4072B1
0003db77: call @sub_4072f0 with noreturn


.address 0x4072F0
00043ede: sub sub_4072f0()
.address 0x4072F0
0002d46c: 
.address 0x4072F0
0002d482: #6281 := mem[0x621310]
.address 0x4072F0
0002d485: CF := mem[0x621310] < 0
.address 0x4072F0
0002d488: OF := high:1[mem[0x621310] & (mem[0x621310] ^ #6281)]
.address 0x4072F0
0002d48b: AF := 0x10 = (0x10 & (#6281 ^ mem[0x621310]))
.address 0x4072F0
0002d48e: PF := ~low:1[let $1 = #6281 >> 4 ^ #6281 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4072F0
0002d491: SF := high:1[#6281]
.address 0x4072F0
0002d494: ZF := 0 = #6281
.address 0x4072F7
0002d49d: #6283 := RBX
.address 0x4072F7
0002d4a0: RSP := RSP - 8
.address 0x4072F7
0002d4a3: mem := mem with [RSP, el]:u64 <- #6283
.address 0x4072F8
0002d4aa: RBX := RDI
.address 0x4072FB
0002d4b4: when ZF goto %0002d4ae
0004477c: goto %0002d529

.address 0x407320
0002d4ae: 
.address 0x407320
0002d4be: RDI := 1
.address 0x407325
0002d4c5: mem := mem with [0x621310] <- 1
.address 0x40732C
0002d4ce: RSP := RSP - 8
.address 0x40732C
0002d4d1: mem := mem with [RSP, el]:u64 <- 0x407331
.address 0x40732C
0002d4d4: call @sub_403bd0 with return %0002d4d6

.address 0x407331
0002d4d6: 
.address 0x407331
0002d4e1: #6284 := low:32[RAX]
.address 0x407331
0002d4e4: OF := 0
.address 0x407331
0002d4e7: CF := 0
.address 0x407331
0002d4ea: AF := unknown[bits]:u1
.address 0x407331
0002d4ed: PF := ~low:1[let $1 = #6284 >> 4 ^ #6284 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407331
0002d4f0: SF := high:1[#6284]
.address 0x407331
0002d4f3: ZF := 0 = #6284
.address 0x407333
0002d4fd: when ~SF goto %0002d4f7
0004477d: goto %0003db05

.address 0x407340
0002d4f7: 
.address 0x407340
0002d507: RDI := 1
.address 0x407345
0002d510: RSP := RSP - 8
.address 0x407345
0002d513: mem := mem with [RSP, el]:u64 <- 0x40734A
.address 0x407345
0002d516: call @sub_4070d0 with return %0002d518

.address 0x40734A
0002d518: 
.address 0x40734A
0002d51f: RSP := RSP - 8
.address 0x40734A
0002d522: mem := mem with [RSP, el]:u64 <- 0x40734F
.address 0x40734A
0002d525: call @sub_4072a0 with return %0002d527

.address 0x40734F
0002d527: 
.address 0x40734F
0002d52d: goto %0002d529

.address 0x407335
0003db05: 
.address 0x407335
0003db0c: RSP := RSP - 8
.address 0x407335
0003db0f: mem := mem with [RSP, el]:u64 <- 0x40733A
.address 0x407335
0003db12: call @sub_4072a0 with return %0003db14

.address 0x40733A
0003db14: 
.address 0x40733A
0003db19: goto %0002d529

.address 0x4072FD
0002d529: 
.address 0x4072FD
0002d533: RDI := mem[RBX + 8, el]:u64
.address 0x407301
0002d53a: RSI := mem[RBX, el]:u64
.address 0x407304
0002d541: RDX := 1
.address 0x407309
0002d549: RBX := mem[RSP, el]:u64
.address 0x407309
0002d54c: RSP := RSP + 8
.address 0x40730A
0002d553: RCX := mem[0x620288, el]:u64
.address 0x407311
0002d55a: call @sub_403c80 with noreturn


.address 0x407360
00043ee1: sub sub_407360()
.address 0x407360
0002d565: 
.address 0x407360
0002d56c: #6286 := RBP
.address 0x407360
0002d56f: RSP := RSP - 8
.address 0x407360
0002d572: mem := mem with [RSP, el]:u64 <- #6286
.address 0x407361
0002d57b: #6287 := RBX
.address 0x407361
0002d57e: RSP := RSP - 8
.address 0x407361
0002d581: mem := mem with [RSP, el]:u64 <- #6287
.address 0x407362
0002d58f: #6288 := RSP
.address 0x407362
0002d592: RSP := RSP - 0x98
.address 0x407362
0002d595: CF := #6288 < 0x98
.address 0x407362
0002d598: OF := high:1[(#6288 ^ 0x98) & (#6288 ^ RSP)]
.address 0x407362
0002d59b: AF := 0x10 = (0x10 & (RSP ^ #6288 ^ 0x98))
.address 0x407362
0002d59e: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407362
0002d5a1: SF := high:1[RSP]
.address 0x407362
0002d5a4: ZF := 0 = RSP
.address 0x407369
0002d5ab: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x407372
0002d5b2: mem := mem with [RSP + 0x88, el]:u64 <- RAX
.address 0x40737A
0002d5bf: RAX := 0
.address 0x40737A
0002d5c2: AF := unknown[bits]:u1
.address 0x40737A
0002d5c5: ZF := 1
.address 0x40737A
0002d5c8: PF := 1
.address 0x40737A
0002d5cb: OF := 0
.address 0x40737A
0002d5ce: CF := 0
.address 0x40737A
0002d5d1: SF := 0
.address 0x40737C
0002d5d8: RBP := RSP
.address 0x40737F
0002d5e0: goto %0002d5dc

.address 0x4073D9
0002d5dc: 
.address 0x4073D9
0002d5e6: RAX := pad:64[mem[0x621218, el]:u32]
.address 0x4073DF
0002d5f3: #6291 := low:32[RAX]
.address 0x4073DF
0002d5f6: OF := 0
.address 0x4073DF
0002d5f9: CF := 0
.address 0x4073DF
0002d5fc: AF := unknown[bits]:u1
.address 0x4073DF
0002d5ff: PF := ~low:1[let $1 = #6291 >> 4 ^ #6291 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4073DF
0002d602: SF := high:1[#6291]
.address 0x4073DF
0002d605: ZF := 0 = #6291
.address 0x4073E1
0002d60f: when ~ZF goto %0002d609
0004477e: goto %0003dacf

.address 0x4073E3
0003dacf: 
.address 0x4073E3
0003dad4: RAX := pad:64[mem[0x621214, el]:u32]
.address 0x4073E9
0003dae1: #8494 := low:32[RAX]
.address 0x4073E9
0003dae4: OF := 0
.address 0x4073E9
0003dae7: CF := 0
.address 0x4073E9
0003daea: AF := unknown[bits]:u1
.address 0x4073E9
0003daed: PF := ~low:1[let $1 = #8494 >> 4 ^ #8494 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4073E9
0003daf0: SF := high:1[#8494]
.address 0x4073E9
0003daf3: ZF := 0 = #8494
.address 0x4073EB
0003dafc: when ZF goto %0002d75d
0004477f: goto %0002d609

.address 0x407428
0002d75d: 
.address 0x407428
0002d762: RAX := mem[RSP + 0x88, el]:u64
.address 0x407430
0002d76f: RAX := RAX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x407430
0002d772: OF := 0
.address 0x407430
0002d775: CF := 0
.address 0x407430
0002d778: AF := unknown[bits]:u1
.address 0x407430
0002d77b: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407430
0002d77e: SF := high:1[RAX]
.address 0x407430
0002d781: ZF := 0 = RAX
.address 0x407439
0002d78b: when ~ZF goto %0002d785
00044780: goto %0003da1f

.address 0x407445
0002d785: 
.address 0x407445
0002d797: RSP := RSP - 8
.address 0x407445
0002d79a: mem := mem with [RSP, el]:u64 <- 0x40744A
.address 0x407445
0002d79d: call @sub_403970 with return %0002d79f

.address 0x40744A
0002d79f: 
00044781: call @sub_407450 with noreturn

.address 0x40743B
0003da1f: 
.address 0x40743B
0003da2b: #8487 := RSP
.address 0x40743B
0003da2e: RSP := RSP + 0x98
.address 0x40743B
0003da31: CF := RSP < #8487
.address 0x40743B
0003da34: OF := ~high:1[#8487] & (high:1[#8487] | high:1[RSP]) & ~(high:1[#8487] & high:1[RSP])
.address 0x40743B
0003da37: AF := 0x10 = (0x10 & (RSP ^ #8487 ^ 0x98))
.address 0x40743B
0003da3a: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40743B
0003da3d: SF := high:1[RSP]
.address 0x40743B
0003da40: ZF := 0 = RSP
.address 0x407442
0003da48: RBX := mem[RSP, el]:u64
.address 0x407442
0003da4b: RSP := RSP + 8
.address 0x407443
0003da53: RBP := mem[RSP, el]:u64
.address 0x407443
0003da56: RSP := RSP + 8
.address 0x407444
0003da5f: #8490 := mem[RSP, el]:u64
.address 0x407444
0003da62: RSP := RSP + 8
.address 0x407444
0003da66: call #8490 with noreturn

.address 0x4073ED
0002d609: 
.address 0x4073ED
0002d61f: #6293 := mem[0x621310]
.address 0x4073ED
0002d622: CF := mem[0x621310] < 0
.address 0x4073ED
0002d625: OF := high:1[mem[0x621310] & (mem[0x621310] ^ #6293)]
.address 0x4073ED
0002d628: AF := 0x10 = (0x10 & (#6293 ^ mem[0x621310]))
.address 0x4073ED
0002d62b: PF := ~low:1[let $1 = #6293 >> 4 ^ #6293 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4073ED
0002d62e: SF := high:1[#6293]
.address 0x4073ED
0002d631: ZF := 0 = #6293
.address 0x4073F4
0002d63b: when ZF goto %0002d635
00044782: goto %0003da99

.address 0x4073F6
0003da99: 
.address 0x4073F6
0003da9e: RDI := 0x620060
.address 0x4073FD
0003daa7: RSP := RSP - 8
.address 0x4073FD
0003daaa: mem := mem with [RSP, el]:u64 <- 0x407402
.address 0x4073FD
0003daad: call @sub_4072f0 with return %0003daaf

.address 0x407402
0003daaf: 
.address 0x407402
0003dab4: RDI := 0x620070
.address 0x407409
0003dabd: RSP := RSP - 8
.address 0x407409
0003dac0: mem := mem with [RSP, el]:u64 <- 0x40740E
.address 0x407409
0003dac3: call @sub_4072f0 with return %0003dac5

.address 0x40740E
0003dac5: 
.address 0x40740E
0003daca: goto %0002d635

.address 0x407388
0002d635: 
.address 0x407388
0002d645: RDI := mem[0x620288, el]:u64
.address 0x40738F
0002d64e: RSP := RSP - 8
.address 0x40738F
0002d651: mem := mem with [RSP, el]:u64 <- 0x407394
.address 0x40738F
0002d654: call @sub_403e00 with return %0002d656

.address 0x407394
0002d656: 
.address 0x407394
0002d65b: RSI := 0x621220
.address 0x40739B
0002d668: RDI := 0
.address 0x40739B
0002d66b: AF := unknown[bits]:u1
.address 0x40739B
0002d66e: ZF := 1
.address 0x40739B
0002d671: PF := 1
.address 0x40739B
0002d674: OF := 0
.address 0x40739B
0002d677: CF := 0
.address 0x40739B
0002d67a: SF := 0
.address 0x40739D
0002d681: RDX := RBP
.address 0x4073A0
0002d68a: RSP := RSP - 8
.address 0x4073A0
0002d68d: mem := mem with [RSP, el]:u64 <- 0x4073A5
.address 0x4073A0
0002d690: call @sub_4037b0 with return %0002d692

.address 0x4073A5
0002d692: 
.address 0x4073A5
0002d697: RBX := pad:64[mem[0x621218, el]:u32]
.address 0x4073AB
0002d69e: RAX := pad:64[mem[0x621214, el]:u32]
.address 0x4073B1
0002d6ab: #6295 := low:32[RAX]
.address 0x4073B1
0002d6ae: OF := 0
.address 0x4073B1
0002d6b1: CF := 0
.address 0x4073B1
0002d6b4: AF := unknown[bits]:u1
.address 0x4073B1
0002d6b7: PF := ~low:1[let $1 = #6295 >> 4 ^ #6295 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4073B1
0002d6ba: SF := high:1[#6295]
.address 0x4073B1
0002d6bd: ZF := 0 = #6295
.address 0x4073B3
0002d6c7: when ZF goto %0002d6c1
00044783: goto %0003da68

.address 0x407418
0002d6c1: 
.address 0x407418
0002d6d7: RSI := 0
.address 0x407418
0002d6da: AF := unknown[bits]:u1
.address 0x407418
0002d6dd: ZF := 1
.address 0x407418
0002d6e0: PF := 1
.address 0x407418
0002d6e3: OF := 0
.address 0x407418
0002d6e6: CF := 0
.address 0x407418
0002d6e9: SF := 0
.address 0x40741A
0002d6f0: RDI := pad:64[low:32[RBX]]
.address 0x40741C
0002d6f9: RSP := RSP - 8
.address 0x40741C
0002d6fc: mem := mem with [RSP, el]:u64 <- 0x407421
.address 0x40741C
0002d6ff: call @sub_403b30 with return %0002d701

.address 0x407421
0002d701: 
.address 0x407421
0002d707: goto %0002d703

.address 0x4073B5
0003da68: 
.address 0x4073B5
0003da74: #8491 := low:32[RAX]
.address 0x4073B5
0003da77: RAX := pad:64[low:32[RAX] - 1]
.address 0x4073B5
0003da7a: CF := #8491 < 1
.address 0x4073B5
0003da7d: OF := high:1[(#8491 ^ 1) & (#8491 ^ low:32[RAX])]
.address 0x4073B5
0003da80: AF := 0x10 = (0x10 & (low:32[RAX] ^ #8491 ^ 1))
.address 0x4073B5
0003da83: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4073B5
0003da86: SF := high:1[low:32[RAX]]
.address 0x4073B5
0003da89: ZF := 0 = low:32[RAX]
.address 0x4073B8
0003da90: RBX := 0x13
.address 0x4073BD
0003da97: mem := mem with [0x621214, el]:u32 <- low:32[RAX]
00044784: goto %0002d703

.address 0x4073C3
0002d703: 
.address 0x4073C3
0002d70d: RDI := pad:64[low:32[RBX]]
.address 0x4073C5
0002d716: RSP := RSP - 8
.address 0x4073C5
0002d719: mem := mem with [RSP, el]:u64 <- 0x4073CA
.address 0x4073C5
0002d71c: call @sub_4037d0 with return %0002d71e

.address 0x4073CA
0002d71e: 
.address 0x4073CA
0002d729: RDX := 0
.address 0x4073CA
0002d72c: AF := unknown[bits]:u1
.address 0x4073CA
0002d72f: ZF := 1
.address 0x4073CA
0002d732: PF := 1
.address 0x4073CA
0002d735: OF := 0
.address 0x4073CA
0002d738: CF := 0
.address 0x4073CA
0002d73b: SF := 0
.address 0x4073CC
0002d742: RSI := RBP
.address 0x4073CF
0002d749: RDI := 2
.address 0x4073D4
0002d752: RSP := RSP - 8
.address 0x4073D4
0002d755: mem := mem with [RSP, el]:u64 <- 0x4073D9
.address 0x4073D4
0002d758: call @sub_4037b0 with return %0002d5dc


.address 0x407450
00043ee9: sub sub_407450()
.address 0x407450
0002d7a2: 
.address 0x407450
0002d7ad: #6298 := mem[0x621312]
.address 0x407450
0002d7b0: CF := mem[0x621312] < 0
.address 0x407450
0002d7b3: OF := high:1[mem[0x621312] & (mem[0x621312] ^ #6298)]
.address 0x407450
0002d7b6: AF := 0x10 = (0x10 & (#6298 ^ mem[0x621312]))
.address 0x407450
0002d7b9: PF := ~low:1[let $1 = #6298 >> 4 ^ #6298 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407450
0002d7bc: SF := high:1[#6298]
.address 0x407450
0002d7bf: ZF := 0 = #6298
.address 0x407457
0002d7c9: when ZF goto %0002d7c3
00044785: goto %0003d987

.address 0x407470
0002d7c3: 
.address 0x407470
0002d7d5: #6300 := mem[RSP, el]:u64
.address 0x407470
0002d7d8: RSP := RSP + 8
.address 0x407470
0002d7dc: call #6300 with noreturn

.address 0x407459
0003d987: 
.address 0x407459
0003d993: #8478 := RSP
.address 0x407459
0003d996: RSP := RSP - 8
.address 0x407459
0003d999: CF := #8478 < 8
.address 0x407459
0003d99c: OF := high:1[(#8478 ^ 8) & (#8478 ^ RSP)]
.address 0x407459
0003d99f: AF := 0x10 = (0x10 & (RSP ^ #8478 ^ 8))
.address 0x407459
0003d9a2: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407459
0003d9a5: SF := high:1[RSP]
.address 0x407459
0003d9a8: ZF := 0 = RSP
.address 0x40745D
0003d9af: RDI := 4
.address 0x407462
0003d9b8: RSP := RSP - 8
.address 0x407462
0003d9bb: mem := mem with [RSP, el]:u64 <- 0x407467
.address 0x407462
0003d9be: call @sub_405c50 with return %0003d9c0

.address 0x407467
0003d9c0: 
.address 0x407467
0003d9cb: #8481 := low:8[RAX]
.address 0x407467
0003d9ce: OF := 0
.address 0x407467
0003d9d1: CF := 0
.address 0x407467
0003d9d4: AF := unknown[bits]:u1
.address 0x407467
0003d9d7: PF := ~low:1[let $1 = #8481 >> 4 ^ #8481 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407467
0003d9da: SF := high:1[#8481]
.address 0x407467
0003d9dd: ZF := 0 = #8481
.address 0x407469
0003d9e6: when ~ZF goto %0002d7e1
00044786: goto %0003d9ec

.address 0x407478
0002d7e1: 
.address 0x407478
0002d7e6: RDI := 0x620060
.address 0x40747F
0002d7ef: RSP := RSP - 8
.address 0x40747F
0002d7f2: mem := mem with [RSP, el]:u64 <- 0x407484
.address 0x40747F
0002d7f5: call @sub_4072f0 with return %0002d7f7

.address 0x407484
0002d7f7: 
.address 0x407484
0002d7fc: RDI := 0x6200A0
.address 0x40748B
0002d805: RSP := RSP - 8
.address 0x40748B
0002d808: mem := mem with [RSP, el]:u64 <- 0x407490
.address 0x40748B
0002d80b: call @sub_4072f0 with return %0002d80d

.address 0x407490
0002d80d: 
.address 0x407490
0002d812: RDI := 0x620070
.address 0x407497
0002d820: #6301 := RSP
.address 0x407497
0002d823: RSP := RSP + 8
.address 0x407497
0002d826: CF := RSP < #6301
.address 0x407497
0002d829: OF := ~high:1[#6301] & (high:1[#6301] | high:1[RSP]) & ~(high:1[#6301] & high:1[RSP])
.address 0x407497
0002d82c: AF := 0x10 = (0x10 & (RSP ^ #6301 ^ 8))
.address 0x407497
0002d82f: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407497
0002d832: SF := high:1[RSP]
.address 0x407497
0002d835: ZF := 0 = RSP
.address 0x40749B
0002d83c: call @sub_4072f0 with noreturn

.address 0x40746B
0003d9ec: 
.address 0x40746B
0003d9f8: #8483 := RSP
.address 0x40746B
0003d9fb: RSP := RSP + 8
.address 0x40746B
0003d9fe: CF := RSP < #8483
.address 0x40746B
0003da01: OF := ~high:1[#8483] & (high:1[#8483] | high:1[RSP]) & ~(high:1[#8483] & high:1[RSP])
.address 0x40746B
0003da04: AF := 0x10 = (0x10 & (RSP ^ #8483 ^ 8))
.address 0x40746B
0003da07: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40746B
0003da0a: SF := high:1[RSP]
.address 0x40746B
0003da0d: ZF := 0 = RSP
.address 0x40746F
0003da16: #8486 := mem[RSP, el]:u64
.address 0x40746F
0003da19: RSP := RSP + 8
.address 0x40746F
0003da1d: call #8486 with noreturn


.address 0x4074A0
00043eec: sub sub_4074a0()
.address 0x4074A0
0002d83e: 
.address 0x4074A0
0002d845: #6304 := R15
.address 0x4074A0
0002d848: RSP := RSP - 8
.address 0x4074A0
0002d84b: mem := mem with [RSP, el]:u64 <- #6304
.address 0x4074A2
0002d854: #6305 := R14
.address 0x4074A2
0002d857: RSP := RSP - 8
.address 0x4074A2
0002d85a: mem := mem with [RSP, el]:u64 <- #6305
.address 0x4074A4
0002d861: R14 := RDX
.address 0x4074A7
0002d86a: #6306 := R13
.address 0x4074A7
0002d86d: RSP := RSP - 8
.address 0x4074A7
0002d870: mem := mem with [RSP, el]:u64 <- #6306
.address 0x4074A9
0002d879: #6307 := R12
.address 0x4074A9
0002d87c: RSP := RSP - 8
.address 0x4074A9
0002d87f: mem := mem with [RSP, el]:u64 <- #6307
.address 0x4074AB
0002d886: R12 := RSI
.address 0x4074AE
0002d88f: #6308 := RBP
.address 0x4074AE
0002d892: RSP := RSP - 8
.address 0x4074AE
0002d895: mem := mem with [RSP, el]:u64 <- #6308
.address 0x4074AF
0002d89e: #6309 := RBX
.address 0x4074AF
0002d8a1: RSP := RSP - 8
.address 0x4074AF
0002d8a4: mem := mem with [RSP, el]:u64 <- #6309
.address 0x4074B0
0002d8ab: RBX := pad:64[low:32[RCX]]
.address 0x4074B2
0002d8b9: #6310 := RSP
.address 0x4074B2
0002d8bc: RSP := RSP - 0x68
.address 0x4074B2
0002d8bf: CF := #6310 < 0x68
.address 0x4074B2
0002d8c2: OF := high:1[(#6310 ^ 0x68) & (#6310 ^ RSP)]
.address 0x4074B2
0002d8c5: AF := 0x10 = (0x10 & (RSP ^ #6310 ^ 0x68))
.address 0x4074B2
0002d8c8: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4074B2
0002d8cb: SF := high:1[RSP]
.address 0x4074B2
0002d8ce: ZF := 0 = RSP
.address 0x4074B6
0002d8d5: R13 := mem[RDI, el]:u64
.address 0x4074B9
0002d8dc: mem := mem with [RSP + 0x30, el]:u64 <- RDI
.address 0x4074BE
0002d8e3: RDI := RDX
.address 0x4074C1
0002d8ea: mem := mem with [RSP + 0x20, el]:u64 <- R8
.address 0x4074C6
0002d8f1: RCX := mem[FS_BASE + 0x28, el]:u64
.address 0x4074CF
0002d8f8: mem := mem with [RSP + 0x58, el]:u64 <- RCX
.address 0x4074D4
0002d905: RCX := 0
.address 0x4074D4
0002d908: AF := unknown[bits]:u1
.address 0x4074D4
0002d90b: ZF := 1
.address 0x4074D4
0002d90e: PF := 1
.address 0x4074D4
0002d911: OF := 0
.address 0x4074D4
0002d914: CF := 0
.address 0x4074D4
0002d917: SF := 0
.address 0x4074D6
0002d91e: mem := mem with [RSP + 0x38, el]:u64 <- R9
.address 0x4074DB
0002d927: RSP := RSP - 8
.address 0x4074DB
0002d92a: mem := mem with [RSP, el]:u64 <- 0x4074E0
.address 0x4074DB
0002d92d: call @sub_413590 with return %0002d92f

.address 0x4074E0
0002d92f: 
.address 0x4074E0
0002d93a: #6313 := low:32[RAX] - 2
.address 0x4074E0
0002d93d: CF := low:32[RAX] < 2
.address 0x4074E0
0002d940: OF := high:1[(low:32[RAX] ^ 2) & (low:32[RAX] ^ #6313)]
.address 0x4074E0
0002d943: AF := 0x10 = (0x10 & (#6313 ^ low:32[RAX] ^ 2))
.address 0x4074E0
0002d946: PF := ~low:1[let $1 = #6313 >> 4 ^ #6313 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4074E0
0002d949: SF := high:1[#6313]
.address 0x4074E0
0002d94c: ZF := 0 = #6313
.address 0x4074E3
0002d953: RAX := extract:63:8[RAX].pad:8[CF | ZF]
.address 0x4074E6
0002d960: RAX := extract:63:8[RAX].low:8[RAX] & mem[0x6212D8]
.address 0x4074E6
0002d963: OF := 0
.address 0x4074E6
0002d966: CF := 0
.address 0x4074E6
0002d969: AF := unknown[bits]:u1
.address 0x4074E6
0002d96c: PF := ~low:1[let $1 = low:8[RAX] >> 4 ^ low:8[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4074E6
0002d96f: SF := high:1[low:8[RAX]]
.address 0x4074E6
0002d972: ZF := 0 = low:8[RAX]
.address 0x4074EC
0002d979: mem := mem with [RSP + 0x2F] <- low:8[RAX]
.address 0x4074F0
0002d983: when ~ZF goto %0002d97d
00044787: goto %0003d93c

.address 0x407650
0002d97d: 
.address 0x407650
0002d993: #6316 := low:32[RBX]
.address 0x407650
0002d996: OF := 0
.address 0x407650
0002d999: CF := 0
.address 0x407650
0002d99c: AF := unknown[bits]:u1
.address 0x407650
0002d99f: PF := ~low:1[let $1 = #6316 >> 4 ^ #6316 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407650
0002d9a2: SF := high:1[#6316]
.address 0x407650
0002d9a5: ZF := 0 = #6316
.address 0x407652
0002d9af: when ~ZF goto %0002d9a9
00044788: goto %0003d8ec

.address 0x407658
0003d8ec: 
.address 0x407658
0003d8f1: RDI := R12
.address 0x40765B
0003d8fa: RSP := RSP - 8
.address 0x40765B
0003d8fd: mem := mem with [RSP, el]:u64 <- 0x407660
.address 0x40765B
0003d900: call @sub_403950 with return %0003d902

.address 0x407660
0003d902: 
.address 0x407660
0003d90d: #8474 := RAX - 0x1FFF
.address 0x407660
0003d910: CF := RAX < 0x1FFF
.address 0x407660
0003d913: OF := high:1[(RAX ^ 0x1FFF) & (RAX ^ #8474)]
.address 0x407660
0003d916: AF := 0x10 = (0x10 & (#8474 ^ RAX ^ 0x1FFF))
.address 0x407660
0003d919: PF := ~low:1[let $1 = #8474 >> 4 ^ #8474 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407660
0003d91c: SF := high:1[#8474]
.address 0x407660
0003d91f: ZF := 0 = #8474
.address 0x407666
0003d926: RBP := RAX
.address 0x407669
0003d92d: RDX := low:64[RAX + 1]
.address 0x40766D
0003d936: when ~(CF | ZF) goto %0002e1e5
00044789: goto %0002e212

.address 0x407898
0002e1e5: 
.address 0x407898
0002e1ea: RDI := RDX
.address 0x40789B
0002e1f1: mem := mem with [RSP + 8, el]:u64 <- RDX
.address 0x4078A0
0002e1fa: RSP := RSP - 8
.address 0x4078A0
0002e1fd: mem := mem with [RSP, el]:u64 <- 0x4078A5
.address 0x4078A0
0002e200: call @sub_414480 with return %0002e202

.address 0x4078A5
0002e202: 
.address 0x4078A5
0002e207: RDX := mem[RSP + 8, el]:u64
.address 0x4078AA
0002e20e: R13 := RAX
.address 0x4078AD
0002e216: goto %0002e212

.address 0x407673
0002e212: 
.address 0x407673
0002e21c: RSI := R12
.address 0x407676
0002e223: RDI := R13
.address 0x407679
0002e22c: RSP := RSP - 8
.address 0x407679
0002e22f: mem := mem with [RSP, el]:u64 <- 0x40767E
.address 0x407679
0002e232: call @sub_403b80 with return %0002e234

.address 0x40767E
0002e234: 
.address 0x40767E
0002e239: mem := mem with [RSP + 0x2F] <- 0
0004478a: goto %0002e23b

.address 0x4074F6
0003d93c: 
.address 0x4074F6
0003d947: R9 := 0
.address 0x4074F6
0003d94a: AF := unknown[bits]:u1
.address 0x4074F6
0003d94d: ZF := 1
.address 0x4074F6
0003d950: PF := 1
.address 0x4074F6
0003d953: OF := 0
.address 0x4074F6
0003d956: CF := 0
.address 0x4074F6
0003d959: SF := 0
.address 0x4074F9
0003d966: #8476 := low:32[RBX]
.address 0x4074F9
0003d969: OF := 0
.address 0x4074F9
0003d96c: CF := 0
.address 0x4074F9
0003d96f: AF := unknown[bits]:u1
.address 0x4074F9
0003d972: PF := ~low:1[let $1 = #8476 >> 4 ^ #8476 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4074F9
0003d975: SF := high:1[#8476]
.address 0x4074F9
0003d978: ZF := 0 = #8476
.address 0x4074FB
0003d981: when ZF goto %0002e742
0004478b: goto %0002d9bd

.address 0x407570
0002e742: 
.address 0x407570
0002e747: RDI := R12
.address 0x407573
0002e74e: R13 := R12
.address 0x407576
0002e757: RSP := RSP - 8
.address 0x407576
0002e75a: mem := mem with [RSP, el]:u64 <- 0x40757B
.address 0x407576
0002e75d: call @sub_403950 with return %0002e75f

.address 0x40757B
0002e75f: 
.address 0x40757B
0002e764: RBX := RAX
0004478c: goto %0002daf4

.address 0x4074FD
0002d9bd: 
.address 0x4074FD
0002d9c7: R8 := R14
.address 0x407500
0002d9ce: RCX := 0xFFFFFFFFFFFFFFFF
.address 0x407507
0002d9d5: RDX := R12
.address 0x40750A
0002d9dc: RSI := 0x2000
.address 0x40750F
0002d9e3: RDI := R13
.address 0x407512
0002d9ea: mem := mem with [RSP + 8, el]:u32 <- low:32[R9]
.address 0x407517
0002d9f3: RSP := RSP - 8
.address 0x407517
0002d9f6: mem := mem with [RSP, el]:u64 <- 0x40751C
.address 0x407517
0002d9f9: call @sub_413660 with return %0002d9fb

.address 0x40751C
0002d9fb: 
.address 0x40751C
0002da06: #6318 := RAX - 0x1FFF
.address 0x40751C
0002da09: CF := RAX < 0x1FFF
.address 0x40751C
0002da0c: OF := high:1[(RAX ^ 0x1FFF) & (RAX ^ #6318)]
.address 0x40751C
0002da0f: AF := 0x10 = (0x10 & (#6318 ^ RAX ^ 0x1FFF))
.address 0x40751C
0002da12: PF := ~low:1[let $1 = #6318 >> 4 ^ #6318 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40751C
0002da15: SF := high:1[#6318]
.address 0x40751C
0002da18: ZF := 0 = #6318
.address 0x407522
0002da1f: RBX := RAX
.address 0x407525
0002da26: R9 := pad:64[mem[RSP + 8, el]:u32]
.address 0x40752A
0002da30: when ~(CF | ZF) goto %0002da2a
0004478d: goto %0002da94

.address 0x4078B8
0002da2a: 
.address 0x4078B8
0002da3a: R15 := low:64[RAX + 1]
.address 0x4078BC
0002da41: RDI := R15
.address 0x4078BF
0002da4a: RSP := RSP - 8
.address 0x4078BF
0002da4d: mem := mem with [RSP, el]:u64 <- 0x4078C4
.address 0x4078BF
0002da50: call @sub_414480 with return %0002da52

.address 0x4078C4
0002da52: 
.address 0x4078C4
0002da57: R8 := R14
.address 0x4078C7
0002da5e: RCX := 0xFFFFFFFFFFFFFFFF
.address 0x4078CE
0002da65: RDX := R12
.address 0x4078D1
0002da6c: RSI := R15
.address 0x4078D4
0002da73: RDI := RAX
.address 0x4078D7
0002da7a: R13 := RAX
.address 0x4078DA
0002da83: RSP := RSP - 8
.address 0x4078DA
0002da86: mem := mem with [RSP, el]:u64 <- 0x4078DF
.address 0x4078DA
0002da89: call @sub_413660 with return %0002da8b

.address 0x4078DF
0002da8b: 
.address 0x4078DF
0002da90: R9 := pad:64[mem[RSP + 8, el]:u32]
.address 0x4078E4
0002da98: goto %0002da94

.address 0x407530
0002da94: 
.address 0x407530
0002da9e: RAX := pad:64[pad:32[mem[R13]]]
.address 0x407535
0002daa5: mem := mem with [RSP + 0x2F] <- 1
.address 0x40753A
0002dab2: #6320 := mem[R12] - low:8[RAX]
.address 0x40753A
0002dab5: CF := mem[R12] < low:8[RAX]
.address 0x40753A
0002dab8: OF := high:1[(mem[R12] ^ low:8[RAX]) & (mem[R12] ^ #6320)]
.address 0x40753A
0002dabb: AF := 0x10 = (0x10 & (#6320 ^ mem[R12] ^ low:8[RAX]))
.address 0x40753A
0002dabe: PF := ~low:1[let $1 = #6320 >> 4 ^ #6320 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40753A
0002dac1: SF := high:1[#6320]
.address 0x40753A
0002dac4: ZF := 0 = #6320
.address 0x40753E
0002dace: when ~ZF goto %0002dac8
0004478e: goto %0002e766

.address 0x407540
0002e766: 
.address 0x407540
0002e76b: RDI := R12
.address 0x407543
0002e772: mem := mem with [RSP + 8, el]:u32 <- low:32[R9]
.address 0x407548
0002e77b: RSP := RSP - 8
.address 0x407548
0002e77e: mem := mem with [RSP, el]:u64 <- 0x40754D
.address 0x407548
0002e781: call @sub_403950 with return %0002e783

.address 0x40754D
0002e783: 
.address 0x40754D
0002e788: R9 := pad:64[mem[RSP + 8, el]:u32]
.address 0x407552
0002e795: #6435 := RBX - RAX
.address 0x407552
0002e798: CF := RBX < RAX
.address 0x407552
0002e79b: OF := high:1[(RBX ^ RAX) & (RBX ^ #6435)]
.address 0x407552
0002e79e: AF := 0x10 = (0x10 & (#6435 ^ RBX ^ RAX))
.address 0x407552
0002e7a1: PF := ~low:1[let $1 = #6435 >> 4 ^ #6435 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407552
0002e7a4: SF := high:1[#6435]
.address 0x407552
0002e7a7: ZF := 0 = #6435
.address 0x407555
0002e7ae: mem := mem with [RSP + 0x2F] <- pad:8[~ZF]
0004478f: goto %0002dac8

.address 0x40755A
0002dac8: 
.address 0x40755A
0002dade: #6322 := low:32[R9]
.address 0x40755A
0002dae1: OF := 0
.address 0x40755A
0002dae4: CF := 0
.address 0x40755A
0002dae7: AF := unknown[bits]:u1
.address 0x40755A
0002daea: PF := ~low:1[let $1 = #6322 >> 4 ^ #6322 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40755A
0002daed: SF := high:1[#6322]
.address 0x40755A
0002daf0: ZF := 0 = #6322
.address 0x40755D
0002dafa: when ZF goto %0002daf4
00044790: goto %0002e731

.address 0x40757E
0002daf4: 
.address 0x40757E
0002db0a: #6324 := mem[RSP + 0x20, el]:u64
.address 0x40757E
0002db0d: CF := mem[RSP + 0x20, el]:u64 < 0
.address 0x40757E
0002db10: OF := high:1[mem[RSP + 0x20, el]:u64 & (mem[RSP + 0x20, el]:u64 ^ #6324)]
.address 0x40757E
0002db13: AF := 0x10 = (0x10 & (#6324 ^ mem[RSP + 0x20, el]:u64))
.address 0x40757E
0002db16: PF := ~low:1[let $1 = #6324 >> 4 ^ #6324 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40757E
0002db19: SF := high:1[#6324]
.address 0x40757E
0002db1c: ZF := 0 = #6324
.address 0x407584
0002db26: when ZF goto %0002db20
00044791: goto %0002dcea

.address 0x407638
0002db20: 
.address 0x407638
0002db36: #6326 := mem[0x6213A8]
.address 0x407638
0002db39: CF := mem[0x6213A8] < 0
.address 0x407638
0002db3c: OF := high:1[mem[0x6213A8] & (mem[0x6213A8] ^ #6326)]
.address 0x407638
0002db3f: AF := 0x10 = (0x10 & (#6326 ^ mem[0x6213A8]))
.address 0x407638
0002db42: PF := ~low:1[let $1 = #6326 >> 4 ^ #6326 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407638
0002db45: SF := high:1[#6326]
.address 0x407638
0002db48: ZF := 0 = #6326
.address 0x40763F
0002db52: when ~ZF goto %0002db4c
00044792: goto %0002dcd2

.address 0x407641
0002dcd2: 
.address 0x407641
0002dcd7: RAX := mem[RSP + 0x38, el]:u64
.address 0x407646
0002dcde: mem := mem with [RAX] <- 0
.address 0x407649
0002dce5: goto %0002dbf1

.address 0x40758A
0002dcea: 
.address 0x40758A
0002dcf1: RSP := RSP - 8
.address 0x40758A
0002dcf4: mem := mem with [RSP, el]:u64 <- 0x40758F
.address 0x40758A
0002dcf7: call @sub_403940 with return %0002dcf9

.address 0x40758F
0002dcf9: 
.address 0x40758F
0002dd04: #6338 := RAX - 1
.address 0x40758F
0002dd07: CF := RAX < 1
.address 0x40758F
0002dd0a: OF := high:1[(RAX ^ 1) & (RAX ^ #6338)]
.address 0x40758F
0002dd0d: AF := 0x10 = (0x10 & (#6338 ^ RAX ^ 1))
.address 0x40758F
0002dd10: PF := ~low:1[let $1 = #6338 >> 4 ^ #6338 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40758F
0002dd13: SF := high:1[#6338]
.address 0x40758F
0002dd16: ZF := 0 = #6338
.address 0x407593
0002dd20: when ~(CF | ZF) goto %0002dd1a
00044793: goto %0002e601

.address 0x407798
0002dd1a: 
.address 0x407798
0002dd30: RDX := 0
.address 0x407798
0002dd33: AF := unknown[bits]:u1
.address 0x407798
0002dd36: ZF := 1
.address 0x407798
0002dd39: PF := 1
.address 0x407798
0002dd3c: OF := 0
.address 0x407798
0002dd3f: CF := 0
.address 0x407798
0002dd42: SF := 0
.address 0x40779A
0002dd49: RSI := RBX
.address 0x40779D
0002dd50: RDI := R13
.address 0x4077A0
0002dd59: RSP := RSP - 8
.address 0x4077A0
0002dd5c: mem := mem with [RSP, el]:u64 <- 0x4077A5
.address 0x4077A0
0002dd5f: call @sub_4101b0 with return %0002dd61

.address 0x4077A5
0002dd61: 
.address 0x4077A5
0002dd66: RBP := extend:64[low:32[RAX]]
.address 0x4077A8
0002dd6d: RAX := pad:64[pad:32[mem[0x6213A8]]]
.address 0x4077AF
0002dd7a: #6340 := low:8[RAX]
.address 0x4077AF
0002dd7d: OF := 0
.address 0x4077AF
0002dd80: CF := 0
.address 0x4077AF
0002dd83: AF := unknown[bits]:u1
.address 0x4077AF
0002dd86: PF := ~low:1[let $1 = #6340 >> 4 ^ #6340 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4077AF
0002dd89: SF := high:1[#6340]
.address 0x4077AF
0002dd8c: ZF := 0 = #6340
.address 0x4077B1
0002dd95: when ZF goto %0002dbbb
00044794: goto %0002dd9b

.address 0x4077B7
0002dd9b: 
.address 0x4077B7
0002dda0: goto %0002db4c

.address 0x407599
0002e601: 
.address 0x407599
0002e606: R12 := low:64[R13 + RBX]
.address 0x40759E
0002e613: #6422 := R13 - R12
.address 0x40759E
0002e616: CF := R13 < R12
.address 0x40759E
0002e619: OF := high:1[(R13 ^ R12) & (R13 ^ #6422)]
.address 0x40759E
0002e61c: AF := 0x10 = (0x10 & (#6422 ^ R13 ^ R12))
.address 0x40759E
0002e61f: PF := ~low:1[let $1 = #6422 >> 4 ^ #6422 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40759E
0002e622: SF := high:1[#6422]
.address 0x40759E
0002e625: ZF := 0 = #6422
.address 0x4075A1
0002e62e: when ~CF goto %0002e328
00044795: goto %0002e634

.address 0x4078F2
0002e328: 
.address 0x4078F2
0002e333: RBP := 0
.address 0x4078F2
0002e336: AF := unknown[bits]:u1
.address 0x4078F2
0002e339: ZF := 1
.address 0x4078F2
0002e33c: PF := 1
.address 0x4078F2
0002e33f: OF := 0
.address 0x4078F2
0002e342: CF := 0
.address 0x4078F2
0002e345: SF := 0
.address 0x4078F4
0002e34c: goto %0002e2f0

.address 0x4075A7
0002e634: 
.address 0x4075A7
0002e63b: RSP := RSP - 8
.address 0x4075A7
0002e63e: mem := mem with [RSP, el]:u64 <- 0x4075AC
.address 0x4075A7
0002e641: call @sub_403e50 with return %0002e643

.address 0x4075AC
0002e643: 
.address 0x4075AC
0002e64e: RBP := 0
.address 0x4075AC
0002e651: AF := unknown[bits]:u1
.address 0x4075AC
0002e654: ZF := 1
.address 0x4075AC
0002e657: PF := 1
.address 0x4075AC
0002e65a: OF := 0
.address 0x4075AC
0002e65d: CF := 0
.address 0x4075AC
0002e660: SF := 0
.address 0x4075AE
0002e667: RCX := mem[RAX, el]:u64
.address 0x4075B1
0002e66e: RAX := R13
00044796: goto %0002e673

.address 0x4075B8
0002e673: 
.address 0x4075B8
0002e678: RDX := pad:64[pad:32[mem[RAX]]]
.address 0x4075BB
0002e67f: RDX := pad:64[pad:32[mem[RCX + (RDX << 1), el]:u16]]
.address 0x4075BF
0002e68c: RDX := extract:63:16[RDX].low:16[RDX] & 0x4000
.address 0x4075BF
0002e68f: OF := 0
.address 0x4075BF
0002e692: CF := 0
.address 0x4075BF
0002e695: AF := unknown[bits]:u1
.address 0x4075BF
0002e698: PF := ~low:1[let $1 = low:16[RDX] >> 4 ^ low:16[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4075BF
0002e69b: SF := high:1[low:16[RDX]]
.address 0x4075BF
0002e69e: ZF := 0 = low:16[RDX]
.address 0x4075C4
0002e6ab: #6425 := low:16[RDX] - 1
.address 0x4075C4
0002e6ae: CF := low:16[RDX] < 1
.address 0x4075C4
0002e6b1: OF := high:1[(low:16[RDX] ^ 1) & (low:16[RDX] ^ #6425)]
.address 0x4075C4
0002e6b4: AF := 0x10 = (0x10 & (#6425 ^ low:16[RDX] ^ 1))
.address 0x4075C4
0002e6b7: PF := ~low:1[let $1 = #6425 >> 4 ^ #6425 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4075C4
0002e6ba: SF := high:1[#6425]
.address 0x4075C4
0002e6bd: ZF := 0 = #6425
.address 0x4075C8
0002e6cb: #6428 := RBP
.address 0x4075C8
0002e6ce: RBP := #6428 - 0xFFFFFFFFFFFFFFFF + pad:64[CF]
.address 0x4075C8
0002e6d1: OF := high:1[(0xFFFFFFFFFFFFFFFF ^ #6428) & (#6428 ^ RBP)]
.address 0x4075C8
0002e6d4: CF := #6428 < 0xFFFFFFFFFFFFFFFF + pad:64[CF] | 0xFFFFFFFFFFFFFFFF + pad:64[CF] < 0xFFFFFFFFFFFFFFFF
.address 0x4075C8
0002e6d7: AF := 0x10 = (0x10 & (RBP ^ 0xFFFFFFFFFFFFFFFF ^ #6428))
.address 0x4075C8
0002e6da: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4075C8
0002e6dd: SF := high:1[RBP]
.address 0x4075C8
0002e6e0: ZF := 0 = RBP
.address 0x4075CC
0002e6ee: #6430 := RAX
.address 0x4075CC
0002e6f1: RAX := RAX + 1
.address 0x4075CC
0002e6f4: CF := RAX < #6430
.address 0x4075CC
0002e6f7: OF := ~high:1[#6430] & (high:1[#6430] | high:1[RAX]) & ~(high:1[#6430] & high:1[RAX])
.address 0x4075CC
0002e6fa: AF := 0x10 = (0x10 & (RAX ^ #6430 ^ 1))
.address 0x4075CC
0002e6fd: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4075CC
0002e700: SF := high:1[RAX]
.address 0x4075CC
0002e703: ZF := 0 = RAX
.address 0x4075D0
0002e710: #6433 := R12 - RAX
.address 0x4075D0
0002e713: CF := R12 < RAX
.address 0x4075D0
0002e716: OF := high:1[(R12 ^ RAX) & (R12 ^ #6433)]
.address 0x4075D0
0002e719: AF := 0x10 = (0x10 & (#6433 ^ R12 ^ RAX))
.address 0x4075D0
0002e71c: PF := ~low:1[let $1 = #6433 >> 4 ^ #6433 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4075D0
0002e71f: SF := high:1[#6433]
.address 0x4075D0
0002e722: ZF := 0 = #6433
.address 0x4075D3
0002e72b: when ~ZF goto %0002e673
00044797: goto %0002e2f0

.address 0x40755F
0002e731: 
.address 0x40755F
0002e736: RBP := RBX
.address 0x407562
0002e73d: goto %0002e23b

.address 0x407683
0002e23b: 
.address 0x407683
0002e240: RBX := low:64[R13 + RBP]
.address 0x407688
0002e249: RSP := RSP - 8
.address 0x407688
0002e24c: mem := mem with [RSP, el]:u64 <- 0x40768D
.address 0x407688
0002e24f: call @sub_403940 with return %0002e251

.address 0x40768D
0002e251: 
.address 0x40768D
0002e25c: #6393 := RAX - 1
.address 0x40768D
0002e25f: CF := RAX < 1
.address 0x40768D
0002e262: OF := high:1[(RAX ^ 1) & (RAX ^ #6393)]
.address 0x40768D
0002e265: AF := 0x10 = (0x10 & (#6393 ^ RAX ^ 1))
.address 0x40768D
0002e268: PF := ~low:1[let $1 = #6393 >> 4 ^ #6393 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40768D
0002e26b: SF := high:1[#6393]
.address 0x40768D
0002e26e: ZF := 0 = #6393
.address 0x407691
0002e275: mem := mem with [RSP + 8, el]:u64 <- RBX
.address 0x407696
0002e27e: when CF | ZF goto %0002e175
00044798: goto %0002e284

.address 0x407850
0002e175: 
.address 0x407850
0002e180: #6389 := R13 - mem[RSP + 8, el]:u64
.address 0x407850
0002e183: CF := R13 < mem[RSP + 8, el]:u64
.address 0x407850
0002e186: OF := high:1[(R13 ^ mem[RSP + 8, el]:u64) & (R13 ^ #6389)]
.address 0x407850
0002e189: AF := 0x10 = (0x10 & (#6389 ^ R13 ^ mem[RSP + 8, el]:u64))
.address 0x407850
0002e18c: PF := ~low:1[let $1 = #6389 >> 4 ^ #6389 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407850
0002e18f: SF := high:1[#6389]
.address 0x407850
0002e192: ZF := 0 = #6389
.address 0x407855
0002e19c: when ~CF goto %0002e196
00044799: goto %0002e396

.address 0x407857
0002e396: 
.address 0x407857
0002e39d: RSP := RSP - 8
.address 0x407857
0002e3a0: mem := mem with [RSP, el]:u64 <- 0x40785C
.address 0x407857
0002e3a3: call @sub_403e50 with return %0002e3a5

.address 0x40785C
0002e3a5: 
.address 0x40785C
0002e3aa: RDX := R13
0004479a: goto %0002e3af

.address 0x407860
0002e3af: 
.address 0x407860
0002e3b4: RSI := pad:64[pad:32[mem[RDX]]]
.address 0x407863
0002e3bb: RCX := mem[RAX, el]:u64
.address 0x407866
0002e3c8: #6399 := mem[RCX + (RSI << 1) + 1] & 0x40
.address 0x407866
0002e3cb: OF := 0
.address 0x407866
0002e3ce: CF := 0
.address 0x407866
0002e3d1: AF := unknown[bits]:u1
.address 0x407866
0002e3d4: PF := ~low:1[let $1 = #6399 >> 4 ^ #6399 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407866
0002e3d7: SF := high:1[#6399]
.address 0x407866
0002e3da: ZF := 0 = #6399
.address 0x40786B
0002e3e4: when ~ZF goto %0002e3de
0004479b: goto %0002e438

.address 0x40786D
0002e438: 
.address 0x40786D
0002e43d: mem := mem with [RDX] <- 0x3F
0004479c: goto %0002e3de

.address 0x407870
0002e3de: 
.address 0x407870
0002e3f5: #6401 := RDX
.address 0x407870
0002e3f8: RDX := RDX + 1
.address 0x407870
0002e3fb: CF := RDX < #6401
.address 0x407870
0002e3fe: OF := ~high:1[#6401] & (high:1[#6401] | high:1[RDX]) & ~(high:1[#6401] & high:1[RDX])
.address 0x407870
0002e401: AF := 0x10 = (0x10 & (RDX ^ #6401 ^ 1))
.address 0x407870
0002e404: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407870
0002e407: SF := high:1[RDX]
.address 0x407870
0002e40a: ZF := 0 = RDX
.address 0x407874
0002e417: #6404 := RDX - mem[RSP + 8, el]:u64
.address 0x407874
0002e41a: CF := RDX < mem[RSP + 8, el]:u64
.address 0x407874
0002e41d: OF := high:1[(RDX ^ mem[RSP + 8, el]:u64) & (RDX ^ #6404)]
.address 0x407874
0002e420: AF := 0x10 = (0x10 & (#6404 ^ RDX ^ mem[RSP + 8, el]:u64))
.address 0x407874
0002e423: PF := ~low:1[let $1 = #6404 >> 4 ^ #6404 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407874
0002e426: SF := high:1[#6404]
.address 0x407874
0002e429: ZF := 0 = #6404
.address 0x407879
0002e432: when ~ZF goto %0002e3af
0004479d: goto %0002e196

.address 0x40787B
0002e196: 
.address 0x40787B
0002e1a6: RAX := pad:64[pad:32[mem[0x6213A8]]]
.address 0x407882
0002e1ad: RBX := RBP
.address 0x407885
0002e1ba: #6391 := low:8[RAX]
.address 0x407885
0002e1bd: OF := 0
.address 0x407885
0002e1c0: CF := 0
.address 0x407885
0002e1c3: AF := unknown[bits]:u1
.address 0x407885
0002e1c6: PF := ~low:1[let $1 = #6391 >> 4 ^ #6391 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407885
0002e1c9: SF := high:1[#6391]
.address 0x407885
0002e1cc: ZF := 0 = #6391
.address 0x407887
0002e1d5: when ZF goto %0002dbbb
0004479e: goto %0002e1db

.address 0x40788D
0002e1db: 
.address 0x40788D
0002e1e0: goto %0002db4c

.address 0x40769C
0002e284: 
.address 0x40769C
0002e28f: #6395 := R13 - RBX
.address 0x40769C
0002e292: CF := R13 < RBX
.address 0x40769C
0002e295: OF := high:1[(R13 ^ RBX) & (R13 ^ #6395)]
.address 0x40769C
0002e298: AF := 0x10 = (0x10 & (#6395 ^ R13 ^ RBX))
.address 0x40769C
0002e29b: PF := ~low:1[let $1 = #6395 >> 4 ^ #6395 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40769C
0002e29e: SF := high:1[#6395]
.address 0x40769C
0002e2a1: ZF := 0 = #6395
.address 0x40769F
0002e2ab: when ~CF goto %0002e2a5
0004479f: goto %0002e34e

.address 0x4078E9
0002e2a5: 
.address 0x4078E9
0002e2bb: RBX := 0
.address 0x4078E9
0002e2be: AF := unknown[bits]:u1
.address 0x4078E9
0002e2c1: ZF := 1
.address 0x4078E9
0002e2c4: PF := 1
.address 0x4078E9
0002e2c7: OF := 0
.address 0x4078E9
0002e2ca: CF := 0
.address 0x4078E9
0002e2cd: SF := 0
.address 0x4078EB
0002e2da: RBP := 0
.address 0x4078EB
0002e2dd: AF := unknown[bits]:u1
.address 0x4078EB
0002e2e0: ZF := 1
.address 0x4078EB
0002e2e3: PF := 1
.address 0x4078EB
0002e2e6: OF := 0
.address 0x4078EB
0002e2e9: CF := 0
.address 0x4078EB
0002e2ec: SF := 0
.address 0x4078ED
0002e2f4: goto %0002e2f0

.address 0x4075D5
0002e2f0: 
.address 0x4075D5
0002e2fa: RAX := pad:64[pad:32[mem[0x6213A8]]]
.address 0x4075DC
0002e307: #6397 := low:8[RAX]
.address 0x4075DC
0002e30a: OF := 0
.address 0x4075DC
0002e30d: CF := 0
.address 0x4075DC
0002e310: AF := unknown[bits]:u1
.address 0x4075DC
0002e313: PF := ~low:1[let $1 = #6397 >> 4 ^ #6397 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4075DC
0002e316: SF := high:1[#6397]
.address 0x4075DC
0002e319: ZF := 0 = #6397
.address 0x4075DE
0002e322: when ZF goto %0002dbbb
000447a0: goto %0002db4c

.address 0x4076A5
0002e34e: 
.address 0x4076A5
0002e353: RAX := low:64[RSP + 0x4C]
.address 0x4076AA
0002e35a: R12 := low:64[RSP + 0x50]
.address 0x4076AF
0002e361: RBX := R13
.address 0x4076B2
0002e368: R15 := R13
.address 0x4076B5
0002e375: RBP := 0
.address 0x4076B5
0002e378: AF := unknown[bits]:u1
.address 0x4076B5
0002e37b: ZF := 1
.address 0x4076B5
0002e37e: PF := 1
.address 0x4076B5
0002e381: OF := 0
.address 0x4076B5
0002e384: CF := 0
.address 0x4076B5
0002e387: SF := 0
.address 0x4076B7
0002e38e: mem := mem with [RSP + 0x18, el]:u64 <- RAX
000447a1: goto %0002df27

.address 0x4076C0
0002df27: 
.address 0x4076C0
0002df37: RAX := pad:64[pad:32[mem[R15]]]
.address 0x4076C4
0002df44: #6360 := low:8[RAX] - 0x3F
.address 0x4076C4
0002df47: CF := low:8[RAX] < 0x3F
.address 0x4076C4
0002df4a: OF := high:1[(low:8[RAX] ^ 0x3F) & (low:8[RAX] ^ #6360)]
.address 0x4076C4
0002df4d: AF := 0x10 = (0x10 & (#6360 ^ low:8[RAX] ^ 0x3F))
.address 0x4076C4
0002df50: PF := ~low:1[let $1 = #6360 >> 4 ^ #6360 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4076C4
0002df53: SF := high:1[#6360]
.address 0x4076C4
0002df56: ZF := 0 = #6360
.address 0x4076C6
0002df60: when ~(ZF | (SF | OF) & ~(SF & OF)) goto %0002df5a
000447a2: goto %0002e074

.address 0x4077F0
0002df5a: 
.address 0x4077F0
0002df70: #6362 := low:8[RAX] - 0x41
.address 0x4077F0
0002df73: CF := low:8[RAX] < 0x41
.address 0x4077F0
0002df76: OF := high:1[(low:8[RAX] ^ 0x41) & (low:8[RAX] ^ #6362)]
.address 0x4077F0
0002df79: AF := 0x10 = (0x10 & (#6362 ^ low:8[RAX] ^ 0x41))
.address 0x4077F0
0002df7c: PF := ~low:1[let $1 = #6362 >> 4 ^ #6362 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4077F0
0002df7f: SF := high:1[#6362]
.address 0x4077F0
0002df82: ZF := 0 = #6362
.address 0x4077F2
0002df8c: when (SF | OF) & ~(SF & OF) goto %0002df86
000447a3: goto %0002df9b

.address 0x4077F8
0002df9b: 
.address 0x4077F8
0002dfa6: #6364 := low:8[RAX] - 0x5F
.address 0x4077F8
0002dfa9: CF := low:8[RAX] < 0x5F
.address 0x4077F8
0002dfac: OF := high:1[(low:8[RAX] ^ 0x5F) & (low:8[RAX] ^ #6364)]
.address 0x4077F8
0002dfaf: AF := 0x10 = (0x10 & (#6364 ^ low:8[RAX] ^ 0x5F))
.address 0x4077F8
0002dfb2: PF := ~low:1[let $1 = #6364 >> 4 ^ #6364 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4077F8
0002dfb5: SF := high:1[#6364]
.address 0x4077F8
0002dfb8: ZF := 0 = #6364
.address 0x4077FA
0002dfc2: when ZF | (SF | OF) & ~(SF & OF) goto %0002dfbc
000447a4: goto %0002e041

.address 0x4077FC
0002e041: 
.address 0x4077FC
0002e046: RDX := pad:64[low:32[RAX - 0x61]]
.address 0x4077FF
0002e053: #6375 := low:8[RDX] - 0x1D
.address 0x4077FF
0002e056: CF := low:8[RDX] < 0x1D
.address 0x4077FF
0002e059: OF := high:1[(low:8[RDX] ^ 0x1D) & (low:8[RDX] ^ #6375)]
.address 0x4077FF
0002e05c: AF := 0x10 = (0x10 & (#6375 ^ low:8[RDX] ^ 0x1D))
.address 0x4077FF
0002e05f: PF := ~low:1[let $1 = #6375 >> 4 ^ #6375 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4077FF
0002e062: SF := high:1[#6375]
.address 0x4077FF
0002e065: ZF := 0 = #6375
.address 0x407802
0002e06e: when ~(CF | ZF) goto %0002df86
000447a5: goto %0002dfbc

.address 0x4076CC
0002e074: 
.address 0x4076CC
0002e07f: #6377 := low:8[RAX] - 0x25
.address 0x4076CC
0002e082: CF := low:8[RAX] < 0x25
.address 0x4076CC
0002e085: OF := high:1[(low:8[RAX] ^ 0x25) & (low:8[RAX] ^ #6377)]
.address 0x4076CC
0002e088: AF := 0x10 = (0x10 & (#6377 ^ low:8[RAX] ^ 0x25))
.address 0x4076CC
0002e08b: PF := ~low:1[let $1 = #6377 >> 4 ^ #6377 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4076CC
0002e08e: SF := high:1[#6377]
.address 0x4076CC
0002e091: ZF := 0 = #6377
.address 0x4076CE
0002e09a: when ~((SF | OF) & ~(SF & OF)) goto %0002dfbc
000447a6: goto %0002e0a0

.address 0x4076D4
0002e0a0: 
.address 0x4076D4
0002e0a5: RDX := pad:64[low:32[RAX - 0x20]]
.address 0x4076D7
0002e0b2: #6379 := low:8[RDX] - 3
.address 0x4076D7
0002e0b5: CF := low:8[RDX] < 3
.address 0x4076D7
0002e0b8: OF := high:1[(low:8[RDX] ^ 3) & (low:8[RDX] ^ #6379)]
.address 0x4076D7
0002e0bb: AF := 0x10 = (0x10 & (#6379 ^ low:8[RDX] ^ 3))
.address 0x4076D7
0002e0be: PF := ~low:1[let $1 = #6379 >> 4 ^ #6379 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4076D7
0002e0c1: SF := high:1[#6379]
.address 0x4076D7
0002e0c4: ZF := 0 = #6379
.address 0x4076DA
0002e0cd: when CF | ZF goto %0002dfbc
000447a7: goto %0002df86

.address 0x407808
0002dfbc: 
.address 0x407808
0002dfcc: mem := mem with [RBX] <- low:8[RAX]
.address 0x40780A
0002dfda: #6366 := R15
.address 0x40780A
0002dfdd: R15 := R15 + 1
.address 0x40780A
0002dfe0: CF := R15 < #6366
.address 0x40780A
0002dfe3: OF := ~high:1[#6366] & (high:1[#6366] | high:1[R15]) & ~(high:1[#6366] & high:1[R15])
.address 0x40780A
0002dfe6: AF := 0x10 = (0x10 & (R15 ^ #6366 ^ 1))
.address 0x40780A
0002dfe9: PF := ~low:1[let $1 = R15 >> 4 ^ R15 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40780A
0002dfec: SF := high:1[R15]
.address 0x40780A
0002dfef: ZF := 0 = R15
.address 0x40780E
0002dffd: #6369 := RBP
.address 0x40780E
0002e000: RBP := RBP + 1
.address 0x40780E
0002e003: CF := RBP < #6369
.address 0x40780E
0002e006: OF := ~high:1[#6369] & (high:1[#6369] | high:1[RBP]) & ~(high:1[#6369] & high:1[RBP])
.address 0x40780E
0002e009: AF := 0x10 = (0x10 & (RBP ^ #6369 ^ 1))
.address 0x40780E
0002e00c: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40780E
0002e00f: SF := high:1[RBP]
.address 0x40780E
0002e012: ZF := 0 = RBP
.address 0x407812
0002e020: #6372 := RBX
.address 0x407812
0002e023: RBX := RBX + 1
.address 0x407812
0002e026: CF := RBX < #6372
.address 0x407812
0002e029: OF := ~high:1[#6372] & (high:1[#6372] | high:1[RBX]) & ~(high:1[#6372] & high:1[RBX])
.address 0x407812
0002e02c: AF := 0x10 = (0x10 & (RBX ^ #6372 ^ 1))
.address 0x407812
0002e02f: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407812
0002e032: SF := high:1[RBX]
.address 0x407812
0002e035: ZF := 0 = RBX
.address 0x407816
0002e03c: goto %0002df01

.address 0x4076E0
0002df86: 
.address 0x4076E0
0002df96: mem := mem with [RSP + 0x50, el]:u64 <- 0
000447a8: goto %0002de1b

.address 0x4076F0
0002de1b: 
.address 0x4076F0
0002de2b: RDX := mem[RSP + 8, el]:u64
.address 0x4076F5
0002de32: RDI := mem[RSP + 0x18, el]:u64
.address 0x4076FA
0002de39: RCX := R12
.address 0x4076FD
0002de40: RSI := R15
.address 0x407700
0002de47: R14 := low:64[RBX + 1]
.address 0x407704
0002de56: #6347 := RDX
.address 0x407704
0002de59: #6348 := R15
.address 0x407704
0002de5c: RDX := RDX - R15
.address 0x407704
0002de5f: CF := #6347 < #6348
.address 0x407704
0002de62: OF := high:1[(#6347 ^ #6348) & (#6347 ^ RDX)]
.address 0x407704
0002de65: AF := 0x10 = (0x10 & (RDX ^ #6347 ^ #6348))
.address 0x407704
0002de68: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407704
0002de6b: SF := high:1[RDX]
.address 0x407704
0002de6e: ZF := 0 = RDX
.address 0x407707
0002de77: RSP := RSP - 8
.address 0x407707
0002de7a: mem := mem with [RSP, el]:u64 <- 0x40770C
.address 0x407707
0002de7d: call @sub_415310 with return %0002de7f

.address 0x40770C
0002de7f: 
.address 0x40770C
0002de8a: #6350 := RAX - 0xFFFFFFFFFFFFFFFF
.address 0x40770C
0002de8d: CF := RAX < 0xFFFFFFFFFFFFFFFF
.address 0x40770C
0002de90: OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ #6350)]
.address 0x40770C
0002de93: AF := 0x10 = (0x10 & (#6350 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
.address 0x40770C
0002de96: PF := ~low:1[let $1 = #6350 >> 4 ^ #6350 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40770C
0002de99: SF := high:1[#6350]
.address 0x40770C
0002de9c: ZF := 0 = #6350
.address 0x407710
0002dea6: when ZF goto %0002dea0
000447a9: goto %0002e43f

.address 0x407820
0002dea0: 
.address 0x407820
0002deb7: #6352 := R15
.address 0x407820
0002deba: R15 := R15 + 1
.address 0x407820
0002debd: CF := R15 < #6352
.address 0x407820
0002dec0: OF := ~high:1[#6352] & (high:1[#6352] | high:1[R15]) & ~(high:1[#6352] & high:1[R15])
.address 0x407820
0002dec3: AF := 0x10 = (0x10 & (R15 ^ #6352 ^ 1))
.address 0x407820
0002dec6: PF := ~low:1[let $1 = R15 >> 4 ^ R15 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407820
0002dec9: SF := high:1[R15]
.address 0x407820
0002decc: ZF := 0 = R15
.address 0x407824
0002ded3: mem := mem with [RBX] <- 0x3F
.address 0x407827
0002dee1: #6355 := RBP
.address 0x407827
0002dee4: RBP := RBP + 1
.address 0x407827
0002dee7: CF := RBP < #6355
.address 0x407827
0002deea: OF := ~high:1[#6355] & (high:1[#6355] | high:1[RBP]) & ~(high:1[#6355] & high:1[RBP])
.address 0x407827
0002deed: AF := 0x10 = (0x10 & (RBP ^ #6355 ^ 1))
.address 0x407827
0002def0: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407827
0002def3: SF := high:1[RBP]
.address 0x407827
0002def6: ZF := 0 = RBP
000447aa: goto %0002def8

.address 0x407716
0002e43f: 
.address 0x407716
0002e44a: #6406 := RAX - 0xFFFFFFFFFFFFFFFE
.address 0x407716
0002e44d: CF := RAX < 0xFFFFFFFFFFFFFFFE
.address 0x407716
0002e450: OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFE) & (RAX ^ #6406)]
.address 0x407716
0002e453: AF := 0x10 = (0x10 & (#6406 ^ RAX ^ 0xFFFFFFFFFFFFFFFE))
.address 0x407716
0002e456: PF := ~low:1[let $1 = #6406 >> 4 ^ #6406 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407716
0002e459: SF := high:1[#6406]
.address 0x407716
0002e45c: ZF := 0 = #6406
.address 0x40771A
0002e465: when ZF goto %0002e13a
000447ab: goto %0002e46b

.address 0x407838
0002e13a: 
.address 0x407838
0002e13f: mem := mem with [RBX] <- 0x3F
.address 0x40783B
0002e14d: #6386 := RBP
.address 0x40783B
0002e150: RBP := RBP + 1
.address 0x40783B
0002e153: CF := RBP < #6386
.address 0x40783B
0002e156: OF := ~high:1[#6386] & (high:1[#6386] | high:1[RBP]) & ~(high:1[#6386] & high:1[RBP])
.address 0x40783B
0002e159: AF := 0x10 = (0x10 & (RBP ^ #6386 ^ 1))
.address 0x40783B
0002e15c: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40783B
0002e15f: SF := high:1[RBP]
.address 0x40783B
0002e162: ZF := 0 = RBP
.address 0x40783F
0002e169: R15 := mem[RSP + 8, el]:u64
.address 0x407844
0002e170: goto %0002def8

.address 0x40782B
0002def8: 
.address 0x40782B
0002defd: RBX := R14
.address 0x40782E
0002df05: goto %0002df01

.address 0x407720
0002e46b: 
.address 0x407720
0002e476: #6408 := RAX
.address 0x407720
0002e479: OF := 0
.address 0x407720
0002e47c: CF := 0
.address 0x407720
0002e47f: AF := unknown[bits]:u1
.address 0x407720
0002e482: PF := ~low:1[let $1 = #6408 >> 4 ^ #6408 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407720
0002e485: SF := high:1[#6408]
.address 0x407720
0002e488: ZF := 0 = #6408
.address 0x407723
0002e48f: RDI := pad:64[mem[RSP + 0x4C, el]:u32]
.address 0x407727
0002e496: mem := mem with [RSP + 0x10, el]:u64 <- RAX
.address 0x40772C
0002e4a0: when ZF goto %0002e49a
000447ac: goto %0002e53b

.address 0x4077D0
0002e49a: 
.address 0x4077D0
0002e4ac: RSP := RSP - 8
.address 0x4077D0
0002e4af: mem := mem with [RSP, el]:u64 <- 0x4077D5
.address 0x4077D0
0002e4b2: call @sub_403c00 with return %0002e4b4

.address 0x4077D5
0002e4b4: 
.address 0x4077D5
0002e4bf: #6410 := low:32[RAX]
.address 0x4077D5
0002e4c2: OF := 0
.address 0x4077D5
0002e4c5: CF := 0
.address 0x4077D5
0002e4c8: AF := unknown[bits]:u1
.address 0x4077D5
0002e4cb: PF := ~low:1[let $1 = #6410 >> 4 ^ #6410 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4077D5
0002e4ce: SF := high:1[#6410]
.address 0x4077D5
0002e4d1: ZF := 0 = #6410
.address 0x4077D7
0002e4d8: RCX := low:64[R15 + 1]
.address 0x4077DB
0002e4e1: when SF goto %0002dda5
000447ad: goto %0002e4e7

.address 0x4077DD
0002e4e7: 
.address 0x4077DD
0002e4ec: RDX := pad:64[pad:32[mem[R15]]]
.address 0x4077E1
0002e4f3: R15 := RCX
.address 0x4077E4
0002e4fa: mem := mem with [RBX] <- low:8[RDX]
.address 0x4077E6
0002e501: RBX := R14
.address 0x4077E9
0002e509: goto %0002e505

.address 0x407732
0002e53b: 
.address 0x407732
0002e542: RSP := RSP - 8
.address 0x407732
0002e545: mem := mem with [RSP, el]:u64 <- 0x407737
.address 0x407732
0002e548: call @sub_403c00 with return %0002e54a

.address 0x407737
0002e54a: 
.address 0x407737
0002e54f: RDX := mem[RSP + 0x10, el]:u64
.address 0x40773C
0002e55c: #6415 := low:32[RAX]
.address 0x40773C
0002e55f: OF := 0
.address 0x40773C
0002e562: CF := 0
.address 0x40773C
0002e565: AF := unknown[bits]:u1
.address 0x40773C
0002e568: PF := ~low:1[let $1 = #6415 >> 4 ^ #6415 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40773C
0002e56b: SF := high:1[#6415]
.address 0x40773C
0002e56e: ZF := 0 = #6415
.address 0x40773E
0002e575: RCX := low:64[R15 + RDX]
.address 0x407742
0002e57e: when SF goto %0002dda5
000447ae: goto %0002e584

.address 0x4077C0
0002dda5: 
.address 0x4077C0
0002ddaa: mem := mem with [RBX] <- 0x3F
.address 0x4077C3
0002ddb8: #6342 := RBP
.address 0x4077C3
0002ddbb: RBP := RBP + 1
.address 0x4077C3
0002ddbe: CF := RBP < #6342
.address 0x4077C3
0002ddc1: OF := ~high:1[#6342] & (high:1[#6342] | high:1[RBP]) & ~(high:1[#6342] & high:1[RBP])
.address 0x4077C3
0002ddc4: AF := 0x10 = (0x10 & (RBP ^ #6342 ^ 1))
.address 0x4077C3
0002ddc7: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4077C3
0002ddca: SF := high:1[RBP]
.address 0x4077C3
0002ddcd: ZF := 0 = RBP
.address 0x4077C7
0002ddd4: RBX := R14
.address 0x4077CA
0002dddb: R15 := RCX
.address 0x4077CD
0002dde3: goto %0002dddf

.address 0x407744
0002e584: 
.address 0x407744
0002e589: RDI := RBX
000447af: goto %0002e58e

.address 0x407750
0002e58e: 
.address 0x407750
0002e593: RSI := R15
.address 0x407753
0002e59c: mem := mem with [RDI] <- mem[RSI]
.address 0x407753
0002e59f: RSI := RSI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x407753
0002e5a2: RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x407754
0002e5af: #6417 := RSI - RCX
.address 0x407754
0002e5b2: CF := RSI < RCX
.address 0x407754
0002e5b5: OF := high:1[(RSI ^ RCX) & (RSI ^ #6417)]
.address 0x407754
0002e5b8: AF := 0x10 = (0x10 & (#6417 ^ RSI ^ RCX))
.address 0x407754
0002e5bb: PF := ~low:1[let $1 = #6417 >> 4 ^ #6417 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407754
0002e5be: SF := high:1[#6417]
.address 0x407754
0002e5c1: ZF := 0 = #6417
.address 0x407757
0002e5c8: R15 := RSI
.address 0x40775A
0002e5d1: when ~ZF goto %0002e58e
000447b0: goto %0002e5d7

.address 0x40775C
0002e5d7: 
.address 0x40775C
0002e5e4: #6419 := RBX
.address 0x40775C
0002e5e7: #6420 := RDX
.address 0x40775C
0002e5ea: RBX := RBX + #6420
.address 0x40775C
0002e5ed: CF := RBX < #6419
.address 0x40775C
0002e5f0: OF := high:1[#6419] = high:1[#6420] & (high:1[#6419] | high:1[RBX]) & ~(
high:1[#6419] & high:1[RBX])
.address 0x40775C
0002e5f3: AF := 0x10 = (0x10 & (RBX ^ #6419 ^ #6420))
.address 0x40775C
0002e5f6: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40775C
0002e5f9: SF := high:1[RBX]
.address 0x40775C
0002e5fc: ZF := 0 = RBX
000447b1: goto %0002e505

.address 0x40775F
0002e505: 
.address 0x40775F
0002e50f: RAX := extend:64[low:32[RAX]]
.address 0x407761
0002e51e: #6412 := RBP
.address 0x407761
0002e521: #6413 := RAX
.address 0x407761
0002e524: RBP := RBP + #6413
.address 0x407761
0002e527: CF := RBP < #6412
.address 0x407761
0002e52a: OF := high:1[#6412] = high:1[#6413] & (high:1[#6412] | high:1[RBP]) & ~(
high:1[#6412] & high:1[RBP])
.address 0x407761
0002e52d: AF := 0x10 = (0x10 & (RBP ^ #6412 ^ #6413))
.address 0x407761
0002e530: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407761
0002e533: SF := high:1[RBP]
.address 0x407761
0002e536: ZF := 0 = RBP
000447b2: goto %0002dddf

.address 0x407764
0002dddf: 
.address 0x407764
0002dde9: RDI := R12
.address 0x407767
0002ddf2: RSP := RSP - 8
.address 0x407767
0002ddf5: mem := mem with [RSP, el]:u64 <- 0x40776C
.address 0x407767
0002ddf8: call @sub_403e10 with return %0002ddfa

.address 0x40776C
0002ddfa: 
.address 0x40776C
0002de05: #6345 := low:32[RAX]
.address 0x40776C
0002de08: OF := 0
.address 0x40776C
0002de0b: CF := 0
.address 0x40776C
0002de0e: AF := unknown[bits]:u1
.address 0x40776C
0002de11: PF := ~low:1[let $1 = #6345 >> 4 ^ #6345 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40776C
0002de14: SF := high:1[#6345]
.address 0x40776C
0002de17: ZF := 0 = #6345
.address 0x40776E
0002de21: when ZF goto %0002de1b
000447b3: goto %0002df01

.address 0x407770
0002df01: 
.address 0x407770
0002df11: #6358 := R15 - mem[RSP + 8, el]:u64
.address 0x407770
0002df14: CF := R15 < mem[RSP + 8, el]:u64
.address 0x407770
0002df17: OF := high:1[(R15 ^ mem[RSP + 8, el]:u64) & (R15 ^ #6358)]
.address 0x407770
0002df1a: AF := 0x10 = (0x10 & (#6358 ^ R15 ^ mem[RSP + 8, el]:u64))
.address 0x407770
0002df1d: PF := ~low:1[let $1 = #6358 >> 4 ^ #6358 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407770
0002df20: SF := high:1[#6358]
.address 0x407770
0002df23: ZF := 0 = #6358
.address 0x407775
0002df2d: when CF goto %0002df27
000447b4: goto %0002e0d3

.address 0x40777B
0002e0d3: 
.address 0x40777B
0002e0d8: RAX := pad:64[pad:32[mem[0x6213A8]]]
.address 0x407782
0002e0e7: #6381 := RBX
.address 0x407782
0002e0ea: #6382 := R13
.address 0x407782
0002e0ed: RBX := RBX - R13
.address 0x407782
0002e0f0: CF := #6381 < #6382
.address 0x407782
0002e0f3: OF := high:1[(#6381 ^ #6382) & (#6381 ^ RBX)]
.address 0x407782
0002e0f6: AF := 0x10 = (0x10 & (RBX ^ #6381 ^ #6382))
.address 0x407782
0002e0f9: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407782
0002e0fc: SF := high:1[RBX]
.address 0x407782
0002e0ff: ZF := 0 = RBX
.address 0x407785
0002e10c: #6384 := low:8[RAX]
.address 0x407785
0002e10f: OF := 0
.address 0x407785
0002e112: CF := 0
.address 0x407785
0002e115: AF := unknown[bits]:u1
.address 0x407785
0002e118: PF := ~low:1[let $1 = #6384 >> 4 ^ #6384 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407785
0002e11b: SF := high:1[#6384]
.address 0x407785
0002e11e: ZF := 0 = #6384
.address 0x407787
0002e127: when ZF goto %0002dbbb
000447b5: goto %0002e12d

.address 0x40778D
0002e12d: 
.address 0x40778D
0002e132: goto %0002db4c

.address 0x4075E0
0002db4c: 
.address 0x4075E0
0002db5c: RAX := pad:64[pad:32[mem[0x6213A9]]]
.address 0x4075E7
0002db69: RAX := pad:64[low:32[RAX] ^ 1]
.address 0x4075E7
0002db6c: OF := 0
.address 0x4075E7
0002db6f: CF := 0
.address 0x4075E7
0002db72: AF := unknown[bits]:u1
.address 0x4075E7
0002db75: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4075E7
0002db78: SF := high:1[low:32[RAX]]
.address 0x4075E7
0002db7b: ZF := 0 = low:32[RAX]
.address 0x4075EA
0002db88: RAX := extract:63:8[RAX].low:8[RAX] | mem[RSP + 0x2F]
.address 0x4075EA
0002db8b: OF := 0
.address 0x4075EA
0002db8e: CF := 0
.address 0x4075EA
0002db91: AF := unknown[bits]:u1
.address 0x4075EA
0002db94: PF := ~low:1[let $1 = low:8[RAX] >> 4 ^ low:8[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4075EA
0002db97: SF := high:1[low:8[RAX]]
.address 0x4075EA
0002db9a: ZF := 0 = low:8[RAX]
.address 0x4075EE
0002dba7: RAX := pad:64[low:32[RAX] ^ 1]
.address 0x4075EE
0002dbaa: OF := 0
.address 0x4075EE
0002dbad: CF := 0
.address 0x4075EE
0002dbb0: AF := unknown[bits]:u1
.address 0x4075EE
0002dbb3: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4075EE
0002dbb6: SF := high:1[low:32[RAX]]
.address 0x4075EE
0002dbb9: ZF := 0 = low:32[RAX]
000447b6: goto %0002dbbb

.address 0x4075F1
0002dbbb: 
.address 0x4075F1
0002dbc0: RCX := mem[RSP + 0x38, el]:u64
.address 0x4075F6
0002dbc7: mem := mem with [RCX] <- low:8[RAX]
.address 0x4075F8
0002dbce: RAX := mem[RSP + 0x20, el]:u64
.address 0x4075FD
0002dbdb: #6331 := RAX
.address 0x4075FD
0002dbde: OF := 0
.address 0x4075FD
0002dbe1: CF := 0
.address 0x4075FD
0002dbe4: AF := unknown[bits]:u1
.address 0x4075FD
0002dbe7: PF := ~low:1[let $1 = #6331 >> 4 ^ #6331 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4075FD
0002dbea: SF := high:1[#6331]
.address 0x4075FD
0002dbed: ZF := 0 = #6331
.address 0x407600
0002dbf7: when ZF goto %0002dbf1
000447b7: goto %0002dccb

.address 0x407602
0002dccb: 
.address 0x407602
0002dcd0: mem := mem with [RAX, el]:u64 <- RBP
000447b8: goto %0002dbf1

.address 0x407605
0002dbf1: 
.address 0x407605
0002dc01: RAX := mem[RSP + 0x30, el]:u64
.address 0x40760A
0002dc08: mem := mem with [RAX, el]:u64 <- R13
.address 0x40760D
0002dc0f: RAX := RBX
.address 0x407610
0002dc16: RBX := mem[RSP + 0x58, el]:u64
.address 0x407615
0002dc23: RBX := RBX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x407615
0002dc26: OF := 0
.address 0x407615
0002dc29: CF := 0
.address 0x407615
0002dc2c: AF := unknown[bits]:u1
.address 0x407615
0002dc2f: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407615
0002dc32: SF := high:1[RBX]
.address 0x407615
0002dc35: ZF := 0 = RBX
.address 0x40761E
0002dc3f: when ~ZF goto %0002dc39
000447b9: goto %0002dc53

.address 0x4078F9
0002dc39: 
.address 0x4078F9
0002dc4b: RSP := RSP - 8
.address 0x4078F9
0002dc4e: mem := mem with [RSP, el]:u64 <- 0x4078FE
.address 0x4078F9
0002dc51: call @sub_403970 with return %0002d9a9

.address 0x4078FE
0002d9a9: 
.address 0x4078FE
0002d9b9: R9 := 1
.address 0x407904
0002d9c1: goto %0002d9bd

.address 0x407624
0002dc53: 
.address 0x407624
0002dc5f: #6334 := RSP
.address 0x407624
0002dc62: RSP := RSP + 0x68
.address 0x407624
0002dc65: CF := RSP < #6334
.address 0x407624
0002dc68: OF := ~high:1[#6334] & (high:1[#6334] | high:1[RSP]) & ~(high:1[#6334] & high:1[RSP])
.address 0x407624
0002dc6b: AF := 0x10 = (0x10 & (RSP ^ #6334 ^ 0x68))
.address 0x407624
0002dc6e: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407624
0002dc71: SF := high:1[RSP]
.address 0x407624
0002dc74: ZF := 0 = RSP
.address 0x407628
0002dc7c: RBX := mem[RSP, el]:u64
.address 0x407628
0002dc7f: RSP := RSP + 8
.address 0x407629
0002dc87: RBP := mem[RSP, el]:u64
.address 0x407629
0002dc8a: RSP := RSP + 8
.address 0x40762A
0002dc92: R12 := mem[RSP, el]:u64
.address 0x40762A
0002dc95: RSP := RSP + 8
.address 0x40762C
0002dc9d: R13 := mem[RSP, el]:u64
.address 0x40762C
0002dca0: RSP := RSP + 8
.address 0x40762E
0002dca8: R14 := mem[RSP, el]:u64
.address 0x40762E
0002dcab: RSP := RSP + 8
.address 0x407630
0002dcb3: R15 := mem[RSP, el]:u64
.address 0x407630
0002dcb6: RSP := RSP + 8
.address 0x407632
0002dcbf: #6337 := mem[RSP, el]:u64
.address 0x407632
0002dcc2: RSP := RSP + 8
.address 0x407632
0002dcc6: call #6337 with noreturn


.address 0x407910
00043f20: sub sub_407910()
.address 0x407910
0002e7b3: 
.address 0x407910
0002e7ba: #6437 := R15
.address 0x407910
0002e7bd: RSP := RSP - 8
.address 0x407910
0002e7c0: mem := mem with [RSP, el]:u64 <- #6437
.address 0x407912
0002e7c9: #6438 := R14
.address 0x407912
0002e7cc: RSP := RSP - 8
.address 0x407912
0002e7cf: mem := mem with [RSP, el]:u64 <- #6438
.address 0x407914
0002e7d6: RAX := RDI
.address 0x407917
0002e7df: #6439 := R13
.address 0x407917
0002e7e2: RSP := RSP - 8
.address 0x407917
0002e7e5: mem := mem with [RSP, el]:u64 <- #6439
.address 0x407919
0002e7ee: #6440 := R12
.address 0x407919
0002e7f1: RSP := RSP - 8
.address 0x407919
0002e7f4: mem := mem with [RSP, el]:u64 <- #6440
.address 0x40791B
0002e7fb: R14 := RCX
.address 0x40791E
0002e804: #6441 := RBP
.address 0x40791E
0002e807: RSP := RSP - 8
.address 0x40791E
0002e80a: mem := mem with [RSP, el]:u64 <- #6441
.address 0x40791F
0002e813: #6442 := RBX
.address 0x40791F
0002e816: RSP := RSP - 8
.address 0x40791F
0002e819: mem := mem with [RSP, el]:u64 <- #6442
.address 0x407920
0002e820: RBX := R9
.address 0x407923
0002e827: R15 := pad:64[low:32[R8]]
.address 0x407926
0002e834: R8 := 0
.address 0x407926
0002e837: AF := unknown[bits]:u1
.address 0x407926
0002e83a: ZF := 1
.address 0x407926
0002e83d: PF := 1
.address 0x407926
0002e840: OF := 0
.address 0x407926
0002e843: CF := 0
.address 0x407926
0002e846: SF := 0
.address 0x407929
0002e854: #6443 := RSP
.address 0x407929
0002e857: RSP := RSP - 0x2048
.address 0x407929
0002e85a: CF := #6443 < 0x2048
.address 0x407929
0002e85d: OF := high:1[(#6443 ^ 0x2048) & (#6443 ^ RSP)]
.address 0x407929
0002e860: AF := 0x10 = (0x10 & (RSP ^ #6443 ^ 0x2048))
.address 0x407929
0002e863: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407929
0002e866: SF := high:1[RSP]
.address 0x407929
0002e869: ZF := 0 = RSP
.address 0x407930
0002e870: mem := mem with [RSP, el]:u64 <- RDI
.address 0x407934
0002e877: R13 := low:64[RSP + 0x30]
.address 0x407939
0002e87e: RDI := low:64[RSP + 0x28]
.address 0x40793E
0002e885: R9 := low:64[RSP + 0x27]
.address 0x407943
0002e88c: R12 := mem[RSP + 0x2080, el]:u64
.address 0x40794B
0002e893: RCX := mem[FS_BASE + 0x28, el]:u64
.address 0x407954
0002e89a: mem := mem with [RSP + 0x2038, el]:u64 <- RCX
.address 0x40795C
0002e8a7: RCX := 0
.address 0x40795C
0002e8aa: AF := unknown[bits]:u1
.address 0x40795C
0002e8ad: ZF := 1
.address 0x40795C
0002e8b0: PF := 1
.address 0x40795C
0002e8b3: OF := 0
.address 0x40795C
0002e8b6: CF := 0
.address 0x40795C
0002e8b9: SF := 0
.address 0x40795E
0002e8c0: RCX := pad:64[low:32[RDX]]
.address 0x407960
0002e8c7: RDX := RSI
.address 0x407963
0002e8ce: RSI := RAX
.address 0x407966
0002e8d5: mem := mem with [RSP + 0x28, el]:u64 <- R13
.address 0x40796B
0002e8de: RSP := RSP - 8
.address 0x40796B
0002e8e1: mem := mem with [RSP, el]:u64 <- 0x407970
.address 0x40796B
0002e8e4: call @sub_4074a0 with return %0002e8e6

.address 0x407970
0002e8e6: 
.address 0x407970
0002e8f1: #6446 := mem[RSP + 0x27]
.address 0x407970
0002e8f4: CF := mem[RSP + 0x27] < 0
.address 0x407970
0002e8f7: OF := high:1[mem[RSP + 0x27] & (mem[RSP + 0x27] ^ #6446)]
.address 0x407970
0002e8fa: AF := 0x10 = (0x10 & (#6446 ^ mem[RSP + 0x27]))
.address 0x407970
0002e8fd: PF := ~low:1[let $1 = #6446 >> 4 ^ #6446 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407970
0002e900: SF := high:1[#6446]
.address 0x407970
0002e903: ZF := 0 = #6446
.address 0x407975
0002e90a: RBP := RAX
.address 0x407978
0002e914: when ZF goto %0002e90e
000447ba: goto %0003d8c0

.address 0x40797A
0003d8c0: 
.address 0x40797A
0003d8cb: #8472 := low:8[R15]
.address 0x40797A
0003d8ce: OF := 0
.address 0x40797A
0003d8d1: CF := 0
.address 0x40797A
0003d8d4: AF := unknown[bits]:u1
.address 0x40797A
0003d8d7: PF := ~low:1[let $1 = #8472 >> 4 ^ #8472 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40797A
0003d8da: SF := high:1[#8472]
.address 0x40797A
0003d8dd: ZF := 0 = #8472
.address 0x40797D
0003d8e6: when ~ZF goto %0003d64b
000447bb: goto %0002e90e

.address 0x407BD8
0003d64b: 
.address 0x407BD8
0003d650: RDI := mem[0x620288, el]:u64
.address 0x407BDF
0003d657: RAX := mem[RDI + 0x28, el]:u64
.address 0x407BE3
0003d664: #8450 := RAX - mem[RDI + 0x30, el]:u64
.address 0x407BE3
0003d667: CF := RAX < mem[RDI + 0x30, el]:u64
.address 0x407BE3
0003d66a: OF := high:1[(RAX ^ mem[RDI + 0x30, el]:u64) & (RAX ^ #8450)]
.address 0x407BE3
0003d66d: AF := 0x10 = (0x10 & (#8450 ^ RAX ^ mem[RDI + 0x30, el]:u64))
.address 0x407BE3
0003d670: PF := ~low:1[let $1 = #8450 >> 4 ^ #8450 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407BE3
0003d673: SF := high:1[#8450]
.address 0x407BE3
0003d676: ZF := 0 = #8450
.address 0x407BE7
0003d67f: when ~CF goto %0003d52e
000447bc: goto %0003d685

.address 0x407CE0
0003d52e: 
.address 0x407CE0
0003d533: RSI := 0x20
.address 0x407CE5
0003d53c: RSP := RSP - 8
.address 0x407CE5
0003d53f: mem := mem with [RSP, el]:u64 <- 0x407CEA
.address 0x407CE5
0003d542: call @sub_4039d0 with return %0003d544

.address 0x407CEA
0003d544: 
.address 0x407CEA
0003d54a: goto %0003d546

.address 0x407BED
0003d685: 
.address 0x407BED
0003d68a: RDX := low:64[RAX + 1]
.address 0x407BF1
0003d691: mem := mem with [RDI + 0x28, el]:u64 <- RDX
.address 0x407BF5
0003d698: mem := mem with [RAX] <- 0x20
000447bd: goto %0003d546

.address 0x407BF8
0003d546: 
.address 0x407BF8
0003d557: #8443 := mem[0x6211F8, el]:u64
.address 0x407BF8
0003d55a: mem := mem with [0x6211F8, el]:u64 <- mem[0x6211F8, el]:u64 + 1
.address 0x407BF8
0003d55d: CF := mem[0x6211F8, el]:u64 < #8443
.address 0x407BF8
0003d560: OF := ~high:1[#8443] & (high:1[#8443] | high:1[mem[0x6211F8, el]:u64]) & ~(
high:1[#8443] & high:1[mem[0x6211F8, el]:u64])
.address 0x407BF8
0003d563: AF := 0x10 = (0x10 & (mem[0x6211F8, el]:u64 ^ #8443 ^ 1))
.address 0x407BF8
0003d566: PF := ~low:1[let $1 = mem[0x6211F8, el]:u64 >> 4 ^ mem[0x6211F8, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407BF8
0003d569: SF := high:1[mem[0x6211F8, el]:u64]
.address 0x407BF8
0003d56c: ZF := 0 = mem[0x6211F8, el]:u64
.address 0x407C00
0003d573: goto %0002e90e

.address 0x407983
0002e90e: 
.address 0x407983
0002e924: #6448 := R14
.address 0x407983
0002e927: OF := 0
.address 0x407983
0002e92a: CF := 0
.address 0x407983
0002e92d: AF := unknown[bits]:u1
.address 0x407983
0002e930: PF := ~low:1[let $1 = #6448 >> 4 ^ #6448 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407983
0002e933: SF := high:1[#6448]
.address 0x407983
0002e936: ZF := 0 = #6448
.address 0x407986
0002e940: when ZF goto %0002e93a
000447be: goto %0003d87e

.address 0x407988
0003d87e: 
.address 0x407988
0003d883: RDI := 4
.address 0x40798D
0003d88c: RSP := RSP - 8
.address 0x40798D
0003d88f: mem := mem with [RSP, el]:u64 <- 0x407992
.address 0x40798D
0003d892: call @sub_405c50 with return %0003d894

.address 0x407992
0003d894: 
.address 0x407992
0003d89f: #8470 := low:8[RAX]
.address 0x407992
0003d8a2: OF := 0
.address 0x407992
0003d8a5: CF := 0
.address 0x407992
0003d8a8: AF := unknown[bits]:u1
.address 0x407992
0003d8ab: PF := ~low:1[let $1 = #8470 >> 4 ^ #8470 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407992
0003d8ae: SF := high:1[#8470]
.address 0x407992
0003d8b1: ZF := 0 = #8470
.address 0x407994
0003d8ba: when ~ZF goto %0003d36d
000447bf: goto %0003d39b

.address 0x407C48
0003d36d: 
.address 0x407C48
0003d372: RDI := 0x620060
.address 0x407C4F
0003d37b: RSP := RSP - 8
.address 0x407C4F
0003d37e: mem := mem with [RSP, el]:u64 <- 0x407C54
.address 0x407C4F
0003d381: call @sub_4072f0 with return %0003d383

.address 0x407C54
0003d383: 
.address 0x407C54
0003d388: RDI := 0x620070
.address 0x407C5B
0003d391: RSP := RSP - 8
.address 0x407C5B
0003d394: mem := mem with [RSP, el]:u64 <- 0x407C60
.address 0x407C5B
0003d397: call @sub_4072f0 with return %0003d399

.address 0x407C60
0003d399: 
.address 0x407C60
0003d39f: goto %0003d39b

.address 0x40799A
0003d39b: 
.address 0x40799A
0003d3a5: RDI := 0x620060
.address 0x4079A1
0003d3ae: RSP := RSP - 8
.address 0x4079A1
0003d3b1: mem := mem with [RSP, el]:u64 <- 0x4079A6
.address 0x4079A1
0003d3b4: call @sub_4072f0 with return %0003d3b6

.address 0x4079A6
0003d3b6: 
.address 0x4079A6
0003d3bb: RDI := R14
.address 0x4079A9
0003d3c4: RSP := RSP - 8
.address 0x4079A9
0003d3c7: mem := mem with [RSP, el]:u64 <- 0x4079AE
.address 0x4079A9
0003d3ca: call @sub_4072f0 with return %0003d3cc

.address 0x4079AE
0003d3cc: 
.address 0x4079AE
0003d3d1: RDI := 0x620070
.address 0x4079B5
0003d3da: RSP := RSP - 8
.address 0x4079B5
0003d3dd: mem := mem with [RSP, el]:u64 <- 0x4079BA
.address 0x4079B5
0003d3e0: call @sub_4072f0 with return %0002e93a

.address 0x4079BA
0002e93a: 
.address 0x4079BA
0002e950: #6450 := R12
.address 0x4079BA
0002e953: OF := 0
.address 0x4079BA
0002e956: CF := 0
.address 0x4079BA
0002e959: AF := unknown[bits]:u1
.address 0x4079BA
0002e95c: PF := ~low:1[let $1 = #6450 >> 4 ^ #6450 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4079BA
0002e95f: SF := high:1[#6450]
.address 0x4079BA
0002e962: ZF := 0 = #6450
.address 0x4079BD
0002e96c: when ZF goto %0002e966
000447c0: goto %0003d84b

.address 0x407C08
0002e966: 
.address 0x407C08
0002e97c: R9 := 0
.address 0x407C08
0002e97f: AF := unknown[bits]:u1
.address 0x407C08
0002e982: ZF := 1
.address 0x407C08
0002e985: PF := 1
.address 0x407C08
0002e988: OF := 0
.address 0x407C08
0002e98b: CF := 0
.address 0x407C08
0002e98e: SF := 0
.address 0x407C0B
0002e99b: R14 := 0
.address 0x407C0B
0002e99e: AF := unknown[bits]:u1
.address 0x407C0B
0002e9a1: ZF := 1
.address 0x407C0B
0002e9a4: PF := 1
.address 0x407C0B
0002e9a7: OF := 0
.address 0x407C0B
0002e9aa: CF := 0
.address 0x407C0B
0002e9ad: SF := 0
.address 0x407C0E
0002e9ba: #6452 := RBX
.address 0x407C0E
0002e9bd: OF := 0
.address 0x407C0E
0002e9c0: CF := 0
.address 0x407C0E
0002e9c3: AF := unknown[bits]:u1
.address 0x407C0E
0002e9c6: PF := ~low:1[let $1 = #6452 >> 4 ^ #6452 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407C0E
0002e9c9: SF := high:1[#6452]
.address 0x407C0E
0002e9cc: ZF := 0 = #6452
.address 0x407C11
0002e9d3: R10 := RBP
.address 0x407C14
0002e9dd: when ~ZF goto %0002e9d7
000447c1: goto %0003d2df

.address 0x4079C3
0003d84b: 
.address 0x4079C3
0003d850: R14 := pad:64[pad:32[mem[0x6213A8]]]
.address 0x4079CB
0003d85d: #8468 := low:8[R14]
.address 0x4079CB
0003d860: OF := 0
.address 0x4079CB
0003d863: CF := 0
.address 0x4079CB
0003d866: AF := unknown[bits]:u1
.address 0x4079CB
0003d869: PF := ~low:1[let $1 = #8468 >> 4 ^ #8468 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4079CB
0003d86c: SF := high:1[#8468]
.address 0x4079CB
0003d86f: ZF := 0 = #8468
.address 0x4079CE
0003d878: when ~ZF goto %0003d131
000447c2: goto %0003d159

.address 0x407B80
0003d131: 
.address 0x407B80
0003d136: R14 := pad:64[pad:32[mem[0x6213A9]]]
.address 0x407B88
0003d143: #8425 := low:8[R14]
.address 0x407B88
0003d146: OF := 0
.address 0x407B88
0003d149: CF := 0
.address 0x407B88
0003d14c: AF := unknown[bits]:u1
.address 0x407B88
0003d14f: PF := ~low:1[let $1 = #8425 >> 4 ^ #8425 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407B88
0003d152: SF := high:1[#8425]
.address 0x407B88
0003d155: ZF := 0 = #8425
.address 0x407B8B
0003d15f: when ZF goto %0003d159
000447c3: goto %0003d5aa

.address 0x407B91
0003d5aa: 
.address 0x407B91
0003d5b5: #8446 := mem[RSP + 0x27]
.address 0x407B91
0003d5b8: CF := mem[RSP + 0x27] < 0
.address 0x407B91
0003d5bb: OF := high:1[mem[RSP + 0x27] & (mem[RSP + 0x27] ^ #8446)]
.address 0x407B91
0003d5be: AF := 0x10 = (0x10 & (#8446 ^ mem[RSP + 0x27]))
.address 0x407B91
0003d5c1: PF := ~low:1[let $1 = #8446 >> 4 ^ #8446 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407B91
0003d5c4: SF := high:1[#8446]
.address 0x407B91
0003d5c7: ZF := 0 = #8446
.address 0x407B96
0003d5d0: when ~ZF goto %0003d4bf
000447c4: goto %0003d5d6

.address 0x407CB8
0003d4bf: 
.address 0x407CB8
0003d4c4: R10 := RBP
.address 0x407CBB
0003d4d1: R9 := 0
.address 0x407CBB
0003d4d4: AF := unknown[bits]:u1
.address 0x407CBB
0003d4d7: ZF := 1
.address 0x407CBB
0003d4da: PF := 1
.address 0x407CBB
0003d4dd: OF := 0
.address 0x407CBB
0003d4e0: CF := 0
.address 0x407CBB
0003d4e3: SF := 0
.address 0x407CBE
0003d4f0: R14 := 0
.address 0x407CBE
0003d4f3: AF := unknown[bits]:u1
.address 0x407CBE
0003d4f6: ZF := 1
.address 0x407CBE
0003d4f9: PF := 1
.address 0x407CBE
0003d4fc: OF := 0
.address 0x407CBE
0003d4ff: CF := 0
.address 0x407CBE
0003d502: SF := 0
.address 0x407CC1
0003d509: goto %0003d18a

.address 0x407B9C
0003d5d6: 
.address 0x407B9C
0003d5db: RAX := mem[RSP + 0x28, el]:u64
.address 0x407BA1
0003d5e2: RDI := mem[0x620288, el]:u64
.address 0x407BA8
0003d5e9: R10 := low:64[RBP - 2]
.address 0x407BAC
0003d5f0: RDX := pad:64[pad:32[mem[RAX]]]
.address 0x407BAF
0003d5f7: RAX := mem[RDI + 0x28, el]:u64
.address 0x407BB3
0003d604: #8448 := RAX - mem[RDI + 0x30, el]:u64
.address 0x407BB3
0003d607: CF := RAX < mem[RDI + 0x30, el]:u64
.address 0x407BB3
0003d60a: OF := high:1[(RAX ^ mem[RDI + 0x30, el]:u64) & (RAX ^ #8448)]
.address 0x407BB3
0003d60d: AF := 0x10 = (0x10 & (#8448 ^ RAX ^ mem[RDI + 0x30, el]:u64))
.address 0x407BB3
0003d610: PF := ~low:1[let $1 = #8448 >> 4 ^ #8448 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407BB3
0003d613: SF := high:1[#8448]
.address 0x407BB3
0003d616: ZF := 0 = #8448
.address 0x407BB7
0003d61f: when ~CF goto %0003d578
000447c5: goto %0003d625

.address 0x407CEF
0003d578: 
.address 0x407CEF
0003d57d: RSI := pad:64[pad:32[low:8[RDX]]]
.address 0x407CF2
0003d584: mem := mem with [RSP + 8, el]:u64 <- R10
.address 0x407CF7
0003d58d: RSP := RSP - 8
.address 0x407CF7
0003d590: mem := mem with [RSP, el]:u64 <- 0x407CFC
.address 0x407CF7
0003d593: call @sub_4039d0 with return %0003d595

.address 0x407CFC
0003d595: 
.address 0x407CFC
0003d59a: R9 := 1
.address 0x407D02
0003d5a1: R10 := mem[RSP + 8, el]:u64
.address 0x407D07
0003d5a8: goto %0003d18a

.address 0x407BBD
0003d625: 
.address 0x407BBD
0003d62a: RCX := low:64[RAX + 1]
.address 0x407BC1
0003d631: R9 := 1
.address 0x407BC7
0003d638: mem := mem with [RDI + 0x28, el]:u64 <- RCX
.address 0x407BCB
0003d63f: mem := mem with [RAX] <- low:8[RDX]
.address 0x407BCD
0003d646: goto %0003d18a

.address 0x4079D4
0003d159: 
.address 0x4079D4
0003d169: R10 := RBP
.address 0x4079D7
0003d176: R9 := 0
.address 0x4079D7
0003d179: AF := unknown[bits]:u1
.address 0x4079D7
0003d17c: ZF := 1
.address 0x4079D7
0003d17f: PF := 1
.address 0x4079D7
0003d182: OF := 0
.address 0x4079D7
0003d185: CF := 0
.address 0x4079D7
0003d188: SF := 0
000447c6: goto %0003d18a

.address 0x4079DA
0003d18a: 
.address 0x4079DA
0003d18f: RDI := mem[0x621388, el]:u64
.address 0x4079E1
0003d19c: RSI := 0
.address 0x4079E1
0003d19f: AF := unknown[bits]:u1
.address 0x4079E1
0003d1a2: ZF := 1
.address 0x4079E1
0003d1a5: PF := 1
.address 0x4079E1
0003d1a8: OF := 0
.address 0x4079E1
0003d1ab: CF := 0
.address 0x4079E1
0003d1ae: SF := 0
.address 0x4079E3
0003d1b5: mem := mem with [RSP + 0x18, el]:u64 <- R10
.address 0x4079E8
0003d1bc: mem := mem with [RSP + 0x10, el]:u64 <- R9
.address 0x4079ED
0003d1c5: RSP := RSP - 8
.address 0x4079ED
0003d1c8: mem := mem with [RSP, el]:u64 <- 0x4079F2
.address 0x4079ED
0003d1cb: call @sub_406210 with return %0003d1cd

.address 0x4079F2
0003d1cd: 
.address 0x4079F2
0003d1d2: RSI := 1
.address 0x4079F7
0003d1d9: RDI := R12
.address 0x4079FA
0003d1e0: R15 := RAX
.address 0x4079FD
0003d1e9: RSP := RSP - 8
.address 0x4079FD
0003d1ec: mem := mem with [RSP, el]:u64 <- 0x407A02
.address 0x4079FD
0003d1ef: call @sub_406210 with return %0003d1f1

.address 0x407A02
0003d1f1: 
.address 0x407A02
0003d1fc: #8427 := mem[RAX] - 0x2F
.address 0x407A02
0003d1ff: CF := mem[RAX] < 0x2F
.address 0x407A02
0003d202: OF := high:1[(mem[RAX] ^ 0x2F) & (mem[RAX] ^ #8427)]
.address 0x407A02
0003d205: AF := 0x10 = (0x10 & (#8427 ^ mem[RAX] ^ 0x2F))
.address 0x407A02
0003d208: PF := ~low:1[let $1 = #8427 >> 4 ^ #8427 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407A02
0003d20b: SF := high:1[#8427]
.address 0x407A02
0003d20e: ZF := 0 = #8427
.address 0x407A05
0003d215: R11 := RAX
.address 0x407A08
0003d21c: RCX := 0x417F4D
.address 0x407A0F
0003d223: RAX := 0x417C4A
.address 0x407A16
0003d22a: RSI := 0x417C30
.address 0x407A1D
0003d231: R8 := R11
.address 0x407A20
0003d238: RDX := R15
.address 0x407A23
0003d23f: RDI := 1
.address 0x407A28
0003d246: mem := mem with [RSP + 8, el]:u64 <- R11
.address 0x407A2D
0003d24d: RCX := if ZF then RAX else RCX
.address 0x407A31
0003d25a: RAX := 0
.address 0x407A31
0003d25d: AF := unknown[bits]:u1
.address 0x407A31
0003d260: ZF := 1
.address 0x407A31
0003d263: PF := 1
.address 0x407A31
0003d266: OF := 0
.address 0x407A31
0003d269: CF := 0
.address 0x407A31
0003d26c: SF := 0
.address 0x407A33
0003d275: RSP := RSP - 8
.address 0x407A33
0003d278: mem := mem with [RSP, el]:u64 <- 0x407A38
.address 0x407A33
0003d27b: call @sub_403cd0 with return %0003d27d

.address 0x407A38
0003d27d: 
.address 0x407A38
0003d282: RDI := R15
.address 0x407A3B
0003d28b: RSP := RSP - 8
.address 0x407A3B
0003d28e: mem := mem with [RSP, el]:u64 <- 0x407A40
.address 0x407A3B
0003d291: call @sub_403e70 with return %0003d293

.address 0x407A40
0003d293: 
.address 0x407A40
0003d298: R11 := mem[RSP + 8, el]:u64
.address 0x407A45
0003d29f: RDI := R11
.address 0x407A48
0003d2a8: RSP := RSP - 8
.address 0x407A48
0003d2ab: mem := mem with [RSP, el]:u64 <- 0x407A4D
.address 0x407A48
0003d2ae: call @sub_403e70 with return %0003d2b0

.address 0x407A4D
0003d2b0: 
.address 0x407A4D
0003d2bb: #8429 := RBX
.address 0x407A4D
0003d2be: OF := 0
.address 0x407A4D
0003d2c1: CF := 0
.address 0x407A4D
0003d2c4: AF := unknown[bits]:u1
.address 0x407A4D
0003d2c7: PF := ~low:1[let $1 = #8429 >> 4 ^ #8429 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407A4D
0003d2ca: SF := high:1[#8429]
.address 0x407A4D
0003d2cd: ZF := 0 = #8429
.address 0x407A50
0003d2d4: R9 := mem[RSP + 0x10, el]:u64
.address 0x407A55
0003d2db: R10 := mem[RSP + 0x18, el]:u64
.address 0x407A5A
0003d2e5: when ZF goto %0003d2df
000447c7: goto %0002e9d7

.address 0x407C1A
0003d2df: 
.address 0x407C1A
0003d2ef: RDI := mem[RSP + 0x28, el]:u64
.address 0x407C1F
0003d2f6: RCX := mem[0x620288, el]:u64
.address 0x407C26
0003d2fd: RDX := R10
.address 0x407C29
0003d304: RSI := 1
.address 0x407C2E
0003d313: #8431 := RDI
.address 0x407C2E
0003d316: #8432 := R9
.address 0x407C2E
0003d319: RDI := RDI + #8432
.address 0x407C2E
0003d31c: CF := RDI < #8431
.address 0x407C2E
0003d31f: OF := high:1[#8431] = high:1[#8432] & (high:1[#8431] | high:1[RDI]) & ~(
high:1[#8431] & high:1[RDI])
.address 0x407C2E
0003d322: AF := 0x10 = (0x10 & (RDI ^ #8431 ^ #8432))
.address 0x407C2E
0003d325: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407C2E
0003d328: SF := high:1[RDI]
.address 0x407C2E
0003d32b: ZF := 0 = RDI
.address 0x407C31
0003d334: RSP := RSP - 8
.address 0x407C31
0003d337: mem := mem with [RSP, el]:u64 <- 0x407C36
.address 0x407C31
0003d33a: call @sub_403c80 with return %0003d33c

.address 0x407C36
0003d33c: 
.address 0x407C36
0003d349: #8434 := mem[0x6211F8, el]:u64
.address 0x407C36
0003d34c: #8435 := RBP
.address 0x407C36
0003d34f: mem := mem with [0x6211F8, el]:u64 <- mem[0x6211F8, el]:u64 + #8435
.address 0x407C36
0003d352: CF := mem[0x6211F8, el]:u64 < #8434
.address 0x407C36
0003d355: OF := high:1[#8434] = high:1[#8435] & (high:1[#8434] | high:1[mem[0x6211F8, el]:u64]) & ~(
high:1[#8434] & high:1[mem[0x6211F8, el]:u64])
.address 0x407C36
0003d358: AF := 0x10 = (0x10 & (mem[0x6211F8, el]:u64 ^ #8434 ^ #8435))
.address 0x407C36
0003d35b: PF := ~low:1[let $1 = mem[0x6211F8, el]:u64 >> 4 ^ mem[0x6211F8, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407C36
0003d35e: SF := high:1[mem[0x6211F8, el]:u64]
.address 0x407C36
0003d361: ZF := 0 = mem[0x6211F8, el]:u64
.address 0x407C3D
0003d368: goto %0002eab6

.address 0x407A60
0002e9d7: 
.address 0x407A60
0002e9ed: #6454 := mem[0x621318]
.address 0x407A60
0002e9f0: CF := mem[0x621318] < 0
.address 0x407A60
0002e9f3: OF := high:1[mem[0x621318] & (mem[0x621318] ^ #6454)]
.address 0x407A60
0002e9f6: AF := 0x10 = (0x10 & (#6454 ^ mem[0x621318]))
.address 0x407A60
0002e9f9: PF := ~low:1[let $1 = #6454 >> 4 ^ #6454 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407A60
0002e9fc: SF := high:1[#6454]
.address 0x407A60
0002e9ff: ZF := 0 = #6454
.address 0x407A67
0002ea09: when ZF goto %0002ea03
000447c8: goto %0003d7ea

.address 0x407A69
0003d7ea: 
.address 0x407A69
0003d7ef: RDX := mem[RBX + 0x18, el]:u64
.address 0x407A6D
0003d7f6: RAX := mem[RBX + 0x20, el]:u64
.address 0x407A71
0003d805: #8463 := RAX
.address 0x407A71
0003d808: #8464 := RDX
.address 0x407A71
0003d80b: RAX := RAX - RDX
.address 0x407A71
0003d80e: CF := #8463 < #8464
.address 0x407A71
0003d811: OF := high:1[(#8463 ^ #8464) & (#8463 ^ RAX)]
.address 0x407A71
0003d814: AF := 0x10 = (0x10 & (RAX ^ #8463 ^ #8464))
.address 0x407A71
0003d817: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407A71
0003d81a: SF := high:1[RAX]
.address 0x407A71
0003d81d: ZF := 0 = RAX
.address 0x407A74
0003d82a: #8466 := RAX - 7
.address 0x407A74
0003d82d: CF := RAX < 7
.address 0x407A74
0003d830: OF := high:1[(RAX ^ 7) & (RAX ^ #8466)]
.address 0x407A74
0003d833: AF := 0x10 = (0x10 & (#8466 ^ RAX ^ 7))
.address 0x407A74
0003d836: PF := ~low:1[let $1 = #8466 >> 4 ^ #8466 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407A74
0003d839: SF := high:1[#8466]
.address 0x407A74
0003d83c: ZF := 0 = #8466
.address 0x407A78
0003d845: when CF | ZF goto %0003d3e5
000447c9: goto %0003d427

.address 0x407C68
0003d3e5: 
.address 0x407C68
0003d3ea: RSI := 8
.address 0x407C6D
0003d3f1: RDI := RBX
.address 0x407C70
0003d3f8: mem := mem with [RSP + 0x10, el]:u64 <- R10
.address 0x407C75
0003d3ff: mem := mem with [RSP + 8, el]:u64 <- R9
.address 0x407C7A
0003d408: RSP := RSP - 8
.address 0x407C7A
0003d40b: mem := mem with [RSP, el]:u64 <- 0x407C7F
.address 0x407C7A
0003d40e: call @_obstack_newchunk with return %0003d410

.address 0x407C7F
0003d410: 
.address 0x407C7F
0003d415: RDX := mem[RBX + 0x18, el]:u64
.address 0x407C83
0003d41c: R10 := mem[RSP + 0x10, el]:u64
.address 0x407C88
0003d423: R9 := mem[RSP + 8, el]:u64
.address 0x407C8D
0003d42b: goto %0003d427

.address 0x407A7E
0003d427: 
.address 0x407A7E
0003d431: RAX := mem[0x6211F8, el]:u64
.address 0x407A85
0003d438: mem := mem with [RDX, el]:u64 <- RAX
.address 0x407A88
0003d446: #8437 := mem[RBX + 0x18, el]:u64
.address 0x407A88
0003d449: mem := mem with [RBX + 0x18, el]:u64 <- mem[RBX + 0x18, el]:u64 + 8
.address 0x407A88
0003d44c: CF := mem[RBX + 0x18, el]:u64 < #8437
.address 0x407A88
0003d44f: OF := ~high:1[#8437] & (high:1[#8437] | high:1[mem[RBX + 0x18, el]:u64]) & ~(
high:1[#8437] & high:1[mem[RBX + 0x18, el]:u64])
.address 0x407A88
0003d452: AF := 0x10 = (0x10 & (mem[RBX + 0x18, el]:u64 ^ #8437 ^ 8))
.address 0x407A88
0003d455: PF := ~low:1[let $1 = mem[RBX + 0x18, el]:u64 >> 4 ^ mem[RBX + 0x18, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407A88
0003d458: SF := high:1[mem[RBX + 0x18, el]:u64]
.address 0x407A88
0003d45b: ZF := 0 = mem[RBX + 0x18, el]:u64
000447ca: goto %0002ea03

.address 0x407A8D
0002ea03: 
.address 0x407A8D
0002ea13: RDI := mem[RSP + 0x28, el]:u64
.address 0x407A92
0002ea1a: RCX := mem[0x620288, el]:u64
.address 0x407A99
0002ea21: RDX := R10
.address 0x407A9C
0002ea28: RSI := 1
.address 0x407AA1
0002ea37: #6456 := RDI
.address 0x407AA1
0002ea3a: #6457 := R9
.address 0x407AA1
0002ea3d: RDI := RDI + #6457
.address 0x407AA1
0002ea40: CF := RDI < #6456
.address 0x407AA1
0002ea43: OF := high:1[#6456] = high:1[#6457] & (high:1[#6456] | high:1[RDI]) & ~(
high:1[#6456] & high:1[RDI])
.address 0x407AA1
0002ea46: AF := 0x10 = (0x10 & (RDI ^ #6456 ^ #6457))
.address 0x407AA1
0002ea49: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407AA1
0002ea4c: SF := high:1[RDI]
.address 0x407AA1
0002ea4f: ZF := 0 = RDI
.address 0x407AA4
0002ea58: RSP := RSP - 8
.address 0x407AA4
0002ea5b: mem := mem with [RSP, el]:u64 <- 0x407AA9
.address 0x407AA4
0002ea5e: call @sub_403c80 with return %0002ea60

.address 0x407AA9
0002ea60: 
.address 0x407AA9
0002ea65: RAX := mem[0x6211F8, el]:u64
.address 0x407AB0
0002ea74: #6459 := RAX
.address 0x407AB0
0002ea77: #6460 := RBP
.address 0x407AB0
0002ea7a: RAX := RAX + #6460
.address 0x407AB0
0002ea7d: CF := RAX < #6459
.address 0x407AB0
0002ea80: OF := high:1[#6459] = high:1[#6460] & (high:1[#6459] | high:1[RAX]) & ~(
high:1[#6459] & high:1[RAX])
.address 0x407AB0
0002ea83: AF := 0x10 = (0x10 & (RAX ^ #6459 ^ #6460))
.address 0x407AB0
0002ea86: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407AB0
0002ea89: SF := high:1[RAX]
.address 0x407AB0
0002ea8c: ZF := 0 = RAX
.address 0x407AB3
0002ea99: #6462 := mem[0x621318]
.address 0x407AB3
0002ea9c: CF := mem[0x621318] < 0
.address 0x407AB3
0002ea9f: OF := high:1[mem[0x621318] & (mem[0x621318] ^ #6462)]
.address 0x407AB3
0002eaa2: AF := 0x10 = (0x10 & (#6462 ^ mem[0x621318]))
.address 0x407AB3
0002eaa5: PF := ~low:1[let $1 = #6462 >> 4 ^ #6462 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407AB3
0002eaa8: SF := high:1[#6462]
.address 0x407AB3
0002eaab: ZF := 0 = #6462
.address 0x407ABA
0002eab2: mem := mem with [0x6211F8, el]:u64 <- RAX
.address 0x407AC1
0002eabc: when ZF goto %0002eab6
000447cb: goto %0003d789

.address 0x407AC3
0003d789: 
.address 0x407AC3
0003d78e: RCX := mem[RBX + 0x18, el]:u64
.address 0x407AC7
0003d795: RDX := mem[RBX + 0x20, el]:u64
.address 0x407ACB
0003d7a4: #8458 := RDX
.address 0x407ACB
0003d7a7: #8459 := RCX
.address 0x407ACB
0003d7aa: RDX := RDX - RCX
.address 0x407ACB
0003d7ad: CF := #8458 < #8459
.address 0x407ACB
0003d7b0: OF := high:1[(#8458 ^ #8459) & (#8458 ^ RDX)]
.address 0x407ACB
0003d7b3: AF := 0x10 = (0x10 & (RDX ^ #8458 ^ #8459))
.address 0x407ACB
0003d7b6: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407ACB
0003d7b9: SF := high:1[RDX]
.address 0x407ACB
0003d7bc: ZF := 0 = RDX
.address 0x407ACE
0003d7c9: #8461 := RDX - 7
.address 0x407ACE
0003d7cc: CF := RDX < 7
.address 0x407ACE
0003d7cf: OF := high:1[(RDX ^ 7) & (RDX ^ #8461)]
.address 0x407ACE
0003d7d2: AF := 0x10 = (0x10 & (#8461 ^ RDX ^ 7))
.address 0x407ACE
0003d7d5: PF := ~low:1[let $1 = #8461 >> 4 ^ #8461 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407ACE
0003d7d8: SF := high:1[#8461]
.address 0x407ACE
0003d7db: ZF := 0 = #8461
.address 0x407AD2
0003d7e4: when CF | ZF goto %0003d460
000447cc: goto %0003d48d

.address 0x407C98
0003d460: 
.address 0x407C98
0003d465: RSI := 8
.address 0x407C9D
0003d46c: RDI := RBX
.address 0x407CA0
0003d475: RSP := RSP - 8
.address 0x407CA0
0003d478: mem := mem with [RSP, el]:u64 <- 0x407CA5
.address 0x407CA0
0003d47b: call @_obstack_newchunk with return %0003d47d

.address 0x407CA5
0003d47d: 
.address 0x407CA5
0003d482: RCX := mem[RBX + 0x18, el]:u64
.address 0x407CA9
0003d489: RAX := mem[0x6211F8, el]:u64
.address 0x407CB0
0003d491: goto %0003d48d

.address 0x407AD8
0003d48d: 
.address 0x407AD8
0003d497: mem := mem with [RCX, el]:u64 <- RAX
.address 0x407ADB
0003d4a5: #8440 := mem[RBX + 0x18, el]:u64
.address 0x407ADB
0003d4a8: mem := mem with [RBX + 0x18, el]:u64 <- mem[RBX + 0x18, el]:u64 + 8
.address 0x407ADB
0003d4ab: CF := mem[RBX + 0x18, el]:u64 < #8440
.address 0x407ADB
0003d4ae: OF := ~high:1[#8440] & (high:1[#8440] | high:1[mem[RBX + 0x18, el]:u64]) & ~(
high:1[#8440] & high:1[mem[RBX + 0x18, el]:u64])
.address 0x407ADB
0003d4b1: AF := 0x10 = (0x10 & (mem[RBX + 0x18, el]:u64 ^ #8440 ^ 8))
.address 0x407ADB
0003d4b4: PF := ~low:1[let $1 = mem[RBX + 0x18, el]:u64 >> 4 ^ mem[RBX + 0x18, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407ADB
0003d4b7: SF := high:1[mem[RBX + 0x18, el]:u64]
.address 0x407ADB
0003d4ba: ZF := 0 = mem[RBX + 0x18, el]:u64
000447cd: goto %0002eab6

.address 0x407AE0
0002eab6: 
.address 0x407AE0
0002eacc: #6464 := R12
.address 0x407AE0
0002eacf: OF := 0
.address 0x407AE0
0002ead2: CF := 0
.address 0x407AE0
0002ead5: AF := unknown[bits]:u1
.address 0x407AE0
0002ead8: PF := ~low:1[let $1 = #6464 >> 4 ^ #6464 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407AE0
0002eadb: SF := high:1[#6464]
.address 0x407AE0
0002eade: ZF := 0 = #6464
.address 0x407AE3
0002eae8: when ZF goto %0002eae2
000447ce: goto %0003d6d5

.address 0x407AE5
0003d6d5: 
.address 0x407AE5
0003d6da: RCX := mem[0x620288, el]:u64
.address 0x407AEC
0003d6e1: RDI := 0x417C44
.address 0x407AF3
0003d6e8: RDX := 6
.address 0x407AF8
0003d6ef: RSI := 1
.address 0x407AFD
0003d6f8: RSP := RSP - 8
.address 0x407AFD
0003d6fb: mem := mem with [RSP, el]:u64 <- 0x407B02
.address 0x407AFD
0003d6fe: call @sub_403c80 with return %0003d700

.address 0x407B02
0003d700: 
.address 0x407B02
0003d70b: #8454 := low:8[R14]
.address 0x407B02
0003d70e: OF := 0
.address 0x407B02
0003d711: CF := 0
.address 0x407B02
0003d714: AF := unknown[bits]:u1
.address 0x407B02
0003d717: PF := ~low:1[let $1 = #8454 >> 4 ^ #8454 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407B02
0003d71a: SF := high:1[#8454]
.address 0x407B02
0003d71d: ZF := 0 = #8454
.address 0x407B05
0003d726: when ZF goto %0002eae2
000447cf: goto %0003d72c

.address 0x407B07
0003d72c: 
.address 0x407B07
0003d731: RAX := mem[RSP + 0x28, el]:u64
.address 0x407B0C
0003d738: RDI := mem[0x620288, el]:u64
.address 0x407B13
0003d73f: RDX := pad:64[pad:32[mem[RAX + RBP - 1]]]
.address 0x407B18
0003d746: RAX := mem[RDI + 0x28, el]:u64
.address 0x407B1C
0003d753: #8456 := RAX - mem[RDI + 0x30, el]:u64
.address 0x407B1C
0003d756: CF := RAX < mem[RDI + 0x30, el]:u64
.address 0x407B1C
0003d759: OF := high:1[(RAX ^ mem[RDI + 0x30, el]:u64) & (RAX ^ #8456)]
.address 0x407B1C
0003d75c: AF := 0x10 = (0x10 & (#8456 ^ RAX ^ mem[RDI + 0x30, el]:u64))
.address 0x407B1C
0003d75f: PF := ~low:1[let $1 = #8456 >> 4 ^ #8456 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407B1C
0003d762: SF := high:1[#8456]
.address 0x407B1C
0003d765: ZF := 0 = #8456
.address 0x407B20
0003d76e: when ~CF goto %0003d50e
000447d0: goto %0003d774

.address 0x407CD0
0003d50e: 
.address 0x407CD0
0003d513: RSI := pad:64[pad:32[low:8[RDX]]]
.address 0x407CD3
0003d51c: RSP := RSP - 8
.address 0x407CD3
0003d51f: mem := mem with [RSP, el]:u64 <- 0x407CD8
.address 0x407CD3
0003d522: call @sub_4039d0 with return %0003d524

.address 0x407CD8
0003d524: 
.address 0x407CD8
0003d529: goto %0002eae2

.address 0x407B26
0003d774: 
.address 0x407B26
0003d779: RCX := low:64[RAX + 1]
.address 0x407B2A
0003d780: mem := mem with [RDI + 0x28, el]:u64 <- RCX
.address 0x407B2E
0003d787: mem := mem with [RAX] <- low:8[RDX]
000447d1: goto %0002eae2

.address 0x407B30
0002eae2: 
.address 0x407B30
0002eaf2: RDI := mem[RSP + 0x28, el]:u64
.address 0x407B35
0002eaff: #6466 := RDI - mem[RSP, el]:u64
.address 0x407B35
0002eb02: CF := RDI < mem[RSP, el]:u64
.address 0x407B35
0002eb05: OF := high:1[(RDI ^ mem[RSP, el]:u64) & (RDI ^ #6466)]
.address 0x407B35
0002eb08: AF := 0x10 = (0x10 & (#6466 ^ RDI ^ mem[RSP, el]:u64))
.address 0x407B35
0002eb0b: PF := ~low:1[let $1 = #6466 >> 4 ^ #6466 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407B35
0002eb0e: SF := high:1[#6466]
.address 0x407B35
0002eb11: ZF := 0 = #6466
.address 0x407B39
0002eb1b: when ZF goto %0002eb15
000447d2: goto %0003d69a

.address 0x407B3B
0003d69a: 
.address 0x407B3B
0003d6a5: #8452 := RDI - R13
.address 0x407B3B
0003d6a8: CF := RDI < R13
.address 0x407B3B
0003d6ab: OF := high:1[(RDI ^ R13) & (RDI ^ #8452)]
.address 0x407B3B
0003d6ae: AF := 0x10 = (0x10 & (#8452 ^ RDI ^ R13))
.address 0x407B3B
0003d6b1: PF := ~low:1[let $1 = #8452 >> 4 ^ #8452 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407B3B
0003d6b4: SF := high:1[#8452]
.address 0x407B3B
0003d6b7: ZF := 0 = #8452
.address 0x407B3E
0003d6c0: when ZF goto %0002eb15
000447d3: goto %0003d6c6

.address 0x407B40
0003d6c6: 
.address 0x407B40
0003d6cd: RSP := RSP - 8
.address 0x407B40
0003d6d0: mem := mem with [RSP, el]:u64 <- 0x407B45
.address 0x407B40
0003d6d3: call @sub_403e70 with return %0002eb15

.address 0x407B45
0002eb15: 
.address 0x407B45
0002eb25: RAX := pad:64[pad:32[mem[RSP + 0x27]]]
.address 0x407B4A
0002eb34: #6468 := RAX
.address 0x407B4A
0002eb37: #6469 := RBP
.address 0x407B4A
0002eb3a: RAX := RAX + #6469
.address 0x407B4A
0002eb3d: CF := RAX < #6468
.address 0x407B4A
0002eb40: OF := high:1[#6468] = high:1[#6469] & (high:1[#6468] | high:1[RAX]) & ~(
high:1[#6468] & high:1[RAX])
.address 0x407B4A
0002eb43: AF := 0x10 = (0x10 & (RAX ^ #6468 ^ #6469))
.address 0x407B4A
0002eb46: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407B4A
0002eb49: SF := high:1[RAX]
.address 0x407B4A
0002eb4c: ZF := 0 = RAX
.address 0x407B4D
0002eb53: RBX := mem[RSP + 0x2038, el]:u64
.address 0x407B55
0002eb60: RBX := RBX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x407B55
0002eb63: OF := 0
.address 0x407B55
0002eb66: CF := 0
.address 0x407B55
0002eb69: AF := unknown[bits]:u1
.address 0x407B55
0002eb6c: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407B55
0002eb6f: SF := high:1[RBX]
.address 0x407B55
0002eb72: ZF := 0 = RBX
.address 0x407B5E
0002eb7c: when ~ZF goto %0002eb76
000447d4: goto %0003d0b9

.address 0x407D0C
0002eb76: 
.address 0x407D0C
0002eb88: RSP := RSP - 8
.address 0x407D0C
0002eb8b: mem := mem with [RSP, el]:u64 <- 0x407D11
.address 0x407D0C
0002eb8e: call @sub_403970 with return %0002eb90

.address 0x407D11
0002eb90: 
000447d5: call @sub_407d20 with noreturn

.address 0x407B64
0003d0b9: 
.address 0x407B64
0003d0c5: #8421 := RSP
.address 0x407B64
0003d0c8: RSP := RSP + 0x2048
.address 0x407B64
0003d0cb: CF := RSP < #8421
.address 0x407B64
0003d0ce: OF := ~high:1[#8421] & (high:1[#8421] | high:1[RSP]) & ~(high:1[#8421] & high:1[RSP])
.address 0x407B64
0003d0d1: AF := 0x10 = (0x10 & (RSP ^ #8421 ^ 0x2048))
.address 0x407B64
0003d0d4: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407B64
0003d0d7: SF := high:1[RSP]
.address 0x407B64
0003d0da: ZF := 0 = RSP
.address 0x407B6B
0003d0e2: RBX := mem[RSP, el]:u64
.address 0x407B6B
0003d0e5: RSP := RSP + 8
.address 0x407B6C
0003d0ed: RBP := mem[RSP, el]:u64
.address 0x407B6C
0003d0f0: RSP := RSP + 8
.address 0x407B6D
0003d0f8: R12 := mem[RSP, el]:u64
.address 0x407B6D
0003d0fb: RSP := RSP + 8
.address 0x407B6F
0003d103: R13 := mem[RSP, el]:u64
.address 0x407B6F
0003d106: RSP := RSP + 8
.address 0x407B71
0003d10e: R14 := mem[RSP, el]:u64
.address 0x407B71
0003d111: RSP := RSP + 8
.address 0x407B73
0003d119: R15 := mem[RSP, el]:u64
.address 0x407B73
0003d11c: RSP := RSP + 8
.address 0x407B75
0003d125: #8424 := mem[RSP, el]:u64
.address 0x407B75
0003d128: RSP := RSP + 8
.address 0x407B75
0003d12c: call #8424 with noreturn


.address 0x407D20
00043f3d: sub sub_407d20()
.address 0x407D20
0002eb96: 
.address 0x407D20
0002eb9d: #6472 := R15
.address 0x407D20
0002eba0: RSP := RSP - 8
.address 0x407D20
0002eba3: mem := mem with [RSP, el]:u64 <- #6472
.address 0x407D22
0002ebac: #6473 := R14
.address 0x407D22
0002ebaf: RSP := RSP - 8
.address 0x407D22
0002ebb2: mem := mem with [RSP, el]:u64 <- #6473
.address 0x407D24
0002ebb9: R15 := pad:64[low:32[RSI]]
.address 0x407D27
0002ebc2: #6474 := R13
.address 0x407D27
0002ebc5: RSP := RSP - 8
.address 0x407D27
0002ebc8: mem := mem with [RSP, el]:u64 <- #6474
.address 0x407D29
0002ebd1: #6475 := R12
.address 0x407D29
0002ebd4: RSP := RSP - 8
.address 0x407D29
0002ebd7: mem := mem with [RSP, el]:u64 <- #6475
.address 0x407D2B
0002ebde: R14 := RDI
.address 0x407D2E
0002ebe7: #6476 := RBP
.address 0x407D2E
0002ebea: RSP := RSP - 8
.address 0x407D2E
0002ebed: mem := mem with [RSP, el]:u64 <- #6476
.address 0x407D2F
0002ebf6: #6477 := RBX
.address 0x407D2F
0002ebf9: RSP := RSP - 8
.address 0x407D2F
0002ebfc: mem := mem with [RSP, el]:u64 <- #6477
.address 0x407D30
0002ec03: R13 := RDX
.address 0x407D33
0002ec0a: R12 := RCX
.address 0x407D36
0002ec18: #6478 := RSP
.address 0x407D36
0002ec1b: RSP := RSP - 0x18
.address 0x407D36
0002ec1e: CF := #6478 < 0x18
.address 0x407D36
0002ec21: OF := high:1[(#6478 ^ 0x18) & (#6478 ^ RSP)]
.address 0x407D36
0002ec24: AF := 0x10 = (0x10 & (RSP ^ #6478 ^ 0x18))
.address 0x407D36
0002ec27: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407D36
0002ec2a: SF := high:1[RSP]
.address 0x407D36
0002ec2d: ZF := 0 = RSP
.address 0x407D3A
0002ec3a: #6481 := low:8[RSI]
.address 0x407D3A
0002ec3d: OF := 0
.address 0x407D3A
0002ec40: CF := 0
.address 0x407D3A
0002ec43: AF := unknown[bits]:u1
.address 0x407D3A
0002ec46: PF := ~low:1[let $1 = #6481 >> 4 ^ #6481 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407D3A
0002ec49: SF := high:1[#6481]
.address 0x407D3A
0002ec4c: ZF := 0 = #6481
.address 0x407D3D
0002ec53: RAX := pad:64[pad:32[mem[0x621312]]]
.address 0x407D44
0002ec5d: when ZF goto %0002ec57
000447d6: goto %0003d086

.address 0x407DA0
0002ec57: 
.address 0x407DA0
0002ec6d: #6483 := low:8[RAX]
.address 0x407DA0
0002ec70: OF := 0
.address 0x407DA0
0002ec73: CF := 0
.address 0x407DA0
0002ec76: AF := unknown[bits]:u1
.address 0x407DA0
0002ec79: PF := ~low:1[let $1 = #6483 >> 4 ^ #6483 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407DA0
0002ec7c: SF := high:1[#6483]
.address 0x407DA0
0002ec7f: ZF := 0 = #6483
.address 0x407DA2
0002ec86: RBP := mem[RDI, el]:u64
.address 0x407DA5
0002ec90: when ZF goto %0002ec8a
000447d7: goto %0002ede2

.address 0x407DA7
0002ede2: 
.address 0x407DA7
0002eded: #6494 := mem[0x621390]
.address 0x407DA7
0002edf0: CF := mem[0x621390] < 0
.address 0x407DA7
0002edf3: OF := high:1[mem[0x621390] & (mem[0x621390] ^ #6494)]
.address 0x407DA7
0002edf6: AF := 0x10 = (0x10 & (#6494 ^ mem[0x621390]))
.address 0x407DA7
0002edf9: PF := ~low:1[let $1 = #6494 >> 4 ^ #6494 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407DA7
0002edfc: SF := high:1[#6494]
.address 0x407DA7
0002edff: ZF := 0 = #6494
.address 0x407DAE
0002ee06: RDX := pad:64[pad:32[mem[RDI + 0xB9]]]
.address 0x407DB5
0002ee10: when ~ZF goto %0002ee0a
000447d8: goto %0002ee36

.address 0x407F88
0002ee0a: 
.address 0x407F88
0002ee20: #6496 := low:8[RDX]
.address 0x407F88
0002ee23: OF := 0
.address 0x407F88
0002ee26: CF := 0
.address 0x407F88
0002ee29: AF := unknown[bits]:u1
.address 0x407F88
0002ee2c: PF := ~low:1[let $1 = #6496 >> 4 ^ #6496 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407F88
0002ee2f: SF := high:1[#6496]
.address 0x407F88
0002ee32: ZF := 0 = #6496
.address 0x407F8A
0002ee3c: when ZF goto %0002ee36
000447d9: goto %0003d075

.address 0x407F90
0003d075: 
.address 0x407F90
0003d07a: R8 := pad:64[mem[R14 + 0xAC, el]:u32]
.address 0x407F97
0003d081: goto %0002ee48

.address 0x407DBB
0002ee36: 
.address 0x407DBB
0002ee46: R8 := pad:64[mem[R14 + 0x30, el]:u32]
000447da: goto %0002ee48

.address 0x407D46
0003d086: 
.address 0x407D46
0003d091: #8419 := low:8[RAX]
.address 0x407D46
0003d094: OF := 0
.address 0x407D46
0003d097: CF := 0
.address 0x407D46
0003d09a: AF := unknown[bits]:u1
.address 0x407D46
0003d09d: PF := ~low:1[let $1 = #8419 >> 4 ^ #8419 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407D46
0003d0a0: SF := high:1[#8419]
.address 0x407D46
0003d0a3: ZF := 0 = #8419
.address 0x407D48
0003d0aa: RBP := mem[RDI + 8, el]:u64
.address 0x407D4C
0003d0b3: when ~ZF goto %0002ffa2
000447db: goto %0002ec8a

.address 0x407EC8
0002ffa2: 
.address 0x407EC8
0002ffad: #6659 := mem[RDI + 0xB9]
.address 0x407EC8
0002ffb0: CF := mem[RDI + 0xB9] < 0
.address 0x407EC8
0002ffb3: OF := high:1[mem[RDI + 0xB9] & (mem[RDI + 0xB9] ^ #6659)]
.address 0x407EC8
0002ffb6: AF := 0x10 = (0x10 & (#6659 ^ mem[RDI + 0xB9]))
.address 0x407EC8
0002ffb9: PF := ~low:1[let $1 = #6659 >> 4 ^ #6659 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407EC8
0002ffbc: SF := high:1[#6659]
.address 0x407EC8
0002ffbf: ZF := 0 = #6659
.address 0x407ECF
0002ffc6: R8 := pad:64[mem[RDI + 0xAC, el]:u32]
.address 0x407ED6
0002ffd0: when ~ZF goto %0002ffca
000447dc: goto %0003ca22

.address 0x407F00
0002ffca: 
.address 0x407F00
0002ffda: RCX := pad:64[pad:32[mem[R14 + 0xB8]]]
.address 0x407F08
0002ffe7: RDX := 0
.address 0x407F08
0002ffea: AF := unknown[bits]:u1
.address 0x407F08
0002ffed: ZF := 1
.address 0x407F08
0002fff0: PF := 1
.address 0x407F08
0002fff3: OF := 0
.address 0x407F08
0002fff6: CF := 0
.address 0x407F08
0002fff9: SF := 0
.address 0x407F0A
00030006: #6661 := low:8[RCX]
.address 0x407F0A
00030009: OF := 0
.address 0x407F0A
0003000c: CF := 0
.address 0x407F0A
0003000f: AF := unknown[bits]:u1
.address 0x407F0A
00030012: PF := ~low:1[let $1 = #6661 >> 4 ^ #6661 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407F0A
00030015: SF := high:1[#6661]
.address 0x407F0A
00030018: ZF := 0 = #6661
.address 0x407F0C
00030022: when ZF goto %0003001c
000447dd: goto %0002ee70

.address 0x407ED8
0003ca22: 
.address 0x407ED8
0003ca27: RDI := 0xC
.address 0x407EDD
0003ca30: RSP := RSP - 8
.address 0x407EDD
0003ca33: mem := mem with [RSP, el]:u64 <- 0x407EE2
.address 0x407EDD
0003ca36: call @sub_405c50 with return %0003ca38

.address 0x407EE2
0003ca38: 
.address 0x407EE2
0003ca43: #8364 := low:8[RAX]
.address 0x407EE2
0003ca46: OF := 0
.address 0x407EE2
0003ca49: CF := 0
.address 0x407EE2
0003ca4c: AF := unknown[bits]:u1
.address 0x407EE2
0003ca4f: PF := ~low:1[let $1 = #8364 >> 4 ^ #8364 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407EE2
0003ca52: SF := high:1[#8364]
.address 0x407EE2
0003ca55: ZF := 0 = #8364
.address 0x407EE4
0003ca5c: RDX := 0xFFFFFFFF
.address 0x407EE9
0003ca65: when ZF goto %0002ee48
000447de: goto %0003ca6b

.address 0x407EEF
0003ca6b: 
.address 0x407EEF
0003ca70: RCX := 0xC0
.address 0x407EF4
0003ca77: goto %0002fd05

.address 0x407DBF
0002ee48: 
.address 0x407DBF
0002ee4d: RCX := pad:64[pad:32[mem[R14 + 0xB8]]]
.address 0x407DC7
0002ee5a: #6498 := low:8[RCX]
.address 0x407DC7
0002ee5d: OF := 0
.address 0x407DC7
0002ee60: CF := 0
.address 0x407DC7
0002ee63: AF := unknown[bits]:u1
.address 0x407DC7
0002ee66: PF := ~low:1[let $1 = #6498 >> 4 ^ #6498 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407DC7
0002ee69: SF := high:1[#6498]
.address 0x407DC7
0002ee6c: ZF := 0 = #6498
.address 0x407DC9
0002ee76: when ~ZF goto %0002ee70
000447df: goto %0003001c

.address 0x407F12
0002ee70: 
.address 0x407F12
0002ee80: RAX := pad:64[low:32[R8]]
.address 0x407F15
0002ee8d: RAX := pad:64[low:32[RAX] & 0xF000]
.address 0x407F15
0002ee90: OF := 0
.address 0x407F15
0002ee93: CF := 0
.address 0x407F15
0002ee96: AF := unknown[bits]:u1
.address 0x407F15
0002ee99: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407F15
0002ee9c: SF := high:1[low:32[RAX]]
.address 0x407F15
0002ee9f: ZF := 0 = low:32[RAX]
.address 0x407F1A
0002eeac: #6501 := low:32[RAX] - 0x8000
.address 0x407F1A
0002eeaf: CF := low:32[RAX] < 0x8000
.address 0x407F1A
0002eeb2: OF := high:1[(low:32[RAX] ^ 0x8000) & (low:32[RAX] ^ #6501)]
.address 0x407F1A
0002eeb5: AF := 0x10 = (0x10 & (#6501 ^ low:32[RAX] ^ 0x8000))
.address 0x407F1A
0002eeb8: PF := ~low:1[let $1 = #6501 >> 4 ^ #6501 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407F1A
0002eebb: SF := high:1[#6501]
.address 0x407F1A
0002eebe: ZF := 0 = #6501
.address 0x407F1F
0002eec8: when ZF goto %0002eec2
000447e0: goto %0003cf46

.address 0x408010
0002eec2: 
.address 0x408010
0002eed8: #6503 := low:32[R8] & 0x800
.address 0x408010
0002eedb: OF := 0
.address 0x408010
0002eede: CF := 0
.address 0x408010
0002eee1: AF := unknown[bits]:u1
.address 0x408010
0002eee4: PF := ~low:1[let $1 = #6503 >> 4 ^ #6503 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408010
0002eee7: SF := high:1[#6503]
.address 0x408010
0002eeea: ZF := 0 = #6503
.address 0x408017
0002eef4: when ZF goto %0002eeee
000447e1: goto %0003cef3

.address 0x408019
0003cef3: 
.address 0x408019
0003cef8: RDI := 0x10
.address 0x40801E
0003cf01: RSP := RSP - 8
.address 0x40801E
0003cf04: mem := mem with [RSP, el]:u64 <- 0x408023
.address 0x40801E
0003cf07: call @sub_405c50 with return %0003cf09

.address 0x408023
0003cf09: 
.address 0x408023
0003cf14: #8405 := low:8[RAX]
.address 0x408023
0003cf17: OF := 0
.address 0x408023
0003cf1a: CF := 0
.address 0x408023
0003cf1d: AF := unknown[bits]:u1
.address 0x408023
0003cf20: PF := ~low:1[let $1 = #8405 >> 4 ^ #8405 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408023
0003cf23: SF := high:1[#8405]
.address 0x408023
0003cf26: ZF := 0 = #8405
.address 0x408025
0003cf2f: when ZF goto %0002eeee
000447e2: goto %0003cf35

.address 0x408038
0002eeee: 
.address 0x408038
0002ef04: #6505 := low:32[R8] & 0x400
.address 0x408038
0002ef07: OF := 0
.address 0x408038
0002ef0a: CF := 0
.address 0x408038
0002ef0d: AF := unknown[bits]:u1
.address 0x408038
0002ef10: PF := ~low:1[let $1 = #6505 >> 4 ^ #6505 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408038
0002ef13: SF := high:1[#6505]
.address 0x408038
0002ef16: ZF := 0 = #6505
.address 0x40803F
0002ef20: when ~ZF goto %0002ef1a
000447e3: goto %0002fc07

.address 0x408070
0002ef1a: 
.address 0x408070
0002ef2a: RDI := 0x11
.address 0x408075
0002ef34: RSP := RSP - 8
.address 0x408075
0002ef37: mem := mem with [RSP, el]:u64 <- 0x40807A
.address 0x408075
0002ef3a: call @sub_405c50 with return %0002fbe6

.address 0x40807A
0002fbe6: 
.address 0x40807A
0002fbf1: #6626 := low:8[RAX]
.address 0x40807A
0002fbf4: OF := 0
.address 0x40807A
0002fbf7: CF := 0
.address 0x40807A
0002fbfa: AF := unknown[bits]:u1
.address 0x40807A
0002fbfd: PF := ~low:1[let $1 = #6626 >> 4 ^ #6626 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40807A
0002fc00: SF := high:1[#6626]
.address 0x40807A
0002fc03: ZF := 0 = #6626
.address 0x40807C
0002fc0d: when ZF goto %0002fc07
000447e4: goto %0003ce90

.address 0x40807E
0003ce90: 
.address 0x40807E
0003ce95: RCX := 0x110
.address 0x408083
0003ce9c: goto %0002fd05

.address 0x408041
0002fc07: 
.address 0x408041
0002fc17: RDI := 0x15
.address 0x408046
0002fc20: RSP := RSP - 8
.address 0x408046
0002fc23: mem := mem with [RSP, el]:u64 <- 0x40804B
.address 0x408046
0002fc26: call @sub_405c50 with return %0002fc28

.address 0x40804B
0002fc28: 
.address 0x40804B
0002fc33: #6628 := low:8[RAX]
.address 0x40804B
0002fc36: OF := 0
.address 0x40804B
0002fc39: CF := 0
.address 0x40804B
0002fc3c: AF := unknown[bits]:u1
.address 0x40804B
0002fc3f: PF := ~low:1[let $1 = #6628 >> 4 ^ #6628 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40804B
0002fc42: SF := high:1[#6628]
.address 0x40804B
0002fc45: ZF := 0 = #6628
.address 0x40804D
0002fc4f: when ZF goto %0002fc49
000447e5: goto %0003ce53

.address 0x408053
0003ce53: 
.address 0x408053
0003ce5e: #8400 := mem[R14 + 0xC0]
.address 0x408053
0003ce61: CF := mem[R14 + 0xC0] < 0
.address 0x408053
0003ce64: OF := high:1[mem[R14 + 0xC0] & (mem[R14 + 0xC0] ^ #8400)]
.address 0x408053
0003ce67: AF := 0x10 = (0x10 & (#8400 ^ mem[R14 + 0xC0]))
.address 0x408053
0003ce6a: PF := ~low:1[let $1 = #8400 >> 4 ^ #8400 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408053
0003ce6d: SF := high:1[#8400]
.address 0x408053
0003ce70: ZF := 0 = #8400
.address 0x40805B
0003ce79: when ZF goto %0002fc49
000447e6: goto %0003ce7f

.address 0x408100
0002fc49: 
.address 0x408100
0002fc5f: R8 := pad:64[low:32[R8] & 0x49]
.address 0x408100
0002fc62: OF := 0
.address 0x408100
0002fc65: CF := 0
.address 0x408100
0002fc68: AF := unknown[bits]:u1
.address 0x408100
0002fc6b: PF := ~low:1[let $1 = low:32[R8] >> 4 ^ low:32[R8] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408100
0002fc6e: SF := high:1[low:32[R8]]
.address 0x408100
0002fc71: ZF := 0 = low:32[R8]
.address 0x408104
0002fc7b: when ZF goto %0002fc75
000447e7: goto %0003ce00

.address 0x408106
0003ce00: 
.address 0x408106
0003ce05: RDI := 0xE
.address 0x40810B
0003ce0e: RSP := RSP - 8
.address 0x40810B
0003ce11: mem := mem with [RSP, el]:u64 <- 0x408110
.address 0x40810B
0003ce14: call @sub_405c50 with return %0003ce16

.address 0x408110
0003ce16: 
.address 0x408110
0003ce21: #8398 := low:8[RAX]
.address 0x408110
0003ce24: OF := 0
.address 0x408110
0003ce27: CF := 0
.address 0x408110
0003ce2a: AF := unknown[bits]:u1
.address 0x408110
0003ce2d: PF := ~low:1[let $1 = #8398 >> 4 ^ #8398 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408110
0003ce30: SF := high:1[#8398]
.address 0x408110
0003ce33: ZF := 0 = #8398
.address 0x408112
0003ce3c: when ZF goto %0002fc75
000447e8: goto %0003ce42

.address 0x408120
0002fc75: 
.address 0x408120
0002fc8b: #6631 := mem[R14 + 0x28, el]:u64 - 1
.address 0x408120
0002fc8e: CF := mem[R14 + 0x28, el]:u64 < 1
.address 0x408120
0002fc91: OF := high:1[(mem[R14 + 0x28, el]:u64 ^ 1) & (mem[R14 + 0x28, el]:u64 ^ #6631)]
.address 0x408120
0002fc94: AF := 0x10 = (0x10 & (#6631 ^ mem[R14 + 0x28, el]:u64 ^ 1))
.address 0x408120
0002fc97: PF := ~low:1[let $1 = #6631 >> 4 ^ #6631 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408120
0002fc9a: SF := high:1[#6631]
.address 0x408120
0002fc9d: ZF := 0 = #6631
.address 0x408125
0002fca7: when CF | ZF goto %0002fca1
000447e9: goto %0003cbff

.address 0x40812B
0003cbff: 
.address 0x40812B
0003cc04: RDI := 0x16
.address 0x408130
0003cc0d: RSP := RSP - 8
.address 0x408130
0003cc10: mem := mem with [RSP, el]:u64 <- 0x408135
.address 0x408130
0003cc13: call @sub_405c50 with return %0003cc15

.address 0x408135
0003cc15: 
.address 0x408135
0003cc20: #8380 := low:8[RAX]
.address 0x408135
0003cc23: OF := 0
.address 0x408135
0003cc26: CF := 0
.address 0x408135
0003cc29: AF := unknown[bits]:u1
.address 0x408135
0003cc2c: PF := ~low:1[let $1 = #8380 >> 4 ^ #8380 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408135
0003cc2f: SF := high:1[#8380]
.address 0x408135
0003cc32: ZF := 0 = #8380
.address 0x408137
0003cc3b: when ZF goto %0002fca1
000447ea: goto %0003cc41

.address 0x40813D
0003cc41: 
.address 0x40813D
0003cc46: RCX := 0x160
.address 0x408142
0003cc4d: goto %0002fd05

.address 0x408114
0003ce42: 
.address 0x408114
0003ce47: RCX := 0xE0
.address 0x408119
0003ce4e: goto %0002fd05

.address 0x408061
0003ce7f: 
.address 0x408061
0003ce84: RCX := 0x150
.address 0x408066
0003ce8b: goto %0002fd05

.address 0x408027
0003cf35: 
.address 0x408027
0003cf3a: RCX := 0x100
.address 0x40802C
0003cf41: goto %0002fd05

.address 0x407F25
0003cf46: 
.address 0x407F25
0003cf51: #8407 := low:32[RAX] - 0x4000
.address 0x407F25
0003cf54: CF := low:32[RAX] < 0x4000
.address 0x407F25
0003cf57: OF := high:1[(low:32[RAX] ^ 0x4000) & (low:32[RAX] ^ #8407)]
.address 0x407F25
0003cf5a: AF := 0x10 = (0x10 & (#8407 ^ low:32[RAX] ^ 0x4000))
.address 0x407F25
0003cf5d: PF := ~low:1[let $1 = #8407 >> 4 ^ #8407 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407F25
0003cf60: SF := high:1[#8407]
.address 0x407F25
0003cf63: ZF := 0 = #8407
.address 0x407F2A
0003cf6c: when ZF goto %0003cea1
000447eb: goto %0003cf72

.address 0x408090
0003cea1: 
.address 0x408090
0003cea6: RAX := pad:64[low:32[R8]]
.address 0x408093
0003ceb3: RAX := pad:64[low:32[RAX] & 0x202]
.address 0x408093
0003ceb6: OF := 0
.address 0x408093
0003ceb9: CF := 0
.address 0x408093
0003cebc: AF := unknown[bits]:u1
.address 0x408093
0003cebf: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408093
0003cec2: SF := high:1[low:32[RAX]]
.address 0x408093
0003cec5: ZF := 0 = low:32[RAX]
.address 0x408098
0003ced2: #8403 := low:32[RAX] - 0x202
.address 0x408098
0003ced5: CF := low:32[RAX] < 0x202
.address 0x408098
0003ced8: OF := high:1[(low:32[RAX] ^ 0x202) & (low:32[RAX] ^ #8403)]
.address 0x408098
0003cedb: AF := 0x10 = (0x10 & (#8403 ^ low:32[RAX] ^ 0x202))
.address 0x408098
0003cede: PF := ~low:1[let $1 = #8403 >> 4 ^ #8403 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408098
0003cee1: SF := high:1[#8403]
.address 0x408098
0003cee4: ZF := 0 = #8403
.address 0x40809D
0003ceed: when ZF goto %0003cc52
000447ec: goto %0003cc9d

.address 0x408150
0003cc52: 
.address 0x408150
0003cc57: RDI := 0x14
.address 0x408155
0003cc60: RSP := RSP - 8
.address 0x408155
0003cc63: mem := mem with [RSP, el]:u64 <- 0x40815A
.address 0x408155
0003cc66: call @sub_405c50 with return %0003cc68

.address 0x40815A
0003cc68: 
.address 0x40815A
0003cc73: #8382 := low:8[RAX]
.address 0x40815A
0003cc76: OF := 0
.address 0x40815A
0003cc79: CF := 0
.address 0x40815A
0003cc7c: AF := unknown[bits]:u1
.address 0x40815A
0003cc7f: PF := ~low:1[let $1 = #8382 >> 4 ^ #8382 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40815A
0003cc82: SF := high:1[#8382]
.address 0x40815A
0003cc85: ZF := 0 = #8382
.address 0x40815C
0003cc8c: RCX := 0x140
.address 0x408161
0003cc95: when ~ZF goto %0002fd05
000447ed: goto %0003cc9b

.address 0x408167
0003cc9b: 
.address 0x408167
0003cca1: goto %0003cc9d

.address 0x4080A3
0003cc9d: 
.address 0x4080A3
0003ccad: #8384 := low:8[R8] & 2
.address 0x4080A3
0003ccb0: OF := 0
.address 0x4080A3
0003ccb3: CF := 0
.address 0x4080A3
0003ccb6: AF := unknown[bits]:u1
.address 0x4080A3
0003ccb9: PF := ~low:1[let $1 = #8384 >> 4 ^ #8384 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4080A3
0003ccbc: SF := high:1[#8384]
.address 0x4080A3
0003ccbf: ZF := 0 = #8384
.address 0x4080A7
0003ccc9: when ZF goto %0003ccc3
000447ee: goto %0003cdb7

.address 0x4080A9
0003cdb7: 
.address 0x4080A9
0003cdbc: RDI := 0x13
.address 0x4080AE
0003cdc5: RSP := RSP - 8
.address 0x4080AE
0003cdc8: mem := mem with [RSP, el]:u64 <- 0x4080B3
.address 0x4080AE
0003cdcb: call @sub_405c50 with return %0003cdcd

.address 0x4080B3
0003cdcd: 
.address 0x4080B3
0003cdd8: #8396 := low:8[RAX]
.address 0x4080B3
0003cddb: OF := 0
.address 0x4080B3
0003cdde: CF := 0
.address 0x4080B3
0003cde1: AF := unknown[bits]:u1
.address 0x4080B3
0003cde4: PF := ~low:1[let $1 = #8396 >> 4 ^ #8396 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4080B3
0003cde7: SF := high:1[#8396]
.address 0x4080B3
0003cdea: ZF := 0 = #8396
.address 0x4080B5
0003cdf1: RCX := 0x130
.address 0x4080BA
0003cdfa: when ~ZF goto %0002fd05
000447ef: goto %0003ccc3

.address 0x4080C0
0003ccc3: 
.address 0x4080C0
0003ccd9: R8 := pad:64[low:32[R8] & 0x200]
.address 0x4080C0
0003ccdc: OF := 0
.address 0x4080C0
0003ccdf: CF := 0
.address 0x4080C0
0003cce2: AF := unknown[bits]:u1
.address 0x4080C0
0003cce5: PF := ~low:1[let $1 = low:32[R8] >> 4 ^ low:32[R8] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4080C0
0003cce8: SF := high:1[low:32[R8]]
.address 0x4080C0
0003cceb: ZF := 0 = low:32[R8]
.address 0x4080C7
0003ccf2: RCX := 0x60
.address 0x4080CC
0003ccfb: when ZF goto %0002fd05
000447f0: goto %0003cd01

.address 0x4080D2
0003cd01: 
.address 0x4080D2
0003cd06: RDI := 0x12
.address 0x4080D7
0003cd0f: RSP := RSP - 8
.address 0x4080D7
0003cd12: mem := mem with [RSP, el]:u64 <- 0x4080DC
.address 0x4080D7
0003cd15: call @sub_405c50 with return %0003cd17

.address 0x4080DC
0003cd17: 
.address 0x4080DC
0003cd22: #8387 := low:8[RAX] - 1
.address 0x4080DC
0003cd25: CF := low:8[RAX] < 1
.address 0x4080DC
0003cd28: OF := high:1[(low:8[RAX] ^ 1) & (low:8[RAX] ^ #8387)]
.address 0x4080DC
0003cd2b: AF := 0x10 = (0x10 & (#8387 ^ low:8[RAX] ^ 1))
.address 0x4080DC
0003cd2e: PF := ~low:1[let $1 = #8387 >> 4 ^ #8387 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4080DC
0003cd31: SF := high:1[#8387]
.address 0x4080DC
0003cd34: ZF := 0 = #8387
.address 0x4080DE
0003cd43: #8389 := RCX
.address 0x4080DE
0003cd46: #8390 := RCX
.address 0x4080DE
0003cd49: RCX := #8390 - #8389 + pad:64[CF]
.address 0x4080DE
0003cd4c: OF := high:1[(#8389 ^ #8390) & (#8390 ^ RCX)]
.address 0x4080DE
0003cd4f: CF := #8390 < #8389 + pad:64[CF] | #8389 + pad:64[CF] < #8389
.address 0x4080DE
0003cd52: AF := 0x10 = (0x10 & (RCX ^ #8389 ^ #8390))
.address 0x4080DE
0003cd55: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4080DE
0003cd58: SF := high:1[RCX]
.address 0x4080DE
0003cd5b: ZF := 0 = RCX
.address 0x4080E1
0003cd68: RCX := extract:63:8[RCX].low:8[RCX] & 0x40
.address 0x4080E1
0003cd6b: OF := 0
.address 0x4080E1
0003cd6e: CF := 0
.address 0x4080E1
0003cd71: AF := unknown[bits]:u1
.address 0x4080E1
0003cd74: PF := ~low:1[let $1 = low:8[RCX] >> 4 ^ low:8[RCX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4080E1
0003cd77: SF := high:1[low:8[RCX]]
.address 0x4080E1
0003cd7a: ZF := 0 = low:8[RCX]
.address 0x4080E4
0003cd88: #8393 := RCX
.address 0x4080E4
0003cd8b: RCX := RCX + 0x120
.address 0x4080E4
0003cd8e: CF := RCX < #8393
.address 0x4080E4
0003cd91: OF := ~high:1[#8393] & (high:1[#8393] | high:1[RCX]) & ~(high:1[#8393] & high:1[RCX])
.address 0x4080E4
0003cd94: AF := 0x10 = (0x10 & (RCX ^ #8393 ^ 0x120))
.address 0x4080E4
0003cd97: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4080E4
0003cd9a: SF := high:1[RCX]
.address 0x4080E4
0003cd9d: ZF := 0 = RCX
.address 0x4080EB
0003cda4: goto %0002fd05

.address 0x407F30
0003cf72: 
.address 0x407F30
0003cf7d: #8409 := low:32[RAX] - 0xA000
.address 0x407F30
0003cf80: CF := low:32[RAX] < 0xA000
.address 0x407F30
0003cf83: OF := high:1[(low:32[RAX] ^ 0xA000) & (low:32[RAX] ^ #8409)]
.address 0x407F30
0003cf86: AF := 0x10 = (0x10 & (#8409 ^ low:32[RAX] ^ 0xA000))
.address 0x407F30
0003cf89: PF := ~low:1[let $1 = #8409 >> 4 ^ #8409 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407F30
0003cf8c: SF := high:1[#8409]
.address 0x407F30
0003cf8f: ZF := 0 = #8409
.address 0x407F35
0003cf98: when ZF goto %0003cda6
000447f1: goto %0003cf9e

.address 0x4080F0
0003cda6: 
.address 0x4080F0
0003cdab: RAX := 7
.address 0x4080F5
0003cdb2: goto %0003008e

.address 0x407F3B
0003cf9e: 
.address 0x407F3B
0003cfa9: #8411 := low:32[RAX] - 0x1000
.address 0x407F3B
0003cfac: CF := low:32[RAX] < 0x1000
.address 0x407F3B
0003cfaf: OF := high:1[(low:32[RAX] ^ 0x1000) & (low:32[RAX] ^ #8411)]
.address 0x407F3B
0003cfb2: AF := 0x10 = (0x10 & (#8411 ^ low:32[RAX] ^ 0x1000))
.address 0x407F3B
0003cfb5: PF := ~low:1[let $1 = #8411 >> 4 ^ #8411 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407F3B
0003cfb8: SF := high:1[#8411]
.address 0x407F3B
0003cfbb: ZF := 0 = #8411
.address 0x407F40
0003cfc2: RCX := 0x80
.address 0x407F45
0003cfcb: when ZF goto %0002fd05
000447f2: goto %0003cfd1

.address 0x407F4B
0003cfd1: 
.address 0x407F4B
0003cfdc: #8413 := low:32[RAX] - 0xC000
.address 0x407F4B
0003cfdf: CF := low:32[RAX] < 0xC000
.address 0x407F4B
0003cfe2: OF := high:1[(low:32[RAX] ^ 0xC000) & (low:32[RAX] ^ #8413)]
.address 0x407F4B
0003cfe5: AF := 0x10 = (0x10 & (#8413 ^ low:32[RAX] ^ 0xC000))
.address 0x407F4B
0003cfe8: PF := ~low:1[let $1 = #8413 >> 4 ^ #8413 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407F4B
0003cfeb: SF := high:1[#8413]
.address 0x407F4B
0003cfee: ZF := 0 = #8413
.address 0x407F50
0003cff5: RCX := 0x90
.address 0x407F55
0003cffe: when ZF goto %0002fd05
000447f3: goto %0003d004

.address 0x407F5B
0003d004: 
.address 0x407F5B
0003d00f: #8415 := low:32[RAX] - 0x6000
.address 0x407F5B
0003d012: CF := low:32[RAX] < 0x6000
.address 0x407F5B
0003d015: OF := high:1[(low:32[RAX] ^ 0x6000) & (low:32[RAX] ^ #8415)]
.address 0x407F5B
0003d018: AF := 0x10 = (0x10 & (#8415 ^ low:32[RAX] ^ 0x6000))
.address 0x407F5B
0003d01b: PF := ~low:1[let $1 = #8415 >> 4 ^ #8415 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407F5B
0003d01e: SF := high:1[#8415]
.address 0x407F5B
0003d021: ZF := 0 = #8415
.address 0x407F60
0003d028: RCX := 0xA0
.address 0x407F65
0003d031: when ZF goto %0002fd05
000447f4: goto %0003d037

.address 0x407F6B
0003d037: 
.address 0x407F6B
0003d042: #8417 := low:32[RAX] - 0x2000
.address 0x407F6B
0003d045: CF := low:32[RAX] < 0x2000
.address 0x407F6B
0003d048: OF := high:1[(low:32[RAX] ^ 0x2000) & (low:32[RAX] ^ #8417)]
.address 0x407F6B
0003d04b: AF := 0x10 = (0x10 & (#8417 ^ low:32[RAX] ^ 0x2000))
.address 0x407F6B
0003d04e: PF := ~low:1[let $1 = #8417 >> 4 ^ #8417 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407F6B
0003d051: SF := high:1[#8417]
.address 0x407F6B
0003d054: ZF := 0 = #8417
.address 0x407F70
0003d05b: RCX := 0xD0
.address 0x407F75
0003d062: RBX := 0xB0
.address 0x407F7A
0003d069: RCX := if ZF then RBX else RCX
.address 0x407F7E
0003d070: goto %0002fd05

.address 0x407DCF
0003001c: 
.address 0x407DCF
0003002c: RCX := pad:64[mem[R14 + 0xA8, el]:u32]
.address 0x407DD6
00030033: RAX := 0x416AA0
.address 0x407DDD
0003003a: RAX := pad:64[mem[RAX + (RCX << 2), el]:u32]
.address 0x407DE0
00030047: #6663 := low:32[RAX] - 7
.address 0x407DE0
0003004a: CF := low:32[RAX] < 7
.address 0x407DE0
0003004d: OF := high:1[(low:32[RAX] ^ 7) & (low:32[RAX] ^ #6663)]
.address 0x407DE0
00030050: AF := 0x10 = (0x10 & (#6663 ^ low:32[RAX] ^ 7))
.address 0x407DE0
00030053: PF := ~low:1[let $1 = #6663 >> 4 ^ #6663 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407DE0
00030056: SF := high:1[#6663]
.address 0x407DE0
00030059: ZF := 0 = #6663
.address 0x407DE3
00030060: RCX := extract:63:8[RCX].pad:8[ZF]
.address 0x407DE6
0003006d: #6665 := low:32[RAX] - 5
.address 0x407DE6
00030070: CF := low:32[RAX] < 5
.address 0x407DE6
00030073: OF := high:1[(low:32[RAX] ^ 5) & (low:32[RAX] ^ #6665)]
.address 0x407DE6
00030076: AF := 0x10 = (0x10 & (#6665 ^ low:32[RAX] ^ 5))
.address 0x407DE6
00030079: PF := ~low:1[let $1 = #6665 >> 4 ^ #6665 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407DE6
0003007c: SF := high:1[#6665]
.address 0x407DE6
0003007f: ZF := 0 = #6665
.address 0x407DE9
00030088: when ZF goto %0002fca1
000447f5: goto %0003008e

.address 0x407FA0
0002fca1: 
.address 0x407FA0
0002fcb1: RDI := RBP
.address 0x407FA3
0002fcba: RSP := RSP - 8
.address 0x407FA3
0002fcbd: mem := mem with [RSP, el]:u64 <- 0x407FA8
.address 0x407FA3
0002fcc0: call @sub_403950 with return %0002fcc2

.address 0x407FA8
0002fcc2: 
.address 0x407FA8
0002fcc7: RBX := mem[0x621308, el]:u64
.address 0x407FAF
0002fcce: RCX := RAX
.address 0x407FB2
0002fcdb: #6633 := RBX
.address 0x407FB2
0002fcde: OF := 0
.address 0x407FB2
0002fce1: CF := 0
.address 0x407FB2
0002fce4: AF := unknown[bits]:u1
.address 0x407FB2
0002fce7: PF := ~low:1[let $1 = #6633 >> 4 ^ #6633 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407FB2
0002fcea: SF := high:1[#6633]
.address 0x407FB2
0002fced: ZF := 0 = #6633
.address 0x407FB5
0002fcf7: when ZF goto %0002fcf1
000447f6: goto %0003caf1

.address 0x407FB7
0003caf1: 
000447f7: goto %0003caf4

.address 0x407FC0
0003caf4: 
.address 0x407FC0
0003caf9: RDX := mem[RBX, el]:u64
.address 0x407FC3
0003cb06: #8368 := RCX - RDX
.address 0x407FC3
0003cb09: CF := RCX < RDX
.address 0x407FC3
0003cb0c: OF := high:1[(RCX ^ RDX) & (RCX ^ #8368)]
.address 0x407FC3
0003cb0f: AF := 0x10 = (0x10 & (#8368 ^ RCX ^ RDX))
.address 0x407FC3
0003cb12: PF := ~low:1[let $1 = #8368 >> 4 ^ #8368 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407FC3
0003cb15: SF := high:1[#8368]
.address 0x407FC3
0003cb18: ZF := 0 = #8368
.address 0x407FC6
0003cb22: when CF goto %0003cb1c
000447f8: goto %0003cb5a

.address 0x407FC8
0003cb5a: 
.address 0x407FC8
0003cb5f: RDI := RCX
.address 0x407FCB
0003cb66: RSI := mem[RBX + 8, el]:u64
.address 0x407FCF
0003cb6d: mem := mem with [RSP + 8, el]:u64 <- RCX
.address 0x407FD4
0003cb7c: #8372 := RDI
.address 0x407FD4
0003cb7f: #8373 := RDX
.address 0x407FD4
0003cb82: RDI := RDI - RDX
.address 0x407FD4
0003cb85: CF := #8372 < #8373
.address 0x407FD4
0003cb88: OF := high:1[(#8372 ^ #8373) & (#8372 ^ RDI)]
.address 0x407FD4
0003cb8b: AF := 0x10 = (0x10 & (RDI ^ #8372 ^ #8373))
.address 0x407FD4
0003cb8e: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407FD4
0003cb91: SF := high:1[RDI]
.address 0x407FD4
0003cb94: ZF := 0 = RDI
.address 0x407FD7
0003cba3: #8375 := RDI
.address 0x407FD7
0003cba6: #8376 := RBP
.address 0x407FD7
0003cba9: RDI := RDI + #8376
.address 0x407FD7
0003cbac: CF := RDI < #8375
.address 0x407FD7
0003cbaf: OF := high:1[#8375] = high:1[#8376] & (high:1[#8375] | high:1[RDI]) & ~(
high:1[#8375] & high:1[RDI])
.address 0x407FD7
0003cbb2: AF := 0x10 = (0x10 & (RDI ^ #8375 ^ #8376))
.address 0x407FD7
0003cbb5: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407FD7
0003cbb8: SF := high:1[RDI]
.address 0x407FD7
0003cbbb: ZF := 0 = RDI
.address 0x407FDA
0003cbc4: RSP := RSP - 8
.address 0x407FDA
0003cbc7: mem := mem with [RSP, el]:u64 <- 0x407FDF
.address 0x407FDA
0003cbca: call @sub_403800 with return %0003cbcc

.address 0x407FDF
0003cbcc: 
.address 0x407FDF
0003cbd7: #8378 := low:32[RAX]
.address 0x407FDF
0003cbda: OF := 0
.address 0x407FDF
0003cbdd: CF := 0
.address 0x407FDF
0003cbe0: AF := unknown[bits]:u1
.address 0x407FDF
0003cbe3: PF := ~low:1[let $1 = #8378 >> 4 ^ #8378 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407FDF
0003cbe6: SF := high:1[#8378]
.address 0x407FDF
0003cbe9: ZF := 0 = #8378
.address 0x407FE1
0003cbf0: RCX := mem[RSP + 8, el]:u64
.address 0x407FE6
0003cbf9: when ZF goto %0003cae0
000447f9: goto %0003cb1c

.address 0x408000
0003cae0: 
.address 0x408000
0003cae5: RCX := low:64[RBX + 0x10]
.address 0x408004
0003caec: goto %0002fd38

.address 0x407FE8
0003cb1c: 
.address 0x407FE8
0003cb2c: RBX := mem[RBX + 0x20, el]:u64
.address 0x407FEC
0003cb39: #8370 := RBX
.address 0x407FEC
0003cb3c: OF := 0
.address 0x407FEC
0003cb3f: CF := 0
.address 0x407FEC
0003cb42: AF := unknown[bits]:u1
.address 0x407FEC
0003cb45: PF := ~low:1[let $1 = #8370 >> 4 ^ #8370 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407FEC
0003cb48: SF := high:1[#8370]
.address 0x407FEC
0003cb4b: ZF := 0 = #8370
.address 0x407FEF
0003cb54: when ~ZF goto %0003caf4
000447fa: goto %0002fcf1

.address 0x407FF1
0002fcf1: 
.address 0x407FF1
0002fd01: RCX := 0x50
.address 0x407FF6
0002fd09: goto %0002fd05

.address 0x407DEF
0003008e: 
.address 0x407DEF
00030099: #6667 := low:32[RDX]
.address 0x407DEF
0003009c: OF := 0
.address 0x407DEF
0003009f: CF := 0
.address 0x407DEF
000300a2: AF := unknown[bits]:u1
.address 0x407DEF
000300a5: PF := ~low:1[let $1 = #6667 >> 4 ^ #6667 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407DEF
000300a8: SF := high:1[#6667]
.address 0x407DEF
000300ab: ZF := 0 = #6667
.address 0x407DF1
000300b5: when ~ZF goto %000300af
000447fb: goto %0003c925

.address 0x407DF7
0003c925: 
.address 0x407DF7
0003c930: #8351 := low:8[RCX]
.address 0x407DF7
0003c933: OF := 0
.address 0x407DF7
0003c936: CF := 0
.address 0x407DF7
0003c939: AF := unknown[bits]:u1
.address 0x407DF7
0003c93c: PF := ~low:1[let $1 = #8351 >> 4 ^ #8351 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407DF7
0003c93f: SF := high:1[#8351]
.address 0x407DF7
0003c942: ZF := 0 = #8351
.address 0x407DF9
0003c94b: when ZF goto %000300af
000447fc: goto %0003c951

.address 0x40816C
000300af: 
.address 0x40816C
000300c6: #6669 := RAX
.address 0x40816C
000300c9: RAX := RAX << 4
.address 0x40816C
000300cc: CF := low:1[#6669 >> 0x3C]
.address 0x40816C
000300cf: SF := high:1[RAX]
.address 0x40816C
000300d2: ZF := 0 = RAX
.address 0x40816C
000300d5: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40816C
000300d8: AF := unknown[bits]:u1
.address 0x40816C
000300db: OF := unknown[bits]:u1
.address 0x408170
000300e2: RCX := RAX
.address 0x408173
000300e9: goto %0002fd05

.address 0x407DFF
0003c951: 
.address 0x407DFF
0003c95c: #8353 := mem[0x621390]
.address 0x407DFF
0003c95f: CF := mem[0x621390] < 0
.address 0x407DFF
0003c962: OF := high:1[mem[0x621390] & (mem[0x621390] ^ #8353)]
.address 0x407DFF
0003c965: AF := 0x10 = (0x10 & (#8353 ^ mem[0x621390]))
.address 0x407DFF
0003c968: PF := ~low:1[let $1 = #8353 >> 4 ^ #8353 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407DFF
0003c96b: SF := high:1[#8353]
.address 0x407DFF
0003c96e: ZF := 0 = #8353
.address 0x407E06
0003c975: RCX := 0xD0
.address 0x407E0B
0003c97e: when ~ZF goto %0002fd05
000447fd: goto %0003c984

.address 0x407E0D
0003c984: 
.address 0x407E0D
0003c989: RDI := 0xD
.address 0x407E12
0003c992: RSP := RSP - 8
.address 0x407E12
0003c995: mem := mem with [RSP, el]:u64 <- 0x407E17
.address 0x407E12
0003c998: call @sub_405c50 with return %0003c99a

.address 0x407E17
0003c99a: 
.address 0x407E17
0003c9a5: #8355 := low:8[RAX] - 1
.address 0x407E17
0003c9a8: CF := low:8[RAX] < 1
.address 0x407E17
0003c9ab: OF := high:1[(low:8[RAX] ^ 1) & (low:8[RAX] ^ #8355)]
.address 0x407E17
0003c9ae: AF := 0x10 = (0x10 & (#8355 ^ low:8[RAX] ^ 1))
.address 0x407E17
0003c9b1: PF := ~low:1[let $1 = #8355 >> 4 ^ #8355 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407E17
0003c9b4: SF := high:1[#8355]
.address 0x407E17
0003c9b7: ZF := 0 = #8355
.address 0x407E19
0003c9c6: #8357 := RCX
.address 0x407E19
0003c9c9: #8358 := RCX
.address 0x407E19
0003c9cc: RCX := #8358 - #8357 + pad:64[CF]
.address 0x407E19
0003c9cf: OF := high:1[(#8357 ^ #8358) & (#8358 ^ RCX)]
.address 0x407E19
0003c9d2: CF := #8358 < #8357 + pad:64[CF] | #8357 + pad:64[CF] < #8357
.address 0x407E19
0003c9d5: AF := 0x10 = (0x10 & (RCX ^ #8357 ^ #8358))
.address 0x407E19
0003c9d8: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407E19
0003c9db: SF := high:1[RCX]
.address 0x407E19
0003c9de: ZF := 0 = RCX
.address 0x407E1C
0003c9eb: RCX := RCX & 0xFFFFFFFFFFFFFFA0
.address 0x407E1C
0003c9ee: OF := 0
.address 0x407E1C
0003c9f1: CF := 0
.address 0x407E1C
0003c9f4: AF := unknown[bits]:u1
.address 0x407E1C
0003c9f7: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407E1C
0003c9fa: SF := high:1[RCX]
.address 0x407E1C
0003c9fd: ZF := 0 = RCX
.address 0x407E20
0003ca0b: #8361 := RCX
.address 0x407E20
0003ca0e: RCX := RCX + 0xD0
.address 0x407E20
0003ca11: CF := RCX < #8361
.address 0x407E20
0003ca14: OF := ~high:1[#8361] & (high:1[#8361] | high:1[RCX]) & ~(high:1[#8361] & high:1[RCX])
.address 0x407E20
0003ca17: AF := 0x10 = (0x10 & (RCX ^ #8361 ^ 0xD0))
.address 0x407E20
0003ca1a: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407E20
0003ca1d: SF := high:1[RCX]
.address 0x407E20
0003ca20: ZF := 0 = RCX
000447fe: goto %0002fd05

.address 0x407E27
0002fd05: 
.address 0x407E27
0002fd0f: RBX := 0x620060
.address 0x407E2E
0002fd1e: #6635 := RCX
.address 0x407E2E
0002fd21: #6636 := RBX
.address 0x407E2E
0002fd24: RCX := RCX + #6636
.address 0x407E2E
0002fd27: CF := RCX < #6635
.address 0x407E2E
0002fd2a: OF := high:1[#6635] = high:1[#6636] & (high:1[#6635] | high:1[RCX]) & ~(
high:1[#6635] & high:1[RCX])
.address 0x407E2E
0002fd2d: AF := 0x10 = (0x10 & (RCX ^ #6635 ^ #6636))
.address 0x407E2E
0002fd30: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407E2E
0002fd33: SF := high:1[RCX]
.address 0x407E2E
0002fd36: ZF := 0 = RCX
000447ff: goto %0002fd38

.address 0x407E31
0002fd38: 
.address 0x407E31
0002fd43: #6638 := mem[RCX + 8, el]:u64
.address 0x407E31
0002fd46: CF := mem[RCX + 8, el]:u64 < 0
.address 0x407E31
0002fd49: OF := high:1[mem[RCX + 8, el]:u64 & (mem[RCX + 8, el]:u64 ^ #6638)]
.address 0x407E31
0002fd4c: AF := 0x10 = (0x10 & (#6638 ^ mem[RCX + 8, el]:u64))
.address 0x407E31
0002fd4f: PF := ~low:1[let $1 = #6638 >> 4 ^ #6638 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407E31
0002fd52: SF := high:1[#6638]
.address 0x407E31
0002fd55: ZF := 0 = #6638
.address 0x407E36
0002fd5f: when ~ZF goto %0002fd59
00044800: goto %0003ca7c

.address 0x407E38
0003ca7c: 
.address 0x407E38
0003ca81: RDI := 4
.address 0x407E3D
0003ca8a: RSP := RSP - 8
.address 0x407E3D
0003ca8d: mem := mem with [RSP, el]:u64 <- 0x407E42
.address 0x407E3D
0003ca90: call @sub_405c50 with return %0003ca92

.address 0x407E42
0003ca92: 
.address 0x407E42
0003ca9d: #8366 := low:8[RAX]
.address 0x407E42
0003caa0: OF := 0
.address 0x407E42
0003caa3: CF := 0
.address 0x407E42
0003caa6: AF := unknown[bits]:u1
.address 0x407E42
0003caa9: PF := ~low:1[let $1 = #8366 >> 4 ^ #8366 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407E42
0003caac: SF := high:1[#8366]
.address 0x407E42
0003caaf: ZF := 0 = #8366
.address 0x407E44
0003cab8: when ZF goto %0002ec8a
00044801: goto %0003cabe

.address 0x407E4A
0003cabe: 
.address 0x407E4A
0003cac9: RCX := 0
.address 0x407E4A
0003cacc: AF := unknown[bits]:u1
.address 0x407E4A
0003cacf: ZF := 1
.address 0x407E4A
0003cad2: PF := 1
.address 0x407E4A
0003cad5: OF := 0
.address 0x407E4A
0003cad8: CF := 0
.address 0x407E4A
0003cadb: SF := 0
00044802: goto %0002fd59

.address 0x407E4C
0002fd59: 
.address 0x407E4C
0002fd69: RSI := mem[0x6212D0, el]:u64
.address 0x407E53
0002fd70: RDX := pad:64[mem[R14 + 0xC4, el]:u32]
.address 0x407E5A
0002fd7e: #6640 := RSP
.address 0x407E5A
0002fd81: RSP := RSP - 8
.address 0x407E5A
0002fd84: CF := #6640 < 8
.address 0x407E5A
0002fd87: OF := high:1[(#6640 ^ 8) & (#6640 ^ RSP)]
.address 0x407E5A
0002fd8a: AF := 0x10 = (0x10 & (RSP ^ #6640 ^ 8))
.address 0x407E5A
0002fd8d: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407E5A
0002fd90: SF := high:1[RSP]
.address 0x407E5A
0002fd93: ZF := 0 = RSP
.address 0x407E5E
0002fda0: R15 := pad:64[low:32[R15] ^ 1]
.address 0x407E5E
0002fda3: OF := 0
.address 0x407E5E
0002fda6: CF := 0
.address 0x407E5E
0002fda9: AF := unknown[bits]:u1
.address 0x407E5E
0002fdac: PF := ~low:1[let $1 = low:32[R15] >> 4 ^ low:32[R15] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407E5E
0002fdaf: SF := high:1[low:32[R15]]
.address 0x407E5E
0002fdb2: ZF := 0 = low:32[R15]
.address 0x407E62
0002fdbb: #6644 := mem[R14 + 0x10, el]:u64
.address 0x407E62
0002fdbe: RSP := RSP - 8
.address 0x407E62
0002fdc1: mem := mem with [RSP, el]:u64 <- #6644
.address 0x407E66
0002fdc8: RDI := RBP
.address 0x407E69
0002fdcf: R9 := R13
.address 0x407E6C
0002fdd6: R8 := pad:64[pad:32[low:8[R15]]]
.address 0x407E70
0002fddf: RSP := RSP - 8
.address 0x407E70
0002fde2: mem := mem with [RSP, el]:u64 <- 0x407E75
.address 0x407E70
0002fde5: call @sub_407910 with return %0002fde7

.address 0x407E75
0002fde7: 
.address 0x407E75
0002fdec: RBX := RAX
.address 0x407E78
0002fdf5: RSP := RSP - 8
.address 0x407E78
0002fdf8: mem := mem with [RSP, el]:u64 <- 0x407E7D
.address 0x407E78
0002fdfb: call @sub_407360 with return %0002fdfd

.address 0x407E7D
0002fdfd: 
.address 0x407E7D
0002fe04: RSP := RSP - 8
.address 0x407E7D
0002fe07: mem := mem with [RSP, el]:u64 <- 0x407E82
.address 0x407E7D
0002fe0a: call @sub_4072a0 with return %0002fe0c

.address 0x407E82
0002fe0c: 
.address 0x407E82
0002fe11: RCX := mem[0x6212B0, el]:u64
.address 0x407E89
0002fe19: RSI := mem[RSP, el]:u64
.address 0x407E89
0002fe1c: RSP := RSP + 8
.address 0x407E8A
0002fe24: RDI := mem[RSP, el]:u64
.address 0x407E8A
0002fe27: RSP := RSP + 8
.address 0x407E8B
0002fe34: #6645 := RCX
.address 0x407E8B
0002fe37: OF := 0
.address 0x407E8B
0002fe3a: CF := 0
.address 0x407E8B
0002fe3d: AF := unknown[bits]:u1
.address 0x407E8B
0002fe40: PF := ~low:1[let $1 = #6645 >> 4 ^ #6645 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407E8B
0002fe43: SF := high:1[#6645]
.address 0x407E8B
0002fe46: ZF := 0 = #6645
.address 0x407E8E
0002fe4f: when ZF goto %0002ed63
00044803: goto %0002fe55

.address 0x407E94
0002fe55: 
.address 0x407E94
0002fe60: RDX := 0
.address 0x407E94
0002fe63: AF := unknown[bits]:u1
.address 0x407E94
0002fe66: ZF := 1
.address 0x407E94
0002fe69: PF := 1
.address 0x407E94
0002fe6c: OF := 0
.address 0x407E94
0002fe6f: CF := 0
.address 0x407E94
0002fe72: SF := 0
.address 0x407E96
0002fe79: RAX := R12
.address 0x407E99
0002fe92: #6648 := pad:128[RCX]
.address 0x407E99
0002fed1: goto %0002fe94

0002feab: 
.address 0x407E99
0002feac: call %0000737f with noreturn

0002fea1: 
.address 0x407E99
0002fea2: #6651 := low:64[#6650].low:64[#6649]
.address 0x407E99
0002fea5: RAX := extract:63:0[#6651]
.address 0x407E99
0002fea8: RDX := extract:127:64[#6651]
.address 0x407E99
0002feb2: goto %0002feaf

0002feae: 
.address 0x407E99
0002feb0: when high:64[#6649] = 0 goto %0002fea1
.address 0x407E99
0002feb1: goto %0002feab

0002fe9e: 
.address 0x407E99
0002fe9f: #6650 := #6647 % #6648
.address 0x407E99
0002feb5: goto %0002feae

0002fe9b: 
.address 0x407E99
0002fe9c: #6649 := #6647 / #6648
.address 0x407E99
0002feb6: goto %0002fe9e

0002feaf: 
.address 0x407E99
0002febc: goto %0002feb8

0002fe97: 
.address 0x407E99
0002fe98: call %0000737f with noreturn

0002feb7: 
.address 0x407E99
0002feb9: when #6648 = 0 goto %0002fe97
.address 0x407E99
0002feba: goto %0002fe9b

0002fe94: 
.address 0x407E99
0002fe95: #6647 := RDX.RAX
.address 0x407E99
0002fed0: goto %0002feb7

0002feb8: 
.address 0x407E99
0002febf: CF := unknown[bits]:u1
.address 0x407E99
0002fec2: OF := unknown[bits]:u1
.address 0x407E99
0002fec5: SF := unknown[bits]:u1
.address 0x407E99
0002fec8: ZF := unknown[bits]:u1
.address 0x407E99
0002fecb: AF := unknown[bits]:u1
.address 0x407E99
0002fece: PF := unknown[bits]:u1
00044804: goto %0002fed2

.address 0x407E9C
0002fed2: 
.address 0x407E9C
0002fedd: RDX := 0
.address 0x407E9C
0002fee0: AF := unknown[bits]:u1
.address 0x407E9C
0002fee3: ZF := 1
.address 0x407E9C
0002fee6: PF := 1
.address 0x407E9C
0002fee9: OF := 0
.address 0x407E9C
0002feec: CF := 0
.address 0x407E9C
0002feef: SF := 0
.address 0x407E9E
0002fef6: RSI := RAX
.address 0x407EA1
0002fefd: RAX := low:64[RBX + R12 - 1]
.address 0x407EA6
0002ff16: #6653 := pad:128[RCX]
.address 0x407EA6
0002ff55: goto %0002ff18

0002ff2f: 
.address 0x407EA6
0002ff30: call %0000737f with noreturn

0002ff25: 
.address 0x407EA6
0002ff26: #6656 := low:64[#6655].low:64[#6654]
.address 0x407EA6
0002ff29: RAX := extract:63:0[#6656]
.address 0x407EA6
0002ff2c: RDX := extract:127:64[#6656]
.address 0x407EA6
0002ff36: goto %0002ff33

0002ff32: 
.address 0x407EA6
0002ff34: when high:64[#6654] = 0 goto %0002ff25
.address 0x407EA6
0002ff35: goto %0002ff2f

0002ff22: 
.address 0x407EA6
0002ff23: #6655 := #6652 % #6653
.address 0x407EA6
0002ff39: goto %0002ff32

0002ff1f: 
.address 0x407EA6
0002ff20: #6654 := #6652 / #6653
.address 0x407EA6
0002ff3a: goto %0002ff22

0002ff33: 
.address 0x407EA6
0002ff40: goto %0002ff3c

0002ff1b: 
.address 0x407EA6
0002ff1c: call %0000737f with noreturn

0002ff3b: 
.address 0x407EA6
0002ff3d: when #6653 = 0 goto %0002ff1b
.address 0x407EA6
0002ff3e: goto %0002ff1f

0002ff18: 
.address 0x407EA6
0002ff19: #6652 := RDX.RAX
.address 0x407EA6
0002ff54: goto %0002ff3b

0002ff3c: 
.address 0x407EA6
0002ff43: CF := unknown[bits]:u1
.address 0x407EA6
0002ff46: OF := unknown[bits]:u1
.address 0x407EA6
0002ff49: SF := unknown[bits]:u1
.address 0x407EA6
0002ff4c: ZF := unknown[bits]:u1
.address 0x407EA6
0002ff4f: AF := unknown[bits]:u1
.address 0x407EA6
0002ff52: PF := unknown[bits]:u1
00044805: goto %0002ff56

.address 0x407EA9
0002ff56: 
.address 0x407EA9
0002ff61: #6657 := RSI - RAX
.address 0x407EA9
0002ff64: CF := RSI < RAX
.address 0x407EA9
0002ff67: OF := high:1[(RSI ^ RAX) & (RSI ^ #6657)]
.address 0x407EA9
0002ff6a: AF := 0x10 = (0x10 & (#6657 ^ RSI ^ RAX))
.address 0x407EA9
0002ff6d: PF := ~low:1[let $1 = #6657 >> 4 ^ #6657 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407EA9
0002ff70: SF := high:1[#6657]
.address 0x407EA9
0002ff73: ZF := 0 = #6657
.address 0x407EAC
0002ff7c: when ZF goto %0002ed63
00044806: goto %0002ff82

.address 0x407EB2
0002ff82: 
.address 0x407EB2
0002ff87: RDI := 0x6201D0
.address 0x407EB9
0002ff90: RSP := RSP - 8
.address 0x407EB9
0002ff93: mem := mem with [RSP, el]:u64 <- 0x407EBE
.address 0x407EB9
0002ff96: call @sub_4072f0 with return %0002ff98

.address 0x407EBE
0002ff98: 
.address 0x407EBE
0002ff9d: goto %0002ed63

.address 0x407D52
0002ec8a: 
.address 0x407D52
0002ec9a: RDX := pad:64[mem[R14 + 0xC4, el]:u32]
.address 0x407D59
0002eca1: RSI := mem[0x6212D0, el]:u64
.address 0x407D60
0002ecaf: #6485 := RSP
.address 0x407D60
0002ecb2: RSP := RSP - 8
.address 0x407D60
0002ecb5: CF := #6485 < 8
.address 0x407D60
0002ecb8: OF := high:1[(#6485 ^ 8) & (#6485 ^ RSP)]
.address 0x407D60
0002ecbb: AF := 0x10 = (0x10 & (RSP ^ #6485 ^ 8))
.address 0x407D60
0002ecbe: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407D60
0002ecc1: SF := high:1[RSP]
.address 0x407D60
0002ecc4: ZF := 0 = RSP
.address 0x407D64
0002ecd1: R15 := pad:64[low:32[R15] ^ 1]
.address 0x407D64
0002ecd4: OF := 0
.address 0x407D64
0002ecd7: CF := 0
.address 0x407D64
0002ecda: AF := unknown[bits]:u1
.address 0x407D64
0002ecdd: PF := ~low:1[let $1 = low:32[R15] >> 4 ^ low:32[R15] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x407D64
0002ece0: SF := high:1[low:32[R15]]
.address 0x407D64
0002ece3: ZF := 0 = low:32[R15]
.address 0x407D68
0002ecec: #6489 := mem[R14 + 0x10, el]:u64
.address 0x407D68
0002ecef: RSP := RSP - 8
.address 0x407D68
0002ecf2: mem := mem with [RSP, el]:u64 <- #6489
.address 0x407D6C
0002ecf9: R9 := R13
.address 0x407D6F
0002ed00: R8 := pad:64[pad:32[low:8[R15]]]
.address 0x407D73
0002ed0d: RCX := 0
.address 0x407D73
0002ed10: AF := unknown[bits]:u1
.address 0x407D73
0002ed13: ZF := 1
.address 0x407D73
0002ed16: PF := 1
.address 0x407D73
0002ed19: OF := 0
.address 0x407D73
0002ed1c: CF := 0
.address 0x407D73
0002ed1f: SF := 0
.address 0x407D75
0002ed26: RDI := RBP
.address 0x407D78
0002ed2f: RSP := RSP - 8
.address 0x407D78
0002ed32: mem := mem with [RSP, el]:u64 <- 0x407D7D
.address 0x407D78
0002ed35: call @sub_407910 with return %0002ed37

.address 0x407D7D
0002ed37: 
.address 0x407D7D
0002ed3c: RBX := RAX
.address 0x407D80
0002ed45: RSP := RSP - 8
.address 0x407D80
0002ed48: mem := mem with [RSP, el]:u64 <- 0x407D85
.address 0x407D80
0002ed4b: call @sub_407360 with return %0002ed4d

.address 0x407D85
0002ed4d: 
.address 0x407D85
0002ed53: RAX := mem[RSP, el]:u64
.address 0x407D85
0002ed56: RSP := RSP + 8
.address 0x407D86
0002ed5e: RDX := mem[RSP, el]:u64
.address 0x407D86
0002ed61: RSP := RSP + 8
00044807: goto %0002ed63

.address 0x407D87
0002ed63: 
.address 0x407D87
0002ed6f: #6490 := RSP
.address 0x407D87
0002ed72: RSP := RSP + 0x18
.address 0x407D87
0002ed75: CF := RSP < #6490
.address 0x407D87
0002ed78: OF := ~high:1[#6490] & (high:1[#6490] | high:1[RSP]) & ~(high:1[#6490] & high:1[RSP])
.address 0x407D87
0002ed7b: AF := 0x10 = (0x10 & (RSP ^ #6490 ^ 0x18))
.address 0x407D87
0002ed7e: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x407D87
0002ed81: SF := high:1[RSP]
.address 0x407D87
0002ed84: ZF := 0 = RSP
.address 0x407D8B
0002ed8b: RAX := RBX
.address 0x407D8E
0002ed93: RBX := mem[RSP, el]:u64
.address 0x407D8E
0002ed96: RSP := RSP + 8
.address 0x407D8F
0002ed9e: RBP := mem[RSP, el]:u64
.address 0x407D8F
0002eda1: RSP := RSP + 8
.address 0x407D90
0002eda9: R12 := mem[RSP, el]:u64
.address 0x407D90
0002edac: RSP := RSP + 8
.address 0x407D92
0002edb4: R13 := mem[RSP, el]:u64
.address 0x407D92
0002edb7: RSP := RSP + 8
.address 0x407D94
0002edbf: R14 := mem[RSP, el]:u64
.address 0x407D94
0002edc2: RSP := RSP + 8
.address 0x407D96
0002edca: R15 := mem[RSP, el]:u64
.address 0x407D96
0002edcd: RSP := RSP + 8
.address 0x407D98
0002edd6: #6493 := mem[RSP, el]:u64
.address 0x407D98
0002edd9: RSP := RSP + 8
.address 0x407D98
0002eddd: call #6493 with noreturn


.address 0x408180
00043f70: sub sub_408180()
.address 0x408180
000300ee: 
.address 0x408180
000300f5: #6671 := RBP
.address 0x408180
000300f8: RSP := RSP - 8
.address 0x408180
000300fb: mem := mem with [RSP, el]:u64 <- #6671
.address 0x408181
00030104: #6672 := RBX
.address 0x408181
00030107: RSP := RSP - 8
.address 0x408181
0003010a: mem := mem with [RSP, el]:u64 <- #6672
.address 0x408182
00030111: RBP := RSI
.address 0x408185
00030118: RBX := RDI
.address 0x408188
00030126: #6673 := RSP
.address 0x408188
00030129: RSP := RSP - 0x2A8
.address 0x408188
0003012c: CF := #6673 < 0x2A8
.address 0x408188
0003012f: OF := high:1[(#6673 ^ 0x2A8) & (#6673 ^ RSP)]
.address 0x408188
00030132: AF := 0x10 = (0x10 & (RSP ^ #6673 ^ 0x2A8))
.address 0x408188
00030135: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408188
00030138: SF := high:1[RSP]
.address 0x408188
0003013b: ZF := 0 = RSP
.address 0x40818F
00030142: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x408198
00030149: mem := mem with [RSP + 0x298, el]:u64 <- RAX
.address 0x4081A0
00030156: RAX := 0
.address 0x4081A0
00030159: AF := unknown[bits]:u1
.address 0x4081A0
0003015c: ZF := 1
.address 0x4081A0
0003015f: PF := 1
.address 0x4081A0
00030162: OF := 0
.address 0x4081A0
00030165: CF := 0
.address 0x4081A0
00030168: SF := 0
.address 0x4081A2
00030171: RSP := RSP - 8
.address 0x4081A2
00030174: mem := mem with [RSP, el]:u64 <- 0x4081A7
.address 0x4081A2
00030177: call @sub_407450 with return %00030179

.address 0x4081A7
00030179: 
.address 0x4081A7
00030184: #6676 := mem[0x6212FC]
.address 0x4081A7
00030187: CF := mem[0x6212FC] < 0
.address 0x4081A7
0003018a: OF := high:1[mem[0x6212FC] & (mem[0x6212FC] ^ #6676)]
.address 0x4081A7
0003018d: AF := 0x10 = (0x10 & (#6676 ^ mem[0x6212FC]))
.address 0x4081A7
00030190: PF := ~low:1[let $1 = #6676 >> 4 ^ #6676 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4081A7
00030193: SF := high:1[#6676]
.address 0x4081A7
00030196: ZF := 0 = #6676
.address 0x4081AE
000301a0: when ZF goto %0003019a
00044808: goto %0003c8bf

.address 0x4081B0
0003c8bf: 
.address 0x4081B0
0003c8ca: #8347 := mem[RBX + 0xB8]
.address 0x4081B0
0003c8cd: CF := mem[RBX + 0xB8] < 0
.address 0x4081B0
0003c8d0: OF := high:1[mem[RBX + 0xB8] & (mem[RBX + 0xB8] ^ #8347)]
.address 0x4081B0
0003c8d3: AF := 0x10 = (0x10 & (#8347 ^ mem[RBX + 0xB8]))
.address 0x4081B0
0003c8d6: PF := ~low:1[let $1 = #8347 >> 4 ^ #8347 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4081B0
0003c8d9: SF := high:1[#8347]
.address 0x4081B0
0003c8dc: ZF := 0 = #8347
.address 0x4081B7
0003c8e3: RCX := 0x417C2E
.address 0x4081BE
0003c8ec: when ZF goto %0003c6c7
00044809: goto %0003c8f2

.address 0x4081C0
0003c8f2: 
.address 0x4081C0
0003c8f7: RDI := mem[RBX + 0x20, el]:u64
.address 0x4081C4
0003c904: #8349 := RDI
.address 0x4081C4
0003c907: OF := 0
.address 0x4081C4
0003c90a: CF := 0
.address 0x4081C4
0003c90d: AF := unknown[bits]:u1
.address 0x4081C4
0003c910: PF := ~low:1[let $1 = #8349 >> 4 ^ #8349 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4081C4
0003c913: SF := high:1[#8349]
.address 0x4081C4
0003c916: ZF := 0 = #8349
.address 0x4081C7
0003c91f: when ~ZF goto %0003c6a8
0004480a: goto %0003c6c7

.address 0x4082F8
0003c6a8: 
.address 0x4082F8
0003c6ad: RSI := RSP
.address 0x4082FB
0003c6b6: RSP := RSP - 8
.address 0x4082FB
0003c6b9: mem := mem with [RSP, el]:u64 <- 0x408300
.address 0x4082FB
0003c6bc: call @sub_40fcf0 with return %0003c6be

.address 0x408300
0003c6be: 
.address 0x408300
0003c6c3: RCX := RAX
.address 0x408303
0003c6cb: goto %0003c6c7

.address 0x4081CD
0003c6c7: 
.address 0x4081CD
0003c6d7: RDX := 0
.address 0x4081CD
0003c6da: AF := unknown[bits]:u1
.address 0x4081CD
0003c6dd: ZF := 1
.address 0x4081CD
0003c6e0: PF := 1
.address 0x4081CD
0003c6e3: OF := 0
.address 0x4081CD
0003c6e6: CF := 0
.address 0x4081CD
0003c6e9: SF := 0
.address 0x4081CF
0003c6f6: #8336 := mem[0x621338, el]:u32 - 4
.address 0x4081CF
0003c6f9: CF := mem[0x621338, el]:u32 < 4
.address 0x4081CF
0003c6fc: OF := high:1[(mem[0x621338, el]:u32 ^ 4) & (mem[0x621338, el]:u32 ^ #8336)]
.address 0x4081CF
0003c6ff: AF := 0x10 = (0x10 & (#8336 ^ mem[0x621338, el]:u32 ^ 4))
.address 0x4081CF
0003c702: PF := ~low:1[let $1 = #8336 >> 4 ^ #8336 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4081CF
0003c705: SF := high:1[#8336]
.address 0x4081CF
0003c708: ZF := 0 = #8336
.address 0x4081D6
0003c712: when ZF goto %0003c70c
0004480b: goto %0003c753

.address 0x4081D8
0003c753: 
.address 0x4081D8
0003c758: RDX := pad:64[mem[0x621360, el]:u32]
0004480c: goto %0003c70c

.address 0x4081DE
0003c70c: 
.address 0x4081DE
0003c71c: RSI := 0x417C5B
.address 0x4081E5
0003c723: RDI := 1
.address 0x4081EA
0003c730: RAX := 0
.address 0x4081EA
0003c733: AF := unknown[bits]:u1
.address 0x4081EA
0003c736: ZF := 1
.address 0x4081EA
0003c739: PF := 1
.address 0x4081EA
0003c73c: OF := 0
.address 0x4081EA
0003c73f: CF := 0
.address 0x4081EA
0003c742: SF := 0
.address 0x4081EC
0003c74b: RSP := RSP - 8
.address 0x4081EC
0003c74e: mem := mem with [RSP, el]:u64 <- 0x4081F1
.address 0x4081EC
0003c751: call @sub_403cd0 with return %0003019a

.address 0x4081F1
0003019a: 
.address 0x4081F1
000301b0: #6678 := mem[0x62132C]
.address 0x4081F1
000301b3: CF := mem[0x62132C] < 0
.address 0x4081F1
000301b6: OF := high:1[mem[0x62132C] & (mem[0x62132C] ^ #6678)]
.address 0x4081F1
000301b9: AF := 0x10 = (0x10 & (#6678 ^ mem[0x62132C]))
.address 0x4081F1
000301bc: PF := ~low:1[let $1 = #6678 >> 4 ^ #6678 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4081F1
000301bf: SF := high:1[#6678]
.address 0x4081F1
000301c2: ZF := 0 = #6678
.address 0x4081F8
000301cc: when ZF goto %000301c6
0004480d: goto %0003c841

.address 0x4081FA
0003c841: 
.address 0x4081FA
0003c84c: #8343 := mem[RBX + 0xB8]
.address 0x4081FA
0003c84f: CF := mem[RBX + 0xB8] < 0
.address 0x4081FA
0003c852: OF := high:1[mem[RBX + 0xB8] & (mem[RBX + 0xB8] ^ #8343)]
.address 0x4081FA
0003c855: AF := 0x10 = (0x10 & (#8343 ^ mem[RBX + 0xB8]))
.address 0x4081FA
0003c858: PF := ~low:1[let $1 = #8343 >> 4 ^ #8343 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4081FA
0003c85b: SF := high:1[#8343]
.address 0x4081FA
0003c85e: ZF := 0 = #8343
.address 0x408201
0003c865: RCX := 0x417C2E
.address 0x408208
0003c86e: when ~ZF goto %0003c5d7
0004480e: goto %0003c874

.address 0x4082C0
0003c5d7: 
.address 0x4082C0
0003c5dc: RDX := pad:64[mem[0x621328, el]:u32]
.address 0x4082C6
0003c5e3: RDI := mem[RBX + 0x58, el]:u64
.address 0x4082CA
0003c5ea: RCX := 0x200
.address 0x4082CF
0003c5f1: R8 := mem[0x621320, el]:u64
.address 0x4082D6
0003c5f8: RSI := RSP
.address 0x4082D9
0003c601: RSP := RSP - 8
.address 0x4082D9
0003c604: mem := mem with [RSP, el]:u64 <- 0x4082DE
.address 0x4082D9
0003c607: call @sub_40ed10 with return %0003c609

.address 0x4082DE
0003c609: 
.address 0x4082DE
0003c614: RDX := 0
.address 0x4082DE
0003c617: AF := unknown[bits]:u1
.address 0x4082DE
0003c61a: ZF := 1
.address 0x4082DE
0003c61d: PF := 1
.address 0x4082DE
0003c620: OF := 0
.address 0x4082DE
0003c623: CF := 0
.address 0x4082DE
0003c626: SF := 0
.address 0x4082E0
0003c633: #8334 := mem[0x621338, el]:u32 - 4
.address 0x4082E0
0003c636: CF := mem[0x621338, el]:u32 < 4
.address 0x4082E0
0003c639: OF := high:1[(mem[0x621338, el]:u32 ^ 4) & (mem[0x621338, el]:u32 ^ #8334)]
.address 0x4082E0
0003c63c: AF := 0x10 = (0x10 & (#8334 ^ mem[0x621338, el]:u32 ^ 4))
.address 0x4082E0
0003c63f: PF := ~low:1[let $1 = #8334 >> 4 ^ #8334 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4082E0
0003c642: SF := high:1[#8334]
.address 0x4082E0
0003c645: ZF := 0 = #8334
.address 0x4082E7
0003c64c: RCX := RAX
.address 0x4082EA
0003c656: when ~ZF goto %0003c650
0004480f: goto %0003c69e

.address 0x4082F0
0003c69e: 
.address 0x4082F0
0003c6a3: goto %0003c662

.address 0x40820E
0003c874: 
.address 0x40820E
0003c87f: RDX := 0
.address 0x40820E
0003c882: AF := unknown[bits]:u1
.address 0x40820E
0003c885: ZF := 1
.address 0x40820E
0003c888: PF := 1
.address 0x40820E
0003c88b: OF := 0
.address 0x40820E
0003c88e: CF := 0
.address 0x40820E
0003c891: SF := 0
.address 0x408210
0003c89e: #8345 := mem[0x621338, el]:u32 - 4
.address 0x408210
0003c8a1: CF := mem[0x621338, el]:u32 < 4
.address 0x408210
0003c8a4: OF := high:1[(mem[0x621338, el]:u32 ^ 4) & (mem[0x621338, el]:u32 ^ #8345)]
.address 0x408210
0003c8a7: AF := 0x10 = (0x10 & (#8345 ^ mem[0x621338, el]:u32 ^ 4))
.address 0x408210
0003c8aa: PF := ~low:1[let $1 = #8345 >> 4 ^ #8345 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408210
0003c8ad: SF := high:1[#8345]
.address 0x408210
0003c8b0: ZF := 0 = #8345
.address 0x408217
0003c8b9: when ZF goto %0003c662
00044810: goto %0003c650

.address 0x408219
0003c650: 
.address 0x408219
0003c660: RDX := pad:64[mem[0x62135C, el]:u32]
00044811: goto %0003c662

.address 0x40821F
0003c662: 
.address 0x40821F
0003c667: RSI := 0x417C5B
.address 0x408226
0003c66e: RDI := 1
.address 0x40822B
0003c67b: RAX := 0
.address 0x40822B
0003c67e: AF := unknown[bits]:u1
.address 0x40822B
0003c681: ZF := 1
.address 0x40822B
0003c684: PF := 1
.address 0x40822B
0003c687: OF := 0
.address 0x40822B
0003c68a: CF := 0
.address 0x40822B
0003c68d: SF := 0
.address 0x40822D
0003c696: RSP := RSP - 8
.address 0x40822D
0003c699: mem := mem with [RSP, el]:u64 <- 0x408232
.address 0x40822D
0003c69c: call @sub_403cd0 with return %000301c6

.address 0x408232
000301c6: 
.address 0x408232
000301dc: #6680 := mem[0x621365]
.address 0x408232
000301df: CF := mem[0x621365] < 0
.address 0x408232
000301e2: OF := high:1[mem[0x621365] & (mem[0x621365] ^ #6680)]
.address 0x408232
000301e5: AF := 0x10 = (0x10 & (#6680 ^ mem[0x621365]))
.address 0x408232
000301e8: PF := ~low:1[let $1 = #6680 >> 4 ^ #6680 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408232
000301eb: SF := high:1[#6680]
.address 0x408232
000301ee: ZF := 0 = #6680
.address 0x408239
000301f8: when ZF goto %000301f2
00044812: goto %0003c7ac

.address 0x40823B
0003c7ac: 
.address 0x40823B
0003c7b7: RDX := 0
.address 0x40823B
0003c7ba: AF := unknown[bits]:u1
.address 0x40823B
0003c7bd: ZF := 1
.address 0x40823B
0003c7c0: PF := 1
.address 0x40823B
0003c7c3: OF := 0
.address 0x40823B
0003c7c6: CF := 0
.address 0x40823B
0003c7c9: SF := 0
.address 0x40823D
0003c7d6: #8341 := mem[0x621338, el]:u32 - 4
.address 0x40823D
0003c7d9: CF := mem[0x621338, el]:u32 < 4
.address 0x40823D
0003c7dc: OF := high:1[(mem[0x621338, el]:u32 ^ 4) & (mem[0x621338, el]:u32 ^ #8341)]
.address 0x40823D
0003c7df: AF := 0x10 = (0x10 & (#8341 ^ mem[0x621338, el]:u32 ^ 4))
.address 0x40823D
0003c7e2: PF := ~low:1[let $1 = #8341 >> 4 ^ #8341 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40823D
0003c7e5: SF := high:1[#8341]
.address 0x40823D
0003c7e8: ZF := 0 = #8341
.address 0x408244
0003c7ef: RCX := mem[RBX + 0xB0, el]:u64
.address 0x40824B
0003c7f9: when ZF goto %0003c7f3
00044813: goto %0003c83a

.address 0x40824D
0003c83a: 
.address 0x40824D
0003c83f: RDX := pad:64[mem[0x621354, el]:u32]
00044814: goto %0003c7f3

.address 0x408253
0003c7f3: 
.address 0x408253
0003c803: RSI := 0x417C5B
.address 0x40825A
0003c80a: RDI := 1
.address 0x40825F
0003c817: RAX := 0
.address 0x40825F
0003c81a: AF := unknown[bits]:u1
.address 0x40825F
0003c81d: ZF := 1
.address 0x40825F
0003c820: PF := 1
.address 0x40825F
0003c823: OF := 0
.address 0x40825F
0003c826: CF := 0
.address 0x40825F
0003c829: SF := 0
.address 0x408261
0003c832: RSP := RSP - 8
.address 0x408261
0003c835: mem := mem with [RSP, el]:u64 <- 0x408266
.address 0x408261
0003c838: call @sub_403cd0 with return %000301f2

.address 0x408266
000301f2: 
.address 0x408266
00030202: RCX := RBP
.address 0x408269
0003020f: RDX := 0
.address 0x408269
00030212: AF := unknown[bits]:u1
.address 0x408269
00030215: ZF := 1
.address 0x408269
00030218: PF := 1
.address 0x408269
0003021b: OF := 0
.address 0x408269
0003021e: CF := 0
.address 0x408269
00030221: SF := 0
.address 0x40826B
0003022e: RSI := 0
.address 0x40826B
00030231: AF := unknown[bits]:u1
.address 0x40826B
00030234: ZF := 1
.address 0x40826B
00030237: PF := 1
.address 0x40826B
0003023a: OF := 0
.address 0x40826B
0003023d: CF := 0
.address 0x40826B
00030240: SF := 0
.address 0x40826D
00030247: RDI := RBX
.address 0x408270
00030250: RSP := RSP - 8
.address 0x408270
00030253: mem := mem with [RSP, el]:u64 <- 0x408275
.address 0x408270
00030256: call @sub_407d20 with return %00030258

.address 0x408275
00030258: 
.address 0x408275
0003025d: RBP := RAX
.address 0x408278
00030264: RAX := pad:64[mem[0x621314, el]:u32]
.address 0x40827E
00030271: #6682 := low:32[RAX]
.address 0x40827E
00030274: OF := 0
.address 0x40827E
00030277: CF := 0
.address 0x40827E
0003027a: AF := unknown[bits]:u1
.address 0x40827E
0003027d: PF := ~low:1[let $1 = #6682 >> 4 ^ #6682 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40827E
00030280: SF := high:1[#6682]
.address 0x40827E
00030283: ZF := 0 = #6682
.address 0x408280
0003028d: when ZF goto %00030287
00044815: goto %0003c75a

.address 0x408282
0003c75a: 
.address 0x408282
0003c75f: RDI := pad:64[pad:32[mem[RBX + 0xB8]]]
.address 0x408289
0003c766: RDX := pad:64[mem[RBX + 0xA8, el]:u32]
.address 0x40828F
0003c76d: RSI := pad:64[mem[RBX + 0x30, el]:u32]
.address 0x408292
0003c776: RSP := RSP - 8
.address 0x408292
0003c779: mem := mem with [RSP, el]:u64 <- 0x408297
.address 0x408292
0003c77c: call @sub_406ef0 with return %0003c77e

.address 0x408297
0003c77e: 
.address 0x408297
0003c783: RAX := pad:64[pad:32[low:8[RAX]]]
.address 0x40829A
0003c792: #8338 := RBP
.address 0x40829A
0003c795: #8339 := RAX
.address 0x40829A
0003c798: RBP := RBP + #8339
.address 0x40829A
0003c79b: CF := RBP < #8338
.address 0x40829A
0003c79e: OF := high:1[#8338] = high:1[#8339] & (high:1[#8338] | high:1[RBP]) & ~(
high:1[#8338] & high:1[RBP])
.address 0x40829A
0003c7a1: AF := 0x10 = (0x10 & (RBP ^ #8338 ^ #8339))
.address 0x40829A
0003c7a4: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40829A
0003c7a7: SF := high:1[RBP]
.address 0x40829A
0003c7aa: ZF := 0 = RBP
00044816: goto %00030287

.address 0x40829D
00030287: 
.address 0x40829D
00030297: RBX := mem[RSP + 0x298, el]:u64
.address 0x4082A5
000302a4: RBX := RBX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x4082A5
000302a7: OF := 0
.address 0x4082A5
000302aa: CF := 0
.address 0x4082A5
000302ad: AF := unknown[bits]:u1
.address 0x4082A5
000302b0: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4082A5
000302b3: SF := high:1[RBX]
.address 0x4082A5
000302b6: ZF := 0 = RBX
.address 0x4082AE
000302bd: RAX := RBP
.address 0x4082B1
000302c7: when ~ZF goto %000302c1
00044817: goto %0003c58b

.address 0x408308
000302c1: 
.address 0x408308
000302d3: RSP := RSP - 8
.address 0x408308
000302d6: mem := mem with [RSP, el]:u64 <- 0x40830D
.address 0x408308
000302d9: call @sub_403970 with return %000302db

.address 0x40830D
000302db: 
00044818: call @sub_408310 with noreturn

.address 0x4082B3
0003c58b: 
.address 0x4082B3
0003c597: #8330 := RSP
.address 0x4082B3
0003c59a: RSP := RSP + 0x2A8
.address 0x4082B3
0003c59d: CF := RSP < #8330
.address 0x4082B3
0003c5a0: OF := ~high:1[#8330] & (high:1[#8330] | high:1[RSP]) & ~(high:1[#8330] & high:1[RSP])
.address 0x4082B3
0003c5a3: AF := 0x10 = (0x10 & (RSP ^ #8330 ^ 0x2A8))
.address 0x4082B3
0003c5a6: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4082B3
0003c5a9: SF := high:1[RSP]
.address 0x4082B3
0003c5ac: ZF := 0 = RSP
.address 0x4082BA
0003c5b4: RBX := mem[RSP, el]:u64
.address 0x4082BA
0003c5b7: RSP := RSP + 8
.address 0x4082BB
0003c5bf: RBP := mem[RSP, el]:u64
.address 0x4082BB
0003c5c2: RSP := RSP + 8
.address 0x4082BC
0003c5cb: #8333 := mem[RSP, el]:u64
.address 0x4082BC
0003c5ce: RSP := RSP + 8
.address 0x4082BC
0003c5d2: call #8333 with noreturn


.address 0x408310
00043f82: sub sub_408310()
.address 0x408310
000302de: 
.address 0x408310
000302e5: #6685 := R15
.address 0x408310
000302e8: RSP := RSP - 8
.address 0x408310
000302eb: mem := mem with [RSP, el]:u64 <- #6685
00044819: call @sub_408312 with noreturn


.address 0x408312
00043f84: sub sub_408312()
.address 0x408312
000302ed: 
.address 0x408312
000302f4: #6686 := R14
.address 0x408312
000302f7: RSP := RSP - 8
.address 0x408312
000302fa: mem := mem with [RSP, el]:u64 <- #6686
.address 0x408314
00030303: #6687 := R13
.address 0x408314
00030306: RSP := RSP - 8
.address 0x408314
00030309: mem := mem with [RSP, el]:u64 <- #6687
0004481a: call @sub_408316 with noreturn


.address 0x408316
00043f86: sub sub_408316()
.address 0x408316
0003030b: 
.address 0x408316
00030312: #6688 := R12
.address 0x408316
00030315: RSP := RSP - 8
.address 0x408316
00030318: mem := mem with [RSP, el]:u64 <- #6688
.address 0x408318
00030321: #6689 := RBP
.address 0x408318
00030324: RSP := RSP - 8
.address 0x408318
00030327: mem := mem with [RSP, el]:u64 <- #6689
.address 0x408319
00030330: #6690 := RBX
.address 0x408319
00030333: RSP := RSP - 8
.address 0x408319
00030336: mem := mem with [RSP, el]:u64 <- #6690
.address 0x40831A
0003033d: RBP := RDI
.address 0x40831D
0003034b: #6691 := RSP
.address 0x40831D
0003034e: RSP := RSP - 0x1328
.address 0x40831D
00030351: CF := #6691 < 0x1328
.address 0x40831D
00030354: OF := high:1[(#6691 ^ 0x1328) & (#6691 ^ RSP)]
.address 0x40831D
00030357: AF := 0x10 = (0x10 & (RSP ^ #6691 ^ 0x1328))
.address 0x40831D
0003035a: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40831D
0003035d: SF := high:1[RSP]
.address 0x40831D
00030360: ZF := 0 = RSP
.address 0x408324
00030367: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x40832D
0003036e: mem := mem with [RSP + 0x1318, el]:u64 <- RAX
.address 0x408335
0003037b: RAX := 0
.address 0x408335
0003037e: AF := unknown[bits]:u1
.address 0x408335
00030381: ZF := 1
.address 0x408335
00030384: PF := 1
.address 0x408335
00030387: OF := 0
.address 0x408335
0003038a: CF := 0
.address 0x408335
0003038d: SF := 0
.address 0x408337
0003039a: #6694 := mem[RDI + 0xB8]
.address 0x408337
0003039d: CF := mem[RDI + 0xB8] < 0
.address 0x408337
000303a0: OF := high:1[mem[RDI + 0xB8] & (mem[RDI + 0xB8] ^ #6694)]
.address 0x408337
000303a3: AF := 0x10 = (0x10 & (#6694 ^ mem[RDI + 0xB8]))
.address 0x408337
000303a6: PF := ~low:1[let $1 = #6694 >> 4 ^ #6694 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408337
000303a9: SF := high:1[#6694]
.address 0x408337
000303ac: ZF := 0 = #6694
.address 0x40833E
000303b6: when ZF goto %000303b0
0004481b: goto %0003c53b

.address 0x408700
000303b0: 
.address 0x408700
000303c0: RAX := pad:64[mem[RDI + 0xA8, el]:u32]
.address 0x408706
000303c7: RDX := 0x416B90
.address 0x40870D
000303d4: #6696 := mem[0x621364]
.address 0x40870D
000303d7: CF := mem[0x621364] < 0
.address 0x40870D
000303da: OF := high:1[mem[0x621364] & (mem[0x621364] ^ #6696)]
.address 0x40870D
000303dd: AF := 0x10 = (0x10 & (#6696 ^ mem[0x621364]))
.address 0x40870D
000303e0: PF := ~low:1[let $1 = #6696 >> 4 ^ #6696 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40870D
000303e3: SF := high:1[#6696]
.address 0x40870D
000303e6: ZF := 0 = #6696
.address 0x408714
000303ed: R13 := low:64[RSP + 0xB4]
.address 0x40871C
000303f4: R10 := 0x3F3F
.address 0x408722
000303fb: RAX := pad:64[pad:32[mem[RDX + RAX]]]
.address 0x408726
00030402: mem := mem with [RSP + 0xB4] <- low:8[RAX]
.address 0x40872D
00030409: RAX := 0x3F3F3F3F3F3F3F3F
.address 0x408737
00030410: mem := mem with [RSP + 0xB5, el]:u64 <- RAX
.address 0x40873F
00030417: mem := mem with [R13 + 9, el]:u16 <- low:16[R10]
.address 0x408744
0003041e: mem := mem with [RSP + 0xBF] <- 0
.address 0x40874C
00030428: when ZF goto %00030422
0004481c: goto %0003c49f

.address 0x408344
0003c53b: 
.address 0x408344
0003c540: R13 := low:64[RSP + 0xB4]
.address 0x40834C
0003c547: RDI := low:64[RDI + 0x18]
.address 0x408350
0003c54e: RSI := R13
.address 0x408353
0003c557: RSP := RSP - 8
.address 0x408353
0003c55a: mem := mem with [RSP, el]:u64 <- 0x408358
.address 0x408353
0003c55d: call @sub_40d1f0 with return %0003c55f

.address 0x408358
0003c55f: 
.address 0x408358
0003c56a: #8328 := mem[0x621364]
.address 0x408358
0003c56d: CF := mem[0x621364] < 0
.address 0x408358
0003c570: OF := high:1[mem[0x621364] & (mem[0x621364] ^ #8328)]
.address 0x408358
0003c573: AF := 0x10 = (0x10 & (#8328 ^ mem[0x621364]))
.address 0x408358
0003c576: PF := ~low:1[let $1 = #8328 >> 4 ^ #8328 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408358
0003c579: SF := high:1[#8328]
.address 0x408358
0003c57c: ZF := 0 = #8328
.address 0x40835F
0003c585: when ~ZF goto %0003c49f
0004481d: goto %00030422

.address 0x408752
0003c49f: 
.address 0x408752
0003c4a4: RAX := pad:64[mem[RBP + 0xBC, el]:u32]
.address 0x408758
0003c4b1: #8322 := low:32[RAX] - 1
.address 0x408758
0003c4b4: CF := low:32[RAX] < 1
.address 0x408758
0003c4b7: OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #8322)]
.address 0x408758
0003c4ba: AF := 0x10 = (0x10 & (#8322 ^ low:32[RAX] ^ 1))
.address 0x408758
0003c4bd: PF := ~low:1[let $1 = #8322 >> 4 ^ #8322 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408758
0003c4c0: SF := high:1[#8322]
.address 0x408758
0003c4c3: ZF := 0 = #8322
.address 0x40875B
0003c4cc: when ZF goto %0003103a
0004481e: goto %0003c4d2

.address 0x408A60
0003103a: 
.address 0x408A60
0003103f: mem := mem with [RSP + 0xBE] <- 0x2E
.address 0x408A68
00031046: goto %00030434

.address 0x408761
0003c4d2: 
.address 0x408761
0003c4dd: #8324 := low:32[RAX] - 2
.address 0x408761
0003c4e0: CF := low:32[RAX] < 2
.address 0x408761
0003c4e3: OF := high:1[(low:32[RAX] ^ 2) & (low:32[RAX] ^ #8324)]
.address 0x408761
0003c4e6: AF := 0x10 = (0x10 & (#8324 ^ low:32[RAX] ^ 2))
.address 0x408761
0003c4e9: PF := ~low:1[let $1 = #8324 >> 4 ^ #8324 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408761
0003c4ec: SF := high:1[#8324]
.address 0x408761
0003c4ef: ZF := 0 = #8324
.address 0x408764
0003c4f8: when ~ZF goto %00030434
0004481f: goto %0003c4fe

.address 0x40876A
0003c4fe: 
.address 0x40876A
0003c503: RAX := pad:64[mem[0x621334, el]:u32]
.address 0x408770
0003c50a: mem := mem with [RSP + 0xBE] <- 0x2B
.address 0x408778
0003c517: #8326 := low:32[RAX] - 1
.address 0x408778
0003c51a: CF := low:32[RAX] < 1
.address 0x408778
0003c51d: OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #8326)]
.address 0x408778
0003c520: AF := 0x10 = (0x10 & (#8326 ^ low:32[RAX] ^ 1))
.address 0x408778
0003c523: PF := ~low:1[let $1 = #8326 >> 4 ^ #8326 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408778
0003c526: SF := high:1[#8326]
.address 0x408778
0003c529: ZF := 0 = #8326
.address 0x40877B
0003c532: when ~ZF goto %0003c44a
00044820: goto %0003c538

.address 0x408781
0003c538: 
00044821: goto %0003045c

.address 0x408365
00030422: 
.address 0x408365
00030432: mem := mem with [RSP + 0xBE] <- 0
00044822: goto %00030434

.address 0x40836D
00030434: 
.address 0x40836D
00030439: RAX := pad:64[mem[0x621334, el]:u32]
.address 0x408373
00030446: #6698 := low:32[RAX] - 1
.address 0x408373
00030449: CF := low:32[RAX] < 1
.address 0x408373
0003044c: OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #6698)]
.address 0x408373
0003044f: AF := 0x10 = (0x10 & (#6698 ^ low:32[RAX] ^ 1))
.address 0x408373
00030452: PF := ~low:1[let $1 = #6698 >> 4 ^ #6698 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408373
00030455: SF := high:1[#6698]
.address 0x408373
00030458: ZF := 0 = #6698
.address 0x408376
00030462: when ZF goto %0003045c
00044823: goto %0003c44a

.address 0x408788
0003045c: 
.address 0x408788
00030472: #6700 := mem[0x6212FC]
.address 0x408788
00030475: CF := mem[0x6212FC] < 0
.address 0x408788
00030478: OF := high:1[mem[0x6212FC] & (mem[0x6212FC] ^ #6700)]
.address 0x408788
0003047b: AF := 0x10 = (0x10 & (#6700 ^ mem[0x6212FC]))
.address 0x408788
0003047e: PF := ~low:1[let $1 = #6700 >> 4 ^ #6700 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408788
00030481: SF := high:1[#6700]
.address 0x408788
00030484: ZF := 0 = #6700
.address 0x40878F
0003048b: RDX := mem[RBP + 0x80, el]:u64
.address 0x408796
00030492: RAX := mem[RBP + 0x88, el]:u64
.address 0x40879D
00030499: mem := mem with [RSP + 0x20, el]:u64 <- RDX
.address 0x4087A2
000304a0: RDX := pad:64[pad:32[mem[RBP + 0xB8]]]
.address 0x4087A9
000304a7: mem := mem with [RSP + 0x28, el]:u64 <- RAX
.address 0x4087AE
000304b1: when ~ZF goto %000304ab
00044824: goto %0003c3d9

.address 0x40837C
0003c44a: 
.address 0x40837C
0003c451: when CF goto %0003c3f1
00044825: goto %0003c457

.address 0x4087C8
0003c3f1: 
.address 0x4087C8
0003c3f6: RAX := mem[RBP + 0x78, el]:u64
.address 0x4087CC
0003c3fd: RDX := mem[RBP + 0x70, el]:u64
.address 0x4087D0
0003c404: mem := mem with [RSP + 0x28, el]:u64 <- RAX
.address 0x4087D5
0003c40b: mem := mem with [RSP + 0x20, el]:u64 <- RDX
.address 0x4087DA
0003c413: goto %0003c40f

.address 0x408382
0003c457: 
.address 0x408382
0003c462: #8320 := low:32[RAX] - 2
.address 0x408382
0003c465: CF := low:32[RAX] < 2
.address 0x408382
0003c468: OF := high:1[(low:32[RAX] ^ 2) & (low:32[RAX] ^ #8320)]
.address 0x408382
0003c46b: AF := 0x10 = (0x10 & (#8320 ^ low:32[RAX] ^ 2))
.address 0x408382
0003c46e: PF := ~low:1[let $1 = #8320 >> 4 ^ #8320 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408382
0003c471: SF := high:1[#8320]
.address 0x408382
0003c474: ZF := 0 = #8320
.address 0x408385
0003c47d: when ~ZF goto %0003198d
00044826: goto %0003c483

.address 0x408CE1
0003198d: 
.address 0x408CE1
00031994: RSP := RSP - 8
.address 0x408CE1
00031997: mem := mem with [RSP, el]:u64 <- 0x408CE6
.address 0x408CE1
0003199a: call @sub_4037e0 with return %00030c39

.address 0x40838B
0003c483: 
.address 0x40838B
0003c488: RAX := mem[RBP + 0x68, el]:u64
.address 0x40838F
0003c48f: RDX := mem[RBP + 0x60, el]:u64
.address 0x408393
0003c496: mem := mem with [RSP + 0x28, el]:u64 <- RAX
.address 0x408398
0003c49d: mem := mem with [RSP + 0x20, el]:u64 <- RDX
00044827: goto %0003c40f

.address 0x40839D
0003c40f: 
.address 0x40839D
0003c41f: #8318 := mem[0x6212FC]
.address 0x40839D
0003c422: CF := mem[0x6212FC] < 0
.address 0x40839D
0003c425: OF := high:1[mem[0x6212FC] & (mem[0x6212FC] ^ #8318)]
.address 0x40839D
0003c428: AF := 0x10 = (0x10 & (#8318 ^ mem[0x6212FC]))
.address 0x40839D
0003c42b: PF := ~low:1[let $1 = #8318 >> 4 ^ #8318 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40839D
0003c42e: SF := high:1[#8318]
.address 0x40839D
0003c431: ZF := 0 = #8318
.address 0x4083A4
0003c438: RDX := pad:64[pad:32[mem[RBP + 0xB8]]]
.address 0x4083AB
0003c441: when ZF goto %0003c3d9
00044828: goto %000304ab

.address 0x4087B4
0003c3d9: 
.address 0x4087B4
0003c3de: R12 := low:64[RSP + 0x4D0]
.address 0x4087BC
0003c3e5: RBX := R12
.address 0x4087BF
0003c3ec: goto %00030681

.address 0x4083B1
000304ab: 
.address 0x4083B1
000304c1: #6702 := low:8[RDX]
.address 0x4083B1
000304c4: OF := 0
.address 0x4083B1
000304c7: CF := 0
.address 0x4083B1
000304ca: AF := unknown[bits]:u1
.address 0x4083B1
000304cd: PF := ~low:1[let $1 = #6702 >> 4 ^ #6702 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4083B1
000304d0: SF := high:1[#6702]
.address 0x4083B1
000304d3: ZF := 0 = #6702
.address 0x4083B3
000304da: R9 := 0x417C2E
.address 0x4083BA
000304e4: when ZF goto %000304de
00044829: goto %0003c3a6

.address 0x4083BC
0003c3a6: 
.address 0x4083BC
0003c3ab: RDI := mem[RBP + 0x20, el]:u64
.address 0x4083C0
0003c3b8: #8316 := RDI
.address 0x4083C0
0003c3bb: OF := 0
.address 0x4083C0
0003c3be: CF := 0
.address 0x4083C0
0003c3c1: AF := unknown[bits]:u1
.address 0x4083C0
0003c3c4: PF := ~low:1[let $1 = #8316 >> 4 ^ #8316 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4083C0
0003c3c7: SF := high:1[#8316]
.address 0x4083C0
0003c3ca: ZF := 0 = #8316
.address 0x4083C3
0003c3d3: when ~ZF goto %00031081
0004482a: goto %000304de

.address 0x408A88
00031081: 
.address 0x408A88
00031086: RSI := low:64[RSP + 0xE0]
.address 0x408A90
0003108f: RSP := RSP - 8
.address 0x408A90
00031092: mem := mem with [RSP, el]:u64 <- 0x408A95
.address 0x408A90
00031095: call @sub_40fcf0 with return %00031097

.address 0x408A95
00031097: 
.address 0x408A95
0003109c: R9 := RAX
.address 0x408A98
000310a3: goto %000304de

.address 0x4083C9
000304de: 
.address 0x4083C9
000304ee: R12 := low:64[RSP + 0x4D0]
.address 0x4083D1
000304f5: R8 := pad:64[mem[0x621360, el]:u32]
.address 0x4083D8
000304fc: RCX := 0x417C5B
.address 0x4083DF
00030503: RDX := 0xE3B
.address 0x4083E4
0003050a: RSI := 1
.address 0x4083E9
00030517: RAX := 0
.address 0x4083E9
0003051a: AF := unknown[bits]:u1
.address 0x4083E9
0003051d: ZF := 1
.address 0x4083E9
00030520: PF := 1
.address 0x4083E9
00030523: OF := 0
.address 0x4083E9
00030526: CF := 0
.address 0x4083E9
00030529: SF := 0
.address 0x4083EB
00030530: RDI := R12
.address 0x4083EE
00030537: RBX := R12
.address 0x4083F1
00030540: RSP := RSP - 8
.address 0x4083F1
00030543: mem := mem with [RSP, el]:u64 <- 0x4083F6
.address 0x4083F1
00030546: call @sub_403e60 with return %00030548

.address 0x4083F6
00030548: 
.address 0x4083F6
0003054d: RAX := pad:64[mem[RBX, el]:u32]
.address 0x4083F8
0003055b: #6704 := RBX
.address 0x4083F8
0003055e: RBX := RBX + 4
.address 0x4083F8
00030561: CF := RBX < #6704
.address 0x4083F8
00030564: OF := ~high:1[#6704] & (high:1[#6704] | high:1[RBX]) & ~(high:1[#6704] & high:1[RBX])
.address 0x4083F8
00030567: AF := 0x10 = (0x10 & (RBX ^ #6704 ^ 4))
.address 0x4083F8
0003056a: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4083F8
0003056d: SF := high:1[RBX]
.address 0x4083F8
00030570: ZF := 0 = RBX
.address 0x4083FC
00030577: RDX := pad:64[low:32[RAX - 0x1010101]]
.address 0x408402
0003057e: RAX := pad:64[~low:32[RAX]]
.address 0x408404
0003058b: RDX := pad:64[low:32[RDX] & low:32[RAX]]
.address 0x408404
0003058e: OF := 0
.address 0x408404
00030591: CF := 0
.address 0x408404
00030594: AF := unknown[bits]:u1
.address 0x408404
00030597: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408404
0003059a: SF := high:1[low:32[RDX]]
.address 0x408404
0003059d: ZF := 0 = low:32[RDX]
.address 0x408406
000305aa: RDX := pad:64[low:32[RDX] & 0x80808080]
.address 0x408406
000305ad: OF := 0
.address 0x408406
000305b0: CF := 0
.address 0x408406
000305b3: AF := unknown[bits]:u1
.address 0x408406
000305b6: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408406
000305b9: SF := high:1[low:32[RDX]]
.address 0x408406
000305bc: ZF := 0 = low:32[RDX]
.address 0x40840C
000305c5: when ZF goto %00030548
0004482b: goto %000305cb

.address 0x40840E
000305cb: 
.address 0x40840E
000305d0: RAX := pad:64[low:32[RDX]]
.address 0x408410
000305de: #6709 := low:32[RAX]
.address 0x408410
000305e1: RAX := pad:64[low:32[RAX] >> 0x10]
.address 0x408410
000305e4: CF := high:1[#6709 << 0x10]
.address 0x408410
000305e7: SF := high:1[low:32[RAX]]
.address 0x408410
000305ea: ZF := 0 = low:32[RAX]
.address 0x408410
000305ed: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408410
000305f0: AF := unknown[bits]:u1
.address 0x408410
000305f3: OF := unknown[bits]:u1
.address 0x408413
00030600: #6711 := low:32[RDX] & 0x8080
.address 0x408413
00030603: OF := 0
.address 0x408413
00030606: CF := 0
.address 0x408413
00030609: AF := unknown[bits]:u1
.address 0x408413
0003060c: PF := ~low:1[let $1 = #6711 >> 4 ^ #6711 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408413
0003060f: SF := high:1[#6711]
.address 0x408413
00030612: ZF := 0 = #6711
.address 0x408419
00030619: RDX := pad:64[if ZF then low:32[RAX] else low:32[RDX]]
.address 0x40841C
00030620: RAX := low:64[RBX + 2]
.address 0x408420
00030627: RBX := if ZF then RAX else RBX
.address 0x408424
0003062e: RAX := pad:64[low:32[RDX]]
.address 0x408426
0003063d: #6713 := low:8[RAX]
.address 0x408426
00030640: #6714 := low:8[RDX]
.address 0x408426
00030643: RAX := extract:63:8[RAX].low:8[RAX] + #6714
.address 0x408426
00030646: CF := low:8[RAX] < #6713
.address 0x408426
00030649: OF := high:1[#6713] = high:1[#6714] & (high:1[#6713] | high:1[low:8[RAX]]) & ~(
high:1[#6713] & high:1[low:8[RAX]])
.address 0x408426
0003064c: AF := 0x10 = (0x10 & (low:8[RAX] ^ #6713 ^ #6714))
.address 0x408426
0003064f: PF := ~low:1[let $1 = low:8[RAX] >> 4 ^ low:8[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408426
00030652: SF := high:1[low:8[RAX]]
.address 0x408426
00030655: ZF := 0 = low:8[RAX]
.address 0x408428
0003065c: RDX := pad:64[pad:32[mem[RBP + 0xB8]]]
.address 0x40842F
0003066a: #6717 := RBX
.address 0x40842F
0003066d: RBX := #6717 - 3 + pad:64[CF]
.address 0x40842F
00030670: OF := high:1[(3 ^ #6717) & (#6717 ^ RBX)]
.address 0x40842F
00030673: CF := #6717 < 3 + pad:64[CF] | 3 + pad:64[CF] < 3
.address 0x40842F
00030676: AF := 0x10 = (0x10 & (RBX ^ 3 ^ #6717))
.address 0x40842F
00030679: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40842F
0003067c: SF := high:1[RBX]
.address 0x40842F
0003067f: ZF := 0 = RBX
0004482c: goto %00030681

.address 0x408433
00030681: 
.address 0x408433
0003068c: #6719 := mem[0x62132C]
.address 0x408433
0003068f: CF := mem[0x62132C] < 0
.address 0x408433
00030692: OF := high:1[mem[0x62132C] & (mem[0x62132C] ^ #6719)]
.address 0x408433
00030695: AF := 0x10 = (0x10 & (#6719 ^ mem[0x62132C]))
.address 0x408433
00030698: PF := ~low:1[let $1 = #6719 >> 4 ^ #6719 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408433
0003069b: SF := high:1[#6719]
.address 0x408433
0003069e: ZF := 0 = #6719
.address 0x40843A
000306a8: when ZF goto %000306a2
0004482d: goto %0003c373

.address 0x40843C
0003c373: 
.address 0x40843C
0003c37e: #8314 := low:8[RDX]
.address 0x40843C
0003c381: OF := 0
.address 0x40843C
0003c384: CF := 0
.address 0x40843C
0003c387: AF := unknown[bits]:u1
.address 0x40843C
0003c38a: PF := ~low:1[let $1 = #8314 >> 4 ^ #8314 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40843C
0003c38d: SF := high:1[#8314]
.address 0x40843C
0003c390: ZF := 0 = #8314
.address 0x40843E
0003c397: R15 := 0x417C2E
.address 0x408445
0003c3a0: when ~ZF goto %0003166c
0004482e: goto %000316a7

.address 0x408BC0
0003166c: 
.address 0x408BC0
00031671: RDI := mem[RBP + 0x58, el]:u64
.address 0x408BC4
00031678: R8 := mem[0x621320, el]:u64
.address 0x408BCB
0003167f: RSI := low:64[RSP + 0xE0]
.address 0x408BD3
00031686: RDX := pad:64[mem[0x621328, el]:u32]
.address 0x408BD9
0003168d: RCX := 0x200
.address 0x408BDE
00031696: RSP := RSP - 8
.address 0x408BDE
00031699: mem := mem with [RSP, el]:u64 <- 0x408BE3
.address 0x408BDE
0003169c: call @sub_40ed10 with return %0003169e

.address 0x408BE3
0003169e: 
.address 0x408BE3
000316a3: R15 := RAX
.address 0x408BE6
000316ab: goto %000316a7

.address 0x40844B
000316a7: 
.address 0x40844B
000316b1: R14 := pad:64[mem[0x62135C, el]:u32]
.address 0x408452
000316be: RSI := 0
.address 0x408452
000316c1: AF := unknown[bits]:u1
.address 0x408452
000316c4: ZF := 1
.address 0x408452
000316c7: PF := 1
.address 0x408452
000316ca: OF := 0
.address 0x408452
000316cd: CF := 0
.address 0x408452
000316d0: SF := 0
.address 0x408454
000316d7: RDI := R15
.address 0x408457
000316e0: RSP := RSP - 8
.address 0x408457
000316e3: mem := mem with [RSP, el]:u64 <- 0x40845C
.address 0x408457
000316e6: call @sub_410370 with return %000316e8

.address 0x40845C
000316e8: 
.address 0x40845C
000316f5: #6842 := low:32[R14]
.address 0x40845C
000316f8: #6843 := low:32[RAX]
.address 0x40845C
000316fb: R14 := pad:64[low:32[R14] - low:32[RAX]]
.address 0x40845C
000316fe: CF := #6842 < #6843
.address 0x40845C
00031701: OF := high:1[(#6842 ^ #6843) & (#6842 ^ low:32[R14])]
.address 0x40845C
00031704: AF := 0x10 = (0x10 & (low:32[R14] ^ #6842 ^ #6843))
.address 0x40845C
00031707: PF := ~low:1[let $1 = low:32[R14] >> 4 ^ low:32[R14] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40845C
0003170a: SF := high:1[low:32[R14]]
.address 0x40845C
0003170d: ZF := 0 = low:32[R14]
.address 0x40845F
0003171a: #6845 := low:32[R14]
.address 0x40845F
0003171d: OF := 0
.address 0x40845F
00031720: CF := 0
.address 0x40845F
00031723: AF := unknown[bits]:u1
.address 0x40845F
00031726: PF := ~low:1[let $1 = #6845 >> 4 ^ #6845 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40845F
00031729: SF := high:1[#6845]
.address 0x40845F
0003172c: ZF := 0 = #6845
.address 0x408462
00031733: RAX := pad:64[low:32[R14]]
.address 0x408465
0003173d: when ZF | (SF | OF) & ~(SF & OF) goto %00031737
0004482f: goto %000317c5

.address 0x40846B
000317c5: 
.address 0x40846B
000317d1: #6852 := low:32[RAX]
.address 0x40846B
000317d4: RAX := pad:64[low:32[RAX] - 1]
.address 0x40846B
000317d7: CF := #6852 < 1
.address 0x40846B
000317da: OF := high:1[(#6852 ^ 1) & (#6852 ^ low:32[RAX])]
.address 0x40846B
000317dd: AF := 0x10 = (0x10 & (low:32[RAX] ^ #6852 ^ 1))
.address 0x40846B
000317e0: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40846B
000317e3: SF := high:1[low:32[RAX]]
.address 0x40846B
000317e6: ZF := 0 = low:32[RAX]
.address 0x40846E
000317ed: RDX := RAX
.address 0x408471
000317f4: RCX := low:64[RBX + RAX + 1]
.address 0x408476
000317fb: RAX := RBX
00044830: goto %00031800

.address 0x408480
00031800: 
.address 0x408480
0003180c: #6855 := RAX
.address 0x408480
0003180f: RAX := RAX + 1
.address 0x408480
00031812: CF := RAX < #6855
.address 0x408480
00031815: OF := ~high:1[#6855] & (high:1[#6855] | high:1[RAX]) & ~(high:1[#6855] & high:1[RAX])
.address 0x408480
00031818: AF := 0x10 = (0x10 & (RAX ^ #6855 ^ 1))
.address 0x408480
0003181b: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408480
0003181e: SF := high:1[RAX]
.address 0x408480
00031821: ZF := 0 = RAX
.address 0x408484
00031828: mem := mem with [RAX - 1] <- 0x20
.address 0x408488
00031835: #6858 := RAX - RCX
.address 0x408488
00031838: CF := RAX < RCX
.address 0x408488
0003183b: OF := high:1[(RAX ^ RCX) & (RAX ^ #6858)]
.address 0x408488
0003183e: AF := 0x10 = (0x10 & (#6858 ^ RAX ^ RCX))
.address 0x408488
00031841: PF := ~low:1[let $1 = #6858 >> 4 ^ #6858 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408488
00031844: SF := high:1[#6858]
.address 0x408488
00031847: ZF := 0 = #6858
.address 0x40848B
00031850: when ~ZF goto %00031800
00044831: goto %00031856

.address 0x40848D
00031856: 
.address 0x40848D
0003185b: RAX := extend:64[low:32[RDX]]
.address 0x408490
00031862: RDX := low:64[RBX + RAX + 1]
00044832: goto %0003174b

.address 0x408495
0003174b: 
.address 0x408495
0003175c: #6847 := R15
.address 0x408495
0003175f: R15 := R15 + 1
.address 0x408495
00031762: CF := R15 < #6847
.address 0x408495
00031765: OF := ~high:1[#6847] & (high:1[#6847] | high:1[R15]) & ~(high:1[#6847] & high:1[R15])
.address 0x408495
00031768: AF := 0x10 = (0x10 & (R15 ^ #6847 ^ 1))
.address 0x408495
0003176b: PF := ~low:1[let $1 = R15 >> 4 ^ R15 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408495
0003176e: SF := high:1[R15]
.address 0x408495
00031771: ZF := 0 = R15
.address 0x408499
00031778: RAX := pad:64[pad:32[mem[R15 - 1]]]
.address 0x40849E
0003177f: RBX := low:64[RDX + 1]
.address 0x4084A2
0003178c: #6850 := low:8[RAX]
.address 0x4084A2
0003178f: OF := 0
.address 0x4084A2
00031792: CF := 0
.address 0x4084A2
00031795: AF := unknown[bits]:u1
.address 0x4084A2
00031798: PF := ~low:1[let $1 = #6850 >> 4 ^ #6850 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4084A2
0003179b: SF := high:1[#6850]
.address 0x4084A2
0003179e: ZF := 0 = #6850
.address 0x4084A4
000317a5: mem := mem with [RBX - 1] <- low:8[RAX]
.address 0x4084A7
000317ae: when ~ZF goto %00031737
00044833: goto %000317b4

.address 0x408980
00031737: 
.address 0x408980
00031747: RDX := RBX
.address 0x408983
0003174f: goto %0003174b

.address 0x4084AD
000317b4: 
.address 0x4084AD
000317b9: mem := mem with [RDX] <- 0x20
.address 0x4084B0
000317c0: RDX := pad:64[pad:32[mem[RBP + 0xB8]]]
00044834: goto %000306a2

.address 0x4084B7
000306a2: 
.address 0x4084B7
000306b8: #6721 := low:8[RDX]
.address 0x4084B7
000306bb: OF := 0
.address 0x4084B7
000306be: CF := 0
.address 0x4084B7
000306c1: AF := unknown[bits]:u1
.address 0x4084B7
000306c4: PF := ~low:1[let $1 = #6721 >> 4 ^ #6721 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4084B7
000306c7: SF := high:1[#6721]
.address 0x4084B7
000306ca: ZF := 0 = #6721
.address 0x4084B9
000306d1: RAX := 0x417C2E
.address 0x4084C0
000306db: when ~ZF goto %000306d5
00044835: goto %000306ff

.address 0x408968
000306d5: 
.address 0x408968
000306e5: RDI := mem[RBP + 0x28, el]:u64
.address 0x40896C
000306ec: RSI := low:64[RSP + 0xE0]
.address 0x408974
000306f5: RSP := RSP - 8
.address 0x408974
000306f8: mem := mem with [RSP, el]:u64 <- 0x408979
.address 0x408974
000306fb: call @sub_40fcf0 with return %000306fd

.address 0x408979
000306fd: 
.address 0x408979
00030703: goto %000306ff

.address 0x4084C6
000306ff: 
.address 0x4084C6
00030710: #6723 := RSP
.address 0x4084C6
00030713: RSP := RSP - 8
.address 0x4084C6
00030716: CF := #6723 < 8
.address 0x4084C6
00030719: OF := high:1[(#6723 ^ 8) & (#6723 ^ RSP)]
.address 0x4084C6
0003071c: AF := 0x10 = (0x10 & (RSP ^ #6723 ^ 8))
.address 0x4084C6
0003071f: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4084C6
00030722: SF := high:1[RSP]
.address 0x4084C6
00030725: ZF := 0 = RSP
.address 0x4084CA
0003072c: R9 := pad:64[mem[0x621358, el]:u32]
.address 0x4084D1
00030733: RCX := 0x417C4B
.address 0x4084D8
0003073c: #6726 := RAX
.address 0x4084D8
0003073f: RSP := RSP - 8
.address 0x4084D8
00030742: mem := mem with [RSP, el]:u64 <- #6726
.address 0x4084D9
00030749: R8 := R13
.address 0x4084DC
00030750: RDI := RBX
.address 0x4084DF
00030757: RDX := 0xFFFFFFFFFFFFFFFF
.address 0x4084E6
0003075e: RSI := 1
.address 0x4084EB
0003076b: RAX := 0
.address 0x4084EB
0003076e: AF := unknown[bits]:u1
.address 0x4084EB
00030771: ZF := 1
.address 0x4084EB
00030774: PF := 1
.address 0x4084EB
00030777: OF := 0
.address 0x4084EB
0003077a: CF := 0
.address 0x4084EB
0003077d: SF := 0
.address 0x4084ED
00030786: RSP := RSP - 8
.address 0x4084ED
00030789: mem := mem with [RSP, el]:u64 <- 0x4084F2
.address 0x4084ED
0003078c: call @sub_403e60 with return %0003078e

.address 0x4084F2
0003078e: 
.address 0x4084F2
00030793: RDI := RBX
.address 0x4084F5
0003079c: RSP := RSP - 8
.address 0x4084F5
0003079f: mem := mem with [RSP, el]:u64 <- 0x4084FA
.address 0x4084F5
000307a2: call @sub_403950 with return %000307a4

.address 0x4084FA
000307a4: 
.address 0x4084FA
000307b1: #6727 := RBX
.address 0x4084FA
000307b4: #6728 := RAX
.address 0x4084FA
000307b7: RBX := RBX + #6728
.address 0x4084FA
000307ba: CF := RBX < #6727
.address 0x4084FA
000307bd: OF := high:1[#6727] = high:1[#6728] & (high:1[#6727] | high:1[RBX]) & ~(
high:1[#6727] & high:1[RBX])
.address 0x4084FA
000307c0: AF := 0x10 = (0x10 & (RBX ^ #6727 ^ #6728))
.address 0x4084FA
000307c3: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4084FA
000307c6: SF := high:1[RBX]
.address 0x4084FA
000307c9: ZF := 0 = RBX
.address 0x4084FD
000307d6: #6730 := mem[0x621318]
.address 0x4084FD
000307d9: CF := mem[0x621318] < 0
.address 0x4084FD
000307dc: OF := high:1[mem[0x621318] & (mem[0x621318] ^ #6730)]
.address 0x4084FD
000307df: AF := 0x10 = (0x10 & (#6730 ^ mem[0x621318]))
.address 0x4084FD
000307e2: PF := ~low:1[let $1 = #6730 >> 4 ^ #6730 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4084FD
000307e5: SF := high:1[#6730]
.address 0x4084FD
000307e8: ZF := 0 = #6730
.address 0x408504
000307f0: R8 := mem[RSP, el]:u64
.address 0x408504
000307f3: RSP := RSP + 8
.address 0x408506
000307fb: R9 := mem[RSP, el]:u64
.address 0x408506
000307fe: RSP := RSP + 8
.address 0x408508
00030808: when ~ZF goto %00030802
00044836: goto %0003085d

.address 0x408938
00030802: 
.address 0x408938
00030812: RCX := mem[0x620288, el]:u64
.address 0x40893F
00030819: RDI := 0x417C53
.address 0x408946
00030820: RDX := 2
.address 0x40894B
00030827: RSI := 1
.address 0x408950
00030830: RSP := RSP - 8
.address 0x408950
00030833: mem := mem with [RSP, el]:u64 <- 0x408955
.address 0x408950
00030836: call @sub_403c80 with return %00030838

.address 0x408955
00030838: 
.address 0x408955
00030844: #6732 := mem[0x6211F8, el]:u64
.address 0x408955
00030847: mem := mem with [0x6211F8, el]:u64 <- mem[0x6211F8, el]:u64 + 2
.address 0x408955
0003084a: CF := mem[0x6211F8, el]:u64 < #6732
.address 0x408955
0003084d: OF := ~high:1[#6732] & (high:1[#6732] | high:1[mem[0x6211F8, el]:u64]) & ~(
high:1[#6732] & high:1[mem[0x6211F8, el]:u64])
.address 0x408955
00030850: AF := 0x10 = (0x10 & (mem[0x6211F8, el]:u64 ^ #6732 ^ 2))
.address 0x408955
00030853: PF := ~low:1[let $1 = mem[0x6211F8, el]:u64 >> 4 ^ mem[0x6211F8, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408955
00030856: SF := high:1[mem[0x6211F8, el]:u64]
.address 0x408955
00030859: ZF := 0 = mem[0x6211F8, el]:u64
.address 0x40895D
00030861: goto %0003085d

.address 0x40850E
0003085d: 
.address 0x40850E
0003086d: #6735 := mem[0x620021]
.address 0x40850E
00030870: CF := mem[0x620021] < 0
.address 0x40850E
00030873: OF := high:1[mem[0x620021] & (mem[0x620021] ^ #6735)]
.address 0x40850E
00030876: AF := 0x10 = (0x10 & (#6735 ^ mem[0x620021]))
.address 0x40850E
00030879: PF := ~low:1[let $1 = #6735 >> 4 ^ #6735 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40850E
0003087c: SF := high:1[#6735]
.address 0x40850E
0003087f: ZF := 0 = #6735
.address 0x408515
00030889: when ~ZF goto %00030883
00044837: goto %0003c312

.address 0x408517
0003c312: 
.address 0x408517
0003c31d: #8310 := mem[0x620020]
.address 0x408517
0003c320: CF := mem[0x620020] < 0
.address 0x408517
0003c323: OF := high:1[mem[0x620020] & (mem[0x620020] ^ #8310)]
.address 0x408517
0003c326: AF := 0x10 = (0x10 & (#8310 ^ mem[0x620020]))
.address 0x408517
0003c329: PF := ~low:1[let $1 = #8310 >> 4 ^ #8310 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408517
0003c32c: SF := high:1[#8310]
.address 0x408517
0003c32f: ZF := 0 = #8310
.address 0x40851E
0003c338: when ~ZF goto %00030883
00044838: goto %0003c33e

.address 0x408520
0003c33e: 
.address 0x408520
0003c349: #8312 := mem[0x62132E]
.address 0x408520
0003c34c: CF := mem[0x62132E] < 0
.address 0x408520
0003c34f: OF := high:1[mem[0x62132E] & (mem[0x62132E] ^ #8312)]
.address 0x408520
0003c352: AF := 0x10 = (0x10 & (#8312 ^ mem[0x62132E]))
.address 0x408520
0003c355: PF := ~low:1[let $1 = #8312 >> 4 ^ #8312 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408520
0003c358: SF := high:1[#8312]
.address 0x408520
0003c35b: ZF := 0 = #8312
.address 0x408527
0003c364: when ZF goto %0003104b
00044839: goto %0003c36a

.address 0x408A70
0003104b: 
.address 0x408A70
00031056: #6794 := mem[0x621365]
.address 0x408A70
00031059: CF := mem[0x621365] < 0
.address 0x408A70
0003105c: OF := high:1[mem[0x621365] & (mem[0x621365] ^ #6794)]
.address 0x408A70
0003105f: AF := 0x10 = (0x10 & (#6794 ^ mem[0x621365]))
.address 0x408A70
00031062: PF := ~low:1[let $1 = #6794 >> 4 ^ #6794 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408A70
00031065: SF := high:1[#6794]
.address 0x408A70
00031068: ZF := 0 = #6794
.address 0x408A77
00031071: when ZF goto %00030a9b
0004483a: goto %00031077

.address 0x408A7D
00031077: 
.address 0x408A7D
0003107c: goto %00030883

.address 0x40852D
0003c36a: 
0004483b: goto %00030883

.address 0x408530
00030883: 
.address 0x408530
00030893: RSI := mem[0x620288, el]:u64
.address 0x408537
0003089a: RDI := R12
.address 0x40853A
000308a9: #6737 := RBX
.address 0x40853A
000308ac: #6738 := R12
.address 0x40853A
000308af: RBX := RBX - R12
.address 0x40853A
000308b2: CF := #6737 < #6738
.address 0x40853A
000308b5: OF := high:1[(#6737 ^ #6738) & (#6737 ^ RBX)]
.address 0x40853A
000308b8: AF := 0x10 = (0x10 & (RBX ^ #6737 ^ #6738))
.address 0x40853A
000308bb: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40853A
000308be: SF := high:1[RBX]
.address 0x40853A
000308c1: ZF := 0 = RBX
.address 0x40853D
000308ca: RSP := RSP - 8
.address 0x40853D
000308cd: mem := mem with [RSP, el]:u64 <- 0x408542
.address 0x40853D
000308d0: call @sub_403af0 with return %000308d2

.address 0x408542
000308d2: 
.address 0x408542
000308df: #6740 := mem[0x6211F8, el]:u64
.address 0x408542
000308e2: #6741 := RBX
.address 0x408542
000308e5: mem := mem with [0x6211F8, el]:u64 <- mem[0x6211F8, el]:u64 + #6741
.address 0x408542
000308e8: CF := mem[0x6211F8, el]:u64 < #6740
.address 0x408542
000308eb: OF := high:1[#6740] = high:1[#6741] & (high:1[#6740] | high:1[mem[0x6211F8, el]:u64]) & ~(
high:1[#6740] & high:1[mem[0x6211F8, el]:u64])
.address 0x408542
000308ee: AF := 0x10 = (0x10 & (mem[0x6211F8, el]:u64 ^ #6740 ^ #6741))
.address 0x408542
000308f1: PF := ~low:1[let $1 = mem[0x6211F8, el]:u64 >> 4 ^ mem[0x6211F8, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408542
000308f4: SF := high:1[mem[0x6211F8, el]:u64]
.address 0x408542
000308f7: ZF := 0 = mem[0x6211F8, el]:u64
.address 0x408549
00030904: #6743 := mem[0x620021]
.address 0x408549
00030907: CF := mem[0x620021] < 0
.address 0x408549
0003090a: OF := high:1[mem[0x620021] & (mem[0x620021] ^ #6743)]
.address 0x408549
0003090d: AF := 0x10 = (0x10 & (#6743 ^ mem[0x620021]))
.address 0x408549
00030910: PF := ~low:1[let $1 = #6743 >> 4 ^ #6743 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408549
00030913: SF := high:1[#6743]
.address 0x408549
00030916: ZF := 0 = #6743
.address 0x408550
00030920: when ~ZF goto %0003091a
0004483c: goto %0003094b

.address 0x408A20
0003091a: 
.address 0x408A20
0003092a: RDX := pad:64[pad:32[mem[RBP + 0xB8]]]
.address 0x408A27
00030931: RDI := pad:64[mem[RBP + 0x34, el]:u32]
.address 0x408A2A
00030938: RSI := pad:64[mem[0x621350, el]:u32]
.address 0x408A30
00030941: RSP := RSP - 8
.address 0x408A30
00030944: mem := mem with [RSP, el]:u64 <- 0x408A35
.address 0x408A30
00030947: call @sub_406940 with return %00030949

.address 0x408A35
00030949: 
.address 0x408A35
0003094f: goto %0003094b

.address 0x408556
0003094b: 
.address 0x408556
0003095b: #6745 := mem[0x620020]
.address 0x408556
0003095e: CF := mem[0x620020] < 0
.address 0x408556
00030961: OF := high:1[mem[0x620020] & (mem[0x620020] ^ #6745)]
.address 0x408556
00030964: AF := 0x10 = (0x10 & (#6745 ^ mem[0x620020]))
.address 0x408556
00030967: PF := ~low:1[let $1 = #6745 >> 4 ^ #6745 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408556
0003096a: SF := high:1[#6745]
.address 0x408556
0003096d: ZF := 0 = #6745
.address 0x40855D
00030977: when ~ZF goto %00030971
0004483d: goto %000309ce

.address 0x4089D0
00030971: 
.address 0x4089D0
00030987: #6747 := mem[RBP + 0xB8]
.address 0x4089D0
0003098a: CF := mem[RBP + 0xB8] < 0
.address 0x4089D0
0003098d: OF := high:1[mem[RBP + 0xB8] & (mem[RBP + 0xB8] ^ #6747)]
.address 0x4089D0
00030990: AF := 0x10 = (0x10 & (#6747 ^ mem[RBP + 0xB8]))
.address 0x4089D0
00030993: PF := ~low:1[let $1 = #6747 >> 4 ^ #6747 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4089D0
00030996: SF := high:1[#6747]
.address 0x4089D0
00030999: ZF := 0 = #6747
.address 0x4089D7
000309a0: RDX := pad:64[mem[0x62134C, el]:u32]
.address 0x4089DD
000309a7: RDI := 0x417C2E
.address 0x4089E4
000309ae: RSI := pad:64[mem[RBP + 0x38, el]:u32]
.address 0x4089E7
000309b8: when ZF goto %000309b2
0004483e: goto %0003c28b

.address 0x4089E9
0003c28b: 
.address 0x4089E9
0003c296: RDI := 0
.address 0x4089E9
0003c299: AF := unknown[bits]:u1
.address 0x4089E9
0003c29c: ZF := 1
.address 0x4089E9
0003c29f: PF := 1
.address 0x4089E9
0003c2a2: OF := 0
.address 0x4089E9
0003c2a5: CF := 0
.address 0x4089E9
0003c2a8: SF := 0
.address 0x4089EB
0003c2b5: #8308 := mem[0x62132D]
.address 0x4089EB
0003c2b8: CF := mem[0x62132D] < 0
.address 0x4089EB
0003c2bb: OF := high:1[mem[0x62132D] & (mem[0x62132D] ^ #8308)]
.address 0x4089EB
0003c2be: AF := 0x10 = (0x10 & (#8308 ^ mem[0x62132D]))
.address 0x4089EB
0003c2c1: PF := ~low:1[let $1 = #8308 >> 4 ^ #8308 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4089EB
0003c2c4: SF := high:1[#8308]
.address 0x4089EB
0003c2c7: ZF := 0 = #8308
.address 0x4089F2
0003c2d0: when ~ZF goto %000309b2
0004483f: goto %0003c2d6

.address 0x4089F4
0003c2d6: 
.address 0x4089F4
0003c2db: RDI := pad:64[low:32[RSI]]
.address 0x4089F6
0003c2e2: mem := mem with [RSP + 8, el]:u64 <- RSI
.address 0x4089FB
0003c2e9: mem := mem with [RSP + 4, el]:u32 <- low:32[RDX]
.address 0x4089FF
0003c2f2: RSP := RSP - 8
.address 0x4089FF
0003c2f5: mem := mem with [RSP, el]:u64 <- 0x408A04
.address 0x4089FF
0003c2f8: call @sub_40fab0 with return %0003c2fa

.address 0x408A04
0003c2fa: 
.address 0x408A04
0003c2ff: RSI := mem[RSP + 8, el]:u64
.address 0x408A09
0003c306: RDX := pad:64[mem[RSP + 4, el]:u32]
.address 0x408A0D
0003c30d: RDI := RAX
00044840: goto %000309b2

.address 0x408A10
000309b2: 
.address 0x408A10
000309c4: RSP := RSP - 8
.address 0x408A10
000309c7: mem := mem with [RSP, el]:u64 <- 0x408A15
.address 0x408A10
000309ca: call @sub_406880 with return %000309cc

.address 0x408A15
000309cc: 
.address 0x408A15
000309d2: goto %000309ce

.address 0x408563
000309ce: 
.address 0x408563
000309de: #6749 := mem[0x62132E]
.address 0x408563
000309e1: CF := mem[0x62132E] < 0
.address 0x408563
000309e4: OF := high:1[mem[0x62132E] & (mem[0x62132E] ^ #6749)]
.address 0x408563
000309e7: AF := 0x10 = (0x10 & (#6749 ^ mem[0x62132E]))
.address 0x408563
000309ea: PF := ~low:1[let $1 = #6749 >> 4 ^ #6749 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408563
000309ed: SF := high:1[#6749]
.address 0x408563
000309f0: ZF := 0 = #6749
.address 0x40856A
000309fa: when ~ZF goto %000309f4
00044841: goto %00030a25

.address 0x4089B0
000309f4: 
.address 0x4089B0
00030a04: RDX := pad:64[pad:32[mem[RBP + 0xB8]]]
.address 0x4089B7
00030a0b: RDI := pad:64[mem[RBP + 0x34, el]:u32]
.address 0x4089BA
00030a12: RSI := pad:64[mem[0x621348, el]:u32]
.address 0x4089C0
00030a1b: RSP := RSP - 8
.address 0x4089C0
00030a1e: mem := mem with [RSP, el]:u64 <- 0x4089C5
.address 0x4089C0
00030a21: call @sub_406940 with return %00030a23

.address 0x4089C5
00030a23: 
.address 0x4089C5
00030a29: goto %00030a25

.address 0x408570
00030a25: 
.address 0x408570
00030a35: #6751 := mem[0x621365]
.address 0x408570
00030a38: CF := mem[0x621365] < 0
.address 0x408570
00030a3b: OF := high:1[mem[0x621365] & (mem[0x621365] ^ #6751)]
.address 0x408570
00030a3e: AF := 0x10 = (0x10 & (#6751 ^ mem[0x621365]))
.address 0x408570
00030a41: PF := ~low:1[let $1 = #6751 >> 4 ^ #6751 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408570
00030a44: SF := high:1[#6751]
.address 0x408570
00030a47: ZF := 0 = #6751
.address 0x408577
00030a4e: RBX := R12
.address 0x40857A
00030a58: when ~ZF goto %00030a52
00044842: goto %00030a9b

.address 0x408990
00030a52: 
.address 0x408990
00030a62: RDI := mem[RBP + 0xB0, el]:u64
.address 0x408997
00030a69: RDX := pad:64[mem[0x621354, el]:u32]
.address 0x40899D
00030a76: RSI := 0
.address 0x40899D
00030a79: AF := unknown[bits]:u1
.address 0x40899D
00030a7c: ZF := 1
.address 0x40899D
00030a7f: PF := 1
.address 0x40899D
00030a82: OF := 0
.address 0x40899D
00030a85: CF := 0
.address 0x40899D
00030a88: SF := 0
.address 0x40899F
00030a91: RSP := RSP - 8
.address 0x40899F
00030a94: mem := mem with [RSP, el]:u64 <- 0x4089A4
.address 0x40899F
00030a97: call @sub_406880 with return %00030a99

.address 0x4089A4
00030a99: 
.address 0x4089A4
00030a9f: goto %00030a9b

.address 0x408580
00030a9b: 
.address 0x408580
00030aab: #6753 := mem[RBP + 0xB8]
.address 0x408580
00030aae: CF := mem[RBP + 0xB8] < 0
.address 0x408580
00030ab1: OF := high:1[mem[RBP + 0xB8] & (mem[RBP + 0xB8] ^ #6753)]
.address 0x408580
00030ab4: AF := 0x10 = (0x10 & (#6753 ^ mem[RBP + 0xB8]))
.address 0x408580
00030ab7: PF := ~low:1[let $1 = #6753 >> 4 ^ #6753 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408580
00030aba: SF := high:1[#6753]
.address 0x408580
00030abd: ZF := 0 = #6753
.address 0x408587
00030ac7: when ZF goto %00030ac1
00044843: goto %0003c1f7

.address 0x4087E0
00030ac1: 
.address 0x4087E0
00030ad1: R14 := 0x417C2E
.address 0x4087E7
00030ad9: goto %00030ad5

.address 0x40858D
0003c1f7: 
.address 0x40858D
0003c1fc: RAX := pad:64[mem[RBP + 0x30, el]:u32]
.address 0x408590
0003c209: RAX := pad:64[low:32[RAX] & 0xB000]
.address 0x408590
0003c20c: OF := 0
.address 0x408590
0003c20f: CF := 0
.address 0x408590
0003c212: AF := unknown[bits]:u1
.address 0x408590
0003c215: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408590
0003c218: SF := high:1[low:32[RAX]]
.address 0x408590
0003c21b: ZF := 0 = low:32[RAX]
.address 0x408595
0003c228: #8306 := low:32[RAX] - 0x2000
.address 0x408595
0003c22b: CF := low:32[RAX] < 0x2000
.address 0x408595
0003c22e: OF := high:1[(low:32[RAX] ^ 0x2000) & (low:32[RAX] ^ #8306)]
.address 0x408595
0003c231: AF := 0x10 = (0x10 & (#8306 ^ low:32[RAX] ^ 0x2000))
.address 0x408595
0003c234: PF := ~low:1[let $1 = #8306 >> 4 ^ #8306 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408595
0003c237: SF := high:1[#8306]
.address 0x408595
0003c23a: ZF := 0 = #8306
.address 0x40859A
0003c243: when ZF goto %00031238
00044844: goto %0003c249

.address 0x408B00
00031238: 
.address 0x408B00
0003123d: RDX := pad:64[mem[0x621344, el]:u32]
.address 0x408B06
00031244: RAX := pad:64[mem[0x621340, el]:u32]
.address 0x408B0C
0003124b: RSI := low:64[RSP + 0xE0]
.address 0x408B14
00031252: R13 := pad:64[mem[0x62133C, el]:u32]
.address 0x408B1B
00031259: RAX := pad:64[low:32[RDX + RAX + 2]]
.address 0x408B1F
00031268: #6809 := low:32[R13]
.address 0x408B1F
0003126b: #6810 := low:32[RAX]
.address 0x408B1F
0003126e: R13 := pad:64[low:32[R13] - low:32[RAX]]
.address 0x408B1F
00031271: CF := #6809 < #6810
.address 0x408B1F
00031274: OF := high:1[(#6809 ^ #6810) & (#6809 ^ low:32[R13])]
.address 0x408B1F
00031277: AF := 0x10 = (0x10 & (low:32[R13] ^ #6809 ^ #6810))
.address 0x408B1F
0003127a: PF := ~low:1[let $1 = low:32[R13] >> 4 ^ low:32[R13] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408B1F
0003127d: SF := high:1[low:32[R13]]
.address 0x408B1F
00031280: ZF := 0 = low:32[R13]
.address 0x408B22
00031287: RAX := mem[RBP + 0x40, el]:u64
.address 0x408B26
0003128e: RDX := pad:64[pad:32[low:8[RAX]]]
.address 0x408B29
0003129c: #6812 := RAX
.address 0x408B29
0003129f: RAX := RAX >> 0xC
.address 0x408B29
000312a2: CF := high:1[#6812 << 0x34]
.address 0x408B29
000312a5: SF := high:1[RAX]
.address 0x408B29
000312a8: ZF := 0 = RAX
.address 0x408B29
000312ab: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408B29
000312ae: AF := unknown[bits]:u1
.address 0x408B29
000312b1: OF := unknown[bits]:u1
.address 0x408B2D
000312b8: RDI := RAX
.address 0x408B30
000312c5: RDI := extract:63:8[RDI].0
.address 0x408B30
000312c8: AF := unknown[bits]:u1
.address 0x408B30
000312cb: ZF := 1
.address 0x408B30
000312ce: PF := 1
.address 0x408B30
000312d1: OF := 0
.address 0x408B30
000312d4: CF := 0
.address 0x408B30
000312d7: SF := 0
.address 0x408B33
000312e4: RDI := pad:64[low:32[RDI] | low:32[RDX]]
.address 0x408B33
000312e7: OF := 0
.address 0x408B33
000312ea: CF := 0
.address 0x408B33
000312ed: AF := unknown[bits]:u1
.address 0x408B33
000312f0: PF := ~low:1[let $1 = low:32[RDI] >> 4 ^ low:32[RDI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408B33
000312f3: SF := high:1[low:32[RDI]]
.address 0x408B33
000312f6: ZF := 0 = low:32[RDI]
.address 0x408B35
000312ff: RSP := RSP - 8
.address 0x408B35
00031302: mem := mem with [RSP, el]:u64 <- 0x408B3A
.address 0x408B35
00031305: call @sub_40fcf0 with return %00031307

.address 0x408B3A
00031307: 
.address 0x408B3A
0003130c: R15 := RAX
.address 0x408B3D
00031313: RAX := mem[RBP + 0x40, el]:u64
.address 0x408B41
0003131a: RSI := low:64[RSP + 0xC0]
.address 0x408B49
00031321: R14 := pad:64[mem[0x621340, el]:u32]
.address 0x408B50
00031328: RDI := RAX
.address 0x408B53
00031336: #6815 := RAX
.address 0x408B53
00031339: RAX := RAX >> 0x20
.address 0x408B53
0003133c: CF := high:1[#6815 << 0x20]
.address 0x408B53
0003133f: SF := high:1[RAX]
.address 0x408B53
00031342: ZF := 0 = RAX
.address 0x408B53
00031345: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408B53
00031348: AF := unknown[bits]:u1
.address 0x408B53
0003134b: OF := unknown[bits]:u1
.address 0x408B57
00031359: #6817 := RDI
.address 0x408B57
0003135c: RDI := RDI >> 8
.address 0x408B57
0003135f: CF := high:1[#6817 << 0x38]
.address 0x408B57
00031362: SF := high:1[RDI]
.address 0x408B57
00031365: ZF := 0 = RDI
.address 0x408B57
00031368: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408B57
0003136b: AF := unknown[bits]:u1
.address 0x408B57
0003136e: OF := unknown[bits]:u1
.address 0x408B5B
00031375: RDX := pad:64[low:32[RDI]]
.address 0x408B5D
0003137c: RDI := RAX
.address 0x408B60
00031389: RDX := pad:64[low:32[RDX] & 0xFFF]
.address 0x408B60
0003138c: OF := 0
.address 0x408B60
0003138f: CF := 0
.address 0x408B60
00031392: AF := unknown[bits]:u1
.address 0x408B60
00031395: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408B60
00031398: SF := high:1[low:32[RDX]]
.address 0x408B60
0003139b: ZF := 0 = low:32[RDX]
.address 0x408B66
000313a8: RDI := pad:64[low:32[RDI] & 0xFFFFF000]
.address 0x408B66
000313ab: OF := 0
.address 0x408B66
000313ae: CF := 0
.address 0x408B66
000313b1: AF := unknown[bits]:u1
.address 0x408B66
000313b4: PF := ~low:1[let $1 = low:32[RDI] >> 4 ^ low:32[RDI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408B66
000313b7: SF := high:1[low:32[RDI]]
.address 0x408B66
000313ba: ZF := 0 = low:32[RDI]
.address 0x408B6C
000313c7: RDI := pad:64[low:32[RDI] | low:32[RDX]]
.address 0x408B6C
000313ca: OF := 0
.address 0x408B6C
000313cd: CF := 0
.address 0x408B6C
000313d0: AF := unknown[bits]:u1
.address 0x408B6C
000313d3: PF := ~low:1[let $1 = low:32[RDI] >> 4 ^ low:32[RDI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408B6C
000313d6: SF := high:1[low:32[RDI]]
.address 0x408B6C
000313d9: ZF := 0 = low:32[RDI]
.address 0x408B6E
000313e2: RSP := RSP - 8
.address 0x408B6E
000313e5: mem := mem with [RSP, el]:u64 <- 0x408B73
.address 0x408B6E
000313e8: call @sub_40fcf0 with return %000313ea

.address 0x408B73
000313ea: 
.address 0x408B73
000313f5: #6822 := low:32[R13]
.address 0x408B73
000313f8: OF := 0
.address 0x408B73
000313fb: CF := 0
.address 0x408B73
000313fe: AF := unknown[bits]:u1
.address 0x408B73
00031401: PF := ~low:1[let $1 = #6822 >> 4 ^ #6822 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408B73
00031404: SF := high:1[#6822]
.address 0x408B73
00031407: ZF := 0 = #6822
.address 0x408B76
0003140e: R8 := 0
.address 0x408B7C
00031417: #6824 := R15
.address 0x408B7C
0003141a: RSP := RSP - 8
.address 0x408B7C
0003141d: mem := mem with [RSP, el]:u64 <- #6824
.address 0x408B7E
00031424: R8 := pad:64[if ~SF then low:32[R13] else low:32[R8]]
.address 0x408B82
00031433: #6825 := low:32[R8]
.address 0x408B82
00031436: #6826 := mem[0x621344, el]:u32
.address 0x408B82
00031439: R8 := pad:64[low:32[R8] + #6826]
.address 0x408B82
0003143c: CF := low:32[R8] < #6825
.address 0x408B82
0003143f: OF := high:1[#6825] = high:1[#6826] & (high:1[#6825] | high:1[low:32[R8]]) & ~(
high:1[#6825] & high:1[low:32[R8]])
.address 0x408B82
00031442: AF := 0x10 = (0x10 & (low:32[R8] ^ #6825 ^ #6826))
.address 0x408B82
00031445: PF := ~low:1[let $1 = low:32[R8] >> 4 ^ low:32[R8] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408B82
00031448: SF := high:1[low:32[R8]]
.address 0x408B82
0003144b: ZF := 0 = low:32[R8]
.address 0x408B89
00031454: #6828 := R14
.address 0x408B89
00031457: RSP := RSP - 8
.address 0x408B89
0003145a: mem := mem with [RSP, el]:u64 <- #6828
.address 0x408B8B
00031461: RCX := 0x417C56
.address 0x408B92
00031468: R9 := RAX
.address 0x408B95
0003146f: RSI := 1
.address 0x408B9A
00031476: RDI := RBX
.address 0x408B9D
0003147d: RDX := 0xFFFFFFFFFFFFFFFF
.address 0x408BA4
0003148a: RAX := 0
.address 0x408BA4
0003148d: AF := unknown[bits]:u1
.address 0x408BA4
00031490: ZF := 1
.address 0x408BA4
00031493: PF := 1
.address 0x408BA4
00031496: OF := 0
.address 0x408BA4
00031499: CF := 0
.address 0x408BA4
0003149c: SF := 0
.address 0x408BA6
000314a5: RSP := RSP - 8
.address 0x408BA6
000314a8: mem := mem with [RSP, el]:u64 <- 0x408BAB
.address 0x408BA6
000314ab: call @sub_403e60 with return %000314ad

.address 0x408BAB
000314ad: 
.address 0x408BAB
000314b2: RAX := extend:64[mem[0x62133C, el]:u32]
.address 0x408BB2
000314ba: RSI := mem[RSP, el]:u64
.address 0x408BB2
000314bd: RSP := RSP + 8
.address 0x408BB3
000314c5: RDI := mem[RSP, el]:u64
.address 0x408BB3
000314c8: RSP := RSP + 8
.address 0x408BB4
000314cf: R13 := low:64[RBX + RAX + 1]
.address 0x408BB9
000314d7: goto %000314d3

.address 0x4085A0
0003c249: 
.address 0x4085A0
0003c24e: RDI := mem[RBP + 0x48, el]:u64
.address 0x4085A4
0003c255: R8 := mem[0x620018, el]:u64
.address 0x4085AB
0003c25c: RSI := low:64[RSP + 0xE0]
.address 0x4085B3
0003c263: RDX := pad:64[mem[0x62131C, el]:u32]
.address 0x4085B9
0003c26a: RCX := 1
.address 0x4085BE
0003c273: RSP := RSP - 8
.address 0x4085BE
0003c276: mem := mem with [RSP, el]:u64 <- 0x4085C3
.address 0x4085BE
0003c279: call @sub_40ed10 with return %0003c27b

.address 0x4085C3
0003c27b: 
.address 0x4085C3
0003c280: R14 := RAX
00044845: goto %00030ad5

.address 0x4085C6
00030ad5: 
.address 0x4085C6
00030adf: R13 := pad:64[mem[0x62133C, el]:u32]
.address 0x4085CD
00030aec: RSI := 0
.address 0x4085CD
00030aef: AF := unknown[bits]:u1
.address 0x4085CD
00030af2: ZF := 1
.address 0x4085CD
00030af5: PF := 1
.address 0x4085CD
00030af8: OF := 0
.address 0x4085CD
00030afb: CF := 0
.address 0x4085CD
00030afe: SF := 0
.address 0x4085CF
00030b05: RDI := R14
.address 0x4085D2
00030b0e: RSP := RSP - 8
.address 0x4085D2
00030b11: mem := mem with [RSP, el]:u64 <- 0x4085D7
.address 0x4085D2
00030b14: call @sub_410370 with return %00030b16

.address 0x4085D7
00030b16: 
.address 0x4085D7
00030b23: #6755 := low:32[R13]
.address 0x4085D7
00030b26: #6756 := low:32[RAX]
.address 0x4085D7
00030b29: R13 := pad:64[low:32[R13] - low:32[RAX]]
.address 0x4085D7
00030b2c: CF := #6755 < #6756
.address 0x4085D7
00030b2f: OF := high:1[(#6755 ^ #6756) & (#6755 ^ low:32[R13])]
.address 0x4085D7
00030b32: AF := 0x10 = (0x10 & (low:32[R13] ^ #6755 ^ #6756))
.address 0x4085D7
00030b35: PF := ~low:1[let $1 = low:32[R13] >> 4 ^ low:32[R13] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4085D7
00030b38: SF := high:1[low:32[R13]]
.address 0x4085D7
00030b3b: ZF := 0 = low:32[R13]
.address 0x4085DA
00030b48: #6758 := low:32[R13]
.address 0x4085DA
00030b4b: OF := 0
.address 0x4085DA
00030b4e: CF := 0
.address 0x4085DA
00030b51: AF := unknown[bits]:u1
.address 0x4085DA
00030b54: PF := ~low:1[let $1 = #6758 >> 4 ^ #6758 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4085DA
00030b57: SF := high:1[#6758]
.address 0x4085DA
00030b5a: ZF := 0 = #6758
.address 0x4085DD
00030b61: RAX := pad:64[low:32[R13]]
.address 0x4085E0
00030b6b: when ZF | (SF | OF) & ~(SF & OF) goto %00030b65
00044846: goto %0003c158

.address 0x4085E2
0003c158: 
.address 0x4085E2
0003c164: #8297 := low:32[RAX]
.address 0x4085E2
0003c167: RAX := pad:64[low:32[RAX] - 1]
.address 0x4085E2
0003c16a: CF := #8297 < 1
.address 0x4085E2
0003c16d: OF := high:1[(#8297 ^ 1) & (#8297 ^ low:32[RAX])]
.address 0x4085E2
0003c170: AF := 0x10 = (0x10 & (low:32[RAX] ^ #8297 ^ 1))
.address 0x4085E2
0003c173: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4085E2
0003c176: SF := high:1[low:32[RAX]]
.address 0x4085E2
0003c179: ZF := 0 = low:32[RAX]
.address 0x4085E5
0003c180: RDX := RAX
.address 0x4085E8
0003c187: RCX := low:64[RBX + RAX + 1]
.address 0x4085ED
0003c18e: RAX := RBX
00044847: goto %0003c190

.address 0x4085F0
0003c190: 
.address 0x4085F0
0003c19c: #8300 := RAX
.address 0x4085F0
0003c19f: RAX := RAX + 1
.address 0x4085F0
0003c1a2: CF := RAX < #8300
.address 0x4085F0
0003c1a5: OF := ~high:1[#8300] & (high:1[#8300] | high:1[RAX]) & ~(high:1[#8300] & high:1[RAX])
.address 0x4085F0
0003c1a8: AF := 0x10 = (0x10 & (RAX ^ #8300 ^ 1))
.address 0x4085F0
0003c1ab: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4085F0
0003c1ae: SF := high:1[RAX]
.address 0x4085F0
0003c1b1: ZF := 0 = RAX
.address 0x4085F4
0003c1b8: mem := mem with [RAX - 1] <- 0x20
.address 0x4085F8
0003c1c5: #8303 := RAX - RCX
.address 0x4085F8
0003c1c8: CF := RAX < RCX
.address 0x4085F8
0003c1cb: OF := high:1[(RAX ^ RCX) & (RAX ^ #8303)]
.address 0x4085F8
0003c1ce: AF := 0x10 = (0x10 & (#8303 ^ RAX ^ RCX))
.address 0x4085F8
0003c1d1: PF := ~low:1[let $1 = #8303 >> 4 ^ #8303 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4085F8
0003c1d4: SF := high:1[#8303]
.address 0x4085F8
0003c1d7: ZF := 0 = #8303
.address 0x4085FB
0003c1e0: when ~ZF goto %0003c190
00044848: goto %0003c1e6

.address 0x4085FD
0003c1e6: 
.address 0x4085FD
0003c1eb: RAX := extend:64[low:32[RDX]]
.address 0x408600
0003c1f2: RBX := low:64[RBX + RAX + 1]
00044849: goto %00030b65

.address 0x408605
00030b65: 
.address 0x408605
00030b7c: #6760 := R14
.address 0x408605
00030b7f: R14 := R14 + 1
.address 0x408605
00030b82: CF := R14 < #6760
.address 0x408605
00030b85: OF := ~high:1[#6760] & (high:1[#6760] | high:1[R14]) & ~(high:1[#6760] & high:1[R14])
.address 0x408605
00030b88: AF := 0x10 = (0x10 & (R14 ^ #6760 ^ 1))
.address 0x408605
00030b8b: PF := ~low:1[let $1 = R14 >> 4 ^ R14 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408605
00030b8e: SF := high:1[R14]
.address 0x408605
00030b91: ZF := 0 = R14
.address 0x408609
00030b98: RAX := pad:64[pad:32[mem[R14 - 1]]]
.address 0x40860E
00030b9f: R13 := low:64[RBX + 1]
.address 0x408612
00030bac: #6763 := low:8[RAX]
.address 0x408612
00030baf: OF := 0
.address 0x408612
00030bb2: CF := 0
.address 0x408612
00030bb5: AF := unknown[bits]:u1
.address 0x408612
00030bb8: PF := ~low:1[let $1 = #6763 >> 4 ^ #6763 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408612
00030bbb: SF := high:1[#6763]
.address 0x408612
00030bbe: ZF := 0 = #6763
.address 0x408614
00030bc5: mem := mem with [R13 - 1] <- low:8[RAX]
.address 0x408618
00030bcf: when ~ZF goto %00030bc9
0004484a: goto %0003c151

.address 0x4087F0
00030bc9: 
.address 0x4087F0
00030bd9: RBX := R13
.address 0x4087F3
00030be0: goto %00030b65

.address 0x40861E
0003c151: 
.address 0x40861E
0003c156: mem := mem with [RBX] <- 0x20
0004484b: goto %000314d3

.address 0x408621
000314d3: 
.address 0x408621
000314dd: mem := mem with [R13] <- 1
.address 0x408626
000314ea: #6829 := mem[RBP + 0xB8]
.address 0x408626
000314ed: CF := mem[RBP + 0xB8] < 0
.address 0x408626
000314f0: OF := high:1[mem[RBP + 0xB8] & (mem[RBP + 0xB8] ^ #6829)]
.address 0x408626
000314f3: AF := 0x10 = (0x10 & (#6829 ^ mem[RBP + 0xB8]))
.address 0x408626
000314f6: PF := ~low:1[let $1 = #6829 >> 4 ^ #6829 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408626
000314f9: SF := high:1[#6829]
.address 0x408626
000314fc: ZF := 0 = #6829
.address 0x40862D
00031503: RBX := 0x417C2E
.address 0x408634
0003150d: when ~ZF goto %00031507
0004484c: goto %00030c7b

.address 0x408870
00031507: 
.address 0x408870
00031517: RBX := low:64[RSP + 0x30]
.address 0x408875
0003151e: RDI := mem[0x6212A8, el]:u64
.address 0x40887C
00031525: RSI := low:64[RSP + 0x20]
.address 0x408881
0003152c: RDX := RBX
.address 0x408884
00031535: RSP := RSP - 8
.address 0x408884
00031538: mem := mem with [RSP, el]:u64 <- 0x408889
.address 0x408884
0003153b: call @sub_415a40 with return %0003153d

.address 0x408889
0003153d: 
.address 0x408889
00031548: #6831 := RAX
.address 0x408889
0003154b: OF := 0
.address 0x408889
0003154e: CF := 0
.address 0x408889
00031551: AF := unknown[bits]:u1
.address 0x408889
00031554: PF := ~low:1[let $1 = #6831 >> 4 ^ #6831 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408889
00031557: SF := high:1[#6831]
.address 0x408889
0003155a: ZF := 0 = #6831
.address 0x40888C
00031563: when ZF goto %00030fe4
0004484d: goto %00031569

.address 0x408892
00031569: 
.address 0x408892
0003156e: RCX := mem[0x621370, el]:u64
.address 0x408899
00031575: RDX := mem[RSP + 0x20, el]:u64
.address 0x40889E
00031582: #6833 := RCX - RDX
.address 0x40889E
00031585: CF := RCX < RDX
.address 0x40889E
00031588: OF := high:1[(RCX ^ RDX) & (RCX ^ #6833)]
.address 0x40889E
0003158b: AF := 0x10 = (0x10 & (#6833 ^ RCX ^ RDX))
.address 0x40889E
0003158e: PF := ~low:1[let $1 = #6833 >> 4 ^ #6833 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40889E
00031591: SF := high:1[#6833]
.address 0x40889E
00031594: ZF := 0 = #6833
.address 0x4088A1
0003159d: when (SF | OF) & ~(SF & OF) goto %000310a8
0004484e: goto %000315a3

.address 0x4088A7
000315a3: 
.address 0x4088A7
000315a8: RSI := mem[0x621378, el]:u64
.address 0x4088AE
000315af: R9 := mem[RSP + 0x28, el]:u64
.address 0x4088B3
000315b8: when ~(ZF | (SF | OF) & ~(SF & OF)) goto %00030f1d
0004484f: goto %000315be

.address 0x408C80
00030f1d: 
.address 0x408C80
00030f22: RDI := low:64[RCX - 0xF0C2AC]
.address 0x408C87
00030f29: RAX := 1
.address 0x408C8C
00030f36: #6786 := RDI - RDX
.address 0x408C8C
00030f39: CF := RDI < RDX
.address 0x408C8C
00030f3c: OF := high:1[(RDI ^ RDX) & (RDI ^ #6786)]
.address 0x408C8C
00030f3f: AF := 0x10 = (0x10 & (#6786 ^ RDI ^ RDX))
.address 0x408C8C
00030f42: PF := ~low:1[let $1 = #6786 >> 4 ^ #6786 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408C8C
00030f45: SF := high:1[#6786]
.address 0x408C8C
00030f48: ZF := 0 = #6786
.address 0x408C8F
00030f52: when (SF | OF) & ~(SF & OF) goto %00030f4c
00044850: goto %00031102

.address 0x4088B9
000315be: 
.address 0x4088B9
000315c9: #6835 := low:32[RSI] - low:32[R9]
.address 0x4088B9
000315cc: CF := low:32[RSI] < low:32[R9]
.address 0x4088B9
000315cf: OF := high:1[(low:32[RSI] ^ low:32[R9]) & (low:32[RSI] ^ #6835)]
.address 0x4088B9
000315d2: AF := 0x10 = (0x10 & (#6835 ^ low:32[RSI] ^ low:32[R9]))
.address 0x4088B9
000315d5: PF := ~low:1[let $1 = #6835 >> 4 ^ #6835 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4088B9
000315d8: SF := high:1[#6835]
.address 0x4088B9
000315db: ZF := 0 = #6835
.address 0x4088BC
000315e2: R8 := pad:64[low:32[RSI]]
.address 0x4088BF
000315e9: RDI := pad:64[low:32[R9]]
.address 0x4088C2
000315f2: when SF goto %000310a8
00044851: goto %000315f8

.address 0x408AA0
000310a8: 
.address 0x408AA0
000310ad: RDI := 0x621370
.address 0x408AA7
000310b6: RSP := RSP - 8
.address 0x408AA7
000310b9: mem := mem with [RSP, el]:u64 <- 0x408AAC
.address 0x408AA7
000310bc: call @sub_40d7d0 with return %000310be

.address 0x408AAC
000310be: 
.address 0x408AAC
000310c3: RCX := mem[0x621370, el]:u64
.address 0x408AB3
000310ca: RDX := mem[RSP + 0x20, el]:u64
.address 0x408AB8
000310d1: RSI := mem[0x621378, el]:u64
.address 0x408ABF
000310d8: R9 := mem[RSP + 0x28, el]:u64
.address 0x408AC4
000310df: RDI := low:64[RCX - 0xF0C2AC]
.address 0x408ACB
000310ec: #6796 := RDI - RDX
.address 0x408ACB
000310ef: CF := RDI < RDX
.address 0x408ACB
000310f2: OF := high:1[(RDI ^ RDX) & (RDI ^ #6796)]
.address 0x408ACB
000310f5: AF := 0x10 = (0x10 & (#6796 ^ RDI ^ RDX))
.address 0x408ACB
000310f8: PF := ~low:1[let $1 = #6796 >> 4 ^ #6796 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408ACB
000310fb: SF := high:1[#6796]
.address 0x408ACB
000310fe: ZF := 0 = #6796
.address 0x408ACE
00031108: when ~((SF | OF) & ~(SF & OF)) goto %00031102
00044852: goto %00031186

.address 0x408C95
00031102: 
.address 0x408C95
00031118: RAX := 0
.address 0x408C95
0003111b: AF := unknown[bits]:u1
.address 0x408C95
0003111e: ZF := 1
.address 0x408C95
00031121: PF := 1
.address 0x408C95
00031124: OF := 0
.address 0x408C95
00031127: CF := 0
.address 0x408C95
0003112a: SF := 0
.address 0x408C97
00031137: #6798 := RDX - RDI
.address 0x408C97
0003113a: CF := RDX < RDI
.address 0x408C97
0003113d: OF := high:1[(RDX ^ RDI) & (RDX ^ #6798)]
.address 0x408C97
00031140: AF := 0x10 = (0x10 & (#6798 ^ RDX ^ RDI))
.address 0x408C97
00031143: PF := ~low:1[let $1 = #6798 >> 4 ^ #6798 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408C97
00031146: SF := high:1[#6798]
.address 0x408C97
00031149: ZF := 0 = #6798
.address 0x408C9A
00031152: when (SF | OF) & ~(SF & OF) goto %00030f4c
00044853: goto %00031158

.address 0x408CA0
00031158: 
.address 0x408CA0
00031163: #6800 := low:32[RSI] - low:32[R9]
.address 0x408CA0
00031166: CF := low:32[RSI] < low:32[R9]
.address 0x408CA0
00031169: OF := high:1[(low:32[RSI] ^ low:32[R9]) & (low:32[RSI] ^ #6800)]
.address 0x408CA0
0003116c: AF := 0x10 = (0x10 & (#6800 ^ low:32[RSI] ^ low:32[R9]))
.address 0x408CA0
0003116f: PF := ~low:1[let $1 = #6800 >> 4 ^ #6800 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408CA0
00031172: SF := high:1[#6800]
.address 0x408CA0
00031175: ZF := 0 = #6800
.address 0x408CA3
0003117e: when ~SF goto %00030f4c
00044854: goto %00031184

.address 0x408CA9
00031184: 
.address 0x408CA9
0003118a: goto %00031186

.address 0x408AD4
00031186: 
.address 0x408AD4
00031196: #6802 := RCX - RDX
.address 0x408AD4
00031199: CF := RCX < RDX
.address 0x408AD4
0003119c: OF := high:1[(RCX ^ RDX) & (RCX ^ #6802)]
.address 0x408AD4
0003119f: AF := 0x10 = (0x10 & (#6802 ^ RCX ^ RDX))
.address 0x408AD4
000311a2: PF := ~low:1[let $1 = #6802 >> 4 ^ #6802 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408AD4
000311a5: SF := high:1[#6802]
.address 0x408AD4
000311a8: ZF := 0 = #6802
.address 0x408AD7
000311af: RAX := 1
.address 0x408ADC
000311b8: when ~(ZF | (SF | OF) & ~(SF & OF)) goto %00030f4c
00044855: goto %000311be

.address 0x408AE2
000311be: 
.address 0x408AE2
000311c3: RAX := 0
.address 0x408AE7
000311cc: when (SF | OF) & ~(SF & OF) goto %00030f4c
00044856: goto %000311d2

.address 0x408AED
000311d2: 
.address 0x408AED
000311d7: RDI := pad:64[low:32[R9]]
.address 0x408AF0
000311de: R8 := pad:64[low:32[RSI]]
00044857: goto %000311e0

.address 0x4088C8
000315f8: 
.address 0x4088C8
00031604: #6837 := RCX
.address 0x4088C8
00031607: RCX := RCX - 0xF0C2AC
.address 0x4088C8
0003160a: CF := #6837 < 0xF0C2AC
.address 0x4088C8
0003160d: OF := high:1[(#6837 ^ 0xF0C2AC) & (#6837 ^ RCX)]
.address 0x4088C8
00031610: AF := 0x10 = (0x10 & (RCX ^ #6837 ^ 0xF0C2AC))
.address 0x4088C8
00031613: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4088C8
00031616: SF := high:1[RCX]
.address 0x4088C8
00031619: ZF := 0 = RCX
.address 0x4088CF
00031626: RAX := 0
.address 0x4088CF
00031629: AF := unknown[bits]:u1
.address 0x4088CF
0003162c: ZF := 1
.address 0x4088CF
0003162f: PF := 1
.address 0x4088CF
00031632: OF := 0
.address 0x4088CF
00031635: CF := 0
.address 0x4088CF
00031638: SF := 0
.address 0x4088D1
00031645: #6840 := RCX - RDX
.address 0x4088D1
00031648: CF := RCX < RDX
.address 0x4088D1
0003164b: OF := high:1[(RCX ^ RDX) & (RCX ^ #6840)]
.address 0x4088D1
0003164e: AF := 0x10 = (0x10 & (#6840 ^ RCX ^ RDX))
.address 0x4088D1
00031651: PF := ~low:1[let $1 = #6840 >> 4 ^ #6840 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4088D1
00031654: SF := high:1[#6840]
.address 0x4088D1
00031657: ZF := 0 = #6840
.address 0x4088D4
00031660: when (SF | OF) & ~(SF & OF) goto %000311e0
00044858: goto %00031666

.address 0x408AF3
000311e0: 
.address 0x408AF3
000311e5: RAX := pad:64[low:32[RDI]]
.address 0x408AF5
000311f4: #6804 := low:32[RAX]
.address 0x408AF5
000311f7: #6805 := low:32[R8]
.address 0x408AF5
000311fa: RAX := pad:64[low:32[RAX] - low:32[R8]]
.address 0x408AF5
000311fd: CF := #6804 < #6805
.address 0x408AF5
00031200: OF := high:1[(#6804 ^ #6805) & (#6804 ^ low:32[RAX])]
.address 0x408AF5
00031203: AF := 0x10 = (0x10 & (low:32[RAX] ^ #6804 ^ #6805))
.address 0x408AF5
00031206: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408AF5
00031209: SF := high:1[low:32[RAX]]
.address 0x408AF5
0003120c: ZF := 0 = low:32[RAX]
.address 0x408AF8
0003121a: #6807 := low:32[RAX]
.address 0x408AF8
0003121d: RAX := pad:64[low:32[RAX] >> 0x1F]
.address 0x408AF8
00031220: CF := high:1[#6807 << 1]
.address 0x408AF8
00031223: SF := high:1[low:32[RAX]]
.address 0x408AF8
00031226: ZF := 0 = low:32[RAX]
.address 0x408AF8
00031229: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408AF8
0003122c: AF := unknown[bits]:u1
.address 0x408AF8
0003122f: OF := unknown[bits]:u1
.address 0x408AFB
00031236: goto %00030f4c

.address 0x4088DA
00031666: 
00044859: goto %00030f4c

.address 0x4088E0
00030f4c: 
.address 0x4088E0
00030f62: #6788 := mem[0x6203C8]
.address 0x4088E0
00030f65: CF := mem[0x6203C8] < 0
.address 0x4088E0
00030f68: OF := high:1[mem[0x6203C8] & (mem[0x6203C8] ^ #6788)]
.address 0x4088E0
00030f6b: AF := 0x10 = (0x10 & (#6788 ^ mem[0x6203C8]))
.address 0x4088E0
00030f6e: PF := ~low:1[let $1 = #6788 >> 4 ^ #6788 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4088E0
00030f71: SF := high:1[#6788]
.address 0x4088E0
00030f74: ZF := 0 = #6788
.address 0x4088E7
00030f7b: R8 := mem[0x6212A8, el]:u64
.address 0x4088EE
00030f85: when ZF goto %00030f7f
0004485a: goto %000319cd

.address 0x408BF0
00030f7f: 
.address 0x408BF0
00030f8f: RDX := 0x620040
.address 0x408BF7
00030f96: RDX := mem[RDX + (RAX << 3), el]:u64
.address 0x408BFB
00030f9e: goto %00030f9a

.address 0x4088F4
000319cd: 
.address 0x4088F4
000319d2: RDX := low:64[RAX + RAX]
.address 0x4088F8
000319e1: #6870 := RAX
.address 0x4088F8
000319e4: #6871 := RDX
.address 0x4088F8
000319e7: RAX := RAX + #6871
.address 0x4088F8
000319ea: CF := RAX < #6870
.address 0x4088F8
000319ed: OF := high:1[#6870] = high:1[#6871] & (high:1[#6870] | high:1[RAX]) & ~(
high:1[#6870] & high:1[RAX])
.address 0x4088F8
000319f0: AF := 0x10 = (0x10 & (RAX ^ #6870 ^ #6871))
.address 0x4088F8
000319f3: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4088F8
000319f6: SF := high:1[RAX]
.address 0x4088F8
000319f9: ZF := 0 = RAX
.address 0x4088FB
00031a00: RDX := extend:64[mem[RSP + 0x40, el]:u32]
.address 0x408900
00031a07: RDX := low:64[RDX + (RAX << 2)]
.address 0x408904
00031a0e: RAX := 0x6203E0
.address 0x40890B
00031a1c: #6873 := RDX
.address 0x40890B
00031a1f: RDX := RDX << 7
.address 0x40890B
00031a22: CF := low:1[#6873 >> 0x39]
.address 0x40890B
00031a25: SF := high:1[RDX]
.address 0x40890B
00031a28: ZF := 0 = RDX
.address 0x40890B
00031a2b: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40890B
00031a2e: AF := unknown[bits]:u1
.address 0x40890B
00031a31: OF := unknown[bits]:u1
.address 0x40890F
00031a40: #6875 := RDX
.address 0x40890F
00031a43: #6876 := RAX
.address 0x40890F
00031a46: RDX := RDX + #6876
.address 0x40890F
00031a49: CF := RDX < #6875
.address 0x40890F
00031a4c: OF := high:1[#6875] = high:1[#6876] & (high:1[#6875] | high:1[RDX]) & ~(
high:1[#6875] & high:1[RDX])
.address 0x40890F
00031a4f: AF := 0x10 = (0x10 & (RDX ^ #6875 ^ #6876))
.address 0x40890F
00031a52: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40890F
00031a55: SF := high:1[RDX]
.address 0x40890F
00031a58: ZF := 0 = RDX
0004485b: goto %00030f9a

.address 0x408912
00030f9a: 
.address 0x408912
00030fa4: RCX := RBX
.address 0x408915
00030fab: RSI := 0x3E9
.address 0x40891A
00030fb2: RDI := R13
.address 0x40891D
00030fbb: RSP := RSP - 8
.address 0x40891D
00030fbe: mem := mem with [RSP, el]:u64 <- 0x408922
.address 0x40891D
00030fc1: call @sub_411f80 with return %00030fc3

.address 0x408922
00030fc3: 
.address 0x408922
00030fce: #6790 := RAX
.address 0x408922
00030fd1: OF := 0
.address 0x408922
00030fd4: CF := 0
.address 0x408922
00030fd7: AF := unknown[bits]:u1
.address 0x408922
00030fda: PF := ~low:1[let $1 = #6790 >> 4 ^ #6790 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408922
00030fdd: SF := high:1[#6790]
.address 0x408922
00030fe0: ZF := 0 = #6790
.address 0x408925
00030fea: when ZF goto %00030fe4
0004485c: goto %0003199c

.address 0x408A40
00030fe4: 
.address 0x408A40
00030ffa: #6792 := mem[R13]
.address 0x408A40
00030ffd: CF := mem[R13] < 0
.address 0x408A40
00031000: OF := high:1[mem[R13] & (mem[R13] ^ #6792)]
.address 0x408A40
00031003: AF := 0x10 = (0x10 & (#6792 ^ mem[R13]))
.address 0x408A40
00031006: PF := ~low:1[let $1 = #6792 >> 4 ^ #6792 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408A40
00031009: SF := high:1[#6792]
.address 0x408A40
0003100c: ZF := 0 = #6792
.address 0x408A45
00031015: when ~ZF goto %00030c53
0004485d: goto %0003101b

.address 0x40892B
0003199c: 
.address 0x40892B
000319a9: #6867 := R13
.address 0x40892B
000319ac: #6868 := RAX
.address 0x40892B
000319af: R13 := R13 + #6868
.address 0x40892B
000319b2: CF := R13 < #6867
.address 0x40892B
000319b5: OF := high:1[#6867] = high:1[#6868] & (high:1[#6867] | high:1[R13]) & ~(
high:1[#6867] & high:1[R13])
.address 0x40892B
000319b8: AF := 0x10 = (0x10 & (R13 ^ #6867 ^ #6868))
.address 0x40892B
000319bb: PF := ~low:1[let $1 = R13 >> 4 ^ R13 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40892B
000319be: SF := high:1[R13]
.address 0x40892B
000319c1: ZF := 0 = R13
.address 0x40892E
000319c8: goto %0003101b

.address 0x408A4B
0003101b: 
.address 0x408A4B
00031020: RCX := 0x20
.address 0x408A50
00031027: RBX := low:64[R13 + 1]
.address 0x408A54
0003102e: mem := mem with [R13, el]:u16 <- low:16[RCX]
.address 0x408A59
00031035: goto %00030db8

.address 0x40863A
00030c7b: 
.address 0x40863A
00030c8b: R8 := pad:64[mem[0x620014, el]:u32]
.address 0x408641
00030c98: #6770 := low:32[R8]
.address 0x408641
00030c9b: OF := 0
.address 0x408641
00030c9e: CF := 0
.address 0x408641
00030ca1: AF := unknown[bits]:u1
.address 0x408641
00030ca4: PF := ~low:1[let $1 = #6770 >> 4 ^ #6770 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408641
00030ca7: SF := high:1[#6770]
.address 0x408641
00030caa: ZF := 0 = #6770
.address 0x408644
00030cb4: when SF goto %00030cae
0004485e: goto %00030d3f

.address 0x408C00
00030cae: 
.address 0x408C00
00030cbe: R15 := low:64[RSP + 0x70]
.address 0x408C05
00030cc5: RDI := mem[0x6212A8, el]:u64
.address 0x408C0C
00030ccc: RSI := low:64[RSP + 0x18]
.address 0x408C11
00030cd3: mem := mem with [RSP + 0x18, el]:u64 <- 0
.address 0x408C1A
00030cda: RDX := R15
.address 0x408C1D
00030ce3: RSP := RSP - 8
.address 0x408C1D
00030ce6: mem := mem with [RSP, el]:u64 <- 0x408C22
.address 0x408C1D
00030ce9: call @sub_415a40 with return %00030ceb

.address 0x408C22
00030ceb: 
.address 0x408C22
00030cf6: #6772 := RAX
.address 0x408C22
00030cf9: OF := 0
.address 0x408C22
00030cfc: CF := 0
.address 0x408C22
00030cff: AF := unknown[bits]:u1
.address 0x408C22
00030d02: PF := ~low:1[let $1 = #6772 >> 4 ^ #6772 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408C22
00030d05: SF := high:1[#6772]
.address 0x408C22
00030d08: ZF := 0 = #6772
.address 0x408C25
00030d12: when ZF goto %00030d0c
0004485f: goto %00031a5a

.address 0x408C27
00031a5a: 
.address 0x408C27
00031a65: #6878 := mem[0x6203C8]
.address 0x408C27
00031a68: CF := mem[0x6203C8] < 0
.address 0x408C27
00031a6b: OF := high:1[mem[0x6203C8] & (mem[0x6203C8] ^ #6878)]
.address 0x408C27
00031a6e: AF := 0x10 = (0x10 & (#6878 ^ mem[0x6203C8]))
.address 0x408C27
00031a71: PF := ~low:1[let $1 = #6878 >> 4 ^ #6878 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408C27
00031a74: SF := high:1[#6878]
.address 0x408C27
00031a77: ZF := 0 = #6878
.address 0x408C2E
00031a7e: R8 := mem[0x6212A8, el]:u64
.address 0x408C35
00031a85: RDX := mem[0x620040, el]:u64
.address 0x408C3C
00031a8e: when ~ZF goto %00031867
00044860: goto %000318c1

.address 0x408CAE
00031867: 
.address 0x408CAE
0003186c: RDX := extend:64[mem[RSP + 0x80, el]:u32]
.address 0x408CB6
00031873: RAX := 0x6203E0
.address 0x408CBD
00031881: #6860 := RDX
.address 0x408CBD
00031884: RDX := RDX << 7
.address 0x408CBD
00031887: CF := low:1[#6860 >> 0x39]
.address 0x408CBD
0003188a: SF := high:1[RDX]
.address 0x408CBD
0003188d: ZF := 0 = RDX
.address 0x408CBD
00031890: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408CBD
00031893: AF := unknown[bits]:u1
.address 0x408CBD
00031896: OF := unknown[bits]:u1
.address 0x408CC1
000318a5: #6862 := RDX
.address 0x408CC1
000318a8: #6863 := RAX
.address 0x408CC1
000318ab: RDX := RDX + #6863
.address 0x408CC1
000318ae: CF := RDX < #6862
.address 0x408CC1
000318b1: OF := high:1[#6862] = high:1[#6863] & (high:1[#6862] | high:1[RDX]) & ~(
high:1[#6862] & high:1[RDX])
.address 0x408CC1
000318b4: AF := 0x10 = (0x10 & (RDX ^ #6862 ^ #6863))
.address 0x408CC1
000318b7: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408CC1
000318ba: SF := high:1[RDX]
.address 0x408CC1
000318bd: ZF := 0 = RDX
.address 0x408CC4
000318c5: goto %000318c1

.address 0x408C3E
000318c1: 
.address 0x408C3E
000318cb: R14 := low:64[RSP + 0xE0]
.address 0x408C46
000318d8: R9 := 0
.address 0x408C46
000318db: AF := unknown[bits]:u1
.address 0x408C46
000318de: ZF := 1
.address 0x408C46
000318e1: PF := 1
.address 0x408C46
000318e4: OF := 0
.address 0x408C46
000318e7: CF := 0
.address 0x408C46
000318ea: SF := 0
.address 0x408C49
000318f1: RCX := R15
.address 0x408C4C
000318f8: RSI := 0x3E9
.address 0x408C51
000318ff: RDI := R14
.address 0x408C54
00031908: RSP := RSP - 8
.address 0x408C54
0003190b: mem := mem with [RSP, el]:u64 <- 0x408C59
.address 0x408C54
0003190e: call @sub_411f80 with return %00031910

.address 0x408C59
00031910: 
.address 0x408C59
0003191b: #6865 := RAX
.address 0x408C59
0003191e: OF := 0
.address 0x408C59
00031921: CF := 0
.address 0x408C59
00031924: AF := unknown[bits]:u1
.address 0x408C59
00031927: PF := ~low:1[let $1 = #6865 >> 4 ^ #6865 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408C59
0003192a: SF := high:1[#6865]
.address 0x408C59
0003192d: ZF := 0 = #6865
.address 0x408C5C
00031937: when ~ZF goto %00031931
00044861: goto %00030d0c

.address 0x408CC9
00031931: 
.address 0x408CC9
00031947: RDX := 0
.address 0x408CC9
0003194a: AF := unknown[bits]:u1
.address 0x408CC9
0003194d: ZF := 1
.address 0x408CC9
00031950: PF := 1
.address 0x408CC9
00031953: OF := 0
.address 0x408CC9
00031956: CF := 0
.address 0x408CC9
00031959: SF := 0
.address 0x408CCB
00031960: RSI := RAX
.address 0x408CCE
00031967: RDI := R14
.address 0x408CD1
00031970: RSP := RSP - 8
.address 0x408CD1
00031973: mem := mem with [RSP, el]:u64 <- 0x408CD6
.address 0x408CD1
00031976: call @sub_4101b0 with return %00031978

.address 0x408CD6
00031978: 
.address 0x408CD6
0003197d: R8 := pad:64[low:32[RAX]]
.address 0x408CD9
00031984: mem := mem with [0x620014, el]:u32 <- low:32[RAX]
.address 0x408CDF
0003198b: goto %00030d1e

.address 0x408C5E
00030d0c: 
.address 0x408C5E
00030d1c: R8 := pad:64[mem[0x620014, el]:u32]
00044862: goto %00030d1e

.address 0x408C65
00030d1e: 
.address 0x408C65
00030d29: #6774 := low:32[R8]
.address 0x408C65
00030d2c: OF := 0
.address 0x408C65
00030d2f: CF := 0
.address 0x408C65
00030d32: AF := unknown[bits]:u1
.address 0x408C65
00030d35: PF := ~low:1[let $1 = #6774 >> 4 ^ #6774 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408C65
00030d38: SF := high:1[#6774]
.address 0x408C65
00030d3b: ZF := 0 = #6774
.address 0x408C68
00030d45: when ~SF goto %00030d3f
00044863: goto %00030ef0

.address 0x408C6E
00030ef0: 
.address 0x408C6E
00030ef5: mem := mem with [0x620014, el]:u32 <- 0
.address 0x408C78
00030f02: R8 := 0
.address 0x408C78
00030f05: AF := unknown[bits]:u1
.address 0x408C78
00030f08: ZF := 1
.address 0x408C78
00030f0b: PF := 1
.address 0x408C78
00030f0e: OF := 0
.address 0x408C78
00030f11: CF := 0
.address 0x408C78
00030f14: SF := 0
.address 0x408C7B
00030f1b: goto %00030d3f

.address 0x40864A
00030d3f: 
.address 0x40864A
00030d4f: RCX := 0x417C5B
.address 0x408651
00030d56: R9 := RBX
.address 0x408654
00030d5d: RDX := 0xFFFFFFFFFFFFFFFF
.address 0x40865B
00030d64: RSI := 1
.address 0x408660
00030d6b: RDI := R13
.address 0x408663
00030d78: RAX := 0
.address 0x408663
00030d7b: AF := unknown[bits]:u1
.address 0x408663
00030d7e: ZF := 1
.address 0x408663
00030d81: PF := 1
.address 0x408663
00030d84: OF := 0
.address 0x408663
00030d87: CF := 0
.address 0x408663
00030d8a: SF := 0
.address 0x408665
00030d93: RSP := RSP - 8
.address 0x408665
00030d96: mem := mem with [RSP, el]:u64 <- 0x40866A
.address 0x408665
00030d99: call @sub_403e60 with return %00030d9b

.address 0x40866A
00030d9b: 
.address 0x40866A
00030da0: RDI := R13
.address 0x40866D
00030da9: RSP := RSP - 8
.address 0x40866D
00030dac: mem := mem with [RSP, el]:u64 <- 0x408672
.address 0x40866D
00030daf: call @sub_403950 with return %00030db1

.address 0x408672
00030db1: 
.address 0x408672
00030db6: RBX := low:64[R13 + RAX]
00044864: goto %00030db8

.address 0x408677
00030db8: 
.address 0x408677
00030dbd: RSI := mem[0x620288, el]:u64
.address 0x40867E
00030dc4: RDI := R12
.address 0x408681
00030dd3: #6776 := RBX
.address 0x408681
00030dd6: #6777 := R12
.address 0x408681
00030dd9: RBX := RBX - R12
.address 0x408681
00030ddc: CF := #6776 < #6777
.address 0x408681
00030ddf: OF := high:1[(#6776 ^ #6777) & (#6776 ^ RBX)]
.address 0x408681
00030de2: AF := 0x10 = (0x10 & (RBX ^ #6776 ^ #6777))
.address 0x408681
00030de5: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408681
00030de8: SF := high:1[RBX]
.address 0x408681
00030deb: ZF := 0 = RBX
.address 0x408684
00030df4: RSP := RSP - 8
.address 0x408684
00030df7: mem := mem with [RSP, el]:u64 <- 0x408689
.address 0x408684
00030dfa: call @sub_403af0 with return %00030dfc

.address 0x408689
00030dfc: 
.address 0x408689
00030e01: RDX := 0x6211A0
.address 0x408690
00030e0e: RSI := 0
.address 0x408690
00030e11: AF := unknown[bits]:u1
.address 0x408690
00030e14: ZF := 1
.address 0x408690
00030e17: PF := 1
.address 0x408690
00030e1a: OF := 0
.address 0x408690
00030e1d: CF := 0
.address 0x408690
00030e20: SF := 0
.address 0x408692
00030e27: RCX := RBX
.address 0x408695
00030e2e: RDI := RBP
.address 0x408698
00030e3d: #6779 := mem[0x6211F8, el]:u64
.address 0x408698
00030e40: #6780 := RBX
.address 0x408698
00030e43: mem := mem with [0x6211F8, el]:u64 <- mem[0x6211F8, el]:u64 + #6780
.address 0x408698
00030e46: CF := mem[0x6211F8, el]:u64 < #6779
.address 0x408698
00030e49: OF := high:1[#6779] = high:1[#6780] & (high:1[#6779] | high:1[mem[0x6211F8, el]:u64]) & ~(
high:1[#6779] & high:1[mem[0x6211F8, el]:u64])
.address 0x408698
00030e4c: AF := 0x10 = (0x10 & (mem[0x6211F8, el]:u64 ^ #6779 ^ #6780))
.address 0x408698
00030e4f: PF := ~low:1[let $1 = mem[0x6211F8, el]:u64 >> 4 ^ mem[0x6211F8, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408698
00030e52: SF := high:1[mem[0x6211F8, el]:u64]
.address 0x408698
00030e55: ZF := 0 = mem[0x6211F8, el]:u64
.address 0x40869F
00030e5e: RSP := RSP - 8
.address 0x40869F
00030e61: mem := mem with [RSP, el]:u64 <- 0x4086A4
.address 0x40869F
00030e64: call @sub_407d20 with return %00030e66

.address 0x4086A4
00030e66: 
.address 0x4086A4
00030e6b: RDX := pad:64[mem[RBP + 0xA8, el]:u32]
.address 0x4086AA
00030e72: R12 := RAX
.address 0x4086AD
00030e7f: #6782 := low:32[RDX] - 6
.address 0x4086AD
00030e82: CF := low:32[RDX] < 6
.address 0x4086AD
00030e85: OF := high:1[(low:32[RDX] ^ 6) & (low:32[RDX] ^ #6782)]
.address 0x4086AD
00030e88: AF := 0x10 = (0x10 & (#6782 ^ low:32[RDX] ^ 6))
.address 0x4086AD
00030e8b: PF := ~low:1[let $1 = #6782 >> 4 ^ #6782 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4086AD
00030e8e: SF := high:1[#6782]
.address 0x4086AD
00030e91: ZF := 0 = #6782
.address 0x4086B0
00030e9a: when ZF goto %00030be5
00044865: goto %00030ea0

.address 0x408800
00030be5: 
.address 0x408800
00030bf0: #6765 := mem[RBP + 8, el]:u64
.address 0x408800
00030bf3: CF := mem[RBP + 8, el]:u64 < 0
.address 0x408800
00030bf6: OF := high:1[mem[RBP + 8, el]:u64 & (mem[RBP + 8, el]:u64 ^ #6765)]
.address 0x408800
00030bf9: AF := 0x10 = (0x10 & (#6765 ^ mem[RBP + 8, el]:u64))
.address 0x408800
00030bfc: PF := ~low:1[let $1 = #6765 >> 4 ^ #6765 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408800
00030bff: SF := high:1[#6765]
.address 0x408800
00030c02: ZF := 0 = #6765
.address 0x408805
00030c0c: when ZF goto %00030c06
00044866: goto %0003c047

.address 0x40880B
0003c047: 
.address 0x40880B
0003c04c: RCX := mem[0x620288, el]:u64
.address 0x408812
0003c053: RDI := 0x417C60
.address 0x408819
0003c05a: RDX := 4
.address 0x40881E
0003c061: RSI := 1
.address 0x408823
0003c06a: RSP := RSP - 8
.address 0x408823
0003c06d: mem := mem with [RSP, el]:u64 <- 0x408828
.address 0x408823
0003c070: call @sub_403c80 with return %0003c072

.address 0x408828
0003c072: 
.address 0x408828
0003c077: RCX := low:64[RBX + R12 + 4]
.address 0x40882D
0003c084: RDX := 0
.address 0x40882D
0003c087: AF := unknown[bits]:u1
.address 0x40882D
0003c08a: ZF := 1
.address 0x40882D
0003c08d: PF := 1
.address 0x40882D
0003c090: OF := 0
.address 0x40882D
0003c093: CF := 0
.address 0x40882D
0003c096: SF := 0
.address 0x40882F
0003c09d: RSI := 1
.address 0x408834
0003c0a4: RDI := RBP
.address 0x408837
0003c0b2: #8292 := mem[0x6211F8, el]:u64
.address 0x408837
0003c0b5: mem := mem with [0x6211F8, el]:u64 <- mem[0x6211F8, el]:u64 + 4
.address 0x408837
0003c0b8: CF := mem[0x6211F8, el]:u64 < #8292
.address 0x408837
0003c0bb: OF := ~high:1[#8292] & (high:1[#8292] | high:1[mem[0x6211F8, el]:u64]) & ~(
high:1[#8292] & high:1[mem[0x6211F8, el]:u64])
.address 0x408837
0003c0be: AF := 0x10 = (0x10 & (mem[0x6211F8, el]:u64 ^ #8292 ^ 4))
.address 0x408837
0003c0c1: PF := ~low:1[let $1 = mem[0x6211F8, el]:u64 >> 4 ^ mem[0x6211F8, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408837
0003c0c4: SF := high:1[mem[0x6211F8, el]:u64]
.address 0x408837
0003c0c7: ZF := 0 = mem[0x6211F8, el]:u64
.address 0x40883F
0003c0d0: RSP := RSP - 8
.address 0x40883F
0003c0d3: mem := mem with [RSP, el]:u64 <- 0x408844
.address 0x40883F
0003c0d6: call @sub_407d20 with return %0003c0d8

.address 0x408844
0003c0d8: 
.address 0x408844
0003c0dd: RDX := pad:64[mem[0x621314, el]:u32]
.address 0x40884A
0003c0ea: #8295 := low:32[RDX]
.address 0x40884A
0003c0ed: OF := 0
.address 0x40884A
0003c0f0: CF := 0
.address 0x40884A
0003c0f3: AF := unknown[bits]:u1
.address 0x40884A
0003c0f6: PF := ~low:1[let $1 = #8295 >> 4 ^ #8295 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40884A
0003c0f9: SF := high:1[#8295]
.address 0x40884A
0003c0fc: ZF := 0 = #8295
.address 0x40884C
0003c105: when ZF goto %00030c06
00044867: goto %0003c10b

.address 0x408852
0003c10b: 
.address 0x408852
0003c110: RSI := pad:64[mem[RBP + 0xAC, el]:u32]
.address 0x408858
0003c11d: RDX := 0
.address 0x408858
0003c120: AF := unknown[bits]:u1
.address 0x408858
0003c123: ZF := 1
.address 0x408858
0003c126: PF := 1
.address 0x408858
0003c129: OF := 0
.address 0x408858
0003c12c: CF := 0
.address 0x408858
0003c12f: SF := 0
.address 0x40885A
0003c136: RDI := 1
.address 0x40885F
0003c13f: RSP := RSP - 8
.address 0x40885F
0003c142: mem := mem with [RSP, el]:u64 <- 0x408864
.address 0x40885F
0003c145: call @sub_406ef0 with return %0003c147

.address 0x408864
0003c147: 
.address 0x408864
0003c14c: goto %00030c06

.address 0x4086B6
00030ea0: 
.address 0x4086B6
00030ea5: RAX := pad:64[mem[0x621314, el]:u32]
.address 0x4086BC
00030eb2: #6784 := low:32[RAX]
.address 0x4086BC
00030eb5: OF := 0
.address 0x4086BC
00030eb8: CF := 0
.address 0x4086BC
00030ebb: AF := unknown[bits]:u1
.address 0x4086BC
00030ebe: PF := ~low:1[let $1 = #6784 >> 4 ^ #6784 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4086BC
00030ec1: SF := high:1[#6784]
.address 0x4086BC
00030ec4: ZF := 0 = #6784
.address 0x4086BE
00030ecd: when ZF goto %00030c06
00044868: goto %00030ed3

.address 0x4086C0
00030ed3: 
.address 0x4086C0
00030ed8: RDI := pad:64[pad:32[mem[RBP + 0xB8]]]
.address 0x4086C7
00030edf: RSI := pad:64[mem[RBP + 0x30, el]:u32]
.address 0x4086CA
00030ee8: RSP := RSP - 8
.address 0x4086CA
00030eeb: mem := mem with [RSP, el]:u64 <- 0x4086CF
.address 0x4086CA
00030eee: call @sub_406ef0 with return %00030c06

.address 0x4086CF
00030c06: 
.address 0x4086CF
00030c16: RAX := mem[RSP + 0x1318, el]:u64
.address 0x4086D7
00030c23: RAX := RAX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x4086D7
00030c26: OF := 0
.address 0x4086D7
00030c29: CF := 0
.address 0x4086D7
00030c2c: AF := unknown[bits]:u1
.address 0x4086D7
00030c2f: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4086D7
00030c32: SF := high:1[RAX]
.address 0x4086D7
00030c35: ZF := 0 = RAX
.address 0x4086E0
00030c3f: when ~ZF goto %00030c39
00044869: goto %0003bfcf

.address 0x408CE6
00030c39: 
.address 0x408CE6
00030c4b: RSP := RSP - 8
.address 0x408CE6
00030c4e: mem := mem with [RSP, el]:u64 <- 0x408CEB
.address 0x408CE6
00030c51: call @sub_403970 with return %00030c53

.address 0x408CEB
00030c53: 
.address 0x408CEB
00030c5e: #6768 := mem[RBP + 0xB8]
.address 0x408CEB
00030c61: CF := mem[RBP + 0xB8] < 0
.address 0x408CEB
00030c64: OF := high:1[mem[RBP + 0xB8] & (mem[RBP + 0xB8] ^ #6768)]
.address 0x408CEB
00030c67: AF := 0x10 = (0x10 & (#6768 ^ mem[RBP + 0xB8]))
.address 0x408CEB
00030c6a: PF := ~low:1[let $1 = #6768 >> 4 ^ #6768 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408CEB
00030c6d: SF := high:1[#6768]
.address 0x408CEB
00030c70: ZF := 0 = #6768
.address 0x408CF2
00030c77: RBX := 0x417C2E
.address 0x408CF9
00030c81: when ZF goto %00030c7b
0004486a: goto %00031a94

.address 0x408CFF
00031a94: 
.address 0x408CFF
00031a99: RDI := mem[RSP + 0x20, el]:u64
.address 0x408D04
00031aa0: RSI := low:64[RSP + 0xC0]
.address 0x408D0C
00031aa9: RSP := RSP - 8
.address 0x408D0C
00031aac: mem := mem with [RSP, el]:u64 <- 0x408D11
.address 0x408D0C
00031aaf: call @sub_40fc50 with return %00031ab1

.address 0x408D11
00031ab1: 
.address 0x408D11
00031ab6: RBX := RAX
.address 0x408D14
00031abd: goto %00030c7b

.address 0x4086E6
0003bfcf: 
.address 0x4086E6
0003bfdb: #8288 := RSP
.address 0x4086E6
0003bfde: RSP := RSP + 0x1328
.address 0x4086E6
0003bfe1: CF := RSP < #8288
.address 0x4086E6
0003bfe4: OF := ~high:1[#8288] & (high:1[#8288] | high:1[RSP]) & ~(high:1[#8288] & high:1[RSP])
.address 0x4086E6
0003bfe7: AF := 0x10 = (0x10 & (RSP ^ #8288 ^ 0x1328))
.address 0x4086E6
0003bfea: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4086E6
0003bfed: SF := high:1[RSP]
.address 0x4086E6
0003bff0: ZF := 0 = RSP
.address 0x4086ED
0003bff8: RBX := mem[RSP, el]:u64
.address 0x4086ED
0003bffb: RSP := RSP + 8
.address 0x4086EE
0003c003: RBP := mem[RSP, el]:u64
.address 0x4086EE
0003c006: RSP := RSP + 8
.address 0x4086EF
0003c00e: R12 := mem[RSP, el]:u64
.address 0x4086EF
0003c011: RSP := RSP + 8
.address 0x4086F1
0003c019: R13 := mem[RSP, el]:u64
.address 0x4086F1
0003c01c: RSP := RSP + 8
.address 0x4086F3
0003c024: R14 := mem[RSP, el]:u64
.address 0x4086F3
0003c027: RSP := RSP + 8
.address 0x4086F5
0003c02f: R15 := mem[RSP, el]:u64
.address 0x4086F5
0003c032: RSP := RSP + 8
.address 0x4086F7
0003c03b: #8291 := mem[RSP, el]:u64
.address 0x4086F7
0003c03e: RSP := RSP + 8
.address 0x4086F7
0003c042: call #8291 with noreturn


.address 0x408D20
00043fd7: sub sub_408d20()
.address 0x408D20
00031ac2: 
.address 0x408D20
00031ac9: #6880 := RBP
.address 0x408D20
00031acc: RSP := RSP - 8
.address 0x408D20
00031acf: mem := mem with [RSP, el]:u64 <- #6880
.address 0x408D21
00031ad8: #6881 := RBX
.address 0x408D21
00031adb: RSP := RSP - 8
.address 0x408D21
00031ade: mem := mem with [RSP, el]:u64 <- #6881
.address 0x408D22
00031ae5: RBP := RDI
.address 0x408D25
00031aec: RCX := pad:64[low:32[RDX]]
.address 0x408D27
00031af3: RDX := RSI
.address 0x408D2A
00031afa: RSI := RBP
.address 0x408D2D
00031b08: #6882 := RSP
.address 0x408D2D
00031b0b: RSP := RSP - 0x2038
.address 0x408D2D
00031b0e: CF := #6882 < 0x2038
.address 0x408D2D
00031b11: OF := high:1[(#6882 ^ 0x2038) & (#6882 ^ RSP)]
.address 0x408D2D
00031b14: AF := 0x10 = (0x10 & (RSP ^ #6882 ^ 0x2038))
.address 0x408D2D
00031b17: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408D2D
00031b1a: SF := high:1[RSP]
.address 0x408D2D
00031b1d: ZF := 0 = RSP
.address 0x408D34
00031b24: RBX := low:64[RSP + 0x20]
.address 0x408D39
00031b2b: RDI := low:64[RSP + 0x10]
.address 0x408D3E
00031b32: R9 := low:64[RSP + 0xF]
.address 0x408D43
00031b39: R8 := low:64[RSP + 0x18]
.address 0x408D48
00031b40: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x408D51
00031b47: mem := mem with [RSP + 0x2028, el]:u64 <- RAX
.address 0x408D59
00031b54: RAX := 0
.address 0x408D59
00031b57: AF := unknown[bits]:u1
.address 0x408D59
00031b5a: ZF := 1
.address 0x408D59
00031b5d: PF := 1
.address 0x408D59
00031b60: OF := 0
.address 0x408D59
00031b63: CF := 0
.address 0x408D59
00031b66: SF := 0
.address 0x408D5B
00031b6d: mem := mem with [RSP + 0x10, el]:u64 <- RBX
.address 0x408D60
00031b76: RSP := RSP - 8
.address 0x408D60
00031b79: mem := mem with [RSP, el]:u64 <- 0x408D65
.address 0x408D60
00031b7c: call @sub_4074a0 with return %00031b7e

.address 0x408D65
00031b7e: 
.address 0x408D65
00031b83: RDI := mem[RSP + 0x10, el]:u64
.address 0x408D6A
00031b90: #6885 := RDI - RBX
.address 0x408D6A
00031b93: CF := RDI < RBX
.address 0x408D6A
00031b96: OF := high:1[(RDI ^ RBX) & (RDI ^ #6885)]
.address 0x408D6A
00031b99: AF := 0x10 = (0x10 & (#6885 ^ RDI ^ RBX))
.address 0x408D6A
00031b9c: PF := ~low:1[let $1 = #6885 >> 4 ^ #6885 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408D6A
00031b9f: SF := high:1[#6885]
.address 0x408D6A
00031ba2: ZF := 0 = #6885
.address 0x408D6D
00031bac: when ZF goto %00031ba6
0004486b: goto %0003bf94

.address 0x408D6F
0003bf94: 
.address 0x408D6F
0003bf9f: #8286 := RDI - RBP
.address 0x408D6F
0003bfa2: CF := RDI < RBP
.address 0x408D6F
0003bfa5: OF := high:1[(RDI ^ RBP) & (RDI ^ #8286)]
.address 0x408D6F
0003bfa8: AF := 0x10 = (0x10 & (#8286 ^ RDI ^ RBP))
.address 0x408D6F
0003bfab: PF := ~low:1[let $1 = #8286 >> 4 ^ #8286 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408D6F
0003bfae: SF := high:1[#8286]
.address 0x408D6F
0003bfb1: ZF := 0 = #8286
.address 0x408D72
0003bfba: when ZF goto %00031ba6
0004486c: goto %0003bfc0

.address 0x408D74
0003bfc0: 
.address 0x408D74
0003bfc7: RSP := RSP - 8
.address 0x408D74
0003bfca: mem := mem with [RSP, el]:u64 <- 0x408D79
.address 0x408D74
0003bfcd: call @sub_403e70 with return %00031ba6

.address 0x408D79
00031ba6: 
.address 0x408D79
00031bb6: RAX := pad:64[pad:32[mem[RSP + 0xF]]]
.address 0x408D7E
00031bc5: #6887 := RAX
.address 0x408D7E
00031bc8: #6888 := mem[RSP + 0x18, el]:u64
.address 0x408D7E
00031bcb: RAX := RAX + #6888
.address 0x408D7E
00031bce: CF := RAX < #6887
.address 0x408D7E
00031bd1: OF := high:1[#6887] = high:1[#6888] & (high:1[#6887] | high:1[RAX]) & ~(
high:1[#6887] & high:1[RAX])
.address 0x408D7E
00031bd4: AF := 0x10 = (0x10 & (RAX ^ #6887 ^ #6888))
.address 0x408D7E
00031bd7: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408D7E
00031bda: SF := high:1[RAX]
.address 0x408D7E
00031bdd: ZF := 0 = RAX
.address 0x408D83
00031be4: RCX := mem[RSP + 0x2028, el]:u64
.address 0x408D8B
00031bf1: RCX := RCX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x408D8B
00031bf4: OF := 0
.address 0x408D8B
00031bf7: CF := 0
.address 0x408D8B
00031bfa: AF := unknown[bits]:u1
.address 0x408D8B
00031bfd: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408D8B
00031c00: SF := high:1[RCX]
.address 0x408D8B
00031c03: ZF := 0 = RCX
.address 0x408D94
00031c0d: when ~ZF goto %00031c07
0004486d: goto %0003bf4b

.address 0x408DA0
00031c07: 
.address 0x408DA0
00031c19: RSP := RSP - 8
.address 0x408DA0
00031c1c: mem := mem with [RSP, el]:u64 <- 0x408DA5
.address 0x408DA0
00031c1f: call @sub_403970 with return %00031c21

.address 0x408DA5
00031c21: 
0004486e: call @sub_408db0 with noreturn

.address 0x408D96
0003bf4b: 
.address 0x408D96
0003bf57: #8282 := RSP
.address 0x408D96
0003bf5a: RSP := RSP + 0x2038
.address 0x408D96
0003bf5d: CF := RSP < #8282
.address 0x408D96
0003bf60: OF := ~high:1[#8282] & (high:1[#8282] | high:1[RSP]) & ~(high:1[#8282] & high:1[RSP])
.address 0x408D96
0003bf63: AF := 0x10 = (0x10 & (RSP ^ #8282 ^ 0x2038))
.address 0x408D96
0003bf66: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408D96
0003bf69: SF := high:1[RSP]
.address 0x408D96
0003bf6c: ZF := 0 = RSP
.address 0x408D9D
0003bf74: RBX := mem[RSP, el]:u64
.address 0x408D9D
0003bf77: RSP := RSP + 8
.address 0x408D9E
0003bf7f: RBP := mem[RSP, el]:u64
.address 0x408D9E
0003bf82: RSP := RSP + 8
.address 0x408D9F
0003bf8b: #8285 := mem[RSP, el]:u64
.address 0x408D9F
0003bf8e: RSP := RSP + 8
.address 0x408D9F
0003bf92: call #8285 with noreturn


.address 0x408DB0
00043fdc: sub sub_408db0()
.address 0x408DB0
00031c27: 
.address 0x408DB0
00031c2e: #6891 := RBP
.address 0x408DB0
00031c31: RSP := RSP - 8
.address 0x408DB0
00031c34: mem := mem with [RSP, el]:u64 <- #6891
.address 0x408DB1
00031c3d: #6892 := RBX
.address 0x408DB1
00031c40: RSP := RSP - 8
.address 0x408DB1
00031c43: mem := mem with [RSP, el]:u64 <- #6892
.address 0x408DB2
00031c4a: RBP := RDI
.address 0x408DB5
00031c58: #6893 := RSP
.address 0x408DB5
00031c5b: RSP := RSP - 0x2A8
.address 0x408DB5
00031c5e: CF := #6893 < 0x2A8
.address 0x408DB5
00031c61: OF := high:1[(#6893 ^ 0x2A8) & (#6893 ^ RSP)]
.address 0x408DB5
00031c64: AF := 0x10 = (0x10 & (RSP ^ #6893 ^ 0x2A8))
.address 0x408DB5
00031c67: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408DB5
00031c6a: SF := high:1[RSP]
.address 0x408DB5
00031c6d: ZF := 0 = RSP
.address 0x408DBC
00031c74: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x408DC5
00031c7b: mem := mem with [RSP + 0x298, el]:u64 <- RAX
.address 0x408DCD
00031c88: RAX := 0
.address 0x408DCD
00031c8b: AF := unknown[bits]:u1
.address 0x408DCD
00031c8e: ZF := 1
.address 0x408DCD
00031c91: PF := 1
.address 0x408DCD
00031c94: OF := 0
.address 0x408DCD
00031c97: CF := 0
.address 0x408DCD
00031c9a: SF := 0
.address 0x408DCF
00031ca7: #6896 := mem[0x6212FC]
.address 0x408DCF
00031caa: CF := mem[0x6212FC] < 0
.address 0x408DCF
00031cad: OF := high:1[mem[0x6212FC] & (mem[0x6212FC] ^ #6896)]
.address 0x408DCF
00031cb0: AF := 0x10 = (0x10 & (#6896 ^ mem[0x6212FC]))
.address 0x408DCF
00031cb3: PF := ~low:1[let $1 = #6896 >> 4 ^ #6896 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408DCF
00031cb6: SF := high:1[#6896]
.address 0x408DCF
00031cb9: ZF := 0 = #6896
.address 0x408DD6
00031cc3: when ZF goto %00031cbd
0004486f: goto %0003bec9

.address 0x408E88
00031cbd: 
.address 0x408E88
00031cd3: RBX := 0
.address 0x408E88
00031cd6: AF := unknown[bits]:u1
.address 0x408E88
00031cd9: ZF := 1
.address 0x408E88
00031cdc: PF := 1
.address 0x408E88
00031cdf: OF := 0
.address 0x408E88
00031ce2: CF := 0
.address 0x408E88
00031ce5: SF := 0
00044870: goto %00031ce7

.address 0x408DDC
0003bec9: 
.address 0x408DDC
0003bed4: #8275 := mem[0x621338, el]:u32 - 4
.address 0x408DDC
0003bed7: CF := mem[0x621338, el]:u32 < 4
.address 0x408DDC
0003beda: OF := high:1[(mem[0x621338, el]:u32 ^ 4) & (mem[0x621338, el]:u32 ^ #8275)]
.address 0x408DDC
0003bedd: AF := 0x10 = (0x10 & (#8275 ^ mem[0x621338, el]:u32 ^ 4))
.address 0x408DDC
0003bee0: PF := ~low:1[let $1 = #8275 >> 4 ^ #8275 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408DDC
0003bee3: SF := high:1[#8275]
.address 0x408DDC
0003bee6: ZF := 0 = #8275
.address 0x408DE3
0003beef: when ZF goto %0003bd60
00044871: goto %0003bef5

.address 0x408F20
0003bd60: 
.address 0x408F20
0003bd65: RDI := mem[RDI + 0x20, el]:u64
.address 0x408F24
0003bd6c: RSI := RSP
.address 0x408F27
0003bd75: RSP := RSP - 8
.address 0x408F27
0003bd78: mem := mem with [RSP, el]:u64 <- 0x408F2C
.address 0x408F27
0003bd7b: call @sub_40fcf0 with return %0003bd7d

.address 0x408F2C
0003bd7d: 
.address 0x408F2C
0003bd82: RDI := RAX
.address 0x408F2F
0003bd8b: RSP := RSP - 8
.address 0x408F2F
0003bd8e: mem := mem with [RSP, el]:u64 <- 0x408F34
.address 0x408F2F
0003bd91: call @sub_403950 with return %0003bd93

.address 0x408F34
0003bd93: 
.address 0x408F34
0003bd98: RBX := low:64[RAX + 1]
.address 0x408F38
0003bd9f: goto %00031ce7

.address 0x408E8A
00031ce7: 
.address 0x408E8A
00031cf2: #6898 := mem[0x62132C]
.address 0x408E8A
00031cf5: CF := mem[0x62132C] < 0
.address 0x408E8A
00031cf8: OF := high:1[mem[0x62132C] & (mem[0x62132C] ^ #6898)]
.address 0x408E8A
00031cfb: AF := 0x10 = (0x10 & (#6898 ^ mem[0x62132C]))
.address 0x408E8A
00031cfe: PF := ~low:1[let $1 = #6898 >> 4 ^ #6898 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408E8A
00031d01: SF := high:1[#6898]
.address 0x408E8A
00031d04: ZF := 0 = #6898
.address 0x408E91
00031d0e: when ZF goto %00031d08
00044872: goto %0003bda4

.address 0x408E97
0003bda4: 
.address 0x408E97
0003bdaf: #8262 := mem[0x621338, el]:u32 - 4
.address 0x408E97
0003bdb2: CF := mem[0x621338, el]:u32 < 4
.address 0x408E97
0003bdb5: OF := high:1[(mem[0x621338, el]:u32 ^ 4) & (mem[0x621338, el]:u32 ^ #8262)]
.address 0x408E97
0003bdb8: AF := 0x10 = (0x10 & (#8262 ^ mem[0x621338, el]:u32 ^ 4))
.address 0x408E97
0003bdbb: PF := ~low:1[let $1 = #8262 >> 4 ^ #8262 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408E97
0003bdbe: SF := high:1[#8262]
.address 0x408E97
0003bdc1: ZF := 0 = #8262
.address 0x408E9E
0003bdcb: when ~ZF goto %0003bdc5
00044873: goto %0003be21

.address 0x408EA4
0003be21: 
.address 0x408EA4
0003be2c: #8270 := mem[RBP + 0xB8]
.address 0x408EA4
0003be2f: CF := mem[RBP + 0xB8] < 0
.address 0x408EA4
0003be32: OF := high:1[mem[RBP + 0xB8] & (mem[RBP + 0xB8] ^ #8270)]
.address 0x408EA4
0003be35: AF := 0x10 = (0x10 & (#8270 ^ mem[RBP + 0xB8]))
.address 0x408EA4
0003be38: PF := ~low:1[let $1 = #8270 >> 4 ^ #8270 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408EA4
0003be3b: SF := high:1[#8270]
.address 0x408EA4
0003be3e: ZF := 0 = #8270
.address 0x408EAB
0003be45: RAX := 2
.address 0x408EB0
0003be4e: when ZF goto %0003bdfa
00044874: goto %0003be54

.address 0x408EB6
0003be54: 
.address 0x408EB6
0003be59: RDI := mem[RBP + 0x58, el]:u64
.address 0x408EBA
0003be60: R8 := mem[0x621320, el]:u64
.address 0x408EC1
0003be67: RSI := RSP
.address 0x408EC4
0003be6e: RDX := pad:64[mem[0x621328, el]:u32]
.address 0x408ECA
0003be75: RCX := 0x200
.address 0x408ECF
0003be7e: RSP := RSP - 8
.address 0x408ECF
0003be81: mem := mem with [RSP, el]:u64 <- 0x408ED4
.address 0x408ECF
0003be84: call @sub_40ed10 with return %0003be86

.address 0x408ED4
0003be86: 
.address 0x408ED4
0003be8b: RDI := RAX
.address 0x408ED7
0003be94: RSP := RSP - 8
.address 0x408ED7
0003be97: mem := mem with [RSP, el]:u64 <- 0x408EDC
.address 0x408ED7
0003be9a: call @sub_403950 with return %0003be9c

.address 0x408EDC
0003be9c: 
.address 0x408EDC
0003bea8: #8272 := RAX
.address 0x408EDC
0003beab: RAX := RAX + 1
.address 0x408EDC
0003beae: CF := RAX < #8272
.address 0x408EDC
0003beb1: OF := ~high:1[#8272] & (high:1[#8272] | high:1[RAX]) & ~(high:1[#8272] & high:1[RAX])
.address 0x408EDC
0003beb4: AF := 0x10 = (0x10 & (RAX ^ #8272 ^ 1))
.address 0x408EDC
0003beb7: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408EDC
0003beba: SF := high:1[RAX]
.address 0x408EDC
0003bebd: ZF := 0 = RAX
.address 0x408EE0
0003bec4: goto %0003bdfa

.address 0x408DE9
0003bef5: 
.address 0x408DE9
0003befa: RBX := extend:64[mem[0x621360, el]:u32]
.address 0x408DF0
0003bf08: #8277 := RBX
.address 0x408DF0
0003bf0b: RBX := RBX + 1
.address 0x408DF0
0003bf0e: CF := RBX < #8277
.address 0x408DF0
0003bf11: OF := ~high:1[#8277] & (high:1[#8277] | high:1[RBX]) & ~(high:1[#8277] & high:1[RBX])
.address 0x408DF0
0003bf14: AF := 0x10 = (0x10 & (RBX ^ #8277 ^ 1))
.address 0x408DF0
0003bf17: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408DF0
0003bf1a: SF := high:1[RBX]
.address 0x408DF0
0003bf1d: ZF := 0 = RBX
.address 0x408DF4
0003bf2a: #8280 := mem[0x62132C]
.address 0x408DF4
0003bf2d: CF := mem[0x62132C] < 0
.address 0x408DF4
0003bf30: OF := high:1[mem[0x62132C] & (mem[0x62132C] ^ #8280)]
.address 0x408DF4
0003bf33: AF := 0x10 = (0x10 & (#8280 ^ mem[0x62132C]))
.address 0x408DF4
0003bf36: PF := ~low:1[let $1 = #8280 >> 4 ^ #8280 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408DF4
0003bf39: SF := high:1[#8280]
.address 0x408DF4
0003bf3c: ZF := 0 = #8280
.address 0x408DFB
0003bf45: when ZF goto %0003bd00
00044875: goto %0003bdc5

.address 0x408F08
0003bd00: 
.address 0x408F08
0003bd0b: #8257 := mem[0x621365]
.address 0x408F08
0003bd0e: CF := mem[0x621365] < 0
.address 0x408F08
0003bd11: OF := high:1[mem[0x621365] & (mem[0x621365] ^ #8257)]
.address 0x408F08
0003bd14: AF := 0x10 = (0x10 & (#8257 ^ mem[0x621365]))
.address 0x408F08
0003bd17: PF := ~low:1[let $1 = #8257 >> 4 ^ #8257 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408F08
0003bd1a: SF := high:1[#8257]
.address 0x408F08
0003bd1d: ZF := 0 = #8257
.address 0x408F0F
0003bd27: when ~ZF goto %0003bd21
00044876: goto %0003bd56

.address 0x408F11
0003bd56: 
.address 0x408F11
0003bd5b: goto %00031dd4

.address 0x408E01
0003bdc5: 
.address 0x408E01
0003bdd5: RAX := extend:64[mem[0x62135C, el]:u32]
.address 0x408E08
0003bde3: #8264 := RAX
.address 0x408E08
0003bde6: RAX := RAX + 1
.address 0x408E08
0003bde9: CF := RAX < #8264
.address 0x408E08
0003bdec: OF := ~high:1[#8264] & (high:1[#8264] | high:1[RAX]) & ~(high:1[#8264] & high:1[RAX])
.address 0x408E08
0003bdef: AF := 0x10 = (0x10 & (RAX ^ #8264 ^ 1))
.address 0x408E08
0003bdf2: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408E08
0003bdf5: SF := high:1[RAX]
.address 0x408E08
0003bdf8: ZF := 0 = RAX
00044877: goto %0003bdfa

.address 0x408E0C
0003bdfa: 
.address 0x408E0C
0003be07: #8267 := RBX
.address 0x408E0C
0003be0a: #8268 := RAX
.address 0x408E0C
0003be0d: RBX := RBX + #8268
.address 0x408E0C
0003be10: CF := RBX < #8267
.address 0x408E0C
0003be13: OF := high:1[#8267] = high:1[#8268] & (high:1[#8267] | high:1[RBX]) & ~(
high:1[#8267] & high:1[RBX])
.address 0x408E0C
0003be16: AF := 0x10 = (0x10 & (RBX ^ #8267 ^ #8268))
.address 0x408E0C
0003be19: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408E0C
0003be1c: SF := high:1[RBX]
.address 0x408E0C
0003be1f: ZF := 0 = RBX
00044878: goto %00031d08

.address 0x408E0F
00031d08: 
.address 0x408E0F
00031d1e: #6900 := mem[0x621365]
.address 0x408E0F
00031d21: CF := mem[0x621365] < 0
.address 0x408E0F
00031d24: OF := high:1[mem[0x621365] & (mem[0x621365] ^ #6900)]
.address 0x408E0F
00031d27: AF := 0x10 = (0x10 & (#6900 ^ mem[0x621365]))
.address 0x408E0F
00031d2a: PF := ~low:1[let $1 = #6900 >> 4 ^ #6900 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408E0F
00031d2d: SF := high:1[#6900]
.address 0x408E0F
00031d30: ZF := 0 = #6900
.address 0x408E16
00031d3a: when ~ZF goto %00031d34
00044879: goto %00031dd4

.address 0x408EE8
00031d34: 
.address 0x408EE8
00031d4a: #6902 := mem[0x621338, el]:u32 - 4
.address 0x408EE8
00031d4d: CF := mem[0x621338, el]:u32 < 4
.address 0x408EE8
00031d50: OF := high:1[(mem[0x621338, el]:u32 ^ 4) & (mem[0x621338, el]:u32 ^ #6902)]
.address 0x408EE8
00031d53: AF := 0x10 = (0x10 & (#6902 ^ mem[0x621338, el]:u32 ^ 4))
.address 0x408EE8
00031d56: PF := ~low:1[let $1 = #6902 >> 4 ^ #6902 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408EE8
00031d59: SF := high:1[#6902]
.address 0x408EE8
00031d5c: ZF := 0 = #6902
.address 0x408EEF
00031d66: when ZF goto %00031d60
0004487a: goto %0003bd21

.address 0x408F40
00031d60: 
.address 0x408F40
00031d70: RDI := mem[RBP + 0xB0, el]:u64
.address 0x408F47
00031d79: RSP := RSP - 8
.address 0x408F47
00031d7c: mem := mem with [RSP, el]:u64 <- 0x408F4C
.address 0x408F47
00031d7f: call @sub_403950 with return %00031d81

.address 0x408F4C
00031d81: 
.address 0x408F4C
00031d8d: #6904 := RAX
.address 0x408F4C
00031d90: RAX := RAX + 1
.address 0x408F4C
00031d93: CF := RAX < #6904
.address 0x408F4C
00031d96: OF := ~high:1[#6904] & (high:1[#6904] | high:1[RAX]) & ~(high:1[#6904] & high:1[RAX])
.address 0x408F4C
00031d99: AF := 0x10 = (0x10 & (RAX ^ #6904 ^ 1))
.address 0x408F4C
00031d9c: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408F4C
00031d9f: SF := high:1[RAX]
.address 0x408F4C
00031da2: ZF := 0 = RAX
.address 0x408F50
00031daa: goto %00031da6

.address 0x408EF1
0003bd21: 
.address 0x408EF1
0003bd31: RAX := extend:64[mem[0x621354, el]:u32]
.address 0x408EF8
0003bd3f: #8259 := RAX
.address 0x408EF8
0003bd42: RAX := RAX + 1
.address 0x408EF8
0003bd45: CF := RAX < #8259
.address 0x408EF8
0003bd48: OF := ~high:1[#8259] & (high:1[#8259] | high:1[RAX]) & ~(high:1[#8259] & high:1[RAX])
.address 0x408EF8
0003bd4b: AF := 0x10 = (0x10 & (RAX ^ #8259 ^ 1))
.address 0x408EF8
0003bd4e: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408EF8
0003bd51: SF := high:1[RAX]
.address 0x408EF8
0003bd54: ZF := 0 = RAX
0004487b: goto %00031da6

.address 0x408EFC
00031da6: 
.address 0x408EFC
00031db8: #6907 := RBX
.address 0x408EFC
00031dbb: #6908 := RAX
.address 0x408EFC
00031dbe: RBX := RBX + #6908
.address 0x408EFC
00031dc1: CF := RBX < #6907
.address 0x408EFC
00031dc4: OF := high:1[#6907] = high:1[#6908] & (high:1[#6907] | high:1[RBX]) & ~(
high:1[#6907] & high:1[RBX])
.address 0x408EFC
00031dc7: AF := 0x10 = (0x10 & (RBX ^ #6907 ^ #6908))
.address 0x408EFC
00031dca: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408EFC
00031dcd: SF := high:1[RBX]
.address 0x408EFC
00031dd0: ZF := 0 = RBX
.address 0x408EFF
00031dd8: goto %00031dd4

.address 0x408E1C
00031dd4: 
.address 0x408E1C
00031dde: RDX := pad:64[mem[RBP + 0xC4, el]:u32]
.address 0x408E22
00031de5: RSI := mem[0x6212D0, el]:u64
.address 0x408E29
00031dec: RDI := mem[RBP, el]:u64
.address 0x408E2D
00031df5: RSP := RSP - 8
.address 0x408E2D
00031df8: mem := mem with [RSP, el]:u64 <- 0x408E32
.address 0x408E2D
00031dfb: call @sub_408d20 with return %00031dfd

.address 0x408E32
00031dfd: 
.address 0x408E32
00031e0a: #6910 := RBX
.address 0x408E32
00031e0d: #6911 := RAX
.address 0x408E32
00031e10: RBX := RBX + #6911
.address 0x408E32
00031e13: CF := RBX < #6910
.address 0x408E32
00031e16: OF := high:1[#6910] = high:1[#6911] & (high:1[#6910] | high:1[RBX]) & ~(
high:1[#6910] & high:1[RBX])
.address 0x408E32
00031e19: AF := 0x10 = (0x10 & (RBX ^ #6910 ^ #6911))
.address 0x408E32
00031e1c: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408E32
00031e1f: SF := high:1[RBX]
.address 0x408E32
00031e22: ZF := 0 = RBX
.address 0x408E35
00031e29: RAX := pad:64[mem[0x621314, el]:u32]
.address 0x408E3B
00031e36: #6913 := low:32[RAX]
.address 0x408E3B
00031e39: OF := 0
.address 0x408E3B
00031e3c: CF := 0
.address 0x408E3B
00031e3f: AF := unknown[bits]:u1
.address 0x408E3B
00031e42: PF := ~low:1[let $1 = #6913 >> 4 ^ #6913 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408E3B
00031e45: SF := high:1[#6913]
.address 0x408E3B
00031e48: ZF := 0 = #6913
.address 0x408E3D
00031e52: when ZF goto %00031e4c
0004487c: goto %0003bc85

.address 0x408E3F
0003bc85: 
.address 0x408E3F
0003bc8a: RDI := pad:64[pad:32[mem[RBP + 0xB8]]]
.address 0x408E46
0003bc91: RDX := pad:64[mem[RBP + 0xA8, el]:u32]
.address 0x408E4C
0003bc98: RSI := pad:64[mem[RBP + 0x30, el]:u32]
.address 0x408E4F
0003bca1: RSP := RSP - 8
.address 0x408E4F
0003bca4: mem := mem with [RSP, el]:u64 <- 0x408E54
.address 0x408E4F
0003bca7: call @sub_406df0 with return %0003bca9

.address 0x408E54
0003bca9: 
.address 0x408E54
0003bcb4: #8252 := low:8[RAX]
.address 0x408E54
0003bcb7: OF := 0
.address 0x408E54
0003bcba: CF := 0
.address 0x408E54
0003bcbd: AF := unknown[bits]:u1
.address 0x408E54
0003bcc0: PF := ~low:1[let $1 = #8252 >> 4 ^ #8252 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408E54
0003bcc3: SF := high:1[#8252]
.address 0x408E54
0003bcc6: ZF := 0 = #8252
.address 0x408E56
0003bccd: RAX := extract:63:8[RAX].pad:8[~ZF]
.address 0x408E59
0003bcd4: RAX := pad:64[pad:32[low:8[RAX]]]
.address 0x408E5C
0003bce3: #8254 := RBX
.address 0x408E5C
0003bce6: #8255 := RAX
.address 0x408E5C
0003bce9: RBX := RBX + #8255
.address 0x408E5C
0003bcec: CF := RBX < #8254
.address 0x408E5C
0003bcef: OF := high:1[#8254] = high:1[#8255] & (high:1[#8254] | high:1[RBX]) & ~(
high:1[#8254] & high:1[RBX])
.address 0x408E5C
0003bcf2: AF := 0x10 = (0x10 & (RBX ^ #8254 ^ #8255))
.address 0x408E5C
0003bcf5: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408E5C
0003bcf8: SF := high:1[RBX]
.address 0x408E5C
0003bcfb: ZF := 0 = RBX
0004487d: goto %00031e4c

.address 0x408E5F
00031e4c: 
.address 0x408E5F
00031e5c: RCX := mem[RSP + 0x298, el]:u64
.address 0x408E67
00031e69: RCX := RCX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x408E67
00031e6c: OF := 0
.address 0x408E67
00031e6f: CF := 0
.address 0x408E67
00031e72: AF := unknown[bits]:u1
.address 0x408E67
00031e75: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408E67
00031e78: SF := high:1[RCX]
.address 0x408E67
00031e7b: ZF := 0 = RCX
.address 0x408E70
00031e82: RAX := RBX
.address 0x408E73
00031e8c: when ~ZF goto %00031e86
0004487e: goto %0003bc39

.address 0x408F52
00031e86: 
.address 0x408F52
00031e98: RSP := RSP - 8
.address 0x408F52
00031e9b: mem := mem with [RSP, el]:u64 <- 0x408F57
.address 0x408F52
00031e9e: call @sub_403970 with return %00031ea0

.address 0x408F57
00031ea0: 
0004487f: call @sub_408f60 with noreturn

.address 0x408E79
0003bc39: 
.address 0x408E79
0003bc45: #8248 := RSP
.address 0x408E79
0003bc48: RSP := RSP + 0x2A8
.address 0x408E79
0003bc4b: CF := RSP < #8248
.address 0x408E79
0003bc4e: OF := ~high:1[#8248] & (high:1[#8248] | high:1[RSP]) & ~(high:1[#8248] & high:1[RSP])
.address 0x408E79
0003bc51: AF := 0x10 = (0x10 & (RSP ^ #8248 ^ 0x2A8))
.address 0x408E79
0003bc54: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408E79
0003bc57: SF := high:1[RSP]
.address 0x408E79
0003bc5a: ZF := 0 = RSP
.address 0x408E80
0003bc62: RBX := mem[RSP, el]:u64
.address 0x408E80
0003bc65: RSP := RSP + 8
.address 0x408E81
0003bc6d: RBP := mem[RSP, el]:u64
.address 0x408E81
0003bc70: RSP := RSP + 8
.address 0x408E82
0003bc79: #8251 := mem[RSP, el]:u64
.address 0x408E82
0003bc7c: RSP := RSP + 8
.address 0x408E82
0003bc80: call #8251 with noreturn


.address 0x408F60
00043fee: sub sub_408f60()
.address 0x408F60
00031ea3: 
.address 0x408F60
00031ea8: R9 := mem[0x6213B0, el]:u64
.address 0x408F67
00031eaf: RCX := mem[0x621200, el]:u64
.address 0x408F6E
00031eb8: #6916 := R14
.address 0x408F6E
00031ebb: RSP := RSP - 8
.address 0x408F6E
00031ebe: mem := mem with [RSP, el]:u64 <- #6916
.address 0x408F70
00031ec7: #6917 := R13
.address 0x408F70
00031eca: RSP := RSP - 8
.address 0x408F70
00031ecd: mem := mem with [RSP, el]:u64 <- #6917
.address 0x408F72
00031ed6: #6918 := R12
.address 0x408F72
00031ed9: RSP := RSP - 8
.address 0x408F72
00031edc: mem := mem with [RSP, el]:u64 <- #6918
.address 0x408F74
00031ee5: #6919 := RBP
.address 0x408F74
00031ee8: RSP := RSP - 8
.address 0x408F74
00031eeb: mem := mem with [RSP, el]:u64 <- #6919
.address 0x408F75
00031ef2: R12 := pad:64[low:32[RDI]]
.address 0x408F78
00031eff: #6920 := R9 - RCX
.address 0x408F78
00031f02: CF := R9 < RCX
.address 0x408F78
00031f05: OF := high:1[(R9 ^ RCX) & (R9 ^ #6920)]
.address 0x408F78
00031f08: AF := 0x10 = (0x10 & (#6920 ^ R9 ^ RCX))
.address 0x408F78
00031f0b: PF := ~low:1[let $1 = #6920 >> 4 ^ #6920 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408F78
00031f0e: SF := high:1[#6920]
.address 0x408F78
00031f11: ZF := 0 = #6920
.address 0x408F7B
00031f1a: #6922 := RBX
.address 0x408F7B
00031f1d: RSP := RSP - 8
.address 0x408F7B
00031f20: mem := mem with [RSP, el]:u64 <- #6922
.address 0x408F7C
00031f27: RBX := RCX
.address 0x408F7F
00031f2e: RBX := if CF | ZF then R9 else RBX
.address 0x408F83
00031f3b: #6923 := RBX - mem[0x6202E0, el]:u64
.address 0x408F83
00031f3e: CF := RBX < mem[0x6202E0, el]:u64
.address 0x408F83
00031f41: OF := high:1[(RBX ^ mem[0x6202E0, el]:u64) & (RBX ^ #6923)]
.address 0x408F83
00031f44: AF := 0x10 = (0x10 & (#6923 ^ RBX ^ mem[0x6202E0, el]:u64))
.address 0x408F83
00031f47: PF := ~low:1[let $1 = #6923 >> 4 ^ #6923 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408F83
00031f4a: SF := high:1[#6923]
.address 0x408F83
00031f4d: ZF := 0 = #6923
.address 0x408F8A
00031f57: when CF | ZF goto %00031f51
00044880: goto %0003bb7b

.address 0x408F90
0003bb7b: 
.address 0x408F90
0003bb80: RAX := RCX
.address 0x408F93
0003bb87: RDI := mem[0x621208, el]:u64
.address 0x408F9A
0003bb95: #8243 := RAX
.address 0x408F9A
0003bb98: RAX := RAX >> 1
.address 0x408F9A
0003bb9b: CF := high:1[#8243 << 0x3F]
.address 0x408F9A
0003bb9e: SF := high:1[RAX]
.address 0x408F9A
0003bba1: ZF := 0 = RAX
.address 0x408F9A
0003bba4: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408F9A
0003bba7: AF := unknown[bits]:u1
.address 0x408F9A
0003bbaa: OF := high:1[#8243]
.address 0x408F9D
0003bbb7: #8245 := RBX - RAX
.address 0x408F9D
0003bbba: CF := RBX < RAX
.address 0x408F9D
0003bbbd: OF := high:1[(RBX ^ RAX) & (RBX ^ #8245)]
.address 0x408F9D
0003bbc0: AF := 0x10 = (0x10 & (#8245 ^ RBX ^ RAX))
.address 0x408F9D
0003bbc3: PF := ~low:1[let $1 = #8245 >> 4 ^ #8245 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408F9D
0003bbc6: SF := high:1[#8245]
.address 0x408F9D
0003bbc9: ZF := 0 = #8245
.address 0x408FA0
0003bbd2: when CF goto %0003202e
00044881: goto %0003bbd8

.address 0x409210
0003202e: 
.address 0x409210
00032033: RDX := 0x30
.address 0x409215
00032040: RCX := 0
.address 0x409215
00032043: AF := unknown[bits]:u1
.address 0x409215
00032046: ZF := 1
.address 0x409215
00032049: PF := 1
.address 0x409215
0003204c: OF := 0
.address 0x409215
0003204f: CF := 0
.address 0x409215
00032052: SF := 0
.address 0x409217
00032059: RAX := RDX
.address 0x40921A
00032068: #6932 := pad:128[RAX] * pad:128[RBX]
.address 0x40921A
0003206b: RAX := extract:63:0[#6932]
.address 0x40921A
0003206e: RDX := extract:127:64[#6932]
.address 0x40921A
00032071: OF := extract:127:64[#6932] <> 0
.address 0x40921A
00032074: CF := extract:127:64[#6932] <> 0
.address 0x40921A
00032077: SF := unknown[bits]:u1
.address 0x40921A
0003207a: ZF := unknown[bits]:u1
.address 0x40921A
0003207d: AF := unknown[bits]:u1
.address 0x40921A
00032080: PF := unknown[bits]:u1
.address 0x40921D
0003208a: when OF goto %00032084
00044882: goto %00032098

.address 0x409260
00032084: 
.address 0x409260
00032094: RCX := 1
.address 0x409265
0003209c: goto %00032098

.address 0x40921F
00032098: 
.address 0x40921F
000320a8: #6933 := RAX
.address 0x40921F
000320ab: OF := 0
.address 0x40921F
000320ae: CF := 0
.address 0x40921F
000320b1: AF := unknown[bits]:u1
.address 0x40921F
000320b4: PF := ~low:1[let $1 = #6933 >> 4 ^ #6933 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40921F
000320b7: SF := high:1[#6933]
.address 0x40921F
000320ba: ZF := 0 = #6933
.address 0x409222
000320c4: when SF goto %000320be
00044883: goto %0003225b

.address 0x409224
0003225b: 
.address 0x409224
00032266: #6952 := RCX
.address 0x409224
00032269: OF := 0
.address 0x409224
0003226c: CF := 0
.address 0x409224
0003226f: AF := unknown[bits]:u1
.address 0x409224
00032272: PF := ~low:1[let $1 = #6952 >> 4 ^ #6952 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409224
00032275: SF := high:1[#6952]
.address 0x409224
00032278: ZF := 0 = #6952
.address 0x409227
00032281: when ~ZF goto %000320be
00044884: goto %00032287

.address 0x409229
00032287: 
.address 0x409229
0003228c: RBP := low:64[RBX + RBX]
.address 0x40922D
00032293: RSI := low:64[RBP + RBX]
.address 0x409232
000322a1: #6954 := RSI
.address 0x409232
000322a4: RSI := RSI << 4
.address 0x409232
000322a7: CF := low:1[#6954 >> 0x3C]
.address 0x409232
000322aa: SF := high:1[RSI]
.address 0x409232
000322ad: ZF := 0 = RSI
.address 0x409232
000322b0: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x409232
000322b3: AF := unknown[bits]:u1
.address 0x409232
000322b6: OF := unknown[bits]:u1
.address 0x409236
000322bf: RSP := RSP - 8
.address 0x409236
000322c2: mem := mem with [RSP, el]:u64 <- 0x40923B
.address 0x409236
000322c5: call @sub_4144e0 with return %000322c7

.address 0x40923B
000322c7: 
.address 0x40923B
000322cc: mem := mem with [0x621208, el]:u64 <- RAX
.address 0x409242
000322d4: goto %000322d0

.address 0x408FA6
0003bbd8: 
.address 0x408FA6
0003bbdd: RDX := 0x18
.address 0x408FAB
0003bbea: RSI := 0
.address 0x408FAB
0003bbed: AF := unknown[bits]:u1
.address 0x408FAB
0003bbf0: ZF := 1
.address 0x408FAB
0003bbf3: PF := 1
.address 0x408FAB
0003bbf6: OF := 0
.address 0x408FAB
0003bbf9: CF := 0
.address 0x408FAB
0003bbfc: SF := 0
.address 0x408FAD
0003bc03: RAX := RDX
.address 0x408FB0
0003bc12: #8247 := pad:128[RAX] * pad:128[RCX]
.address 0x408FB0
0003bc15: RAX := extract:63:0[#8247]
.address 0x408FB0
0003bc18: RDX := extract:127:64[#8247]
.address 0x408FB0
0003bc1b: OF := extract:127:64[#8247] <> 0
.address 0x408FB0
0003bc1e: CF := extract:127:64[#8247] <> 0
.address 0x408FB0
0003bc21: SF := unknown[bits]:u1
.address 0x408FB0
0003bc24: ZF := unknown[bits]:u1
.address 0x408FB0
0003bc27: AF := unknown[bits]:u1
.address 0x408FB0
0003bc2a: PF := unknown[bits]:u1
.address 0x408FB3
0003bc33: when OF goto %000324ec
00044885: goto %000324f5

.address 0x409247
000324ec: 
.address 0x409247
000324f1: RSI := 1
.address 0x40924C
000324f9: goto %000324f5

.address 0x408FB9
000324f5: 
.address 0x408FB9
00032505: #6978 := RAX
.address 0x408FB9
00032508: OF := 0
.address 0x408FB9
0003250b: CF := 0
.address 0x408FB9
0003250e: AF := unknown[bits]:u1
.address 0x408FB9
00032511: PF := ~low:1[let $1 = #6978 >> 4 ^ #6978 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408FB9
00032514: SF := high:1[#6978]
.address 0x408FB9
00032517: ZF := 0 = #6978
.address 0x408FBC
00032520: when SF goto %000320be
00044886: goto %00032526

.address 0x408FC2
00032526: 
.address 0x408FC2
00032531: #6980 := RSI
.address 0x408FC2
00032534: OF := 0
.address 0x408FC2
00032537: CF := 0
.address 0x408FC2
0003253a: AF := unknown[bits]:u1
.address 0x408FC2
0003253d: PF := ~low:1[let $1 = #6980 >> 4 ^ #6980 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x408FC2
00032540: SF := high:1[#6980]
.address 0x408FC2
00032543: ZF := 0 = #6980
.address 0x408FC5
0003254c: when ~ZF goto %000320be
00044887: goto %00032552

.address 0x408FCB
00032552: 
.address 0x408FCB
00032557: RSI := low:64[RCX + (RCX << 1)]
.address 0x408FCF
00032565: #6982 := RSI
.address 0x408FCF
00032568: RSI := RSI << 3
.address 0x408FCF
0003256b: CF := low:1[#6982 >> 0x3D]
.address 0x408FCF
0003256e: SF := high:1[RSI]
.address 0x408FCF
00032571: ZF := 0 = RSI
.address 0x408FCF
00032574: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408FCF
00032577: AF := unknown[bits]:u1
.address 0x408FCF
0003257a: OF := unknown[bits]:u1
.address 0x408FD3
00032583: RSP := RSP - 8
.address 0x408FD3
00032586: mem := mem with [RSP, el]:u64 <- 0x408FD8
.address 0x408FD3
00032589: call @sub_4144e0 with return %0003258b

.address 0x408FD8
0003258b: 
.address 0x408FD8
00032590: RBP := mem[0x621200, el]:u64
.address 0x408FDF
00032597: mem := mem with [0x621208, el]:u64 <- RAX
00044888: goto %000322d0

.address 0x408FE6
000322d0: 
.address 0x408FE6
000322da: RAX := mem[0x6202E0, el]:u64
.address 0x408FED
000322e1: RDI := RBP
.address 0x408FF0
000322f0: #6956 := RDI
.address 0x408FF0
000322f3: #6957 := RAX
.address 0x408FF0
000322f6: RDI := RDI - RAX
.address 0x408FF0
000322f9: CF := #6956 < #6957
.address 0x408FF0
000322fc: OF := high:1[(#6956 ^ #6957) & (#6956 ^ RDI)]
.address 0x408FF0
000322ff: AF := 0x10 = (0x10 & (RDI ^ #6956 ^ #6957))
.address 0x408FF0
00032302: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408FF0
00032305: SF := high:1[RDI]
.address 0x408FF0
00032308: ZF := 0 = RDI
.address 0x408FF3
00032316: #6959 := RAX
.address 0x408FF3
00032319: RAX := RAX + 1
.address 0x408FF3
0003231c: CF := RAX < #6959
.address 0x408FF3
0003231f: OF := ~high:1[#6959] & (high:1[#6959] | high:1[RAX]) & ~(high:1[#6959] & high:1[RAX])
.address 0x408FF3
00032322: AF := 0x10 = (0x10 & (RAX ^ #6959 ^ 1))
.address 0x408FF3
00032325: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408FF3
00032328: SF := high:1[RAX]
.address 0x408FF3
0003232b: ZF := 0 = RAX
.address 0x408FF7
0003233a: #6962 := RAX
.address 0x408FF7
0003233d: #6963 := RBP
.address 0x408FF7
00032340: RAX := RAX + #6963
.address 0x408FF7
00032343: CF := RAX < #6962
.address 0x408FF7
00032346: OF := high:1[#6962] = high:1[#6963] & (high:1[#6962] | high:1[RAX]) & ~(
high:1[#6962] & high:1[RAX])
.address 0x408FF7
00032349: AF := 0x10 = (0x10 & (RAX ^ #6962 ^ #6963))
.address 0x408FF7
0003234c: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x408FF7
0003234f: SF := high:1[RAX]
.address 0x408FF7
00032352: ZF := 0 = RAX
.address 0x408FFA
00032359: RCX := RDI
.address 0x408FFD
00032360: RSI := RAX
.address 0x409000
00032367: RAX := extract:63:8[RAX].pad:8[CF]
.address 0x409003
0003236e: RAX := pad:64[pad:32[low:8[RAX]]]
.address 0x409006
0003237c: #6965 := extend:128[RCX] * extend:128[RSI]
.address 0x409006
0003237f: RCX := low:64[#6965]
.address 0x409006
00032382: OF := #6965 <> extend:128[RCX]
.address 0x409006
00032385: CF := #6965 <> extend:128[RCX]
.address 0x409006
00032388: PF := unknown[bits]:u1
.address 0x409006
0003238b: SF := unknown[bits]:u1
.address 0x409006
0003238e: ZF := unknown[bits]:u1
.address 0x409006
00032391: AF := unknown[bits]:u1
.address 0x40900A
0003239e: #6966 := RAX
.address 0x40900A
000323a1: OF := 0
.address 0x40900A
000323a4: CF := 0
.address 0x40900A
000323a7: AF := unknown[bits]:u1
.address 0x40900A
000323aa: PF := ~low:1[let $1 = #6966 >> 4 ^ #6966 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40900A
000323ad: SF := high:1[#6966]
.address 0x40900A
000323b0: ZF := 0 = #6966
.address 0x40900D
000323b9: when ~ZF goto %000320be
00044889: goto %000323bf

.address 0x409013
000323bf: 
.address 0x409013
000323ca: RDX := 0
.address 0x409013
000323cd: AF := unknown[bits]:u1
.address 0x409013
000323d0: ZF := 1
.address 0x409013
000323d3: PF := 1
.address 0x409013
000323d6: OF := 0
.address 0x409013
000323d9: CF := 0
.address 0x409013
000323dc: SF := 0
.address 0x409015
000323e3: RAX := RCX
.address 0x409018
000323fc: #6969 := pad:128[RDI]
.address 0x409018
0003243b: goto %000323fe

00032415: 
.address 0x409018
00032416: call %0000737f with noreturn

0003240b: 
.address 0x409018
0003240c: #6972 := low:64[#6971].low:64[#6970]
.address 0x409018
0003240f: RAX := extract:63:0[#6972]
.address 0x409018
00032412: RDX := extract:127:64[#6972]
.address 0x409018
0003241c: goto %00032419

00032418: 
.address 0x409018
0003241a: when high:64[#6970] = 0 goto %0003240b
.address 0x409018
0003241b: goto %00032415

00032408: 
.address 0x409018
00032409: #6971 := #6968 % #6969
.address 0x409018
0003241f: goto %00032418

00032405: 
.address 0x409018
00032406: #6970 := #6968 / #6969
.address 0x409018
00032420: goto %00032408

00032419: 
.address 0x409018
00032426: goto %00032422

00032401: 
.address 0x409018
00032402: call %0000737f with noreturn

00032421: 
.address 0x409018
00032423: when #6969 = 0 goto %00032401
.address 0x409018
00032424: goto %00032405

000323fe: 
.address 0x409018
000323ff: #6968 := RDX.RAX
.address 0x409018
0003243a: goto %00032421

00032422: 
.address 0x409018
00032429: CF := unknown[bits]:u1
.address 0x409018
0003242c: OF := unknown[bits]:u1
.address 0x409018
0003242f: SF := unknown[bits]:u1
.address 0x409018
00032432: ZF := unknown[bits]:u1
.address 0x409018
00032435: AF := unknown[bits]:u1
.address 0x409018
00032438: PF := unknown[bits]:u1
0004488a: goto %0003243c

.address 0x40901B
0003243c: 
.address 0x40901B
00032447: #6973 := RSI - RAX
.address 0x40901B
0003244a: CF := RSI < RAX
.address 0x40901B
0003244d: OF := high:1[(RSI ^ RAX) & (RSI ^ #6973)]
.address 0x40901B
00032450: AF := 0x10 = (0x10 & (#6973 ^ RSI ^ RAX))
.address 0x40901B
00032453: PF := ~low:1[let $1 = #6973 >> 4 ^ #6973 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40901B
00032456: SF := high:1[#6973]
.address 0x40901B
00032459: ZF := 0 = #6973
.address 0x40901E
00032462: when ~ZF goto %000320be
0004488b: goto %00032468

.address 0x409024
00032468: 
.address 0x409024
0003246d: RDX := 8
.address 0x409029
0003247b: #6975 := RCX
.address 0x409029
0003247e: RCX := RCX >> 1
.address 0x409029
00032481: CF := high:1[#6975 << 0x3F]
.address 0x409029
00032484: SF := high:1[RCX]
.address 0x409029
00032487: ZF := 0 = RCX
.address 0x409029
0003248a: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x409029
0003248d: AF := unknown[bits]:u1
.address 0x409029
00032490: OF := high:1[#6975]
.address 0x40902C
0003249d: RSI := 0
.address 0x40902C
000324a0: AF := unknown[bits]:u1
.address 0x40902C
000324a3: ZF := 1
.address 0x40902C
000324a6: PF := 1
.address 0x40902C
000324a9: OF := 0
.address 0x40902C
000324ac: CF := 0
.address 0x40902C
000324af: SF := 0
.address 0x40902E
000324b6: RAX := RDX
.address 0x409031
000324c5: #6977 := pad:128[RAX] * pad:128[RCX]
.address 0x409031
000324c8: RAX := extract:63:0[#6977]
.address 0x409031
000324cb: RDX := extract:127:64[#6977]
.address 0x409031
000324ce: OF := extract:127:64[#6977] <> 0
.address 0x409031
000324d1: CF := extract:127:64[#6977] <> 0
.address 0x409031
000324d4: SF := unknown[bits]:u1
.address 0x409031
000324d7: ZF := unknown[bits]:u1
.address 0x409031
000324da: AF := unknown[bits]:u1
.address 0x409031
000324dd: PF := unknown[bits]:u1
.address 0x409034
000324e6: when OF goto %000320d8
0004488c: goto %000320e1

.address 0x40903A
000320e1: 
.address 0x40903A
000320f1: #6935 := RAX
.address 0x40903A
000320f4: OF := 0
.address 0x40903A
000320f7: CF := 0
.address 0x40903A
000320fa: AF := unknown[bits]:u1
.address 0x40903A
000320fd: PF := ~low:1[let $1 = #6935 >> 4 ^ #6935 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40903A
00032100: SF := high:1[#6935]
.address 0x40903A
00032103: ZF := 0 = #6935
.address 0x40903D
0003210c: when SF goto %000320be
0004488d: goto %00032112

.address 0x409043
00032112: 
.address 0x409043
0003211d: #6937 := RSI
.address 0x409043
00032120: OF := 0
.address 0x409043
00032123: CF := 0
.address 0x409043
00032126: AF := unknown[bits]:u1
.address 0x409043
00032129: PF := ~low:1[let $1 = #6937 >> 4 ^ #6937 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409043
0003212c: SF := high:1[#6937]
.address 0x409043
0003212f: ZF := 0 = #6937
.address 0x409046
00032138: when ~ZF goto %000320be
0004488e: goto %0003213e

.address 0x409251
000320be: 
.address 0x409251
000320d0: RSP := RSP - 8
.address 0x409251
000320d3: mem := mem with [RSP, el]:u64 <- 0x409256
.address 0x409251
000320d6: call @sub_4146d0 with return %000320d8

.address 0x409256
000320d8: 
.address 0x409256
000320dd: RSI := 1
.address 0x40925B
000320e5: goto %000320e1

.address 0x40904C
0003213e: 
.address 0x40904C
00032143: RDI := low:64[RCX << 3]
.address 0x409054
0003214c: RSP := RSP - 8
.address 0x409054
0003214f: mem := mem with [RSP, el]:u64 <- 0x409059
.address 0x409054
00032152: call @sub_414480 with return %00032154

.address 0x409059
00032154: 
.address 0x409059
00032159: RDX := mem[0x6202E0, el]:u64
.address 0x409060
00032166: #6939 := RBP - RDX
.address 0x409060
00032169: CF := RBP < RDX
.address 0x409060
0003216c: OF := high:1[(RBP ^ RDX) & (RBP ^ #6939)]
.address 0x409060
0003216f: AF := 0x10 = (0x10 & (#6939 ^ RBP ^ RDX))
.address 0x409060
00032172: PF := ~low:1[let $1 = #6939 >> 4 ^ #6939 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409060
00032175: SF := high:1[#6939]
.address 0x409060
00032178: ZF := 0 = #6939
.address 0x409063
00032182: when CF | ZF goto %0003217c
0004488f: goto %00032195

.address 0x409065
00032195: 
.address 0x409065
0003219a: RCX := mem[0x621208, el]:u64
.address 0x40906C
000321a1: RSI := low:64[RDX + (RDX << 1)]
.address 0x409070
000321a8: RDX := low:64[8 + (RDX << 3)]
.address 0x409078
000321af: RCX := low:64[RCX + (RSI << 3) + 0x10]
.address 0x40907D
000321b6: RSI := low:64[8 + (RBP << 3)]
00044890: goto %000321bb

.address 0x409088
000321bb: 
.address 0x409088
000321c0: mem := mem with [RCX, el]:u64 <- RAX
.address 0x40908B
000321cf: #6941 := RAX
.address 0x40908B
000321d2: #6942 := RDX
.address 0x40908B
000321d5: RAX := RAX + #6942
.address 0x40908B
000321d8: CF := RAX < #6941
.address 0x40908B
000321db: OF := high:1[#6941] = high:1[#6942] & (high:1[#6941] | high:1[RAX]) & ~(
high:1[#6941] & high:1[RAX])
.address 0x40908B
000321de: AF := 0x10 = (0x10 & (RAX ^ #6941 ^ #6942))
.address 0x40908B
000321e1: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40908B
000321e4: SF := high:1[RAX]
.address 0x40908B
000321e7: ZF := 0 = RAX
.address 0x40908E
000321f5: #6944 := RDX
.address 0x40908E
000321f8: RDX := RDX + 8
.address 0x40908E
000321fb: CF := RDX < #6944
.address 0x40908E
000321fe: OF := ~high:1[#6944] & (high:1[#6944] | high:1[RDX]) & ~(high:1[#6944] & high:1[RDX])
.address 0x40908E
00032201: AF := 0x10 = (0x10 & (RDX ^ #6944 ^ 8))
.address 0x40908E
00032204: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40908E
00032207: SF := high:1[RDX]
.address 0x40908E
0003220a: ZF := 0 = RDX
.address 0x409092
00032218: #6947 := RCX
.address 0x409092
0003221b: RCX := RCX + 0x18
.address 0x409092
0003221e: CF := RCX < #6947
.address 0x409092
00032221: OF := ~high:1[#6947] & (high:1[#6947] | high:1[RCX]) & ~(high:1[#6947] & high:1[RCX])
.address 0x409092
00032224: AF := 0x10 = (0x10 & (RCX ^ #6947 ^ 0x18))
.address 0x409092
00032227: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x409092
0003222a: SF := high:1[RCX]
.address 0x409092
0003222d: ZF := 0 = RCX
.address 0x409096
0003223a: #6950 := RSI - RDX
.address 0x409096
0003223d: CF := RSI < RDX
.address 0x409096
00032240: OF := high:1[(RSI ^ RDX) & (RSI ^ #6950)]
.address 0x409096
00032243: AF := 0x10 = (0x10 & (#6950 ^ RSI ^ RDX))
.address 0x409096
00032246: PF := ~low:1[let $1 = #6950 >> 4 ^ #6950 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409096
00032249: SF := high:1[#6950]
.address 0x409096
0003224c: ZF := 0 = #6950
.address 0x409099
00032255: when ~ZF goto %000321bb
00044891: goto %0003217c

.address 0x40909B
0003217c: 
.address 0x40909B
0003218c: R9 := mem[0x6213B0, el]:u64
.address 0x4090A2
00032193: mem := mem with [0x6202E0, el]:u64 <- RBP
00044892: goto %00031f51

.address 0x4090A9
00031f51: 
.address 0x4090A9
00031f67: #6925 := RBX
.address 0x4090A9
00031f6a: OF := 0
.address 0x4090A9
00031f6d: CF := 0
.address 0x4090A9
00031f70: AF := unknown[bits]:u1
.address 0x4090A9
00031f73: PF := ~low:1[let $1 = #6925 >> 4 ^ #6925 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4090A9
00031f76: SF := high:1[#6925]
.address 0x4090A9
00031f79: ZF := 0 = #6925
.address 0x4090AC
00031f83: when ZF goto %00031f7d
00044893: goto %0003ba5d

.address 0x4090AE
0003ba5d: 
.address 0x4090AE
0003ba62: RDI := mem[0x621208, el]:u64
.address 0x4090B5
0003ba69: R8 := low:64[RBX + (RBX << 1) + 3]
.address 0x4090BA
0003ba76: RSI := 0
.address 0x4090BA
0003ba79: AF := unknown[bits]:u1
.address 0x4090BA
0003ba7c: ZF := 1
.address 0x4090BA
0003ba7f: PF := 1
.address 0x4090BA
0003ba82: OF := 0
.address 0x4090BA
0003ba85: CF := 0
.address 0x4090BA
0003ba88: SF := 0
.address 0x4090BC
0003ba8f: RDX := 3
00044894: goto %0003ba94

.address 0x4090C8
0003ba94: 
.address 0x4090C8
0003ba99: RAX := mem[RDI + (RDX << 3) - 8, el]:u64
.address 0x4090CD
0003baa7: #8230 := RSI
.address 0x4090CD
0003baaa: RSI := RSI + 8
.address 0x4090CD
0003baad: CF := RSI < #8230
.address 0x4090CD
0003bab0: OF := ~high:1[#8230] & (high:1[#8230] | high:1[RSI]) & ~(high:1[#8230] & high:1[RSI])
.address 0x4090CD
0003bab3: AF := 0x10 = (0x10 & (RSI ^ #8230 ^ 8))
.address 0x4090CD
0003bab6: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4090CD
0003bab9: SF := high:1[RSI]
.address 0x4090CD
0003babc: ZF := 0 = RSI
.address 0x4090D1
0003bac3: mem := mem with [RDI + (RDX << 3) - 0x18] <- 1
.address 0x4090D6
0003baca: mem := mem with [RDI + (RDX << 3) - 0x10, el]:u64 <- RDX
.address 0x4090DB
0003bad1: RCX := low:64[RAX + RSI]
00044895: goto %0003bad6

.address 0x4090E0
0003bad6: 
.address 0x4090E0
0003badb: mem := mem with [RAX, el]:u64 <- 3
.address 0x4090E7
0003bae9: #8233 := RAX
.address 0x4090E7
0003baec: RAX := RAX + 8
.address 0x4090E7
0003baef: CF := RAX < #8233
.address 0x4090E7
0003baf2: OF := ~high:1[#8233] & (high:1[#8233] | high:1[RAX]) & ~(high:1[#8233] & high:1[RAX])
.address 0x4090E7
0003baf5: AF := 0x10 = (0x10 & (RAX ^ #8233 ^ 8))
.address 0x4090E7
0003baf8: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4090E7
0003bafb: SF := high:1[RAX]
.address 0x4090E7
0003bafe: ZF := 0 = RAX
.address 0x4090EB
0003bb0b: #8236 := RCX - RAX
.address 0x4090EB
0003bb0e: CF := RCX < RAX
.address 0x4090EB
0003bb11: OF := high:1[(RCX ^ RAX) & (RCX ^ #8236)]
.address 0x4090EB
0003bb14: AF := 0x10 = (0x10 & (#8236 ^ RCX ^ RAX))
.address 0x4090EB
0003bb17: PF := ~low:1[let $1 = #8236 >> 4 ^ #8236 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4090EB
0003bb1a: SF := high:1[#8236]
.address 0x4090EB
0003bb1d: ZF := 0 = #8236
.address 0x4090EE
0003bb26: when ~ZF goto %0003bad6
00044896: goto %0003bb2c

.address 0x4090F0
0003bb2c: 
.address 0x4090F0
0003bb38: #8238 := RDX
.address 0x4090F0
0003bb3b: RDX := RDX + 3
.address 0x4090F0
0003bb3e: CF := RDX < #8238
.address 0x4090F0
0003bb41: OF := ~high:1[#8238] & (high:1[#8238] | high:1[RDX]) & ~(high:1[#8238] & high:1[RDX])
.address 0x4090F0
0003bb44: AF := 0x10 = (0x10 & (RDX ^ #8238 ^ 3))
.address 0x4090F0
0003bb47: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4090F0
0003bb4a: SF := high:1[RDX]
.address 0x4090F0
0003bb4d: ZF := 0 = RDX
.address 0x4090F4
0003bb5a: #8241 := R8 - RDX
.address 0x4090F4
0003bb5d: CF := R8 < RDX
.address 0x4090F4
0003bb60: OF := high:1[(R8 ^ RDX) & (R8 ^ #8241)]
.address 0x4090F4
0003bb63: AF := 0x10 = (0x10 & (#8241 ^ R8 ^ RDX))
.address 0x4090F4
0003bb66: PF := ~low:1[let $1 = #8241 >> 4 ^ #8241 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4090F4
0003bb69: SF := high:1[#8241]
.address 0x4090F4
0003bb6c: ZF := 0 = #8241
.address 0x4090F7
0003bb75: when ~ZF goto %0003ba94
00044897: goto %00031f7d

.address 0x4090F9
00031f7d: 
.address 0x4090F9
00031f93: #6927 := R9
.address 0x4090F9
00031f96: OF := 0
.address 0x4090F9
00031f99: CF := 0
.address 0x4090F9
00031f9c: AF := unknown[bits]:u1
.address 0x4090F9
00031f9f: PF := ~low:1[let $1 = #6927 >> 4 ^ #6927 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4090F9
00031fa2: SF := high:1[#6927]
.address 0x4090F9
00031fa5: ZF := 0 = #6927
.address 0x4090FC
00031faf: when ZF goto %00031fa9
00044898: goto %0003b607

.address 0x409102
0003b607: 
.address 0x409102
0003b612: RBP := 0
.address 0x409102
0003b615: AF := unknown[bits]:u1
.address 0x409102
0003b618: ZF := 1
.address 0x409102
0003b61b: PF := 1
.address 0x409102
0003b61e: OF := 0
.address 0x409102
0003b621: CF := 0
.address 0x409102
0003b624: SF := 0
00044899: goto %0003b629

.address 0x409108
0003b629: 
.address 0x409108
0003b62e: RAX := mem[0x6213A0, el]:u64
.address 0x40910F
0003b635: RDI := mem[RAX + (RBP << 3), el]:u64
.address 0x409113
0003b63e: RSP := RSP - 8
.address 0x409113
0003b641: mem := mem with [RSP, el]:u64 <- 0x409118
.address 0x409113
0003b644: call @sub_408db0 with return %0003b646

.address 0x409118
0003b646: 
.address 0x409118
0003b651: #8187 := RBX
.address 0x409118
0003b654: OF := 0
.address 0x409118
0003b657: CF := 0
.address 0x409118
0003b65a: AF := unknown[bits]:u1
.address 0x409118
0003b65d: PF := ~low:1[let $1 = #8187 >> 4 ^ #8187 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409118
0003b660: SF := high:1[#8187]
.address 0x409118
0003b663: ZF := 0 = #8187
.address 0x40911B
0003b66a: R10 := RAX
.address 0x40911E
0003b671: RDI := mem[0x6213B0, el]:u64
.address 0x409125
0003b67b: when ZF goto %0003b675
0004489a: goto %0003b6cf

.address 0x40912B
0003b6cf: 
.address 0x40912B
0003b6d4: R14 := mem[0x6212B0, el]:u64
.address 0x409132
0003b6db: RCX := mem[0x621208, el]:u64
.address 0x409139
0003b6e8: RSI := 0
.address 0x409139
0003b6eb: AF := unknown[bits]:u1
.address 0x409139
0003b6ee: ZF := 1
.address 0x409139
0003b6f1: PF := 1
.address 0x409139
0003b6f4: OF := 0
.address 0x409139
0003b6f7: CF := 0
.address 0x409139
0003b6fa: SF := 0
.address 0x40913B
0003b701: R11 := low:64[RAX + 2]
.address 0x40913F
0003b708: R13 := low:64[RDI - 1]
.address 0x409143
0003b710: goto %0003b70c

.address 0x4091A1
0003b70c: 
.address 0x4091A1
0003b71c: #8194 := mem[RCX]
.address 0x4091A1
0003b71f: CF := mem[RCX] < 0
.address 0x4091A1
0003b722: OF := high:1[mem[RCX] & (mem[RCX] ^ #8194)]
.address 0x4091A1
0003b725: AF := 0x10 = (0x10 & (#8194 ^ mem[RCX]))
.address 0x4091A1
0003b728: PF := ~low:1[let $1 = #8194 >> 4 ^ #8194 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4091A1
0003b72b: SF := high:1[#8194]
.address 0x4091A1
0003b72e: ZF := 0 = #8194
.address 0x4091A4
0003b735: R8 := low:64[RSI + 1]
.address 0x4091A8
0003b73f: when ZF goto %0003b739
0004489b: goto %0003b79a

.address 0x4091AA
0003b79a: 
.address 0x4091AA
0003b7a5: #8201 := low:8[R12]
.address 0x4091AA
0003b7a8: OF := 0
.address 0x4091AA
0003b7ab: CF := 0
.address 0x4091AA
0003b7ae: AF := unknown[bits]:u1
.address 0x4091AA
0003b7b1: PF := ~low:1[let $1 = #8201 >> 4 ^ #8201 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4091AA
0003b7b4: SF := high:1[#8201]
.address 0x4091AA
0003b7b7: ZF := 0 = #8201
.address 0x4091AD
0003b7c1: when ~ZF goto %0003b7bb
0004489c: goto %0003b9cc

.address 0x4091AF
0003b9cc: 
.address 0x4091AF
0003b9d1: RAX := RBP
.address 0x4091B2
0003b9de: RDX := 0
.address 0x4091B2
0003b9e1: AF := unknown[bits]:u1
.address 0x4091B2
0003b9e4: ZF := 1
.address 0x4091B2
0003b9e7: PF := 1
.address 0x4091B2
0003b9ea: OF := 0
.address 0x4091B2
0003b9ed: CF := 0
.address 0x4091B2
0003b9f0: SF := 0
.address 0x4091B4
0003ba09: #8226 := pad:128[R8]
.address 0x4091B4
0003ba48: goto %0003ba0b

0003ba22: 
.address 0x4091B4
0003ba23: call %0000737f with noreturn

0003ba18: 
.address 0x4091B4
0003ba19: #8229 := low:64[#8228].low:64[#8227]
.address 0x4091B4
0003ba1c: RAX := extract:63:0[#8229]
.address 0x4091B4
0003ba1f: RDX := extract:127:64[#8229]
.address 0x4091B4
0003ba29: goto %0003ba26

0003ba25: 
.address 0x4091B4
0003ba27: when high:64[#8227] = 0 goto %0003ba18
.address 0x4091B4
0003ba28: goto %0003ba22

0003ba15: 
.address 0x4091B4
0003ba16: #8228 := #8225 % #8226
.address 0x4091B4
0003ba2c: goto %0003ba25

0003ba12: 
.address 0x4091B4
0003ba13: #8227 := #8225 / #8226
.address 0x4091B4
0003ba2d: goto %0003ba15

0003ba26: 
.address 0x4091B4
0003ba33: goto %0003ba2f

0003ba0e: 
.address 0x4091B4
0003ba0f: call %0000737f with noreturn

0003ba2e: 
.address 0x4091B4
0003ba30: when #8226 = 0 goto %0003ba0e
.address 0x4091B4
0003ba31: goto %0003ba12

0003ba0b: 
.address 0x4091B4
0003ba0c: #8225 := RDX.RAX
.address 0x4091B4
0003ba47: goto %0003ba2e

0003ba2f: 
.address 0x4091B4
0003ba36: CF := unknown[bits]:u1
.address 0x4091B4
0003ba39: OF := unknown[bits]:u1
.address 0x4091B4
0003ba3c: SF := unknown[bits]:u1
.address 0x4091B4
0003ba3f: ZF := unknown[bits]:u1
.address 0x4091B4
0003ba42: AF := unknown[bits]:u1
.address 0x4091B4
0003ba45: PF := unknown[bits]:u1
0004489d: goto %0003ba49

.address 0x4091B7
0003ba49: 
.address 0x4091B7
0003ba4e: R9 := RDX
.address 0x4091BA
0003ba55: goto %0003b8ce

.address 0x409148
0003b7bb: 
.address 0x409148
0003b7cb: RAX := low:64[R13 + R8]
.address 0x40914D
0003b7d8: RDX := 0
.address 0x40914D
0003b7db: AF := unknown[bits]:u1
.address 0x40914D
0003b7de: ZF := 1
.address 0x40914D
0003b7e1: PF := 1
.address 0x40914D
0003b7e4: OF := 0
.address 0x40914D
0003b7e7: CF := 0
.address 0x40914D
0003b7ea: SF := 0
.address 0x40914F
0003b803: #8204 := pad:128[R8]
.address 0x40914F
0003b842: goto %0003b805

0003b81c: 
.address 0x40914F
0003b81d: call %0000737f with noreturn

0003b812: 
.address 0x40914F
0003b813: #8207 := low:64[#8206].low:64[#8205]
.address 0x40914F
0003b816: RAX := extract:63:0[#8207]
.address 0x40914F
0003b819: RDX := extract:127:64[#8207]
.address 0x40914F
0003b823: goto %0003b820

0003b81f: 
.address 0x40914F
0003b821: when high:64[#8205] = 0 goto %0003b812
.address 0x40914F
0003b822: goto %0003b81c

0003b80f: 
.address 0x40914F
0003b810: #8206 := #8203 % #8204
.address 0x40914F
0003b826: goto %0003b81f

0003b80c: 
.address 0x40914F
0003b80d: #8205 := #8203 / #8204
.address 0x40914F
0003b827: goto %0003b80f

0003b820: 
.address 0x40914F
0003b82d: goto %0003b829

0003b808: 
.address 0x40914F
0003b809: call %0000737f with noreturn

0003b828: 
.address 0x40914F
0003b82a: when #8204 = 0 goto %0003b808
.address 0x40914F
0003b82b: goto %0003b80c

0003b805: 
.address 0x40914F
0003b806: #8203 := RDX.RAX
.address 0x40914F
0003b841: goto %0003b828

0003b829: 
.address 0x40914F
0003b830: CF := unknown[bits]:u1
.address 0x40914F
0003b833: OF := unknown[bits]:u1
.address 0x40914F
0003b836: SF := unknown[bits]:u1
.address 0x40914F
0003b839: ZF := unknown[bits]:u1
.address 0x40914F
0003b83c: AF := unknown[bits]:u1
.address 0x40914F
0003b83f: PF := unknown[bits]:u1
0004489e: goto %0003b843

.address 0x409152
0003b843: 
.address 0x409152
0003b84e: RDX := 0
.address 0x409152
0003b851: AF := unknown[bits]:u1
.address 0x409152
0003b854: ZF := 1
.address 0x409152
0003b857: PF := 1
.address 0x409152
0003b85a: OF := 0
.address 0x409152
0003b85d: CF := 0
.address 0x409152
0003b860: SF := 0
.address 0x409154
0003b867: R9 := RAX
.address 0x409157
0003b86e: RAX := RBP
.address 0x40915A
0003b887: #8209 := pad:128[R9]
.address 0x40915A
0003b8c6: goto %0003b889

0003b8a0: 
.address 0x40915A
0003b8a1: call %0000737f with noreturn

0003b896: 
.address 0x40915A
0003b897: #8212 := low:64[#8211].low:64[#8210]
.address 0x40915A
0003b89a: RAX := extract:63:0[#8212]
.address 0x40915A
0003b89d: RDX := extract:127:64[#8212]
.address 0x40915A
0003b8a7: goto %0003b8a4

0003b8a3: 
.address 0x40915A
0003b8a5: when high:64[#8210] = 0 goto %0003b896
.address 0x40915A
0003b8a6: goto %0003b8a0

0003b893: 
.address 0x40915A
0003b894: #8211 := #8208 % #8209
.address 0x40915A
0003b8aa: goto %0003b8a3

0003b890: 
.address 0x40915A
0003b891: #8210 := #8208 / #8209
.address 0x40915A
0003b8ab: goto %0003b893

0003b8a4: 
.address 0x40915A
0003b8b1: goto %0003b8ad

0003b88c: 
.address 0x40915A
0003b88d: call %0000737f with noreturn

0003b8ac: 
.address 0x40915A
0003b8ae: when #8209 = 0 goto %0003b88c
.address 0x40915A
0003b8af: goto %0003b890

0003b889: 
.address 0x40915A
0003b88a: #8208 := RDX.RAX
.address 0x40915A
0003b8c5: goto %0003b8ac

0003b8ad: 
.address 0x40915A
0003b8b4: CF := unknown[bits]:u1
.address 0x40915A
0003b8b7: OF := unknown[bits]:u1
.address 0x40915A
0003b8ba: SF := unknown[bits]:u1
.address 0x40915A
0003b8bd: ZF := unknown[bits]:u1
.address 0x40915A
0003b8c0: AF := unknown[bits]:u1
.address 0x40915A
0003b8c3: PF := unknown[bits]:u1
0004489f: goto %0003b8c7

.address 0x40915D
0003b8c7: 
.address 0x40915D
0003b8cc: R9 := RAX
000448a0: goto %0003b8ce

.address 0x409160
0003b8ce: 
.address 0x409160
0003b8d3: RDX := mem[RCX + 0x10, el]:u64
.address 0x409164
0003b8e0: #8213 := R9 - RSI
.address 0x409164
0003b8e3: CF := R9 < RSI
.address 0x409164
0003b8e6: OF := high:1[(R9 ^ RSI) & (R9 ^ #8213)]
.address 0x409164
0003b8e9: AF := 0x10 = (0x10 & (#8213 ^ R9 ^ RSI))
.address 0x409164
0003b8ec: PF := ~low:1[let $1 = #8213 >> 4 ^ #8213 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409164
0003b8ef: SF := high:1[#8213]
.address 0x409164
0003b8f2: ZF := 0 = #8213
.address 0x409167
0003b8f9: RAX := R10
.address 0x40916A
0003b900: RAX := if ~ZF then R11 else RAX
.address 0x40916E
0003b907: RSI := low:64[RDX + (R9 << 3)]
.address 0x409172
0003b90e: RDX := mem[RSI, el]:u64
.address 0x409175
0003b91b: #8215 := RDX - RAX
.address 0x409175
0003b91e: CF := RDX < RAX
.address 0x409175
0003b921: OF := high:1[(RDX ^ RAX) & (RDX ^ #8215)]
.address 0x409175
0003b924: AF := 0x10 = (0x10 & (#8215 ^ RDX ^ RAX))
.address 0x409175
0003b927: PF := ~low:1[let $1 = #8215 >> 4 ^ #8215 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409175
0003b92a: SF := high:1[#8215]
.address 0x409175
0003b92d: ZF := 0 = #8215
.address 0x409178
0003b936: when ~CF goto %0003b739
000448a1: goto %0003b93c

.address 0x40917A
0003b93c: 
.address 0x40917A
0003b941: R9 := mem[RCX + 8, el]:u64
.address 0x40917E
0003b950: #8217 := R9
.address 0x40917E
0003b953: #8218 := RDX
.address 0x40917E
0003b956: R9 := R9 - RDX
.address 0x40917E
0003b959: CF := #8217 < #8218
.address 0x40917E
0003b95c: OF := high:1[(#8217 ^ #8218) & (#8217 ^ R9)]
.address 0x40917E
0003b95f: AF := 0x10 = (0x10 & (R9 ^ #8217 ^ #8218))
.address 0x40917E
0003b962: PF := ~low:1[let $1 = R9 >> 4 ^ R9 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40917E
0003b965: SF := high:1[R9]
.address 0x40917E
0003b968: ZF := 0 = R9
.address 0x409181
0003b96f: RDX := R9
.address 0x409184
0003b97e: #8220 := RDX
.address 0x409184
0003b981: #8221 := RAX
.address 0x409184
0003b984: RDX := RDX + #8221
.address 0x409184
0003b987: CF := RDX < #8220
.address 0x409184
0003b98a: OF := high:1[#8220] = high:1[#8221] & (high:1[#8220] | high:1[RDX]) & ~(
high:1[#8220] & high:1[RDX])
.address 0x409184
0003b98d: AF := 0x10 = (0x10 & (RDX ^ #8220 ^ #8221))
.address 0x409184
0003b990: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x409184
0003b993: SF := high:1[RDX]
.address 0x409184
0003b996: ZF := 0 = RDX
.address 0x409187
0003b99d: mem := mem with [RCX + 8, el]:u64 <- RDX
.address 0x40918B
0003b9a4: mem := mem with [RSI, el]:u64 <- RAX
.address 0x40918E
0003b9b1: #8223 := mem[RCX + 8, el]:u64 - R14
.address 0x40918E
0003b9b4: CF := mem[RCX + 8, el]:u64 < R14
.address 0x40918E
0003b9b7: OF := high:1[(mem[RCX + 8, el]:u64 ^ R14) & (mem[RCX + 8, el]:u64 ^ #8223)]
.address 0x40918E
0003b9ba: AF := 0x10 = (0x10 & (#8223 ^ mem[RCX + 8, el]:u64 ^ R14))
.address 0x40918E
0003b9bd: PF := ~low:1[let $1 = #8223 >> 4 ^ #8223 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40918E
0003b9c0: SF := high:1[#8223]
.address 0x40918E
0003b9c3: ZF := 0 = #8223
.address 0x409192
0003b9ca: mem := mem with [RCX] <- pad:8[CF]
000448a2: goto %0003b739

.address 0x409195
0003b739: 
.address 0x409195
0003b750: #8196 := RCX
.address 0x409195
0003b753: RCX := RCX + 0x18
.address 0x409195
0003b756: CF := RCX < #8196
.address 0x409195
0003b759: OF := ~high:1[#8196] & (high:1[#8196] | high:1[RCX]) & ~(high:1[#8196] & high:1[RCX])
.address 0x409195
0003b75c: AF := 0x10 = (0x10 & (RCX ^ #8196 ^ 0x18))
.address 0x409195
0003b75f: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x409195
0003b762: SF := high:1[RCX]
.address 0x409195
0003b765: ZF := 0 = RCX
.address 0x409199
0003b772: #8199 := RBX - R8
.address 0x409199
0003b775: CF := RBX < R8
.address 0x409199
0003b778: OF := high:1[(RBX ^ R8) & (RBX ^ #8199)]
.address 0x409199
0003b77b: AF := 0x10 = (0x10 & (#8199 ^ RBX ^ R8))
.address 0x409199
0003b77e: PF := ~low:1[let $1 = #8199 >> 4 ^ #8199 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409199
0003b781: SF := high:1[#8199]
.address 0x409199
0003b784: ZF := 0 = #8199
.address 0x40919C
0003b78b: RSI := R8
.address 0x40919F
0003b794: when ZF goto %0003b675
000448a3: goto %0003b70c

.address 0x4091C0
0003b675: 
.address 0x4091C0
0003b68c: #8189 := RBP
.address 0x4091C0
0003b68f: RBP := RBP + 1
.address 0x4091C0
0003b692: CF := RBP < #8189
.address 0x4091C0
0003b695: OF := ~high:1[#8189] & (high:1[#8189] | high:1[RBP]) & ~(high:1[#8189] & high:1[RBP])
.address 0x4091C0
0003b698: AF := 0x10 = (0x10 & (RBP ^ #8189 ^ 1))
.address 0x4091C0
0003b69b: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4091C0
0003b69e: SF := high:1[RBP]
.address 0x4091C0
0003b6a1: ZF := 0 = RBP
.address 0x4091C4
0003b6ae: #8192 := RBP - RDI
.address 0x4091C4
0003b6b1: CF := RBP < RDI
.address 0x4091C4
0003b6b4: OF := high:1[(RBP ^ RDI) & (RBP ^ #8192)]
.address 0x4091C4
0003b6b7: AF := 0x10 = (0x10 & (#8192 ^ RBP ^ RDI))
.address 0x4091C4
0003b6ba: PF := ~low:1[let $1 = #8192 >> 4 ^ #8192 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4091C4
0003b6bd: SF := high:1[#8192]
.address 0x4091C4
0003b6c0: ZF := 0 = #8192
.address 0x4091C7
0003b6c9: when CF goto %0003b629
000448a4: goto %00031fa9

.address 0x4091CD
00031fa9: 
.address 0x4091CD
00031fbf: #6929 := RBX - 1
.address 0x4091CD
00031fc2: CF := RBX < 1
.address 0x4091CD
00031fc5: OF := high:1[(RBX ^ 1) & (RBX ^ #6929)]
.address 0x4091CD
00031fc8: AF := 0x10 = (0x10 & (#6929 ^ RBX ^ 1))
.address 0x4091CD
00031fcb: PF := ~low:1[let $1 = #6929 >> 4 ^ #6929 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4091CD
00031fce: SF := high:1[#6929]
.address 0x4091CD
00031fd1: ZF := 0 = #6929
.address 0x4091D1
00031fdb: when CF | ZF goto %00031fd5
000448a5: goto %0003b4fe

.address 0x4091D3
0003b4fe: 
.address 0x4091D3
0003b503: RDX := mem[0x621208, el]:u64
.address 0x4091DA
0003b50a: RAX := low:64[RBX + (RBX << 1)]
.address 0x4091DE
0003b518: #8173 := RAX
.address 0x4091DE
0003b51b: RAX := RAX << 3
.address 0x4091DE
0003b51e: CF := low:1[#8173 >> 0x3D]
.address 0x4091DE
0003b521: SF := high:1[RAX]
.address 0x4091DE
0003b524: ZF := 0 = RAX
.address 0x4091DE
0003b527: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4091DE
0003b52a: AF := unknown[bits]:u1
.address 0x4091DE
0003b52d: OF := unknown[bits]:u1
.address 0x4091E2
0003b53a: #8175 := mem[RDX + RAX - 0x18]
.address 0x4091E2
0003b53d: CF := mem[RDX + RAX - 0x18] < 0
.address 0x4091E2
0003b540: OF := high:1[mem[RDX + RAX - 0x18] & (mem[RDX + RAX - 0x18] ^ #8175)]
.address 0x4091E2
0003b543: AF := 0x10 = (0x10 & (#8175 ^ mem[RDX + RAX - 0x18]))
.address 0x4091E2
0003b546: PF := ~low:1[let $1 = #8175 >> 4 ^ #8175 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4091E2
0003b549: SF := high:1[#8175]
.address 0x4091E2
0003b54c: ZF := 0 = #8175
.address 0x4091E7
0003b555: when ~ZF goto %00031fd5
000448a6: goto %0003b55b

.address 0x4091E9
0003b55b: 
.address 0x4091E9
0003b560: RAX := low:64[RDX + RAX - 0x30]
.address 0x4091EE
0003b568: goto %0003b564

.address 0x4091FA
0003b564: 
.address 0x4091FA
0003b575: #8177 := RBX
.address 0x4091FA
0003b578: RBX := RBX - 1
.address 0x4091FA
0003b57b: CF := #8177 < 1
.address 0x4091FA
0003b57e: OF := high:1[(#8177 ^ 1) & (#8177 ^ RBX)]
.address 0x4091FA
0003b581: AF := 0x10 = (0x10 & (RBX ^ #8177 ^ 1))
.address 0x4091FA
0003b584: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4091FA
0003b587: SF := high:1[RBX]
.address 0x4091FA
0003b58a: ZF := 0 = RBX
.address 0x4091FE
0003b597: #8180 := RBX - 1
.address 0x4091FE
0003b59a: CF := RBX < 1
.address 0x4091FE
0003b59d: OF := high:1[(RBX ^ 1) & (RBX ^ #8180)]
.address 0x4091FE
0003b5a0: AF := 0x10 = (0x10 & (#8180 ^ RBX ^ 1))
.address 0x4091FE
0003b5a3: PF := ~low:1[let $1 = #8180 >> 4 ^ #8180 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4091FE
0003b5a6: SF := high:1[#8180]
.address 0x4091FE
0003b5a9: ZF := 0 = #8180
.address 0x409202
0003b5b3: when ~ZF goto %0003b5ad
000448a7: goto %00031fd5

.address 0x4091F0
0003b5ad: 
.address 0x4091F0
0003b5c4: #8182 := RAX
.address 0x4091F0
0003b5c7: RAX := RAX - 0x18
.address 0x4091F0
0003b5ca: CF := #8182 < 0x18
.address 0x4091F0
0003b5cd: OF := high:1[(#8182 ^ 0x18) & (#8182 ^ RAX)]
.address 0x4091F0
0003b5d0: AF := 0x10 = (0x10 & (RAX ^ #8182 ^ 0x18))
.address 0x4091F0
0003b5d3: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4091F0
0003b5d6: SF := high:1[RAX]
.address 0x4091F0
0003b5d9: ZF := 0 = RAX
.address 0x4091F4
0003b5e6: #8185 := mem[RAX + 0x18]
.address 0x4091F4
0003b5e9: CF := mem[RAX + 0x18] < 0
.address 0x4091F4
0003b5ec: OF := high:1[mem[RAX + 0x18] & (mem[RAX + 0x18] ^ #8185)]
.address 0x4091F4
0003b5ef: AF := 0x10 = (0x10 & (#8185 ^ mem[RAX + 0x18]))
.address 0x4091F4
0003b5f2: PF := ~low:1[let $1 = #8185 >> 4 ^ #8185 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4091F4
0003b5f5: SF := high:1[#8185]
.address 0x4091F4
0003b5f8: ZF := 0 = #8185
.address 0x4091F8
0003b601: when ~ZF goto %00031fd5
000448a8: goto %0003b564

.address 0x409204
00031fd5: 
.address 0x409204
00031fe5: RAX := RBX
.address 0x409207
00031fed: RBX := mem[RSP, el]:u64
.address 0x409207
00031ff0: RSP := RSP + 8
.address 0x409208
00031ff8: RBP := mem[RSP, el]:u64
.address 0x409208
00031ffb: RSP := RSP + 8
.address 0x409209
00032003: R12 := mem[RSP, el]:u64
.address 0x409209
00032006: RSP := RSP + 8
.address 0x40920B
0003200e: R13 := mem[RSP, el]:u64
.address 0x40920B
00032011: RSP := RSP + 8
.address 0x40920D
00032019: R14 := mem[RSP, el]:u64
.address 0x40920D
0003201c: RSP := RSP + 8
.address 0x40920F
00032025: #6931 := mem[RSP, el]:u64
.address 0x40920F
00032028: RSP := RSP + 8
.address 0x40920F
0003202c: call #6931 with noreturn


.address 0x409270
00044018: sub sub_409270()
.address 0x409270
0003259c: 
.address 0x409270
000325a3: #6984 := R15
.address 0x409270
000325a6: RSP := RSP - 8
.address 0x409270
000325a9: mem := mem with [RSP, el]:u64 <- #6984
.address 0x409272
000325b2: #6985 := R14
.address 0x409272
000325b5: RSP := RSP - 8
.address 0x409272
000325b8: mem := mem with [RSP, el]:u64 <- #6985
.address 0x409274
000325c1: #6986 := R13
.address 0x409274
000325c4: RSP := RSP - 8
.address 0x409274
000325c7: mem := mem with [RSP, el]:u64 <- #6986
.address 0x409276
000325d0: #6987 := R12
.address 0x409276
000325d3: RSP := RSP - 8
.address 0x409276
000325d6: mem := mem with [RSP, el]:u64 <- #6987
.address 0x409278
000325df: #6988 := RBP
.address 0x409278
000325e2: RSP := RSP - 8
.address 0x409278
000325e5: mem := mem with [RSP, el]:u64 <- #6988
.address 0x409279
000325ee: #6989 := RBX
.address 0x409279
000325f1: RSP := RSP - 8
.address 0x409279
000325f4: mem := mem with [RSP, el]:u64 <- #6989
.address 0x40927A
00032602: #6990 := RSP
.address 0x40927A
00032605: RSP := RSP - 0x18
.address 0x40927A
00032608: CF := #6990 < 0x18
.address 0x40927A
0003260b: OF := high:1[(#6990 ^ 0x18) & (#6990 ^ RSP)]
.address 0x40927A
0003260e: AF := 0x10 = (0x10 & (RSP ^ #6990 ^ 0x18))
.address 0x40927A
00032611: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40927A
00032614: SF := high:1[RSP]
.address 0x40927A
00032617: ZF := 0 = RSP
.address 0x40927E
00032624: #6993 := mem[0x6213B0, el]:u64
.address 0x40927E
00032627: CF := mem[0x6213B0, el]:u64 < 0
.address 0x40927E
0003262a: OF := high:1[mem[0x6213B0, el]:u64 & (mem[0x6213B0, el]:u64 ^ #6993)]
.address 0x40927E
0003262d: AF := 0x10 = (0x10 & (#6993 ^ mem[0x6213B0, el]:u64))
.address 0x40927E
00032630: PF := ~low:1[let $1 = #6993 >> 4 ^ #6993 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40927E
00032633: SF := high:1[#6993]
.address 0x40927E
00032636: ZF := 0 = #6993
.address 0x409286
00032640: when ZF goto %0003263a
000448a9: goto %0003b4a8

.address 0x40928C
0003b4a8: 
.address 0x40928C
0003b4ad: R14 := pad:64[low:32[RDI]]
.address 0x40928F
0003b4ba: R13 := 0
.address 0x40928F
0003b4bd: AF := unknown[bits]:u1
.address 0x40928F
0003b4c0: ZF := 1
.address 0x40928F
0003b4c3: PF := 1
.address 0x40928F
0003b4c6: OF := 0
.address 0x40928F
0003b4c9: CF := 0
.address 0x40928F
0003b4cc: SF := 0
.address 0x409292
0003b4d9: RBX := 0
.address 0x409292
0003b4dc: AF := unknown[bits]:u1
.address 0x409292
0003b4df: ZF := 1
.address 0x409292
0003b4e2: PF := 1
.address 0x409292
0003b4e5: OF := 0
.address 0x409292
0003b4e8: CF := 0
.address 0x409292
0003b4eb: SF := 0
.address 0x409294
0003b4f2: R15 := 0xFFFFFFFFFFFFFFFD
.address 0x40929B
0003b4f9: goto %0003b278

.address 0x4092C8
0003b278: 
.address 0x4092C8
0003b283: #8155 := mem[0x6212B0, el]:u64
.address 0x4092C8
0003b286: CF := mem[0x6212B0, el]:u64 < 0
.address 0x4092C8
0003b289: OF := high:1[mem[0x6212B0, el]:u64 & (mem[0x6212B0, el]:u64 ^ #8155)]
.address 0x4092C8
0003b28c: AF := 0x10 = (0x10 & (#8155 ^ mem[0x6212B0, el]:u64))
.address 0x4092C8
0003b28f: PF := ~low:1[let $1 = #8155 >> 4 ^ #8155 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4092C8
0003b292: SF := high:1[#8155]
.address 0x4092C8
0003b295: ZF := 0 = #8155
.address 0x4092D0
0003b29c: RAX := mem[0x6213A0, el]:u64
.address 0x4092D7
0003b2a3: R12 := mem[RAX + (RBX << 3), el]:u64
.address 0x4092DB
0003b2ad: when ZF goto %0003b2a7
000448aa: goto %0003b2f3

.address 0x4092DD
0003b2f3: 
.address 0x4092DD
0003b2f8: RDI := R12
.address 0x4092E0
0003b301: RSP := RSP - 8
.address 0x4092E0
0003b304: mem := mem with [RSP, el]:u64 <- 0x4092E5
.address 0x4092E0
0003b307: call @sub_408db0 with return %0003b309

.address 0x4092E5
0003b309: 
.address 0x4092E5
0003b314: #8159 := RBX
.address 0x4092E5
0003b317: OF := 0
.address 0x4092E5
0003b31a: CF := 0
.address 0x4092E5
0003b31d: AF := unknown[bits]:u1
.address 0x4092E5
0003b320: PF := ~low:1[let $1 = #8159 >> 4 ^ #8159 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4092E5
0003b323: SF := high:1[#8159]
.address 0x4092E5
0003b326: ZF := 0 = #8159
.address 0x4092E8
0003b330: when ZF goto %0003b32a
000448ab: goto %0003b36d

.address 0x4093C0
0003b32a: 
.address 0x4093C0
0003b33a: RBP := R13
.address 0x4093C3
0003b349: #8161 := R13
.address 0x4093C3
0003b34c: #8162 := RAX
.address 0x4093C3
0003b34f: R13 := R13 + #8162
.address 0x4093C3
0003b352: CF := R13 < #8161
.address 0x4093C3
0003b355: OF := high:1[#8161] = high:1[#8162] & (high:1[#8161] | high:1[R13]) & ~(
high:1[#8161] & high:1[R13])
.address 0x4093C3
0003b358: AF := 0x10 = (0x10 & (R13 ^ #8161 ^ #8162))
.address 0x4093C3
0003b35b: PF := ~low:1[let $1 = R13 >> 4 ^ R13 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4093C3
0003b35e: SF := high:1[R13]
.address 0x4093C3
0003b361: ZF := 0 = R13
.address 0x4093C6
0003b368: goto %0003b207

.address 0x4092EE
0003b36d: 
.address 0x4092EE
0003b372: RDX := mem[0x6212B0, el]:u64
.address 0x4092F5
0003b379: RBP := low:64[R13 + 2]
.address 0x4092F9
0003b380: RCX := low:64[RAX + RBP]
.address 0x4092FD
0003b38d: #8164 := RDX
.address 0x4092FD
0003b390: OF := 0
.address 0x4092FD
0003b393: CF := 0
.address 0x4092FD
0003b396: AF := unknown[bits]:u1
.address 0x4092FD
0003b399: PF := ~low:1[let $1 = #8164 >> 4 ^ #8164 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4092FD
0003b39c: SF := high:1[#8164]
.address 0x4092FD
0003b39f: ZF := 0 = #8164
.address 0x409300
0003b3a8: when ZF goto %0003b11f
000448ac: goto %0003b3ae

.address 0x409306
0003b3ae: 
.address 0x409306
0003b3b9: #8166 := RDX - RCX
.address 0x409306
0003b3bc: CF := RDX < RCX
.address 0x409306
0003b3bf: OF := high:1[(RDX ^ RCX) & (RDX ^ #8166)]
.address 0x409306
0003b3c2: AF := 0x10 = (0x10 & (#8166 ^ RDX ^ RCX))
.address 0x409306
0003b3c5: PF := ~low:1[let $1 = #8166 >> 4 ^ #8166 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409306
0003b3c8: SF := high:1[#8166]
.address 0x409306
0003b3cb: ZF := 0 = #8166
.address 0x409309
0003b3d5: when CF | ZF goto %0003b3cf
000448ad: goto %0003b40e

.address 0x40930B
0003b40e: 
.address 0x40930B
0003b413: RDX := R15
.address 0x40930E
0003b422: #8168 := RDX
.address 0x40930E
0003b425: #8169 := RAX
.address 0x40930E
0003b428: RDX := RDX - RAX
.address 0x40930E
0003b42b: CF := #8168 < #8169
.address 0x40930E
0003b42e: OF := high:1[(#8168 ^ #8169) & (#8168 ^ RDX)]
.address 0x40930E
0003b431: AF := 0x10 = (0x10 & (RDX ^ #8168 ^ #8169))
.address 0x40930E
0003b434: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40930E
0003b437: SF := high:1[RDX]
.address 0x40930E
0003b43a: ZF := 0 = RDX
.address 0x409311
0003b447: #8171 := RDX - R13
.address 0x409311
0003b44a: CF := RDX < R13
.address 0x409311
0003b44d: OF := high:1[(RDX ^ R13) & (RDX ^ #8171)]
.address 0x409311
0003b450: AF := 0x10 = (0x10 & (#8171 ^ RDX ^ R13))
.address 0x409311
0003b453: PF := ~low:1[let $1 = #8171 >> 4 ^ #8171 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409311
0003b456: SF := high:1[#8171]
.address 0x409311
0003b459: ZF := 0 = #8171
.address 0x409314
0003b462: when ~CF goto %0003b11f
000448ae: goto %0003b3cf

.address 0x4093B8
0003b11f: 
.address 0x4093B8
0003b124: R13 := RCX
.address 0x4093BB
0003b12c: goto %0003b128

.address 0x40931A
0003b3cf: 
.address 0x40931A
0003b3df: R13 := RAX
.address 0x40931D
0003b3e6: RCX := 0xA
.address 0x409322
0003b3ed: RDX := 0xA
.address 0x409327
0003b3fa: RBP := 0
.address 0x409327
0003b3fd: AF := unknown[bits]:u1
.address 0x409327
0003b400: ZF := 1
.address 0x409327
0003b403: PF := 1
.address 0x409327
0003b406: OF := 0
.address 0x409327
0003b409: CF := 0
.address 0x409327
0003b40c: SF := 0
000448af: goto %0003b13d

.address 0x4092A0
0003b2a7: 
.address 0x4092A0
0003b2bd: #8157 := RBX
.address 0x4092A0
0003b2c0: OF := 0
.address 0x4092A0
0003b2c3: CF := 0
.address 0x4092A0
0003b2c6: AF := unknown[bits]:u1
.address 0x4092A0
0003b2c9: PF := ~low:1[let $1 = #8157 >> 4 ^ #8157 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4092A0
0003b2cc: SF := high:1[#8157]
.address 0x4092A0
0003b2cf: ZF := 0 = #8157
.address 0x4092A3
0003b2d6: RBP := R13
.address 0x4092A6
0003b2e0: when ~ZF goto %0003b2da
000448b0: goto %0003b207

.address 0x409370
0003b2da: 
.address 0x409370
0003b2ea: RBP := low:64[R13 + 2]
.address 0x409374
0003b2f1: R13 := RBP
000448b1: goto %0003b128

.address 0x409377
0003b128: 
.address 0x409377
0003b132: RCX := 0x20
.address 0x40937C
0003b139: RDX := 0x20
.address 0x409381
0003b141: goto %0003b13d

.address 0x409329
0003b13d: 
.address 0x409329
0003b147: RDI := mem[0x620288, el]:u64
.address 0x409330
0003b14e: RAX := mem[RDI + 0x28, el]:u64
.address 0x409334
0003b15b: #8146 := RAX - mem[RDI + 0x30, el]:u64
.address 0x409334
0003b15e: CF := RAX < mem[RDI + 0x30, el]:u64
.address 0x409334
0003b161: OF := high:1[(RAX ^ mem[RDI + 0x30, el]:u64) & (RAX ^ #8146)]
.address 0x409334
0003b164: AF := 0x10 = (0x10 & (#8146 ^ RAX ^ mem[RDI + 0x30, el]:u64))
.address 0x409334
0003b167: PF := ~low:1[let $1 = #8146 >> 4 ^ #8146 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409334
0003b16a: SF := high:1[#8146]
.address 0x409334
0003b16d: ZF := 0 = #8146
.address 0x409338
0003b177: when ~CF goto %0003b171
000448b2: goto %0003b48d

.address 0x4093E0
0003b171: 
.address 0x4093E0
0003b181: RSI := pad:64[extend:32[low:8[R14]]]
.address 0x4093E4
0003b188: mem := mem with [RSP + 0xC, el]:u32 <- low:32[RCX]
.address 0x4093E8
0003b18f: mem := mem with [RSP + 0xB] <- low:8[RDX]
.address 0x4093EC
0003b198: RSP := RSP - 8
.address 0x4093EC
0003b19b: mem := mem with [RSP, el]:u64 <- 0x4093F1
.address 0x4093EC
0003b19e: call @sub_4039d0 with return %0003b1a0

.address 0x4093F1
0003b1a0: 
.address 0x4093F1
0003b1a5: RDX := pad:64[pad:32[mem[RSP + 0xB]]]
.address 0x4093F6
0003b1ac: RCX := pad:64[mem[RSP + 0xC, el]:u32]
.address 0x4093FA
0003b1b4: goto %0003b1b0

.address 0x40933E
0003b48d: 
.address 0x40933E
0003b492: RSI := low:64[RAX + 1]
.address 0x409342
0003b499: mem := mem with [RDI + 0x28, el]:u64 <- RSI
.address 0x409346
0003b4a0: mem := mem with [RAX] <- low:8[R14]
000448b3: goto %0003b1b0

.address 0x409349
0003b1b0: 
.address 0x409349
0003b1ba: RDI := mem[0x620288, el]:u64
.address 0x409350
0003b1c1: RAX := mem[RDI + 0x28, el]:u64
.address 0x409354
0003b1ce: #8148 := RAX - mem[RDI + 0x30, el]:u64
.address 0x409354
0003b1d1: CF := RAX < mem[RDI + 0x30, el]:u64
.address 0x409354
0003b1d4: OF := high:1[(RAX ^ mem[RDI + 0x30, el]:u64) & (RAX ^ #8148)]
.address 0x409354
0003b1d7: AF := 0x10 = (0x10 & (#8148 ^ RAX ^ mem[RDI + 0x30, el]:u64))
.address 0x409354
0003b1da: PF := ~low:1[let $1 = #8148 >> 4 ^ #8148 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409354
0003b1dd: SF := high:1[#8148]
.address 0x409354
0003b1e0: ZF := 0 = #8148
.address 0x409358
0003b1ea: when ~CF goto %0003b1e4
000448b4: goto %0003b46b

.address 0x4093D0
0003b1e4: 
.address 0x4093D0
0003b1f4: RSI := pad:64[low:32[RCX]]
.address 0x4093D2
0003b1fd: RSP := RSP - 8
.address 0x4093D2
0003b200: mem := mem with [RSP, el]:u64 <- 0x4093D7
.address 0x4093D2
0003b203: call @sub_4039d0 with return %0003b205

.address 0x4093D7
0003b205: 
.address 0x4093D7
0003b20b: goto %0003b207

.address 0x40935A
0003b46b: 
.address 0x40935A
0003b470: RCX := low:64[RAX + 1]
.address 0x40935E
0003b477: mem := mem with [RDI + 0x28, el]:u64 <- RCX
.address 0x409362
0003b47e: mem := mem with [RAX] <- low:8[RDX]
.address 0x409364
0003b485: goto %0003b207

.address 0x4092AC
0003b207: 
.address 0x4092AC
0003b211: RSI := RBP
.address 0x4092AF
0003b218: RDI := R12
.address 0x4092B2
0003b226: #8150 := RBX
.address 0x4092B2
0003b229: RBX := RBX + 1
.address 0x4092B2
0003b22c: CF := RBX < #8150
.address 0x4092B2
0003b22f: OF := ~high:1[#8150] & (high:1[#8150] | high:1[RBX]) & ~(high:1[#8150] & high:1[RBX])
.address 0x4092B2
0003b232: AF := 0x10 = (0x10 & (RBX ^ #8150 ^ 1))
.address 0x4092B2
0003b235: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4092B2
0003b238: SF := high:1[RBX]
.address 0x4092B2
0003b23b: ZF := 0 = RBX
.address 0x4092B6
0003b244: RSP := RSP - 8
.address 0x4092B6
0003b247: mem := mem with [RSP, el]:u64 <- 0x4092BB
.address 0x4092B6
0003b24a: call @sub_408180 with return %0003b24c

.address 0x4092BB
0003b24c: 
.address 0x4092BB
0003b257: #8153 := mem[0x6213B0, el]:u64 - RBX
.address 0x4092BB
0003b25a: CF := mem[0x6213B0, el]:u64 < RBX
.address 0x4092BB
0003b25d: OF := high:1[(mem[0x6213B0, el]:u64 ^ RBX) & (mem[0x6213B0, el]:u64 ^ #8153)]
.address 0x4092BB
0003b260: AF := 0x10 = (0x10 & (#8153 ^ mem[0x6213B0, el]:u64 ^ RBX))
.address 0x4092BB
0003b263: PF := ~low:1[let $1 = #8153 >> 4 ^ #8153 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4092BB
0003b266: SF := high:1[#8153]
.address 0x4092BB
0003b269: ZF := 0 = #8153
.address 0x4092C2
0003b272: when CF | ZF goto %0003263a
000448b5: goto %0003b278

.address 0x409388
0003263a: 
.address 0x409388
0003264a: RDI := mem[0x620288, el]:u64
.address 0x40938F
00032651: RAX := mem[RDI + 0x28, el]:u64
.address 0x409393
0003265e: #6995 := RAX - mem[RDI + 0x30, el]:u64
.address 0x409393
00032661: CF := RAX < mem[RDI + 0x30, el]:u64
.address 0x409393
00032664: OF := high:1[(RAX ^ mem[RDI + 0x30, el]:u64) & (RAX ^ #6995)]
.address 0x409393
00032667: AF := 0x10 = (0x10 & (#6995 ^ RAX ^ mem[RDI + 0x30, el]:u64))
.address 0x409393
0003266a: PF := ~low:1[let $1 = #6995 >> 4 ^ #6995 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409393
0003266d: SF := high:1[#6995]
.address 0x409393
00032670: ZF := 0 = #6995
.address 0x409397
0003267a: when ~CF goto %00032674
000448b6: goto %0003b092

.address 0x409400
00032674: 
.address 0x409400
0003268b: #6997 := RSP
.address 0x409400
0003268e: RSP := RSP + 0x18
.address 0x409400
00032691: CF := RSP < #6997
.address 0x409400
00032694: OF := ~high:1[#6997] & (high:1[#6997] | high:1[RSP]) & ~(high:1[#6997] & high:1[RSP])
.address 0x409400
00032697: AF := 0x10 = (0x10 & (RSP ^ #6997 ^ 0x18))
.address 0x409400
0003269a: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x409400
0003269d: SF := high:1[RSP]
.address 0x409400
000326a0: ZF := 0 = RSP
.address 0x409404
000326a7: RSI := 0xA
.address 0x409409
000326af: RBX := mem[RSP, el]:u64
.address 0x409409
000326b2: RSP := RSP + 8
.address 0x40940A
000326ba: RBP := mem[RSP, el]:u64
.address 0x40940A
000326bd: RSP := RSP + 8
.address 0x40940B
000326c5: R12 := mem[RSP, el]:u64
.address 0x40940B
000326c8: RSP := RSP + 8
.address 0x40940D
000326d0: R13 := mem[RSP, el]:u64
.address 0x40940D
000326d3: RSP := RSP + 8
.address 0x40940F
000326db: R14 := mem[RSP, el]:u64
.address 0x40940F
000326de: RSP := RSP + 8
.address 0x409411
000326e6: R15 := mem[RSP, el]:u64
.address 0x409411
000326e9: RSP := RSP + 8
.address 0x409413
000326f0: call @sub_4039d0 with noreturn

.address 0x409399
0003b092: 
.address 0x409399
0003b097: RDX := low:64[RAX + 1]
.address 0x40939D
0003b09e: mem := mem with [RDI + 0x28, el]:u64 <- RDX
.address 0x4093A1
0003b0a5: mem := mem with [RAX] <- 0xA
.address 0x4093A4
0003b0b3: #8142 := RSP
.address 0x4093A4
0003b0b6: RSP := RSP + 0x18
.address 0x4093A4
0003b0b9: CF := RSP < #8142
.address 0x4093A4
0003b0bc: OF := ~high:1[#8142] & (high:1[#8142] | high:1[RSP]) & ~(high:1[#8142] & high:1[RSP])
.address 0x4093A4
0003b0bf: AF := 0x10 = (0x10 & (RSP ^ #8142 ^ 0x18))
.address 0x4093A4
0003b0c2: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4093A4
0003b0c5: SF := high:1[RSP]
.address 0x4093A4
0003b0c8: ZF := 0 = RSP
.address 0x4093A8
0003b0d0: RBX := mem[RSP, el]:u64
.address 0x4093A8
0003b0d3: RSP := RSP + 8
.address 0x4093A9
0003b0db: RBP := mem[RSP, el]:u64
.address 0x4093A9
0003b0de: RSP := RSP + 8
.address 0x4093AA
0003b0e6: R12 := mem[RSP, el]:u64
.address 0x4093AA
0003b0e9: RSP := RSP + 8
.address 0x4093AC
0003b0f1: R13 := mem[RSP, el]:u64
.address 0x4093AC
0003b0f4: RSP := RSP + 8
.address 0x4093AE
0003b0fc: R14 := mem[RSP, el]:u64
.address 0x4093AE
0003b0ff: RSP := RSP + 8
.address 0x4093B0
0003b107: R15 := mem[RSP, el]:u64
.address 0x4093B0
0003b10a: RSP := RSP + 8
.address 0x4093B2
0003b113: #8145 := mem[RSP, el]:u64
.address 0x4093B2
0003b116: RSP := RSP + 8
.address 0x4093B2
0003b11a: call #8145 with noreturn


.address 0x409420
00044027: sub sub_409420()
.address 0x409420
000326f5: 
.address 0x409420
00032700: #7000 := mem[0x621338, el]:u32 - 4
.address 0x409420
00032703: CF := mem[0x621338, el]:u32 < 4
.address 0x409420
00032706: OF := high:1[(mem[0x621338, el]:u32 ^ 4) & (mem[0x621338, el]:u32 ^ #7000)]
.address 0x409420
00032709: AF := 0x10 = (0x10 & (#7000 ^ mem[0x621338, el]:u32 ^ 4))
.address 0x409420
0003270c: PF := ~low:1[let $1 = #7000 >> 4 ^ #7000 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409420
0003270f: SF := high:1[#7000]
.address 0x409420
00032712: ZF := 0 = #7000
.address 0x409427
0003271c: when ~(CF | ZF) goto %00032716
000448b7: goto %0003ae87

.address 0x409778
00032716: 
.address 0x409778
00032728: #7002 := mem[RSP, el]:u64
.address 0x409778
0003272b: RSP := RSP + 8
.address 0x409778
0003272f: call #7002 with noreturn

.address 0x40942D
0003ae87: 
.address 0x40942D
0003ae8e: #8126 := R15
.address 0x40942D
0003ae91: RSP := RSP - 8
.address 0x40942D
0003ae94: mem := mem with [RSP, el]:u64 <- #8126
.address 0x40942F
0003ae9d: #8127 := R14
.address 0x40942F
0003aea0: RSP := RSP - 8
.address 0x40942F
0003aea3: mem := mem with [RSP, el]:u64 <- #8127
.address 0x409431
0003aeaa: RDX := 0x416584
.address 0x409438
0003aeb3: #8128 := R13
.address 0x409438
0003aeb6: RSP := RSP - 8
.address 0x409438
0003aeb9: mem := mem with [RSP, el]:u64 <- #8128
.address 0x40943A
0003aec2: #8129 := R12
.address 0x40943A
0003aec5: RSP := RSP - 8
.address 0x40943A
0003aec8: mem := mem with [RSP, el]:u64 <- #8129
.address 0x40943C
0003aed1: #8130 := RBP
.address 0x40943C
0003aed4: RSP := RSP - 8
.address 0x40943C
0003aed7: mem := mem with [RSP, el]:u64 <- #8130
.address 0x40943D
0003aee0: #8131 := RBX
.address 0x40943D
0003aee3: RSP := RSP - 8
.address 0x40943D
0003aee6: mem := mem with [RSP, el]:u64 <- #8131
.address 0x40943E
0003aef4: #8132 := RSP
.address 0x40943E
0003aef7: RSP := RSP - 0x38
.address 0x40943E
0003aefa: CF := #8132 < 0x38
.address 0x40943E
0003aefd: OF := high:1[(#8132 ^ 0x38) & (#8132 ^ RSP)]
.address 0x40943E
0003af00: AF := 0x10 = (0x10 & (RSP ^ #8132 ^ 0x38))
.address 0x40943E
0003af03: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40943E
0003af06: SF := high:1[RSP]
.address 0x40943E
0003af09: ZF := 0 = RSP
.address 0x409442
0003af10: RAX := pad:64[mem[0x621338, el]:u32]
.address 0x409448
0003af17: RAX := extend:64[mem[RDX + (RAX << 2), el]:u32]
.address 0x40944C
0003af26: #8135 := RAX
.address 0x40944C
0003af29: #8136 := RDX
.address 0x40944C
0003af2c: RAX := RAX + #8136
.address 0x40944C
0003af2f: CF := RAX < #8135
.address 0x40944C
0003af32: OF := high:1[#8135] = high:1[#8136] & (high:1[#8135] | high:1[RAX]) & ~(
high:1[#8135] & high:1[RAX])
.address 0x40944C
0003af35: AF := 0x10 = (0x10 & (RAX ^ #8135 ^ #8136))
.address 0x40944C
0003af38: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40944C
0003af3b: SF := high:1[RAX]
.address 0x40944C
0003af3e: ZF := 0 = RAX
.address 0x40944F
0003af46: call RAX with noreturn


.address 0x409910
00044029: sub sub_409910()
.address 0x409910
000333af: 
.address 0x409910
000333b6: #7113 := RBP
.address 0x409910
000333b9: RSP := RSP - 8
.address 0x409910
000333bc: mem := mem with [RSP, el]:u64 <- #7113
.address 0x409911
000333c5: #7114 := RBX
.address 0x409911
000333c8: RSP := RSP - 8
.address 0x409911
000333cb: mem := mem with [RSP, el]:u64 <- #7114
.address 0x409912
000333d2: RBP := pad:64[low:32[RDI]]
.address 0x409914
000333e0: #7115 := RSP
.address 0x409914
000333e3: RSP := RSP - 0x28
.address 0x409914
000333e6: CF := #7115 < 0x28
.address 0x409914
000333e9: OF := high:1[(#7115 ^ 0x28) & (#7115 ^ RSP)]
.address 0x409914
000333ec: AF := 0x10 = (0x10 & (RSP ^ #7115 ^ 0x28))
.address 0x409914
000333ef: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x409914
000333f2: SF := high:1[RSP]
.address 0x409914
000333f5: ZF := 0 = RSP
.address 0x409918
000333fc: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x409921
00033403: mem := mem with [RSP + 0x18, el]:u64 <- RAX
.address 0x409926
00033410: RAX := 0
.address 0x409926
00033413: AF := unknown[bits]:u1
.address 0x409926
00033416: ZF := 1
.address 0x409926
00033419: PF := 1
.address 0x409926
0003341c: OF := 0
.address 0x409926
0003341f: CF := 0
.address 0x409926
00033422: SF := 0
.address 0x409928
0003342f: #7118 := mem[0x62132D]
.address 0x409928
00033432: CF := mem[0x62132D] < 0
.address 0x409928
00033435: OF := high:1[mem[0x62132D] & (mem[0x62132D] ^ #7118)]
.address 0x409928
00033438: AF := 0x10 = (0x10 & (#7118 ^ mem[0x62132D]))
.address 0x409928
0003343b: PF := ~low:1[let $1 = #7118 >> 4 ^ #7118 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409928
0003343e: SF := high:1[#7118]
.address 0x409928
00033441: ZF := 0 = #7118
.address 0x40992F
0003344b: when ZF goto %00033445
000448b8: goto %00033487

.address 0x4099A8
00033445: 
.address 0x4099A8
00033457: RSP := RSP - 8
.address 0x4099A8
0003345a: mem := mem with [RSP, el]:u64 <- 0x4099AD
.address 0x4099A8
0003345d: call @sub_40f910 with return %0003345f

.address 0x4099AD
0003345f: 
.address 0x4099AD
0003346a: #7120 := RAX
.address 0x4099AD
0003346d: OF := 0
.address 0x4099AD
00033470: CF := 0
.address 0x4099AD
00033473: AF := unknown[bits]:u1
.address 0x4099AD
00033476: PF := ~low:1[let $1 = #7120 >> 4 ^ #7120 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4099AD
00033479: SF := high:1[#7120]
.address 0x4099AD
0003347c: ZF := 0 = #7120
.address 0x4099B0
00033483: RDI := RAX
.address 0x4099B3
0003348d: when ZF goto %00033487
000448b9: goto %0003aa9f

.address 0x4099B9
0003aa9f: 
.address 0x4099B9
0003aaaa: RSI := 0
.address 0x4099B9
0003aaad: AF := unknown[bits]:u1
.address 0x4099B9
0003aab0: ZF := 1
.address 0x4099B9
0003aab3: PF := 1
.address 0x4099B9
0003aab6: OF := 0
.address 0x4099B9
0003aab9: CF := 0
.address 0x4099B9
0003aabc: SF := 0
.address 0x4099BB
0003aac5: RSP := RSP - 8
.address 0x4099BB
0003aac8: mem := mem with [RSP, el]:u64 <- 0x4099C0
.address 0x4099BB
0003aacb: call @sub_410370 with return %0003aacd

.address 0x4099C0
0003aacd: 
.address 0x4099C0
0003aad2: RDX := 0
.address 0x4099C5
0003aadf: #8094 := low:32[RAX]
.address 0x4099C5
0003aae2: OF := 0
.address 0x4099C5
0003aae5: CF := 0
.address 0x4099C5
0003aae8: AF := unknown[bits]:u1
.address 0x4099C5
0003aaeb: PF := ~low:1[let $1 = #8094 >> 4 ^ #8094 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4099C5
0003aaee: SF := high:1[#8094]
.address 0x4099C5
0003aaf1: ZF := 0 = #8094
.address 0x4099C7
0003aaf8: RAX := pad:64[if SF then low:32[RDX] else low:32[RAX]]
.address 0x4099CA
0003aaff: goto %0003364a

.address 0x409931
00033487: 
.address 0x409931
00033497: RBX := RSP
.address 0x409934
0003349e: RCX := 0x417C24
.address 0x40993B
000334a5: R8 := pad:64[low:32[RBP]]
.address 0x40993E
000334ac: RDX := 0x15
.address 0x409943
000334b3: RSI := 1
.address 0x409948
000334ba: RDI := RBX
.address 0x40994B
000334c7: RAX := 0
.address 0x40994B
000334ca: AF := unknown[bits]:u1
.address 0x40994B
000334cd: ZF := 1
.address 0x40994B
000334d0: PF := 1
.address 0x40994B
000334d3: OF := 0
.address 0x40994B
000334d6: CF := 0
.address 0x40994B
000334d9: SF := 0
.address 0x40994D
000334e2: RSP := RSP - 8
.address 0x40994D
000334e5: mem := mem with [RSP, el]:u64 <- 0x409952
.address 0x40994D
000334e8: call @sub_403e60 with return %000334ea

.address 0x409952
000334ea: 
.address 0x409952
000334ef: RAX := RBX
000448ba: goto %000334f1

.address 0x409955
000334f1: 
.address 0x409955
000334f6: RCX := pad:64[mem[RAX, el]:u32]
.address 0x409957
00033504: #7122 := RAX
.address 0x409957
00033507: RAX := RAX + 4
.address 0x409957
0003350a: CF := RAX < #7122
.address 0x409957
0003350d: OF := ~high:1[#7122] & (high:1[#7122] | high:1[RAX]) & ~(high:1[#7122] & high:1[RAX])
.address 0x409957
00033510: AF := 0x10 = (0x10 & (RAX ^ #7122 ^ 4))
.address 0x409957
00033513: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x409957
00033516: SF := high:1[RAX]
.address 0x409957
00033519: ZF := 0 = RAX
.address 0x40995B
00033520: RDX := pad:64[low:32[RCX - 0x1010101]]
.address 0x409961
00033527: RCX := pad:64[~low:32[RCX]]
.address 0x409963
00033534: RDX := pad:64[low:32[RDX] & low:32[RCX]]
.address 0x409963
00033537: OF := 0
.address 0x409963
0003353a: CF := 0
.address 0x409963
0003353d: AF := unknown[bits]:u1
.address 0x409963
00033540: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409963
00033543: SF := high:1[low:32[RDX]]
.address 0x409963
00033546: ZF := 0 = low:32[RDX]
.address 0x409965
00033553: RDX := pad:64[low:32[RDX] & 0x80808080]
.address 0x409965
00033556: OF := 0
.address 0x409965
00033559: CF := 0
.address 0x409965
0003355c: AF := unknown[bits]:u1
.address 0x409965
0003355f: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409965
00033562: SF := high:1[low:32[RDX]]
.address 0x409965
00033565: ZF := 0 = low:32[RDX]
.address 0x40996B
0003356e: when ZF goto %000334f1
000448bb: goto %00033574

.address 0x40996D
00033574: 
.address 0x40996D
00033579: RCX := pad:64[low:32[RDX]]
.address 0x40996F
00033587: #7127 := low:32[RCX]
.address 0x40996F
0003358a: RCX := pad:64[low:32[RCX] >> 0x10]
.address 0x40996F
0003358d: CF := high:1[#7127 << 0x10]
.address 0x40996F
00033590: SF := high:1[low:32[RCX]]
.address 0x40996F
00033593: ZF := 0 = low:32[RCX]
.address 0x40996F
00033596: PF := ~low:1[let $1 = low:32[RCX] >> 4 ^ low:32[RCX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40996F
00033599: AF := unknown[bits]:u1
.address 0x40996F
0003359c: OF := unknown[bits]:u1
.address 0x409972
000335a9: #7129 := low:32[RDX] & 0x8080
.address 0x409972
000335ac: OF := 0
.address 0x409972
000335af: CF := 0
.address 0x409972
000335b2: AF := unknown[bits]:u1
.address 0x409972
000335b5: PF := ~low:1[let $1 = #7129 >> 4 ^ #7129 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409972
000335b8: SF := high:1[#7129]
.address 0x409972
000335bb: ZF := 0 = #7129
.address 0x409978
000335c2: RDX := pad:64[if ZF then low:32[RCX] else low:32[RDX]]
.address 0x40997B
000335c9: RCX := low:64[RAX + 2]
.address 0x40997F
000335d0: RSI := pad:64[low:32[RDX]]
.address 0x409981
000335d7: RAX := if ZF then RCX else RAX
.address 0x409985
000335e6: #7131 := low:8[RSI]
.address 0x409985
000335e9: #7132 := low:8[RDX]
.address 0x409985
000335ec: RSI := extract:63:8[RSI].low:8[RSI] + #7132
.address 0x409985
000335ef: CF := low:8[RSI] < #7131
.address 0x409985
000335f2: OF := high:1[#7131] = high:1[#7132] & (high:1[#7131] | high:1[low:8[RSI]]) & ~(
high:1[#7131] & high:1[low:8[RSI]])
.address 0x409985
000335f5: AF := 0x10 = (0x10 & (low:8[RSI] ^ #7131 ^ #7132))
.address 0x409985
000335f8: PF := ~low:1[let $1 = low:8[RSI] >> 4 ^ low:8[RSI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409985
000335fb: SF := high:1[low:8[RSI]]
.address 0x409985
000335fe: ZF := 0 = low:8[RSI]
.address 0x409988
0003360c: #7135 := RAX
.address 0x409988
0003360f: RAX := #7135 - 3 + pad:64[CF]
.address 0x409988
00033612: OF := high:1[(3 ^ #7135) & (#7135 ^ RAX)]
.address 0x409988
00033615: CF := #7135 < 3 + pad:64[CF] | 3 + pad:64[CF] < 3
.address 0x409988
00033618: AF := 0x10 = (0x10 & (RAX ^ 3 ^ #7135))
.address 0x409988
0003361b: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x409988
0003361e: SF := high:1[RAX]
.address 0x409988
00033621: ZF := 0 = RAX
.address 0x40998C
00033630: #7137 := low:32[RAX]
.address 0x40998C
00033633: #7138 := low:32[RBX]
.address 0x40998C
00033636: RAX := pad:64[low:32[RAX] - low:32[RBX]]
.address 0x40998C
00033639: CF := #7137 < #7138
.address 0x40998C
0003363c: OF := high:1[(#7137 ^ #7138) & (#7137 ^ low:32[RAX])]
.address 0x40998C
0003363f: AF := 0x10 = (0x10 & (low:32[RAX] ^ #7137 ^ #7138))
.address 0x40998C
00033642: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40998C
00033645: SF := high:1[low:32[RAX]]
.address 0x40998C
00033648: ZF := 0 = low:32[RAX]
000448bc: goto %0003364a

.address 0x40998E
0003364a: 
.address 0x40998E
0003364f: RSI := mem[RSP + 0x18, el]:u64
.address 0x409993
0003365c: RSI := RSI ^ mem[FS_BASE + 0x28, el]:u64
.address 0x409993
0003365f: OF := 0
.address 0x409993
00033662: CF := 0
.address 0x409993
00033665: AF := unknown[bits]:u1
.address 0x409993
00033668: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x409993
0003366b: SF := high:1[RSI]
.address 0x409993
0003366e: ZF := 0 = RSI
.address 0x40999C
00033678: when ~ZF goto %00033672
000448bd: goto %0003aa53

.address 0x4099CC
00033672: 
.address 0x4099CC
00033684: RSP := RSP - 8
.address 0x4099CC
00033687: mem := mem with [RSP, el]:u64 <- 0x4099D1
.address 0x4099CC
0003368a: call @sub_403970 with return %0003368c

.address 0x4099D1
0003368c: 
000448be: call @sub_4099e0 with noreturn

.address 0x40999E
0003aa53: 
.address 0x40999E
0003aa5f: #8090 := RSP
.address 0x40999E
0003aa62: RSP := RSP + 0x28
.address 0x40999E
0003aa65: CF := RSP < #8090
.address 0x40999E
0003aa68: OF := ~high:1[#8090] & (high:1[#8090] | high:1[RSP]) & ~(high:1[#8090] & high:1[RSP])
.address 0x40999E
0003aa6b: AF := 0x10 = (0x10 & (RSP ^ #8090 ^ 0x28))
.address 0x40999E
0003aa6e: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40999E
0003aa71: SF := high:1[RSP]
.address 0x40999E
0003aa74: ZF := 0 = RSP
.address 0x4099A2
0003aa7c: RBX := mem[RSP, el]:u64
.address 0x4099A2
0003aa7f: RSP := RSP + 8
.address 0x4099A3
0003aa87: RBP := mem[RSP, el]:u64
.address 0x4099A3
0003aa8a: RSP := RSP + 8
.address 0x4099A4
0003aa93: #8093 := mem[RSP, el]:u64
.address 0x4099A4
0003aa96: RSP := RSP + 8
.address 0x4099A4
0003aa9a: call #8093 with noreturn


.address 0x4099E0
00044031: sub sub_4099e0()
.address 0x4099E0
00033692: 
.address 0x4099E0
00033699: #7141 := RBP
.address 0x4099E0
0003369c: RSP := RSP - 8
.address 0x4099E0
0003369f: mem := mem with [RSP, el]:u64 <- #7141
.address 0x4099E1
000336a6: RBP := RSP
000448bf: call @sub_4099e4 with noreturn


.address 0x4099E4
00044033: sub sub_4099e4()
.address 0x4099E4
000336a8: 
.address 0x4099E4
000336af: #7142 := R15
.address 0x4099E4
000336b2: RSP := RSP - 8
.address 0x4099E4
000336b5: mem := mem with [RSP, el]:u64 <- #7142
.address 0x4099E6
000336be: #7143 := R14
.address 0x4099E6
000336c1: RSP := RSP - 8
.address 0x4099E6
000336c4: mem := mem with [RSP, el]:u64 <- #7143
.address 0x4099E8
000336cd: #7144 := R13
.address 0x4099E8
000336d0: RSP := RSP - 8
.address 0x4099E8
000336d3: mem := mem with [RSP, el]:u64 <- #7144
.address 0x4099EA
000336dc: #7145 := R12
.address 0x4099EA
000336df: RSP := RSP - 8
.address 0x4099EA
000336e2: mem := mem with [RSP, el]:u64 <- #7145
.address 0x4099EC
000336e9: R15 := RCX
.address 0x4099EF
000336f2: #7146 := RBX
.address 0x4099EF
000336f5: RSP := RSP - 8
.address 0x4099EF
000336f8: mem := mem with [RSP, el]:u64 <- #7146
.address 0x4099F0
000336ff: R14 := pad:64[low:32[RSI]]
.address 0x4099F3
00033706: R13 := pad:64[low:32[RDX]]
.address 0x4099F6
00033714: #7147 := RSP
.address 0x4099F6
00033717: RSP := RSP - 0x378
.address 0x4099F6
0003371a: CF := #7147 < 0x378
.address 0x4099F6
0003371d: OF := high:1[(#7147 ^ 0x378) & (#7147 ^ RSP)]
.address 0x4099F6
00033720: AF := 0x10 = (0x10 & (RSP ^ #7147 ^ 0x378))
.address 0x4099F6
00033723: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4099F6
00033726: SF := high:1[RSP]
.address 0x4099F6
00033729: ZF := 0 = RSP
.address 0x4099FD
00033730: RCX := mem[0x6213B0, el]:u64
.address 0x409A04
00033737: mem := mem with [RBP - 0x388, el]:u64 <- RDI
.address 0x409A0B
0003373e: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x409A14
00033745: mem := mem with [RBP - 0x38, el]:u64 <- RAX
.address 0x409A18
00033752: RAX := 0
.address 0x409A18
00033755: AF := unknown[bits]:u1
.address 0x409A18
00033758: ZF := 1
.address 0x409A18
0003375b: PF := 1
.address 0x409A18
0003375e: OF := 0
.address 0x409A18
00033761: CF := 0
.address 0x409A18
00033764: SF := 0
.address 0x409A1A
00033771: #7150 := RCX - mem[0x6213B8, el]:u64
.address 0x409A1A
00033774: CF := RCX < mem[0x6213B8, el]:u64
.address 0x409A1A
00033777: OF := high:1[(RCX ^ mem[0x6213B8, el]:u64) & (RCX ^ #7150)]
.address 0x409A1A
0003377a: AF := 0x10 = (0x10 & (#7150 ^ RCX ^ mem[0x6213B8, el]:u64))
.address 0x409A1A
0003377d: PF := ~low:1[let $1 = #7150 >> 4 ^ #7150 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409A1A
00033780: SF := high:1[#7150]
.address 0x409A1A
00033783: ZF := 0 = #7150
.address 0x409A21
0003378a: RDI := mem[0x6213C0, el]:u64
.address 0x409A28
00033794: when ~ZF goto %0003378e
000448c0: goto %0003a9f2

.address 0x409A2A
0003a9f2: 
.address 0x409A2A
0003a9f7: RDX := 0x190
.address 0x409A2F
0003aa04: RSI := 0
.address 0x409A2F
0003aa07: AF := unknown[bits]:u1
.address 0x409A2F
0003aa0a: ZF := 1
.address 0x409A2F
0003aa0d: PF := 1
.address 0x409A2F
0003aa10: OF := 0
.address 0x409A2F
0003aa13: CF := 0
.address 0x409A2F
0003aa16: SF := 0
.address 0x409A31
0003aa1d: RAX := RDX
.address 0x409A34
0003aa2c: #8089 := pad:128[RAX] * pad:128[RCX]
.address 0x409A34
0003aa2f: RAX := extract:63:0[#8089]
.address 0x409A34
0003aa32: RDX := extract:127:64[#8089]
.address 0x409A34
0003aa35: OF := extract:127:64[#8089] <> 0
.address 0x409A34
0003aa38: CF := extract:127:64[#8089] <> 0
.address 0x409A34
0003aa3b: SF := unknown[bits]:u1
.address 0x409A34
0003aa3e: ZF := unknown[bits]:u1
.address 0x409A34
0003aa41: AF := unknown[bits]:u1
.address 0x409A34
0003aa44: PF := unknown[bits]:u1
.address 0x409A37
0003aa4d: when OF goto %0003426e
000448c1: goto %00034277

.address 0x409A3D
00034277: 
.address 0x409A3D
00034287: #7229 := RAX
.address 0x409A3D
0003428a: OF := 0
.address 0x409A3D
0003428d: CF := 0
.address 0x409A3D
00034290: AF := unknown[bits]:u1
.address 0x409A3D
00034293: PF := ~low:1[let $1 = #7229 >> 4 ^ #7229 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409A3D
00034296: SF := high:1[#7229]
.address 0x409A3D
00034299: ZF := 0 = #7229
.address 0x409A40
000342a3: when SF goto %0003429d
000448c2: goto %0003872a

.address 0x409A46
0003872a: 
.address 0x409A46
00038735: #7808 := RSI
.address 0x409A46
00038738: OF := 0
.address 0x409A46
0003873b: CF := 0
.address 0x409A46
0003873e: AF := unknown[bits]:u1
.address 0x409A46
00038741: PF := ~low:1[let $1 = #7808 >> 4 ^ #7808 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409A46
00038744: SF := high:1[#7808]
.address 0x409A46
00038747: ZF := 0 = #7808
.address 0x409A49
00038750: when ~ZF goto %0003429d
000448c3: goto %00038756

.address 0x40A856
0003429d: 
.address 0x40A856
000342af: RSP := RSP - 8
.address 0x40A856
000342b2: mem := mem with [RSP, el]:u64 <- 0x40A85B
.address 0x40A856
000342b5: call @sub_4146d0 with return %000342b7

.address 0x40A85B
000342b7: 
000448c4: call @sub_40a860 with noreturn

.address 0x409A4F
00038756: 
.address 0x409A4F
0003875b: RAX := low:64[RCX + (RCX << 2)]
.address 0x409A53
00038762: RSI := low:64[RAX + (RAX << 2)]
.address 0x409A57
00038770: #7810 := RSI
.address 0x409A57
00038773: RSI := RSI << 4
.address 0x409A57
00038776: CF := low:1[#7810 >> 0x3C]
.address 0x409A57
00038779: SF := high:1[RSI]
.address 0x409A57
0003877c: ZF := 0 = RSI
.address 0x409A57
0003877f: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x409A57
00038782: AF := unknown[bits]:u1
.address 0x409A57
00038785: OF := unknown[bits]:u1
.address 0x409A5B
0003878e: RSP := RSP - 8
.address 0x409A5B
00038791: mem := mem with [RSP, el]:u64 <- 0x409A60
.address 0x409A5B
00038794: call @sub_4144e0 with return %00038796

.address 0x409A60
00038796: 
.address 0x409A60
000387a2: #7812 := mem[0x6213B8, el]:u64
.address 0x409A60
000387a5: mem := mem with [0x6213B8, el]:u64 <- mem[0x6213B8, el]:u64 << 1
.address 0x409A60
000387a8: CF := low:1[#7812 >> 0x3F]
.address 0x409A60
000387ab: SF := high:1[mem[0x6213B8, el]:u64]
.address 0x409A60
000387ae: ZF := 0 = mem[0x6213B8, el]:u64
.address 0x409A60
000387b1: PF := ~low:1[let $1 = mem[0x6213B8, el]:u64 >> 4 ^ mem[0x6213B8, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409A60
000387b4: AF := unknown[bits]:u1
.address 0x409A60
000387b7: OF := (high:1[mem[0x6213B8, el]:u64] | CF) & ~(high:1[mem[0x6213B8, el]:u64] & CF)
.address 0x409A67
000387be: RCX := mem[0x6213B0, el]:u64
.address 0x409A6E
000387c5: RDI := RAX
.address 0x409A71
000387cc: mem := mem with [0x6213C0, el]:u64 <- RAX
000448c5: goto %0003378e

.address 0x409A78
0003378e: 
.address 0x409A78
0003379e: RAX := low:64[RCX + (RCX << 2)]
.address 0x409A7C
000337a5: RAX := low:64[RAX + (RAX << 2)]
.address 0x409A80
000337ac: RBX := low:64[RDI + (RAX << 3)]
.address 0x409A84
000337b9: RAX := 0
.address 0x409A84
000337bc: AF := unknown[bits]:u1
.address 0x409A84
000337bf: ZF := 1
.address 0x409A84
000337c2: PF := 1
.address 0x409A84
000337c5: OF := 0
.address 0x409A84
000337c8: CF := 0
.address 0x409A84
000337cb: SF := 0
.address 0x409A86
000337d2: RDI := low:64[RBX + 8]
.address 0x409A8A
000337d9: RCX := RBX
.address 0x409A8D
000337e0: mem := mem with [RBX, el]:u64 <- 0
.address 0x409A94
000337e7: mem := mem with [RBX + 0xBC, el]:u64 <- 0
.address 0x409A9F
000337f4: RDI := RDI & 0xFFFFFFFFFFFFFFF8
.address 0x409A9F
000337f7: OF := 0
.address 0x409A9F
000337fa: CF := 0
.address 0x409A9F
000337fd: AF := unknown[bits]:u1
.address 0x409A9F
00033800: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x409A9F
00033803: SF := high:1[RDI]
.address 0x409A9F
00033806: ZF := 0 = RDI
.address 0x409AA3
00033815: #7153 := RCX
.address 0x409AA3
00033818: #7154 := RDI
.address 0x409AA3
0003381b: RCX := RCX - RDI
.address 0x409AA3
0003381e: CF := #7153 < #7154
.address 0x409AA3
00033821: OF := high:1[(#7153 ^ #7154) & (#7153 ^ RCX)]
.address 0x409AA3
00033824: AF := 0x10 = (0x10 & (RCX ^ #7153 ^ #7154))
.address 0x409AA3
00033827: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x409AA3
0003382a: SF := high:1[RCX]
.address 0x409AA3
0003382d: ZF := 0 = RCX
.address 0x409AA6
0003383b: #7156 := low:32[RCX]
.address 0x409AA6
0003383e: RCX := pad:64[low:32[RCX] + 0xC4]
.address 0x409AA6
00033841: CF := low:32[RCX] < #7156
.address 0x409AA6
00033844: OF := ~high:1[#7156] & (high:1[#7156] | high:1[low:32[RCX]]) & ~(
high:1[#7156] & high:1[low:32[RCX]])
.address 0x409AA6
00033847: AF := 0x10 = (0x10 & (low:32[RCX] ^ #7156 ^ 0xC4))
.address 0x409AA6
0003384a: PF := ~low:1[let $1 = low:32[RCX] >> 4 ^ low:32[RCX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409AA6
0003384d: SF := high:1[low:32[RCX]]
.address 0x409AA6
00033850: ZF := 0 = low:32[RCX]
.address 0x409AAC
0003385e: #7159 := low:32[RCX]
.address 0x409AAC
00033861: RCX := pad:64[low:32[RCX] >> 3]
.address 0x409AAC
00033864: CF := high:1[#7159 << 0x1D]
.address 0x409AAC
00033867: SF := high:1[low:32[RCX]]
.address 0x409AAC
0003386a: ZF := 0 = low:32[RCX]
.address 0x409AAC
0003386d: PF := ~low:1[let $1 = low:32[RCX] >> 4 ^ low:32[RCX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409AAC
00033870: AF := unknown[bits]:u1
.address 0x409AAC
00033873: OF := unknown[bits]:u1
.address 0x409AAF
00033882: goto %00033880

00033879: 
.address 0x409AAF
0003387a: mem := mem with [RDI, el]:u64 <- RAX
.address 0x409AAF
0003387c: RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF) * 8
.address 0x409AAF
0003387e: RCX := RCX - 1
.address 0x409AAF
00033883: goto %00033880

00033880: 
.address 0x409AAF
00033881: when RCX <> 0 goto %00033879
000448c6: goto %00033889

00033889: 
.address 0x409AB2
0003388a: mem := mem with [RBX + 0x20, el]:u64 <- 0
.address 0x409ABA
00033891: mem := mem with [RBX + 0xA8, el]:u32 <- low:32[R14]
.address 0x409AC1
00033898: mem := mem with [RBX + 0xC4, el]:u32 <- 0xFFFFFFFF
.address 0x409ACB
000338a5: #7162 := mem[0x6213A9]
.address 0x409ACB
000338a8: CF := mem[0x6213A9] < 0
.address 0x409ACB
000338ab: OF := high:1[mem[0x6213A9] & (mem[0x6213A9] ^ #7162)]
.address 0x409ACB
000338ae: AF := 0x10 = (0x10 & (#7162 ^ mem[0x6213A9]))
.address 0x409ACB
000338b1: PF := ~low:1[let $1 = #7162 >> 4 ^ #7162 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409ACB
000338b4: SF := high:1[#7162]
.address 0x409ACB
000338b7: ZF := 0 = #7162
.address 0x409AD2
000338c1: when ~ZF goto %000338bb
000448c7: goto %0003a9c6

.address 0x409AD4
0003a9c6: 
.address 0x409AD4
0003a9d1: #8087 := mem[0x6213A8]
.address 0x409AD4
0003a9d4: CF := mem[0x6213A8] < 0
.address 0x409AD4
0003a9d7: OF := high:1[mem[0x6213A8] & (mem[0x6213A8] ^ #8087)]
.address 0x409AD4
0003a9da: AF := 0x10 = (0x10 & (#8087 ^ mem[0x6213A8]))
.address 0x409AD4
0003a9dd: PF := ~low:1[let $1 = #8087 >> 4 ^ #8087 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409AD4
0003a9e0: SF := high:1[#8087]
.address 0x409AD4
0003a9e3: ZF := 0 = #8087
.address 0x409ADB
0003a9ec: when ~ZF goto %00038d90
000448c8: goto %000338bb

.address 0x40A3F0
00038d90: 
.address 0x40A3F0
00038d95: RDI := mem[RBP - 0x388, el]:u64
.address 0x40A3F7
00038d9e: RSP := RSP - 8
.address 0x40A3F7
00038da1: mem := mem with [RSP, el]:u64 <- 0x40A3FC
.address 0x40A3F7
00038da4: call @sub_406190 with return %00038da6

.address 0x40A3FC
00038da6: 
.address 0x40A3FC
00038dab: RDX := pad:64[pad:32[low:8[RAX]]]
.address 0x40A3FF
00038db8: #7855 := low:8[RAX]
.address 0x40A3FF
00038dbb: OF := 0
.address 0x40A3FF
00038dbe: CF := 0
.address 0x40A3FF
00038dc1: AF := unknown[bits]:u1
.address 0x40A3FF
00038dc4: PF := ~low:1[let $1 = #7855 >> 4 ^ #7855 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A3FF
00038dc7: SF := high:1[#7855]
.address 0x40A3FF
00038dca: ZF := 0 = #7855
.address 0x40A401
00038dd1: mem := mem with [RBX + 0xC4, el]:u32 <- low:32[RDX]
.address 0x40A407
00038dda: when ZF goto %000338bb
000448c9: goto %00038de0

.address 0x40A40D
00038de0: 
.address 0x40A40D
00038de5: mem := mem with [0x6213A9] <- 1
.address 0x40A414
00038dec: goto %000338bb

.address 0x409AE1
000338bb: 
.address 0x409AE1
000338d1: #7164 := low:8[R13]
.address 0x409AE1
000338d4: OF := 0
.address 0x409AE1
000338d7: CF := 0
.address 0x409AE1
000338da: AF := unknown[bits]:u1
.address 0x409AE1
000338dd: PF := ~low:1[let $1 = #7164 >> 4 ^ #7164 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409AE1
000338e0: SF := high:1[#7164]
.address 0x409AE1
000338e3: ZF := 0 = #7164
.address 0x409AE4
000338ea: R8 := pad:64[pad:32[mem[0x621311]]]
.address 0x409AEC
000338f4: when ZF goto %000338ee
000448ca: goto %0003a959

.address 0x409CD0
000338ee: 
.address 0x409CD0
00033904: #7166 := low:8[R8]
.address 0x409CD0
00033907: OF := 0
.address 0x409CD0
0003390a: CF := 0
.address 0x409CD0
0003390d: AF := unknown[bits]:u1
.address 0x409CD0
00033910: PF := ~low:1[let $1 = #7166 >> 4 ^ #7166 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409CD0
00033913: SF := high:1[#7166]
.address 0x409CD0
00033916: ZF := 0 = #7166
.address 0x409CD3
00033920: when ~ZF goto %0003391a
000448cb: goto %0003a901

.address 0x40A0D0
0003391a: 
.address 0x40A0D0
0003392a: RAX := mem[RBP - 0x388, el]:u64
.address 0x40A0D7
00033931: RDX := pad:64[pad:32[mem[RAX]]]
.address 0x40A0DA
0003393e: #7168 := low:8[RDX] - 0x2F
.address 0x40A0DA
00033941: CF := low:8[RDX] < 0x2F
.address 0x40A0DA
00033944: OF := high:1[(low:8[RDX] ^ 0x2F) & (low:8[RDX] ^ #7168)]
.address 0x40A0DA
00033947: AF := 0x10 = (0x10 & (#7168 ^ low:8[RDX] ^ 0x2F))
.address 0x40A0DA
0003394a: PF := ~low:1[let $1 = #7168 >> 4 ^ #7168 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A0DA
0003394d: SF := high:1[#7168]
.address 0x40A0DA
00033950: ZF := 0 = #7168
.address 0x40A0DD
0003395a: when ~ZF goto %00033954
000448cc: goto %0003a8fa

.address 0x40A308
00033954: 
.address 0x40A308
00033964: RCX := pad:64[pad:32[mem[R15]]]
.address 0x40A30C
0003396b: R12 := mem[RBP - 0x388, el]:u64
.address 0x40A313
00033978: #7170 := low:8[RCX]
.address 0x40A313
0003397b: OF := 0
.address 0x40A313
0003397e: CF := 0
.address 0x40A313
00033981: AF := unknown[bits]:u1
.address 0x40A313
00033984: PF := ~low:1[let $1 = #7170 >> 4 ^ #7170 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A313
00033987: SF := high:1[#7170]
.address 0x40A313
0003398a: ZF := 0 = #7170
.address 0x40A315
00033994: when ZF goto %0003398e
000448cd: goto %00038bdf

.address 0x40A0E3
0003a8fa: 
.address 0x40A0E3
0003a8ff: R12 := mem[RBP - 0x388, el]:u64
000448ce: goto %0003398e

.address 0x409CD9
0003a901: 
.address 0x409CD9
0003a90c: #8079 := mem[0x6212A1]
.address 0x409CD9
0003a90f: CF := mem[0x6212A1] < 0
.address 0x409CD9
0003a912: OF := high:1[mem[0x6212A1] & (mem[0x6212A1] ^ #8079)]
.address 0x409CD9
0003a915: AF := 0x10 = (0x10 & (#8079 ^ mem[0x6212A1]))
.address 0x409CD9
0003a918: PF := ~low:1[let $1 = #8079 >> 4 ^ #8079 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409CD9
0003a91b: SF := high:1[#8079]
.address 0x409CD9
0003a91e: ZF := 0 = #8079
.address 0x409CE0
0003a927: when ~ZF goto %00038b72
000448cf: goto %0003a92d

.address 0x409CE6
0003a92d: 
.address 0x409CE6
0003a938: #8081 := low:32[R14] - 3
.address 0x409CE6
0003a93b: CF := low:32[R14] < 3
.address 0x409CE6
0003a93e: OF := high:1[(low:32[R14] ^ 3) & (low:32[R14] ^ #8081)]
.address 0x409CE6
0003a941: AF := 0x10 = (0x10 & (#8081 ^ low:32[R14] ^ 3))
.address 0x409CE6
0003a944: PF := ~low:1[let $1 = #8081 >> 4 ^ #8081 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409CE6
0003a947: SF := high:1[#8081]
.address 0x409CE6
0003a94a: ZF := 0 = #8081
.address 0x409CEA
0003a953: when ZF goto %00038aa0
000448d0: goto %00038ac1

.address 0x40A730
00038aa0: 
.address 0x40A730
00038aab: #7828 := mem[0x621312]
.address 0x40A730
00038aae: CF := mem[0x621312] < 0
.address 0x40A730
00038ab1: OF := high:1[mem[0x621312] & (mem[0x621312] ^ #7828)]
.address 0x40A730
00038ab4: AF := 0x10 = (0x10 & (#7828 ^ mem[0x621312]))
.address 0x40A730
00038ab7: PF := ~low:1[let $1 = #7828 >> 4 ^ #7828 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A730
00038aba: SF := high:1[#7828]
.address 0x40A730
00038abd: ZF := 0 = #7828
.address 0x40A737
00038ac7: when ZF goto %00038ac1
000448d1: goto %0003950d

.address 0x40A73D
0003950d: 
.address 0x40A73D
00039512: RDI := 0x13
.address 0x40A742
00039519: mem := mem with [RBP - 0x390] <- low:8[R8]
.address 0x40A749
00039522: RSP := RSP - 8
.address 0x40A749
00039525: mem := mem with [RSP, el]:u64 <- 0x40A74E
.address 0x40A749
00039528: call @sub_405c50 with return %0003952a

.address 0x40A74E
0003952a: 
.address 0x40A74E
00039535: #7920 := low:8[RAX]
.address 0x40A74E
00039538: OF := 0
.address 0x40A74E
0003953b: CF := 0
.address 0x40A74E
0003953e: AF := unknown[bits]:u1
.address 0x40A74E
00039541: PF := ~low:1[let $1 = #7920 >> 4 ^ #7920 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A74E
00039544: SF := high:1[#7920]
.address 0x40A74E
00039547: ZF := 0 = #7920
.address 0x40A750
0003954e: R8 := pad:64[pad:32[mem[RBP - 0x390]]]
.address 0x40A758
00039557: when ~ZF goto %00038b72
000448d2: goto %0003955d

.address 0x40A75E
0003955d: 
.address 0x40A75E
00039562: RDI := 0x12
.address 0x40A763
0003956b: RSP := RSP - 8
.address 0x40A763
0003956e: mem := mem with [RSP, el]:u64 <- 0x40A768
.address 0x40A763
00039571: call @sub_405c50 with return %00039573

.address 0x40A768
00039573: 
.address 0x40A768
0003957e: #7922 := low:8[RAX]
.address 0x40A768
00039581: OF := 0
.address 0x40A768
00039584: CF := 0
.address 0x40A768
00039587: AF := unknown[bits]:u1
.address 0x40A768
0003958a: PF := ~low:1[let $1 = #7922 >> 4 ^ #7922 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A768
0003958d: SF := high:1[#7922]
.address 0x40A768
00039590: ZF := 0 = #7922
.address 0x40A76A
00039597: R8 := pad:64[pad:32[mem[RBP - 0x390]]]
.address 0x40A772
000395a0: when ~ZF goto %00038b72
000448d3: goto %000395a6

.address 0x40A778
000395a6: 
.address 0x40A778
000395ab: RDI := 0x14
.address 0x40A77D
000395b4: RSP := RSP - 8
.address 0x40A77D
000395b7: mem := mem with [RSP, el]:u64 <- 0x40A782
.address 0x40A77D
000395ba: call @sub_405c50 with return %000395bc

.address 0x40A782
000395bc: 
.address 0x40A782
000395c7: #7924 := low:8[RAX]
.address 0x40A782
000395ca: OF := 0
.address 0x40A782
000395cd: CF := 0
.address 0x40A782
000395d0: AF := unknown[bits]:u1
.address 0x40A782
000395d3: PF := ~low:1[let $1 = #7924 >> 4 ^ #7924 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A782
000395d6: SF := high:1[#7924]
.address 0x40A782
000395d9: ZF := 0 = #7924
.address 0x40A784
000395e0: R8 := pad:64[pad:32[mem[RBP - 0x390]]]
.address 0x40A78C
000395e9: when ~ZF goto %00038b72
000448d4: goto %000395ef

.address 0x40A792
000395ef: 
.address 0x40A792
000395f4: goto %00038ac1

.address 0x409CF0
00038ac1: 
.address 0x409CF0
00038ad1: RAX := pad:64[pad:32[mem[0x6212FC]]]
.address 0x409CF7
00038ade: #7830 := low:8[RAX]
.address 0x409CF7
00038ae1: OF := 0
.address 0x409CF7
00038ae4: CF := 0
.address 0x409CF7
00038ae7: AF := unknown[bits]:u1
.address 0x409CF7
00038aea: PF := ~low:1[let $1 = #7830 >> 4 ^ #7830 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409CF7
00038aed: SF := high:1[#7830]
.address 0x409CF7
00038af0: ZF := 0 = #7830
.address 0x409CF9
00038afa: when ~ZF goto %00038af4
000448d5: goto %0003942d

.address 0x409D30
00038af4: 
.address 0x409D30
00038b0a: #7832 := low:32[R14]
.address 0x409D30
00038b0d: OF := 0
.address 0x409D30
00038b10: CF := 0
.address 0x409D30
00038b13: AF := unknown[bits]:u1
.address 0x409D30
00038b16: PF := ~low:1[let $1 = #7832 >> 4 ^ #7832 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409D30
00038b19: SF := high:1[#7832]
.address 0x409D30
00038b1c: ZF := 0 = #7832
.address 0x409D33
00038b23: RDX := extract:63:8[RDX].pad:8[ZF]
.address 0x409D36
00038b30: #7834 := low:32[R14] - 6
.address 0x409D36
00038b33: CF := low:32[R14] < 6
.address 0x409D36
00038b36: OF := high:1[(low:32[R14] ^ 6) & (low:32[R14] ^ #7834)]
.address 0x409D36
00038b39: AF := 0x10 = (0x10 & (#7834 ^ low:32[R14] ^ 6))
.address 0x409D36
00038b3c: PF := ~low:1[let $1 = #7834 >> 4 ^ #7834 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409D36
00038b3f: SF := high:1[#7834]
.address 0x409D36
00038b42: ZF := 0 = #7834
.address 0x409D3A
00038b4c: when ZF goto %00038b46
000448d6: goto %00039401

.address 0x409D3C
00039401: 
.address 0x409D3C
0003940c: #7908 := low:8[RDX]
.address 0x409D3C
0003940f: OF := 0
.address 0x409D3C
00039412: CF := 0
.address 0x409D3C
00039415: AF := unknown[bits]:u1
.address 0x409D3C
00039418: PF := ~low:1[let $1 = #7908 >> 4 ^ #7908 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409D3C
0003941b: SF := high:1[#7908]
.address 0x409D3C
0003941e: ZF := 0 = #7908
.address 0x409D3E
00039427: when ZF goto %00038b72
000448d7: goto %00038b46

.address 0x409CFB
0003942d: 
.address 0x409CFB
00039438: #7910 := mem[0x6212A0]
.address 0x409CFB
0003943b: CF := mem[0x6212A0] < 0
.address 0x409CFB
0003943e: OF := high:1[mem[0x6212A0] & (mem[0x6212A0] ^ #7910)]
.address 0x409CFB
00039441: AF := 0x10 = (0x10 & (#7910 ^ mem[0x6212A0]))
.address 0x409CFB
00039444: PF := ~low:1[let $1 = #7910 >> 4 ^ #7910 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409CFB
00039447: SF := high:1[#7910]
.address 0x409CFB
0003944a: ZF := 0 = #7910
.address 0x409D02
00039453: when ZF goto %000391d0
000448d8: goto %00039459

.address 0x409D04
00039459: 
.address 0x409D04
00039464: #7912 := low:32[R14]
.address 0x409D04
00039467: OF := 0
.address 0x409D04
0003946a: CF := 0
.address 0x409D04
0003946d: AF := unknown[bits]:u1
.address 0x409D04
00039470: PF := ~low:1[let $1 = #7912 >> 4 ^ #7912 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409D04
00039473: SF := high:1[#7912]
.address 0x409D04
00039476: ZF := 0 = #7912
.address 0x409D07
0003947d: RCX := extract:63:8[RCX].pad:8[ZF]
.address 0x409D0A
0003948a: #7914 := low:32[R14] - 6
.address 0x409D0A
0003948d: CF := low:32[R14] < 6
.address 0x409D0A
00039490: OF := high:1[(low:32[R14] ^ 6) & (low:32[R14] ^ #7914)]
.address 0x409D0A
00039493: AF := 0x10 = (0x10 & (#7914 ^ low:32[R14] ^ 6))
.address 0x409D0A
00039496: PF := ~low:1[let $1 = #7914 >> 4 ^ #7914 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409D0A
00039499: SF := high:1[#7914]
.address 0x409D0A
0003949c: ZF := 0 = #7914
.address 0x409D0E
000394a3: RDX := pad:64[low:32[RCX]]
.address 0x409D10
000394ac: when ZF goto %00038b46
000448d9: goto %000394b2

.address 0x409D12
000394b2: 
.address 0x409D12
000394bd: #7916 := low:8[RCX]
.address 0x409D12
000394c0: OF := 0
.address 0x409D12
000394c3: CF := 0
.address 0x409D12
000394c6: AF := unknown[bits]:u1
.address 0x409D12
000394c9: PF := ~low:1[let $1 = #7916 >> 4 ^ #7916 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409D12
000394cc: SF := high:1[#7916]
.address 0x409D12
000394cf: ZF := 0 = #7916
.address 0x409D14
000394d8: when ~ZF goto %00038b46
000448da: goto %000394de

.address 0x409D44
00038b46: 
.address 0x409D44
00038b5c: #7836 := mem[0x6212F8, el]:u32 - 5
.address 0x409D44
00038b5f: CF := mem[0x6212F8, el]:u32 < 5
.address 0x409D44
00038b62: OF := high:1[(mem[0x6212F8, el]:u32 ^ 5) & (mem[0x6212F8, el]:u32 ^ #7836)]
.address 0x409D44
00038b65: AF := 0x10 = (0x10 & (#7836 ^ mem[0x6212F8, el]:u32 ^ 5))
.address 0x409D44
00038b68: PF := ~low:1[let $1 = #7836 >> 4 ^ #7836 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409D44
00038b6b: SF := high:1[#7836]
.address 0x409D44
00038b6e: ZF := 0 = #7836
.address 0x409D4B
00038b78: when ZF goto %00038b72
000448db: goto %0003912b

.address 0x409D51
0003912b: 
.address 0x409D51
00039136: #7884 := mem[0x621390]
.address 0x409D51
00039139: CF := mem[0x621390] < 0
.address 0x409D51
0003913c: OF := high:1[mem[0x621390] & (mem[0x621390] ^ #7884)]
.address 0x409D51
0003913f: AF := 0x10 = (0x10 & (#7884 ^ mem[0x621390]))
.address 0x409D51
00039142: PF := ~low:1[let $1 = #7884 >> 4 ^ #7884 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409D51
00039145: SF := high:1[#7884]
.address 0x409D51
00039148: ZF := 0 = #7884
.address 0x409D58
00039151: when ~ZF goto %00038b72
000448dc: goto %00039157

.address 0x409D5E
00039157: 
.address 0x409D5E
00039162: #7886 := mem[0x6212FD]
.address 0x409D5E
00039165: CF := mem[0x6212FD] < 0
.address 0x409D5E
00039168: OF := high:1[mem[0x6212FD] & (mem[0x6212FD] ^ #7886)]
.address 0x409D5E
0003916b: AF := 0x10 = (0x10 & (#7886 ^ mem[0x6212FD]))
.address 0x409D5E
0003916e: PF := ~low:1[let $1 = #7886 >> 4 ^ #7886 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409D5E
00039171: SF := high:1[#7886]
.address 0x409D5E
00039174: ZF := 0 = #7886
.address 0x409D65
0003917d: when ~ZF goto %00038b72
000448dd: goto %00039183

.address 0x409D6B
00039183: 
.address 0x409D6B
0003918e: #7888 := low:8[RAX]
.address 0x409D6B
00039191: OF := 0
.address 0x409D6B
00039194: CF := 0
.address 0x409D6B
00039197: AF := unknown[bits]:u1
.address 0x409D6B
0003919a: PF := ~low:1[let $1 = #7888 >> 4 ^ #7888 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409D6B
0003919d: SF := high:1[#7888]
.address 0x409D6B
000391a0: ZF := 0 = #7888
.address 0x409D6D
000391a9: when ~ZF goto %00038b72
000448de: goto %000391af

.address 0x409D73
000391af: 
.address 0x409D73
000391ba: #7890 := mem[0x6212A0]
.address 0x409D73
000391bd: CF := mem[0x6212A0] < 0
.address 0x409D73
000391c0: OF := high:1[mem[0x6212A0] & (mem[0x6212A0] ^ #7890)]
.address 0x409D73
000391c3: AF := 0x10 = (0x10 & (#7890 ^ mem[0x6212A0]))
.address 0x409D73
000391c6: PF := ~low:1[let $1 = #7890 >> 4 ^ #7890 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409D73
000391c9: SF := high:1[#7890]
.address 0x409D73
000391cc: ZF := 0 = #7890
.address 0x409D7A
000391d6: when ZF goto %000391d0
000448df: goto %00039204

.address 0x409D7C
00039204: 
.address 0x409D7C
0003920f: #7892 := low:8[RDX]
.address 0x409D7C
00039212: OF := 0
.address 0x409D7C
00039215: CF := 0
.address 0x409D7C
00039218: AF := unknown[bits]:u1
.address 0x409D7C
0003921b: PF := ~low:1[let $1 = #7892 >> 4 ^ #7892 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409D7C
0003921e: SF := high:1[#7892]
.address 0x409D7C
00039221: ZF := 0 = #7892
.address 0x409D7E
0003922a: when ~ZF goto %00038b72
000448e0: goto %00039230

.address 0x409D16
000394de: 
.address 0x409D16
000394e9: #7918 := mem[0x6212A0]
.address 0x409D16
000394ec: CF := mem[0x6212A0] < 0
.address 0x409D16
000394ef: OF := high:1[mem[0x6212A0] & (mem[0x6212A0] ^ #7918)]
.address 0x409D16
000394f2: AF := 0x10 = (0x10 & (#7918 ^ mem[0x6212A0]))
.address 0x409D16
000394f5: PF := ~low:1[let $1 = #7918 >> 4 ^ #7918 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409D16
000394f8: SF := high:1[#7918]
.address 0x409D16
000394fb: ZF := 0 = #7918
.address 0x409D1D
00039504: when ~ZF goto %00039230
000448e1: goto %0003950a

.address 0x409D84
00039230: 
.address 0x409D84
0003923b: R12 := 0
.address 0x409D84
0003923e: AF := unknown[bits]:u1
.address 0x409D84
00039241: ZF := 1
.address 0x409D84
00039244: PF := 1
.address 0x409D84
00039247: OF := 0
.address 0x409D84
0003924a: CF := 0
.address 0x409D84
0003924d: SF := 0
.address 0x409D87
0003925a: #7894 := low:32[R14] - 5
.address 0x409D87
0003925d: CF := low:32[R14] < 5
.address 0x409D87
00039260: OF := high:1[(low:32[R14] ^ 5) & (low:32[R14] ^ #7894)]
.address 0x409D87
00039263: AF := 0x10 = (0x10 & (#7894 ^ low:32[R14] ^ 5))
.address 0x409D87
00039266: PF := ~low:1[let $1 = #7894 >> 4 ^ #7894 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409D87
00039269: SF := high:1[#7894]
.address 0x409D87
0003926c: ZF := 0 = #7894
.address 0x409D8B
00039275: when ~ZF goto %000341da
000448e2: goto %0003927b

.address 0x409D91
0003927b: 
.address 0x409D91
00039286: #7896 := mem[0x621314, el]:u32 - 3
.address 0x409D91
00039289: CF := mem[0x621314, el]:u32 < 3
.address 0x409D91
0003928c: OF := high:1[(mem[0x621314, el]:u32 ^ 3) & (mem[0x621314, el]:u32 ^ #7896)]
.address 0x409D91
0003928f: AF := 0x10 = (0x10 & (#7896 ^ mem[0x621314, el]:u32 ^ 3))
.address 0x409D91
00039292: PF := ~low:1[let $1 = #7896 >> 4 ^ #7896 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409D91
00039295: SF := high:1[#7896]
.address 0x409D91
00039298: ZF := 0 = #7896
.address 0x409D98
000392a1: when ZF goto %00038b72
000448e3: goto %000392a7

.address 0x409D9A
000392a7: 
.address 0x409D9A
000392b2: #7898 := mem[0x621312]
.address 0x409D9A
000392b5: CF := mem[0x621312] < 0
.address 0x409D9A
000392b8: OF := high:1[mem[0x621312] & (mem[0x621312] ^ #7898)]
.address 0x409D9A
000392bb: AF := 0x10 = (0x10 & (#7898 ^ mem[0x621312]))
.address 0x409D9A
000392be: PF := ~low:1[let $1 = #7898 >> 4 ^ #7898 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409D9A
000392c1: SF := high:1[#7898]
.address 0x409D9A
000392c4: ZF := 0 = #7898
.address 0x409DA1
000392cb: mem := mem with [RBP - 0x390] <- low:8[R8]
.address 0x409DA8
000392d4: when ZF goto %000341da
000448e4: goto %000392da

.address 0x409DAE
000392da: 
.address 0x409DAE
000392df: RDI := 0xE
.address 0x409DB3
000392e8: RSP := RSP - 8
.address 0x409DB3
000392eb: mem := mem with [RSP, el]:u64 <- 0x409DB8
.address 0x409DB3
000392ee: call @sub_405c50 with return %000392f0

.address 0x409DB8
000392f0: 
.address 0x409DB8
000392fb: #7900 := low:8[RAX]
.address 0x409DB8
000392fe: OF := 0
.address 0x409DB8
00039301: CF := 0
.address 0x409DB8
00039304: AF := unknown[bits]:u1
.address 0x409DB8
00039307: PF := ~low:1[let $1 = #7900 >> 4 ^ #7900 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409DB8
0003930a: SF := high:1[#7900]
.address 0x409DB8
0003930d: ZF := 0 = #7900
.address 0x409DBA
00039314: R8 := pad:64[pad:32[mem[RBP - 0x390]]]
.address 0x409DC2
0003931d: when ~ZF goto %00038b72
000448e5: goto %00039323

.address 0x409DC4
00039323: 
.address 0x409DC4
00039328: RDI := 0x10
.address 0x409DC9
00039331: RSP := RSP - 8
.address 0x409DC9
00039334: mem := mem with [RSP, el]:u64 <- 0x409DCE
.address 0x409DC9
00039337: call @sub_405c50 with return %00039339

.address 0x409DCE
00039339: 
.address 0x409DCE
00039344: #7902 := low:8[RAX]
.address 0x409DCE
00039347: OF := 0
.address 0x409DCE
0003934a: CF := 0
.address 0x409DCE
0003934d: AF := unknown[bits]:u1
.address 0x409DCE
00039350: PF := ~low:1[let $1 = #7902 >> 4 ^ #7902 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409DCE
00039353: SF := high:1[#7902]
.address 0x409DCE
00039356: ZF := 0 = #7902
.address 0x409DD0
0003935d: R8 := pad:64[pad:32[mem[RBP - 0x390]]]
.address 0x409DD8
00039366: when ~ZF goto %00038b72
000448e6: goto %0003936c

.address 0x409DDA
0003936c: 
.address 0x409DDA
00039371: RDI := 0x11
.address 0x409DDF
0003937a: RSP := RSP - 8
.address 0x409DDF
0003937d: mem := mem with [RSP, el]:u64 <- 0x409DE4
.address 0x409DDF
00039380: call @sub_405c50 with return %00039382

.address 0x409DE4
00039382: 
.address 0x409DE4
0003938d: #7904 := low:8[RAX]
.address 0x409DE4
00039390: OF := 0
.address 0x409DE4
00039393: CF := 0
.address 0x409DE4
00039396: AF := unknown[bits]:u1
.address 0x409DE4
00039399: PF := ~low:1[let $1 = #7904 >> 4 ^ #7904 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409DE4
0003939c: SF := high:1[#7904]
.address 0x409DE4
0003939f: ZF := 0 = #7904
.address 0x409DE6
000393a6: R8 := pad:64[pad:32[mem[RBP - 0x390]]]
.address 0x409DEE
000393af: when ~ZF goto %00038b72
000448e7: goto %000393b5

.address 0x409DF0
000393b5: 
.address 0x409DF0
000393ba: RDI := 0x15
.address 0x409DF5
000393c3: RSP := RSP - 8
.address 0x409DF5
000393c6: mem := mem with [RSP, el]:u64 <- 0x409DFA
.address 0x409DF5
000393c9: call @sub_405c50 with return %000393cb

.address 0x409DFA
000393cb: 
.address 0x409DFA
000393d6: #7906 := low:8[RAX]
.address 0x409DFA
000393d9: OF := 0
.address 0x409DFA
000393dc: CF := 0
.address 0x409DFA
000393df: AF := unknown[bits]:u1
.address 0x409DFA
000393e2: PF := ~low:1[let $1 = #7906 >> 4 ^ #7906 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409DFA
000393e5: SF := high:1[#7906]
.address 0x409DFA
000393e8: ZF := 0 = #7906
.address 0x409DFC
000393ef: R8 := pad:64[pad:32[mem[RBP - 0x390]]]
.address 0x409E04
000393f8: when ZF goto %000341da
000448e8: goto %000393fe

.address 0x409E0A
000393fe: 
000448e9: goto %00038b72

.address 0x409E10
00038b72: 
.address 0x409E10
00038b82: RAX := mem[RBP - 0x388, el]:u64
.address 0x409E17
00038b89: RDX := pad:64[pad:32[mem[RAX]]]
.address 0x409E1A
00038b96: #7838 := low:8[RDX] - 0x2F
.address 0x409E1A
00038b99: CF := low:8[RDX] < 0x2F
.address 0x409E1A
00038b9c: OF := high:1[(low:8[RDX] ^ 0x2F) & (low:8[RDX] ^ #7838)]
.address 0x409E1A
00038b9f: AF := 0x10 = (0x10 & (#7838 ^ low:8[RDX] ^ 0x2F))
.address 0x409E1A
00038ba2: PF := ~low:1[let $1 = #7838 >> 4 ^ #7838 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409E1A
00038ba5: SF := high:1[#7838]
.address 0x409E1A
00038ba8: ZF := 0 = #7838
.address 0x409E1D
00038bb2: when ~ZF goto %00038bac
000448ea: goto %00038f7c

.address 0x40A508
00038bac: 
.address 0x40A508
00038bbc: RCX := pad:64[pad:32[mem[R15]]]
.address 0x40A50C
00038bc9: #7840 := low:8[RCX]
.address 0x40A50C
00038bcc: OF := 0
.address 0x40A50C
00038bcf: CF := 0
.address 0x40A50C
00038bd2: AF := unknown[bits]:u1
.address 0x40A50C
00038bd5: PF := ~low:1[let $1 = #7840 >> 4 ^ #7840 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A50C
00038bd8: SF := high:1[#7840]
.address 0x40A50C
00038bdb: ZF := 0 = #7840
.address 0x40A50E
00038be5: when ~ZF goto %00038bdf
000448eb: goto %00038f6e

.address 0x40A514
00038f6e: 
.address 0x40A514
00038f73: R12 := mem[RBP - 0x388, el]:u64
.address 0x40A51B
00038f7a: goto %000339de

.address 0x409E23
00038f7c: 
.address 0x409E23
00038f81: RAX := pad:64[mem[0x6212F8, el]:u32]
.address 0x409E29
00038f88: R15 := low:64[RBX + 0x18]
.address 0x409E2D
00038f95: #7874 := low:32[RAX] - 3
.address 0x409E2D
00038f98: CF := low:32[RAX] < 3
.address 0x409E2D
00038f9b: OF := high:1[(low:32[RAX] ^ 3) & (low:32[RAX] ^ #7874)]
.address 0x409E2D
00038f9e: AF := 0x10 = (0x10 & (#7874 ^ low:32[RAX] ^ 3))
.address 0x409E2D
00038fa1: PF := ~low:1[let $1 = #7874 >> 4 ^ #7874 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409E2D
00038fa4: SF := high:1[#7874]
.address 0x409E2D
00038fa7: ZF := 0 = #7874
.address 0x409E30
00038fb1: when CF goto %00038fab
000448ec: goto %00038fc0

.address 0x409E32
00038fc0: 
.address 0x409E32
00038fcb: #7876 := low:32[RAX] - 4
.address 0x409E32
00038fce: CF := low:32[RAX] < 4
.address 0x409E32
00038fd1: OF := high:1[(low:32[RAX] ^ 4) & (low:32[RAX] ^ #7876)]
.address 0x409E32
00038fd4: AF := 0x10 = (0x10 & (#7876 ^ low:32[RAX] ^ 4))
.address 0x409E32
00038fd7: PF := ~low:1[let $1 = #7876 >> 4 ^ #7876 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409E32
00038fda: SF := high:1[#7876]
.address 0x409E32
00038fdd: ZF := 0 = #7876
.address 0x409E35
00038fe6: when CF | ZF goto %00038fab
000448ed: goto %00038fec

.address 0x409E37
00038fec: 
.address 0x409E37
00038ff7: #7878 := low:32[RAX] - 5
.address 0x409E37
00038ffa: CF := low:32[RAX] < 5
.address 0x409E37
00038ffd: OF := high:1[(low:32[RAX] ^ 5) & (low:32[RAX] ^ #7878)]
.address 0x409E37
00039000: AF := 0x10 = (0x10 & (#7878 ^ low:32[RAX] ^ 5))
.address 0x409E37
00039003: PF := ~low:1[let $1 = #7878 >> 4 ^ #7878 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409E37
00039006: SF := high:1[#7878]
.address 0x409E37
00039009: ZF := 0 = #7878
.address 0x409E3A
00039010: R12 := mem[RBP - 0x388, el]:u64
.address 0x409E41
0003901a: when ZF goto %00039014
000448ee: goto %00038fab

.address 0x409E47
00038fab: 
.address 0x409E47
00038fbb: R12 := mem[RBP - 0x388, el]:u64
000448ef: goto %00033a18

.address 0x409D1F
0003950a: 
000448f0: goto %000391d0

.address 0x409D20
000391d0: 
.address 0x409D20
000391e6: R12 := 0
.address 0x409D20
000391e9: AF := unknown[bits]:u1
.address 0x409D20
000391ec: ZF := 1
.address 0x409D20
000391ef: PF := 1
.address 0x409D20
000391f2: OF := 0
.address 0x409D20
000391f5: CF := 0
.address 0x409D20
000391f8: SF := 0
.address 0x409D23
000391ff: goto %000341da

.address 0x409AF2
0003a959: 
.address 0x409AF2
0003a95e: R12 := mem[RBP - 0x388, el]:u64
.address 0x409AF9
0003a965: RDX := pad:64[pad:32[mem[R12]]]
.address 0x409AFE
0003a972: #8083 := low:8[RDX] - 0x2F
.address 0x409AFE
0003a975: CF := low:8[RDX] < 0x2F
.address 0x409AFE
0003a978: OF := high:1[(low:8[RDX] ^ 0x2F) & (low:8[RDX] ^ #8083)]
.address 0x409AFE
0003a97b: AF := 0x10 = (0x10 & (#8083 ^ low:8[RDX] ^ 0x2F))
.address 0x409AFE
0003a97e: PF := ~low:1[let $1 = #8083 >> 4 ^ #8083 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409AFE
0003a981: SF := high:1[#8083]
.address 0x409AFE
0003a984: ZF := 0 = #8083
.address 0x409B01
0003a98d: when ZF goto %0003a187
000448f1: goto %0003a993

.address 0x40A678
0003a187: 
.address 0x40A678
0003a18c: R12 := mem[RBP - 0x388, el]:u64
.address 0x40A67F
0003a193: goto %00038d5c

.address 0x409B07
0003a993: 
.address 0x409B07
0003a998: RCX := pad:64[pad:32[mem[R15]]]
.address 0x409B0B
0003a9a5: #8085 := low:8[RCX]
.address 0x409B0B
0003a9a8: OF := 0
.address 0x409B0B
0003a9ab: CF := 0
.address 0x409B0B
0003a9ae: AF := unknown[bits]:u1
.address 0x409B0B
0003a9b1: PF := ~low:1[let $1 = #8085 >> 4 ^ #8085 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409B0B
0003a9b4: SF := high:1[#8085]
.address 0x409B0B
0003a9b7: ZF := 0 = #8085
.address 0x409B0D
0003a9c0: when ~ZF goto %00038bdf
000448f2: goto %00038d5c

.address 0x40A31B
00038bdf: 
.address 0x40A31B
00038bef: RDI := mem[RBP - 0x388, el]:u64
.address 0x40A322
00038bf6: mem := mem with [RBP - 0x392] <- low:8[R8]
.address 0x40A329
00038bfd: mem := mem with [RBP - 0x391] <- low:8[RDX]
.address 0x40A32F
00038c04: mem := mem with [RBP - 0x390] <- low:8[RCX]
.address 0x40A335
00038c0d: RSP := RSP - 8
.address 0x40A335
00038c10: mem := mem with [RSP, el]:u64 <- 0x40A33A
.address 0x40A335
00038c13: call @sub_403950 with return %00038c15

.address 0x40A33A
00038c15: 
.address 0x40A33A
00038c1a: RDI := R15
.address 0x40A33D
00038c21: R12 := RAX
.address 0x40A340
00038c2a: RSP := RSP - 8
.address 0x40A340
00038c2d: mem := mem with [RSP, el]:u64 <- 0x40A345
.address 0x40A340
00038c30: call @sub_403950 with return %00038c32

.address 0x40A345
00038c32: 
.address 0x40A345
00038c37: RAX := low:64[R12 + RAX + 0x20]
.address 0x40A34A
00038c3e: RCX := pad:64[pad:32[mem[RBP - 0x390]]]
.address 0x40A351
00038c45: R10 := pad:64[pad:32[mem[R15 + 1]]]
.address 0x40A356
00038c4c: RDX := pad:64[pad:32[mem[RBP - 0x391]]]
.address 0x40A35D
00038c53: R8 := pad:64[pad:32[mem[RBP - 0x392]]]
.address 0x40A365
00038c60: RAX := RAX & 0xFFFFFFFFFFFFFFF0
.address 0x40A365
00038c63: OF := 0
.address 0x40A365
00038c66: CF := 0
.address 0x40A365
00038c69: AF := unknown[bits]:u1
.address 0x40A365
00038c6c: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40A365
00038c6f: SF := high:1[RAX]
.address 0x40A365
00038c72: ZF := 0 = RAX
.address 0x40A369
00038c81: #7843 := RSP
.address 0x40A369
00038c84: #7844 := RAX
.address 0x40A369
00038c87: RSP := RSP - RAX
.address 0x40A369
00038c8a: CF := #7843 < #7844
.address 0x40A369
00038c8d: OF := high:1[(#7843 ^ #7844) & (#7843 ^ RSP)]
.address 0x40A369
00038c90: AF := 0x10 = (0x10 & (RSP ^ #7843 ^ #7844))
.address 0x40A369
00038c93: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40A369
00038c96: SF := high:1[RSP]
.address 0x40A369
00038c99: ZF := 0 = RSP
.address 0x40A36C
00038ca0: RDI := low:64[RSP + 0xF]
.address 0x40A371
00038cad: RDI := RDI & 0xFFFFFFFFFFFFFFF0
.address 0x40A371
00038cb0: OF := 0
.address 0x40A371
00038cb3: CF := 0
.address 0x40A371
00038cb6: AF := unknown[bits]:u1
.address 0x40A371
00038cb9: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40A371
00038cbc: SF := high:1[RDI]
.address 0x40A371
00038cbf: ZF := 0 = RDI
.address 0x40A375
00038ccc: #7847 := low:8[RCX] - 0x2E
.address 0x40A375
00038ccf: CF := low:8[RCX] < 0x2E
.address 0x40A375
00038cd2: OF := high:1[(low:8[RCX] ^ 0x2E) & (low:8[RCX] ^ #7847)]
.address 0x40A375
00038cd5: AF := 0x10 = (0x10 & (#7847 ^ low:8[RCX] ^ 0x2E))
.address 0x40A375
00038cd8: PF := ~low:1[let $1 = #7847 >> 4 ^ #7847 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A375
00038cdb: SF := high:1[#7847]
.address 0x40A375
00038cde: ZF := 0 = #7847
.address 0x40A378
00038ce5: R12 := RDI
.address 0x40A37B
00038cef: when ZF goto %00038ce9
000448f3: goto %00038e7d

.address 0x40A4F0
00038ce9: 
.address 0x40A4F0
00038cff: #7849 := low:8[R10]
.address 0x40A4F0
00038d02: OF := 0
.address 0x40A4F0
00038d05: CF := 0
.address 0x40A4F0
00038d08: AF := unknown[bits]:u1
.address 0x40A4F0
00038d0b: PF := ~low:1[let $1 = #7849 >> 4 ^ #7849 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A4F0
00038d0e: SF := high:1[#7849]
.address 0x40A4F0
00038d11: ZF := 0 = #7849
.address 0x40A4F3
00038d18: RAX := RDI
.address 0x40A4F6
00038d22: when ZF goto %00038d1c
000448f4: goto %00038e7b

.address 0x40A4FC
00038e7b: 
.address 0x40A4FC
00038e81: goto %00038e7d

.address 0x40A381
00038e7d: 
.address 0x40A381
00038e87: RSI := R15
.address 0x40A384
00038e8f: goto %00038e8b

.address 0x40A39B
00038e8b: 
.address 0x40A39B
00038e95: RAX := low:64[RDI + 1]
.address 0x40A39F
00038ea3: #7865 := RSI
.address 0x40A39F
00038ea6: RSI := RSI + 1
.address 0x40A39F
00038ea9: CF := RSI < #7865
.address 0x40A39F
00038eac: OF := ~high:1[#7865] & (high:1[#7865] | high:1[RSI]) & ~(high:1[#7865] & high:1[RSI])
.address 0x40A39F
00038eaf: AF := 0x10 = (0x10 & (RSI ^ #7865 ^ 1))
.address 0x40A39F
00038eb2: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40A39F
00038eb5: SF := high:1[RSI]
.address 0x40A39F
00038eb8: ZF := 0 = RSI
.address 0x40A3A3
00038ec5: #7868 := low:8[R10]
.address 0x40A3A3
00038ec8: OF := 0
.address 0x40A3A3
00038ecb: CF := 0
.address 0x40A3A3
00038ece: AF := unknown[bits]:u1
.address 0x40A3A3
00038ed1: PF := ~low:1[let $1 = #7868 >> 4 ^ #7868 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A3A3
00038ed4: SF := high:1[#7868]
.address 0x40A3A3
00038ed7: ZF := 0 = #7868
.address 0x40A3A6
00038ede: mem := mem with [RAX - 1] <- low:8[RCX]
.address 0x40A3A9
00038ee8: when ~ZF goto %00038ee2
000448f5: goto %00038f02

.address 0x40A3AB
00038f02: 
.address 0x40A3AB
00038f0d: #7870 := R15 - RSI
.address 0x40A3AB
00038f10: CF := R15 < RSI
.address 0x40A3AB
00038f13: OF := high:1[(R15 ^ RSI) & (R15 ^ #7870)]
.address 0x40A3AB
00038f16: AF := 0x10 = (0x10 & (#7870 ^ R15 ^ RSI))
.address 0x40A3AB
00038f19: PF := ~low:1[let $1 = #7870 >> 4 ^ #7870 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A3AB
00038f1c: SF := high:1[#7870]
.address 0x40A3AB
00038f1f: ZF := 0 = #7870
.address 0x40A3AE
00038f28: when ~CF goto %00038d1c
000448f6: goto %00038f2e

.address 0x40A3B0
00038f2e: 
.address 0x40A3B0
00038f39: #7872 := mem[RSI - 1] - 0x2F
.address 0x40A3B0
00038f3c: CF := mem[RSI - 1] < 0x2F
.address 0x40A3B0
00038f3f: OF := high:1[(mem[RSI - 1] ^ 0x2F) & (mem[RSI - 1] ^ #7872)]
.address 0x40A3B0
00038f42: AF := 0x10 = (0x10 & (#7872 ^ mem[RSI - 1] ^ 0x2F))
.address 0x40A3B0
00038f45: PF := ~low:1[let $1 = #7872 >> 4 ^ #7872 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A3B0
00038f48: SF := high:1[#7872]
.address 0x40A3B0
00038f4b: ZF := 0 = #7872
.address 0x40A3B4
00038f54: when ZF goto %00038d1c
000448f7: goto %00038f5a

.address 0x40A3B6
00038f5a: 
.address 0x40A3B6
00038f5f: mem := mem with [RAX] <- 0x2F
.address 0x40A3B9
00038f66: RAX := low:64[RDI + 2]
000448f8: goto %00038d1c

.address 0x40A3BD
00038d1c: 
.address 0x40A3BD
00038d32: #7851 := low:8[RDX]
.address 0x40A3BD
00038d35: OF := 0
.address 0x40A3BD
00038d38: CF := 0
.address 0x40A3BD
00038d3b: AF := unknown[bits]:u1
.address 0x40A3BD
00038d3e: PF := ~low:1[let $1 = #7851 >> 4 ^ #7851 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A3BD
00038d41: SF := high:1[#7851]
.address 0x40A3BD
00038d44: ZF := 0 = #7851
.address 0x40A3BF
00038d4e: when ZF goto %00038d48
000448f9: goto %00038df1

.address 0x40A3C1
00038df1: 
.address 0x40A3C1
00038df6: RCX := mem[RBP - 0x388, el]:u64
000448fa: goto %00038dfb

.address 0x40A3D0
00038dfb: 
.address 0x40A3D0
00038e07: #7857 := RCX
.address 0x40A3D0
00038e0a: RCX := RCX + 1
.address 0x40A3D0
00038e0d: CF := RCX < #7857
.address 0x40A3D0
00038e10: OF := ~high:1[#7857] & (high:1[#7857] | high:1[RCX]) & ~(high:1[#7857] & high:1[RCX])
.address 0x40A3D0
00038e13: AF := 0x10 = (0x10 & (RCX ^ #7857 ^ 1))
.address 0x40A3D0
00038e16: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40A3D0
00038e19: SF := high:1[RCX]
.address 0x40A3D0
00038e1c: ZF := 0 = RCX
.address 0x40A3D4
00038e2a: #7860 := RAX
.address 0x40A3D4
00038e2d: RAX := RAX + 1
.address 0x40A3D4
00038e30: CF := RAX < #7860
.address 0x40A3D4
00038e33: OF := ~high:1[#7860] & (high:1[#7860] | high:1[RAX]) & ~(high:1[#7860] & high:1[RAX])
.address 0x40A3D4
00038e36: AF := 0x10 = (0x10 & (RAX ^ #7860 ^ 1))
.address 0x40A3D4
00038e39: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40A3D4
00038e3c: SF := high:1[RAX]
.address 0x40A3D4
00038e3f: ZF := 0 = RAX
.address 0x40A3D8
00038e46: mem := mem with [RAX - 1] <- low:8[RDX]
.address 0x40A3DB
00038e4d: RDX := pad:64[pad:32[mem[RCX]]]
.address 0x40A3DE
00038e5a: #7863 := low:8[RDX]
.address 0x40A3DE
00038e5d: OF := 0
.address 0x40A3DE
00038e60: CF := 0
.address 0x40A3DE
00038e63: AF := unknown[bits]:u1
.address 0x40A3DE
00038e66: PF := ~low:1[let $1 = #7863 >> 4 ^ #7863 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A3DE
00038e69: SF := high:1[#7863]
.address 0x40A3DE
00038e6c: ZF := 0 = #7863
.address 0x40A3E0
00038e75: when ~ZF goto %00038dfb
000448fb: goto %00038d48

.address 0x40A3E2
00038d48: 
.address 0x40A3E2
00038d58: mem := mem with [RAX] <- 0
.address 0x40A3E5
00038d60: goto %00038d5c

.address 0x40A390
00038ee2: 
.address 0x40A390
00038ef2: RCX := pad:64[low:32[R10]]
.address 0x40A393
00038ef9: R10 := pad:64[pad:32[mem[RSI + 1]]]
.address 0x40A398
00038f00: RDI := RAX
000448fc: goto %00038e8b

.address 0x409B13
00038d5c: 
.address 0x409B13
00038d6c: #7853 := low:8[R8]
.address 0x409B13
00038d6f: OF := 0
.address 0x409B13
00038d72: CF := 0
.address 0x409B13
00038d75: AF := unknown[bits]:u1
.address 0x409B13
00038d78: PF := ~low:1[let $1 = #7853 >> 4 ^ #7853 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409B13
00038d7b: SF := high:1[#7853]
.address 0x409B13
00038d7e: ZF := 0 = #7853
.address 0x409B16
00038d87: when ~ZF goto %0003398e
000448fd: goto %000339de

.address 0x40A0EA
0003398e: 
.address 0x40A0EA
0003399e: RSI := 2
.address 0x40A0EF
000339a5: RDI := R12
.address 0x40A0F2
000339ae: RSP := RSP - 8
.address 0x40A0F2
000339b1: mem := mem with [RSP, el]:u64 <- 0x40A0F7
.address 0x40A0F2
000339b4: call @sub_40c640 with return %000339b6

.address 0x40A0F7
000339b6: 
.address 0x40A0F7
000339c1: #7172 := RAX
.address 0x40A0F7
000339c4: OF := 0
.address 0x40A0F7
000339c7: CF := 0
.address 0x40A0F7
000339ca: AF := unknown[bits]:u1
.address 0x40A0F7
000339cd: PF := ~low:1[let $1 = #7172 >> 4 ^ #7172 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A0F7
000339d0: SF := high:1[#7172]
.address 0x40A0F7
000339d3: ZF := 0 = #7172
.address 0x40A0FA
000339da: mem := mem with [RBX + 0x10, el]:u64 <- RAX
.address 0x40A0FE
000339e4: when ~ZF goto %000339de
000448fe: goto %0003a890

.address 0x40A104
0003a890: 
.address 0x40A104
0003a895: RSI := 0x417C65
.address 0x40A10B
0003a8a2: RDI := 0
.address 0x40A10B
0003a8a5: AF := unknown[bits]:u1
.address 0x40A10B
0003a8a8: ZF := 1
.address 0x40A10B
0003a8ab: PF := 1
.address 0x40A10B
0003a8ae: OF := 0
.address 0x40A10B
0003a8b1: CF := 0
.address 0x40A10B
0003a8b4: SF := 0
.address 0x40A10D
0003a8bb: RDX := 5
.address 0x40A112
0003a8c4: RSP := RSP - 8
.address 0x40A112
0003a8c7: mem := mem with [RSP, el]:u64 <- 0x40A117
.address 0x40A112
0003a8ca: call @sub_403930 with return %0003a8cc

.address 0x40A117
0003a8cc: 
.address 0x40A117
0003a8d1: RDI := pad:64[pad:32[low:8[R13]]]
.address 0x40A11B
0003a8d8: RDX := R12
.address 0x40A11E
0003a8df: RSI := RAX
.address 0x40A121
0003a8e8: RSP := RSP - 8
.address 0x40A121
0003a8eb: mem := mem with [RSP, el]:u64 <- 0x40A126
.address 0x40A121
0003a8ee: call @sub_4069a0 with return %0003a8f0

.address 0x40A126
0003a8f0: 
.address 0x40A126
0003a8f5: goto %000339de

.address 0x409B1C
000339de: 
.address 0x409B1C
000339ee: RCX := pad:64[mem[0x6212F8, el]:u32]
.address 0x409B22
000339f5: R15 := low:64[RBX + 0x18]
.address 0x409B26
00033a02: #7174 := low:32[RCX] - 3
.address 0x409B26
00033a05: CF := low:32[RCX] < 3
.address 0x409B26
00033a08: OF := high:1[(low:32[RCX] ^ 3) & (low:32[RCX] ^ #7174)]
.address 0x409B26
00033a0b: AF := 0x10 = (0x10 & (#7174 ^ low:32[RCX] ^ 3))
.address 0x409B26
00033a0e: PF := ~low:1[let $1 = #7174 >> 4 ^ #7174 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409B26
00033a11: SF := high:1[#7174]
.address 0x409B26
00033a14: ZF := 0 = #7174
.address 0x409B29
00033a1e: when CF goto %00033a18
000448ff: goto %0003a6f3

.address 0x409B2F
0003a6f3: 
.address 0x409B2F
0003a6fe: #8064 := low:32[RCX] - 4
.address 0x409B2F
0003a701: CF := low:32[RCX] < 4
.address 0x409B2F
0003a704: OF := high:1[(low:32[RCX] ^ 4) & (low:32[RCX] ^ #8064)]
.address 0x409B2F
0003a707: AF := 0x10 = (0x10 & (#8064 ^ low:32[RCX] ^ 4))
.address 0x409B2F
0003a70a: PF := ~low:1[let $1 = #8064 >> 4 ^ #8064 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409B2F
0003a70d: SF := high:1[#8064]
.address 0x409B2F
0003a710: ZF := 0 = #8064
.address 0x409B32
0003a71a: when CF | ZF goto %0003a714
00044900: goto %0003a864

.address 0x40A130
0003a714: 
.address 0x40A130
0003a72a: #8066 := low:8[R13]
.address 0x40A130
0003a72d: OF := 0
.address 0x40A130
0003a730: CF := 0
.address 0x40A130
0003a733: AF := unknown[bits]:u1
.address 0x40A130
0003a736: PF := ~low:1[let $1 = #8066 >> 4 ^ #8066 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A130
0003a739: SF := high:1[#8066]
.address 0x40A130
0003a73c: ZF := 0 = #8066
.address 0x40A133
0003a745: when ZF goto %00033a18
00044901: goto %0003a74b

.address 0x40A139
0003a74b: 
.address 0x40A139
0003a750: RDX := R15
.address 0x40A13C
0003a757: RSI := R12
.address 0x40A13F
0003a75e: RDI := 1
.address 0x40A144
0003a765: mem := mem with [RBP - 0x390, el]:u32 <- low:32[RCX]
.address 0x40A14A
0003a76e: RSP := RSP - 8
.address 0x40A14A
0003a771: mem := mem with [RSP, el]:u64 <- 0x40A14F
.address 0x40A14A
0003a774: call @sub_403be0 with return %0003a776

.address 0x40A14F
0003a776: 
.address 0x40A14F
0003a77b: RCX := pad:64[mem[RBP - 0x390, el]:u32]
.address 0x40A155
0003a788: #8068 := low:32[RCX] - 3
.address 0x40A155
0003a78b: CF := low:32[RCX] < 3
.address 0x40A155
0003a78e: OF := high:1[(low:32[RCX] ^ 3) & (low:32[RCX] ^ #8068)]
.address 0x40A155
0003a791: AF := 0x10 = (0x10 & (#8068 ^ low:32[RCX] ^ 3))
.address 0x40A155
0003a794: PF := ~low:1[let $1 = #8068 >> 4 ^ #8068 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A155
0003a797: SF := high:1[#8068]
.address 0x40A155
0003a79a: ZF := 0 = #8068
.address 0x40A158
0003a7a4: when ZF goto %0003a79e
00044902: goto %0003a7e6

.address 0x40A15A
0003a7e6: 
.address 0x40A15A
0003a7f1: #8072 := low:32[RAX]
.address 0x40A15A
0003a7f4: OF := 0
.address 0x40A15A
0003a7f7: CF := 0
.address 0x40A15A
0003a7fa: AF := unknown[bits]:u1
.address 0x40A15A
0003a7fd: PF := ~low:1[let $1 = #8072 >> 4 ^ #8072 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A15A
0003a800: SF := high:1[#8072]
.address 0x40A15A
0003a803: ZF := 0 = #8072
.address 0x40A15C
0003a80c: when SF goto %0003a2eb
00044903: goto %0003a812

.address 0x40A6B0
0003a2eb: 
.address 0x40A6B0
0003a2f2: RSP := RSP - 8
.address 0x40A6B0
0003a2f5: mem := mem with [RSP, el]:u64 <- 0x40A6B5
.address 0x40A6B0
0003a2f8: call @sub_4037f0 with return %0003a2fa

.address 0x40A6B5
0003a2fa: 
.address 0x40A6B5
0003a305: #8039 := mem[RAX, el]:u32 - 2
.address 0x40A6B5
0003a308: CF := mem[RAX, el]:u32 < 2
.address 0x40A6B5
0003a30b: OF := high:1[(mem[RAX, el]:u32 ^ 2) & (mem[RAX, el]:u32 ^ #8039)]
.address 0x40A6B5
0003a30e: AF := 0x10 = (0x10 & (#8039 ^ mem[RAX, el]:u32 ^ 2))
.address 0x40A6B5
0003a311: PF := ~low:1[let $1 = #8039 >> 4 ^ #8039 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A6B5
0003a314: SF := high:1[#8039]
.address 0x40A6B5
0003a317: ZF := 0 = #8039
.address 0x40A6B8
0003a320: when ZF goto %00033a18
00044904: goto %0003a326

.address 0x40A162
0003a812: 
.address 0x40A162
0003a817: RDX := pad:64[mem[RBX + 0x30, el]:u32]
.address 0x40A165
0003a824: RDX := pad:64[low:32[RDX] & 0xF000]
.address 0x40A165
0003a827: OF := 0
.address 0x40A165
0003a82a: CF := 0
.address 0x40A165
0003a82d: AF := unknown[bits]:u1
.address 0x40A165
0003a830: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A165
0003a833: SF := high:1[low:32[RDX]]
.address 0x40A165
0003a836: ZF := 0 = low:32[RDX]
.address 0x40A16B
0003a843: #8075 := low:32[RDX] - 0x4000
.address 0x40A16B
0003a846: CF := low:32[RDX] < 0x4000
.address 0x40A16B
0003a849: OF := high:1[(low:32[RDX] ^ 0x4000) & (low:32[RDX] ^ #8075)]
.address 0x40A16B
0003a84c: AF := 0x10 = (0x10 & (#8075 ^ low:32[RDX] ^ 0x4000))
.address 0x40A16B
0003a84f: PF := ~low:1[let $1 = #8075 >> 4 ^ #8075 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A16B
0003a852: SF := high:1[#8075]
.address 0x40A16B
0003a855: ZF := 0 = #8075
.address 0x40A171
0003a85e: when ~ZF goto %00033a18
00044905: goto %0003a79e

.address 0x40A177
0003a79e: 
.address 0x40A177
0003a7b4: #8070 := low:32[RAX]
.address 0x40A177
0003a7b7: OF := 0
.address 0x40A177
0003a7ba: CF := 0
.address 0x40A177
0003a7bd: AF := unknown[bits]:u1
.address 0x40A177
0003a7c0: PF := ~low:1[let $1 = #8070 >> 4 ^ #8070 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A177
0003a7c3: SF := high:1[#8070]
.address 0x40A177
0003a7c6: ZF := 0 = #8070
.address 0x40A179
0003a7cd: RDX := pad:64[low:32[R13]]
.address 0x40A17C
0003a7d6: when ZF goto %00033a87
00044906: goto %0003a7dc

.address 0x40A182
0003a7dc: 
.address 0x40A182
0003a7e1: goto %0003a326

.address 0x40A6BE
0003a326: 
.address 0x40A6BE
0003a32b: RSI := 0x417C7D
.address 0x40A6C5
0003a332: RDX := 5
.address 0x40A6CA
0003a33f: RDI := 0
.address 0x40A6CA
0003a342: AF := unknown[bits]:u1
.address 0x40A6CA
0003a345: ZF := 1
.address 0x40A6CA
0003a348: PF := 1
.address 0x40A6CA
0003a34b: OF := 0
.address 0x40A6CA
0003a34e: CF := 0
.address 0x40A6CA
0003a351: SF := 0
.address 0x40A6CC
0003a35a: RSP := RSP - 8
.address 0x40A6CC
0003a35d: mem := mem with [RSP, el]:u64 <- 0x40A6D1
.address 0x40A6CC
0003a360: call @sub_403930 with return %0003a362

.address 0x40A6D1
0003a362: 
.address 0x40A6D1
0003a367: RDX := R12
.address 0x40A6D4
0003a36e: RSI := RAX
.address 0x40A6D7
0003a375: RDI := 1
.address 0x40A6DC
0003a37e: RSP := RSP - 8
.address 0x40A6DC
0003a381: mem := mem with [RSP, el]:u64 <- 0x40A6E1
.address 0x40A6DC
0003a384: call @sub_4069a0 with return %0003a386

.address 0x40A6E1
0003a386: 
.address 0x40A6E1
0003a391: R12 := 0
.address 0x40A6E1
0003a394: AF := unknown[bits]:u1
.address 0x40A6E1
0003a397: ZF := 1
.address 0x40A6E1
0003a39a: PF := 1
.address 0x40A6E1
0003a39d: OF := 0
.address 0x40A6E1
0003a3a0: CF := 0
.address 0x40A6E1
0003a3a3: SF := 0
.address 0x40A6E4
0003a3aa: goto %00034225

.address 0x409B38
0003a864: 
.address 0x409B38
0003a86f: #8077 := low:32[RCX] - 5
.address 0x409B38
0003a872: CF := low:32[RCX] < 5
.address 0x409B38
0003a875: OF := high:1[(low:32[RCX] ^ 5) & (low:32[RCX] ^ #8077)]
.address 0x409B38
0003a878: AF := 0x10 = (0x10 & (#8077 ^ low:32[RCX] ^ 5))
.address 0x409B38
0003a87b: PF := ~low:1[let $1 = #8077 >> 4 ^ #8077 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409B38
0003a87e: SF := high:1[#8077]
.address 0x409B38
0003a881: ZF := 0 = #8077
.address 0x409B3B
0003a88a: when ~ZF goto %00033a18
00044907: goto %00039014

.address 0x409E50
00033a18: 
.address 0x409E50
00033a28: RDX := R15
.address 0x409E53
00033a2f: RSI := R12
.address 0x409E56
00033a36: RDI := 1
.address 0x409E5B
00033a3f: RSP := RSP - 8
.address 0x409E5B
00033a42: mem := mem with [RSP, el]:u64 <- 0x409E60
.address 0x409E5B
00033a45: call @sub_403960 with return %00033a47

.address 0x409E60
00033a47: 
.address 0x409E60
00033a52: RDX := 0
.address 0x409E60
00033a55: AF := unknown[bits]:u1
.address 0x409E60
00033a58: ZF := 1
.address 0x409E60
00033a5b: PF := 1
.address 0x409E60
00033a5e: OF := 0
.address 0x409E60
00033a61: CF := 0
.address 0x409E60
00033a64: SF := 0
.address 0x409E62
00033a71: #7176 := low:32[RAX]
.address 0x409E62
00033a74: OF := 0
.address 0x409E62
00033a77: CF := 0
.address 0x409E62
00033a7a: AF := unknown[bits]:u1
.address 0x409E62
00033a7d: PF := ~low:1[let $1 = #7176 >> 4 ^ #7176 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409E62
00033a80: SF := high:1[#7176]
.address 0x409E62
00033a83: ZF := 0 = #7176
.address 0x409E64
00033a8d: when ZF goto %00033a87
00044908: goto %0003906b

.address 0x409B41
00039014: 
.address 0x409B41
00039024: RDX := R15
.address 0x409B44
0003902b: RSI := R12
.address 0x409B47
00039032: RDI := 1
.address 0x409B4C
0003903b: RSP := RSP - 8
.address 0x409B4C
0003903e: mem := mem with [RSP, el]:u64 <- 0x409B51
.address 0x409B4C
00039041: call @sub_403be0 with return %00039043

.address 0x409B51
00039043: 
.address 0x409B51
0003904e: #7880 := low:32[RAX]
.address 0x409B51
00039051: OF := 0
.address 0x409B51
00039054: CF := 0
.address 0x409B51
00039057: AF := unknown[bits]:u1
.address 0x409B51
0003905a: PF := ~low:1[let $1 = #7880 >> 4 ^ #7880 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409B51
0003905d: SF := high:1[#7880]
.address 0x409B51
00039060: ZF := 0 = #7880
.address 0x409B53
00039067: RDX := 1
.address 0x409B58
00039071: when ~ZF goto %0003906b
00044909: goto %00033a87

.address 0x409E6A
0003906b: 
.address 0x409E6A
0003907b: RSI := 0x417C7D
.address 0x409E71
00039088: RDI := 0
.address 0x409E71
0003908b: AF := unknown[bits]:u1
.address 0x409E71
0003908e: ZF := 1
.address 0x409E71
00039091: PF := 1
.address 0x409E71
00039094: OF := 0
.address 0x409E71
00039097: CF := 0
.address 0x409E71
0003909a: SF := 0
.address 0x409E73
000390a1: RDX := 5
.address 0x409E78
000390aa: RSP := RSP - 8
.address 0x409E78
000390ad: mem := mem with [RSP, el]:u64 <- 0x409E7D
.address 0x409E78
000390b0: call @sub_403930 with return %000390b2

.address 0x409E7D
000390b2: 
.address 0x409E7D
000390b7: RDX := R12
.address 0x409E80
000390be: RDI := pad:64[pad:32[low:8[R13]]]
.address 0x409E84
000390c5: RSI := RAX
.address 0x409E87
000390ce: RSP := RSP - 8
.address 0x409E87
000390d1: mem := mem with [RSP, el]:u64 <- 0x409E8C
.address 0x409E87
000390d4: call @sub_4069a0 with return %000390d6

.address 0x409E8C
000390d6: 
.address 0x409E8C
000390e1: R12 := 0
.address 0x409E8C
000390e4: AF := unknown[bits]:u1
.address 0x409E8C
000390e7: ZF := 1
.address 0x409E8C
000390ea: PF := 1
.address 0x409E8C
000390ed: OF := 0
.address 0x409E8C
000390f0: CF := 0
.address 0x409E8C
000390f3: SF := 0
.address 0x409E8F
00039100: #7882 := low:8[R13]
.address 0x409E8F
00039103: OF := 0
.address 0x409E8F
00039106: CF := 0
.address 0x409E8F
00039109: AF := unknown[bits]:u1
.address 0x409E8F
0003910c: PF := ~low:1[let $1 = #7882 >> 4 ^ #7882 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409E8F
0003910f: SF := high:1[#7882]
.address 0x409E8F
00039112: ZF := 0 = #7882
.address 0x409E92
0003911b: when ~ZF goto %00034225
0004490a: goto %00039121

.address 0x409E98
00039121: 
.address 0x409E98
00039126: goto %000341da

.address 0x409B5E
00033a87: 
.address 0x409B5E
00033a9d: #7178 := low:32[R14] - 5
.address 0x409B5E
00033aa0: CF := low:32[R14] < 5
.address 0x409B5E
00033aa3: OF := high:1[(low:32[R14] ^ 5) & (low:32[R14] ^ #7178)]
.address 0x409B5E
00033aa6: AF := 0x10 = (0x10 & (#7178 ^ low:32[R14] ^ 5))
.address 0x409B5E
00033aa9: PF := ~low:1[let $1 = #7178 >> 4 ^ #7178 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409B5E
00033aac: SF := high:1[#7178]
.address 0x409B5E
00033aaf: ZF := 0 = #7178
.address 0x409B62
00033ab6: mem := mem with [RBX + 0xB8] <- 1
.address 0x409B69
00033ac0: when ZF goto %00033aba
0004490b: goto %0003a6a1

.address 0x409B6F
0003a6a1: 
.address 0x409B6F
0003a6a6: RAX := pad:64[mem[RBX + 0x30, el]:u32]
.address 0x409B72
0003a6b3: RAX := pad:64[low:32[RAX] & 0xF000]
.address 0x409B72
0003a6b6: OF := 0
.address 0x409B72
0003a6b9: CF := 0
.address 0x409B72
0003a6bc: AF := unknown[bits]:u1
.address 0x409B72
0003a6bf: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409B72
0003a6c2: SF := high:1[low:32[RAX]]
.address 0x409B72
0003a6c5: ZF := 0 = low:32[RAX]
.address 0x409B77
0003a6d2: #8062 := low:32[RAX] - 0x8000
.address 0x409B77
0003a6d5: CF := low:32[RAX] < 0x8000
.address 0x409B77
0003a6d8: OF := high:1[(low:32[RAX] ^ 0x8000) & (low:32[RAX] ^ #8062)]
.address 0x409B77
0003a6db: AF := 0x10 = (0x10 & (#8062 ^ low:32[RAX] ^ 0x8000))
.address 0x409B77
0003a6de: PF := ~low:1[let $1 = #8062 >> 4 ^ #8062 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409B77
0003a6e1: SF := high:1[#8062]
.address 0x409B77
0003a6e4: ZF := 0 = #8062
.address 0x409B7C
0003a6ed: when ZF goto %00033aba
0004490c: goto %00033ae6

.address 0x40A070
00033aba: 
.address 0x40A070
00033ad0: #7180 := mem[0x621312]
.address 0x40A070
00033ad3: CF := mem[0x621312] < 0
.address 0x40A070
00033ad6: OF := high:1[mem[0x621312] & (mem[0x621312] ^ #7180)]
.address 0x40A070
00033ad9: AF := 0x10 = (0x10 & (#7180 ^ mem[0x621312]))
.address 0x40A070
00033adc: PF := ~low:1[let $1 = #7180 >> 4 ^ #7180 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A070
00033adf: SF := high:1[#7180]
.address 0x40A070
00033ae2: ZF := 0 = #7180
.address 0x40A077
00033aec: when ZF goto %00033ae6
0004490d: goto %0003a5e9

.address 0x40A07D
0003a5e9: 
.address 0x40A07D
0003a5ee: RDI := 0x15
.address 0x40A082
0003a5f5: mem := mem with [RBP - 0x390] <- low:8[RDX]
.address 0x40A088
0003a5fe: RSP := RSP - 8
.address 0x40A088
0003a601: mem := mem with [RSP, el]:u64 <- 0x40A08D
.address 0x40A088
0003a604: call @sub_405c50 with return %0003a606

.address 0x40A08D
0003a606: 
.address 0x40A08D
0003a611: #8057 := low:8[RAX]
.address 0x40A08D
0003a614: OF := 0
.address 0x40A08D
0003a617: CF := 0
.address 0x40A08D
0003a61a: AF := unknown[bits]:u1
.address 0x40A08D
0003a61d: PF := ~low:1[let $1 = #8057 >> 4 ^ #8057 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A08D
0003a620: SF := high:1[#8057]
.address 0x40A08D
0003a623: ZF := 0 = #8057
.address 0x40A08F
0003a62a: RDX := pad:64[pad:32[mem[RBP - 0x390]]]
.address 0x40A096
0003a633: when ZF goto %00033ae6
0004490e: goto %0003a639

.address 0x40A09C
0003a639: 
.address 0x40A09C
0003a640: RSP := RSP - 8
.address 0x40A09C
0003a643: mem := mem with [RSP, el]:u64 <- 0x40A0A1
.address 0x40A09C
0003a646: call @sub_4037f0 with return %0003a648

.address 0x40A0A1
0003a648: 
.address 0x40A0A1
0003a64d: R14 := mem[RBX + 0x18, el]:u64
.address 0x40A0A5
0003a65a: #8059 := R14 - mem[0x6202F8, el]:u64
.address 0x40A0A5
0003a65d: CF := R14 < mem[0x6202F8, el]:u64
.address 0x40A0A5
0003a660: OF := high:1[(R14 ^ mem[0x6202F8, el]:u64) & (R14 ^ #8059)]
.address 0x40A0A5
0003a663: AF := 0x10 = (0x10 & (#8059 ^ R14 ^ mem[0x6202F8, el]:u64))
.address 0x40A0A5
0003a666: PF := ~low:1[let $1 = #8059 >> 4 ^ #8059 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A0A5
0003a669: SF := high:1[#8059]
.address 0x40A0A5
0003a66c: ZF := 0 = #8059
.address 0x40A0AC
0003a673: RDX := pad:64[pad:32[mem[RBP - 0x390]]]
.address 0x40A0B3
0003a67a: mem := mem with [RAX, el]:u32 <- 0x5F
.address 0x40A0B9
0003a684: when ZF goto %0003a67e
0004490f: goto %0003a69a

.address 0x40A0BB
0003a69a: 
.address 0x40A0BB
0003a69f: mem := mem with [0x6202F8, el]:u64 <- R14
00044910: goto %0003a67e

.address 0x40A0C2
0003a67e: 
.address 0x40A0C2
0003a68e: mem := mem with [RBX + 0xC0] <- 0
.address 0x40A0C9
0003a695: goto %00033ae6

.address 0x409B82
00033ae6: 
.address 0x409B82
00033af6: R11 := pad:64[mem[0x621338, el]:u32]
.address 0x409B89
00033b03: #7182 := low:32[R11]
.address 0x409B89
00033b06: OF := 0
.address 0x409B89
00033b09: CF := 0
.address 0x409B89
00033b0c: AF := unknown[bits]:u1
.address 0x409B89
00033b0f: PF := ~low:1[let $1 = #7182 >> 4 ^ #7182 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409B89
00033b12: SF := high:1[#7182]
.address 0x409B89
00033b15: ZF := 0 = #7182
.address 0x409B8C
00033b1f: when ZF goto %00033b19
00044911: goto %0003a5bd

.address 0x409B92
0003a5bd: 
.address 0x409B92
0003a5c8: #8055 := mem[0x621365]
.address 0x409B92
0003a5cb: CF := mem[0x621365] < 0
.address 0x409B92
0003a5ce: OF := high:1[mem[0x621365] & (mem[0x621365] ^ #8055)]
.address 0x409B92
0003a5d1: AF := 0x10 = (0x10 & (#8055 ^ mem[0x621365]))
.address 0x409B92
0003a5d4: PF := ~low:1[let $1 = #8055 >> 4 ^ #8055 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409B92
0003a5d7: SF := high:1[#8055]
.address 0x409B92
0003a5da: ZF := 0 = #8055
.address 0x409B99
0003a5e3: when ~ZF goto %00033b19
00044912: goto %0003a4ee

.address 0x409EA0
00033b19: 
.address 0x409EA0
00033b29: RAX := mem[0x6202F0, el]:u64
.address 0x409EA7
00033b36: #7184 := mem[RBX + 0x18, el]:u64 - RAX
.address 0x409EA7
00033b39: CF := mem[RBX + 0x18, el]:u64 < RAX
.address 0x409EA7
00033b3c: OF := high:1[(mem[RBX + 0x18, el]:u64 ^ RAX) & (mem[RBX + 0x18, el]:u64 ^ #7184)]
.address 0x409EA7
00033b3f: AF := 0x10 = (0x10 & (#7184 ^ mem[RBX + 0x18, el]:u64 ^ RAX))
.address 0x409EA7
00033b42: PF := ~low:1[let $1 = #7184 >> 4 ^ #7184 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409EA7
00033b45: SF := high:1[#7184]
.address 0x409EA7
00033b48: ZF := 0 = #7184
.address 0x409EAB
00033b52: when ZF goto %00033b4c
00044913: goto %0003a548

.address 0x40A826
00033b4c: 
.address 0x40A826
00033b5e: RSP := RSP - 8
.address 0x40A826
00033b61: mem := mem with [RSP, el]:u64 <- 0x40A82B
.address 0x40A826
00033b64: call @sub_4037f0 with return %00033b66

.address 0x40A82B
00033b66: 
.address 0x40A82B
00033b6b: mem := mem with [RAX, el]:u32 <- 0x5F
.address 0x40A831
00033b72: RCX := RAX
.address 0x40A834
00033b79: RAX := 0x620022
.address 0x40A83B
00033b80: mem := mem with [RBX + 0xB0, el]:u64 <- RAX
.address 0x40A842
00033b88: goto %00033b84

.address 0x409EB1
0003a548: 
.address 0x409EB1
0003a553: #8051 := low:8[RDX]
.address 0x409EB1
0003a556: OF := 0
.address 0x409EB1
0003a559: CF := 0
.address 0x409EB1
0003a55c: AF := unknown[bits]:u1
.address 0x409EB1
0003a55f: PF := ~low:1[let $1 = #8051 >> 4 ^ #8051 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409EB1
0003a562: SF := high:1[#8051]
.address 0x409EB1
0003a565: ZF := 0 = #8051
.address 0x409EB3
0003a56c: RSI := low:64[RBX + 0xB0]
.address 0x409EBA
0003a573: RDI := R12
.address 0x409EBD
0003a57c: when ZF goto %00039f33
00044914: goto %0003a582

.address 0x40A290
00039f33: 
.address 0x40A290
00039f3a: RSP := RSP - 8
.address 0x40A290
00039f3d: mem := mem with [RSP, el]:u64 <- 0x40A295
.address 0x40A290
00039f40: call @sub_4152d0 with return %00039f42

.address 0x40A295
00039f42: 
.address 0x40A295
00039f4d: #8002 := low:32[RAX]
.address 0x40A295
00039f50: OF := 0
.address 0x40A295
00039f53: CF := 0
.address 0x40A295
00039f56: AF := unknown[bits]:u1
.address 0x40A295
00039f59: PF := ~low:1[let $1 = #8002 >> 4 ^ #8002 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A295
00039f5c: SF := high:1[#8002]
.address 0x40A295
00039f5f: ZF := 0 = #8002
.address 0x40A297
00039f69: when ~SF goto %00039f63
00044915: goto %0003a00c

.address 0x409EC3
0003a582: 
.address 0x409EC3
0003a589: RSP := RSP - 8
.address 0x409EC3
0003a58c: mem := mem with [RSP, el]:u64 <- 0x409EC8
.address 0x409EC3
0003a58f: call @sub_4152b0 with return %0003a591

.address 0x409EC8
0003a591: 
.address 0x409EC8
0003a59c: #8053 := low:32[RAX]
.address 0x409EC8
0003a59f: OF := 0
.address 0x409EC8
0003a5a2: CF := 0
.address 0x409EC8
0003a5a5: AF := unknown[bits]:u1
.address 0x409EC8
0003a5a8: PF := ~low:1[let $1 = #8053 >> 4 ^ #8053 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409EC8
0003a5ab: SF := high:1[#8053]
.address 0x409EC8
0003a5ae: ZF := 0 = #8053
.address 0x409ECA
0003a5b7: when SF goto %0003a00c
00044916: goto %00039f63

.address 0x40A29D
0003a00c: 
.address 0x40A29D
0003a013: RSP := RSP - 8
.address 0x40A29D
0003a016: mem := mem with [RSP, el]:u64 <- 0x40A2A2
.address 0x40A29D
0003a019: call @sub_4037f0 with return %0003a01b

.address 0x40A2A2
0003a01b: 
.address 0x40A2A2
0003a020: RCX := RAX
.address 0x40A2A5
0003a027: RAX := pad:64[mem[RAX, el]:u32]
.address 0x40A2A7
0003a034: #8011 := low:32[RAX] - 0x5F
.address 0x40A2A7
0003a037: CF := low:32[RAX] < 0x5F
.address 0x40A2A7
0003a03a: OF := high:1[(low:32[RAX] ^ 0x5F) & (low:32[RAX] ^ #8011)]
.address 0x40A2A7
0003a03d: AF := 0x10 = (0x10 & (#8011 ^ low:32[RAX] ^ 0x5F))
.address 0x40A2A7
0003a040: PF := ~low:1[let $1 = #8011 >> 4 ^ #8011 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A2A7
0003a043: SF := high:1[#8011]
.address 0x40A2A7
0003a046: ZF := 0 = #8011
.address 0x40A2AA
0003a04d: RSI := extract:63:8[RSI].pad:8[ZF]
.address 0x40A2AE
0003a05a: #8013 := low:32[RAX] - 0x3D
.address 0x40A2AE
0003a05d: CF := low:32[RAX] < 0x3D
.address 0x40A2AE
0003a060: OF := high:1[(low:32[RAX] ^ 0x3D) & (low:32[RAX] ^ #8013)]
.address 0x40A2AE
0003a063: AF := 0x10 = (0x10 & (#8013 ^ low:32[RAX] ^ 0x3D))
.address 0x40A2AE
0003a066: PF := ~low:1[let $1 = #8013 >> 4 ^ #8013 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A2AE
0003a069: SF := high:1[#8013]
.address 0x40A2AE
0003a06c: ZF := 0 = #8013
.address 0x40A2B1
0003a073: RDX := extract:63:8[RDX].pad:8[ZF]
.address 0x40A2B4
0003a081: #8015 := low:32[RAX]
.address 0x40A2B4
0003a084: RAX := pad:64[low:32[RAX] - 0x16]
.address 0x40A2B4
0003a087: CF := #8015 < 0x16
.address 0x40A2B4
0003a08a: OF := high:1[(#8015 ^ 0x16) & (#8015 ^ low:32[RAX])]
.address 0x40A2B4
0003a08d: AF := 0x10 = (0x10 & (low:32[RAX] ^ #8015 ^ 0x16))
.address 0x40A2B4
0003a090: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A2B4
0003a093: SF := high:1[low:32[RAX]]
.address 0x40A2B4
0003a096: ZF := 0 = low:32[RAX]
.address 0x40A2B7
0003a0a3: RDX := pad:64[low:32[RDX] | low:32[RSI]]
.address 0x40A2B7
0003a0a6: OF := 0
.address 0x40A2B7
0003a0a9: CF := 0
.address 0x40A2B7
0003a0ac: AF := unknown[bits]:u1
.address 0x40A2B7
0003a0af: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A2B7
0003a0b2: SF := high:1[low:32[RDX]]
.address 0x40A2B7
0003a0b5: ZF := 0 = low:32[RDX]
.address 0x40A2B9
0003a0c2: RAX := pad:64[low:32[RAX] & 0xFFFFFFEF]
.address 0x40A2B9
0003a0c5: OF := 0
.address 0x40A2B9
0003a0c8: CF := 0
.address 0x40A2B9
0003a0cb: AF := unknown[bits]:u1
.address 0x40A2B9
0003a0ce: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A2B9
0003a0d1: SF := high:1[low:32[RAX]]
.address 0x40A2B9
0003a0d4: ZF := 0 = low:32[RAX]
.address 0x40A2BC
0003a0de: when ZF goto %0003a0d8
00044917: goto %0003a132

.address 0x40A2BE
0003a132: 
.address 0x40A2BE
0003a13d: #8022 := low:8[RSI]
.address 0x40A2BE
0003a140: OF := 0
.address 0x40A2BE
0003a143: CF := 0
.address 0x40A2BE
0003a146: AF := unknown[bits]:u1
.address 0x40A2BE
0003a149: PF := ~low:1[let $1 = #8022 >> 4 ^ #8022 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A2BE
0003a14c: SF := high:1[#8022]
.address 0x40A2BE
0003a14f: ZF := 0 = #8022
.address 0x40A2C1
0003a158: when ZF goto %0003a0f1
00044918: goto %0003a0d8

.address 0x40A2C3
0003a0d8: 
.address 0x40A2C3
0003a0e8: RAX := mem[RBX + 0x18, el]:u64
.address 0x40A2C7
0003a0ef: mem := mem with [0x6202F0, el]:u64 <- RAX
00044919: goto %0003a0f1

.address 0x40A2CE
0003a0f1: 
.address 0x40A2CE
0003a0f6: RAX := 0x620022
.address 0x40A2D5
0003a103: #8020 := low:8[RDX]
.address 0x40A2D5
0003a106: OF := 0
.address 0x40A2D5
0003a109: CF := 0
.address 0x40A2D5
0003a10c: AF := unknown[bits]:u1
.address 0x40A2D5
0003a10f: PF := ~low:1[let $1 = #8020 >> 4 ^ #8020 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A2D5
0003a112: SF := high:1[#8020]
.address 0x40A2D5
0003a115: ZF := 0 = #8020
.address 0x40A2D7
0003a11c: mem := mem with [RBX + 0xB0, el]:u64 <- RAX
.address 0x40A2DE
0003a126: when ZF goto %0003a120
0004491a: goto %00033b84

.address 0x40A550
0003a120: 
.address 0x40A550
0003a130: mem := mem with [RBX + 0xBC, el]:u32 <- 0
0004491b: goto %00033cdb

.address 0x40A2E4
00033b84: 
.address 0x40A2E4
00033b8e: RAX := pad:64[mem[0x621338, el]:u32]
.address 0x40A2EA
00033b9b: #7186 := low:32[RAX]
.address 0x40A2EA
00033b9e: OF := 0
.address 0x40A2EA
00033ba1: CF := 0
.address 0x40A2EA
00033ba4: AF := unknown[bits]:u1
.address 0x40A2EA
00033ba7: PF := ~low:1[let $1 = #7186 >> 4 ^ #7186 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A2EA
00033baa: SF := high:1[#7186]
.address 0x40A2EA
00033bad: ZF := 0 = #7186
.address 0x40A2EC
00033bb7: when ZF goto %00033bb1
0004491c: goto %0003a4e5

.address 0x40A7F0
00033bb1: 
.address 0x40A7F0
00033bc7: R14 := 0
.address 0x40A7F0
00033bca: AF := unknown[bits]:u1
.address 0x40A7F0
00033bcd: ZF := 1
.address 0x40A7F0
00033bd0: PF := 1
.address 0x40A7F0
00033bd3: OF := 0
.address 0x40A7F0
00033bd6: CF := 0
.address 0x40A7F0
00033bd9: SF := 0
.address 0x40A7F3
00033be1: goto %00033bdd

.address 0x40A2F2
0003a4e5: 
.address 0x40A2F2
0003a4ea: mem := mem with [RBX + 0xBC, el]:u32 <- 0
.address 0x40A2FC
0003a4f2: goto %0003a4ee

.address 0x409ED0
00039f63: 
.address 0x409ED0
00039f73: RDI := mem[RBX + 0xB0, el]:u64
.address 0x409ED7
00039f7a: RSI := 0x417CAB
.address 0x409EDE
00039f81: RCX := 0xA
.address 0x409EE3
00039f88: RDX := pad:64[mem[0x621338, el]:u32]
.address 0x409EE9
00039f90: #8008 := 1
.address 0x409EE9
00039fb2: goto %00039fac

00039f92: 
.address 0x409EE9
00039f93: #8004 := mem[RSI]
.address 0x409EE9
00039f95: #8005 := mem[RDI]
.address 0x409EE9
00039f97: #8006 := #8004 - #8005
.address 0x409EE9
00039f99: RSI := RSI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x409EE9
00039f9b: RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x409EE9
00039f9d: CF := #8004 < #8005
.address 0x409EE9
00039f9f: OF := high:1[(#8004 ^ #8005) & (#8004 ^ #8006)]
.address 0x409EE9
00039fa1: AF := 0x10 = (0x10 & (#8006 ^ #8004 ^ #8005))
.address 0x409EE9
00039fa3: PF := ~low:1[let $1 = #8006 >> 4 ^ #8006 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409EE9
00039fa5: SF := high:1[#8006]
.address 0x409EE9
00039fa7: ZF := 0 = #8006
.address 0x409EE9
00039fa9: RCX := RCX - 1
.address 0x409EE9
00039fab: #8008 := ZF
.address 0x409EE9
00039fb0: goto %00039fad

00039fac: 
.address 0x409EE9
00039faf: goto %00039fad

00039fad: 
.address 0x409EE9
00039fae: when RCX <> 0 & #8008 goto %00039f92
0004491d: goto %00039fb7

00039fb7: 
.address 0x409EEB
00039fb8: R14 := extract:63:8[R14].pad:8[~ZF]
.address 0x409EEF
00039fc5: #8009 := low:32[RDX]
.address 0x409EEF
00039fc8: OF := 0
.address 0x409EEF
00039fcb: CF := 0
.address 0x409EEF
00039fce: AF := unknown[bits]:u1
.address 0x409EEF
00039fd1: PF := ~low:1[let $1 = #8009 >> 4 ^ #8009 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409EEF
00039fd4: SF := high:1[#8009]
.address 0x409EEF
00039fd7: ZF := 0 = #8009
.address 0x409EF1
00039fe0: when ZF goto %00038a7d
0004491e: goto %00039fe6

.address 0x40A498
00038a7d: 
.address 0x40A498
00038a84: RSP := RSP - 8
.address 0x40A498
00038a87: mem := mem with [RSP, el]:u64 <- 0x40A49D
.address 0x40A498
00038a8a: call @sub_4037f0 with return %00038a8c

.address 0x40A49D
00038a8c: 
.address 0x40A49D
00038a91: RCX := RAX
0004491f: goto %00033bdd

.address 0x40A4A0
00033bdd: 
.address 0x40A4A0
00033be7: RAX := mem[0x6202E8, el]:u64
.address 0x40A4A7
00033bf4: #7188 := mem[RBX + 0x18, el]:u64 - RAX
.address 0x40A4A7
00033bf7: CF := mem[RBX + 0x18, el]:u64 < RAX
.address 0x40A4A7
00033bfa: OF := high:1[(mem[RBX + 0x18, el]:u64 ^ RAX) & (mem[RBX + 0x18, el]:u64 ^ #7188)]
.address 0x40A4A7
00033bfd: AF := 0x10 = (0x10 & (#7188 ^ mem[RBX + 0x18, el]:u64 ^ RAX))
.address 0x40A4A7
00033c00: PF := ~low:1[let $1 = #7188 >> 4 ^ #7188 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A4A7
00033c03: SF := high:1[#7188]
.address 0x40A4A7
00033c06: ZF := 0 = #7188
.address 0x40A4AB
00033c10: when ZF goto %00033c0a
00044920: goto %0003a3af

.address 0x40A6A0
00033c0a: 
.address 0x40A6A0
00033c1a: mem := mem with [RCX, el]:u32 <- 0x5F
.address 0x40A6A6
00033c27: RAX := 0
.address 0x40A6A6
00033c2a: AF := unknown[bits]:u1
.address 0x40A6A6
00033c2d: ZF := 1
.address 0x40A6A6
00033c30: PF := 1
.address 0x40A6A6
00033c33: OF := 0
.address 0x40A6A6
00033c36: CF := 0
.address 0x40A6A6
00033c39: SF := 0
00044921: goto %00033c3b

.address 0x40A4B1
0003a3af: 
.address 0x40A4B1
0003a3b4: mem := mem with [RCX, el]:u32 <- 0
.address 0x40A4B7
0003a3bb: RSI := R15
.address 0x40A4BA
0003a3c2: RDI := R12
.address 0x40A4BD
0003a3c9: mem := mem with [RBP - 0x390, el]:u64 <- RCX
.address 0x40A4C4
0003a3d2: RSP := RSP - 8
.address 0x40A4C4
0003a3d5: mem := mem with [RSP, el]:u64 <- 0x40A4C9
.address 0x40A4C4
0003a3d8: call @sub_40cec0 with return %0003a3da

.address 0x40A4C9
0003a3da: 
.address 0x40A4C9
0003a3e5: #8041 := low:32[RAX]
.address 0x40A4C9
0003a3e8: OF := 0
.address 0x40A4C9
0003a3eb: CF := 0
.address 0x40A4C9
0003a3ee: AF := unknown[bits]:u1
.address 0x40A4C9
0003a3f1: PF := ~low:1[let $1 = #8041 >> 4 ^ #8041 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A4C9
0003a3f4: SF := high:1[#8041]
.address 0x40A4C9
0003a3f7: ZF := 0 = #8041
.address 0x40A4CB
0003a3fe: RCX := mem[RBP - 0x390, el]:u64
.address 0x40A4D2
0003a408: when ZF | (SF | OF) & ~(SF & OF) goto %0003a402
00044922: goto %0003a4ab

.address 0x40A800
0003a402: 
.address 0x40A800
0003a412: RDX := pad:64[mem[RCX, el]:u32]
.address 0x40A802
0003a420: #8043 := low:32[RAX]
.address 0x40A802
0003a423: RAX := pad:64[low:32[RAX] >> 0x1F]
.address 0x40A802
0003a426: CF := high:1[#8043 << 1]
.address 0x40A802
0003a429: SF := high:1[low:32[RAX]]
.address 0x40A802
0003a42c: ZF := 0 = low:32[RAX]
.address 0x40A802
0003a42f: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A802
0003a432: AF := unknown[bits]:u1
.address 0x40A802
0003a435: OF := unknown[bits]:u1
.address 0x40A805
0003a43c: RCX := pad:64[low:32[RDX - 0x16]]
.address 0x40A808
0003a449: RCX := pad:64[low:32[RCX] & 0xFFFFFFEF]
.address 0x40A808
0003a44c: OF := 0
.address 0x40A808
0003a44f: CF := 0
.address 0x40A808
0003a452: AF := unknown[bits]:u1
.address 0x40A808
0003a455: PF := ~low:1[let $1 = low:32[RCX] >> 4 ^ low:32[RCX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A808
0003a458: SF := high:1[low:32[RCX]]
.address 0x40A808
0003a45b: ZF := 0 = low:32[RCX]
.address 0x40A80B
0003a465: when ZF goto %0003a45f
00044923: goto %0003a47f

.address 0x40A80D
0003a47f: 
.address 0x40A80D
0003a48a: #8046 := low:32[RDX] - 0x5F
.address 0x40A80D
0003a48d: CF := low:32[RDX] < 0x5F
.address 0x40A80D
0003a490: OF := high:1[(low:32[RDX] ^ 0x5F) & (low:32[RDX] ^ #8046)]
.address 0x40A80D
0003a493: AF := 0x10 = (0x10 & (#8046 ^ low:32[RDX] ^ 0x5F))
.address 0x40A80D
0003a496: PF := ~low:1[let $1 = #8046 >> 4 ^ #8046 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A80D
0003a499: SF := high:1[#8046]
.address 0x40A80D
0003a49c: ZF := 0 = #8046
.address 0x40A810
0003a4a5: when ~ZF goto %00033c3b
00044924: goto %0003a45f

.address 0x40A816
0003a45f: 
.address 0x40A816
0003a46f: RDX := mem[RBX + 0x18, el]:u64
.address 0x40A81A
0003a476: mem := mem with [0x6202E8, el]:u64 <- RDX
.address 0x40A821
0003a47d: goto %00033c3b

.address 0x40A6A8
00033c3b: 
.address 0x40A6A8
00033c40: RCX := pad:64[low:32[R14]]
.address 0x40A6AB
00033c48: goto %00033c44

.address 0x40A4D8
0003a4ab: 
.address 0x40A4D8
0003a4b6: RAX := 0
.address 0x40A4D8
0003a4b9: AF := unknown[bits]:u1
.address 0x40A4D8
0003a4bc: ZF := 1
.address 0x40A4D8
0003a4bf: PF := 1
.address 0x40A4D8
0003a4c2: OF := 0
.address 0x40A4D8
0003a4c5: CF := 0
.address 0x40A4D8
0003a4c8: SF := 0
.address 0x40A4DA
0003a4cf: RCX := 1
.address 0x40A4DF
0003a4d6: RDX := 2
.address 0x40A4E4
0003a4dd: goto %00033c89

.address 0x409EF7
00039fe6: 
.address 0x409EF7
00039feb: RCX := pad:64[low:32[R14]]
.address 0x409EFA
00039ff8: RAX := 0
.address 0x409EFA
00039ffb: AF := unknown[bits]:u1
.address 0x409EFA
00039ffe: ZF := 1
.address 0x409EFA
0003a001: PF := 1
.address 0x409EFA
0003a004: OF := 0
.address 0x409EFA
0003a007: CF := 0
.address 0x409EFA
0003a00a: SF := 0
00044925: goto %00033c44

.address 0x409EFC
00033c44: 
.address 0x409EFC
00033c54: RDX := 0
.address 0x409EFC
00033c57: AF := unknown[bits]:u1
.address 0x409EFC
00033c5a: ZF := 1
.address 0x409EFC
00033c5d: PF := 1
.address 0x409EFC
00033c60: OF := 0
.address 0x409EFC
00033c63: CF := 0
.address 0x409EFC
00033c66: SF := 0
.address 0x409EFE
00033c73: #7190 := low:8[R14]
.address 0x409EFE
00033c76: OF := 0
.address 0x409EFE
00033c79: CF := 0
.address 0x409EFE
00033c7c: AF := unknown[bits]:u1
.address 0x409EFE
00033c7f: PF := ~low:1[let $1 = #7190 >> 4 ^ #7190 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409EFE
00033c82: SF := high:1[#7190]
.address 0x409EFE
00033c85: ZF := 0 = #7190
.address 0x409F01
00033c8f: when ZF goto %00033c89
00044926: goto %0003a274

.address 0x409F03
0003a274: 
.address 0x409F03
0003a279: RCX := pad:64[low:32[R14]]
.address 0x409F06
0003a280: RDX := pad:64[low:32[RCX]]
.address 0x409F08
0003a28e: #8032 := low:32[RDX]
.address 0x409F08
0003a291: RDX := pad:64[low:32[RDX] << 0x1F]
.address 0x409F08
0003a294: CF := low:1[#8032 >> 1]
.address 0x409F08
0003a297: SF := high:1[low:32[RDX]]
.address 0x409F08
0003a29a: ZF := 0 = low:32[RDX]
.address 0x409F08
0003a29d: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409F08
0003a2a0: AF := unknown[bits]:u1
.address 0x409F08
0003a2a3: OF := unknown[bits]:u1
.address 0x409F0B
0003a2b1: #8034 := low:32[RDX]
.address 0x409F0B
0003a2b4: RDX := pad:64[low:32[RDX] ~>> 0x1F]
.address 0x409F0B
0003a2b7: CF := high:1[#8034 << 1]
.address 0x409F0B
0003a2ba: SF := high:1[low:32[RDX]]
.address 0x409F0B
0003a2bd: ZF := 0 = low:32[RDX]
.address 0x409F0B
0003a2c0: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409F0B
0003a2c3: AF := unknown[bits]:u1
.address 0x409F0B
0003a2c6: OF := unknown[bits]:u1
.address 0x409F0E
0003a2d4: #8036 := low:32[RDX]
.address 0x409F0E
0003a2d7: RDX := pad:64[low:32[RDX] + 2]
.address 0x409F0E
0003a2da: CF := low:32[RDX] < #8036
.address 0x409F0E
0003a2dd: OF := ~high:1[#8036] & (high:1[#8036] | high:1[low:32[RDX]]) & ~(
high:1[#8036] & high:1[low:32[RDX]])
.address 0x409F0E
0003a2e0: AF := 0x10 = (0x10 & (low:32[RDX] ^ #8036 ^ 2))
.address 0x409F0E
0003a2e3: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409F0E
0003a2e6: SF := high:1[low:32[RDX]]
.address 0x409F0E
0003a2e9: ZF := 0 = low:32[RDX]
00044927: goto %00033c89

.address 0x409F11
00033c89: 
.address 0x409F11
00033c9f: mem := mem with [0x621364] <- mem[0x621364] | low:8[RCX]
.address 0x409F11
00033ca2: OF := 0
.address 0x409F11
00033ca5: CF := 0
.address 0x409F11
00033ca8: AF := unknown[bits]:u1
.address 0x409F11
00033cab: PF := ~low:1[let $1 = mem[0x621364] >> 4 ^ mem[0x621364] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409F11
00033cae: SF := high:1[mem[0x621364]]
.address 0x409F11
00033cb1: ZF := 0 = mem[0x621364]
.address 0x409F17
00033cbe: #7193 := low:32[RAX]
.address 0x409F17
00033cc1: OF := 0
.address 0x409F17
00033cc4: CF := 0
.address 0x409F17
00033cc7: AF := unknown[bits]:u1
.address 0x409F17
00033cca: PF := ~low:1[let $1 = #7193 >> 4 ^ #7193 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409F17
00033ccd: SF := high:1[#7193]
.address 0x409F17
00033cd0: ZF := 0 = #7193
.address 0x409F19
00033cd7: mem := mem with [RBX + 0xBC, el]:u32 <- low:32[RDX]
.address 0x409F1F
00033ce1: when ~ZF goto %00033cdb
00044928: goto %00033d9c

.address 0x40A55A
00033cdb: 
.address 0x40A55A
00033ceb: RDX := R12
.address 0x40A55D
00033cf8: RDI := 0
.address 0x40A55D
00033cfb: AF := unknown[bits]:u1
.address 0x40A55D
00033cfe: ZF := 1
.address 0x40A55D
00033d01: PF := 1
.address 0x40A55D
00033d04: OF := 0
.address 0x40A55D
00033d07: CF := 0
.address 0x40A55D
00033d0a: SF := 0
.address 0x40A55F
00033d11: RSI := 3
.address 0x40A564
00033d1a: RSP := RSP - 8
.address 0x40A564
00033d1d: mem := mem with [RSP, el]:u64 <- 0x40A569
.address 0x40A564
00033d20: call @sub_413b10 with return %00033d22

.address 0x40A569
00033d22: 
.address 0x40A569
00033d27: R14 := RAX
.address 0x40A56C
00033d30: RSP := RSP - 8
.address 0x40A56C
00033d33: mem := mem with [RSP, el]:u64 <- 0x40A571
.address 0x40A56C
00033d36: call @sub_4037f0 with return %00033d38

.address 0x40A571
00033d38: 
.address 0x40A571
00033d3d: RSI := pad:64[mem[RAX, el]:u32]
.address 0x40A573
00033d44: RDX := 0x41A2FC
.address 0x40A57A
00033d4b: RCX := R14
.address 0x40A57D
00033d58: RDI := 0
.address 0x40A57D
00033d5b: AF := unknown[bits]:u1
.address 0x40A57D
00033d5e: ZF := 1
.address 0x40A57D
00033d61: PF := 1
.address 0x40A57D
00033d64: OF := 0
.address 0x40A57D
00033d67: CF := 0
.address 0x40A57D
00033d6a: SF := 0
.address 0x40A57F
00033d77: RAX := 0
.address 0x40A57F
00033d7a: AF := unknown[bits]:u1
.address 0x40A57F
00033d7d: ZF := 1
.address 0x40A57F
00033d80: PF := 1
.address 0x40A57F
00033d83: OF := 0
.address 0x40A57F
00033d86: CF := 0
.address 0x40A57F
00033d89: SF := 0
.address 0x40A581
00033d92: RSP := RSP - 8
.address 0x40A581
00033d95: mem := mem with [RSP, el]:u64 <- 0x40A586
.address 0x40A581
00033d98: call @sub_403d20 with return %00033d9a

.address 0x40A586
00033d9a: 
.address 0x40A586
00033da0: goto %00033d9c

.address 0x409F25
00033d9c: 
.address 0x409F25
00033da6: RAX := pad:64[mem[RBX + 0x30, el]:u32]
.address 0x409F28
00033db3: RAX := pad:64[low:32[RAX] & 0xF000]
.address 0x409F28
00033db6: OF := 0
.address 0x409F28
00033db9: CF := 0
.address 0x409F28
00033dbc: AF := unknown[bits]:u1
.address 0x409F28
00033dbf: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409F28
00033dc2: SF := high:1[low:32[RAX]]
.address 0x409F28
00033dc5: ZF := 0 = low:32[RAX]
.address 0x409F2D
00033dd2: #7196 := low:32[RAX] - 0xA000
.address 0x409F2D
00033dd5: CF := low:32[RAX] < 0xA000
.address 0x409F2D
00033dd8: OF := high:1[(low:32[RAX] ^ 0xA000) & (low:32[RAX] ^ #7196)]
.address 0x409F2D
00033ddb: AF := 0x10 = (0x10 & (#7196 ^ low:32[RAX] ^ 0xA000))
.address 0x409F2D
00033dde: PF := ~low:1[let $1 = #7196 >> 4 ^ #7196 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409F2D
00033de1: SF := high:1[#7196]
.address 0x409F2D
00033de4: ZF := 0 = #7196
.address 0x409F32
00033dee: when ~ZF goto %00033de8
00044929: goto %0003a23e

.address 0x409F38
0003a23e: 
.address 0x409F38
0003a243: R10 := pad:64[mem[0x621338, el]:u32]
.address 0x409F3F
0003a250: #8030 := low:32[R10]
.address 0x409F3F
0003a253: OF := 0
.address 0x409F3F
0003a256: CF := 0
.address 0x409F3F
0003a259: AF := unknown[bits]:u1
.address 0x409F3F
0003a25c: PF := ~low:1[let $1 = #8030 >> 4 ^ #8030 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409F3F
0003a25f: SF := high:1[#8030]
.address 0x409F3F
0003a262: ZF := 0 = #8030
.address 0x409F42
0003a26b: when ~ZF goto %0003884c
0004492a: goto %0003886d

.address 0x409B9F
0003a4ee: 
.address 0x409B9F
0003a4f8: RAX := pad:64[mem[RBX + 0x30, el]:u32]
.address 0x409BA2
0003a505: RAX := pad:64[low:32[RAX] & 0xF000]
.address 0x409BA2
0003a508: OF := 0
.address 0x409BA2
0003a50b: CF := 0
.address 0x409BA2
0003a50e: AF := unknown[bits]:u1
.address 0x409BA2
0003a511: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409BA2
0003a514: SF := high:1[low:32[RAX]]
.address 0x409BA2
0003a517: ZF := 0 = low:32[RAX]
.address 0x409BA7
0003a524: #8049 := low:32[RAX] - 0xA000
.address 0x409BA7
0003a527: CF := low:32[RAX] < 0xA000
.address 0x409BA7
0003a52a: OF := high:1[(low:32[RAX] ^ 0xA000) & (low:32[RAX] ^ #8049)]
.address 0x409BA7
0003a52d: AF := 0x10 = (0x10 & (#8049 ^ low:32[RAX] ^ 0xA000))
.address 0x409BA7
0003a530: PF := ~low:1[let $1 = #8049 >> 4 ^ #8049 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409BA7
0003a533: SF := high:1[#8049]
.address 0x409BA7
0003a536: ZF := 0 = #8049
.address 0x409BAC
0003a53f: when ZF goto %0003884c
0004492b: goto %00033de8

.address 0x40A478
0003884c: 
.address 0x40A478
00038857: #7815 := mem[0x6212FD]
.address 0x40A478
0003885a: CF := mem[0x6212FD] < 0
.address 0x40A478
0003885d: OF := high:1[mem[0x6212FD] & (mem[0x6212FD] ^ #7815)]
.address 0x40A478
00038860: AF := 0x10 = (0x10 & (#7815 ^ mem[0x6212FD]))
.address 0x40A478
00038863: PF := ~low:1[let $1 = #7815 >> 4 ^ #7815 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A478
00038866: SF := high:1[#7815]
.address 0x40A478
00038869: ZF := 0 = #7815
.address 0x40A47F
00038873: when ~ZF goto %0003886d
0004492c: goto %00038a61

.address 0x409F48
0003886d: 
.address 0x409F48
0003887d: RSI := mem[RBX + 0x48, el]:u64
.address 0x409F4C
00038884: RDI := R12
.address 0x409F4F
0003888d: RSP := RSP - 8
.address 0x409F4F
00038890: mem := mem with [RSP, el]:u64 <- 0x409F54
.address 0x409F4F
00038893: call @sub_40c1c0 with return %00038895

.address 0x409F54
00038895: 
.address 0x409F54
000388a0: #7817 := RAX
.address 0x409F54
000388a3: OF := 0
.address 0x409F54
000388a6: CF := 0
.address 0x409F54
000388a9: AF := unknown[bits]:u1
.address 0x409F54
000388ac: PF := ~low:1[let $1 = #7817 >> 4 ^ #7817 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409F54
000388af: SF := high:1[#7817]
.address 0x409F54
000388b2: ZF := 0 = #7817
.address 0x409F57
000388b9: R14 := RAX
.address 0x409F5A
000388c0: mem := mem with [RBX + 8, el]:u64 <- RAX
.address 0x409F5E
000388ca: when ZF goto %000388c4
0004492d: goto %00038957

.address 0x40A6F0
000388c4: 
.address 0x40A6F0
000388d4: RSI := 0x417C8E
.address 0x40A6F7
000388e1: RDI := 0
.address 0x40A6F7
000388e4: AF := unknown[bits]:u1
.address 0x40A6F7
000388e7: ZF := 1
.address 0x40A6F7
000388ea: PF := 1
.address 0x40A6F7
000388ed: OF := 0
.address 0x40A6F7
000388f0: CF := 0
.address 0x40A6F7
000388f3: SF := 0
.address 0x40A6F9
000388fa: RDX := 5
.address 0x40A6FE
00038903: RSP := RSP - 8
.address 0x40A6FE
00038906: mem := mem with [RSP, el]:u64 <- 0x40A703
.address 0x40A6FE
00038909: call @sub_403930 with return %0003890b

.address 0x40A703
0003890b: 
.address 0x40A703
00038910: RDI := pad:64[pad:32[low:8[R13]]]
.address 0x40A707
00038917: RDX := R12
.address 0x40A70A
0003891e: RSI := RAX
.address 0x40A70D
00038927: RSP := RSP - 8
.address 0x40A70D
0003892a: mem := mem with [RSP, el]:u64 <- 0x40A712
.address 0x40A70D
0003892d: call @sub_4069a0 with return %0003892f

.address 0x40A712
0003892f: 
.address 0x40A712
00038934: R14 := mem[RBX + 8, el]:u64
.address 0x40A716
00038941: #7819 := R14
.address 0x40A716
00038944: OF := 0
.address 0x40A716
00038947: CF := 0
.address 0x40A716
0003894a: AF := unknown[bits]:u1
.address 0x40A716
0003894d: PF := ~low:1[let $1 = #7819 >> 4 ^ #7819 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A716
00038950: SF := high:1[#7819]
.address 0x40A716
00038953: ZF := 0 = #7819
.address 0x40A719
0003895d: when ~ZF goto %00038957
0004492e: goto %00039cfc

.address 0x40A71F
00039cfc: 
0004492f: goto %000389d3

.address 0x409F64
00038957: 
.address 0x409F64
0003896d: #7821 := mem[R14] - 0x2F
.address 0x409F64
00038970: CF := mem[R14] < 0x2F
.address 0x409F64
00038973: OF := high:1[(mem[R14] ^ 0x2F) & (mem[R14] ^ #7821)]
.address 0x409F64
00038976: AF := 0x10 = (0x10 & (#7821 ^ mem[R14] ^ 0x2F))
.address 0x409F64
00038979: PF := ~low:1[let $1 = #7821 >> 4 ^ #7821 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409F64
0003897c: SF := high:1[#7821]
.address 0x409F64
0003897f: ZF := 0 = #7821
.address 0x409F68
00038989: when ZF goto %00038983
00044930: goto %00039be9

.address 0x409F6E
00039be9: 
.address 0x409F6E
00039bee: RDI := R12
.address 0x409F71
00039bf7: RSP := RSP - 8
.address 0x409F71
00039bfa: mem := mem with [RSP, el]:u64 <- 0x409F76
.address 0x409F71
00039bfd: call @sub_40cd50 with return %00039bff

.address 0x409F76
00039bff: 
.address 0x409F76
00039c0a: #7979 := RAX
.address 0x409F76
00039c0d: OF := 0
.address 0x409F76
00039c10: CF := 0
.address 0x409F76
00039c13: AF := unknown[bits]:u1
.address 0x409F76
00039c16: PF := ~low:1[let $1 = #7979 >> 4 ^ #7979 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409F76
00039c19: SF := high:1[#7979]
.address 0x409F76
00039c1c: ZF := 0 = #7979
.address 0x409F79
00039c25: when ZF goto %00038983
00044931: goto %00039c2b

.address 0x40A688
00038983: 
.address 0x40A688
00038993: RDI := R14
.address 0x40A68B
0003899c: RSP := RSP - 8
.address 0x40A68B
0003899f: mem := mem with [RSP, el]:u64 <- 0x40A690
.address 0x40A68B
000389a2: call @sub_4146b0 with return %000389a4

.address 0x40A690
000389a4: 
.address 0x40A690
000389a9: R15 := RAX
.address 0x40A693
000389b1: goto %000389ad

.address 0x409F7F
00039c2b: 
.address 0x409F7F
00039c30: RDI := R14
.address 0x409F82
00039c37: mem := mem with [RBP - 0x390, el]:u64 <- RAX
.address 0x409F89
00039c40: RSP := RSP - 8
.address 0x409F89
00039c43: mem := mem with [RSP, el]:u64 <- 0x409F8E
.address 0x409F89
00039c46: call @sub_403950 with return %00039c48

.address 0x409F8E
00039c48: 
.address 0x409F8E
00039c4d: RDX := mem[RBP - 0x390, el]:u64
.address 0x409F95
00039c54: RDI := low:64[RDX + RAX + 2]
.address 0x409F9A
00039c5d: RSP := RSP - 8
.address 0x409F9A
00039c60: mem := mem with [RSP, el]:u64 <- 0x409F9F
.address 0x409F9A
00039c63: call @sub_414480 with return %00039c65

.address 0x409F9F
00039c65: 
.address 0x409F9F
00039c6a: RDX := mem[RBP - 0x390, el]:u64
.address 0x409FA6
00039c71: R15 := RAX
.address 0x409FA9
00039c7e: #7981 := mem[R12 + RDX - 1] - 0x2F
.address 0x409FA9
00039c81: CF := mem[R12 + RDX - 1] < 0x2F
.address 0x409FA9
00039c84: OF := high:1[(mem[R12 + RDX - 1] ^ 0x2F) & (mem[R12 + RDX - 1] ^ #7981)]
.address 0x409FA9
00039c87: AF := 0x10 = (0x10 & (#7981 ^ mem[R12 + RDX - 1] ^ 0x2F))
.address 0x409FA9
00039c8a: PF := ~low:1[let $1 = #7981 >> 4 ^ #7981 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409FA9
00039c8d: SF := high:1[#7981]
.address 0x409FA9
00039c90: ZF := 0 = #7981
.address 0x409FAF
00039c9a: when ZF goto %00039c94
00044932: goto %00039cd9

.address 0x409FB1
00039cd9: 
.address 0x409FB1
00039ce5: #7983 := RDX
.address 0x409FB1
00039ce8: RDX := RDX + 1
.address 0x409FB1
00039ceb: CF := RDX < #7983
.address 0x409FB1
00039cee: OF := ~high:1[#7983] & (high:1[#7983] | high:1[RDX]) & ~(high:1[#7983] & high:1[RDX])
.address 0x409FB1
00039cf1: AF := 0x10 = (0x10 & (RDX ^ #7983 ^ 1))
.address 0x409FB1
00039cf4: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x409FB1
00039cf7: SF := high:1[RDX]
.address 0x409FB1
00039cfa: ZF := 0 = RDX
00044933: goto %00039c94

.address 0x409FB5
00039c94: 
.address 0x409FB5
00039ca4: RSI := R12
.address 0x409FB8
00039cab: RDI := R15
.address 0x409FBB
00039cb4: RSP := RSP - 8
.address 0x409FBB
00039cb7: mem := mem with [RSP, el]:u64 <- 0x409FC0
.address 0x409FBB
00039cba: call @sub_403ca0 with return %00039cbc

.address 0x409FC0
00039cbc: 
.address 0x409FC0
00039cc1: RSI := R14
.address 0x409FC3
00039cc8: RDI := RAX
.address 0x409FC6
00039cd1: RSP := RSP - 8
.address 0x409FC6
00039cd4: mem := mem with [RSP, el]:u64 <- 0x409FCB
.address 0x409FC6
00039cd7: call @sub_403830 with return %000389ad

.address 0x409FCB
000389ad: 
.address 0x409FCB
000389bd: #7823 := R15
.address 0x409FCB
000389c0: OF := 0
.address 0x409FCB
000389c3: CF := 0
.address 0x409FCB
000389c6: AF := unknown[bits]:u1
.address 0x409FCB
000389c9: PF := ~low:1[let $1 = #7823 >> 4 ^ #7823 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409FCB
000389cc: SF := high:1[#7823]
.address 0x409FCB
000389cf: ZF := 0 = #7823
.address 0x409FCE
000389d9: when ZF goto %000389d3
00044934: goto %00039bb3

.address 0x40A720
000389d3: 
.address 0x40A720
000389e9: R15 := 0
.address 0x40A720
000389ec: AF := unknown[bits]:u1
.address 0x40A720
000389ef: ZF := 1
.address 0x40A720
000389f2: PF := 1
.address 0x40A720
000389f5: OF := 0
.address 0x40A720
000389f8: CF := 0
.address 0x40A720
000389fb: SF := 0
.address 0x40A723
00038a03: goto %000389ff

.address 0x409FD4
00039bb3: 
.address 0x409FD4
00039bb8: R9 := pad:64[mem[RBX + 0xC4, el]:u32]
.address 0x409FDB
00039bc5: #7977 := low:32[R9]
.address 0x409FDB
00039bc8: OF := 0
.address 0x409FDB
00039bcb: CF := 0
.address 0x409FDB
00039bce: AF := unknown[bits]:u1
.address 0x409FDB
00039bd1: PF := ~low:1[let $1 = #7977 >> 4 ^ #7977 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409FDB
00039bd4: SF := high:1[#7977]
.address 0x409FDB
00039bd7: ZF := 0 = #7977
.address 0x409FDE
00039be0: when ZF goto %000399f2
00044935: goto %00039a29

.address 0x40A7D0
000399f2: 
.address 0x40A7D0
000399f7: RDI := mem[RBX + 8, el]:u64
.address 0x40A7D4
00039a00: RSP := RSP - 8
.address 0x40A7D4
00039a03: mem := mem with [RSP, el]:u64 <- 0x40A7D9
.address 0x40A7D4
00039a06: call @sub_406190 with return %00039a08

.address 0x40A7D9
00039a08: 
.address 0x40A7D9
00039a13: #7962 := low:8[RAX]
.address 0x40A7D9
00039a16: OF := 0
.address 0x40A7D9
00039a19: CF := 0
.address 0x40A7D9
00039a1c: AF := unknown[bits]:u1
.address 0x40A7D9
00039a1f: PF := ~low:1[let $1 = #7962 >> 4 ^ #7962 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A7D9
00039a22: SF := high:1[#7962]
.address 0x40A7D9
00039a25: ZF := 0 = #7962
.address 0x40A7DB
00039a2f: when ZF goto %00039a29
00044936: goto %00039ba5

.address 0x40A7E1
00039ba5: 
.address 0x40A7E1
00039baa: mem := mem with [RBX + 0xC4, el]:u32 <- 0xFFFFFFFF
.address 0x40A7EB
00039bb1: goto %00039a29

.address 0x409FE4
00039a29: 
.address 0x409FE4
00039a3f: #7964 := mem[0x621314, el]:u32 - 1
.address 0x409FE4
00039a42: CF := mem[0x621314, el]:u32 < 1
.address 0x409FE4
00039a45: OF := high:1[(mem[0x621314, el]:u32 ^ 1) & (mem[0x621314, el]:u32 ^ #7964)]
.address 0x409FE4
00039a48: AF := 0x10 = (0x10 & (#7964 ^ mem[0x621314, el]:u32 ^ 1))
.address 0x409FE4
00039a4b: PF := ~low:1[let $1 = #7964 >> 4 ^ #7964 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409FE4
00039a4e: SF := high:1[#7964]
.address 0x409FE4
00039a51: ZF := 0 = #7964
.address 0x409FEB
00039a5b: when ~(CF | ZF) goto %00039a55
00044937: goto %00039b79

.address 0x409FED
00039b79: 
.address 0x409FED
00039b84: #7975 := mem[0x6212FD]
.address 0x409FED
00039b87: CF := mem[0x6212FD] < 0
.address 0x409FED
00039b8a: OF := high:1[mem[0x6212FD] & (mem[0x6212FD] ^ #7975)]
.address 0x409FED
00039b8d: AF := 0x10 = (0x10 & (#7975 ^ mem[0x6212FD]))
.address 0x409FED
00039b90: PF := ~low:1[let $1 = #7975 >> 4 ^ #7975 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409FED
00039b93: SF := high:1[#7975]
.address 0x409FED
00039b96: ZF := 0 = #7975
.address 0x409FF4
00039b9f: when ZF goto %000389ff
00044938: goto %00039a55

.address 0x409FF6
00039a55: 
.address 0x409FF6
00039a65: RDX := low:64[RBP - 0x380]
.address 0x409FFD
00039a6c: RSI := R15
.address 0x40A000
00039a73: RDI := 1
.address 0x40A005
00039a7c: RSP := RSP - 8
.address 0x40A005
00039a7f: mem := mem with [RSP, el]:u64 <- 0x40A00A
.address 0x40A005
00039a82: call @sub_403be0 with return %00039a84

.address 0x40A00A
00039a84: 
.address 0x40A00A
00039a8f: #7966 := low:32[RAX]
.address 0x40A00A
00039a92: OF := 0
.address 0x40A00A
00039a95: CF := 0
.address 0x40A00A
00039a98: AF := unknown[bits]:u1
.address 0x40A00A
00039a9b: PF := ~low:1[let $1 = #7966 >> 4 ^ #7966 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A00A
00039a9e: SF := high:1[#7966]
.address 0x40A00A
00039aa1: ZF := 0 = #7966
.address 0x40A00C
00039aaa: when ~ZF goto %000389ff
00044939: goto %00039ab0

.address 0x40A00E
00039ab0: 
.address 0x40A00E
00039abb: #7968 := low:8[R13]
.address 0x40A00E
00039abe: OF := 0
.address 0x40A00E
00039ac1: CF := 0
.address 0x40A00E
00039ac4: AF := unknown[bits]:u1
.address 0x40A00E
00039ac7: PF := ~low:1[let $1 = #7968 >> 4 ^ #7968 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A00E
00039aca: SF := high:1[#7968]
.address 0x40A00E
00039acd: ZF := 0 = #7968
.address 0x40A011
00039ad4: mem := mem with [RBX + 0xB9] <- 1
.address 0x40A018
00039adb: RAX := pad:64[mem[RBP - 0x368, el]:u32]
.address 0x40A01E
00039ae5: when ZF goto %00039adf
0004493a: goto %00039af1

.address 0x40A020
00039af1: 
.address 0x40A020
00039af6: R8 := pad:64[mem[0x621338, el]:u32]
.address 0x40A027
00039b03: #7970 := low:32[R8]
.address 0x40A027
00039b06: OF := 0
.address 0x40A027
00039b09: CF := 0
.address 0x40A027
00039b0c: AF := unknown[bits]:u1
.address 0x40A027
00039b0f: PF := ~low:1[let $1 = #7970 >> 4 ^ #7970 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A027
00039b12: SF := high:1[#7970]
.address 0x40A027
00039b15: ZF := 0 = #7970
.address 0x40A02A
00039b1e: when ZF goto %00039adf
0004493b: goto %00039b24

.address 0x40A02C
00039b24: 
.address 0x40A02C
00039b29: RDX := pad:64[low:32[RAX]]
.address 0x40A02E
00039b36: RDX := pad:64[low:32[RDX] & 0xF000]
.address 0x40A02E
00039b39: OF := 0
.address 0x40A02E
00039b3c: CF := 0
.address 0x40A02E
00039b3f: AF := unknown[bits]:u1
.address 0x40A02E
00039b42: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A02E
00039b45: SF := high:1[low:32[RDX]]
.address 0x40A02E
00039b48: ZF := 0 = low:32[RDX]
.address 0x40A034
00039b55: #7973 := low:32[RDX] - 0x4000
.address 0x40A034
00039b58: CF := low:32[RDX] < 0x4000
.address 0x40A034
00039b5b: OF := high:1[(low:32[RDX] ^ 0x4000) & (low:32[RDX] ^ #7973)]
.address 0x40A034
00039b5e: AF := 0x10 = (0x10 & (#7973 ^ low:32[RDX] ^ 0x4000))
.address 0x40A034
00039b61: PF := ~low:1[let $1 = #7973 >> 4 ^ #7973 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A034
00039b64: SF := high:1[#7973]
.address 0x40A034
00039b67: ZF := 0 = #7973
.address 0x40A03A
00039b70: when ZF goto %000389ff
0004493c: goto %00039b76

.address 0x40A03C
00039b76: 
0004493d: goto %00039adf

.address 0x40A040
00039adf: 
.address 0x40A040
00039aef: mem := mem with [RBX + 0xAC, el]:u32 <- low:32[RAX]
0004493e: goto %000389ff

.address 0x40A046
000389ff: 
.address 0x40A046
00038a09: RDI := R15
.address 0x40A049
00038a12: RSP := RSP - 8
.address 0x40A049
00038a15: mem := mem with [RSP, el]:u64 <- 0x40A04E
.address 0x40A049
00038a18: call @sub_403e70 with return %00038a1a

.address 0x40A04E
00038a1a: 
.address 0x40A04E
00038a1f: RAX := pad:64[mem[RBX + 0x30, el]:u32]
.address 0x40A051
00038a2c: RAX := pad:64[low:32[RAX] & 0xF000]
.address 0x40A051
00038a2f: OF := 0
.address 0x40A051
00038a32: CF := 0
.address 0x40A051
00038a35: AF := unknown[bits]:u1
.address 0x40A051
00038a38: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A051
00038a3b: SF := high:1[low:32[RAX]]
.address 0x40A051
00038a3e: ZF := 0 = low:32[RAX]
.address 0x40A056
00038a4b: #7826 := low:32[RAX] - 0xA000
.address 0x40A056
00038a4e: CF := low:32[RAX] < 0xA000
.address 0x40A056
00038a51: OF := high:1[(low:32[RAX] ^ 0xA000) & (low:32[RAX] ^ #7826)]
.address 0x40A056
00038a54: AF := 0x10 = (0x10 & (#7826 ^ low:32[RAX] ^ 0xA000))
.address 0x40A056
00038a57: PF := ~low:1[let $1 = #7826 >> 4 ^ #7826 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A056
00038a5a: SF := high:1[#7826]
.address 0x40A056
00038a5d: ZF := 0 = #7826
.address 0x40A05B
00038a67: when ZF goto %00038a61
0004493f: goto %00038a93

.address 0x40A485
00038a61: 
.address 0x40A485
00038a71: mem := mem with [RBX + 0xA8, el]:u32 <- 6
.address 0x40A48F
00038a78: goto %00033e54

.address 0x40A061
00038a93: 
.address 0x40A061
00038a98: goto %00033de8

.address 0x409BB2
00033de8: 
.address 0x409BB2
00033dfe: #7198 := low:32[RAX] - 0x4000
.address 0x409BB2
00033e01: CF := low:32[RAX] < 0x4000
.address 0x409BB2
00033e04: OF := high:1[(low:32[RAX] ^ 0x4000) & (low:32[RAX] ^ #7198)]
.address 0x409BB2
00033e07: AF := 0x10 = (0x10 & (#7198 ^ low:32[RAX] ^ 0x4000))
.address 0x409BB2
00033e0a: PF := ~low:1[let $1 = #7198 >> 4 ^ #7198 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409BB2
00033e0d: SF := high:1[#7198]
.address 0x409BB2
00033e10: ZF := 0 = #7198
.address 0x409BB7
00033e1a: when ZF goto %00033e14
00044940: goto %0003a237

.address 0x40A520
00033e14: 
.address 0x40A520
00033e2a: #7200 := low:8[R13]
.address 0x40A520
00033e2d: OF := 0
.address 0x40A520
00033e30: CF := 0
.address 0x40A520
00033e33: AF := unknown[bits]:u1
.address 0x40A520
00033e36: PF := ~low:1[let $1 = #7200 >> 4 ^ #7200 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A520
00033e39: SF := high:1[#7200]
.address 0x40A520
00033e3c: ZF := 0 = #7200
.address 0x40A523
00033e46: when ZF goto %00033e40
00044941: goto %0003a1fa

.address 0x40A525
0003a1fa: 
.address 0x40A525
0003a205: #8028 := mem[0x6212F5]
.address 0x40A525
0003a208: CF := mem[0x6212F5] < 0
.address 0x40A525
0003a20b: OF := high:1[mem[0x6212F5] & (mem[0x6212F5] ^ #8028)]
.address 0x40A525
0003a20e: AF := 0x10 = (0x10 & (#8028 ^ mem[0x6212F5]))
.address 0x40A525
0003a211: PF := ~low:1[let $1 = #8028 >> 4 ^ #8028 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A525
0003a214: SF := high:1[#8028]
.address 0x40A525
0003a217: ZF := 0 = #8028
.address 0x40A52C
0003a220: when ~ZF goto %00033e40
00044942: goto %0003a226

.address 0x40A540
00033e40: 
.address 0x40A540
00033e50: mem := mem with [RBX + 0xA8, el]:u32 <- 3
.address 0x40A54A
00033e58: goto %00033e54

.address 0x40A52E
0003a226: 
.address 0x40A52E
0003a22b: mem := mem with [RBX + 0xA8, el]:u32 <- 9
.address 0x40A538
0003a232: goto %00033e54

.address 0x409BBD
0003a237: 
.address 0x409BBD
0003a23c: mem := mem with [RBX + 0xA8, el]:u32 <- 5
00044943: goto %00033e54

.address 0x409BC7
00033e54: 
.address 0x409BC7
00033e5e: RDI := pad:64[mem[0x621338, el]:u32]
.address 0x409BCD
00033e65: R12 := mem[RBX + 0x58, el]:u64
.address 0x409BD1
00033e72: #7202 := low:32[RDI]
.address 0x409BD1
00033e75: OF := 0
.address 0x409BD1
00033e78: CF := 0
.address 0x409BD1
00033e7b: AF := unknown[bits]:u1
.address 0x409BD1
00033e7e: PF := ~low:1[let $1 = #7202 >> 4 ^ #7202 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409BD1
00033e81: SF := high:1[#7202]
.address 0x409BD1
00033e84: ZF := 0 = #7202
.address 0x409BD3
00033e8e: when ZF goto %00033e88
00044944: goto %0003a1cb

.address 0x409BD5
0003a1cb: 
.address 0x409BD5
0003a1d6: #8026 := mem[0x62132C]
.address 0x409BD5
0003a1d9: CF := mem[0x62132C] < 0
.address 0x409BD5
0003a1dc: OF := high:1[mem[0x62132C] & (mem[0x62132C] ^ #8026)]
.address 0x409BD5
0003a1df: AF := 0x10 = (0x10 & (#8026 ^ mem[0x62132C]))
.address 0x409BD5
0003a1e2: PF := ~low:1[let $1 = #8026 >> 4 ^ #8026 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409BD5
0003a1e5: SF := high:1[#8026]
.address 0x409BD5
0003a1e8: ZF := 0 = #8026
.address 0x409BDC
0003a1f1: when ZF goto %00039882
00044945: goto %00033e88

.address 0x409BDE
00033e88: 
.address 0x409BDE
00033e98: R8 := mem[0x621320, el]:u64
.address 0x409BE5
00033e9f: RDX := pad:64[mem[0x621328, el]:u32]
.address 0x409BEB
00033ea6: R13 := low:64[RBP - 0x2D0]
.address 0x409BF2
00033ead: RCX := 0x200
.address 0x409BF7
00033eb4: RDI := R12
.address 0x409BFA
00033ebb: RSI := R13
.address 0x409BFD
00033ec4: RSP := RSP - 8
.address 0x409BFD
00033ec7: mem := mem with [RSP, el]:u64 <- 0x409C02
.address 0x409BFD
00033eca: call @sub_40ed10 with return %00033ecc

.address 0x409C02
00033ecc: 
.address 0x409C02
00033ed7: RSI := 0
.address 0x409C02
00033eda: AF := unknown[bits]:u1
.address 0x409C02
00033edd: ZF := 1
.address 0x409C02
00033ee0: PF := 1
.address 0x409C02
00033ee3: OF := 0
.address 0x409C02
00033ee6: CF := 0
.address 0x409C02
00033ee9: SF := 0
.address 0x409C04
00033ef0: RDI := RAX
.address 0x409C07
00033ef9: RSP := RSP - 8
.address 0x409C07
00033efc: mem := mem with [RSP, el]:u64 <- 0x409C0C
.address 0x409C07
00033eff: call @sub_410370 with return %00033f01

.address 0x409C0C
00033f01: 
.address 0x409C0C
00033f0c: #7204 := low:32[RAX] - mem[0x62135C, el]:u32
.address 0x409C0C
00033f0f: CF := low:32[RAX] < mem[0x62135C, el]:u32
.address 0x409C0C
00033f12: OF := high:1[(low:32[RAX] ^ mem[0x62135C, el]:u32) & (low:32[RAX] ^ #7204)]
.address 0x409C0C
00033f15: AF := 0x10 = (0x10 & (#7204 ^ low:32[RAX] ^ mem[0x62135C, el]:u32))
.address 0x409C0C
00033f18: PF := ~low:1[let $1 = #7204 >> 4 ^ #7204 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409C0C
00033f1b: SF := high:1[#7204]
.address 0x409C0C
00033f1e: ZF := 0 = #7204
.address 0x409C12
00033f28: when ZF | (SF | OF) & ~(SF & OF) goto %00033f22
00044946: goto %0003a1c4

.address 0x409C14
0003a1c4: 
.address 0x409C14
0003a1c9: mem := mem with [0x62135C, el]:u32 <- low:32[RAX]
00044947: goto %00033f22

.address 0x409C1A
00033f22: 
.address 0x409C1A
00033f32: RSI := pad:64[mem[0x621338, el]:u32]
.address 0x409C20
00033f3f: #7206 := low:32[RSI]
.address 0x409C20
00033f42: OF := 0
.address 0x409C20
00033f45: CF := 0
.address 0x409C20
00033f48: AF := unknown[bits]:u1
.address 0x409C20
00033f4b: PF := ~low:1[let $1 = #7206 >> 4 ^ #7206 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409C20
00033f4e: SF := high:1[#7206]
.address 0x409C20
00033f51: ZF := 0 = #7206
.address 0x409C22
00033f5b: when ~ZF goto %00033f55
00044948: goto %0003a198

.address 0x40A660
00033f55: 
.address 0x40A660
00033f6b: #7208 := mem[0x621365]
.address 0x40A660
00033f6e: CF := mem[0x621365] < 0
.address 0x40A660
00033f71: OF := high:1[mem[0x621365] & (mem[0x621365] ^ #7208)]
.address 0x40A660
00033f74: AF := 0x10 = (0x10 & (#7208 ^ mem[0x621365]))
.address 0x40A660
00033f77: PF := ~low:1[let $1 = #7208 >> 4 ^ #7208 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A660
00033f7a: SF := high:1[#7208]
.address 0x40A660
00033f7d: ZF := 0 = #7208
.address 0x40A667
00033f87: when ~ZF goto %00033f81
00044949: goto %0003a17d

.address 0x40A66D
0003a17d: 
.address 0x40A66D
0003a182: goto %00034148

.address 0x409C28
0003a198: 
.address 0x409C28
0003a1a3: #8024 := mem[0x620021]
.address 0x409C28
0003a1a6: CF := mem[0x620021] < 0
.address 0x409C28
0003a1a9: OF := high:1[mem[0x620021] & (mem[0x620021] ^ #8024)]
.address 0x409C28
0003a1ac: AF := 0x10 = (0x10 & (#8024 ^ mem[0x620021]))
.address 0x409C28
0003a1af: PF := ~low:1[let $1 = #8024 >> 4 ^ #8024 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409C28
0003a1b2: SF := high:1[#8024]
.address 0x409C28
0003a1b5: ZF := 0 = #8024
.address 0x409C2F
0003a1be: when ~ZF goto %0003990e
0004494a: goto %00039945

.address 0x40A638
0003990e: 
.address 0x40A638
00039913: RDI := pad:64[mem[RBX + 0x34, el]:u32]
.address 0x40A63B
0003991c: RSP := RSP - 8
.address 0x40A63B
0003991f: mem := mem with [RSP, el]:u64 <- 0x40A640
.address 0x40A63B
00039922: call @sub_409910 with return %00039924

.address 0x40A640
00039924: 
.address 0x40A640
0003992f: #7956 := low:32[RAX] - mem[0x621350, el]:u32
.address 0x40A640
00039932: CF := low:32[RAX] < mem[0x621350, el]:u32
.address 0x40A640
00039935: OF := high:1[(low:32[RAX] ^ mem[0x621350, el]:u32) & (low:32[RAX] ^ #7956)]
.address 0x40A640
00039938: AF := 0x10 = (0x10 & (#7956 ^ low:32[RAX] ^ mem[0x621350, el]:u32))
.address 0x40A640
0003993b: PF := ~low:1[let $1 = #7956 >> 4 ^ #7956 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A640
0003993e: SF := high:1[#7956]
.address 0x40A640
00039941: ZF := 0 = #7956
.address 0x40A646
0003994b: when ZF | (SF | OF) & ~(SF & OF) goto %00039945
0004494b: goto %0003997c

.address 0x40A64C
0003997c: 
.address 0x40A64C
00039981: mem := mem with [0x621350, el]:u32 <- low:32[RAX]
.address 0x40A652
00039988: goto %00039945

.address 0x409C35
00039945: 
.address 0x409C35
0003995b: #7958 := mem[0x620020]
.address 0x409C35
0003995e: CF := mem[0x620020] < 0
.address 0x409C35
00039961: OF := high:1[mem[0x620020] & (mem[0x620020] ^ #7958)]
.address 0x409C35
00039964: AF := 0x10 = (0x10 & (#7958 ^ mem[0x620020]))
.address 0x409C35
00039967: PF := ~low:1[let $1 = #7958 >> 4 ^ #7958 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409C35
0003996a: SF := high:1[#7958]
.address 0x409C35
0003996d: ZF := 0 = #7958
.address 0x409C3C
00039976: when ~ZF goto %000398ca
0004494c: goto %00039814

.address 0x40A5B0
000398ca: 
.address 0x40A5B0
000398d5: #7954 := mem[0x62132D]
.address 0x40A5B0
000398d8: CF := mem[0x62132D] < 0
.address 0x40A5B0
000398db: OF := high:1[mem[0x62132D] & (mem[0x62132D] ^ #7954)]
.address 0x40A5B0
000398de: AF := 0x10 = (0x10 & (#7954 ^ mem[0x62132D]))
.address 0x40A5B0
000398e1: PF := ~low:1[let $1 = #7954 >> 4 ^ #7954 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A5B0
000398e4: SF := high:1[#7954]
.address 0x40A5B0
000398e7: ZF := 0 = #7954
.address 0x40A5B7
000398ee: R14 := pad:64[mem[RBX + 0x38, el]:u32]
.address 0x40A5BB
000398f7: when ZF goto %000395f9
0004494d: goto %00039637

.address 0x40A7A0
000395f9: 
.address 0x40A7A0
000395fe: RDI := pad:64[low:32[R14]]
.address 0x40A7A3
00039607: RSP := RSP - 8
.address 0x40A7A3
0003960a: mem := mem with [RSP, el]:u64 <- 0x40A7A8
.address 0x40A7A3
0003960d: call @sub_40fab0 with return %0003960f

.address 0x40A7A8
0003960f: 
.address 0x40A7A8
0003961a: #7926 := RAX
.address 0x40A7A8
0003961d: OF := 0
.address 0x40A7A8
00039620: CF := 0
.address 0x40A7A8
00039623: AF := unknown[bits]:u1
.address 0x40A7A8
00039626: PF := ~low:1[let $1 = #7926 >> 4 ^ #7926 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A7A8
00039629: SF := high:1[#7926]
.address 0x40A7A8
0003962c: ZF := 0 = #7926
.address 0x40A7AB
00039633: RDI := RAX
.address 0x40A7AE
0003963d: when ZF goto %00039637
0004494e: goto %0003998d

.address 0x40A7B4
0003998d: 
.address 0x40A7B4
00039998: RSI := 0
.address 0x40A7B4
0003999b: AF := unknown[bits]:u1
.address 0x40A7B4
0003999e: ZF := 1
.address 0x40A7B4
000399a1: PF := 1
.address 0x40A7B4
000399a4: OF := 0
.address 0x40A7B4
000399a7: CF := 0
.address 0x40A7B4
000399aa: SF := 0
.address 0x40A7B6
000399b3: RSP := RSP - 8
.address 0x40A7B6
000399b6: mem := mem with [RSP, el]:u64 <- 0x40A7BB
.address 0x40A7B6
000399b9: call @sub_410370 with return %000399bb

.address 0x40A7BB
000399bb: 
.address 0x40A7BB
000399c0: RDX := 0
.address 0x40A7C0
000399cd: #7960 := low:32[RAX]
.address 0x40A7C0
000399d0: OF := 0
.address 0x40A7C0
000399d3: CF := 0
.address 0x40A7C0
000399d6: AF := unknown[bits]:u1
.address 0x40A7C0
000399d9: PF := ~low:1[let $1 = #7960 >> 4 ^ #7960 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A7C0
000399dc: SF := high:1[#7960]
.address 0x40A7C0
000399df: ZF := 0 = #7960
.address 0x40A7C2
000399e6: RAX := pad:64[if SF then low:32[RDX] else low:32[RAX]]
.address 0x40A7C5
000399ed: goto %000397f3

.address 0x40A5C1
00039637: 
.address 0x40A5C1
00039647: RCX := 0x417C24
.address 0x40A5C8
0003964e: R8 := pad:64[low:32[R14]]
.address 0x40A5CB
00039655: RDX := 0x15
.address 0x40A5D0
0003965c: RSI := 1
.address 0x40A5D5
00039663: RDI := R13
.address 0x40A5D8
00039670: RAX := 0
.address 0x40A5D8
00039673: AF := unknown[bits]:u1
.address 0x40A5D8
00039676: ZF := 1
.address 0x40A5D8
00039679: PF := 1
.address 0x40A5D8
0003967c: OF := 0
.address 0x40A5D8
0003967f: CF := 0
.address 0x40A5D8
00039682: SF := 0
.address 0x40A5DA
0003968b: RSP := RSP - 8
.address 0x40A5DA
0003968e: mem := mem with [RSP, el]:u64 <- 0x40A5DF
.address 0x40A5DA
00039691: call @sub_403e60 with return %00039693

.address 0x40A5DF
00039693: 
.address 0x40A5DF
00039698: RAX := R13
0004494f: goto %0003969a

.address 0x40A5E2
0003969a: 
.address 0x40A5E2
0003969f: RCX := pad:64[mem[RAX, el]:u32]
.address 0x40A5E4
000396ad: #7928 := RAX
.address 0x40A5E4
000396b0: RAX := RAX + 4
.address 0x40A5E4
000396b3: CF := RAX < #7928
.address 0x40A5E4
000396b6: OF := ~high:1[#7928] & (high:1[#7928] | high:1[RAX]) & ~(high:1[#7928] & high:1[RAX])
.address 0x40A5E4
000396b9: AF := 0x10 = (0x10 & (RAX ^ #7928 ^ 4))
.address 0x40A5E4
000396bc: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40A5E4
000396bf: SF := high:1[RAX]
.address 0x40A5E4
000396c2: ZF := 0 = RAX
.address 0x40A5E8
000396c9: RDX := pad:64[low:32[RCX - 0x1010101]]
.address 0x40A5EE
000396d0: RCX := pad:64[~low:32[RCX]]
.address 0x40A5F0
000396dd: RDX := pad:64[low:32[RDX] & low:32[RCX]]
.address 0x40A5F0
000396e0: OF := 0
.address 0x40A5F0
000396e3: CF := 0
.address 0x40A5F0
000396e6: AF := unknown[bits]:u1
.address 0x40A5F0
000396e9: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A5F0
000396ec: SF := high:1[low:32[RDX]]
.address 0x40A5F0
000396ef: ZF := 0 = low:32[RDX]
.address 0x40A5F2
000396fc: RDX := pad:64[low:32[RDX] & 0x80808080]
.address 0x40A5F2
000396ff: OF := 0
.address 0x40A5F2
00039702: CF := 0
.address 0x40A5F2
00039705: AF := unknown[bits]:u1
.address 0x40A5F2
00039708: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A5F2
0003970b: SF := high:1[low:32[RDX]]
.address 0x40A5F2
0003970e: ZF := 0 = low:32[RDX]
.address 0x40A5F8
00039717: when ZF goto %0003969a
00044950: goto %0003971d

.address 0x40A5FA
0003971d: 
.address 0x40A5FA
00039722: RCX := pad:64[low:32[RDX]]
.address 0x40A5FC
00039730: #7933 := low:32[RCX]
.address 0x40A5FC
00039733: RCX := pad:64[low:32[RCX] >> 0x10]
.address 0x40A5FC
00039736: CF := high:1[#7933 << 0x10]
.address 0x40A5FC
00039739: SF := high:1[low:32[RCX]]
.address 0x40A5FC
0003973c: ZF := 0 = low:32[RCX]
.address 0x40A5FC
0003973f: PF := ~low:1[let $1 = low:32[RCX] >> 4 ^ low:32[RCX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A5FC
00039742: AF := unknown[bits]:u1
.address 0x40A5FC
00039745: OF := unknown[bits]:u1
.address 0x40A5FF
00039752: #7935 := low:32[RDX] & 0x8080
.address 0x40A5FF
00039755: OF := 0
.address 0x40A5FF
00039758: CF := 0
.address 0x40A5FF
0003975b: AF := unknown[bits]:u1
.address 0x40A5FF
0003975e: PF := ~low:1[let $1 = #7935 >> 4 ^ #7935 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A5FF
00039761: SF := high:1[#7935]
.address 0x40A5FF
00039764: ZF := 0 = #7935
.address 0x40A605
0003976b: RDX := pad:64[if ZF then low:32[RCX] else low:32[RDX]]
.address 0x40A608
00039772: RCX := low:64[RAX + 2]
.address 0x40A60C
00039779: RSI := pad:64[low:32[RDX]]
.address 0x40A60E
00039780: RAX := if ZF then RCX else RAX
.address 0x40A612
0003978f: #7937 := low:8[RSI]
.address 0x40A612
00039792: #7938 := low:8[RDX]
.address 0x40A612
00039795: RSI := extract:63:8[RSI].low:8[RSI] + #7938
.address 0x40A612
00039798: CF := low:8[RSI] < #7937
.address 0x40A612
0003979b: OF := high:1[#7937] = high:1[#7938] & (high:1[#7937] | high:1[low:8[RSI]]) & ~(
high:1[#7937] & high:1[low:8[RSI]])
.address 0x40A612
0003979e: AF := 0x10 = (0x10 & (low:8[RSI] ^ #7937 ^ #7938))
.address 0x40A612
000397a1: PF := ~low:1[let $1 = low:8[RSI] >> 4 ^ low:8[RSI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A612
000397a4: SF := high:1[low:8[RSI]]
.address 0x40A612
000397a7: ZF := 0 = low:8[RSI]
.address 0x40A615
000397b5: #7941 := RAX
.address 0x40A615
000397b8: RAX := #7941 - 3 + pad:64[CF]
.address 0x40A615
000397bb: OF := high:1[(3 ^ #7941) & (#7941 ^ RAX)]
.address 0x40A615
000397be: CF := #7941 < 3 + pad:64[CF] | 3 + pad:64[CF] < 3
.address 0x40A615
000397c1: AF := 0x10 = (0x10 & (RAX ^ 3 ^ #7941))
.address 0x40A615
000397c4: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40A615
000397c7: SF := high:1[RAX]
.address 0x40A615
000397ca: ZF := 0 = RAX
.address 0x40A619
000397d9: #7943 := low:32[RAX]
.address 0x40A619
000397dc: #7944 := low:32[R13]
.address 0x40A619
000397df: RAX := pad:64[low:32[RAX] - low:32[R13]]
.address 0x40A619
000397e2: CF := #7943 < #7944
.address 0x40A619
000397e5: OF := high:1[(#7943 ^ #7944) & (#7943 ^ low:32[RAX])]
.address 0x40A619
000397e8: AF := 0x10 = (0x10 & (low:32[RAX] ^ #7943 ^ #7944))
.address 0x40A619
000397eb: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A619
000397ee: SF := high:1[low:32[RAX]]
.address 0x40A619
000397f1: ZF := 0 = low:32[RAX]
00044951: goto %000397f3

.address 0x40A61C
000397f3: 
.address 0x40A61C
000397fe: #7946 := mem[0x62134C, el]:u32 - low:32[RAX]
.address 0x40A61C
00039801: CF := mem[0x62134C, el]:u32 < low:32[RAX]
.address 0x40A61C
00039804: OF := high:1[(mem[0x62134C, el]:u32 ^ low:32[RAX]) & (mem[0x62134C, el]:u32 ^ #7946)]
.address 0x40A61C
00039807: AF := 0x10 = (0x10 & (#7946 ^ mem[0x62134C, el]:u32 ^ low:32[RAX]))
.address 0x40A61C
0003980a: PF := ~low:1[let $1 = #7946 >> 4 ^ #7946 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A61C
0003980d: SF := high:1[#7946]
.address 0x40A61C
00039810: ZF := 0 = #7946
.address 0x40A622
0003981a: when ~((SF | OF) & ~(SF & OF)) goto %00039814
00044952: goto %000398fd

.address 0x40A628
000398fd: 
.address 0x40A628
00039902: mem := mem with [0x62134C, el]:u32 <- low:32[RAX]
.address 0x40A62E
00039909: goto %00039814

.address 0x409C42
00039814: 
.address 0x409C42
0003982a: #7948 := mem[0x62132E]
.address 0x409C42
0003982d: CF := mem[0x62132E] < 0
.address 0x409C42
00039830: OF := high:1[mem[0x62132E] & (mem[0x62132E] ^ #7948)]
.address 0x409C42
00039833: AF := 0x10 = (0x10 & (#7948 ^ mem[0x62132E]))
.address 0x409C42
00039836: PF := ~low:1[let $1 = #7948 >> 4 ^ #7948 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409C42
00039839: SF := high:1[#7948]
.address 0x409C42
0003983c: ZF := 0 = #7948
.address 0x409C49
00039846: when ~ZF goto %00039840
00044953: goto %00039882

.address 0x40A590
00039840: 
.address 0x40A590
00039850: RDI := pad:64[mem[RBX + 0x34, el]:u32]
.address 0x40A593
00039859: RSP := RSP - 8
.address 0x40A593
0003985c: mem := mem with [RSP, el]:u64 <- 0x40A598
.address 0x40A593
0003985f: call @sub_409910 with return %00039861

.address 0x40A598
00039861: 
.address 0x40A598
0003986c: #7950 := low:32[RAX] - mem[0x621348, el]:u32
.address 0x40A598
0003986f: CF := low:32[RAX] < mem[0x621348, el]:u32
.address 0x40A598
00039872: OF := high:1[(low:32[RAX] ^ mem[0x621348, el]:u32) & (low:32[RAX] ^ #7950)]
.address 0x40A598
00039875: AF := 0x10 = (0x10 & (#7950 ^ low:32[RAX] ^ mem[0x621348, el]:u32))
.address 0x40A598
00039878: PF := ~low:1[let $1 = #7950 >> 4 ^ #7950 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A598
0003987b: SF := high:1[#7950]
.address 0x40A598
0003987e: ZF := 0 = #7950
.address 0x40A59E
00039888: when ZF | (SF | OF) & ~(SF & OF) goto %00039882
00044954: goto %000398b9

.address 0x40A5A4
000398b9: 
.address 0x40A5A4
000398be: mem := mem with [0x621348, el]:u32 <- low:32[RAX]
.address 0x40A5AA
000398c5: goto %00039882

.address 0x409C4F
00039882: 
.address 0x409C4F
00039898: #7952 := mem[0x621365]
.address 0x409C4F
0003989b: CF := mem[0x621365] < 0
.address 0x409C4F
0003989e: OF := high:1[mem[0x621365] & (mem[0x621365] ^ #7952)]
.address 0x409C4F
000398a1: AF := 0x10 = (0x10 & (#7952 ^ mem[0x621365]))
.address 0x409C4F
000398a4: PF := ~low:1[let $1 = #7952 >> 4 ^ #7952 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409C4F
000398a7: SF := high:1[#7952]
.address 0x409C4F
000398aa: ZF := 0 = #7952
.address 0x409C56
000398b3: when ZF goto %00033fd7
00044955: goto %00033f81

.address 0x409C58
00033f81: 
.address 0x409C58
00033f91: RDI := mem[RBX + 0xB0, el]:u64
.address 0x409C5F
00033f9a: RSP := RSP - 8
.address 0x409C5F
00033f9d: mem := mem with [RSP, el]:u64 <- 0x409C64
.address 0x409C5F
00033fa0: call @sub_403950 with return %00033fa2

.address 0x409C64
00033fa2: 
.address 0x409C64
00033fad: #7210 := low:32[RAX] - mem[0x621354, el]:u32
.address 0x409C64
00033fb0: CF := low:32[RAX] < mem[0x621354, el]:u32
.address 0x409C64
00033fb3: OF := high:1[(low:32[RAX] ^ mem[0x621354, el]:u32) & (low:32[RAX] ^ #7210)]
.address 0x409C64
00033fb6: AF := 0x10 = (0x10 & (#7210 ^ low:32[RAX] ^ mem[0x621354, el]:u32))
.address 0x409C64
00033fb9: PF := ~low:1[let $1 = #7210 >> 4 ^ #7210 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409C64
00033fbc: SF := high:1[#7210]
.address 0x409C64
00033fbf: ZF := 0 = #7210
.address 0x409C6A
00033fc9: when ~(ZF | (SF | OF) & ~(SF & OF)) goto %00033fc3
00044956: goto %00033fd7

.address 0x40A420
00033fc3: 
.address 0x40A420
00033fd3: mem := mem with [0x621354, el]:u32 <- low:32[RAX]
.address 0x40A426
00033fdb: goto %00033fd7

.address 0x409C70
00033fd7: 
.address 0x409C70
00033fe1: RCX := pad:64[mem[0x621338, el]:u32]
.address 0x409C76
00033fee: #7212 := low:32[RCX]
.address 0x409C76
00033ff1: OF := 0
.address 0x409C76
00033ff4: CF := 0
.address 0x409C76
00033ff7: AF := unknown[bits]:u1
.address 0x409C76
00033ffa: PF := ~low:1[let $1 = #7212 >> 4 ^ #7212 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409C76
00033ffd: SF := high:1[#7212]
.address 0x409C76
00034000: ZF := 0 = #7212
.address 0x409C78
0003400a: when ZF goto %00034004
00044957: goto %00034148

.address 0x40A1C0
00034004: 
.address 0x40A1C0
00034014: RDI := mem[RBX + 0x28, el]:u64
.address 0x40A1C4
0003401b: RSI := low:64[RBP - 0x2F0]
.address 0x40A1CB
00034024: RSP := RSP - 8
.address 0x40A1CB
00034027: mem := mem with [RSP, el]:u64 <- 0x40A1D0
.address 0x40A1CB
0003402a: call @sub_40fcf0 with return %0003402c

.address 0x40A1D0
0003402c: 
.address 0x40A1D0
00034031: RDI := RAX
.address 0x40A1D3
0003403a: RSP := RSP - 8
.address 0x40A1D3
0003403d: mem := mem with [RSP, el]:u64 <- 0x40A1D8
.address 0x40A1D3
00034040: call @sub_403950 with return %00034042

.address 0x40A1D8
00034042: 
.address 0x40A1D8
0003404d: #7214 := low:32[RAX] - mem[0x621358, el]:u32
.address 0x40A1D8
00034050: CF := low:32[RAX] < mem[0x621358, el]:u32
.address 0x40A1D8
00034053: OF := high:1[(low:32[RAX] ^ mem[0x621358, el]:u32) & (low:32[RAX] ^ #7214)]
.address 0x40A1D8
00034056: AF := 0x10 = (0x10 & (#7214 ^ low:32[RAX] ^ mem[0x621358, el]:u32))
.address 0x40A1D8
00034059: PF := ~low:1[let $1 = #7214 >> 4 ^ #7214 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A1D8
0003405c: SF := high:1[#7214]
.address 0x40A1D8
0003405f: ZF := 0 = #7214
.address 0x40A1DE
00034069: when ZF | (SF | OF) & ~(SF & OF) goto %00034063
00044958: goto %0003a173

.address 0x40A1E0
0003a173: 
.address 0x40A1E0
0003a178: mem := mem with [0x621358, el]:u32 <- low:32[RAX]
00044959: goto %00034063

.address 0x40A1E6
00034063: 
.address 0x40A1E6
00034073: RAX := pad:64[mem[RBX + 0x30, el]:u32]
.address 0x40A1E9
00034080: RAX := pad:64[low:32[RAX] & 0xB000]
.address 0x40A1E9
00034083: OF := 0
.address 0x40A1E9
00034086: CF := 0
.address 0x40A1E9
00034089: AF := unknown[bits]:u1
.address 0x40A1E9
0003408c: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A1E9
0003408f: SF := high:1[low:32[RAX]]
.address 0x40A1E9
00034092: ZF := 0 = low:32[RAX]
.address 0x40A1EE
0003409f: #7217 := low:32[RAX] - 0x2000
.address 0x40A1EE
000340a2: CF := low:32[RAX] < 0x2000
.address 0x40A1EE
000340a5: OF := high:1[(low:32[RAX] ^ 0x2000) & (low:32[RAX] ^ #7217)]
.address 0x40A1EE
000340a8: AF := 0x10 = (0x10 & (#7217 ^ low:32[RAX] ^ 0x2000))
.address 0x40A1EE
000340ab: PF := ~low:1[let $1 = #7217 >> 4 ^ #7217 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A1EE
000340ae: SF := high:1[#7217]
.address 0x40A1EE
000340b1: ZF := 0 = #7217
.address 0x40A1F3
000340bb: when ~ZF goto %000340b5
0004495a: goto %00039cff

.address 0x40A430
000340b5: 
.address 0x40A430
000340c5: RDI := mem[RBX + 0x48, el]:u64
.address 0x40A434
000340cc: R8 := mem[0x620018, el]:u64
.address 0x40A43B
000340d3: RSI := low:64[RBP - 0x2D0]
.address 0x40A442
000340da: RDX := pad:64[mem[0x62131C, el]:u32]
.address 0x40A448
000340e1: RCX := 1
.address 0x40A44D
000340ea: RSP := RSP - 8
.address 0x40A44D
000340ed: mem := mem with [RSP, el]:u64 <- 0x40A452
.address 0x40A44D
000340f0: call @sub_40ed10 with return %000340f2

.address 0x40A452
000340f2: 
.address 0x40A452
000340fd: RSI := 0
.address 0x40A452
00034100: AF := unknown[bits]:u1
.address 0x40A452
00034103: ZF := 1
.address 0x40A452
00034106: PF := 1
.address 0x40A452
00034109: OF := 0
.address 0x40A452
0003410c: CF := 0
.address 0x40A452
0003410f: SF := 0
.address 0x40A454
00034116: RDI := RAX
.address 0x40A457
0003411f: RSP := RSP - 8
.address 0x40A457
00034122: mem := mem with [RSP, el]:u64 <- 0x40A45C
.address 0x40A457
00034125: call @sub_410370 with return %00034127

.address 0x40A45C
00034127: 
.address 0x40A45C
00034132: #7219 := low:32[RAX] - mem[0x62133C, el]:u32
.address 0x40A45C
00034135: CF := low:32[RAX] < mem[0x62133C, el]:u32
.address 0x40A45C
00034138: OF := high:1[(low:32[RAX] ^ mem[0x62133C, el]:u32) & (low:32[RAX] ^ #7219)]
.address 0x40A45C
0003413b: AF := 0x10 = (0x10 & (#7219 ^ low:32[RAX] ^ mem[0x62133C, el]:u32))
.address 0x40A45C
0003413e: PF := ~low:1[let $1 = #7219 >> 4 ^ #7219 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A45C
00034141: SF := high:1[#7219]
.address 0x40A45C
00034144: ZF := 0 = #7219
.address 0x40A462
0003414e: when ZF | (SF | OF) & ~(SF & OF) goto %00034148
0004495b: goto %0003883b

.address 0x40A1F9
00039cff: 
.address 0x40A1F9
00039d04: RAX := mem[RBX + 0x40, el]:u64
.address 0x40A1FD
00039d0b: R13 := low:64[RBP - 0x2D0]
.address 0x40A204
00039d12: RSI := R13
.address 0x40A207
00039d19: RDI := RAX
.address 0x40A20A
00039d27: #7986 := RAX
.address 0x40A20A
00039d2a: RAX := RAX >> 0x20
.address 0x40A20A
00039d2d: CF := high:1[#7986 << 0x20]
.address 0x40A20A
00039d30: SF := high:1[RAX]
.address 0x40A20A
00039d33: ZF := 0 = RAX
.address 0x40A20A
00039d36: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40A20A
00039d39: AF := unknown[bits]:u1
.address 0x40A20A
00039d3c: OF := unknown[bits]:u1
.address 0x40A20E
00039d4a: #7988 := RDI
.address 0x40A20E
00039d4d: RDI := RDI >> 8
.address 0x40A20E
00039d50: CF := high:1[#7988 << 0x38]
.address 0x40A20E
00039d53: SF := high:1[RDI]
.address 0x40A20E
00039d56: ZF := 0 = RDI
.address 0x40A20E
00039d59: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40A20E
00039d5c: AF := unknown[bits]:u1
.address 0x40A20E
00039d5f: OF := unknown[bits]:u1
.address 0x40A212
00039d66: RDX := pad:64[low:32[RDI]]
.address 0x40A214
00039d6d: RDI := RAX
.address 0x40A217
00039d7a: RDX := pad:64[low:32[RDX] & 0xFFF]
.address 0x40A217
00039d7d: OF := 0
.address 0x40A217
00039d80: CF := 0
.address 0x40A217
00039d83: AF := unknown[bits]:u1
.address 0x40A217
00039d86: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A217
00039d89: SF := high:1[low:32[RDX]]
.address 0x40A217
00039d8c: ZF := 0 = low:32[RDX]
.address 0x40A21D
00039d99: RDI := pad:64[low:32[RDI] & 0xFFFFF000]
.address 0x40A21D
00039d9c: OF := 0
.address 0x40A21D
00039d9f: CF := 0
.address 0x40A21D
00039da2: AF := unknown[bits]:u1
.address 0x40A21D
00039da5: PF := ~low:1[let $1 = low:32[RDI] >> 4 ^ low:32[RDI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A21D
00039da8: SF := high:1[low:32[RDI]]
.address 0x40A21D
00039dab: ZF := 0 = low:32[RDI]
.address 0x40A223
00039db8: RDI := pad:64[low:32[RDI] | low:32[RDX]]
.address 0x40A223
00039dbb: OF := 0
.address 0x40A223
00039dbe: CF := 0
.address 0x40A223
00039dc1: AF := unknown[bits]:u1
.address 0x40A223
00039dc4: PF := ~low:1[let $1 = low:32[RDI] >> 4 ^ low:32[RDI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A223
00039dc7: SF := high:1[low:32[RDI]]
.address 0x40A223
00039dca: ZF := 0 = low:32[RDI]
.address 0x40A225
00039dd3: RSP := RSP - 8
.address 0x40A225
00039dd6: mem := mem with [RSP, el]:u64 <- 0x40A22A
.address 0x40A225
00039dd9: call @sub_40fcf0 with return %00039ddb

.address 0x40A22A
00039ddb: 
.address 0x40A22A
00039de0: RDI := RAX
.address 0x40A22D
00039de9: RSP := RSP - 8
.address 0x40A22D
00039dec: mem := mem with [RSP, el]:u64 <- 0x40A232
.address 0x40A22D
00039def: call @sub_403950 with return %00039df1

.address 0x40A232
00039df1: 
.address 0x40A232
00039dfc: #7993 := low:32[RAX] - mem[0x621344, el]:u32
.address 0x40A232
00039dff: CF := low:32[RAX] < mem[0x621344, el]:u32
.address 0x40A232
00039e02: OF := high:1[(low:32[RAX] ^ mem[0x621344, el]:u32) & (low:32[RAX] ^ #7993)]
.address 0x40A232
00039e05: AF := 0x10 = (0x10 & (#7993 ^ low:32[RAX] ^ mem[0x621344, el]:u32))
.address 0x40A232
00039e08: PF := ~low:1[let $1 = #7993 >> 4 ^ #7993 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A232
00039e0b: SF := high:1[#7993]
.address 0x40A232
00039e0e: ZF := 0 = #7993
.address 0x40A238
00039e18: when ZF | (SF | OF) & ~(SF & OF) goto %00039e12
0004495c: goto %0003a16c

.address 0x40A23A
0003a16c: 
.address 0x40A23A
0003a171: mem := mem with [0x621344, el]:u32 <- low:32[RAX]
0004495d: goto %00039e12

.address 0x40A240
00039e12: 
.address 0x40A240
00039e22: RAX := mem[RBX + 0x40, el]:u64
.address 0x40A244
00039e29: RSI := R13
.address 0x40A247
00039e30: RDX := pad:64[pad:32[low:8[RAX]]]
.address 0x40A24A
00039e3e: #7995 := RAX
.address 0x40A24A
00039e41: RAX := RAX >> 0xC
.address 0x40A24A
00039e44: CF := high:1[#7995 << 0x34]
.address 0x40A24A
00039e47: SF := high:1[RAX]
.address 0x40A24A
00039e4a: ZF := 0 = RAX
.address 0x40A24A
00039e4d: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40A24A
00039e50: AF := unknown[bits]:u1
.address 0x40A24A
00039e53: OF := unknown[bits]:u1
.address 0x40A24E
00039e5a: RDI := RAX
.address 0x40A251
00039e67: RDI := extract:63:8[RDI].0
.address 0x40A251
00039e6a: AF := unknown[bits]:u1
.address 0x40A251
00039e6d: ZF := 1
.address 0x40A251
00039e70: PF := 1
.address 0x40A251
00039e73: OF := 0
.address 0x40A251
00039e76: CF := 0
.address 0x40A251
00039e79: SF := 0
.address 0x40A254
00039e86: RDI := pad:64[low:32[RDI] | low:32[RDX]]
.address 0x40A254
00039e89: OF := 0
.address 0x40A254
00039e8c: CF := 0
.address 0x40A254
00039e8f: AF := unknown[bits]:u1
.address 0x40A254
00039e92: PF := ~low:1[let $1 = low:32[RDI] >> 4 ^ low:32[RDI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A254
00039e95: SF := high:1[low:32[RDI]]
.address 0x40A254
00039e98: ZF := 0 = low:32[RDI]
.address 0x40A256
00039ea1: RSP := RSP - 8
.address 0x40A256
00039ea4: mem := mem with [RSP, el]:u64 <- 0x40A25B
.address 0x40A256
00039ea7: call @sub_40fcf0 with return %00039ea9

.address 0x40A25B
00039ea9: 
.address 0x40A25B
00039eae: RDI := RAX
.address 0x40A25E
00039eb7: RSP := RSP - 8
.address 0x40A25E
00039eba: mem := mem with [RSP, el]:u64 <- 0x40A263
.address 0x40A25E
00039ebd: call @sub_403950 with return %00039ebf

.address 0x40A263
00039ebf: 
.address 0x40A263
00039ec4: RDX := pad:64[mem[0x621340, el]:u32]
.address 0x40A269
00039ed1: #7998 := low:32[RAX] - low:32[RDX]
.address 0x40A269
00039ed4: CF := low:32[RAX] < low:32[RDX]
.address 0x40A269
00039ed7: OF := high:1[(low:32[RAX] ^ low:32[RDX]) & (low:32[RAX] ^ #7998)]
.address 0x40A269
00039eda: AF := 0x10 = (0x10 & (#7998 ^ low:32[RAX] ^ low:32[RDX]))
.address 0x40A269
00039edd: PF := ~low:1[let $1 = #7998 >> 4 ^ #7998 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A269
00039ee0: SF := high:1[#7998]
.address 0x40A269
00039ee3: ZF := 0 = #7998
.address 0x40A26B
00039eed: when ZF | (SF | OF) & ~(SF & OF) goto %00039ee7
0004495e: goto %0003a15e

.address 0x40A26D
0003a15e: 
.address 0x40A26D
0003a163: mem := mem with [0x621340, el]:u32 <- low:32[RAX]
.address 0x40A273
0003a16a: RDX := pad:64[low:32[RAX]]
0004495f: goto %00039ee7

.address 0x40A275
00039ee7: 
.address 0x40A275
00039ef7: RAX := pad:64[mem[0x621344, el]:u32]
.address 0x40A27B
00039efe: RAX := pad:64[low:32[RDX + RAX + 2]]
.address 0x40A27F
00039f0b: #8000 := low:32[RAX] - mem[0x62133C, el]:u32
.address 0x40A27F
00039f0e: CF := low:32[RAX] < mem[0x62133C, el]:u32
.address 0x40A27F
00039f11: OF := high:1[(low:32[RAX] ^ mem[0x62133C, el]:u32) & (low:32[RAX] ^ #8000)]
.address 0x40A27F
00039f14: AF := 0x10 = (0x10 & (#8000 ^ low:32[RAX] ^ mem[0x62133C, el]:u32))
.address 0x40A27F
00039f17: PF := ~low:1[let $1 = #8000 >> 4 ^ #8000 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A27F
00039f1a: SF := high:1[#8000]
.address 0x40A27F
00039f1d: ZF := 0 = #8000
.address 0x40A285
00039f26: when ZF | (SF | OF) & ~(SF & OF) goto %00034148
00044960: goto %00039f2c

.address 0x40A28B
00039f2c: 
.address 0x40A28B
00039f31: goto %0003883b

.address 0x40A468
0003883b: 
.address 0x40A468
00038840: mem := mem with [0x62133C, el]:u32 <- low:32[RAX]
.address 0x40A46E
00038847: goto %00034148

.address 0x409C7E
00034148: 
.address 0x409C7E
00034158: RAX := pad:64[pad:32[mem[0x6212FC]]]
.address 0x409C85
00034165: #7221 := low:8[RAX]
.address 0x409C85
00034168: OF := 0
.address 0x409C85
0003416b: CF := 0
.address 0x409C85
0003416e: AF := unknown[bits]:u1
.address 0x409C85
00034171: PF := ~low:1[let $1 = #7221 >> 4 ^ #7221 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409C85
00034174: SF := high:1[#7221]
.address 0x409C85
00034177: ZF := 0 = #7221
.address 0x409C87
00034181: when ~ZF goto %0003417b
00044961: goto %000341da

.address 0x40A190
0003417b: 
.address 0x40A190
0003418b: RDI := mem[RBX + 0x20, el]:u64
.address 0x40A194
00034192: RSI := low:64[RBP - 0x2D0]
.address 0x40A19B
0003419b: RSP := RSP - 8
.address 0x40A19B
0003419e: mem := mem with [RSP, el]:u64 <- 0x40A1A0
.address 0x40A19B
000341a1: call @sub_40fcf0 with return %000341a3

.address 0x40A1A0
000341a3: 
.address 0x40A1A0
000341a8: RDI := RAX
.address 0x40A1A3
000341b1: RSP := RSP - 8
.address 0x40A1A3
000341b4: mem := mem with [RSP, el]:u64 <- 0x40A1A8
.address 0x40A1A3
000341b7: call @sub_403950 with return %000341b9

.address 0x40A1A8
000341b9: 
.address 0x40A1A8
000341c4: #7223 := low:32[RAX] - mem[0x621360, el]:u32
.address 0x40A1A8
000341c7: CF := low:32[RAX] < mem[0x621360, el]:u32
.address 0x40A1A8
000341ca: OF := high:1[(low:32[RAX] ^ mem[0x621360, el]:u32) & (low:32[RAX] ^ #7223)]
.address 0x40A1A8
000341cd: AF := 0x10 = (0x10 & (#7223 ^ low:32[RAX] ^ mem[0x621360, el]:u32))
.address 0x40A1A8
000341d0: PF := ~low:1[let $1 = #7223 >> 4 ^ #7223 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A1A8
000341d3: SF := high:1[#7223]
.address 0x40A1A8
000341d6: ZF := 0 = #7223
.address 0x40A1AE
000341e0: when ZF | (SF | OF) & ~(SF & OF) goto %000341da
00044962: goto %0003882a

.address 0x40A1B4
0003882a: 
.address 0x40A1B4
0003882f: mem := mem with [0x621360, el]:u32 <- low:32[RAX]
.address 0x40A1BA
00038836: goto %000341da

.address 0x409C8D
000341da: 
.address 0x409C8D
000341ea: RDI := mem[RBP - 0x388, el]:u64
.address 0x409C94
000341f3: RSP := RSP - 8
.address 0x409C94
000341f6: mem := mem with [RSP, el]:u64 <- 0x409C99
.address 0x409C94
000341f9: call @sub_4146b0 with return %000341fb

.address 0x409C99
000341fb: 
.address 0x409C99
00034207: #7225 := mem[0x6213B0, el]:u64
.address 0x409C99
0003420a: mem := mem with [0x6213B0, el]:u64 <- mem[0x6213B0, el]:u64 + 1
.address 0x409C99
0003420d: CF := mem[0x6213B0, el]:u64 < #7225
.address 0x409C99
00034210: OF := ~high:1[#7225] & (high:1[#7225] | high:1[mem[0x6213B0, el]:u64]) & ~(
high:1[#7225] & high:1[mem[0x6213B0, el]:u64])
.address 0x409C99
00034213: AF := 0x10 = (0x10 & (mem[0x6213B0, el]:u64 ^ #7225 ^ 1))
.address 0x409C99
00034216: PF := ~low:1[let $1 = mem[0x6213B0, el]:u64 >> 4 ^ mem[0x6213B0, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x409C99
00034219: SF := high:1[mem[0x6213B0, el]:u64]
.address 0x409C99
0003421c: ZF := 0 = mem[0x6213B0, el]:u64
.address 0x409CA1
00034223: mem := mem with [RBX, el]:u64 <- RAX
00044963: goto %00034225

.address 0x409CA4
00034225: 
.address 0x409CA4
0003422a: RSI := mem[RBP - 0x38, el]:u64
.address 0x409CA8
00034237: RSI := RSI ^ mem[FS_BASE + 0x28, el]:u64
.address 0x409CA8
0003423a: OF := 0
.address 0x409CA8
0003423d: CF := 0
.address 0x409CA8
00034240: AF := unknown[bits]:u1
.address 0x409CA8
00034243: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x409CA8
00034246: SF := high:1[RSI]
.address 0x409CA8
00034249: ZF := 0 = RSI
.address 0x409CB1
00034250: RAX := R12
.address 0x409CB4
0003425a: when ~ZF goto %00034254
00044964: goto %000387ce

.address 0x40A847
00034254: 
.address 0x40A847
00034266: RSP := RSP - 8
.address 0x40A847
00034269: mem := mem with [RSP, el]:u64 <- 0x40A84C
.address 0x40A847
0003426c: call @sub_403970 with return %0003426e

.address 0x40A84C
0003426e: 
.address 0x40A84C
00034273: RSI := 1
.address 0x40A851
0003427b: goto %00034277

.address 0x409CBA
000387ce: 
.address 0x409CBA
000387d3: RSP := low:64[RBP - 0x28]
.address 0x409CBE
000387db: RBX := mem[RSP, el]:u64
.address 0x409CBE
000387de: RSP := RSP + 8
.address 0x409CBF
000387e6: R12 := mem[RSP, el]:u64
.address 0x409CBF
000387e9: RSP := RSP + 8
.address 0x409CC1
000387f1: R13 := mem[RSP, el]:u64
.address 0x409CC1
000387f4: RSP := RSP + 8
.address 0x409CC3
000387fc: R14 := mem[RSP, el]:u64
.address 0x409CC3
000387ff: RSP := RSP + 8
.address 0x409CC5
00038807: R15 := mem[RSP, el]:u64
.address 0x409CC5
0003880a: RSP := RSP + 8
.address 0x409CC7
00038812: RBP := mem[RSP, el]:u64
.address 0x409CC7
00038815: RSP := RSP + 8
.address 0x409CC8
0003881e: #7814 := mem[RSP, el]:u64
.address 0x409CC8
00038821: RSP := RSP + 8
.address 0x409CC8
00038825: call #7814 with noreturn


.address 0x40A860
000440d9: sub sub_40a860()
.address 0x40A860
000342ba: 
.address 0x40A860
000342c1: #7231 := R15
.address 0x40A860
000342c4: RSP := RSP - 8
.address 0x40A860
000342c7: mem := mem with [RSP, el]:u64 <- #7231
.address 0x40A862
000342d0: #7232 := R14
.address 0x40A862
000342d3: RSP := RSP - 8
.address 0x40A862
000342d6: mem := mem with [RSP, el]:u64 <- #7232
.address 0x40A864
000342dd: R14 := RDI
.address 0x40A867
000342e6: #7233 := R13
.address 0x40A867
000342e9: RSP := RSP - 8
.address 0x40A867
000342ec: mem := mem with [RSP, el]:u64 <- #7233
.address 0x40A869
000342f5: #7234 := R12
.address 0x40A869
000342f8: RSP := RSP - 8
.address 0x40A869
000342fb: mem := mem with [RSP, el]:u64 <- #7234
.address 0x40A86B
00034304: #7235 := RBP
.address 0x40A86B
00034307: RSP := RSP - 8
.address 0x40A86B
0003430a: mem := mem with [RSP, el]:u64 <- #7235
.address 0x40A86C
00034313: #7236 := RBX
.address 0x40A86C
00034316: RSP := RSP - 8
.address 0x40A86C
00034319: mem := mem with [RSP, el]:u64 <- #7236
.address 0x40A86D
00034320: RBX := RSI
.address 0x40A870
0003432e: #7237 := RSP
.address 0x40A870
00034331: RSP := RSP - 0x348
.address 0x40A870
00034334: CF := #7237 < 0x348
.address 0x40A870
00034337: OF := high:1[(#7237 ^ 0x348) & (#7237 ^ RSP)]
.address 0x40A870
0003433a: AF := 0x10 = (0x10 & (RSP ^ #7237 ^ 0x348))
.address 0x40A870
0003433d: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40A870
00034340: SF := high:1[RSP]
.address 0x40A870
00034343: ZF := 0 = RSP
.address 0x40A877
0003434a: mem := mem with [RSP + 0xC, el]:u32 <- low:32[RDX]
.address 0x40A87B
00034351: mem := mem with [RSP + 0xB] <- low:8[RDX]
.address 0x40A87F
00034358: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x40A888
0003435f: mem := mem with [RSP + 0x338, el]:u64 <- RAX
.address 0x40A890
0003436c: RAX := 0
.address 0x40A890
0003436f: AF := unknown[bits]:u1
.address 0x40A890
00034372: ZF := 1
.address 0x40A890
00034375: PF := 1
.address 0x40A890
00034378: OF := 0
.address 0x40A890
0003437b: CF := 0
.address 0x40A890
0003437e: SF := 0
.address 0x40A892
00034387: RSP := RSP - 8
.address 0x40A892
0003438a: mem := mem with [RSP, el]:u64 <- 0x40A897
.address 0x40A892
0003438d: call @sub_4037f0 with return %0003438f

.address 0x40A897
0003438f: 
.address 0x40A897
00034394: RDI := R14
.address 0x40A89A
0003439b: mem := mem with [RAX, el]:u32 <- 0
.address 0x40A8A0
000343a2: R12 := RAX
.address 0x40A8A3
000343ab: RSP := RSP - 8
.address 0x40A8A3
000343ae: mem := mem with [RSP, el]:u64 <- 0x40A8A8
.address 0x40A8A3
000343b1: call @sub_403900 with return %000343b3

.address 0x40A8A8
000343b3: 
.address 0x40A8A8
000343be: #7240 := RAX
.address 0x40A8A8
000343c1: OF := 0
.address 0x40A8A8
000343c4: CF := 0
.address 0x40A8A8
000343c7: AF := unknown[bits]:u1
.address 0x40A8A8
000343ca: PF := ~low:1[let $1 = #7240 >> 4 ^ #7240 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A8A8
000343cd: SF := high:1[#7240]
.address 0x40A8A8
000343d0: ZF := 0 = #7240
.address 0x40A8AB
000343da: when ZF goto %000343d4
00044965: goto %00038642

.address 0x40ADE0
000343d4: 
.address 0x40ADE0
000343e4: RSI := 0x417CB5
.address 0x40ADE7
000343f1: RDI := 0
.address 0x40ADE7
000343f4: AF := unknown[bits]:u1
.address 0x40ADE7
000343f7: ZF := 1
.address 0x40ADE7
000343fa: PF := 1
.address 0x40ADE7
000343fd: OF := 0
.address 0x40ADE7
00034400: CF := 0
.address 0x40ADE7
00034403: SF := 0
.address 0x40ADE9
0003440a: RDX := 5
.address 0x40ADEE
00034413: RSP := RSP - 8
.address 0x40ADEE
00034416: mem := mem with [RSP, el]:u64 <- 0x40ADF3
.address 0x40ADEE
00034419: call @sub_403930 with return %0003441b

.address 0x40ADF3
0003441b: 
.address 0x40ADF3
00034420: RDI := pad:64[pad:32[mem[RSP + 0xC]]]
.address 0x40ADF8
00034427: RDX := R14
.address 0x40ADFB
0003442e: RSI := RAX
.address 0x40ADFE
00034437: RSP := RSP - 8
.address 0x40ADFE
0003443a: mem := mem with [RSP, el]:u64 <- 0x40AE03
.address 0x40ADFE
0003443d: call @sub_4069a0 with return %0003443f

.address 0x40AE03
0003443f: 
.address 0x40AE03
00034445: call @sub_40a911 with noreturn

.address 0x40A8B1
00038642: 
.address 0x40A8B1
0003864d: #7800 := mem[0x6213C8, el]:u64
.address 0x40A8B1
00038650: CF := mem[0x6213C8, el]:u64 < 0
.address 0x40A8B1
00038653: OF := high:1[mem[0x6213C8, el]:u64 & (mem[0x6213C8, el]:u64 ^ #7800)]
.address 0x40A8B1
00038656: AF := 0x10 = (0x10 & (#7800 ^ mem[0x6213C8, el]:u64))
.address 0x40A8B1
00038659: PF := ~low:1[let $1 = #7800 >> 4 ^ #7800 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A8B1
0003865c: SF := high:1[#7800]
.address 0x40A8B1
0003865f: ZF := 0 = #7800
.address 0x40A8B9
00038666: R13 := RAX
.address 0x40A8BC
0003866f: when ZF goto %000376b7
00044966: goto %00038675

.address 0x40A8C2
00038675: 
.address 0x40A8C2
0003867a: RDI := RAX
.address 0x40A8C5
00038683: RSP := RSP - 8
.address 0x40A8C5
00038686: mem := mem with [RSP, el]:u64 <- 0x40A8CA
.address 0x40A8C5
00038689: call @sub_403b40 with return %0003868b

.address 0x40A8CA
0003868b: 
.address 0x40A8CA
00038696: #7802 := low:32[RAX]
.address 0x40A8CA
00038699: OF := 0
.address 0x40A8CA
0003869c: CF := 0
.address 0x40A8CA
0003869f: AF := unknown[bits]:u1
.address 0x40A8CA
000386a2: PF := ~low:1[let $1 = #7802 >> 4 ^ #7802 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A8CA
000386a5: SF := high:1[#7802]
.address 0x40A8CA
000386a8: ZF := 0 = #7802
.address 0x40A8CC
000386af: RDX := low:64[RSP + 0x10]
.address 0x40A8D1
000386b8: when SF goto %0003748e
00044967: goto %000386be

.address 0x40A940
0003748e: 
.address 0x40A940
00037493: RSI := R14
.address 0x40A943
0003749a: RDI := 1
.address 0x40A948
000374a3: RSP := RSP - 8
.address 0x40A948
000374a6: mem := mem with [RSP, el]:u64 <- 0x40A94D
.address 0x40A948
000374a9: call @sub_403be0 with return %000374ab

.address 0x40A94D
000374ab: 
.address 0x40A94D
000374b7: #7681 := low:32[RAX]
.address 0x40A94D
000374ba: RAX := pad:64[low:32[RAX] >> 0x1F]
.address 0x40A94D
000374bd: CF := high:1[#7681 << 1]
.address 0x40A94D
000374c0: SF := high:1[low:32[RAX]]
.address 0x40A94D
000374c3: ZF := 0 = low:32[RAX]
.address 0x40A94D
000374c6: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A94D
000374c9: AF := unknown[bits]:u1
.address 0x40A94D
000374cc: OF := unknown[bits]:u1
.address 0x40A950
000374d9: #7683 := low:8[RAX]
.address 0x40A950
000374dc: OF := 0
.address 0x40A950
000374df: CF := 0
.address 0x40A950
000374e2: AF := unknown[bits]:u1
.address 0x40A950
000374e5: PF := ~low:1[let $1 = #7683 >> 4 ^ #7683 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A950
000374e8: SF := high:1[#7683]
.address 0x40A950
000374eb: ZF := 0 = #7683
.address 0x40A952
000374f5: when ~ZF goto %000374ef
00044968: goto %00037570

.address 0x40A8D3
000386be: 
.address 0x40A8D3
000386c3: RSI := pad:64[low:32[RAX]]
.address 0x40A8D5
000386ca: RDI := 1
.address 0x40A8DA
000386d3: RSP := RSP - 8
.address 0x40A8DA
000386d6: mem := mem with [RSP, el]:u64 <- 0x40A8DF
.address 0x40A8DA
000386d9: call @sub_403c40 with return %000386db

.address 0x40A8DF
000386db: 
.address 0x40A8DF
000386e7: #7804 := low:32[RAX]
.address 0x40A8DF
000386ea: RAX := pad:64[low:32[RAX] >> 0x1F]
.address 0x40A8DF
000386ed: CF := high:1[#7804 << 1]
.address 0x40A8DF
000386f0: SF := high:1[low:32[RAX]]
.address 0x40A8DF
000386f3: ZF := 0 = low:32[RAX]
.address 0x40A8DF
000386f6: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A8DF
000386f9: AF := unknown[bits]:u1
.address 0x40A8DF
000386fc: OF := unknown[bits]:u1
.address 0x40A8E2
00038709: #7806 := low:8[RAX]
.address 0x40A8E2
0003870c: OF := 0
.address 0x40A8E2
0003870f: CF := 0
.address 0x40A8E2
00038712: AF := unknown[bits]:u1
.address 0x40A8E2
00038715: PF := ~low:1[let $1 = #7806 >> 4 ^ #7806 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A8E2
00038718: SF := high:1[#7806]
.address 0x40A8E2
0003871b: ZF := 0 = #7806
.address 0x40A8E4
00038724: when ZF goto %00037570
00044969: goto %000374ef

.address 0x40A954
00037570: 
.address 0x40A954
00037575: RDX := mem[RSP + 0x18, el]:u64
.address 0x40A959
0003757c: RDI := 0x10
.address 0x40A95E
00037583: R15 := mem[RSP + 0x10, el]:u64
.address 0x40A963
0003758a: mem := mem with [RSP, el]:u64 <- RDX
.address 0x40A967
00037593: RSP := RSP - 8
.address 0x40A967
00037596: mem := mem with [RSP, el]:u64 <- 0x40A96C
.address 0x40A967
00037599: call @sub_414480 with return %0003759b

.address 0x40A96C
0003759b: 
.address 0x40A96C
000375a0: RDX := mem[RSP, el]:u64
.address 0x40A970
000375a7: RDI := mem[0x6213C8, el]:u64
.address 0x40A977
000375ae: RSI := RAX
.address 0x40A97A
000375b5: mem := mem with [RAX + 8, el]:u64 <- R15
.address 0x40A97E
000375bc: RBP := RAX
.address 0x40A981
000375c3: mem := mem with [RAX, el]:u64 <- RDX
.address 0x40A984
000375cc: RSP := RSP - 8
.address 0x40A984
000375cf: mem := mem with [RSP, el]:u64 <- 0x40A989
.address 0x40A984
000375d2: call @sub_40e900 with return %000375d4

.address 0x40A989
000375d4: 
.address 0x40A989
000375df: #7685 := RAX
.address 0x40A989
000375e2: OF := 0
.address 0x40A989
000375e5: CF := 0
.address 0x40A989
000375e8: AF := unknown[bits]:u1
.address 0x40A989
000375eb: PF := ~low:1[let $1 = #7685 >> 4 ^ #7685 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A989
000375ee: SF := high:1[#7685]
.address 0x40A989
000375f1: ZF := 0 = #7685
.address 0x40A98C
000375fa: when ZF call @sub_40af0f with noreturn
0004496a: goto %00037600

.address 0x40A992
00037600: 
.address 0x40A992
0003760b: #7687 := RBP - RAX
.address 0x40A992
0003760e: CF := RBP < RAX
.address 0x40A992
00037611: OF := high:1[(RBP ^ RAX) & (RBP ^ #7687)]
.address 0x40A992
00037614: AF := 0x10 = (0x10 & (#7687 ^ RBP ^ RAX))
.address 0x40A992
00037617: PF := ~low:1[let $1 = #7687 >> 4 ^ #7687 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40A992
0003761a: SF := high:1[#7687]
.address 0x40A992
0003761d: ZF := 0 = #7687
.address 0x40A995
00037627: when ZF goto %00037621
0004496b: goto %0003850f

.address 0x40A9EC
00037621: 
.address 0x40A9EC
00037631: RAX := mem[0x6210F8, el]:u64
.address 0x40A9F3
00037638: RDX := mem[0x621100, el]:u64
.address 0x40A9FA
0003763f: RBP := mem[RSP + 0x18, el]:u64
.address 0x40A9FF
00037646: R15 := mem[RSP + 0x10, el]:u64
.address 0x40AA04
00037655: #7689 := RDX
.address 0x40AA04
00037658: #7690 := RAX
.address 0x40AA04
0003765b: RDX := RDX - RAX
.address 0x40AA04
0003765e: CF := #7689 < #7690
.address 0x40AA04
00037661: OF := high:1[(#7689 ^ #7690) & (#7689 ^ RDX)]
.address 0x40AA04
00037664: AF := 0x10 = (0x10 & (RDX ^ #7689 ^ #7690))
.address 0x40AA04
00037667: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40AA04
0003766a: SF := high:1[RDX]
.address 0x40AA04
0003766d: ZF := 0 = RDX
.address 0x40AA07
0003767a: #7692 := RDX - 0xF
.address 0x40AA07
0003767d: CF := RDX < 0xF
.address 0x40AA07
00037680: OF := high:1[(RDX ^ 0xF) & (RDX ^ #7692)]
.address 0x40AA07
00037683: AF := 0x10 = (0x10 & (#7692 ^ RDX ^ 0xF))
.address 0x40AA07
00037686: PF := ~low:1[let $1 = #7692 >> 4 ^ #7692 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AA07
00037689: SF := high:1[#7692]
.address 0x40AA07
0003768c: ZF := 0 = #7692
.address 0x40AA0B
00037696: when ~(CF | ZF) goto %00037690
0004496c: goto %000384eb

.address 0x40AA0D
000384eb: 
.address 0x40AA0D
000384f0: RDI := 0x6210E0
.address 0x40AA14
000384f7: RSI := 0x10
.address 0x40AA19
00038500: RSP := RSP - 8
.address 0x40AA19
00038503: mem := mem with [RSP, el]:u64 <- 0x40AA1E
.address 0x40AA19
00038506: call @_obstack_newchunk with return %00038508

.address 0x40AA1E
00038508: 
.address 0x40AA1E
0003850d: RAX := mem[0x6210F8, el]:u64
0004496d: goto %00037690

.address 0x40AA25
00037690: 
.address 0x40AA25
000376a0: RDX := low:64[RAX + 0x10]
.address 0x40AA29
000376a7: mem := mem with [0x6210F8, el]:u64 <- RDX
.address 0x40AA30
000376ae: mem := mem with [RAX + 8, el]:u64 <- R15
.address 0x40AA34
000376b5: mem := mem with [RAX, el]:u64 <- RBP
0004496e: goto %000376b7

.address 0x40AA37
000376b7: 
.address 0x40AA37
000376be: RSP := RSP - 8
.address 0x40AA37
000376c1: mem := mem with [RSP, el]:u64 <- 0x40AA3C
.address 0x40AA37
000376c4: call @sub_4060e0 with return %000376c6

.address 0x40AA3C
000376c6: 
.address 0x40AA3C
000376d1: #7694 := mem[0x6212F6]
.address 0x40AA3C
000376d4: CF := mem[0x6212F6] < 0
.address 0x40AA3C
000376d7: OF := high:1[mem[0x6212F6] & (mem[0x6212F6] ^ #7694)]
.address 0x40AA3C
000376da: AF := 0x10 = (0x10 & (#7694 ^ mem[0x6212F6]))
.address 0x40AA3C
000376dd: PF := ~low:1[let $1 = #7694 >> 4 ^ #7694 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AA3C
000376e0: SF := high:1[#7694]
.address 0x40AA3C
000376e3: ZF := 0 = #7694
.address 0x40AA43
000376ed: when ~ZF goto %000376e7
0004496f: goto %000384bf

.address 0x40AA49
000384bf: 
.address 0x40AA49
000384ca: #7798 := mem[0x6212B8]
.address 0x40AA49
000384cd: CF := mem[0x6212B8] < 0
.address 0x40AA49
000384d0: OF := high:1[mem[0x6212B8] & (mem[0x6212B8] ^ #7798)]
.address 0x40AA49
000384d3: AF := 0x10 = (0x10 & (#7798 ^ mem[0x6212B8]))
.address 0x40AA49
000384d6: PF := ~low:1[let $1 = #7798 >> 4 ^ #7798 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AA49
000384d9: SF := high:1[#7798]
.address 0x40AA49
000384dc: ZF := 0 = #7798
.address 0x40AA50
000384e5: when ~ZF goto %000376e7
00044970: call @sub_40aa56 with noreturn

.address 0x40AAF0
000376e7: 
.address 0x40AAF0
000376fd: #7696 := mem[0x620010]
.address 0x40AAF0
00037700: CF := mem[0x620010] < 0
.address 0x40AAF0
00037703: OF := high:1[mem[0x620010] & (mem[0x620010] ^ #7696)]
.address 0x40AAF0
00037706: AF := 0x10 = (0x10 & (#7696 ^ mem[0x620010]))
.address 0x40AAF0
00037709: PF := ~low:1[let $1 = #7696 >> 4 ^ #7696 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AAF0
0003770c: SF := high:1[#7696]
.address 0x40AAF0
0003770f: ZF := 0 = #7696
.address 0x40AAF7
00037719: when ~ZF goto %00037713
00044971: goto %00038470

.address 0x40AAF9
00038470: 
.address 0x40AAF9
00038475: RDI := mem[0x620288, el]:u64
.address 0x40AB00
0003847c: RAX := mem[RDI + 0x28, el]:u64
.address 0x40AB04
00038489: #7796 := RAX - mem[RDI + 0x30, el]:u64
.address 0x40AB04
0003848c: CF := RAX < mem[RDI + 0x30, el]:u64
.address 0x40AB04
0003848f: OF := high:1[(RAX ^ mem[RDI + 0x30, el]:u64) & (RAX ^ #7796)]
.address 0x40AB04
00038492: AF := 0x10 = (0x10 & (#7796 ^ RAX ^ mem[RDI + 0x30, el]:u64))
.address 0x40AB04
00038495: PF := ~low:1[let $1 = #7796 >> 4 ^ #7796 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AB04
00038498: SF := high:1[#7796]
.address 0x40AB04
0003849b: ZF := 0 = #7796
.address 0x40AB08
000384a4: when ~CF goto %0003818c
00044972: goto %000384aa

.address 0x40AEFB
0003818c: 
.address 0x40AEFB
00038191: RSI := 0xA
.address 0x40AF00
0003819a: RSP := RSP - 8
.address 0x40AF00
0003819d: mem := mem with [RSP, el]:u64 <- 0x40AF05
.address 0x40AF00
000381a0: call @sub_4039d0 with return %000381a2

.address 0x40AF05
000381a2: 
.address 0x40AF05
000381a8: goto %000381a4

.address 0x40AB0E
000384aa: 
.address 0x40AB0E
000384af: RDX := low:64[RAX + 1]
.address 0x40AB12
000384b6: mem := mem with [RDI + 0x28, el]:u64 <- RDX
.address 0x40AB16
000384bd: mem := mem with [RAX] <- 0xA
00044973: goto %000381a4

.address 0x40AB19
000381a4: 
.address 0x40AB19
000381b5: #7777 := mem[0x6211F8, el]:u64
.address 0x40AB19
000381b8: mem := mem with [0x6211F8, el]:u64 <- mem[0x6211F8, el]:u64 + 1
.address 0x40AB19
000381bb: CF := mem[0x6211F8, el]:u64 < #7777
.address 0x40AB19
000381be: OF := ~high:1[#7777] & (high:1[#7777] | high:1[mem[0x6211F8, el]:u64]) & ~(
high:1[#7777] & high:1[mem[0x6211F8, el]:u64])
.address 0x40AB19
000381c1: AF := 0x10 = (0x10 & (mem[0x6211F8, el]:u64 ^ #7777 ^ 1))
.address 0x40AB19
000381c4: PF := ~low:1[let $1 = mem[0x6211F8, el]:u64 >> 4 ^ mem[0x6211F8, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AB19
000381c7: SF := high:1[mem[0x6211F8, el]:u64]
.address 0x40AB19
000381ca: ZF := 0 = mem[0x6211F8, el]:u64
00044974: goto %00037713

.address 0x40AB21
00037713: 
.address 0x40AB21
00037729: #7698 := mem[0x621318]
.address 0x40AB21
0003772c: CF := mem[0x621318] < 0
.address 0x40AB21
0003772f: OF := high:1[mem[0x621318] & (mem[0x621318] ^ #7698)]
.address 0x40AB21
00037732: AF := 0x10 = (0x10 & (#7698 ^ mem[0x621318]))
.address 0x40AB21
00037735: PF := ~low:1[let $1 = #7698 >> 4 ^ #7698 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AB21
00037738: SF := high:1[#7698]
.address 0x40AB21
0003773b: ZF := 0 = #7698
.address 0x40AB28
00037742: mem := mem with [0x620010] <- 0
.address 0x40AB2F
0003774c: when ~ZF goto %00037746
00044975: goto %000377a1

.address 0x40AEB3
00037746: 
.address 0x40AEB3
00037756: RCX := mem[0x620288, el]:u64
.address 0x40AEBA
0003775d: RDI := 0x417C53
.address 0x40AEC1
00037764: RDX := 2
.address 0x40AEC6
0003776b: RSI := 1
.address 0x40AECB
00037774: RSP := RSP - 8
.address 0x40AECB
00037777: mem := mem with [RSP, el]:u64 <- 0x40AED0
.address 0x40AECB
0003777a: call @sub_403c80 with return %0003777c

.address 0x40AED0
0003777c: 
.address 0x40AED0
00037788: #7700 := mem[0x6211F8, el]:u64
.address 0x40AED0
0003778b: mem := mem with [0x6211F8, el]:u64 <- mem[0x6211F8, el]:u64 + 2
.address 0x40AED0
0003778e: CF := mem[0x6211F8, el]:u64 < #7700
.address 0x40AED0
00037791: OF := ~high:1[#7700] & (high:1[#7700] | high:1[mem[0x6211F8, el]:u64]) & ~(
high:1[#7700] & high:1[mem[0x6211F8, el]:u64])
.address 0x40AED0
00037794: AF := 0x10 = (0x10 & (mem[0x6211F8, el]:u64 ^ #7700 ^ 2))
.address 0x40AED0
00037797: PF := ~low:1[let $1 = mem[0x6211F8, el]:u64 >> 4 ^ mem[0x6211F8, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AED0
0003779a: SF := high:1[mem[0x6211F8, el]:u64]
.address 0x40AED0
0003779d: ZF := 0 = mem[0x6211F8, el]:u64
.address 0x40AED8
000377a5: goto %000377a1

.address 0x40AB35
000377a1: 
.address 0x40AB35
000377b1: RBP := 0
.address 0x40AB35
000377b4: AF := unknown[bits]:u1
.address 0x40AB35
000377b7: ZF := 1
.address 0x40AB35
000377ba: PF := 1
.address 0x40AB35
000377bd: OF := 0
.address 0x40AB35
000377c0: CF := 0
.address 0x40AB35
000377c3: SF := 0
.address 0x40AB37
000377d0: #7703 := mem[0x621311]
.address 0x40AB37
000377d3: CF := mem[0x621311] < 0
.address 0x40AB37
000377d6: OF := high:1[mem[0x621311] & (mem[0x621311] ^ #7703)]
.address 0x40AB37
000377d9: AF := 0x10 = (0x10 & (#7703 ^ mem[0x621311]))
.address 0x40AB37
000377dc: PF := ~low:1[let $1 = #7703 >> 4 ^ #7703 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AB37
000377df: SF := high:1[#7703]
.address 0x40AB37
000377e2: ZF := 0 = #7703
.address 0x40AB3E
000377ec: when ~ZF goto %000377e6
00044976: goto %00037836

.address 0x40AE72
000377e6: 
.address 0x40AE72
000377f6: RSI := 2
.address 0x40AE77
000377fd: RDI := R14
.address 0x40AE7A
00037806: RSP := RSP - 8
.address 0x40AE7A
00037809: mem := mem with [RSP, el]:u64 <- 0x40AE7F
.address 0x40AE7A
0003780c: call @sub_40c640 with return %0003780e

.address 0x40AE7F
0003780e: 
.address 0x40AE7F
00037819: #7705 := RAX
.address 0x40AE7F
0003781c: OF := 0
.address 0x40AE7F
0003781f: CF := 0
.address 0x40AE7F
00037822: AF := unknown[bits]:u1
.address 0x40AE7F
00037825: PF := ~low:1[let $1 = #7705 >> 4 ^ #7705 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AE7F
00037828: SF := high:1[#7705]
.address 0x40AE7F
0003782b: ZF := 0 = #7705
.address 0x40AE82
00037832: RBP := RAX
.address 0x40AE85
0003783c: when ~ZF goto %00037836
00044977: goto %00038409

.address 0x40AE8B
00038409: 
.address 0x40AE8B
0003840e: RSI := 0x417C65
.address 0x40AE92
0003841b: RDI := 0
.address 0x40AE92
0003841e: AF := unknown[bits]:u1
.address 0x40AE92
00038421: ZF := 1
.address 0x40AE92
00038424: PF := 1
.address 0x40AE92
00038427: OF := 0
.address 0x40AE92
0003842a: CF := 0
.address 0x40AE92
0003842d: SF := 0
.address 0x40AE94
00038434: RDX := 5
.address 0x40AE99
0003843d: RSP := RSP - 8
.address 0x40AE99
00038440: mem := mem with [RSP, el]:u64 <- 0x40AE9E
.address 0x40AE99
00038443: call @sub_403930 with return %00038445

.address 0x40AE9E
00038445: 
.address 0x40AE9E
0003844a: RDI := pad:64[pad:32[mem[RSP + 0xC]]]
.address 0x40AEA3
00038451: RDX := R14
.address 0x40AEA6
00038458: RSI := RAX
.address 0x40AEA9
00038461: RSP := RSP - 8
.address 0x40AEA9
00038464: mem := mem with [RSP, el]:u64 <- 0x40AEAE
.address 0x40AEA9
00038467: call @sub_4069a0 with return %00038469

.address 0x40AEAE
00038469: 
.address 0x40AEAE
0003846e: goto %00037836

.address 0x40AB44
00037836: 
.address 0x40AB44
0003784c: #7707 := RBX
.address 0x40AB44
0003784f: OF := 0
.address 0x40AB44
00037852: CF := 0
.address 0x40AB44
00037855: AF := unknown[bits]:u1
.address 0x40AB44
00037858: PF := ~low:1[let $1 = #7707 >> 4 ^ #7707 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AB44
0003785b: SF := high:1[#7707]
.address 0x40AB44
0003785e: ZF := 0 = #7707
.address 0x40AB47
00037865: RSI := mem[0x6212C8, el]:u64
.address 0x40AB4E
0003786c: R9 := 0x621140
.address 0x40AB55
00037873: RBX := if ZF then R14 else RBX
00044978: call @sub_40ab59 with noreturn

.address 0x40A997
0003850f: 
.address 0x40A997
00038514: RDI := RBP
.address 0x40A99A
0003851d: RSP := RSP - 8
.address 0x40A99A
00038520: mem := mem with [RSP, el]:u64 <- 0x40A99F
.address 0x40A99A
00038523: call @sub_403e70 with return %00038525

.address 0x40A99F
00038525: 
.address 0x40A99F
0003852a: RDX := R14
.address 0x40A9A2
00038531: RSI := 3
.address 0x40A9A7
0003853e: RDI := 0
.address 0x40A9A7
00038541: AF := unknown[bits]:u1
.address 0x40A9A7
00038544: ZF := 1
.address 0x40A9A7
00038547: PF := 1
.address 0x40A9A7
0003854a: OF := 0
.address 0x40A9A7
0003854d: CF := 0
.address 0x40A9A7
00038550: SF := 0
.address 0x40A9A9
00038559: RSP := RSP - 8
.address 0x40A9A9
0003855c: mem := mem with [RSP, el]:u64 <- 0x40A9AE
.address 0x40A9A9
0003855f: call @sub_413b10 with return %00038561

.address 0x40A9AE
00038561: 
.address 0x40A9AE
00038566: RSI := 0x4181F8
.address 0x40A9B5
0003856d: RBX := RAX
.address 0x40A9B8
00038574: RDX := 5
.address 0x40A9BD
00038581: RDI := 0
.address 0x40A9BD
00038584: AF := unknown[bits]:u1
.address 0x40A9BD
00038587: ZF := 1
.address 0x40A9BD
0003858a: PF := 1
.address 0x40A9BD
0003858d: OF := 0
.address 0x40A9BD
00038590: CF := 0
.address 0x40A9BD
00038593: SF := 0
.address 0x40A9BF
0003859c: RSP := RSP - 8
.address 0x40A9BF
0003859f: mem := mem with [RSP, el]:u64 <- 0x40A9C4
.address 0x40A9BF
000385a2: call @sub_403930 with return %000385a4

.address 0x40A9C4
000385a4: 
.address 0x40A9C4
000385a9: RCX := RBX
.address 0x40A9C7
000385b0: RDX := RAX
.address 0x40A9CA
000385bd: RSI := 0
.address 0x40A9CA
000385c0: AF := unknown[bits]:u1
.address 0x40A9CA
000385c3: ZF := 1
.address 0x40A9CA
000385c6: PF := 1
.address 0x40A9CA
000385c9: OF := 0
.address 0x40A9CA
000385cc: CF := 0
.address 0x40A9CA
000385cf: SF := 0
.address 0x40A9CC
000385dc: RDI := 0
.address 0x40A9CC
000385df: AF := unknown[bits]:u1
.address 0x40A9CC
000385e2: ZF := 1
.address 0x40A9CC
000385e5: PF := 1
.address 0x40A9CC
000385e8: OF := 0
.address 0x40A9CC
000385eb: CF := 0
.address 0x40A9CC
000385ee: SF := 0
.address 0x40A9CE
000385fb: RAX := 0
.address 0x40A9CE
000385fe: AF := unknown[bits]:u1
.address 0x40A9CE
00038601: ZF := 1
.address 0x40A9CE
00038604: PF := 1
.address 0x40A9CE
00038607: OF := 0
.address 0x40A9CE
0003860a: CF := 0
.address 0x40A9CE
0003860d: SF := 0
.address 0x40A9D0
00038616: RSP := RSP - 8
.address 0x40A9D0
00038619: mem := mem with [RSP, el]:u64 <- 0x40A9D5
.address 0x40A9D0
0003861c: call @sub_403d20 with return %0003861e

.address 0x40A9D5
0003861e: 
.address 0x40A9D5
00038623: RDI := R13
.address 0x40A9D8
0003862c: RSP := RSP - 8
.address 0x40A9D8
0003862f: mem := mem with [RSP, el]:u64 <- 0x40A9DD
.address 0x40A9D8
00038632: call @sub_403ac0 with return %00038634

.address 0x40A9DD
00038634: 
.address 0x40A9DD
00038639: mem := mem with [0x621210, el]:u32 <- 2
.address 0x40A9E7
00038640: call @sub_40a911 with noreturn

.address 0x40A8E6
000374ef: 
.address 0x40A8E6
000374ff: RSI := 0x4181D0
.address 0x40A8ED
00037506: RDX := 5
.address 0x40A8F2
00037513: RDI := 0
.address 0x40A8F2
00037516: AF := unknown[bits]:u1
.address 0x40A8F2
00037519: ZF := 1
.address 0x40A8F2
0003751c: PF := 1
.address 0x40A8F2
0003751f: OF := 0
.address 0x40A8F2
00037522: CF := 0
.address 0x40A8F2
00037525: SF := 0
.address 0x40A8F4
0003752e: RSP := RSP - 8
.address 0x40A8F4
00037531: mem := mem with [RSP, el]:u64 <- 0x40A8F9
.address 0x40A8F4
00037534: call @sub_403930 with return %00037536

.address 0x40A8F9
00037536: 
.address 0x40A8F9
0003753b: RDI := pad:64[pad:32[mem[RSP + 0xC]]]
.address 0x40A8FE
00037542: RDX := R14
.address 0x40A901
00037549: RSI := RAX
.address 0x40A904
00037552: RSP := RSP - 8
.address 0x40A904
00037555: mem := mem with [RSP, el]:u64 <- 0x40A909
.address 0x40A904
00037558: call @sub_4069a0 with return %0003755a

.address 0x40A909
0003755a: 
.address 0x40A909
0003755f: RDI := R13
.address 0x40A90C
00037568: RSP := RSP - 8
.address 0x40A90C
0003756b: mem := mem with [RSP, el]:u64 <- 0x40A911
.address 0x40A90C
0003756e: call @sub_403ac0 with return %00044979

00044979: 
0004497a: call @sub_40a911 with noreturn


.address 0x40A911
000440f0: sub sub_40a911()
.address 0x40A911
00034441: 
.address 0x40A911
0003444b: RAX := mem[RSP + 0x338, el]:u64
.address 0x40A919
00034458: RAX := RAX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x40A919
0003445b: OF := 0
.address 0x40A919
0003445e: CF := 0
.address 0x40A919
00034461: AF := unknown[bits]:u1
.address 0x40A919
00034464: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40A919
00034467: SF := high:1[RAX]
.address 0x40A919
0003446a: ZF := 0 = RAX
.address 0x40A922
00034474: when ~ZF goto %0003446e
0004497b: goto %00037416

.address 0x40AF0A
0003446e: 
.address 0x40AF0A
00034480: RSP := RSP - 8
.address 0x40AF0A
00034483: mem := mem with [RSP, el]:u64 <- 0x40AF0F
.address 0x40AF0A
00034486: call @sub_403970 with return %0004497c

0004497c: 
0004497d: call @sub_40af0f with noreturn

.address 0x40A928
00037416: 
.address 0x40A928
00037422: #7677 := RSP
.address 0x40A928
00037425: RSP := RSP + 0x348
.address 0x40A928
00037428: CF := RSP < #7677
.address 0x40A928
0003742b: OF := ~high:1[#7677] & (high:1[#7677] | high:1[RSP]) & ~(high:1[#7677] & high:1[RSP])
.address 0x40A928
0003742e: AF := 0x10 = (0x10 & (RSP ^ #7677 ^ 0x348))
.address 0x40A928
00037431: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40A928
00037434: SF := high:1[RSP]
.address 0x40A928
00037437: ZF := 0 = RSP
.address 0x40A92F
0003743f: RBX := mem[RSP, el]:u64
.address 0x40A92F
00037442: RSP := RSP + 8
.address 0x40A930
0003744a: RBP := mem[RSP, el]:u64
.address 0x40A930
0003744d: RSP := RSP + 8
.address 0x40A931
00037455: R12 := mem[RSP, el]:u64
.address 0x40A931
00037458: RSP := RSP + 8
.address 0x40A933
00037460: R13 := mem[RSP, el]:u64
.address 0x40A933
00037463: RSP := RSP + 8
.address 0x40A935
0003746b: R14 := mem[RSP, el]:u64
.address 0x40A935
0003746e: RSP := RSP + 8
.address 0x40A937
00037476: R15 := mem[RSP, el]:u64
.address 0x40A937
00037479: RSP := RSP + 8
.address 0x40A939
00037482: #7680 := mem[RSP, el]:u64
.address 0x40A939
00037485: RSP := RSP + 8
.address 0x40A939
00037489: call #7680 with noreturn


.address 0x40AA56
000440f4: sub sub_40aa56()
.address 0x40AA56
00037966: 
.address 0x40AA56
00037970: mem := mem with [RSP, el]:u64 <- 0
0004497e: goto %00037975

.address 0x40AA60
00037975: 
.address 0x40AA60
0003797a: mem := mem with [R12, el]:u32 <- 0
.address 0x40AA68
00037981: RDI := R13
.address 0x40AA6B
0003798a: RSP := RSP - 8
.address 0x40AA6B
0003798d: mem := mem with [RSP, el]:u64 <- 0x40AA70
.address 0x40AA6B
00037990: call @sub_403bf0 with return %00037992

.address 0x40AA70
00037992: 
.address 0x40AA70
0003799d: #7716 := RAX
.address 0x40AA70
000379a0: OF := 0
.address 0x40AA70
000379a3: CF := 0
.address 0x40AA70
000379a6: AF := unknown[bits]:u1
.address 0x40AA70
000379a9: PF := ~low:1[let $1 = #7716 >> 4 ^ #7716 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AA70
000379ac: SF := high:1[#7716]
.address 0x40AA70
000379af: ZF := 0 = #7716
.address 0x40AA73
000379b6: RBP := RAX
.address 0x40AA76
000379c0: when ZF goto %000379ba
0004497f: goto %000382b1

.address 0x40ABB0
000379ba: 
.address 0x40ABB0
000379ca: RDX := pad:64[mem[R12, el]:u32]
.address 0x40ABB4
000379d7: #7718 := low:32[RDX]
.address 0x40ABB4
000379da: OF := 0
.address 0x40ABB4
000379dd: CF := 0
.address 0x40ABB4
000379e0: AF := unknown[bits]:u1
.address 0x40ABB4
000379e3: PF := ~low:1[let $1 = #7718 >> 4 ^ #7718 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40ABB4
000379e6: SF := high:1[#7718]
.address 0x40ABB4
000379e9: ZF := 0 = #7718
.address 0x40ABB6
000379f3: when ZF goto %000379ed
00044980: goto %00038225

.address 0x40ABB8
00038225: 
.address 0x40ABB8
0003822a: RSI := 0x417CCE
.address 0x40ABBF
00038237: RDI := 0
.address 0x40ABBF
0003823a: AF := unknown[bits]:u1
.address 0x40ABBF
0003823d: ZF := 1
.address 0x40ABBF
00038240: PF := 1
.address 0x40ABBF
00038243: OF := 0
.address 0x40ABBF
00038246: CF := 0
.address 0x40ABBF
00038249: SF := 0
.address 0x40ABC1
00038250: RDX := 5
.address 0x40ABC6
00038259: RSP := RSP - 8
.address 0x40ABC6
0003825c: mem := mem with [RSP, el]:u64 <- 0x40ABCB
.address 0x40ABC6
0003825f: call @sub_403930 with return %00038261

.address 0x40ABCB
00038261: 
.address 0x40ABCB
00038266: RDI := pad:64[pad:32[mem[RSP + 0xB]]]
.address 0x40ABD0
0003826d: RDX := R14
.address 0x40ABD3
00038274: RSI := RAX
.address 0x40ABD6
0003827d: RSP := RSP - 8
.address 0x40ABD6
00038280: mem := mem with [RSP, el]:u64 <- 0x40ABDB
.address 0x40ABD6
00038283: call @sub_4069a0 with return %00038285

.address 0x40ABDB
00038285: 
.address 0x40ABDB
00038290: #7782 := mem[R12, el]:u32 - 0x4B
.address 0x40ABDB
00038293: CF := mem[R12, el]:u32 < 0x4B
.address 0x40ABDB
00038296: OF := high:1[(mem[R12, el]:u32 ^ 0x4B) & (mem[R12, el]:u32 ^ #7782)]
.address 0x40ABDB
00038299: AF := 0x10 = (0x10 & (#7782 ^ mem[R12, el]:u32 ^ 0x4B))
.address 0x40ABDB
0003829c: PF := ~low:1[let $1 = #7782 >> 4 ^ #7782 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40ABDB
0003829f: SF := high:1[#7782]
.address 0x40ABDB
000382a2: ZF := 0 = #7782
.address 0x40ABE0
000382ab: when ZF goto %00037e56
00044981: goto %000379ed

.address 0x40ABE6
000379ed: 
.address 0x40ABE6
000379fd: RDI := R13
.address 0x40ABE9
00037a06: RSP := RSP - 8
.address 0x40ABE9
00037a09: mem := mem with [RSP, el]:u64 <- 0x40ABEE
.address 0x40ABE9
00037a0c: call @sub_403ac0 with return %00037a0e

.address 0x40ABEE
00037a0e: 
.address 0x40ABEE
00037a19: #7720 := low:32[RAX]
.address 0x40ABEE
00037a1c: OF := 0
.address 0x40ABEE
00037a1f: CF := 0
.address 0x40ABEE
00037a22: AF := unknown[bits]:u1
.address 0x40ABEE
00037a25: PF := ~low:1[let $1 = #7720 >> 4 ^ #7720 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40ABEE
00037a28: SF := high:1[#7720]
.address 0x40ABEE
00037a2b: ZF := 0 = #7720
.address 0x40ABF0
00037a35: when ~ZF goto %00037a2f
00044982: goto %00037a9c

.address 0x40AE20
00037a2f: 
.address 0x40AE20
00037a3f: RSI := 0x417CE3
.address 0x40AE27
00037a4c: RDI := 0
.address 0x40AE27
00037a4f: AF := unknown[bits]:u1
.address 0x40AE27
00037a52: ZF := 1
.address 0x40AE27
00037a55: PF := 1
.address 0x40AE27
00037a58: OF := 0
.address 0x40AE27
00037a5b: CF := 0
.address 0x40AE27
00037a5e: SF := 0
.address 0x40AE29
00037a65: RDX := 5
.address 0x40AE2E
00037a6e: RSP := RSP - 8
.address 0x40AE2E
00037a71: mem := mem with [RSP, el]:u64 <- 0x40AE33
.address 0x40AE2E
00037a74: call @sub_403930 with return %00037a76

.address 0x40AE33
00037a76: 
.address 0x40AE33
00037a7b: RDI := pad:64[pad:32[mem[RSP + 0xC]]]
.address 0x40AE38
00037a82: RDX := R14
.address 0x40AE3B
00037a89: RSI := RAX
.address 0x40AE3E
00037a92: RSP := RSP - 8
.address 0x40AE3E
00037a95: mem := mem with [RSP, el]:u64 <- 0x40AE43
.address 0x40AE3E
00037a98: call @sub_4069a0 with return %00037a9a

.address 0x40AE43
00037a9a: 
.address 0x40AE43
00037aa0: goto %00037a9c

.address 0x40ABF6
00037a9c: 
.address 0x40ABF6
00037aa8: RSP := RSP - 8
.address 0x40ABF6
00037aab: mem := mem with [RSP, el]:u64 <- 0x40ABFB
.address 0x40ABF6
00037aae: call @sub_4062f0 with return %00037ab0

.address 0x40ABFB
00037ab0: 
.address 0x40ABFB
00037abb: #7722 := mem[0x6212F6]
.address 0x40ABFB
00037abe: CF := mem[0x6212F6] < 0
.address 0x40ABFB
00037ac1: OF := high:1[mem[0x6212F6] & (mem[0x6212F6] ^ #7722)]
.address 0x40ABFB
00037ac4: AF := 0x10 = (0x10 & (#7722 ^ mem[0x6212F6]))
.address 0x40ABFB
00037ac7: PF := ~low:1[let $1 = #7722 >> 4 ^ #7722 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40ABFB
00037aca: SF := high:1[#7722]
.address 0x40ABFB
00037acd: ZF := 0 = #7722
.address 0x40AC02
00037ad7: when ~ZF goto %00037ad1
00044983: goto %00037b13

.address 0x40AE08
00037ad1: 
.address 0x40AE08
00037ae7: RSI := 0
.address 0x40AE08
00037aea: AF := unknown[bits]:u1
.address 0x40AE08
00037aed: ZF := 1
.address 0x40AE08
00037af0: PF := 1
.address 0x40AE08
00037af3: OF := 0
.address 0x40AE08
00037af6: CF := 0
.address 0x40AE08
00037af9: SF := 0
.address 0x40AE0A
00037b00: RDI := R14
.address 0x40AE0D
00037b09: RSP := RSP - 8
.address 0x40AE0D
00037b0c: mem := mem with [RSP, el]:u64 <- 0x40AE12
.address 0x40AE0D
00037b0f: call @sub_406570 with return %00037b11

.address 0x40AE12
00037b11: 
.address 0x40AE12
00037b17: goto %00037b13

.address 0x40AC08
00037b13: 
.address 0x40AC08
00037b1d: RAX := pad:64[mem[0x621338, el]:u32]
.address 0x40AC0E
00037b2a: #7724 := low:32[RAX]
.address 0x40AC0E
00037b2d: OF := 0
.address 0x40AC0E
00037b30: CF := 0
.address 0x40AC0E
00037b33: AF := unknown[bits]:u1
.address 0x40AC0E
00037b36: PF := ~low:1[let $1 = #7724 >> 4 ^ #7724 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AC0E
00037b39: SF := high:1[#7724]
.address 0x40AC0E
00037b3c: ZF := 0 = #7724
.address 0x40AC10
00037b46: when ZF goto %00037b40
00044984: goto %000381f6

.address 0x40AC12
000381f6: 
.address 0x40AC12
00038201: #7780 := mem[0x62132C]
.address 0x40AC12
00038204: CF := mem[0x62132C] < 0
.address 0x40AC12
00038207: OF := high:1[mem[0x62132C] & (mem[0x62132C] ^ #7780)]
.address 0x40AC12
0003820a: AF := 0x10 = (0x10 & (#7780 ^ mem[0x62132C]))
.address 0x40AC12
0003820d: PF := ~low:1[let $1 = #7780 >> 4 ^ #7780 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AC12
00038210: SF := high:1[#7780]
.address 0x40AC12
00038213: ZF := 0 = #7780
.address 0x40AC19
0003821c: when ZF goto %00037df0
00044985: goto %00037b40

.address 0x40AC1F
00037b40: 
.address 0x40AC1F
00037b56: #7726 := mem[0x621318]
.address 0x40AC1F
00037b59: CF := mem[0x621318] < 0
.address 0x40AC1F
00037b5c: OF := high:1[mem[0x621318] & (mem[0x621318] ^ #7726)]
.address 0x40AC1F
00037b5f: AF := 0x10 = (0x10 & (#7726 ^ mem[0x621318]))
.address 0x40AC1F
00037b62: PF := ~low:1[let $1 = #7726 >> 4 ^ #7726 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AC1F
00037b65: SF := high:1[#7726]
.address 0x40AC1F
00037b68: ZF := 0 = #7726
.address 0x40AC26
00037b72: when ~ZF goto %00037b6c
00044986: goto %00037bc7

.address 0x40AE48
00037b6c: 
.address 0x40AE48
00037b7c: RCX := mem[0x620288, el]:u64
.address 0x40AE4F
00037b83: RDI := 0x417C53
.address 0x40AE56
00037b8a: RDX := 2
.address 0x40AE5B
00037b91: RSI := 1
.address 0x40AE60
00037b9a: RSP := RSP - 8
.address 0x40AE60
00037b9d: mem := mem with [RSP, el]:u64 <- 0x40AE65
.address 0x40AE60
00037ba0: call @sub_403c80 with return %00037ba2

.address 0x40AE65
00037ba2: 
.address 0x40AE65
00037bae: #7728 := mem[0x6211F8, el]:u64
.address 0x40AE65
00037bb1: mem := mem with [0x6211F8, el]:u64 <- mem[0x6211F8, el]:u64 + 2
.address 0x40AE65
00037bb4: CF := mem[0x6211F8, el]:u64 < #7728
.address 0x40AE65
00037bb7: OF := ~high:1[#7728] & (high:1[#7728] | high:1[mem[0x6211F8, el]:u64]) & ~(
high:1[#7728] & high:1[mem[0x6211F8, el]:u64])
.address 0x40AE65
00037bba: AF := 0x10 = (0x10 & (mem[0x6211F8, el]:u64 ^ #7728 ^ 2))
.address 0x40AE65
00037bbd: PF := ~low:1[let $1 = mem[0x6211F8, el]:u64 >> 4 ^ mem[0x6211F8, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AE65
00037bc0: SF := high:1[mem[0x6211F8, el]:u64]
.address 0x40AE65
00037bc3: ZF := 0 = mem[0x6211F8, el]:u64
.address 0x40AE6D
00037bcb: goto %00037bc7

.address 0x40AC2C
00037bc7: 
.address 0x40AC2C
00037bd1: RSI := 0x417CF8
.address 0x40AC33
00037bd8: RDX := 5
.address 0x40AC38
00037be5: RDI := 0
.address 0x40AC38
00037be8: AF := unknown[bits]:u1
.address 0x40AC38
00037beb: ZF := 1
.address 0x40AC38
00037bee: PF := 1
.address 0x40AC38
00037bf1: OF := 0
.address 0x40AC38
00037bf4: CF := 0
.address 0x40AC38
00037bf7: SF := 0
.address 0x40AC3A
00037c00: RSP := RSP - 8
.address 0x40AC3A
00037c03: mem := mem with [RSP, el]:u64 <- 0x40AC3F
.address 0x40AC3A
00037c06: call @sub_403930 with return %00037c08

.address 0x40AC3F
00037c08: 
.address 0x40AC3F
00037c0d: RSI := mem[0x620288, el]:u64
.address 0x40AC46
00037c14: RBX := RAX
.address 0x40AC49
00037c1b: RDI := RAX
.address 0x40AC4C
00037c24: RSP := RSP - 8
.address 0x40AC4C
00037c27: mem := mem with [RSP, el]:u64 <- 0x40AC51
.address 0x40AC4C
00037c2a: call @sub_403af0 with return %00037c2c

.address 0x40AC51
00037c2c: 
.address 0x40AC51
00037c31: RDI := RBX
.address 0x40AC54
00037c3a: RSP := RSP - 8
.address 0x40AC54
00037c3d: mem := mem with [RSP, el]:u64 <- 0x40AC59
.address 0x40AC54
00037c40: call @sub_403950 with return %00037c42

.address 0x40AC59
00037c42: 
.address 0x40AC59
00037c47: RDI := mem[0x620288, el]:u64
.address 0x40AC60
00037c56: #7731 := mem[0x6211F8, el]:u64
.address 0x40AC60
00037c59: #7732 := RAX
.address 0x40AC60
00037c5c: mem := mem with [0x6211F8, el]:u64 <- mem[0x6211F8, el]:u64 + #7732
.address 0x40AC60
00037c5f: CF := mem[0x6211F8, el]:u64 < #7731
.address 0x40AC60
00037c62: OF := high:1[#7731] = high:1[#7732] & (high:1[#7731] | high:1[mem[0x6211F8, el]:u64]) & ~(
high:1[#7731] & high:1[mem[0x6211F8, el]:u64])
.address 0x40AC60
00037c65: AF := 0x10 = (0x10 & (mem[0x6211F8, el]:u64 ^ #7731 ^ #7732))
.address 0x40AC60
00037c68: PF := ~low:1[let $1 = mem[0x6211F8, el]:u64 >> 4 ^ mem[0x6211F8, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AC60
00037c6b: SF := high:1[mem[0x6211F8, el]:u64]
.address 0x40AC60
00037c6e: ZF := 0 = mem[0x6211F8, el]:u64
.address 0x40AC67
00037c75: RAX := mem[RDI + 0x28, el]:u64
.address 0x40AC6B
00037c82: #7734 := RAX - mem[RDI + 0x30, el]:u64
.address 0x40AC6B
00037c85: CF := RAX < mem[RDI + 0x30, el]:u64
.address 0x40AC6B
00037c88: OF := high:1[(RAX ^ mem[RDI + 0x30, el]:u64) & (RAX ^ #7734)]
.address 0x40AC6B
00037c8b: AF := 0x10 = (0x10 & (#7734 ^ RAX ^ mem[RDI + 0x30, el]:u64))
.address 0x40AC6B
00037c8e: PF := ~low:1[let $1 = #7734 >> 4 ^ #7734 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AC6B
00037c91: SF := high:1[#7734]
.address 0x40AC6B
00037c94: ZF := 0 = #7734
.address 0x40AC6F
00037c9e: when ~CF goto %00037c98
00044987: goto %000381e1

.address 0x40AEDD
00037c98: 
.address 0x40AEDD
00037ca8: RSI := 0x20
.address 0x40AEE2
00037cb1: RSP := RSP - 8
.address 0x40AEE2
00037cb4: mem := mem with [RSP, el]:u64 <- 0x40AEE7
.address 0x40AEE2
00037cb7: call @sub_4039d0 with return %00037cb9

.address 0x40AEE7
00037cb9: 
.address 0x40AEE7
00037cbf: goto %00037cbb

.address 0x40AC75
000381e1: 
.address 0x40AC75
000381e6: RDX := low:64[RAX + 1]
.address 0x40AC79
000381ed: mem := mem with [RDI + 0x28, el]:u64 <- RDX
.address 0x40AC7D
000381f4: mem := mem with [RAX] <- 0x20
00044988: goto %00037cbb

.address 0x40AC80
00037cbb: 
.address 0x40AC80
00037cc5: R8 := mem[0x621320, el]:u64
.address 0x40AC87
00037ccc: RDX := pad:64[mem[0x621328, el]:u32]
.address 0x40AC8D
00037cd3: RSI := low:64[RSP + 0xA0]
.address 0x40AC95
00037cda: RDI := mem[RSP, el]:u64
.address 0x40AC99
00037ce1: RCX := 0x200
.address 0x40AC9E
00037cef: #7736 := mem[0x6211F8, el]:u64
.address 0x40AC9E
00037cf2: mem := mem with [0x6211F8, el]:u64 <- mem[0x6211F8, el]:u64 + 1
.address 0x40AC9E
00037cf5: CF := mem[0x6211F8, el]:u64 < #7736
.address 0x40AC9E
00037cf8: OF := ~high:1[#7736] & (high:1[#7736] | high:1[mem[0x6211F8, el]:u64]) & ~(
high:1[#7736] & high:1[mem[0x6211F8, el]:u64])
.address 0x40AC9E
00037cfb: AF := 0x10 = (0x10 & (mem[0x6211F8, el]:u64 ^ #7736 ^ 1))
.address 0x40AC9E
00037cfe: PF := ~low:1[let $1 = mem[0x6211F8, el]:u64 >> 4 ^ mem[0x6211F8, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AC9E
00037d01: SF := high:1[mem[0x6211F8, el]:u64]
.address 0x40AC9E
00037d04: ZF := 0 = mem[0x6211F8, el]:u64
.address 0x40ACA6
00037d0d: RSP := RSP - 8
.address 0x40ACA6
00037d10: mem := mem with [RSP, el]:u64 <- 0x40ACAB
.address 0x40ACA6
00037d13: call @sub_40ed10 with return %00037d15

.address 0x40ACAB
00037d15: 
.address 0x40ACAB
00037d1a: RSI := mem[0x620288, el]:u64
.address 0x40ACB2
00037d21: RBX := RAX
.address 0x40ACB5
00037d28: RDI := RAX
.address 0x40ACB8
00037d31: RSP := RSP - 8
.address 0x40ACB8
00037d34: mem := mem with [RSP, el]:u64 <- 0x40ACBD
.address 0x40ACB8
00037d37: call @sub_403af0 with return %00037d39

.address 0x40ACBD
00037d39: 
.address 0x40ACBD
00037d3e: RDI := RBX
.address 0x40ACC0
00037d47: RSP := RSP - 8
.address 0x40ACC0
00037d4a: mem := mem with [RSP, el]:u64 <- 0x40ACC5
.address 0x40ACC0
00037d4d: call @sub_403950 with return %00037d4f

.address 0x40ACC5
00037d4f: 
.address 0x40ACC5
00037d54: RDI := mem[0x620288, el]:u64
.address 0x40ACCC
00037d63: #7739 := mem[0x6211F8, el]:u64
.address 0x40ACCC
00037d66: #7740 := RAX
.address 0x40ACCC
00037d69: mem := mem with [0x6211F8, el]:u64 <- mem[0x6211F8, el]:u64 + #7740
.address 0x40ACCC
00037d6c: CF := mem[0x6211F8, el]:u64 < #7739
.address 0x40ACCC
00037d6f: OF := high:1[#7739] = high:1[#7740] & (high:1[#7739] | high:1[mem[0x6211F8, el]:u64]) & ~(
high:1[#7739] & high:1[mem[0x6211F8, el]:u64])
.address 0x40ACCC
00037d72: AF := 0x10 = (0x10 & (mem[0x6211F8, el]:u64 ^ #7739 ^ #7740))
.address 0x40ACCC
00037d75: PF := ~low:1[let $1 = mem[0x6211F8, el]:u64 >> 4 ^ mem[0x6211F8, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40ACCC
00037d78: SF := high:1[mem[0x6211F8, el]:u64]
.address 0x40ACCC
00037d7b: ZF := 0 = mem[0x6211F8, el]:u64
.address 0x40ACD3
00037d82: RAX := mem[RDI + 0x28, el]:u64
.address 0x40ACD7
00037d8f: #7742 := RAX - mem[RDI + 0x30, el]:u64
.address 0x40ACD7
00037d92: CF := RAX < mem[RDI + 0x30, el]:u64
.address 0x40ACD7
00037d95: OF := high:1[(RAX ^ mem[RDI + 0x30, el]:u64) & (RAX ^ #7742)]
.address 0x40ACD7
00037d98: AF := 0x10 = (0x10 & (#7742 ^ RAX ^ mem[RDI + 0x30, el]:u64))
.address 0x40ACD7
00037d9b: PF := ~low:1[let $1 = #7742 >> 4 ^ #7742 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40ACD7
00037d9e: SF := high:1[#7742]
.address 0x40ACD7
00037da1: ZF := 0 = #7742
.address 0x40ACDB
00037dab: when ~CF goto %00037da5
00044989: goto %000381cc

.address 0x40AEEC
00037da5: 
.address 0x40AEEC
00037db5: RSI := 0xA
.address 0x40AEF1
00037dbe: RSP := RSP - 8
.address 0x40AEF1
00037dc1: mem := mem with [RSP, el]:u64 <- 0x40AEF6
.address 0x40AEF1
00037dc4: call @sub_4039d0 with return %00037dc6

.address 0x40AEF6
00037dc6: 
.address 0x40AEF6
00037dcc: goto %00037dc8

.address 0x40ACE1
000381cc: 
.address 0x40ACE1
000381d1: RDX := low:64[RAX + 1]
.address 0x40ACE5
000381d8: mem := mem with [RDI + 0x28, el]:u64 <- RDX
.address 0x40ACE9
000381df: mem := mem with [RAX] <- 0xA
0004498a: goto %00037dc8

.address 0x40ACEC
00037dc8: 
.address 0x40ACEC
00037dd9: #7744 := mem[0x6211F8, el]:u64
.address 0x40ACEC
00037ddc: mem := mem with [0x6211F8, el]:u64 <- mem[0x6211F8, el]:u64 + 1
.address 0x40ACEC
00037ddf: CF := mem[0x6211F8, el]:u64 < #7744
.address 0x40ACEC
00037de2: OF := ~high:1[#7744] & (high:1[#7744] | high:1[mem[0x6211F8, el]:u64]) & ~(
high:1[#7744] & high:1[mem[0x6211F8, el]:u64])
.address 0x40ACEC
00037de5: AF := 0x10 = (0x10 & (mem[0x6211F8, el]:u64 ^ #7744 ^ 1))
.address 0x40ACEC
00037de8: PF := ~low:1[let $1 = mem[0x6211F8, el]:u64 >> 4 ^ mem[0x6211F8, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40ACEC
00037deb: SF := high:1[mem[0x6211F8, el]:u64]
.address 0x40ACEC
00037dee: ZF := 0 = mem[0x6211F8, el]:u64
0004498b: goto %00037df0

.address 0x40ACF4
00037df0: 
.address 0x40ACF4
00037dfb: #7747 := mem[0x6213B0, el]:u64
.address 0x40ACF4
00037dfe: CF := mem[0x6213B0, el]:u64 < 0
.address 0x40ACF4
00037e01: OF := high:1[mem[0x6213B0, el]:u64 & (mem[0x6213B0, el]:u64 ^ #7747)]
.address 0x40ACF4
00037e04: AF := 0x10 = (0x10 & (#7747 ^ mem[0x6213B0, el]:u64))
.address 0x40ACF4
00037e07: PF := ~low:1[let $1 = #7747 >> 4 ^ #7747 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40ACF4
00037e0a: SF := high:1[#7747]
.address 0x40ACF4
00037e0d: ZF := 0 = #7747
.address 0x40ACFC
00037e16: when ZF call @sub_40a911 with noreturn
0004498c: goto %00037e1c

.address 0x40AD02
00037e1c: 
.address 0x40AD02
00037e23: RSP := RSP - 8
.address 0x40AD02
00037e26: mem := mem with [RSP, el]:u64 <- 0x40AD07
.address 0x40AD02
00037e29: call @sub_409420 with return %00037e2b

.address 0x40AD07
00037e2b: 
.address 0x40AD07
00037e30: call @sub_40a911 with noreturn

.address 0x40AA7C
000382b1: 
.address 0x40AA7C
000382b6: RBX := low:64[RAX + 0x13]
.address 0x40AA80
000382bd: RAX := pad:64[mem[0x6212F0, el]:u32]
.address 0x40AA86
000382ca: #7784 := low:32[RAX] - 2
.address 0x40AA86
000382cd: CF := low:32[RAX] < 2
.address 0x40AA86
000382d0: OF := high:1[(low:32[RAX] ^ 2) & (low:32[RAX] ^ #7784)]
.address 0x40AA86
000382d3: AF := 0x10 = (0x10 & (#7784 ^ low:32[RAX] ^ 2))
.address 0x40AA86
000382d6: PF := ~low:1[let $1 = #7784 >> 4 ^ #7784 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AA86
000382d9: SF := high:1[#7784]
.address 0x40AA86
000382dc: ZF := 0 = #7784
.address 0x40AA89
000382e5: when ZF goto %00037eee
0004498d: goto %000382eb

.address 0x40AA8F
000382eb: 
.address 0x40AA8F
000382f6: #7786 := mem[RBP + 0x13] - 0x2E
.address 0x40AA8F
000382f9: CF := mem[RBP + 0x13] < 0x2E
.address 0x40AA8F
000382fc: OF := high:1[(mem[RBP + 0x13] ^ 0x2E) & (mem[RBP + 0x13] ^ #7786)]
.address 0x40AA8F
000382ff: AF := 0x10 = (0x10 & (#7786 ^ mem[RBP + 0x13] ^ 0x2E))
.address 0x40AA8F
00038302: PF := ~low:1[let $1 = #7786 >> 4 ^ #7786 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AA8F
00038305: SF := high:1[#7786]
.address 0x40AA8F
00038308: ZF := 0 = #7786
.address 0x40AA93
00038311: when ZF goto %00037e35
0004498e: goto %00038317

.address 0x40AD10
00037e35: 
.address 0x40AD10
00037e40: #7749 := low:32[RAX]
.address 0x40AD10
00037e43: OF := 0
.address 0x40AD10
00037e46: CF := 0
.address 0x40AD10
00037e49: AF := unknown[bits]:u1
.address 0x40AD10
00037e4c: PF := ~low:1[let $1 = #7749 >> 4 ^ #7749 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AD10
00037e4f: SF := high:1[#7749]
.address 0x40AD10
00037e52: ZF := 0 = #7749
.address 0x40AD12
00037e5c: when ZF goto %00037e56
0004498f: goto %00037e7a

.address 0x40AD18
00037e7a: 
.address 0x40AD18
00037e85: RAX := 0
.address 0x40AD18
00037e88: AF := unknown[bits]:u1
.address 0x40AD18
00037e8b: ZF := 1
.address 0x40AD18
00037e8e: PF := 1
.address 0x40AD18
00037e91: OF := 0
.address 0x40AD18
00037e94: CF := 0
.address 0x40AD18
00037e97: SF := 0
.address 0x40AD1A
00037ea4: #7751 := mem[RBP + 0x14] - 0x2E
.address 0x40AD1A
00037ea7: CF := mem[RBP + 0x14] < 0x2E
.address 0x40AD1A
00037eaa: OF := high:1[(mem[RBP + 0x14] ^ 0x2E) & (mem[RBP + 0x14] ^ #7751)]
.address 0x40AD1A
00037ead: AF := 0x10 = (0x10 & (#7751 ^ mem[RBP + 0x14] ^ 0x2E))
.address 0x40AD1A
00037eb0: PF := ~low:1[let $1 = #7751 >> 4 ^ #7751 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AD1A
00037eb3: SF := high:1[#7751]
.address 0x40AD1A
00037eb6: ZF := 0 = #7751
.address 0x40AD1E
00037ebd: RAX := extract:63:8[RAX].pad:8[ZF]
.address 0x40AD21
00037eca: #7753 := mem[RBP + RAX + 0x14]
.address 0x40AD21
00037ecd: CF := mem[RBP + RAX + 0x14] < 0
.address 0x40AD21
00037ed0: OF := high:1[mem[RBP + RAX + 0x14] & (mem[RBP + RAX + 0x14] ^ #7753)]
.address 0x40AD21
00037ed3: AF := 0x10 = (0x10 & (#7753 ^ mem[RBP + RAX + 0x14]))
.address 0x40AD21
00037ed6: PF := ~low:1[let $1 = #7753 >> 4 ^ #7753 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AD21
00037ed9: SF := high:1[#7753]
.address 0x40AD21
00037edc: ZF := 0 = #7753
.address 0x40AD26
00037ee5: when ZF goto %00037e56
00044990: goto %00037eeb

.address 0x40AD2C
00037eeb: 
00044991: goto %00037eee

.address 0x40AA99
00038317: 
.address 0x40AA99
00038322: #7788 := low:32[RAX]
.address 0x40AA99
00038325: OF := 0
.address 0x40AA99
00038328: CF := 0
.address 0x40AA99
0003832b: AF := unknown[bits]:u1
.address 0x40AA99
0003832e: PF := ~low:1[let $1 = #7788 >> 4 ^ #7788 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AA99
00038331: SF := high:1[#7788]
.address 0x40AA99
00038334: ZF := 0 = #7788
.address 0x40AA9B
0003833d: when ~ZF goto %00037eee
00044992: goto %00038343

.address 0x40AAA1
00038343: 
.address 0x40AAA1
00038348: R15 := mem[0x6212E0, el]:u64
.address 0x40AAA8
00038355: #7790 := R15
.address 0x40AAA8
00038358: OF := 0
.address 0x40AAA8
0003835b: CF := 0
.address 0x40AAA8
0003835e: AF := unknown[bits]:u1
.address 0x40AAA8
00038361: PF := ~low:1[let $1 = #7790 >> 4 ^ #7790 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AAA8
00038364: SF := high:1[#7790]
.address 0x40AAA8
00038367: ZF := 0 = #7790
.address 0x40AAAB
00038371: when ~ZF goto %0003836b
00044993: goto %000383fc

.address 0x40AAC5
0003836b: 
.address 0x40AAC5
0003837b: RDI := mem[R15, el]:u64
.address 0x40AAC8
00038382: RDX := 4
.address 0x40AACD
00038389: RSI := RBX
.address 0x40AAD0
00038392: RSP := RSP - 8
.address 0x40AAD0
00038395: mem := mem with [RSP, el]:u64 <- 0x40AAD5
.address 0x40AAD0
00038398: call @sub_403a50 with return %0003839a

.address 0x40AAD5
0003839a: 
.address 0x40AAD5
000383a5: #7792 := low:32[RAX]
.address 0x40AAD5
000383a8: OF := 0
.address 0x40AAD5
000383ab: CF := 0
.address 0x40AAD5
000383ae: AF := unknown[bits]:u1
.address 0x40AAD5
000383b1: PF := ~low:1[let $1 = #7792 >> 4 ^ #7792 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AAD5
000383b4: SF := high:1[#7792]
.address 0x40AAD5
000383b7: ZF := 0 = #7792
.address 0x40AAD7
000383c1: when ~ZF goto %000383bb
00044994: goto %000383f9

.address 0x40AAD9
000383f9: 
00044995: goto %00037e56

.address 0x40AAB8
000383bb: 
.address 0x40AAB8
000383cb: R15 := mem[R15 + 8, el]:u64
.address 0x40AABC
000383d8: #7794 := R15
.address 0x40AABC
000383db: OF := 0
.address 0x40AABC
000383de: CF := 0
.address 0x40AABC
000383e1: AF := unknown[bits]:u1
.address 0x40AABC
000383e4: PF := ~low:1[let $1 = #7794 >> 4 ^ #7794 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AABC
000383e7: SF := high:1[#7794]
.address 0x40AABC
000383ea: ZF := 0 = #7794
.address 0x40AABF
000383f3: when ZF goto %00037eee
00044996: goto %0003836b

.address 0x40AAAD
000383fc: 
.address 0x40AAAD
00038401: goto %00037eee

.address 0x40AD30
00037eee: 
.address 0x40AD30
00037ef3: R15 := mem[0x6212E8, el]:u64
.address 0x40AD37
00037f00: #7755 := R15
.address 0x40AD37
00037f03: OF := 0
.address 0x40AD37
00037f06: CF := 0
.address 0x40AD37
00037f09: AF := unknown[bits]:u1
.address 0x40AD37
00037f0c: PF := ~low:1[let $1 = #7755 >> 4 ^ #7755 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AD37
00037f0f: SF := high:1[#7755]
.address 0x40AD37
00037f12: ZF := 0 = #7755
.address 0x40AD3A
00037f1c: when ~ZF goto %00037f16
00044997: goto %00038182

.address 0x40AD49
00037f16: 
.address 0x40AD49
00037f26: RDI := mem[R15, el]:u64
.address 0x40AD4C
00037f2d: RDX := 4
.address 0x40AD51
00037f34: RSI := RBX
.address 0x40AD54
00037f3d: RSP := RSP - 8
.address 0x40AD54
00037f40: mem := mem with [RSP, el]:u64 <- 0x40AD59
.address 0x40AD54
00037f43: call @sub_403a50 with return %00037f45

.address 0x40AD59
00037f45: 
.address 0x40AD59
00037f50: #7757 := low:32[RAX]
.address 0x40AD59
00037f53: OF := 0
.address 0x40AD59
00037f56: CF := 0
.address 0x40AD59
00037f59: AF := unknown[bits]:u1
.address 0x40AD59
00037f5c: PF := ~low:1[let $1 = #7757 >> 4 ^ #7757 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AD59
00037f5f: SF := high:1[#7757]
.address 0x40AD59
00037f62: ZF := 0 = #7757
.address 0x40AD5B
00037f6c: when ~ZF goto %00037f66
00044998: goto %00038178

.address 0x40AD5D
00038178: 
.address 0x40AD5D
0003817d: goto %00037e56

.address 0x40AD40
00037f66: 
.address 0x40AD40
00037f76: R15 := mem[R15 + 8, el]:u64
.address 0x40AD44
00037f83: #7759 := R15
.address 0x40AD44
00037f86: OF := 0
.address 0x40AD44
00037f89: CF := 0
.address 0x40AD44
00037f8c: AF := unknown[bits]:u1
.address 0x40AD44
00037f8f: PF := ~low:1[let $1 = #7759 >> 4 ^ #7759 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AD44
00037f92: SF := high:1[#7759]
.address 0x40AD44
00037f95: ZF := 0 = #7759
.address 0x40AD47
00037f9f: when ZF goto %00037f99
00044999: goto %00037f16

.address 0x40AD3C
00038182: 
.address 0x40AD3C
00038187: goto %00037f99

.address 0x40AD68
00037f99: 
.address 0x40AD68
00037fa9: RAX := pad:64[pad:32[mem[RBP + 0x12]]]
.address 0x40AD6C
00037fb6: RSI := 0
.address 0x40AD6C
00037fb9: AF := unknown[bits]:u1
.address 0x40AD6C
00037fbc: ZF := 1
.address 0x40AD6C
00037fbf: PF := 1
.address 0x40AD6C
00037fc2: OF := 0
.address 0x40AD6C
00037fc5: CF := 0
.address 0x40AD6C
00037fc8: SF := 0
.address 0x40AD6E
00037fd6: #7761 := low:32[RAX]
.address 0x40AD6E
00037fd9: RAX := pad:64[low:32[RAX] - 1]
.address 0x40AD6E
00037fdc: CF := #7761 < 1
.address 0x40AD6E
00037fdf: OF := high:1[(#7761 ^ 1) & (#7761 ^ low:32[RAX])]
.address 0x40AD6E
00037fe2: AF := 0x10 = (0x10 & (low:32[RAX] ^ #7761 ^ 1))
.address 0x40AD6E
00037fe5: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AD6E
00037fe8: SF := high:1[low:32[RAX]]
.address 0x40AD6E
00037feb: ZF := 0 = low:32[RAX]
.address 0x40AD71
00037ff8: #7764 := low:8[RAX] - 0xD
.address 0x40AD71
00037ffb: CF := low:8[RAX] < 0xD
.address 0x40AD71
00037ffe: OF := high:1[(low:8[RAX] ^ 0xD) & (low:8[RAX] ^ #7764)]
.address 0x40AD71
00038001: AF := 0x10 = (0x10 & (#7764 ^ low:8[RAX] ^ 0xD))
.address 0x40AD71
00038004: PF := ~low:1[let $1 = #7764 >> 4 ^ #7764 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AD71
00038007: SF := high:1[#7764]
.address 0x40AD71
0003800a: ZF := 0 = #7764
.address 0x40AD73
00038014: when ~(CF | ZF) goto %0003800e
0004499a: goto %00038163

.address 0x40AD75
00038163: 
.address 0x40AD75
00038168: RCX := 0x416A00
.address 0x40AD7C
0003816f: RAX := pad:64[pad:32[low:8[RAX]]]
.address 0x40AD7F
00038176: RSI := pad:64[mem[RCX + (RAX << 2), el]:u32]
0004499b: goto %0003800e

.address 0x40AD82
0003800e: 
.address 0x40AD82
00038024: RDX := 0
.address 0x40AD82
00038027: AF := unknown[bits]:u1
.address 0x40AD82
0003802a: ZF := 1
.address 0x40AD82
0003802d: PF := 1
.address 0x40AD82
00038030: OF := 0
.address 0x40AD82
00038033: CF := 0
.address 0x40AD82
00038036: SF := 0
.address 0x40AD84
0003803d: RCX := R14
.address 0x40AD87
00038044: RDI := RBX
.address 0x40AD8A
0003804d: RSP := RSP - 8
.address 0x40AD8A
00038050: mem := mem with [RSP, el]:u64 <- 0x40AD8F
.address 0x40AD8A
00038053: call @sub_4099e0 with return %00038055

.address 0x40AD8F
00038055: 
.address 0x40AD8F
00038062: #7766 := mem[RSP, el]:u64
.address 0x40AD8F
00038065: #7767 := RAX
.address 0x40AD8F
00038068: mem := mem with [RSP, el]:u64 <- mem[RSP, el]:u64 + #7767
.address 0x40AD8F
0003806b: CF := mem[RSP, el]:u64 < #7766
.address 0x40AD8F
0003806e: OF := high:1[#7766] = high:1[#7767] & (high:1[#7766] | high:1[mem[RSP, el]:u64]) & ~(
high:1[#7766] & high:1[mem[RSP, el]:u64])
.address 0x40AD8F
00038071: AF := 0x10 = (0x10 & (mem[RSP, el]:u64 ^ #7766 ^ #7767))
.address 0x40AD8F
00038074: PF := ~low:1[let $1 = mem[RSP, el]:u64 >> 4 ^ mem[RSP, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AD8F
00038077: SF := high:1[mem[RSP, el]:u64]
.address 0x40AD8F
0003807a: ZF := 0 = mem[RSP, el]:u64
.address 0x40AD93
00038087: #7769 := mem[0x621338, el]:u32 - 1
.address 0x40AD93
0003808a: CF := mem[0x621338, el]:u32 < 1
.address 0x40AD93
0003808d: OF := high:1[(mem[0x621338, el]:u32 ^ 1) & (mem[0x621338, el]:u32 ^ #7769)]
.address 0x40AD93
00038090: AF := 0x10 = (0x10 & (#7769 ^ mem[0x621338, el]:u32 ^ 1))
.address 0x40AD93
00038093: PF := ~low:1[let $1 = #7769 >> 4 ^ #7769 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AD93
00038096: SF := high:1[#7769]
.address 0x40AD93
00038099: ZF := 0 = #7769
.address 0x40AD9A
000380a2: when ~ZF goto %00037e56
0004499c: goto %000380a8

.address 0x40ADA0
000380a8: 
.address 0x40ADA0
000380b3: #7771 := mem[0x621330, el]:u32 - 0xFFFFFFFF
.address 0x40ADA0
000380b6: CF := mem[0x621330, el]:u32 < 0xFFFFFFFF
.address 0x40ADA0
000380b9: OF := high:1[(mem[0x621330, el]:u32 ^ 0xFFFFFFFF) & (mem[0x621330, el]:u32 ^ #7771)]
.address 0x40ADA0
000380bc: AF := 0x10 = (0x10 & (#7771 ^ mem[0x621330, el]:u32 ^ 0xFFFFFFFF))
.address 0x40ADA0
000380bf: PF := ~low:1[let $1 = #7771 >> 4 ^ #7771 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40ADA0
000380c2: SF := high:1[#7771]
.address 0x40ADA0
000380c5: ZF := 0 = #7771
.address 0x40ADA7
000380ce: when ~ZF goto %00037e56
0004499d: goto %000380d4

.address 0x40ADAD
000380d4: 
.address 0x40ADAD
000380df: #7773 := mem[0x62132C]
.address 0x40ADAD
000380e2: CF := mem[0x62132C] < 0
.address 0x40ADAD
000380e5: OF := high:1[mem[0x62132C] & (mem[0x62132C] ^ #7773)]
.address 0x40ADAD
000380e8: AF := 0x10 = (0x10 & (#7773 ^ mem[0x62132C]))
.address 0x40ADAD
000380eb: PF := ~low:1[let $1 = #7773 >> 4 ^ #7773 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40ADAD
000380ee: SF := high:1[#7773]
.address 0x40ADAD
000380f1: ZF := 0 = #7773
.address 0x40ADB4
000380fa: when ~ZF goto %00037e56
0004499e: goto %00038100

.address 0x40ADBA
00038100: 
.address 0x40ADBA
0003810b: #7775 := mem[0x6212F6]
.address 0x40ADBA
0003810e: CF := mem[0x6212F6] < 0
.address 0x40ADBA
00038111: OF := high:1[mem[0x6212F6] & (mem[0x6212F6] ^ #7775)]
.address 0x40ADBA
00038114: AF := 0x10 = (0x10 & (#7775 ^ mem[0x6212F6]))
.address 0x40ADBA
00038117: PF := ~low:1[let $1 = #7775 >> 4 ^ #7775 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40ADBA
0003811a: SF := high:1[#7775]
.address 0x40ADBA
0003811d: ZF := 0 = #7775
.address 0x40ADC1
00038126: when ~ZF goto %00037e56
0004499f: goto %0003812c

.address 0x40ADC7
0003812c: 
.address 0x40ADC7
00038133: RSP := RSP - 8
.address 0x40ADC7
00038136: mem := mem with [RSP, el]:u64 <- 0x40ADCC
.address 0x40ADC7
00038139: call @sub_4062f0 with return %0003813b

.address 0x40ADCC
0003813b: 
.address 0x40ADCC
00038142: RSP := RSP - 8
.address 0x40ADCC
00038145: mem := mem with [RSP, el]:u64 <- 0x40ADD1
.address 0x40ADCC
00038148: call @sub_409420 with return %0003814a

.address 0x40ADD1
0003814a: 
.address 0x40ADD1
00038151: RSP := RSP - 8
.address 0x40ADD1
00038154: mem := mem with [RSP, el]:u64 <- 0x40ADD6
.address 0x40ADD1
00038157: call @sub_4060e0 with return %00038159

.address 0x40ADD6
00038159: 
.address 0x40ADD6
0003815e: goto %00037e56

.address 0x40AAE0
00037e56: 
.address 0x40AAE0
00037e68: RSP := RSP - 8
.address 0x40AAE0
00037e6b: mem := mem with [RSP, el]:u64 <- 0x40AAE5
.address 0x40AAE0
00037e6e: call @sub_407360 with return %00037e70

.address 0x40AAE5
00037e70: 
.address 0x40AAE5
00037e75: goto %00037975


.address 0x40AB59
00044117: sub sub_40ab59()
.address 0x40AB59
00037875: 
.address 0x40AB59
00037881: #7709 := RSP
.address 0x40AB59
00037884: RSP := RSP - 8
.address 0x40AB59
00037887: CF := #7709 < 8
.address 0x40AB59
0003788a: OF := high:1[(#7709 ^ 8) & (#7709 ^ RSP)]
.address 0x40AB59
0003788d: AF := 0x10 = (0x10 & (RSP ^ #7709 ^ 8))
.address 0x40AB59
00037890: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40AB59
00037893: SF := high:1[RSP]
.address 0x40AB59
00037896: ZF := 0 = RSP
.address 0x40AB5D
0003789d: R8 := 1
.address 0x40AB63
000378a6: #7712 := RBP
.address 0x40AB63
000378a9: RSP := RSP - 8
.address 0x40AB63
000378ac: mem := mem with [RSP, el]:u64 <- #7712
.address 0x40AB64
000378b9: RCX := 0
.address 0x40AB64
000378bc: AF := unknown[bits]:u1
.address 0x40AB64
000378bf: ZF := 1
.address 0x40AB64
000378c2: PF := 1
.address 0x40AB64
000378c5: OF := 0
.address 0x40AB64
000378c8: CF := 0
.address 0x40AB64
000378cb: SF := 0
.address 0x40AB66
000378d2: RDX := 0xFFFFFFFF
.address 0x40AB6B
000378d9: RDI := RBX
.address 0x40AB6E
000378e2: RSP := RSP - 8
.address 0x40AB6E
000378e5: mem := mem with [RSP, el]:u64 <- 0x40AB73
.address 0x40AB6E
000378e8: call @sub_407910 with return %000378ea

.address 0x40AB73
000378ea: 
.address 0x40AB73
000378ef: RDI := RBP
.address 0x40AB76
000378f8: RSP := RSP - 8
.address 0x40AB76
000378fb: mem := mem with [RSP, el]:u64 <- 0x40AB7B
.address 0x40AB76
000378fe: call @sub_403e70 with return %00037900

.address 0x40AB7B
00037900: 
.address 0x40AB7B
00037905: RCX := mem[0x620288, el]:u64
.address 0x40AB82
0003790c: RDI := 0x417EBF
.address 0x40AB89
00037913: RSI := 1
.address 0x40AB8E
0003791a: RDX := 2
.address 0x40AB93
00037923: RSP := RSP - 8
.address 0x40AB93
00037926: mem := mem with [RSP, el]:u64 <- 0x40AB98
.address 0x40AB93
00037929: call @sub_403c80 with return %0003792b

.address 0x40AB98
0003792b: 
.address 0x40AB98
00037931: RCX := mem[RSP, el]:u64
.address 0x40AB98
00037934: RSP := RSP + 8
.address 0x40AB99
00037942: #7713 := mem[0x6211F8, el]:u64
.address 0x40AB99
00037945: mem := mem with [0x6211F8, el]:u64 <- mem[0x6211F8, el]:u64 + 2
.address 0x40AB99
00037948: CF := mem[0x6211F8, el]:u64 < #7713
.address 0x40AB99
0003794b: OF := ~high:1[#7713] & (high:1[#7713] | high:1[mem[0x6211F8, el]:u64]) & ~(
high:1[#7713] & high:1[mem[0x6211F8, el]:u64])
.address 0x40AB99
0003794e: AF := 0x10 = (0x10 & (mem[0x6211F8, el]:u64 ^ #7713 ^ 2))
.address 0x40AB99
00037951: PF := ~low:1[let $1 = mem[0x6211F8, el]:u64 >> 4 ^ mem[0x6211F8, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AB99
00037954: SF := high:1[mem[0x6211F8, el]:u64]
.address 0x40AB99
00037957: ZF := 0 = mem[0x6211F8, el]:u64
.address 0x40ABA1
0003795f: RSI := mem[RSP, el]:u64
.address 0x40ABA1
00037962: RSP := RSP + 8
.address 0x40ABA2
0003796a: call @sub_40aa56 with noreturn


.address 0x40AF0F
00044118: sub sub_40af0f()
.address 0x40AF0F
00034488: 
.address 0x40AF0F
0003448f: RSP := RSP - 8
.address 0x40AF0F
00034492: mem := mem with [RSP, el]:u64 <- 0x40AF14
.address 0x40AF0F
00034495: call @sub_4146d0 with return %00034497

.address 0x40AF14
00034497: 
.address 0x40AF20
000344a2: RAX := mem[RSI + 0x80, el]:u64
.address 0x40AF27
000344af: #7243 := mem[RDI + 0x80, el]:u64 - RAX
.address 0x40AF27
000344b2: CF := mem[RDI + 0x80, el]:u64 < RAX
.address 0x40AF27
000344b5: OF := high:1[(mem[RDI + 0x80, el]:u64 ^ RAX) & (mem[RDI + 0x80, el]:u64 ^ #7243)]
.address 0x40AF27
000344b8: AF := 0x10 = (0x10 & (#7243 ^ mem[RDI + 0x80, el]:u64 ^ RAX))
.address 0x40AF27
000344bb: PF := ~low:1[let $1 = #7243 >> 4 ^ #7243 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AF27
000344be: SF := high:1[#7243]
.address 0x40AF27
000344c1: ZF := 0 = #7243
.address 0x40AF2E
000344cb: when ~(ZF | (SF | OF) & ~(SF & OF)) goto %000344c5
000449a0: goto %0003739c

.address 0x40AF60
000344c5: 
.address 0x40AF60
000344d5: RAX := 0xFFFFFFFF
.address 0x40AF65
000344de: #7245 := mem[RSP, el]:u64
.address 0x40AF65
000344e1: RSP := RSP + 8
.address 0x40AF65
000344e5: call #7245 with noreturn

.address 0x40AF30
0003739c: 
.address 0x40AF30
000373a4: when (SF | OF) & ~(SF & OF) goto %0003739e
000449a1: goto %000373c3

.address 0x40AF50
0003739e: 
.address 0x40AF50
000373ae: RAX := 1
000449a2: goto %000373b0

.address 0x40AF32
000373c3: 
.address 0x40AF32
000373c8: RAX := mem[RSI + 0x88, el]:u64
.address 0x40AF39
000373d7: #7674 := low:32[RAX]
.address 0x40AF39
000373da: #7675 := mem[RDI + 0x88, el]:u32
.address 0x40AF39
000373dd: RAX := pad:64[low:32[RAX] - mem[RDI + 0x88, el]:u32]
.address 0x40AF39
000373e0: CF := #7674 < #7675
.address 0x40AF39
000373e3: OF := high:1[(#7674 ^ #7675) & (#7674 ^ low:32[RAX])]
.address 0x40AF39
000373e6: AF := 0x10 = (0x10 & (low:32[RAX] ^ #7674 ^ #7675))
.address 0x40AF39
000373e9: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40AF39
000373ec: SF := high:1[low:32[RAX]]
.address 0x40AF39
000373ef: ZF := 0 = low:32[RAX]
.address 0x40AF3F
000373f8: when ~ZF goto %000373b0
000449a3: goto %000373fe

.address 0x40AF55
000373b0: 
.address 0x40AF55
000373b7: #7673 := mem[RSP, el]:u64
.address 0x40AF55
000373ba: RSP := RSP + 8
.address 0x40AF55
000373be: call #7673 with noreturn

.address 0x40AF41
000373fe: 
.address 0x40AF41
00037403: RSI := mem[RSI, el]:u64
.address 0x40AF44
0003740a: RDI := mem[RDI, el]:u64
.address 0x40AF47
00037411: call @sub_406490 with noreturn


.address 0x40B5F0
0004411d: sub sub_40b5f0()
.address 0x40B5F0
00035243: 
.address 0x40B5F0
0003524a: #7379 := R12
.address 0x40B5F0
0003524d: RSP := RSP - 8
.address 0x40B5F0
00035250: mem := mem with [RSP, el]:u64 <- #7379
.address 0x40B5F2
00035259: #7380 := RBP
.address 0x40B5F2
0003525c: RSP := RSP - 8
.address 0x40B5F2
0003525f: mem := mem with [RSP, el]:u64 <- #7380
.address 0x40B5F3
00035266: RBP := RDI
.address 0x40B5F6
0003526f: #7381 := RBX
.address 0x40B5F6
00035272: RSP := RSP - 8
.address 0x40B5F6
00035275: mem := mem with [RSP, el]:u64 <- #7381
.address 0x40B5F7
0003527c: RDI := mem[RDI, el]:u64
.address 0x40B5FA
00035283: R12 := RSI
.address 0x40B5FD
0003528a: RSI := 0x2E
.address 0x40B602
00035293: RSP := RSP - 8
.address 0x40B602
00035296: mem := mem with [RSP, el]:u64 <- 0x40B607
.address 0x40B602
00035299: call @sub_4039e0 with return %0003529b

.address 0x40B607
0003529b: 
.address 0x40B607
000352a0: RDI := mem[R12, el]:u64
.address 0x40B60B
000352a7: RSI := 0x2E
.address 0x40B610
000352ae: RBX := RAX
.address 0x40B613
000352b7: RSP := RSP - 8
.address 0x40B613
000352ba: mem := mem with [RSP, el]:u64 <- 0x40B618
.address 0x40B613
000352bd: call @sub_4039e0 with return %000352bf

.address 0x40B618
000352bf: 
.address 0x40B618
000352c4: RDX := 0x417C4A
.address 0x40B61F
000352d1: #7382 := RAX
.address 0x40B61F
000352d4: OF := 0
.address 0x40B61F
000352d7: CF := 0
.address 0x40B61F
000352da: AF := unknown[bits]:u1
.address 0x40B61F
000352dd: PF := ~low:1[let $1 = #7382 >> 4 ^ #7382 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40B61F
000352e0: SF := high:1[#7382]
.address 0x40B61F
000352e3: ZF := 0 = #7382
.address 0x40B622
000352ea: RAX := if ZF then RDX else RAX
.address 0x40B626
000352f7: #7384 := RBX
.address 0x40B626
000352fa: OF := 0
.address 0x40B626
000352fd: CF := 0
.address 0x40B626
00035300: AF := unknown[bits]:u1
.address 0x40B626
00035303: PF := ~low:1[let $1 = #7384 >> 4 ^ #7384 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40B626
00035306: SF := high:1[#7384]
.address 0x40B626
00035309: ZF := 0 = #7384
.address 0x40B629
00035310: RBX := if ZF then RDX else RBX
.address 0x40B62D
00035317: RSI := RAX
.address 0x40B630
0003531e: RDI := RBX
.address 0x40B633
00035327: RSP := RSP - 8
.address 0x40B633
0003532a: mem := mem with [RSP, el]:u64 <- 0x40B638
.address 0x40B633
0003532d: call @sub_406490 with return %0003532f

.address 0x40B638
0003532f: 
.address 0x40B638
0003533a: #7386 := low:32[RAX]
.address 0x40B638
0003533d: OF := 0
.address 0x40B638
00035340: CF := 0
.address 0x40B638
00035343: AF := unknown[bits]:u1
.address 0x40B638
00035346: PF := ~low:1[let $1 = #7386 >> 4 ^ #7386 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40B638
00035349: SF := high:1[#7386]
.address 0x40B638
0003534c: ZF := 0 = #7386
.address 0x40B63A
00035356: when ~ZF goto %00035350
000449a4: goto %0003687f

.address 0x40B650
00035350: 
.address 0x40B650
00035361: RBX := mem[RSP, el]:u64
.address 0x40B650
00035364: RSP := RSP + 8
.address 0x40B651
0003536c: RBP := mem[RSP, el]:u64
.address 0x40B651
0003536f: RSP := RSP + 8
.address 0x40B652
00035377: R12 := mem[RSP, el]:u64
.address 0x40B652
0003537a: RSP := RSP + 8
.address 0x40B654
00035383: #7388 := mem[RSP, el]:u64
.address 0x40B654
00035386: RSP := RSP + 8
.address 0x40B654
0003538a: call #7388 with noreturn

.address 0x40B63C
0003687f: 
.address 0x40B63C
00036885: RBX := mem[RSP, el]:u64
.address 0x40B63C
00036888: RSP := RSP + 8
.address 0x40B63D
0003688f: RSI := mem[R12, el]:u64
.address 0x40B641
00036896: RDI := mem[RBP, el]:u64
.address 0x40B645
0003689e: RBP := mem[RSP, el]:u64
.address 0x40B645
000368a1: RSP := RSP + 8
.address 0x40B646
000368a9: R12 := mem[RSP, el]:u64
.address 0x40B646
000368ac: RSP := RSP + 8
.address 0x40B648
000368b3: call @sub_406490 with noreturn


.address 0x40BB20
0004411f: sub sub_40bb20()
.address 0x40BB20
00010226: 
.address 0x40BB20
00010232: #2240 := R12
.address 0x40BB20
00010235: RSP := RSP - 8
.address 0x40BB20
00010238: mem := mem with [RSP, el]:u64 <- #2240
.address 0x40BB22
00010241: #2241 := RBP
.address 0x40BB22
00010244: RSP := RSP - 8
.address 0x40BB22
00010247: mem := mem with [RSP, el]:u64 <- #2241
.address 0x40BB23
0001024e: R12 := pad:64[low:32[RDI]]
.address 0x40BB26
00010257: #2242 := RBX
.address 0x40BB26
0001025a: RSP := RSP - 8
.address 0x40BB26
0001025d: mem := mem with [RSP, el]:u64 <- #2242
.address 0x40BB27
00010264: RDX := 5
.address 0x40BB2C
00010272: #2243 := RSP
.address 0x40BB2C
00010275: RSP := RSP - 0x80
.address 0x40BB2C
00010278: CF := RSP < #2243
.address 0x40BB2C
0001027b: OF := high:1[#2243] & (high:1[#2243] | high:1[RSP]) & ~(high:1[#2243] & high:1[RSP])
.address 0x40BB2C
0001027e: AF := 0x10 = (0x10 & (RSP ^ #2243 ^ 0xFFFFFFFFFFFFFF80))
.address 0x40BB2C
00010281: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40BB2C
00010284: SF := high:1[RSP]
.address 0x40BB2C
00010287: ZF := 0 = RSP
.address 0x40BB30
0001028e: RBX := mem[0x621400, el]:u64
.address 0x40BB37
00010295: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x40BB40
0001029c: mem := mem with [RSP + 0x78, el]:u64 <- RAX
.address 0x40BB45
000102a9: RAX := 0
.address 0x40BB45
000102ac: AF := unknown[bits]:u1
.address 0x40BB45
000102af: ZF := 1
.address 0x40BB45
000102b2: PF := 1
.address 0x40BB45
000102b5: OF := 0
.address 0x40BB45
000102b8: CF := 0
.address 0x40BB45
000102bb: SF := 0
.address 0x40BB47
000102c8: #2246 := low:32[RDI]
.address 0x40BB47
000102cb: OF := 0
.address 0x40BB47
000102ce: CF := 0
.address 0x40BB47
000102d1: AF := unknown[bits]:u1
.address 0x40BB47
000102d4: PF := ~low:1[let $1 = #2246 >> 4 ^ #2246 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40BB47
000102d7: SF := high:1[#2246]
.address 0x40BB47
000102da: ZF := 0 = #2246
.address 0x40BB49
000102e4: when ZF goto %000102de
000449a5: goto %000113d5

.address 0x40BB4B
000113d5: 
.address 0x40BB4B
000113da: RSI := 0x418228
.address 0x40BB52
000113e7: RDI := 0
.address 0x40BB52
000113ea: AF := unknown[bits]:u1
.address 0x40BB52
000113ed: ZF := 1
.address 0x40BB52
000113f0: PF := 1
.address 0x40BB52
000113f3: OF := 0
.address 0x40BB52
000113f6: CF := 0
.address 0x40BB52
000113f9: SF := 0
.address 0x40BB54
00011402: RSP := RSP - 8
.address 0x40BB54
00011405: mem := mem with [RSP, el]:u64 <- 0x40BB59
.address 0x40BB54
00011408: call @sub_403930 with return %0001140a

.address 0x40BB59
0001140a: 
.address 0x40BB59
0001140f: RDI := mem[0x6202C0, el]:u64
.address 0x40BB60
00011416: RDX := RAX
.address 0x40BB63
0001141d: RCX := RBX
.address 0x40BB66
00011424: RSI := 1
.address 0x40BB6B
00011431: RAX := 0
.address 0x40BB6B
00011434: AF := unknown[bits]:u1
.address 0x40BB6B
00011437: ZF := 1
.address 0x40BB6B
0001143a: PF := 1
.address 0x40BB6B
0001143d: OF := 0
.address 0x40BB6B
00011440: CF := 0
.address 0x40BB6B
00011443: SF := 0
.address 0x40BB6D
0001144c: RSP := RSP - 8
.address 0x40BB6D
0001144f: mem := mem with [RSP, el]:u64 <- 0x40BB72
.address 0x40BB6D
00011452: call @sub_403df0 with return %000110df

.address 0x40BB72
000110df: 
.address 0x40BB72
000110e9: RDI := pad:64[low:32[R12]]
.address 0x40BB75
000110f2: RSP := RSP - 8
.address 0x40BB75
000110f5: mem := mem with [RSP, el]:u64 <- 0x40BB7A
.address 0x40BB75
000110f8: call @sub_403dd0 with return %000102de

.address 0x40BB7A
000102de: 
.address 0x40BB7A
000102ee: RSI := 0x418250
.address 0x40BB81
000102fb: RDI := 0
.address 0x40BB81
000102fe: AF := unknown[bits]:u1
.address 0x40BB81
00010301: ZF := 1
.address 0x40BB81
00010304: PF := 1
.address 0x40BB81
00010307: OF := 0
.address 0x40BB81
0001030a: CF := 0
.address 0x40BB81
0001030d: SF := 0
.address 0x40BB83
00010314: RBP := 0x417D82
.address 0x40BB8A
0001031d: RSP := RSP - 8
.address 0x40BB8A
00010320: mem := mem with [RSP, el]:u64 <- 0x40BB8F
.address 0x40BB8A
00010323: call @sub_403930 with return %00010325

.address 0x40BB8F
00010325: 
.address 0x40BB8F
0001032a: RDX := RBX
.address 0x40BB92
00010331: RSI := RAX
.address 0x40BB95
00010338: RDI := 1
.address 0x40BB9A
00010345: RAX := 0
.address 0x40BB9A
00010348: AF := unknown[bits]:u1
.address 0x40BB9A
0001034b: ZF := 1
.address 0x40BB9A
0001034e: PF := 1
.address 0x40BB9A
00010351: OF := 0
.address 0x40BB9A
00010354: CF := 0
.address 0x40BB9A
00010357: SF := 0
.address 0x40BB9C
00010360: RSP := RSP - 8
.address 0x40BB9C
00010363: mem := mem with [RSP, el]:u64 <- 0x40BBA1
.address 0x40BB9C
00010366: call @sub_403cd0 with return %00010368

.address 0x40BBA1
00010368: 
.address 0x40BBA1
0001036d: RBX := mem[0x620288, el]:u64
.address 0x40BBA8
00010374: RSI := 0x418278
.address 0x40BBAF
0001037b: RDX := 5
.address 0x40BBB4
00010388: RDI := 0
.address 0x40BBB4
0001038b: AF := unknown[bits]:u1
.address 0x40BBB4
0001038e: ZF := 1
.address 0x40BBB4
00010391: PF := 1
.address 0x40BBB4
00010394: OF := 0
.address 0x40BBB4
00010397: CF := 0
.address 0x40BBB4
0001039a: SF := 0
.address 0x40BBB6
000103a3: RSP := RSP - 8
.address 0x40BBB6
000103a6: mem := mem with [RSP, el]:u64 <- 0x40BBBB
.address 0x40BBB6
000103a9: call @sub_403930 with return %000103ab

.address 0x40BBBB
000103ab: 
.address 0x40BBBB
000103b0: RSI := RBX
.address 0x40BBBE
000103b7: RDI := RAX
.address 0x40BBC1
000103c0: RSP := RSP - 8
.address 0x40BBC1
000103c3: mem := mem with [RSP, el]:u64 <- 0x40BBC6
.address 0x40BBC1
000103c6: call @sub_403af0 with return %000103c8

.address 0x40BBC6
000103c8: 
.address 0x40BBC6
000103cd: RBX := mem[0x620288, el]:u64
.address 0x40BBCD
000103d4: RSI := 0x418308
.address 0x40BBD4
000103db: RDX := 5
.address 0x40BBD9
000103e8: RDI := 0
.address 0x40BBD9
000103eb: AF := unknown[bits]:u1
.address 0x40BBD9
000103ee: ZF := 1
.address 0x40BBD9
000103f1: PF := 1
.address 0x40BBD9
000103f4: OF := 0
.address 0x40BBD9
000103f7: CF := 0
.address 0x40BBD9
000103fa: SF := 0
.address 0x40BBDB
00010403: RSP := RSP - 8
.address 0x40BBDB
00010406: mem := mem with [RSP, el]:u64 <- 0x40BBE0
.address 0x40BBDB
00010409: call @sub_403930 with return %0001040b

.address 0x40BBE0
0001040b: 
.address 0x40BBE0
00010410: RSI := RBX
.address 0x40BBE3
00010417: RDI := RAX
.address 0x40BBE6
00010420: RSP := RSP - 8
.address 0x40BBE6
00010423: mem := mem with [RSP, el]:u64 <- 0x40BBEB
.address 0x40BBE6
00010426: call @sub_403af0 with return %00010428

.address 0x40BBEB
00010428: 
.address 0x40BBEB
0001042d: RBX := mem[0x620288, el]:u64
.address 0x40BBF2
00010434: RSI := 0x418358
.address 0x40BBF9
0001043b: RDX := 5
.address 0x40BBFE
00010448: RDI := 0
.address 0x40BBFE
0001044b: AF := unknown[bits]:u1
.address 0x40BBFE
0001044e: ZF := 1
.address 0x40BBFE
00010451: PF := 1
.address 0x40BBFE
00010454: OF := 0
.address 0x40BBFE
00010457: CF := 0
.address 0x40BBFE
0001045a: SF := 0
.address 0x40BC00
00010463: RSP := RSP - 8
.address 0x40BC00
00010466: mem := mem with [RSP, el]:u64 <- 0x40BC05
.address 0x40BC00
00010469: call @sub_403930 with return %0001046b

.address 0x40BC05
0001046b: 
.address 0x40BC05
00010470: RSI := RBX
.address 0x40BC08
00010477: RDI := RAX
.address 0x40BC0B
00010480: RSP := RSP - 8
.address 0x40BC0B
00010483: mem := mem with [RSP, el]:u64 <- 0x40BC10
.address 0x40BC0B
00010486: call @sub_403af0 with return %00010488

.address 0x40BC10
00010488: 
.address 0x40BC10
0001048d: RBX := mem[0x620288, el]:u64
.address 0x40BC17
00010494: RSI := 0x418468
.address 0x40BC1E
0001049b: RDX := 5
.address 0x40BC23
000104a8: RDI := 0
.address 0x40BC23
000104ab: AF := unknown[bits]:u1
.address 0x40BC23
000104ae: ZF := 1
.address 0x40BC23
000104b1: PF := 1
.address 0x40BC23
000104b4: OF := 0
.address 0x40BC23
000104b7: CF := 0
.address 0x40BC23
000104ba: SF := 0
.address 0x40BC25
000104c3: RSP := RSP - 8
.address 0x40BC25
000104c6: mem := mem with [RSP, el]:u64 <- 0x40BC2A
.address 0x40BC25
000104c9: call @sub_403930 with return %000104cb

.address 0x40BC2A
000104cb: 
.address 0x40BC2A
000104d0: RSI := RBX
.address 0x40BC2D
000104d7: RDI := RAX
.address 0x40BC30
000104e0: RSP := RSP - 8
.address 0x40BC30
000104e3: mem := mem with [RSP, el]:u64 <- 0x40BC35
.address 0x40BC30
000104e6: call @sub_403af0 with return %000104e8

.address 0x40BC35
000104e8: 
.address 0x40BC35
000104ed: RBX := mem[0x620288, el]:u64
.address 0x40BC3C
000104f4: RSI := 0x4186B0
.address 0x40BC43
000104fb: RDX := 5
.address 0x40BC48
00010508: RDI := 0
.address 0x40BC48
0001050b: AF := unknown[bits]:u1
.address 0x40BC48
0001050e: ZF := 1
.address 0x40BC48
00010511: PF := 1
.address 0x40BC48
00010514: OF := 0
.address 0x40BC48
00010517: CF := 0
.address 0x40BC48
0001051a: SF := 0
.address 0x40BC4A
00010523: RSP := RSP - 8
.address 0x40BC4A
00010526: mem := mem with [RSP, el]:u64 <- 0x40BC4F
.address 0x40BC4A
00010529: call @sub_403930 with return %0001052b

.address 0x40BC4F
0001052b: 
.address 0x40BC4F
00010530: RSI := RBX
.address 0x40BC52
00010537: RDI := RAX
.address 0x40BC55
00010540: RSP := RSP - 8
.address 0x40BC55
00010543: mem := mem with [RSP, el]:u64 <- 0x40BC5A
.address 0x40BC55
00010546: call @sub_403af0 with return %00010548

.address 0x40BC5A
00010548: 
.address 0x40BC5A
0001054d: RBX := mem[0x620288, el]:u64
.address 0x40BC61
00010554: RSI := 0x418820
.address 0x40BC68
0001055b: RDX := 5
.address 0x40BC6D
00010568: RDI := 0
.address 0x40BC6D
0001056b: AF := unknown[bits]:u1
.address 0x40BC6D
0001056e: ZF := 1
.address 0x40BC6D
00010571: PF := 1
.address 0x40BC6D
00010574: OF := 0
.address 0x40BC6D
00010577: CF := 0
.address 0x40BC6D
0001057a: SF := 0
.address 0x40BC6F
00010583: RSP := RSP - 8
.address 0x40BC6F
00010586: mem := mem with [RSP, el]:u64 <- 0x40BC74
.address 0x40BC6F
00010589: call @sub_403930 with return %0001058b

.address 0x40BC74
0001058b: 
.address 0x40BC74
00010590: RSI := RBX
.address 0x40BC77
00010597: RDI := RAX
.address 0x40BC7A
000105a0: RSP := RSP - 8
.address 0x40BC7A
000105a3: mem := mem with [RSP, el]:u64 <- 0x40BC7F
.address 0x40BC7A
000105a6: call @sub_403af0 with return %000105a8

.address 0x40BC7F
000105a8: 
.address 0x40BC7F
000105ad: RBX := mem[0x620288, el]:u64
.address 0x40BC86
000105b4: RSI := 0x4189C8
.address 0x40BC8D
000105bb: RDX := 5
.address 0x40BC92
000105c8: RDI := 0
.address 0x40BC92
000105cb: AF := unknown[bits]:u1
.address 0x40BC92
000105ce: ZF := 1
.address 0x40BC92
000105d1: PF := 1
.address 0x40BC92
000105d4: OF := 0
.address 0x40BC92
000105d7: CF := 0
.address 0x40BC92
000105da: SF := 0
.address 0x40BC94
000105e3: RSP := RSP - 8
.address 0x40BC94
000105e6: mem := mem with [RSP, el]:u64 <- 0x40BC99
.address 0x40BC94
000105e9: call @sub_403930 with return %000105eb

.address 0x40BC99
000105eb: 
.address 0x40BC99
000105f0: RSI := RBX
.address 0x40BC9C
000105f7: RDI := RAX
.address 0x40BC9F
00010600: RSP := RSP - 8
.address 0x40BC9F
00010603: mem := mem with [RSP, el]:u64 <- 0x40BCA4
.address 0x40BC9F
00010606: call @sub_403af0 with return %00010608

.address 0x40BCA4
00010608: 
.address 0x40BCA4
0001060d: RBX := mem[0x620288, el]:u64
.address 0x40BCAB
00010614: RSI := 0x418A08
.address 0x40BCB2
0001061b: RDX := 5
.address 0x40BCB7
00010628: RDI := 0
.address 0x40BCB7
0001062b: AF := unknown[bits]:u1
.address 0x40BCB7
0001062e: ZF := 1
.address 0x40BCB7
00010631: PF := 1
.address 0x40BCB7
00010634: OF := 0
.address 0x40BCB7
00010637: CF := 0
.address 0x40BCB7
0001063a: SF := 0
.address 0x40BCB9
00010643: RSP := RSP - 8
.address 0x40BCB9
00010646: mem := mem with [RSP, el]:u64 <- 0x40BCBE
.address 0x40BCB9
00010649: call @sub_403930 with return %0001064b

.address 0x40BCBE
0001064b: 
.address 0x40BCBE
00010650: RSI := RBX
.address 0x40BCC1
00010657: RDI := RAX
.address 0x40BCC4
00010660: RSP := RSP - 8
.address 0x40BCC4
00010663: mem := mem with [RSP, el]:u64 <- 0x40BCC9
.address 0x40BCC4
00010666: call @sub_403af0 with return %00010668

.address 0x40BCC9
00010668: 
.address 0x40BCC9
0001066d: RBX := mem[0x620288, el]:u64
.address 0x40BCD0
00010674: RSI := 0x418B00
.address 0x40BCD7
0001067b: RDX := 5
.address 0x40BCDC
00010688: RDI := 0
.address 0x40BCDC
0001068b: AF := unknown[bits]:u1
.address 0x40BCDC
0001068e: ZF := 1
.address 0x40BCDC
00010691: PF := 1
.address 0x40BCDC
00010694: OF := 0
.address 0x40BCDC
00010697: CF := 0
.address 0x40BCDC
0001069a: SF := 0
.address 0x40BCDE
000106a3: RSP := RSP - 8
.address 0x40BCDE
000106a6: mem := mem with [RSP, el]:u64 <- 0x40BCE3
.address 0x40BCDE
000106a9: call @sub_403930 with return %000106ab

.address 0x40BCE3
000106ab: 
.address 0x40BCE3
000106b0: RSI := RBX
.address 0x40BCE6
000106b7: RDI := RAX
.address 0x40BCE9
000106c0: RSP := RSP - 8
.address 0x40BCE9
000106c3: mem := mem with [RSP, el]:u64 <- 0x40BCEE
.address 0x40BCE9
000106c6: call @sub_403af0 with return %000106c8

.address 0x40BCEE
000106c8: 
.address 0x40BCEE
000106cd: RBX := mem[0x620288, el]:u64
.address 0x40BCF5
000106d4: RSI := 0x418C10
.address 0x40BCFC
000106db: RDX := 5
.address 0x40BD01
000106e8: RDI := 0
.address 0x40BD01
000106eb: AF := unknown[bits]:u1
.address 0x40BD01
000106ee: ZF := 1
.address 0x40BD01
000106f1: PF := 1
.address 0x40BD01
000106f4: OF := 0
.address 0x40BD01
000106f7: CF := 0
.address 0x40BD01
000106fa: SF := 0
.address 0x40BD03
00010703: RSP := RSP - 8
.address 0x40BD03
00010706: mem := mem with [RSP, el]:u64 <- 0x40BD08
.address 0x40BD03
00010709: call @sub_403930 with return %0001070b

.address 0x40BD08
0001070b: 
.address 0x40BD08
00010710: RSI := RBX
.address 0x40BD0B
00010717: RDI := RAX
.address 0x40BD0E
00010720: RSP := RSP - 8
.address 0x40BD0E
00010723: mem := mem with [RSP, el]:u64 <- 0x40BD13
.address 0x40BD0E
00010726: call @sub_403af0 with return %00010728

.address 0x40BD13
00010728: 
.address 0x40BD13
0001072d: RBX := mem[0x620288, el]:u64
.address 0x40BD1A
00010734: RSI := 0x418DB8
.address 0x40BD21
0001073b: RDX := 5
.address 0x40BD26
00010748: RDI := 0
.address 0x40BD26
0001074b: AF := unknown[bits]:u1
.address 0x40BD26
0001074e: ZF := 1
.address 0x40BD26
00010751: PF := 1
.address 0x40BD26
00010754: OF := 0
.address 0x40BD26
00010757: CF := 0
.address 0x40BD26
0001075a: SF := 0
.address 0x40BD28
00010763: RSP := RSP - 8
.address 0x40BD28
00010766: mem := mem with [RSP, el]:u64 <- 0x40BD2D
.address 0x40BD28
00010769: call @sub_403930 with return %0001076b

.address 0x40BD2D
0001076b: 
.address 0x40BD2D
00010770: RSI := RBX
.address 0x40BD30
00010777: RDI := RAX
.address 0x40BD33
00010780: RSP := RSP - 8
.address 0x40BD33
00010783: mem := mem with [RSP, el]:u64 <- 0x40BD38
.address 0x40BD33
00010786: call @sub_403af0 with return %00010788

.address 0x40BD38
00010788: 
.address 0x40BD38
0001078d: RBX := mem[0x620288, el]:u64
.address 0x40BD3F
00010794: RSI := 0x418E50
.address 0x40BD46
0001079b: RDX := 5
.address 0x40BD4B
000107a8: RDI := 0
.address 0x40BD4B
000107ab: AF := unknown[bits]:u1
.address 0x40BD4B
000107ae: ZF := 1
.address 0x40BD4B
000107b1: PF := 1
.address 0x40BD4B
000107b4: OF := 0
.address 0x40BD4B
000107b7: CF := 0
.address 0x40BD4B
000107ba: SF := 0
.address 0x40BD4D
000107c3: RSP := RSP - 8
.address 0x40BD4D
000107c6: mem := mem with [RSP, el]:u64 <- 0x40BD52
.address 0x40BD4D
000107c9: call @sub_403930 with return %000107cb

.address 0x40BD52
000107cb: 
.address 0x40BD52
000107d0: RSI := RBX
.address 0x40BD55
000107d7: RDI := RAX
.address 0x40BD58
000107e0: RSP := RSP - 8
.address 0x40BD58
000107e3: mem := mem with [RSP, el]:u64 <- 0x40BD5D
.address 0x40BD58
000107e6: call @sub_403af0 with return %000107e8

.address 0x40BD5D
000107e8: 
.address 0x40BD5D
000107ed: RBX := mem[0x620288, el]:u64
.address 0x40BD64
000107f4: RSI := 0x419000
.address 0x40BD6B
000107fb: RDX := 5
.address 0x40BD70
00010808: RDI := 0
.address 0x40BD70
0001080b: AF := unknown[bits]:u1
.address 0x40BD70
0001080e: ZF := 1
.address 0x40BD70
00010811: PF := 1
.address 0x40BD70
00010814: OF := 0
.address 0x40BD70
00010817: CF := 0
.address 0x40BD70
0001081a: SF := 0
.address 0x40BD72
00010823: RSP := RSP - 8
.address 0x40BD72
00010826: mem := mem with [RSP, el]:u64 <- 0x40BD77
.address 0x40BD72
00010829: call @sub_403930 with return %0001082b

.address 0x40BD77
0001082b: 
.address 0x40BD77
00010830: RSI := RBX
.address 0x40BD7A
00010837: RDI := RAX
.address 0x40BD7D
00010840: RSP := RSP - 8
.address 0x40BD7D
00010843: mem := mem with [RSP, el]:u64 <- 0x40BD82
.address 0x40BD7D
00010846: call @sub_403af0 with return %00010848

.address 0x40BD82
00010848: 
.address 0x40BD82
0001084d: RBX := mem[0x620288, el]:u64
.address 0x40BD89
00010854: RSI := 0x419168
.address 0x40BD90
0001085b: RDX := 5
.address 0x40BD95
00010868: RDI := 0
.address 0x40BD95
0001086b: AF := unknown[bits]:u1
.address 0x40BD95
0001086e: ZF := 1
.address 0x40BD95
00010871: PF := 1
.address 0x40BD95
00010874: OF := 0
.address 0x40BD95
00010877: CF := 0
.address 0x40BD95
0001087a: SF := 0
.address 0x40BD97
00010883: RSP := RSP - 8
.address 0x40BD97
00010886: mem := mem with [RSP, el]:u64 <- 0x40BD9C
.address 0x40BD97
00010889: call @sub_403930 with return %0001088b

.address 0x40BD9C
0001088b: 
.address 0x40BD9C
00010890: RSI := RBX
.address 0x40BD9F
00010897: RDI := RAX
.address 0x40BDA2
000108a0: RSP := RSP - 8
.address 0x40BDA2
000108a3: mem := mem with [RSP, el]:u64 <- 0x40BDA7
.address 0x40BDA2
000108a6: call @sub_403af0 with return %000108a8

.address 0x40BDA7
000108a8: 
.address 0x40BDA7
000108ad: RBX := mem[0x620288, el]:u64
.address 0x40BDAE
000108b4: RSI := 0x419298
.address 0x40BDB5
000108bb: RDX := 5
.address 0x40BDBA
000108c8: RDI := 0
.address 0x40BDBA
000108cb: AF := unknown[bits]:u1
.address 0x40BDBA
000108ce: ZF := 1
.address 0x40BDBA
000108d1: PF := 1
.address 0x40BDBA
000108d4: OF := 0
.address 0x40BDBA
000108d7: CF := 0
.address 0x40BDBA
000108da: SF := 0
.address 0x40BDBC
000108e3: RSP := RSP - 8
.address 0x40BDBC
000108e6: mem := mem with [RSP, el]:u64 <- 0x40BDC1
.address 0x40BDBC
000108e9: call @sub_403930 with return %000108eb

.address 0x40BDC1
000108eb: 
.address 0x40BDC1
000108f0: RSI := RBX
.address 0x40BDC4
000108f7: RDI := RAX
.address 0x40BDC7
00010900: RSP := RSP - 8
.address 0x40BDC7
00010903: mem := mem with [RSP, el]:u64 <- 0x40BDCC
.address 0x40BDC7
00010906: call @sub_403af0 with return %00010908

.address 0x40BDCC
00010908: 
.address 0x40BDCC
0001090d: RBX := mem[0x620288, el]:u64
.address 0x40BDD3
00010914: RSI := 0x419498
.address 0x40BDDA
0001091b: RDX := 5
.address 0x40BDDF
00010928: RDI := 0
.address 0x40BDDF
0001092b: AF := unknown[bits]:u1
.address 0x40BDDF
0001092e: ZF := 1
.address 0x40BDDF
00010931: PF := 1
.address 0x40BDDF
00010934: OF := 0
.address 0x40BDDF
00010937: CF := 0
.address 0x40BDDF
0001093a: SF := 0
.address 0x40BDE1
00010943: RSP := RSP - 8
.address 0x40BDE1
00010946: mem := mem with [RSP, el]:u64 <- 0x40BDE6
.address 0x40BDE1
00010949: call @sub_403930 with return %0001094b

.address 0x40BDE6
0001094b: 
.address 0x40BDE6
00010950: RSI := RBX
.address 0x40BDE9
00010957: RDI := RAX
.address 0x40BDEC
00010960: RSP := RSP - 8
.address 0x40BDEC
00010963: mem := mem with [RSP, el]:u64 <- 0x40BDF1
.address 0x40BDEC
00010966: call @sub_403af0 with return %00010968

.address 0x40BDF1
00010968: 
.address 0x40BDF1
0001096d: RBX := mem[0x620288, el]:u64
.address 0x40BDF8
00010974: RSI := 0x419560
.address 0x40BDFF
0001097b: RDX := 5
.address 0x40BE04
00010988: RDI := 0
.address 0x40BE04
0001098b: AF := unknown[bits]:u1
.address 0x40BE04
0001098e: ZF := 1
.address 0x40BE04
00010991: PF := 1
.address 0x40BE04
00010994: OF := 0
.address 0x40BE04
00010997: CF := 0
.address 0x40BE04
0001099a: SF := 0
.address 0x40BE06
000109a3: RSP := RSP - 8
.address 0x40BE06
000109a6: mem := mem with [RSP, el]:u64 <- 0x40BE0B
.address 0x40BE06
000109a9: call @sub_403930 with return %000109ab

.address 0x40BE0B
000109ab: 
.address 0x40BE0B
000109b0: RSI := RBX
.address 0x40BE0E
000109b7: RDI := RAX
.address 0x40BE11
000109c0: RSP := RSP - 8
.address 0x40BE11
000109c3: mem := mem with [RSP, el]:u64 <- 0x40BE16
.address 0x40BE11
000109c6: call @sub_403af0 with return %000109c8

.address 0x40BE16
000109c8: 
.address 0x40BE16
000109cd: RBX := mem[0x620288, el]:u64
.address 0x40BE1D
000109d4: RSI := 0x419768
.address 0x40BE24
000109db: RDX := 5
.address 0x40BE29
000109e8: RDI := 0
.address 0x40BE29
000109eb: AF := unknown[bits]:u1
.address 0x40BE29
000109ee: ZF := 1
.address 0x40BE29
000109f1: PF := 1
.address 0x40BE29
000109f4: OF := 0
.address 0x40BE29
000109f7: CF := 0
.address 0x40BE29
000109fa: SF := 0
.address 0x40BE2B
00010a03: RSP := RSP - 8
.address 0x40BE2B
00010a06: mem := mem with [RSP, el]:u64 <- 0x40BE30
.address 0x40BE2B
00010a09: call @sub_403930 with return %00010a0b

.address 0x40BE30
00010a0b: 
.address 0x40BE30
00010a10: RSI := RBX
.address 0x40BE33
00010a17: RDI := RAX
.address 0x40BE36
00010a20: RSP := RSP - 8
.address 0x40BE36
00010a23: mem := mem with [RSP, el]:u64 <- 0x40BE3B
.address 0x40BE36
00010a26: call @sub_403af0 with return %00010a28

.address 0x40BE3B
00010a28: 
.address 0x40BE3B
00010a2d: RBX := mem[0x620288, el]:u64
.address 0x40BE42
00010a34: RSI := 0x419980
.address 0x40BE49
00010a3b: RDX := 5
.address 0x40BE4E
00010a48: RDI := 0
.address 0x40BE4E
00010a4b: AF := unknown[bits]:u1
.address 0x40BE4E
00010a4e: ZF := 1
.address 0x40BE4E
00010a51: PF := 1
.address 0x40BE4E
00010a54: OF := 0
.address 0x40BE4E
00010a57: CF := 0
.address 0x40BE4E
00010a5a: SF := 0
.address 0x40BE50
00010a63: RSP := RSP - 8
.address 0x40BE50
00010a66: mem := mem with [RSP, el]:u64 <- 0x40BE55
.address 0x40BE50
00010a69: call @sub_403930 with return %00010a6b

.address 0x40BE55
00010a6b: 
.address 0x40BE55
00010a70: RSI := RBX
.address 0x40BE58
00010a77: RDI := RAX
.address 0x40BE5B
00010a80: RSP := RSP - 8
.address 0x40BE5B
00010a83: mem := mem with [RSP, el]:u64 <- 0x40BE60
.address 0x40BE5B
00010a86: call @sub_403af0 with return %00010a88

.address 0x40BE60
00010a88: 
.address 0x40BE60
00010a8d: RBX := mem[0x620288, el]:u64
.address 0x40BE67
00010a94: RSI := 0x419A10
.address 0x40BE6E
00010a9b: RDX := 5
.address 0x40BE73
00010aa8: RDI := 0
.address 0x40BE73
00010aab: AF := unknown[bits]:u1
.address 0x40BE73
00010aae: ZF := 1
.address 0x40BE73
00010ab1: PF := 1
.address 0x40BE73
00010ab4: OF := 0
.address 0x40BE73
00010ab7: CF := 0
.address 0x40BE73
00010aba: SF := 0
.address 0x40BE75
00010ac3: RSP := RSP - 8
.address 0x40BE75
00010ac6: mem := mem with [RSP, el]:u64 <- 0x40BE7A
.address 0x40BE75
00010ac9: call @sub_403930 with return %00010acb

.address 0x40BE7A
00010acb: 
.address 0x40BE7A
00010ad0: RSI := RBX
.address 0x40BE7D
00010ad7: RDI := RAX
.address 0x40BE80
00010ae0: RSP := RSP - 8
.address 0x40BE80
00010ae3: mem := mem with [RSP, el]:u64 <- 0x40BE85
.address 0x40BE80
00010ae6: call @sub_403af0 with return %00010ae8

.address 0x40BE85
00010ae8: 
.address 0x40BE85
00010aed: RBX := mem[0x620288, el]:u64
.address 0x40BE8C
00010af4: RSI := 0x419B88
.address 0x40BE93
00010b01: RDI := 0
.address 0x40BE93
00010b04: AF := unknown[bits]:u1
.address 0x40BE93
00010b07: ZF := 1
.address 0x40BE93
00010b0a: PF := 1
.address 0x40BE93
00010b0d: OF := 0
.address 0x40BE93
00010b10: CF := 0
.address 0x40BE93
00010b13: SF := 0
.address 0x40BE95
00010b1a: RDX := 5
.address 0x40BE9A
00010b23: RSP := RSP - 8
.address 0x40BE9A
00010b26: mem := mem with [RSP, el]:u64 <- 0x40BE9F
.address 0x40BE9A
00010b29: call @sub_403930 with return %00010b2b

.address 0x40BE9F
00010b2b: 
.address 0x40BE9F
00010b30: RSI := RBX
.address 0x40BEA2
00010b37: RDI := RAX
.address 0x40BEA5
00010b40: RSP := RSP - 8
.address 0x40BEA5
00010b43: mem := mem with [RSP, el]:u64 <- 0x40BEAA
.address 0x40BEA5
00010b46: call @sub_403af0 with return %00010b48

.address 0x40BEAA
00010b48: 
.address 0x40BEAA
00010b4d: RBX := mem[0x620288, el]:u64
.address 0x40BEB1
00010b54: RSI := 0x419CF8
.address 0x40BEB8
00010b5b: RDX := 5
.address 0x40BEBD
00010b68: RDI := 0
.address 0x40BEBD
00010b6b: AF := unknown[bits]:u1
.address 0x40BEBD
00010b6e: ZF := 1
.address 0x40BEBD
00010b71: PF := 1
.address 0x40BEBD
00010b74: OF := 0
.address 0x40BEBD
00010b77: CF := 0
.address 0x40BEBD
00010b7a: SF := 0
.address 0x40BEBF
00010b83: RSP := RSP - 8
.address 0x40BEBF
00010b86: mem := mem with [RSP, el]:u64 <- 0x40BEC4
.address 0x40BEBF
00010b89: call @sub_403930 with return %00010b8b

.address 0x40BEC4
00010b8b: 
.address 0x40BEC4
00010b90: RSI := RBX
.address 0x40BEC7
00010b97: RDI := RAX
.address 0x40BECA
00010ba0: RSP := RSP - 8
.address 0x40BECA
00010ba3: mem := mem with [RSP, el]:u64 <- 0x40BECF
.address 0x40BECA
00010ba6: call @sub_403af0 with return %00010ba8

.address 0x40BECF
00010ba8: 
.address 0x40BECF
00010bad: RBX := mem[0x620288, el]:u64
.address 0x40BED6
00010bb4: RSI := 0x419D28
.address 0x40BEDD
00010bbb: RDX := 5
.address 0x40BEE2
00010bc8: RDI := 0
.address 0x40BEE2
00010bcb: AF := unknown[bits]:u1
.address 0x40BEE2
00010bce: ZF := 1
.address 0x40BEE2
00010bd1: PF := 1
.address 0x40BEE2
00010bd4: OF := 0
.address 0x40BEE2
00010bd7: CF := 0
.address 0x40BEE2
00010bda: SF := 0
.address 0x40BEE4
00010be3: RSP := RSP - 8
.address 0x40BEE4
00010be6: mem := mem with [RSP, el]:u64 <- 0x40BEE9
.address 0x40BEE4
00010be9: call @sub_403930 with return %00010beb

.address 0x40BEE9
00010beb: 
.address 0x40BEE9
00010bf0: RSI := RBX
.address 0x40BEEC
00010bf7: RDI := RAX
.address 0x40BEEF
00010c00: RSP := RSP - 8
.address 0x40BEEF
00010c03: mem := mem with [RSP, el]:u64 <- 0x40BEF4
.address 0x40BEEF
00010c06: call @sub_403af0 with return %00010c08

.address 0x40BEF4
00010c08: 
.address 0x40BEF4
00010c0d: RBX := mem[0x620288, el]:u64
.address 0x40BEFB
00010c14: RSI := 0x419D60
.address 0x40BF02
00010c1b: RDX := 5
.address 0x40BF07
00010c28: RDI := 0
.address 0x40BF07
00010c2b: AF := unknown[bits]:u1
.address 0x40BF07
00010c2e: ZF := 1
.address 0x40BF07
00010c31: PF := 1
.address 0x40BF07
00010c34: OF := 0
.address 0x40BF07
00010c37: CF := 0
.address 0x40BF07
00010c3a: SF := 0
.address 0x40BF09
00010c43: RSP := RSP - 8
.address 0x40BF09
00010c46: mem := mem with [RSP, el]:u64 <- 0x40BF0E
.address 0x40BF09
00010c49: call @sub_403930 with return %00010c4b

.address 0x40BF0E
00010c4b: 
.address 0x40BF0E
00010c50: RSI := RBX
.address 0x40BF11
00010c57: RDI := RAX
.address 0x40BF14
00010c60: RSP := RSP - 8
.address 0x40BF14
00010c63: mem := mem with [RSP, el]:u64 <- 0x40BF19
.address 0x40BF14
00010c66: call @sub_403af0 with return %00010c68

.address 0x40BF19
00010c68: 
.address 0x40BF19
00010c6d: RBX := mem[0x620288, el]:u64
.address 0x40BF20
00010c74: RSI := 0x419E00
.address 0x40BF27
00010c7b: RDX := 5
.address 0x40BF2C
00010c88: RDI := 0
.address 0x40BF2C
00010c8b: AF := unknown[bits]:u1
.address 0x40BF2C
00010c8e: ZF := 1
.address 0x40BF2C
00010c91: PF := 1
.address 0x40BF2C
00010c94: OF := 0
.address 0x40BF2C
00010c97: CF := 0
.address 0x40BF2C
00010c9a: SF := 0
.address 0x40BF2E
00010ca3: RSP := RSP - 8
.address 0x40BF2E
00010ca6: mem := mem with [RSP, el]:u64 <- 0x40BF33
.address 0x40BF2E
00010ca9: call @sub_403930 with return %00010cab

.address 0x40BF33
00010cab: 
.address 0x40BF33
00010cb0: RSI := RBX
.address 0x40BF36
00010cb7: RDI := RAX
.address 0x40BF39
00010cc0: RSP := RSP - 8
.address 0x40BF39
00010cc3: mem := mem with [RSP, el]:u64 <- 0x40BF3E
.address 0x40BF39
00010cc6: call @sub_403af0 with return %00010cc8

.address 0x40BF3E
00010cc8: 
.address 0x40BF3E
00010ccd: RBX := mem[0x620288, el]:u64
.address 0x40BF45
00010cd4: RSI := 0x419F20
.address 0x40BF4C
00010ce1: RDI := 0
.address 0x40BF4C
00010ce4: AF := unknown[bits]:u1
.address 0x40BF4C
00010ce7: ZF := 1
.address 0x40BF4C
00010cea: PF := 1
.address 0x40BF4C
00010ced: OF := 0
.address 0x40BF4C
00010cf0: CF := 0
.address 0x40BF4C
00010cf3: SF := 0
.address 0x40BF4E
00010cfa: RDX := 5
.address 0x40BF53
00010d03: RSP := RSP - 8
.address 0x40BF53
00010d06: mem := mem with [RSP, el]:u64 <- 0x40BF58
.address 0x40BF53
00010d09: call @sub_403930 with return %00010d0b

.address 0x40BF58
00010d0b: 
.address 0x40BF58
00010d10: RSI := RBX
.address 0x40BF5B
00010d17: RDI := RAX
.address 0x40BF5E
00010d20: RSP := RSP - 8
.address 0x40BF5E
00010d23: mem := mem with [RSP, el]:u64 <- 0x40BF63
.address 0x40BF5E
00010d26: call @sub_403af0 with return %00010d28

.address 0x40BF63
00010d28: 
.address 0x40BF63
00010d2d: RAX := pad:64[mem[0x6201E0, el]:u32]
.address 0x40BF69
00010d3a: #2248 := low:32[RAX] - 1
.address 0x40BF69
00010d3d: CF := low:32[RAX] < 1
.address 0x40BF69
00010d40: OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #2248)]
.address 0x40BF69
00010d43: AF := 0x10 = (0x10 & (#2248 ^ low:32[RAX] ^ 1))
.address 0x40BF69
00010d46: PF := ~low:1[let $1 = #2248 >> 4 ^ #2248 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40BF69
00010d49: SF := high:1[#2248]
.address 0x40BF69
00010d4c: ZF := 0 = #2248
.address 0x40BF6C
00010d56: when ZF goto %00010d50
000449a6: goto %000113a1

.address 0x40BF6E
000113a1: 
.address 0x40BF6E
000113ac: #2269 := low:32[RAX] - 2
.address 0x40BF6E
000113af: CF := low:32[RAX] < 2
.address 0x40BF6E
000113b2: OF := high:1[(low:32[RAX] ^ 2) & (low:32[RAX] ^ #2269)]
.address 0x40BF6E
000113b5: AF := 0x10 = (0x10 & (#2269 ^ low:32[RAX] ^ 2))
.address 0x40BF6E
000113b8: PF := ~low:1[let $1 = #2269 >> 4 ^ #2269 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40BF6E
000113bb: SF := high:1[#2269]
.address 0x40BF6E
000113be: ZF := 0 = #2269
.address 0x40BF71
000113c5: RBP := 0x417CFE
.address 0x40BF78
000113cc: RAX := 0x417CFF
.address 0x40BF7F
000113d3: RBP := if ZF then RAX else RBP
000449a7: goto %00010d50

.address 0x40BF83
00010d50: 
.address 0x40BF83
00010d60: RAX := 0x417D03
.address 0x40BF8A
00010d67: RCX := 0x417D42
.address 0x40BF91
00010d6e: RSI := 0x41813D
.address 0x40BF98
00010d75: mem := mem with [RSP + 0x60, el]:u64 <- 0
.address 0x40BFA1
00010d7c: mem := mem with [RSP + 0x68, el]:u64 <- 0
.address 0x40BFAA
00010d83: RBX := RSP
.address 0x40BFAD
00010d8a: mem := mem with [RSP + 8, el]:u64 <- RAX
.address 0x40BFB2
00010d91: RAX := 0x417D7B
.address 0x40BFB9
00010d98: mem := mem with [RSP + 0x30, el]:u64 <- RCX
.address 0x40BFBE
00010d9f: RCX := 0x417D4C
.address 0x40BFC5
00010da6: mem := mem with [RSP, el]:u64 <- RSI
.address 0x40BFC9
00010dad: mem := mem with [RSP + 0x10, el]:u64 <- RAX
.address 0x40BFCE
00010db4: RAX := 0x417D13
.address 0x40BFD5
00010dbb: mem := mem with [RSP + 0x40, el]:u64 <- RCX
.address 0x40BFDA
00010dc2: RCX := 0x417D56
.address 0x40BFE1
00010dc9: mem := mem with [RSP + 0x18, el]:u64 <- RAX
.address 0x40BFE6
00010dd0: RAX := 0x417D29
.address 0x40BFED
00010dd7: mem := mem with [RSP + 0x50, el]:u64 <- RCX
.address 0x40BFF2
00010dde: mem := mem with [RSP + 0x20, el]:u64 <- RAX
.address 0x40BFF7
00010de5: RAX := 0x417D33
.address 0x40BFFE
00010dec: mem := mem with [RSP + 0x28, el]:u64 <- RAX
.address 0x40C003
00010df3: mem := mem with [RSP + 0x38, el]:u64 <- RAX
.address 0x40C008
00010dfa: mem := mem with [RSP + 0x48, el]:u64 <- RAX
.address 0x40C00D
00010e01: mem := mem with [RSP + 0x58, el]:u64 <- RAX
.address 0x40C012
00010e09: goto %00010e05

.address 0x40C024
00010e05: 
.address 0x40C024
00010e0f: RDI := RBP
.address 0x40C027
00010e18: RSP := RSP - 8
.address 0x40C027
00010e1b: mem := mem with [RSP, el]:u64 <- 0x40C02C
.address 0x40C027
00010e1e: call @sub_403b20 with return %00010e20

.address 0x40C02C
00010e20: 
.address 0x40C02C
00010e2b: #2250 := low:32[RAX]
.address 0x40C02C
00010e2e: OF := 0
.address 0x40C02C
00010e31: CF := 0
.address 0x40C02C
00010e34: AF := unknown[bits]:u1
.address 0x40C02C
00010e37: PF := ~low:1[let $1 = #2250 >> 4 ^ #2250 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C02C
00010e3a: SF := high:1[#2250]
.address 0x40C02C
00010e3d: ZF := 0 = #2250
.address 0x40C02E
00010e47: when ~ZF goto %00010e41
000449a8: goto %00010e97

.address 0x40C018
00010e41: 
.address 0x40C018
00010e58: #2252 := RBX
.address 0x40C018
00010e5b: RBX := RBX + 0x10
.address 0x40C018
00010e5e: CF := RBX < #2252
.address 0x40C018
00010e61: OF := ~high:1[#2252] & (high:1[#2252] | high:1[RBX]) & ~(high:1[#2252] & high:1[RBX])
.address 0x40C018
00010e64: AF := 0x10 = (0x10 & (RBX ^ #2252 ^ 0x10))
.address 0x40C018
00010e67: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C018
00010e6a: SF := high:1[RBX]
.address 0x40C018
00010e6d: ZF := 0 = RBX
.address 0x40C01C
00010e74: RSI := mem[RBX, el]:u64
.address 0x40C01F
00010e81: #2255 := RSI
.address 0x40C01F
00010e84: OF := 0
.address 0x40C01F
00010e87: CF := 0
.address 0x40C01F
00010e8a: AF := unknown[bits]:u1
.address 0x40C01F
00010e8d: PF := ~low:1[let $1 = #2255 >> 4 ^ #2255 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C01F
00010e90: SF := high:1[#2255]
.address 0x40C01F
00010e93: ZF := 0 = #2255
.address 0x40C022
00010e9d: when ZF goto %00010e97
000449a9: goto %00010e05

.address 0x40C030
00010e97: 
.address 0x40C030
00010ea7: RBX := mem[RBX + 8, el]:u64
.address 0x40C034
00010eb4: RDI := 0
.address 0x40C034
00010eb7: AF := unknown[bits]:u1
.address 0x40C034
00010eba: ZF := 1
.address 0x40C034
00010ebd: PF := 1
.address 0x40C034
00010ec0: OF := 0
.address 0x40C034
00010ec3: CF := 0
.address 0x40C034
00010ec6: SF := 0
.address 0x40C036
00010ecd: RDX := 5
.address 0x40C03B
00010ed4: RSI := 0x417D60
.address 0x40C042
00010ee1: #2257 := RBX
.address 0x40C042
00010ee4: OF := 0
.address 0x40C042
00010ee7: CF := 0
.address 0x40C042
00010eea: AF := unknown[bits]:u1
.address 0x40C042
00010eed: PF := ~low:1[let $1 = #2257 >> 4 ^ #2257 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C042
00010ef0: SF := high:1[#2257]
.address 0x40C042
00010ef3: ZF := 0 = #2257
.address 0x40C045
00010efd: when ZF goto %00010ef7
000449aa: goto %00011294

.address 0x40C108
00010ef7: 
.address 0x40C108
00010f09: RSP := RSP - 8
.address 0x40C108
00010f0c: mem := mem with [RSP, el]:u64 <- 0x40C10D
.address 0x40C108
00010f0f: call @sub_403930 with return %00010f11

.address 0x40C10D
00010f11: 
.address 0x40C10D
00010f16: RCX := 0x419FB8
.address 0x40C114
00010f1d: RDX := 0x417D77
.address 0x40C11B
00010f24: RSI := RAX
.address 0x40C11E
00010f2b: RDI := 1
.address 0x40C123
00010f38: RAX := 0
.address 0x40C123
00010f3b: AF := unknown[bits]:u1
.address 0x40C123
00010f3e: ZF := 1
.address 0x40C123
00010f41: PF := 1
.address 0x40C123
00010f44: OF := 0
.address 0x40C123
00010f47: CF := 0
.address 0x40C123
00010f4a: SF := 0
.address 0x40C125
00010f53: RSP := RSP - 8
.address 0x40C125
00010f56: mem := mem with [RSP, el]:u64 <- 0x40C12A
.address 0x40C125
00010f59: call @sub_403cd0 with return %00010f5b

.address 0x40C12A
00010f5b: 
.address 0x40C12A
00010f66: RSI := 0
.address 0x40C12A
00010f69: AF := unknown[bits]:u1
.address 0x40C12A
00010f6c: ZF := 1
.address 0x40C12A
00010f6f: PF := 1
.address 0x40C12A
00010f72: OF := 0
.address 0x40C12A
00010f75: CF := 0
.address 0x40C12A
00010f78: SF := 0
.address 0x40C12C
00010f7f: RDI := 5
.address 0x40C131
00010f88: RSP := RSP - 8
.address 0x40C131
00010f8b: mem := mem with [RSP, el]:u64 <- 0x40C136
.address 0x40C131
00010f8e: call @sub_403cc0 with return %00010f90

.address 0x40C136
00010f90: 
.address 0x40C136
00010f9b: #2259 := RAX
.address 0x40C136
00010f9e: OF := 0
.address 0x40C136
00010fa1: CF := 0
.address 0x40C136
00010fa4: AF := unknown[bits]:u1
.address 0x40C136
00010fa7: PF := ~low:1[let $1 = #2259 >> 4 ^ #2259 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C136
00010faa: SF := high:1[#2259]
.address 0x40C136
00010fad: ZF := 0 = #2259
.address 0x40C139
00010fb7: when ZF goto %00010fb1
000449ab: goto %00011244

.address 0x40C13B
00011244: 
.address 0x40C13B
00011249: RSI := 0x417D85
.address 0x40C142
00011250: RDX := 3
.address 0x40C147
00011257: RDI := RAX
.address 0x40C14A
00011260: RSP := RSP - 8
.address 0x40C14A
00011263: mem := mem with [RSP, el]:u64 <- 0x40C14F
.address 0x40C14A
00011266: call @sub_403800 with return %00011268

.address 0x40C14F
00011268: 
.address 0x40C14F
00011273: #2263 := low:32[RAX]
.address 0x40C14F
00011276: OF := 0
.address 0x40C14F
00011279: CF := 0
.address 0x40C14F
0001127c: AF := unknown[bits]:u1
.address 0x40C14F
0001127f: PF := ~low:1[let $1 = #2263 >> 4 ^ #2263 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C14F
00011282: SF := high:1[#2263]
.address 0x40C14F
00011285: ZF := 0 = #2263
.address 0x40C151
0001128e: when ~ZF goto %000110fa
000449ac: goto %00010fb1

.address 0x40C18E
000110fa: 
.address 0x40C18E
000110ff: RBX := RBP
000449ad: goto %00011101

.address 0x40C153
00010fb1: 
.address 0x40C153
00010fc1: RSI := 0x41A028
.address 0x40C15A
00010fc8: RDX := 5
.address 0x40C15F
00010fd5: RDI := 0
.address 0x40C15F
00010fd8: AF := unknown[bits]:u1
.address 0x40C15F
00010fdb: ZF := 1
.address 0x40C15F
00010fde: PF := 1
.address 0x40C15F
00010fe1: OF := 0
.address 0x40C15F
00010fe4: CF := 0
.address 0x40C15F
00010fe7: SF := 0
.address 0x40C161
00010fee: RBX := RBP
.address 0x40C164
00010ff7: RSP := RSP - 8
.address 0x40C164
00010ffa: mem := mem with [RSP, el]:u64 <- 0x40C169
.address 0x40C164
00010ffd: call @sub_403930 with return %00010fff

.address 0x40C169
00010fff: 
.address 0x40C169
00011004: RDX := 0x419FB8
.address 0x40C170
0001100b: RCX := RBP
.address 0x40C173
00011012: RSI := RAX
.address 0x40C176
00011019: RDI := 1
.address 0x40C17B
00011026: RAX := 0
.address 0x40C17B
00011029: AF := unknown[bits]:u1
.address 0x40C17B
0001102c: ZF := 1
.address 0x40C17B
0001102f: PF := 1
.address 0x40C17B
00011032: OF := 0
.address 0x40C17B
00011035: CF := 0
.address 0x40C17B
00011038: SF := 0
.address 0x40C17D
0001103f: RBP := 0x417D1D
.address 0x40C184
00011048: RSP := RSP - 8
.address 0x40C184
0001104b: mem := mem with [RSP, el]:u64 <- 0x40C189
.address 0x40C184
0001104e: call @sub_403cd0 with return %00011050

.address 0x40C189
00011050: 
.address 0x40C189
00011056: goto %00011052

.address 0x40C04B
00011294: 
.address 0x40C04B
0001129b: RSP := RSP - 8
.address 0x40C04B
0001129e: mem := mem with [RSP, el]:u64 <- 0x40C050
.address 0x40C04B
000112a1: call @sub_403930 with return %000112a3

.address 0x40C050
000112a3: 
.address 0x40C050
000112a8: RCX := 0x419FB8
.address 0x40C057
000112af: RDX := 0x417D77
.address 0x40C05E
000112b6: RSI := RAX
.address 0x40C061
000112bd: RDI := 1
.address 0x40C066
000112ca: RAX := 0
.address 0x40C066
000112cd: AF := unknown[bits]:u1
.address 0x40C066
000112d0: ZF := 1
.address 0x40C066
000112d3: PF := 1
.address 0x40C066
000112d6: OF := 0
.address 0x40C066
000112d9: CF := 0
.address 0x40C066
000112dc: SF := 0
.address 0x40C068
000112e5: RSP := RSP - 8
.address 0x40C068
000112e8: mem := mem with [RSP, el]:u64 <- 0x40C06D
.address 0x40C068
000112eb: call @sub_403cd0 with return %000112ed

.address 0x40C06D
000112ed: 
.address 0x40C06D
000112f8: RSI := 0
.address 0x40C06D
000112fb: AF := unknown[bits]:u1
.address 0x40C06D
000112fe: ZF := 1
.address 0x40C06D
00011301: PF := 1
.address 0x40C06D
00011304: OF := 0
.address 0x40C06D
00011307: CF := 0
.address 0x40C06D
0001130a: SF := 0
.address 0x40C06F
00011311: RDI := 5
.address 0x40C074
0001131a: RSP := RSP - 8
.address 0x40C074
0001131d: mem := mem with [RSP, el]:u64 <- 0x40C079
.address 0x40C074
00011320: call @sub_403cc0 with return %00011322

.address 0x40C079
00011322: 
.address 0x40C079
0001132d: #2265 := RAX
.address 0x40C079
00011330: OF := 0
.address 0x40C079
00011333: CF := 0
.address 0x40C079
00011336: AF := unknown[bits]:u1
.address 0x40C079
00011339: PF := ~low:1[let $1 = #2265 >> 4 ^ #2265 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C079
0001133c: SF := high:1[#2265]
.address 0x40C079
0001133f: ZF := 0 = #2265
.address 0x40C07C
00011348: when ZF goto %00011182
000449ae: goto %0001134e

.address 0x40C07E
0001134e: 
.address 0x40C07E
00011353: RSI := 0x417D85
.address 0x40C085
0001135a: RDX := 3
.address 0x40C08A
00011361: RDI := RAX
.address 0x40C08D
0001136a: RSP := RSP - 8
.address 0x40C08D
0001136d: mem := mem with [RSP, el]:u64 <- 0x40C092
.address 0x40C08D
00011370: call @sub_403800 with return %00011372

.address 0x40C092
00011372: 
.address 0x40C092
0001137d: #2267 := low:32[RAX]
.address 0x40C092
00011380: OF := 0
.address 0x40C092
00011383: CF := 0
.address 0x40C092
00011386: AF := unknown[bits]:u1
.address 0x40C092
00011389: PF := ~low:1[let $1 = #2267 >> 4 ^ #2267 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C092
0001138c: SF := high:1[#2267]
.address 0x40C092
0001138f: ZF := 0 = #2267
.address 0x40C094
00011398: when ~ZF goto %00011101
000449af: goto %00011182

.address 0x40C191
00011101: 
.address 0x40C191
00011106: RSI := 0x419FE0
.address 0x40C198
00011113: RDI := 0
.address 0x40C198
00011116: AF := unknown[bits]:u1
.address 0x40C198
00011119: ZF := 1
.address 0x40C198
0001111c: PF := 1
.address 0x40C198
0001111f: OF := 0
.address 0x40C198
00011122: CF := 0
.address 0x40C198
00011125: SF := 0
.address 0x40C19A
0001112c: RDX := 5
.address 0x40C19F
00011135: RSP := RSP - 8
.address 0x40C19F
00011138: mem := mem with [RSP, el]:u64 <- 0x40C1A4
.address 0x40C19F
0001113b: call @sub_403930 with return %0001113d

.address 0x40C1A4
0001113d: 
.address 0x40C1A4
00011142: RDX := RBP
.address 0x40C1A7
00011149: RSI := RAX
.address 0x40C1AA
00011150: RDI := 1
.address 0x40C1AF
0001115d: RAX := 0
.address 0x40C1AF
00011160: AF := unknown[bits]:u1
.address 0x40C1AF
00011163: ZF := 1
.address 0x40C1AF
00011166: PF := 1
.address 0x40C1AF
00011169: OF := 0
.address 0x40C1AF
0001116c: CF := 0
.address 0x40C1AF
0001116f: SF := 0
.address 0x40C1B1
00011178: RSP := RSP - 8
.address 0x40C1B1
0001117b: mem := mem with [RSP, el]:u64 <- 0x40C1B6
.address 0x40C1B1
0001117e: call @sub_403cd0 with return %00011180

.address 0x40C1B6
00011180: 
.address 0x40C1B6
00011186: goto %00011182

.address 0x40C09A
00011182: 
.address 0x40C09A
0001118c: RSI := 0x41A028
.address 0x40C0A1
00011199: RDI := 0
.address 0x40C0A1
0001119c: AF := unknown[bits]:u1
.address 0x40C0A1
0001119f: ZF := 1
.address 0x40C0A1
000111a2: PF := 1
.address 0x40C0A1
000111a5: OF := 0
.address 0x40C0A1
000111a8: CF := 0
.address 0x40C0A1
000111ab: SF := 0
.address 0x40C0A3
000111b2: RDX := 5
.address 0x40C0A8
000111bb: RSP := RSP - 8
.address 0x40C0A8
000111be: mem := mem with [RSP, el]:u64 <- 0x40C0AD
.address 0x40C0A8
000111c1: call @sub_403930 with return %000111c3

.address 0x40C0AD
000111c3: 
.address 0x40C0AD
000111c8: RDX := 0x419FB8
.address 0x40C0B4
000111cf: RCX := RBP
.address 0x40C0B7
000111d6: RSI := RAX
.address 0x40C0BA
000111dd: RDI := 1
.address 0x40C0BF
000111ea: RAX := 0
.address 0x40C0BF
000111ed: AF := unknown[bits]:u1
.address 0x40C0BF
000111f0: ZF := 1
.address 0x40C0BF
000111f3: PF := 1
.address 0x40C0BF
000111f6: OF := 0
.address 0x40C0BF
000111f9: CF := 0
.address 0x40C0BF
000111fc: SF := 0
.address 0x40C0C1
00011205: RSP := RSP - 8
.address 0x40C0C1
00011208: mem := mem with [RSP, el]:u64 <- 0x40C0C6
.address 0x40C0C1
0001120b: call @sub_403cd0 with return %0001120d

.address 0x40C0C6
0001120d: 
.address 0x40C0C6
00011218: #2261 := RBP - RBX
.address 0x40C0C6
0001121b: CF := RBP < RBX
.address 0x40C0C6
0001121e: OF := high:1[(RBP ^ RBX) & (RBP ^ #2261)]
.address 0x40C0C6
00011221: AF := 0x10 = (0x10 & (#2261 ^ RBP ^ RBX))
.address 0x40C0C6
00011224: PF := ~low:1[let $1 = #2261 >> 4 ^ #2261 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C0C6
00011227: SF := high:1[#2261]
.address 0x40C0C6
0001122a: ZF := 0 = #2261
.address 0x40C0C9
00011231: RCX := 0x417D1D
.address 0x40C0D0
00011238: RBP := 0x417C4A
.address 0x40C0D7
0001123f: RBP := if ZF then RCX else RBP
000449b0: goto %00011052

.address 0x40C0DB
00011052: 
.address 0x40C0DB
0001105c: RSI := 0x41A048
.address 0x40C0E2
00011069: RDI := 0
.address 0x40C0E2
0001106c: AF := unknown[bits]:u1
.address 0x40C0E2
0001106f: ZF := 1
.address 0x40C0E2
00011072: PF := 1
.address 0x40C0E2
00011075: OF := 0
.address 0x40C0E2
00011078: CF := 0
.address 0x40C0E2
0001107b: SF := 0
.address 0x40C0E4
00011082: RDX := 5
.address 0x40C0E9
0001108b: RSP := RSP - 8
.address 0x40C0E9
0001108e: mem := mem with [RSP, el]:u64 <- 0x40C0EE
.address 0x40C0E9
00011091: call @sub_403930 with return %00011093

.address 0x40C0EE
00011093: 
.address 0x40C0EE
00011098: RCX := RBP
.address 0x40C0F1
0001109f: RSI := RAX
.address 0x40C0F4
000110a6: RDX := RBX
.address 0x40C0F7
000110ad: RDI := 1
.address 0x40C0FC
000110ba: RAX := 0
.address 0x40C0FC
000110bd: AF := unknown[bits]:u1
.address 0x40C0FC
000110c0: ZF := 1
.address 0x40C0FC
000110c3: PF := 1
.address 0x40C0FC
000110c6: OF := 0
.address 0x40C0FC
000110c9: CF := 0
.address 0x40C0FC
000110cc: SF := 0
.address 0x40C0FE
000110d5: RSP := RSP - 8
.address 0x40C0FE
000110d8: mem := mem with [RSP, el]:u64 <- 0x40C103
.address 0x40C0FE
000110db: call @sub_403cd0 with return %000110dd

.address 0x40C103
000110dd: 
.address 0x40C103
000110e3: goto %000110df


.address 0x40C1C0
0004412c: sub sub_40c1c0()
.address 0x40C1C0
00010016: 
.address 0x40C1C0
00010028: #2221 := R15
.address 0x40C1C0
0001002b: RSP := RSP - 8
.address 0x40C1C0
0001002e: mem := mem with [RSP, el]:u64 <- #2221
.address 0x40C1C2
00010037: #2222 := R14
.address 0x40C1C2
0001003a: RSP := RSP - 8
.address 0x40C1C2
0001003d: mem := mem with [RSP, el]:u64 <- #2222
.address 0x40C1C4
00010044: RAX := 0x401
.address 0x40C1C9
0001004d: #2223 := R13
.address 0x40C1C9
00010050: RSP := RSP - 8
.address 0x40C1C9
00010053: mem := mem with [RSP, el]:u64 <- #2223
.address 0x40C1CB
0001005c: #2224 := R12
.address 0x40C1CB
0001005f: RSP := RSP - 8
.address 0x40C1CB
00010062: mem := mem with [RSP, el]:u64 <- #2224
.address 0x40C1CD
00010069: R13 := RDI
.address 0x40C1D0
00010072: #2225 := RBP
.address 0x40C1D0
00010075: RSP := RSP - 8
.address 0x40C1D0
00010078: mem := mem with [RSP, el]:u64 <- #2225
.address 0x40C1D1
00010081: #2226 := RBX
.address 0x40C1D1
00010084: RSP := RSP - 8
.address 0x40C1D1
00010087: mem := mem with [RSP, el]:u64 <- #2226
.address 0x40C1D2
0001008e: RBX := low:64[RSI + 1]
.address 0x40C1D6
00010095: R14 := 0x3FFFFFFFFFFFFFFF
.address 0x40C1E0
0001009c: R15 := 0x7FFFFFFFFFFFFFFE
.address 0x40C1EA
000100aa: #2227 := RSP
.address 0x40C1EA
000100ad: RSP := RSP - 8
.address 0x40C1EA
000100b0: CF := #2227 < 8
.address 0x40C1EA
000100b3: OF := high:1[(#2227 ^ 8) & (#2227 ^ RSP)]
.address 0x40C1EA
000100b6: AF := 0x10 = (0x10 & (RSP ^ #2227 ^ 8))
.address 0x40C1EA
000100b9: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C1EA
000100bc: SF := high:1[RSP]
.address 0x40C1EA
000100bf: ZF := 0 = RSP
.address 0x40C1EE
000100cc: #2230 := RSI - 0x401
.address 0x40C1EE
000100cf: CF := RSI < 0x401
.address 0x40C1EE
000100d2: OF := high:1[(RSI ^ 0x401) & (RSI ^ #2230)]
.address 0x40C1EE
000100d5: AF := 0x10 = (0x10 & (#2230 ^ RSI ^ 0x401))
.address 0x40C1EE
000100d8: PF := ~low:1[let $1 = #2230 >> 4 ^ #2230 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C1EE
000100db: SF := high:1[#2230]
.address 0x40C1EE
000100de: ZF := 0 = #2230
.address 0x40C1F5
000100e5: RBX := if ~CF then RAX else RBX
000449b1: goto %000100ea

.address 0x40C200
000100ea: 
.address 0x40C200
000100ef: RDI := RBX
.address 0x40C203
000100f8: RSP := RSP - 8
.address 0x40C203
000100fb: mem := mem with [RSP, el]:u64 <- 0x40C208
.address 0x40C203
000100fe: call @sub_403e78 with return %00010100

.address 0x40C208
00010100: 
.address 0x40C208
0001010b: #2232 := RAX
.address 0x40C208
0001010e: OF := 0
.address 0x40C208
00010111: CF := 0
.address 0x40C208
00010114: AF := unknown[bits]:u1
.address 0x40C208
00010117: PF := ~low:1[let $1 = #2232 >> 4 ^ #2232 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C208
0001011a: SF := high:1[#2232]
.address 0x40C208
0001011d: ZF := 0 = #2232
.address 0x40C20B
00010124: RBP := RAX
.address 0x40C20E
0001012e: when ZF goto %00010128
000449b2: goto %00011587

.address 0x40C210
00011587: 
.address 0x40C210
00011597: RDX := RBX
.address 0x40C213
0001159e: RSI := RAX
.address 0x40C216
000115a5: RDI := R13
.address 0x40C219
000115ae: RSP := RSP - 8
.address 0x40C219
000115b1: mem := mem with [RSP, el]:u64 <- 0x40C21E
.address 0x40C219
000115b4: call @sub_4038b0 with return %000115b6

.address 0x40C21E
000115b6: 
.address 0x40C21E
000115c1: #2282 := RAX
.address 0x40C21E
000115c4: OF := 0
.address 0x40C21E
000115c7: CF := 0
.address 0x40C21E
000115ca: AF := unknown[bits]:u1
.address 0x40C21E
000115cd: PF := ~low:1[let $1 = #2282 >> 4 ^ #2282 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C21E
000115d0: SF := high:1[#2282]
.address 0x40C21E
000115d3: ZF := 0 = #2282
.address 0x40C221
000115da: R12 := RAX
.address 0x40C224
000115e3: when SF goto %00011468
000449b3: goto %00011498

.address 0x40C278
00011468: 
.address 0x40C278
0001146f: RSP := RSP - 8
.address 0x40C278
00011472: mem := mem with [RSP, el]:u64 <- 0x40C27D
.address 0x40C278
00011475: call @sub_4037f0 with return %00011477

.address 0x40C27D
00011477: 
.address 0x40C27D
00011482: #2271 := mem[RAX, el]:u32 - 0x22
.address 0x40C27D
00011485: CF := mem[RAX, el]:u32 < 0x22
.address 0x40C27D
00011488: OF := high:1[(mem[RAX, el]:u32 ^ 0x22) & (mem[RAX, el]:u32 ^ #2271)]
.address 0x40C27D
0001148b: AF := 0x10 = (0x10 & (#2271 ^ mem[RAX, el]:u32 ^ 0x22))
.address 0x40C27D
0001148e: PF := ~low:1[let $1 = #2271 >> 4 ^ #2271 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C27D
00011491: SF := high:1[#2271]
.address 0x40C27D
00011494: ZF := 0 = #2271
.address 0x40C280
0001149e: when ZF goto %00011498
000449b4: goto %000115e9

.address 0x40C282
000115e9: 
.address 0x40C282
000115ee: RDI := RBP
.address 0x40C285
000115fb: RBP := 0
.address 0x40C285
000115fe: AF := unknown[bits]:u1
.address 0x40C285
00011601: ZF := 1
.address 0x40C285
00011604: PF := 1
.address 0x40C285
00011607: OF := 0
.address 0x40C285
0001160a: CF := 0
.address 0x40C285
0001160d: SF := 0
.address 0x40C287
00011616: RSP := RSP - 8
.address 0x40C287
00011619: mem := mem with [RSP, el]:u64 <- 0x40C28C
.address 0x40C287
0001161c: call @sub_403e70 with return %0001161e

.address 0x40C28C
0001161e: 
.address 0x40C28C
00011623: goto %00010128

.address 0x40C226
00011498: 
.address 0x40C226
000114ae: #2273 := RBX - R12
.address 0x40C226
000114b1: CF := RBX < R12
.address 0x40C226
000114b4: OF := high:1[(RBX ^ R12) & (RBX ^ #2273)]
.address 0x40C226
000114b7: AF := 0x10 = (0x10 & (#2273 ^ RBX ^ R12))
.address 0x40C226
000114ba: PF := ~low:1[let $1 = #2273 >> 4 ^ #2273 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C226
000114bd: SF := high:1[#2273]
.address 0x40C226
000114c0: ZF := 0 = #2273
.address 0x40C229
000114ca: when ~(CF | ZF) goto %000114c4
000449b5: goto %000114e0

.address 0x40C290
000114c4: 
.address 0x40C290
000114d4: mem := mem with [RBP + R12] <- 0
.address 0x40C296
000114db: goto %00010128

.address 0x40C22B
000114e0: 
.address 0x40C22B
000114e5: RDI := RBP
.address 0x40C22E
000114ee: RSP := RSP - 8
.address 0x40C22E
000114f1: mem := mem with [RSP, el]:u64 <- 0x40C233
.address 0x40C22E
000114f4: call @sub_403e70 with return %000114f6

.address 0x40C233
000114f6: 
.address 0x40C233
00011501: #2275 := RBX - R14
.address 0x40C233
00011504: CF := RBX < R14
.address 0x40C233
00011507: OF := high:1[(RBX ^ R14) & (RBX ^ #2275)]
.address 0x40C233
0001150a: AF := 0x10 = (0x10 & (#2275 ^ RBX ^ R14))
.address 0x40C233
0001150d: PF := ~low:1[let $1 = #2275 >> 4 ^ #2275 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C233
00011510: SF := high:1[#2275]
.address 0x40C233
00011513: ZF := 0 = #2275
.address 0x40C236
0001151c: when ~(CF | ZF) goto %000101b2
000449b6: goto %00011522

.address 0x40C260
000101b2: 
.address 0x40C260
000101bd: #2238 := RBX - R15
.address 0x40C260
000101c0: CF := RBX < R15
.address 0x40C260
000101c3: OF := high:1[(RBX ^ R15) & (RBX ^ #2238)]
.address 0x40C260
000101c6: AF := 0x10 = (0x10 & (#2238 ^ RBX ^ R15))
.address 0x40C260
000101c9: PF := ~low:1[let $1 = #2238 >> 4 ^ #2238 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C260
000101cc: SF := high:1[#2238]
.address 0x40C260
000101cf: ZF := 0 = #2238
.address 0x40C263
000101d9: when ~(CF | ZF) goto %000101d3
000449b7: goto %00011457

.address 0x40C2A0
000101d3: 
.address 0x40C2A0
000101e5: RSP := RSP - 8
.address 0x40C2A0
000101e8: mem := mem with [RSP, el]:u64 <- 0x40C2A5
.address 0x40C2A0
000101eb: call @sub_4037f0 with return %000101ed

.address 0x40C2A5
000101ed: 
.address 0x40C2A5
000101f8: RBP := 0
.address 0x40C2A5
000101fb: AF := unknown[bits]:u1
.address 0x40C2A5
000101fe: ZF := 1
.address 0x40C2A5
00010201: PF := 1
.address 0x40C2A5
00010204: OF := 0
.address 0x40C2A5
00010207: CF := 0
.address 0x40C2A5
0001020a: SF := 0
.address 0x40C2A7
00010211: mem := mem with [RAX, el]:u32 <- 0xC
.address 0x40C2AD
00010218: goto %00010128

.address 0x40C265
00011457: 
.address 0x40C265
0001145c: RBX := 0x7FFFFFFFFFFFFFFF
.address 0x40C26F
00011463: goto %000100ea

.address 0x40C238
00011522: 
.address 0x40C238
0001152f: #2277 := RBX
.address 0x40C238
00011532: #2278 := RBX
.address 0x40C238
00011535: RBX := RBX + #2278
.address 0x40C238
00011538: CF := RBX < #2277
.address 0x40C238
0001153b: OF := high:1[#2277] = high:1[#2278] & (high:1[#2277] | high:1[RBX]) & ~(
high:1[#2277] & high:1[RBX])
.address 0x40C238
0001153e: AF := 0x10 = (0x10 & (RBX ^ #2277 ^ #2278))
.address 0x40C238
00011541: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C238
00011544: SF := high:1[RBX]
.address 0x40C238
00011547: ZF := 0 = RBX
.address 0x40C23B
0001154e: RDI := RBX
.address 0x40C23E
00011557: RSP := RSP - 8
.address 0x40C23E
0001155a: mem := mem with [RSP, el]:u64 <- 0x40C243
.address 0x40C23E
0001155d: call @sub_403e78 with return %0001155f

.address 0x40C243
0001155f: 
.address 0x40C243
0001156a: #2280 := RAX
.address 0x40C243
0001156d: OF := 0
.address 0x40C243
00011570: CF := 0
.address 0x40C243
00011573: AF := unknown[bits]:u1
.address 0x40C243
00011576: PF := ~low:1[let $1 = #2280 >> 4 ^ #2280 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C243
00011579: SF := high:1[#2280]
.address 0x40C243
0001157c: ZF := 0 = #2280
.address 0x40C246
00011583: RBP := RAX
.address 0x40C249
0001158d: when ~ZF goto %00011587
000449b8: goto %00010128

.address 0x40C24B
00010128: 
.address 0x40C24B
0001013f: #2234 := RSP
.address 0x40C24B
00010142: RSP := RSP + 8
.address 0x40C24B
00010145: CF := RSP < #2234
.address 0x40C24B
00010148: OF := ~high:1[#2234] & (high:1[#2234] | high:1[RSP]) & ~(high:1[#2234] & high:1[RSP])
.address 0x40C24B
0001014b: AF := 0x10 = (0x10 & (RSP ^ #2234 ^ 8))
.address 0x40C24B
0001014e: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C24B
00010151: SF := high:1[RSP]
.address 0x40C24B
00010154: ZF := 0 = RSP
.address 0x40C24F
0001015b: RAX := RBP
.address 0x40C252
00010163: RBX := mem[RSP, el]:u64
.address 0x40C252
00010166: RSP := RSP + 8
.address 0x40C253
0001016e: RBP := mem[RSP, el]:u64
.address 0x40C253
00010171: RSP := RSP + 8
.address 0x40C254
00010179: R12 := mem[RSP, el]:u64
.address 0x40C254
0001017c: RSP := RSP + 8
.address 0x40C256
00010184: R13 := mem[RSP, el]:u64
.address 0x40C256
00010187: RSP := RSP + 8
.address 0x40C258
0001018f: R14 := mem[RSP, el]:u64
.address 0x40C258
00010192: RSP := RSP + 8
.address 0x40C25A
0001019a: R15 := mem[RSP, el]:u64
.address 0x40C25A
0001019d: RSP := RSP + 8
.address 0x40C25C
000101a6: #2237 := mem[RSP, el]:u64
.address 0x40C25C
000101a9: RSP := RSP + 8
.address 0x40C25C
000101ad: call #2237 with noreturn


.address 0x40C2C0
00044135: sub sub_40c2c0()
.address 0x40C2C0
0000e4d0: 
.address 0x40C2C0
0000e4e2: #2034 := R15
.address 0x40C2C0
0000e4e5: RSP := RSP - 8
.address 0x40C2C0
0000e4e8: mem := mem with [RSP, el]:u64 <- #2034
.address 0x40C2C2
0000e4f1: #2035 := R14
.address 0x40C2C2
0000e4f4: RSP := RSP - 8
.address 0x40C2C2
0000e4f7: mem := mem with [RSP, el]:u64 <- #2035
.address 0x40C2C4
0000e4fe: R15 := RSI
.address 0x40C2C7
0000e507: #2036 := R13
.address 0x40C2C7
0000e50a: RSP := RSP - 8
.address 0x40C2C7
0000e50d: mem := mem with [RSP, el]:u64 <- #2036
.address 0x40C2C9
0000e516: #2037 := R12
.address 0x40C2C9
0000e519: RSP := RSP - 8
.address 0x40C2C9
0000e51c: mem := mem with [RSP, el]:u64 <- #2037
.address 0x40C2CB
0000e523: R13 := RCX
.address 0x40C2CE
0000e52c: #2038 := RBP
.address 0x40C2CE
0000e52f: RSP := RSP - 8
.address 0x40C2CE
0000e532: mem := mem with [RSP, el]:u64 <- #2038
.address 0x40C2CF
0000e53b: #2039 := RBX
.address 0x40C2CF
0000e53e: RSP := RSP - 8
.address 0x40C2CF
0000e541: mem := mem with [RSP, el]:u64 <- #2039
.address 0x40C2D0
0000e548: RBP := RDX
.address 0x40C2D3
0000e556: #2040 := RSP
.address 0x40C2D3
0000e559: RSP := RSP - 0x28
.address 0x40C2D3
0000e55c: CF := #2040 < 0x28
.address 0x40C2D3
0000e55f: OF := high:1[(#2040 ^ 0x28) & (#2040 ^ RSP)]
.address 0x40C2D3
0000e562: AF := 0x10 = (0x10 & (RSP ^ #2040 ^ 0x28))
.address 0x40C2D3
0000e565: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C2D3
0000e568: SF := high:1[RSP]
.address 0x40C2D3
0000e56b: ZF := 0 = RSP
.address 0x40C2D7
0000e572: mem := mem with [RSP + 8, el]:u64 <- RDI
.address 0x40C2DC
0000e579: mem := mem with [RSP + 0x18, el]:u64 <- RDX
.address 0x40C2E1
0000e582: RSP := RSP - 8
.address 0x40C2E1
0000e585: mem := mem with [RSP, el]:u64 <- 0x40C2E6
.address 0x40C2E1
0000e588: call @sub_403950 with return %0000e58a

.address 0x40C2E6
0000e58a: 
.address 0x40C2E6
0000e58f: R14 := mem[R15, el]:u64
.address 0x40C2E9
0000e596: mem := mem with [RSP, el]:u64 <- 0xFFFFFFFFFFFFFFFF
.address 0x40C2F1
0000e5a3: #2043 := R14
.address 0x40C2F1
0000e5a6: OF := 0
.address 0x40C2F1
0000e5a9: CF := 0
.address 0x40C2F1
0000e5ac: AF := unknown[bits]:u1
.address 0x40C2F1
0000e5af: PF := ~low:1[let $1 = #2043 >> 4 ^ #2043 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C2F1
0000e5b2: SF := high:1[#2043]
.address 0x40C2F1
0000e5b5: ZF := 0 = #2043
.address 0x40C2F4
0000e5bf: when ZF goto %0000e5b9
000449b9: goto %000144bf

.address 0x40C2FA
000144bf: 
.address 0x40C2FA
000144c4: R12 := RAX
.address 0x40C2FD
000144cb: mem := mem with [RSP + 0x17] <- 0
.address 0x40C302
000144d8: RBX := 0
.address 0x40C302
000144db: AF := unknown[bits]:u1
.address 0x40C302
000144de: ZF := 1
.address 0x40C302
000144e1: PF := 1
.address 0x40C302
000144e4: OF := 0
.address 0x40C302
000144e7: CF := 0
.address 0x40C302
000144ea: SF := 0
.address 0x40C304
000144f1: goto %0000e6ff

.address 0x40C357
0000e6ff: 
.address 0x40C357
0000e704: RSI := mem[RSP + 8, el]:u64
.address 0x40C35C
0000e70b: RDX := R12
.address 0x40C35F
0000e712: RDI := R14
.address 0x40C362
0000e71b: RSP := RSP - 8
.address 0x40C362
0000e71e: mem := mem with [RSP, el]:u64 <- 0x40C367
.address 0x40C362
0000e721: call @sub_403800 with return %0000e723

.address 0x40C367
0000e723: 
.address 0x40C367
0000e72e: #2059 := low:32[RAX]
.address 0x40C367
0000e731: OF := 0
.address 0x40C367
0000e734: CF := 0
.address 0x40C367
0000e737: AF := unknown[bits]:u1
.address 0x40C367
0000e73a: PF := ~low:1[let $1 = #2059 >> 4 ^ #2059 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C367
0000e73d: SF := high:1[#2059]
.address 0x40C367
0000e740: ZF := 0 = #2059
.address 0x40C369
0000e749: when ~ZF goto %0000e649
000449ba: goto %0000e74f

.address 0x40C36B
0000e74f: 
.address 0x40C36B
0000e754: RDI := R14
.address 0x40C36E
0000e75d: RSP := RSP - 8
.address 0x40C36E
0000e760: mem := mem with [RSP, el]:u64 <- 0x40C373
.address 0x40C36E
0000e763: call @sub_403950 with return %0000e765

.address 0x40C373
0000e765: 
.address 0x40C373
0000e770: #2061 := RAX - R12
.address 0x40C373
0000e773: CF := RAX < R12
.address 0x40C373
0000e776: OF := high:1[(RAX ^ R12) & (RAX ^ #2061)]
.address 0x40C373
0000e779: AF := 0x10 = (0x10 & (#2061 ^ RAX ^ R12))
.address 0x40C373
0000e77c: PF := ~low:1[let $1 = #2061 >> 4 ^ #2061 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C373
0000e77f: SF := high:1[#2061]
.address 0x40C373
0000e782: ZF := 0 = #2061
.address 0x40C376
0000e78c: when ZF goto %0000e786
000449bb: goto %0001432d

.address 0x40C3D0
0000e786: 
.address 0x40C3D0
0000e796: mem := mem with [RSP, el]:u64 <- RBX
.address 0x40C3D4
0000e79d: goto %0000e5b9

.address 0x40C378
0001432d: 
.address 0x40C378
00014338: #2644 := mem[RSP, el]:u64 - 0xFFFFFFFFFFFFFFFF
.address 0x40C378
0001433b: CF := mem[RSP, el]:u64 < 0xFFFFFFFFFFFFFFFF
.address 0x40C378
0001433e: OF := high:1[(mem[RSP, el]:u64 ^ 0xFFFFFFFFFFFFFFFF) & (mem[RSP, el]:u64 ^ #2644)]
.address 0x40C378
00014341: AF := 0x10 = (0x10 & (#2644 ^ mem[RSP, el]:u64 ^ 0xFFFFFFFFFFFFFFFF))
.address 0x40C378
00014344: PF := ~low:1[let $1 = #2644 >> 4 ^ #2644 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C378
00014347: SF := high:1[#2644]
.address 0x40C378
0001434a: ZF := 0 = #2644
.address 0x40C37D
00014354: when ~ZF goto %0001434e
000449bc: goto %00014435

.address 0x40C37F
00014435: 
.address 0x40C37F
0001443a: mem := mem with [RSP, el]:u64 <- RBX
.address 0x40C383
00014448: #2654 := RBX
.address 0x40C383
0001444b: RBX := RBX + 1
.address 0x40C383
0001444e: CF := RBX < #2654
.address 0x40C383
00014451: OF := ~high:1[#2654] & (high:1[#2654] | high:1[RBX]) & ~(high:1[#2654] & high:1[RBX])
.address 0x40C383
00014454: AF := 0x10 = (0x10 & (RBX ^ #2654 ^ 1))
.address 0x40C383
00014457: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C383
0001445a: SF := high:1[RBX]
.address 0x40C383
0001445d: ZF := 0 = RBX
.address 0x40C387
0001446c: #2657 := RBP
.address 0x40C387
0001446f: #2658 := R13
.address 0x40C387
00014472: RBP := RBP + #2658
.address 0x40C387
00014475: CF := RBP < #2657
.address 0x40C387
00014478: OF := high:1[#2657] = high:1[#2658] & (high:1[#2657] | high:1[RBP]) & ~(
high:1[#2657] & high:1[RBP])
.address 0x40C387
0001447b: AF := 0x10 = (0x10 & (RBP ^ #2657 ^ #2658))
.address 0x40C387
0001447e: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C387
00014481: SF := high:1[RBP]
.address 0x40C387
00014484: ZF := 0 = RBP
.address 0x40C38A
0001448b: R14 := mem[R15 + (RBX << 3), el]:u64
.address 0x40C38E
00014498: #2660 := R14
.address 0x40C38E
0001449b: OF := 0
.address 0x40C38E
0001449e: CF := 0
.address 0x40C38E
000144a1: AF := unknown[bits]:u1
.address 0x40C38E
000144a4: PF := ~low:1[let $1 = #2660 >> 4 ^ #2660 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C38E
000144a7: SF := high:1[#2660]
.address 0x40C38E
000144aa: ZF := 0 = #2660
.address 0x40C391
000144b3: when ~ZF goto %0000e6ff
000449bd: goto %000144b9

.address 0x40C393
000144b9: 
000449be: goto %0000e6c0

.address 0x40C310
0001434e: 
.address 0x40C310
0001435e: RAX := mem[RSP + 0x18, el]:u64
.address 0x40C315
0001436b: #2646 := RAX
.address 0x40C315
0001436e: OF := 0
.address 0x40C315
00014371: CF := 0
.address 0x40C315
00014374: AF := unknown[bits]:u1
.address 0x40C315
00014377: PF := ~low:1[let $1 = #2646 >> 4 ^ #2646 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C315
0001437a: SF := high:1[#2646]
.address 0x40C315
0001437d: ZF := 0 = #2646
.address 0x40C318
00014386: when ZF goto %0000e640
000449bf: goto %0001438c

.address 0x40C3C0
0000e640: 
.address 0x40C3C0
0000e645: mem := mem with [RSP + 0x17] <- 1
.address 0x40C3C5
0000e64d: goto %0000e649

.address 0x40C31E
0001438c: 
.address 0x40C31E
00014391: RDI := mem[RSP, el]:u64
.address 0x40C322
00014398: RDX := R13
.address 0x40C325
0001439f: RSI := RBP
.address 0x40C328
000143ad: #2648 := extend:128[RDI] * extend:128[R13]
.address 0x40C328
000143b0: RDI := low:64[#2648]
.address 0x40C328
000143b3: OF := #2648 <> extend:128[RDI]
.address 0x40C328
000143b6: CF := #2648 <> extend:128[RDI]
.address 0x40C328
000143b9: PF := unknown[bits]:u1
.address 0x40C328
000143bc: SF := unknown[bits]:u1
.address 0x40C328
000143bf: ZF := unknown[bits]:u1
.address 0x40C328
000143c2: AF := unknown[bits]:u1
.address 0x40C32C
000143d1: #2649 := RDI
.address 0x40C32C
000143d4: #2650 := RAX
.address 0x40C32C
000143d7: RDI := RDI + #2650
.address 0x40C32C
000143da: CF := RDI < #2649
.address 0x40C32C
000143dd: OF := high:1[#2649] = high:1[#2650] & (high:1[#2649] | high:1[RDI]) & ~(
high:1[#2649] & high:1[RDI])
.address 0x40C32C
000143e0: AF := 0x10 = (0x10 & (RDI ^ #2649 ^ #2650))
.address 0x40C32C
000143e3: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C32C
000143e6: SF := high:1[RDI]
.address 0x40C32C
000143e9: ZF := 0 = RDI
.address 0x40C32F
000143f2: RSP := RSP - 8
.address 0x40C32F
000143f5: mem := mem with [RSP, el]:u64 <- 0x40C334
.address 0x40C32F
000143f8: call @sub_403ad0 with return %000143fa

.address 0x40C334
000143fa: 
.address 0x40C334
00014405: #2652 := low:32[RAX]
.address 0x40C334
00014408: OF := 0
.address 0x40C334
0001440b: CF := 0
.address 0x40C334
0001440e: AF := unknown[bits]:u1
.address 0x40C334
00014411: PF := ~low:1[let $1 = #2652 >> 4 ^ #2652 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C334
00014414: SF := high:1[#2652]
.address 0x40C334
00014417: ZF := 0 = #2652
.address 0x40C336
0001441e: RAX := pad:64[pad:32[mem[RSP + 0x17]]]
.address 0x40C33B
00014425: RCX := 1
.address 0x40C340
0001442c: RAX := pad:64[if ~ZF then low:32[RCX] else low:32[RAX]]
.address 0x40C343
00014433: mem := mem with [RSP + 0x17] <- low:8[RAX]
000449c0: goto %0000e649

.address 0x40C347
0000e649: 
.address 0x40C347
0000e65a: #2049 := RBX
.address 0x40C347
0000e65d: RBX := RBX + 1
.address 0x40C347
0000e660: CF := RBX < #2049
.address 0x40C347
0000e663: OF := ~high:1[#2049] & (high:1[#2049] | high:1[RBX]) & ~(high:1[#2049] & high:1[RBX])
.address 0x40C347
0000e666: AF := 0x10 = (0x10 & (RBX ^ #2049 ^ 1))
.address 0x40C347
0000e669: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C347
0000e66c: SF := high:1[RBX]
.address 0x40C347
0000e66f: ZF := 0 = RBX
.address 0x40C34B
0000e67e: #2052 := RBP
.address 0x40C34B
0000e681: #2053 := R13
.address 0x40C34B
0000e684: RBP := RBP + #2053
.address 0x40C34B
0000e687: CF := RBP < #2052
.address 0x40C34B
0000e68a: OF := high:1[#2052] = high:1[#2053] & (high:1[#2052] | high:1[RBP]) & ~(
high:1[#2052] & high:1[RBP])
.address 0x40C34B
0000e68d: AF := 0x10 = (0x10 & (RBP ^ #2052 ^ #2053))
.address 0x40C34B
0000e690: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C34B
0000e693: SF := high:1[RBP]
.address 0x40C34B
0000e696: ZF := 0 = RBP
.address 0x40C34E
0000e69d: R14 := mem[R15 + (RBX << 3), el]:u64
.address 0x40C352
0000e6aa: #2055 := R14
.address 0x40C352
0000e6ad: OF := 0
.address 0x40C352
0000e6b0: CF := 0
.address 0x40C352
0000e6b3: AF := unknown[bits]:u1
.address 0x40C352
0000e6b6: PF := ~low:1[let $1 = #2055 >> 4 ^ #2055 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C352
0000e6b9: SF := high:1[#2055]
.address 0x40C352
0000e6bc: ZF := 0 = #2055
.address 0x40C355
0000e6c6: when ZF goto %0000e6c0
000449c1: goto %0000e6ff

.address 0x40C398
0000e6c0: 
.address 0x40C398
0000e6d6: #2057 := mem[RSP + 0x17]
.address 0x40C398
0000e6d9: CF := mem[RSP + 0x17] < 0
.address 0x40C398
0000e6dc: OF := high:1[mem[RSP + 0x17] & (mem[RSP + 0x17] ^ #2057)]
.address 0x40C398
0000e6df: AF := 0x10 = (0x10 & (#2057 ^ mem[RSP + 0x17]))
.address 0x40C398
0000e6e2: PF := ~low:1[let $1 = #2057 >> 4 ^ #2057 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C398
0000e6e5: SF := high:1[#2057]
.address 0x40C398
0000e6e8: ZF := 0 = #2057
.address 0x40C39D
0000e6ef: RAX := 0xFFFFFFFFFFFFFFFE
.address 0x40C3A4
0000e6f6: RAX := if ZF then mem[RSP, el]:u64 else RAX
.address 0x40C3A9
0000e6fd: mem := mem with [RSP, el]:u64 <- RAX
000449c2: goto %0000e5b9

.address 0x40C3AD
0000e5b9: 
.address 0x40C3AD
0000e5c9: RAX := mem[RSP, el]:u64
.address 0x40C3B1
0000e5d7: #2045 := RSP
.address 0x40C3B1
0000e5da: RSP := RSP + 0x28
.address 0x40C3B1
0000e5dd: CF := RSP < #2045
.address 0x40C3B1
0000e5e0: OF := ~high:1[#2045] & (high:1[#2045] | high:1[RSP]) & ~(high:1[#2045] & high:1[RSP])
.address 0x40C3B1
0000e5e3: AF := 0x10 = (0x10 & (RSP ^ #2045 ^ 0x28))
.address 0x40C3B1
0000e5e6: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C3B1
0000e5e9: SF := high:1[RSP]
.address 0x40C3B1
0000e5ec: ZF := 0 = RSP
.address 0x40C3B5
0000e5f4: RBX := mem[RSP, el]:u64
.address 0x40C3B5
0000e5f7: RSP := RSP + 8
.address 0x40C3B6
0000e5ff: RBP := mem[RSP, el]:u64
.address 0x40C3B6
0000e602: RSP := RSP + 8
.address 0x40C3B7
0000e60a: R12 := mem[RSP, el]:u64
.address 0x40C3B7
0000e60d: RSP := RSP + 8
.address 0x40C3B9
0000e615: R13 := mem[RSP, el]:u64
.address 0x40C3B9
0000e618: RSP := RSP + 8
.address 0x40C3BB
0000e620: R14 := mem[RSP, el]:u64
.address 0x40C3BB
0000e623: RSP := RSP + 8
.address 0x40C3BD
0000e62b: R15 := mem[RSP, el]:u64
.address 0x40C3BD
0000e62e: RSP := RSP + 8
.address 0x40C3BF
0000e637: #2048 := mem[RSP, el]:u64
.address 0x40C3BF
0000e63a: RSP := RSP + 8
.address 0x40C3BF
0000e63e: call #2048 with noreturn


.address 0x40C3E0
00044140: sub sub_40c3e0()
.address 0x40C3E0
0000e7a2: 
.address 0x40C3E0
0000e7ad: #2063 := RDX - 0xFFFFFFFFFFFFFFFF
.address 0x40C3E0
0000e7b0: CF := RDX < 0xFFFFFFFFFFFFFFFF
.address 0x40C3E0
0000e7b3: OF := high:1[(RDX ^ 0xFFFFFFFFFFFFFFFF) & (RDX ^ #2063)]
.address 0x40C3E0
0000e7b6: AF := 0x10 = (0x10 & (#2063 ^ RDX ^ 0xFFFFFFFFFFFFFFFF))
.address 0x40C3E0
0000e7b9: PF := ~low:1[let $1 = #2063 >> 4 ^ #2063 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C3E0
0000e7bc: SF := high:1[#2063]
.address 0x40C3E0
0000e7bf: ZF := 0 = #2063
.address 0x40C3E4
0000e7c8: #2065 := R12
.address 0x40C3E4
0000e7cb: RSP := RSP - 8
.address 0x40C3E4
0000e7ce: mem := mem with [RSP, el]:u64 <- #2065
.address 0x40C3E6
0000e7d5: RDX := 5
.address 0x40C3EB
0000e7de: #2066 := RBP
.address 0x40C3EB
0000e7e1: RSP := RSP - 8
.address 0x40C3EB
0000e7e4: mem := mem with [RSP, el]:u64 <- #2066
.address 0x40C3EC
0000e7eb: R12 := RSI
.address 0x40C3EF
0000e7f4: #2067 := RBX
.address 0x40C3EF
0000e7f7: RSP := RSP - 8
.address 0x40C3EF
0000e7fa: mem := mem with [RSP, el]:u64 <- #2067
.address 0x40C3F0
0000e801: RBP := RDI
.address 0x40C3F3
0000e80b: when ZF goto %0000e805
000449c3: goto %000142f1

.address 0x40C440
0000e805: 
.address 0x40C440
0000e815: RSI := 0x41A2A5
.address 0x40C447
0000e822: RDI := 0
.address 0x40C447
0000e825: AF := unknown[bits]:u1
.address 0x40C447
0000e828: ZF := 1
.address 0x40C447
0000e82b: PF := 1
.address 0x40C447
0000e82e: OF := 0
.address 0x40C447
0000e831: CF := 0
.address 0x40C447
0000e834: SF := 0
.address 0x40C449
0000e83d: RSP := RSP - 8
.address 0x40C449
0000e840: mem := mem with [RSP, el]:u64 <- 0x40C44E
.address 0x40C449
0000e843: call @sub_403930 with return %0000e845

.address 0x40C44E
0000e845: 
.address 0x40C44E
0000e84a: RBX := RAX
.address 0x40C451
0000e852: goto %0000e84e

.address 0x40C3F5
000142f1: 
.address 0x40C3F5
000142f6: RSI := 0x41A2C0
.address 0x40C3FC
00014303: RDI := 0
.address 0x40C3FC
00014306: AF := unknown[bits]:u1
.address 0x40C3FC
00014309: ZF := 1
.address 0x40C3FC
0001430c: PF := 1
.address 0x40C3FC
0001430f: OF := 0
.address 0x40C3FC
00014312: CF := 0
.address 0x40C3FC
00014315: SF := 0
.address 0x40C3FE
0001431e: RSP := RSP - 8
.address 0x40C3FE
00014321: mem := mem with [RSP, el]:u64 <- 0x40C403
.address 0x40C3FE
00014324: call @sub_403930 with return %00014326

.address 0x40C403
00014326: 
.address 0x40C403
0001432b: RBX := RAX
000449c4: goto %0000e84e

.address 0x40C406
0000e84e: 
.address 0x40C406
0000e858: RSI := RBP
.address 0x40C409
0000e85f: RDI := 1
.address 0x40C40E
0000e869: RSP := RSP - 8
.address 0x40C40E
0000e86c: mem := mem with [RSP, el]:u64 <- 0x40C413
.address 0x40C40E
0000e86f: call @sub_413cc0 with return %0000e8c9

.address 0x40C413
0000e8c9: 
.address 0x40C413
0000e8ce: RDX := R12
.address 0x40C416
0000e8d5: RBP := RAX
.address 0x40C419
0000e8dc: RSI := 8
.address 0x40C41E
0000e8e9: RDI := 0
.address 0x40C41E
0000e8ec: AF := unknown[bits]:u1
.address 0x40C41E
0000e8ef: ZF := 1
.address 0x40C41E
0000e8f2: PF := 1
.address 0x40C41E
0000e8f5: OF := 0
.address 0x40C41E
0000e8f8: CF := 0
.address 0x40C41E
0000e8fb: SF := 0
.address 0x40C420
0000e905: RSP := RSP - 8
.address 0x40C420
0000e908: mem := mem with [RSP, el]:u64 <- 0x40C425
.address 0x40C420
0000e90b: call @sub_4138f0 with return %0000f367

.address 0x40C425
0000f367: 
.address 0x40C425
0000f36c: R8 := RBP
.address 0x40C428
0000f373: RDX := RBX
.address 0x40C42B
0000f37a: RCX := RAX
.address 0x40C42E
0000f382: RBX := mem[RSP, el]:u64
.address 0x40C42E
0000f385: RSP := RSP + 8
.address 0x40C42F
0000f38d: RBP := mem[RSP, el]:u64
.address 0x40C42F
0000f390: RSP := RSP + 8
.address 0x40C430
0000f398: R12 := mem[RSP, el]:u64
.address 0x40C430
0000f39b: RSP := RSP + 8
.address 0x40C432
0000f3a8: RSI := 0
.address 0x40C432
0000f3ab: AF := unknown[bits]:u1
.address 0x40C432
0000f3ae: ZF := 1
.address 0x40C432
0000f3b1: PF := 1
.address 0x40C432
0000f3b4: OF := 0
.address 0x40C432
0000f3b7: CF := 0
.address 0x40C432
0000f3ba: SF := 0
.address 0x40C434
0000f3c7: RDI := 0
.address 0x40C434
0000f3ca: AF := unknown[bits]:u1
.address 0x40C434
0000f3cd: ZF := 1
.address 0x40C434
0000f3d0: PF := 1
.address 0x40C434
0000f3d3: OF := 0
.address 0x40C434
0000f3d6: CF := 0
.address 0x40C434
0000f3d9: SF := 0
.address 0x40C436
0000f3e6: RAX := 0
.address 0x40C436
0000f3e9: AF := unknown[bits]:u1
.address 0x40C436
0000f3ec: ZF := 1
.address 0x40C436
0000f3ef: PF := 1
.address 0x40C436
0000f3f2: OF := 0
.address 0x40C436
0000f3f5: CF := 0
.address 0x40C436
0000f3f8: SF := 0
.address 0x40C438
0000f3ff: call @sub_403d20 with noreturn


.address 0x40C460
00044143: sub sub_40c460()
.address 0x40C460
0000f40a: 
.address 0x40C460
0000f411: #2127 := R15
.address 0x40C460
0000f414: RSP := RSP - 8
.address 0x40C460
0000f417: mem := mem with [RSP, el]:u64 <- #2127
.address 0x40C462
0000f420: #2128 := R14
.address 0x40C462
0000f423: RSP := RSP - 8
.address 0x40C462
0000f426: mem := mem with [RSP, el]:u64 <- #2128
.address 0x40C464
0000f42d: R14 := RDI
.address 0x40C467
0000f436: #2129 := R13
.address 0x40C467
0000f439: RSP := RSP - 8
.address 0x40C467
0000f43c: mem := mem with [RSP, el]:u64 <- #2129
.address 0x40C469
0000f445: #2130 := R12
.address 0x40C469
0000f448: RSP := RSP - 8
.address 0x40C469
0000f44b: mem := mem with [RSP, el]:u64 <- #2130
.address 0x40C46B
0000f458: RDI := 0
.address 0x40C46B
0000f45b: AF := unknown[bits]:u1
.address 0x40C46B
0000f45e: ZF := 1
.address 0x40C46B
0000f461: PF := 1
.address 0x40C46B
0000f464: OF := 0
.address 0x40C46B
0000f467: CF := 0
.address 0x40C46B
0000f46a: SF := 0
.address 0x40C46D
0000f473: #2131 := RBP
.address 0x40C46D
0000f476: RSP := RSP - 8
.address 0x40C46D
0000f479: mem := mem with [RSP, el]:u64 <- #2131
.address 0x40C46E
0000f482: #2132 := RBX
.address 0x40C46E
0000f485: RSP := RSP - 8
.address 0x40C46E
0000f488: mem := mem with [RSP, el]:u64 <- #2132
.address 0x40C46F
0000f48f: RBP := RSI
.address 0x40C472
0000f496: RSI := 0x41A2DD
.address 0x40C479
0000f49d: R12 := RDX
.address 0x40C47C
0000f4a4: RDX := 5
.address 0x40C481
0000f4b2: #2133 := RSP
.address 0x40C481
0000f4b5: RSP := RSP - 8
.address 0x40C481
0000f4b8: CF := #2133 < 8
.address 0x40C481
0000f4bb: OF := high:1[(#2133 ^ 8) & (#2133 ^ RSP)]
.address 0x40C481
0000f4be: AF := 0x10 = (0x10 & (RSP ^ #2133 ^ 8))
.address 0x40C481
0000f4c1: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C481
0000f4c4: SF := high:1[RSP]
.address 0x40C481
0000f4c7: ZF := 0 = RSP
.address 0x40C485
0000f4ce: RBX := mem[0x6202C0, el]:u64
.address 0x40C48C
0000f4d7: RSP := RSP - 8
.address 0x40C48C
0000f4da: mem := mem with [RSP, el]:u64 <- 0x40C491
.address 0x40C48C
0000f4dd: call @sub_403930 with return %0000f4df

.address 0x40C491
0000f4df: 
.address 0x40C491
0000f4e4: RDI := RAX
.address 0x40C494
0000f4eb: RSI := RBX
.address 0x40C497
0000f4f4: RSP := RSP - 8
.address 0x40C497
0000f4f7: mem := mem with [RSP, el]:u64 <- 0x40C49C
.address 0x40C497
0000f4fa: call @sub_403af0 with return %0000f4fc

.address 0x40C49C
0000f4fc: 
.address 0x40C49C
0000f501: R15 := mem[R14, el]:u64
.address 0x40C49F
0000f50e: #2136 := R15
.address 0x40C49F
0000f511: OF := 0
.address 0x40C49F
0000f514: CF := 0
.address 0x40C49F
0000f517: AF := unknown[bits]:u1
.address 0x40C49F
0000f51a: PF := ~low:1[let $1 = #2136 >> 4 ^ #2136 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C49F
0000f51d: SF := high:1[#2136]
.address 0x40C49F
0000f520: ZF := 0 = #2136
.address 0x40C4A2
0000f52a: when ZF goto %0000f524
000449c5: goto %00014069

.address 0x40C4A8
00014069: 
.address 0x40C4A8
00014074: R13 := 0
.address 0x40C4A8
00014077: AF := unknown[bits]:u1
.address 0x40C4A8
0001407a: ZF := 1
.address 0x40C4A8
0001407d: PF := 1
.address 0x40C4A8
00014080: OF := 0
.address 0x40C4A8
00014083: CF := 0
.address 0x40C4A8
00014086: SF := 0
.address 0x40C4AB
00014093: RBX := 0
.address 0x40C4AB
00014096: AF := unknown[bits]:u1
.address 0x40C4AB
00014099: ZF := 1
.address 0x40C4AB
0001409c: PF := 1
.address 0x40C4AB
0001409f: OF := 0
.address 0x40C4AB
000140a2: CF := 0
.address 0x40C4AB
000140a5: SF := 0
.address 0x40C4AD
000140ad: goto %000140a9

.address 0x40C4E8
000140a9: 
.address 0x40C4E8
000140b9: #2624 := RBX
.address 0x40C4E8
000140bc: OF := 0
.address 0x40C4E8
000140bf: CF := 0
.address 0x40C4E8
000140c2: AF := unknown[bits]:u1
.address 0x40C4E8
000140c5: PF := ~low:1[let $1 = #2624 >> 4 ^ #2624 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C4E8
000140c8: SF := high:1[#2624]
.address 0x40C4E8
000140cb: ZF := 0 = #2624
.address 0x40C4EB
000140d5: when ZF goto %000140cf
000449c6: goto %000141be

.address 0x40C4ED
000141be: 
.address 0x40C4ED
000141c3: RDX := R12
.address 0x40C4F0
000141ca: RSI := RBP
.address 0x40C4F3
000141d1: RDI := R13
.address 0x40C4F6
000141da: RSP := RSP - 8
.address 0x40C4F6
000141dd: mem := mem with [RSP, el]:u64 <- 0x40C4FB
.address 0x40C4F6
000141e0: call @sub_403ad0 with return %000141e2

.address 0x40C4FB
000141e2: 
.address 0x40C4FB
000141ed: #2634 := low:32[RAX]
.address 0x40C4FB
000141f0: OF := 0
.address 0x40C4FB
000141f3: CF := 0
.address 0x40C4FB
000141f6: AF := unknown[bits]:u1
.address 0x40C4FB
000141f9: PF := ~low:1[let $1 = #2634 >> 4 ^ #2634 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C4FB
000141fc: SF := high:1[#2634]
.address 0x40C4FB
000141ff: ZF := 0 = #2634
.address 0x40C4FD
00014208: when ~ZF goto %000140cf
000449c7: goto %0001420e

.address 0x40C4FF
0001420e: 
.address 0x40C4FF
00014213: RDI := R15
.address 0x40C502
00014221: #2636 := RBX
.address 0x40C502
00014224: RBX := RBX + 1
.address 0x40C502
00014227: CF := RBX < #2636
.address 0x40C502
0001422a: OF := ~high:1[#2636] & (high:1[#2636] | high:1[RBX]) & ~(high:1[#2636] & high:1[RBX])
.address 0x40C502
0001422d: AF := 0x10 = (0x10 & (RBX ^ #2636 ^ 1))
.address 0x40C502
00014230: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C502
00014233: SF := high:1[RBX]
.address 0x40C502
00014236: ZF := 0 = RBX
.address 0x40C506
00014245: #2639 := RBP
.address 0x40C506
00014248: #2640 := R12
.address 0x40C506
0001424b: RBP := RBP + #2640
.address 0x40C506
0001424e: CF := RBP < #2639
.address 0x40C506
00014251: OF := high:1[#2639] = high:1[#2640] & (high:1[#2639] | high:1[RBP]) & ~(
high:1[#2639] & high:1[RBP])
.address 0x40C506
00014254: AF := 0x10 = (0x10 & (RBP ^ #2639 ^ #2640))
.address 0x40C506
00014257: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C506
0001425a: SF := high:1[RBP]
.address 0x40C506
0001425d: ZF := 0 = RBP
.address 0x40C509
00014266: RSP := RSP - 8
.address 0x40C509
00014269: mem := mem with [RSP, el]:u64 <- 0x40C50E
.address 0x40C509
0001426c: call @sub_413ce0 with return %0001426e

.address 0x40C50E
0001426e: 
.address 0x40C50E
00014273: RDI := mem[0x6202C0, el]:u64
.address 0x40C515
0001427a: RDX := 0x41A2FA
.address 0x40C51C
00014281: RCX := RAX
.address 0x40C51F
00014288: RSI := 1
.address 0x40C524
00014295: RAX := 0
.address 0x40C524
00014298: AF := unknown[bits]:u1
.address 0x40C524
0001429b: ZF := 1
.address 0x40C524
0001429e: PF := 1
.address 0x40C524
000142a1: OF := 0
.address 0x40C524
000142a4: CF := 0
.address 0x40C524
000142a7: SF := 0
.address 0x40C526
000142b0: RSP := RSP - 8
.address 0x40C526
000142b3: mem := mem with [RSP, el]:u64 <- 0x40C52B
.address 0x40C526
000142b6: call @sub_403df0 with return %000142b8

.address 0x40C52B
000142b8: 
.address 0x40C52B
000142bd: R15 := mem[R14 + (RBX << 3), el]:u64
.address 0x40C52F
000142ca: #2642 := R15
.address 0x40C52F
000142cd: OF := 0
.address 0x40C52F
000142d0: CF := 0
.address 0x40C52F
000142d3: AF := unknown[bits]:u1
.address 0x40C52F
000142d6: PF := ~low:1[let $1 = #2642 >> 4 ^ #2642 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C52F
000142d9: SF := high:1[#2642]
.address 0x40C52F
000142dc: ZF := 0 = #2642
.address 0x40C532
000142e5: when ~ZF goto %000140a9
000449c8: goto %000142eb

.address 0x40C534
000142eb: 
000449c9: goto %0000f524

.address 0x40C4B0
000140cf: 
.address 0x40C4B0
000140df: RDI := R15
.address 0x40C4B3
000140ed: #2626 := RBX
.address 0x40C4B3
000140f0: RBX := RBX + 1
.address 0x40C4B3
000140f3: CF := RBX < #2626
.address 0x40C4B3
000140f6: OF := ~high:1[#2626] & (high:1[#2626] | high:1[RBX]) & ~(high:1[#2626] & high:1[RBX])
.address 0x40C4B3
000140f9: AF := 0x10 = (0x10 & (RBX ^ #2626 ^ 1))
.address 0x40C4B3
000140fc: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C4B3
000140ff: SF := high:1[RBX]
.address 0x40C4B3
00014102: ZF := 0 = RBX
.address 0x40C4B7
00014109: R13 := RBP
.address 0x40C4BA
00014112: RSP := RSP - 8
.address 0x40C4BA
00014115: mem := mem with [RSP, el]:u64 <- 0x40C4BF
.address 0x40C4BA
00014118: call @sub_413ce0 with return %0001411a

.address 0x40C4BF
0001411a: 
.address 0x40C4BF
0001411f: RDI := mem[0x6202C0, el]:u64
.address 0x40C4C6
00014126: RDX := 0x41A2F2
.address 0x40C4CD
0001412d: RCX := RAX
.address 0x40C4D0
00014134: RSI := 1
.address 0x40C4D5
00014141: RAX := 0
.address 0x40C4D5
00014144: AF := unknown[bits]:u1
.address 0x40C4D5
00014147: ZF := 1
.address 0x40C4D5
0001414a: PF := 1
.address 0x40C4D5
0001414d: OF := 0
.address 0x40C4D5
00014150: CF := 0
.address 0x40C4D5
00014153: SF := 0
.address 0x40C4D7
00014162: #2629 := RBP
.address 0x40C4D7
00014165: #2630 := R12
.address 0x40C4D7
00014168: RBP := RBP + #2630
.address 0x40C4D7
0001416b: CF := RBP < #2629
.address 0x40C4D7
0001416e: OF := high:1[#2629] = high:1[#2630] & (high:1[#2629] | high:1[RBP]) & ~(
high:1[#2629] & high:1[RBP])
.address 0x40C4D7
00014171: AF := 0x10 = (0x10 & (RBP ^ #2629 ^ #2630))
.address 0x40C4D7
00014174: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C4D7
00014177: SF := high:1[RBP]
.address 0x40C4D7
0001417a: ZF := 0 = RBP
.address 0x40C4DA
00014183: RSP := RSP - 8
.address 0x40C4DA
00014186: mem := mem with [RSP, el]:u64 <- 0x40C4DF
.address 0x40C4DA
00014189: call @sub_403df0 with return %0001418b

.address 0x40C4DF
0001418b: 
.address 0x40C4DF
00014190: R15 := mem[R14 + (RBX << 3), el]:u64
.address 0x40C4E3
0001419d: #2632 := R15
.address 0x40C4E3
000141a0: OF := 0
.address 0x40C4E3
000141a3: CF := 0
.address 0x40C4E3
000141a6: AF := unknown[bits]:u1
.address 0x40C4E3
000141a9: PF := ~low:1[let $1 = #2632 >> 4 ^ #2632 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C4E3
000141ac: SF := high:1[#2632]
.address 0x40C4E3
000141af: ZF := 0 = #2632
.address 0x40C4E6
000141b8: when ZF goto %0000f524
000449ca: goto %000140a9

.address 0x40C538
0000f524: 
.address 0x40C538
0000f534: RDI := mem[0x6202C0, el]:u64
.address 0x40C53F
0000f53b: RAX := mem[RDI + 0x28, el]:u64
.address 0x40C543
0000f548: #2138 := RAX - mem[RDI + 0x30, el]:u64
.address 0x40C543
0000f54b: CF := RAX < mem[RDI + 0x30, el]:u64
.address 0x40C543
0000f54e: OF := high:1[(RAX ^ mem[RDI + 0x30, el]:u64) & (RAX ^ #2138)]
.address 0x40C543
0000f551: AF := 0x10 = (0x10 & (#2138 ^ RAX ^ mem[RDI + 0x30, el]:u64))
.address 0x40C543
0000f554: PF := ~low:1[let $1 = #2138 >> 4 ^ #2138 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C543
0000f557: SF := high:1[#2138]
.address 0x40C543
0000f55a: ZF := 0 = #2138
.address 0x40C547
0000f564: when ~CF goto %0000f55e
000449cb: goto %00013fdc

.address 0x40C568
0000f55e: 
.address 0x40C568
0000f575: #2140 := RSP
.address 0x40C568
0000f578: RSP := RSP + 8
.address 0x40C568
0000f57b: CF := RSP < #2140
.address 0x40C568
0000f57e: OF := ~high:1[#2140] & (high:1[#2140] | high:1[RSP]) & ~(high:1[#2140] & high:1[RSP])
.address 0x40C568
0000f581: AF := 0x10 = (0x10 & (RSP ^ #2140 ^ 8))
.address 0x40C568
0000f584: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C568
0000f587: SF := high:1[RSP]
.address 0x40C568
0000f58a: ZF := 0 = RSP
.address 0x40C56C
0000f591: RSI := 0xA
.address 0x40C571
0000f599: RBX := mem[RSP, el]:u64
.address 0x40C571
0000f59c: RSP := RSP + 8
.address 0x40C572
0000f5a4: RBP := mem[RSP, el]:u64
.address 0x40C572
0000f5a7: RSP := RSP + 8
.address 0x40C573
0000f5af: R12 := mem[RSP, el]:u64
.address 0x40C573
0000f5b2: RSP := RSP + 8
.address 0x40C575
0000f5ba: R13 := mem[RSP, el]:u64
.address 0x40C575
0000f5bd: RSP := RSP + 8
.address 0x40C577
0000f5c5: R14 := mem[RSP, el]:u64
.address 0x40C577
0000f5c8: RSP := RSP + 8
.address 0x40C579
0000f5d0: R15 := mem[RSP, el]:u64
.address 0x40C579
0000f5d3: RSP := RSP + 8
.address 0x40C57B
0000f5da: call @sub_4039d0 with noreturn

.address 0x40C549
00013fdc: 
.address 0x40C549
00013fe1: RDX := low:64[RAX + 1]
.address 0x40C54D
00013fe8: mem := mem with [RDI + 0x28, el]:u64 <- RDX
.address 0x40C551
00013fef: mem := mem with [RAX] <- 0xA
.address 0x40C554
00013ffd: #2620 := RSP
.address 0x40C554
00014000: RSP := RSP + 8
.address 0x40C554
00014003: CF := RSP < #2620
.address 0x40C554
00014006: OF := ~high:1[#2620] & (high:1[#2620] | high:1[RSP]) & ~(high:1[#2620] & high:1[RSP])
.address 0x40C554
00014009: AF := 0x10 = (0x10 & (RSP ^ #2620 ^ 8))
.address 0x40C554
0001400c: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C554
0001400f: SF := high:1[RSP]
.address 0x40C554
00014012: ZF := 0 = RSP
.address 0x40C558
0001401a: RBX := mem[RSP, el]:u64
.address 0x40C558
0001401d: RSP := RSP + 8
.address 0x40C559
00014025: RBP := mem[RSP, el]:u64
.address 0x40C559
00014028: RSP := RSP + 8
.address 0x40C55A
00014030: R12 := mem[RSP, el]:u64
.address 0x40C55A
00014033: RSP := RSP + 8
.address 0x40C55C
0001403b: R13 := mem[RSP, el]:u64
.address 0x40C55C
0001403e: RSP := RSP + 8
.address 0x40C55E
00014046: R14 := mem[RSP, el]:u64
.address 0x40C55E
00014049: RSP := RSP + 8
.address 0x40C560
00014051: R15 := mem[RSP, el]:u64
.address 0x40C560
00014054: RSP := RSP + 8
.address 0x40C562
0001405d: #2623 := mem[RSP, el]:u64
.address 0x40C562
00014060: RSP := RSP + 8
.address 0x40C562
00014064: call #2623 with noreturn


.address 0x40C580
0004414b: sub sub_40c580()
.address 0x40C580
0000f5dc: 
.address 0x40C580
0000f5e3: #2143 := R15
.address 0x40C580
0000f5e6: RSP := RSP - 8
.address 0x40C580
0000f5e9: mem := mem with [RSP, el]:u64 <- #2143
.address 0x40C582
0000f5f2: #2144 := R14
.address 0x40C582
0000f5f5: RSP := RSP - 8
.address 0x40C582
0000f5f8: mem := mem with [RSP, el]:u64 <- #2144
.address 0x40C584
0000f5ff: R14 := RDI
.address 0x40C587
0000f608: #2145 := R13
.address 0x40C587
0000f60b: RSP := RSP - 8
.address 0x40C587
0000f60e: mem := mem with [RSP, el]:u64 <- #2145
.address 0x40C589
0000f617: #2146 := R12
.address 0x40C589
0000f61a: RSP := RSP - 8
.address 0x40C589
0000f61d: mem := mem with [RSP, el]:u64 <- #2146
.address 0x40C58B
0000f624: R12 := RSI
.address 0x40C58E
0000f62d: #2147 := RBP
.address 0x40C58E
0000f630: RSP := RSP - 8
.address 0x40C58E
0000f633: mem := mem with [RSP, el]:u64 <- #2147
.address 0x40C58F
0000f63c: #2148 := RBX
.address 0x40C58F
0000f63f: RSP := RSP - 8
.address 0x40C58F
0000f642: mem := mem with [RSP, el]:u64 <- #2148
.address 0x40C590
0000f649: RBP := RCX
.address 0x40C593
0000f650: RBX := RDX
.address 0x40C596
0000f657: RCX := R8
.address 0x40C599
0000f65e: RDX := RBP
.address 0x40C59C
0000f66c: #2149 := RSP
.address 0x40C59C
0000f66f: RSP := RSP - 8
.address 0x40C59C
0000f672: CF := #2149 < 8
.address 0x40C59C
0000f675: OF := high:1[(#2149 ^ 8) & (#2149 ^ RSP)]
.address 0x40C59C
0000f678: AF := 0x10 = (0x10 & (RSP ^ #2149 ^ 8))
.address 0x40C59C
0000f67b: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C59C
0000f67e: SF := high:1[RSP]
.address 0x40C59C
0000f681: ZF := 0 = RSP
.address 0x40C5A0
0000f688: RSI := RBX
.address 0x40C5A3
0000f68f: RDI := R12
.address 0x40C5A6
0000f696: R15 := R8
.address 0x40C5A9
0000f69d: R13 := R9
.address 0x40C5AC
0000f6a6: RSP := RSP - 8
.address 0x40C5AC
0000f6a9: mem := mem with [RSP, el]:u64 <- 0x40C5B1
.address 0x40C5AC
0000f6ac: call @sub_40c2c0 with return %0000f6ae

.address 0x40C5B1
0000f6ae: 
.address 0x40C5B1
0000f6b9: #2152 := RAX
.address 0x40C5B1
0000f6bc: OF := 0
.address 0x40C5B1
0000f6bf: CF := 0
.address 0x40C5B1
0000f6c2: AF := unknown[bits]:u1
.address 0x40C5B1
0000f6c5: PF := ~low:1[let $1 = #2152 >> 4 ^ #2152 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C5B1
0000f6c8: SF := high:1[#2152]
.address 0x40C5B1
0000f6cb: ZF := 0 = #2152
.address 0x40C5B4
0000f6d5: when SF goto %0000f6cf
000449cc: goto %0000f73f

.address 0x40C5C5
0000f6cf: 
.address 0x40C5C5
0000f6df: RDX := RAX
.address 0x40C5C8
0000f6e6: RSI := R12
.address 0x40C5CB
0000f6ed: RDI := R14
.address 0x40C5CE
0000f6f6: RSP := RSP - 8
.address 0x40C5CE
0000f6f9: mem := mem with [RSP, el]:u64 <- 0x40C5D3
.address 0x40C5CE
0000f6fc: call @sub_40c3e0 with return %0000f6fe

.address 0x40C5D3
0000f6fe: 
.address 0x40C5D3
0000f703: RDX := R15
.address 0x40C5D6
0000f70a: RSI := RBP
.address 0x40C5D9
0000f711: RDI := RBX
.address 0x40C5DC
0000f71a: RSP := RSP - 8
.address 0x40C5DC
0000f71d: mem := mem with [RSP, el]:u64 <- 0x40C5E1
.address 0x40C5DC
0000f720: call @sub_40c460 with return %0000f722

.address 0x40C5E1
0000f722: 
.address 0x40C5E1
0000f72a: #2154 := R13
.address 0x40C5E1
0000f72d: RSP := RSP - 8
.address 0x40C5E1
0000f730: mem := mem with [RSP, el]:u64 <- 0x40C5E4
.address 0x40C5E1
0000f734: call #2154 with return %0000f736

.address 0x40C5E4
0000f736: 
.address 0x40C5E4
0000f73b: RAX := 0xFFFFFFFFFFFFFFFF
.address 0x40C5EB
0000f743: goto %0000f73f

.address 0x40C5B6
0000f73f: 
.address 0x40C5B6
0000f750: #2155 := RSP
.address 0x40C5B6
0000f753: RSP := RSP + 8
.address 0x40C5B6
0000f756: CF := RSP < #2155
.address 0x40C5B6
0000f759: OF := ~high:1[#2155] & (high:1[#2155] | high:1[RSP]) & ~(high:1[#2155] & high:1[RSP])
.address 0x40C5B6
0000f75c: AF := 0x10 = (0x10 & (RSP ^ #2155 ^ 8))
.address 0x40C5B6
0000f75f: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C5B6
0000f762: SF := high:1[RSP]
.address 0x40C5B6
0000f765: ZF := 0 = RSP
.address 0x40C5BA
0000f76d: RBX := mem[RSP, el]:u64
.address 0x40C5BA
0000f770: RSP := RSP + 8
.address 0x40C5BB
0000f778: RBP := mem[RSP, el]:u64
.address 0x40C5BB
0000f77b: RSP := RSP + 8
.address 0x40C5BC
0000f783: R12 := mem[RSP, el]:u64
.address 0x40C5BC
0000f786: RSP := RSP + 8
.address 0x40C5BE
0000f78e: R13 := mem[RSP, el]:u64
.address 0x40C5BE
0000f791: RSP := RSP + 8
.address 0x40C5C0
0000f799: R14 := mem[RSP, el]:u64
.address 0x40C5C0
0000f79c: RSP := RSP + 8
.address 0x40C5C2
0000f7a4: R15 := mem[RSP, el]:u64
.address 0x40C5C2
0000f7a7: RSP := RSP + 8
.address 0x40C5C4
0000f7b0: #2158 := mem[RSP, el]:u64
.address 0x40C5C4
0000f7b3: RSP := RSP + 8
.address 0x40C5C4
0000f7b7: call #2158 with noreturn


.address 0x40C5F0
0004414d: sub sub_40c5f0()
.address 0x40C5F0
0000f7bc: 
.address 0x40C5F0
0000f7c3: #2159 := R14
.address 0x40C5F0
0000f7c6: RSP := RSP - 8
.address 0x40C5F0
0000f7c9: mem := mem with [RSP, el]:u64 <- #2159
.address 0x40C5F2
0000f7d2: #2160 := R13
.address 0x40C5F2
0000f7d5: RSP := RSP - 8
.address 0x40C5F2
0000f7d8: mem := mem with [RSP, el]:u64 <- #2160
.address 0x40C5F4
0000f7e1: #2161 := R12
.address 0x40C5F4
0000f7e4: RSP := RSP - 8
.address 0x40C5F4
0000f7e7: mem := mem with [RSP, el]:u64 <- #2161
.address 0x40C5F6
0000f7f0: #2162 := RBP
.address 0x40C5F6
0000f7f3: RSP := RSP - 8
.address 0x40C5F6
0000f7f6: mem := mem with [RSP, el]:u64 <- #2162
.address 0x40C5F7
0000f7ff: #2163 := RBX
.address 0x40C5F7
0000f802: RSP := RSP - 8
.address 0x40C5F7
0000f805: mem := mem with [RSP, el]:u64 <- #2163
.address 0x40C5F8
0000f80c: R14 := mem[RSI, el]:u64
.address 0x40C5FB
0000f819: #2164 := R14
.address 0x40C5FB
0000f81c: OF := 0
.address 0x40C5FB
0000f81f: CF := 0
.address 0x40C5FB
0000f822: AF := unknown[bits]:u1
.address 0x40C5FB
0000f825: PF := ~low:1[let $1 = #2164 >> 4 ^ #2164 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C5FB
0000f828: SF := high:1[#2164]
.address 0x40C5FB
0000f82b: ZF := 0 = #2164
.address 0x40C5FE
0000f835: when ZF goto %0000f82f
000449cd: goto %00013ee9

.address 0x40C600
00013ee9: 
.address 0x40C600
00013eee: R12 := RCX
.address 0x40C603
00013ef5: R13 := RDI
.address 0x40C606
00013efc: RBP := RDX
.address 0x40C609
00013f03: RBX := low:64[RSI + 8]
.address 0x40C60D
00013f0b: goto %00013f07

.address 0x40C61F
00013f07: 
.address 0x40C61F
00013f11: RDX := R12
.address 0x40C622
00013f18: RSI := RBP
.address 0x40C625
00013f1f: RDI := R13
.address 0x40C628
00013f28: RSP := RSP - 8
.address 0x40C628
00013f2b: mem := mem with [RSP, el]:u64 <- 0x40C62D
.address 0x40C628
00013f2e: call @sub_403ad0 with return %00013f30

.address 0x40C62D
00013f30: 
.address 0x40C62D
00013f3b: #2610 := low:32[RAX]
.address 0x40C62D
00013f3e: OF := 0
.address 0x40C62D
00013f41: CF := 0
.address 0x40C62D
00013f44: AF := unknown[bits]:u1
.address 0x40C62D
00013f47: PF := ~low:1[let $1 = #2610 >> 4 ^ #2610 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C62D
00013f4a: SF := high:1[#2610]
.address 0x40C62D
00013f4d: ZF := 0 = #2610
.address 0x40C62F
00013f57: when ~ZF goto %00013f51
000449ce: goto %0000f82f

.address 0x40C610
00013f51: 
.address 0x40C610
00013f61: R14 := mem[RBX, el]:u64
.address 0x40C613
00013f70: #2612 := RBP
.address 0x40C613
00013f73: #2613 := R12
.address 0x40C613
00013f76: RBP := RBP + #2613
.address 0x40C613
00013f79: CF := RBP < #2612
.address 0x40C613
00013f7c: OF := high:1[#2612] = high:1[#2613] & (high:1[#2612] | high:1[RBP]) & ~(
high:1[#2612] & high:1[RBP])
.address 0x40C613
00013f7f: AF := 0x10 = (0x10 & (RBP ^ #2612 ^ #2613))
.address 0x40C613
00013f82: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C613
00013f85: SF := high:1[RBP]
.address 0x40C613
00013f88: ZF := 0 = RBP
.address 0x40C616
00013f96: #2615 := RBX
.address 0x40C616
00013f99: RBX := RBX + 8
.address 0x40C616
00013f9c: CF := RBX < #2615
.address 0x40C616
00013f9f: OF := ~high:1[#2615] & (high:1[#2615] | high:1[RBX]) & ~(high:1[#2615] & high:1[RBX])
.address 0x40C616
00013fa2: AF := 0x10 = (0x10 & (RBX ^ #2615 ^ 8))
.address 0x40C616
00013fa5: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C616
00013fa8: SF := high:1[RBX]
.address 0x40C616
00013fab: ZF := 0 = RBX
.address 0x40C61A
00013fb8: #2618 := R14
.address 0x40C61A
00013fbb: OF := 0
.address 0x40C61A
00013fbe: CF := 0
.address 0x40C61A
00013fc1: AF := unknown[bits]:u1
.address 0x40C61A
00013fc4: PF := ~low:1[let $1 = #2618 >> 4 ^ #2618 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C61A
00013fc7: SF := high:1[#2618]
.address 0x40C61A
00013fca: ZF := 0 = #2618
.address 0x40C61D
00013fd3: when ZF goto %0000f82f
000449cf: goto %00013f07

.address 0x40C631
0000f82f: 
.address 0x40C631
0000f840: RBX := mem[RSP, el]:u64
.address 0x40C631
0000f843: RSP := RSP + 8
.address 0x40C632
0000f84a: RAX := R14
.address 0x40C635
0000f852: RBP := mem[RSP, el]:u64
.address 0x40C635
0000f855: RSP := RSP + 8
.address 0x40C636
0000f85d: R12 := mem[RSP, el]:u64
.address 0x40C636
0000f860: RSP := RSP + 8
.address 0x40C638
0000f868: R13 := mem[RSP, el]:u64
.address 0x40C638
0000f86b: RSP := RSP + 8
.address 0x40C63A
0000f873: R14 := mem[RSP, el]:u64
.address 0x40C63A
0000f876: RSP := RSP + 8
.address 0x40C63C
0000f87f: #2166 := mem[RSP, el]:u64
.address 0x40C63C
0000f882: RSP := RSP + 8
.address 0x40C63C
0000f886: call #2166 with noreturn


.address 0x40C640
00044151: sub sub_40c640()
.address 0x40C640
0000f88b: 
.address 0x40C640
0000f892: #2167 := R15
.address 0x40C640
0000f895: RSP := RSP - 8
.address 0x40C640
0000f898: mem := mem with [RSP, el]:u64 <- #2167
.address 0x40C642
0000f8a1: #2168 := R14
.address 0x40C642
0000f8a4: RSP := RSP - 8
.address 0x40C642
0000f8a7: mem := mem with [RSP, el]:u64 <- #2168
.address 0x40C644
0000f8b0: #2169 := R13
.address 0x40C644
0000f8b3: RSP := RSP - 8
.address 0x40C644
0000f8b6: mem := mem with [RSP, el]:u64 <- #2169
.address 0x40C646
0000f8bf: #2170 := R12
.address 0x40C646
0000f8c2: RSP := RSP - 8
.address 0x40C646
0000f8c5: mem := mem with [RSP, el]:u64 <- #2170
.address 0x40C648
0000f8ce: #2171 := RBP
.address 0x40C648
0000f8d1: RSP := RSP - 8
.address 0x40C648
0000f8d4: mem := mem with [RSP, el]:u64 <- #2171
.address 0x40C649
0000f8dd: #2172 := RBX
.address 0x40C649
0000f8e0: RSP := RSP - 8
.address 0x40C649
0000f8e3: mem := mem with [RSP, el]:u64 <- #2172
.address 0x40C64A
0000f8f1: #2173 := RSP
.address 0x40C64A
0000f8f4: RSP := RSP - 0xE8
.address 0x40C64A
0000f8f7: CF := #2173 < 0xE8
.address 0x40C64A
0000f8fa: OF := high:1[(#2173 ^ 0xE8) & (#2173 ^ RSP)]
.address 0x40C64A
0000f8fd: AF := 0x10 = (0x10 & (RSP ^ #2173 ^ 0xE8))
.address 0x40C64A
0000f900: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C64A
0000f903: SF := high:1[RSP]
.address 0x40C64A
0000f906: ZF := 0 = RSP
.address 0x40C651
0000f90d: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x40C65A
0000f914: mem := mem with [RSP + 0xD8, el]:u64 <- RAX
.address 0x40C662
0000f921: RAX := 0
.address 0x40C662
0000f924: AF := unknown[bits]:u1
.address 0x40C662
0000f927: ZF := 1
.address 0x40C662
0000f92a: PF := 1
.address 0x40C662
0000f92d: OF := 0
.address 0x40C662
0000f930: CF := 0
.address 0x40C662
0000f933: SF := 0
.address 0x40C664
0000f93a: RAX := pad:64[low:32[RSI]]
.address 0x40C666
0000f947: RAX := pad:64[low:32[RAX] & 4]
.address 0x40C666
0000f94a: OF := 0
.address 0x40C666
0000f94d: CF := 0
.address 0x40C666
0000f950: AF := unknown[bits]:u1
.address 0x40C666
0000f953: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C666
0000f956: SF := high:1[low:32[RAX]]
.address 0x40C666
0000f959: ZF := 0 = low:32[RAX]
.address 0x40C669
0000f960: mem := mem with [RSP + 0x1B] <- pad:8[~ZF]
.address 0x40C66E
0000f96d: RSI := pad:64[low:32[RSI] & 3]
.address 0x40C66E
0000f970: OF := 0
.address 0x40C66E
0000f973: CF := 0
.address 0x40C66E
0000f976: AF := unknown[bits]:u1
.address 0x40C66E
0000f979: PF := ~low:1[let $1 = low:32[RSI] >> 4 ^ low:32[RSI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C66E
0000f97c: SF := high:1[low:32[RSI]]
.address 0x40C66E
0000f97f: ZF := 0 = low:32[RSI]
.address 0x40C671
0000f986: mem := mem with [RSP + 0x1C, el]:u32 <- low:32[RAX]
.address 0x40C675
0000f98d: RAX := pad:64[low:32[RSI - 1]]
.address 0x40C678
0000f994: mem := mem with [RSP + 4, el]:u32 <- low:32[RSI]
.address 0x40C67C
0000f9a1: #2178 := low:32[RSI] & low:32[RAX]
.address 0x40C67C
0000f9a4: OF := 0
.address 0x40C67C
0000f9a7: CF := 0
.address 0x40C67C
0000f9aa: AF := unknown[bits]:u1
.address 0x40C67C
0000f9ad: PF := ~low:1[let $1 = #2178 >> 4 ^ #2178 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C67C
0000f9b0: SF := high:1[#2178]
.address 0x40C67C
0000f9b3: ZF := 0 = #2178
.address 0x40C67E
0000f9bd: when ~ZF goto %0000f9b7
000449d0: goto %0001262e

.address 0x40C684
0001262e: 
.address 0x40C684
00012639: #2427 := RDI
.address 0x40C684
0001263c: OF := 0
.address 0x40C684
0001263f: CF := 0
.address 0x40C684
00012642: AF := unknown[bits]:u1
.address 0x40C684
00012645: PF := ~low:1[let $1 = #2427 >> 4 ^ #2427 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C684
00012648: SF := high:1[#2427]
.address 0x40C684
0001264b: ZF := 0 = #2427
.address 0x40C687
00012652: R14 := RDI
.address 0x40C68A
0001265b: when ZF goto %0000f9b7
000449d1: goto %00012661

.address 0x40CBD0
0000f9b7: 
.address 0x40CBD0
0000f9c9: RSP := RSP - 8
.address 0x40CBD0
0000f9cc: mem := mem with [RSP, el]:u64 <- 0x40CBD5
.address 0x40CBD0
0000f9cf: call @sub_4037f0 with return %0000f9d1

.address 0x40CBD5
0000f9d1: 
.address 0x40CBD5
0000f9dc: RBP := 0
.address 0x40CBD5
0000f9df: AF := unknown[bits]:u1
.address 0x40CBD5
0000f9e2: ZF := 1
.address 0x40CBD5
0000f9e5: PF := 1
.address 0x40CBD5
0000f9e8: OF := 0
.address 0x40CBD5
0000f9eb: CF := 0
.address 0x40CBD5
0000f9ee: SF := 0
.address 0x40CBD7
0000f9f5: mem := mem with [RAX, el]:u32 <- 0x16
.address 0x40CBDD
0000f9fd: goto %0000f9f9

.address 0x40C690
00012661: 
.address 0x40C690
00012666: RAX := pad:64[pad:32[mem[RDI]]]
.address 0x40C693
00012673: #2429 := low:8[RAX]
.address 0x40C693
00012676: OF := 0
.address 0x40C693
00012679: CF := 0
.address 0x40C693
0001267c: AF := unknown[bits]:u1
.address 0x40C693
0001267f: PF := ~low:1[let $1 = #2429 >> 4 ^ #2429 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C693
00012682: SF := high:1[#2429]
.address 0x40C693
00012685: ZF := 0 = #2429
.address 0x40C695
0001268e: when ZF goto %00012026
000449d2: goto %00012694

.address 0x40CC10
00012026: 
.address 0x40CC10
0001202d: RSP := RSP - 8
.address 0x40CC10
00012030: mem := mem with [RSP, el]:u64 <- 0x40CC15
.address 0x40CC10
00012033: call @sub_4037f0 with return %00012035

.address 0x40CC15
00012035: 
.address 0x40CC15
00012040: RBP := 0
.address 0x40CC15
00012043: AF := unknown[bits]:u1
.address 0x40CC15
00012046: ZF := 1
.address 0x40CC15
00012049: PF := 1
.address 0x40CC15
0001204c: OF := 0
.address 0x40CC15
0001204f: CF := 0
.address 0x40CC15
00012052: SF := 0
.address 0x40CC17
00012059: mem := mem with [RAX, el]:u32 <- 2
.address 0x40CC1D
00012060: goto %0000f9f9

.address 0x40C69B
00012694: 
.address 0x40C69B
0001269f: #2431 := low:8[RAX] - 0x2F
.address 0x40C69B
000126a2: CF := low:8[RAX] < 0x2F
.address 0x40C69B
000126a5: OF := high:1[(low:8[RAX] ^ 0x2F) & (low:8[RAX] ^ #2431)]
.address 0x40C69B
000126a8: AF := 0x10 = (0x10 & (#2431 ^ low:8[RAX] ^ 0x2F))
.address 0x40C69B
000126ab: PF := ~low:1[let $1 = #2431 >> 4 ^ #2431 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C69B
000126ae: SF := high:1[#2431]
.address 0x40C69B
000126b1: ZF := 0 = #2431
.address 0x40C69D
000126ba: when ZF goto %00012401
000449d3: goto %000126c0

.address 0x40C6A3
000126c0: 
.address 0x40C6A3
000126c8: RSP := RSP - 8
.address 0x40C6A3
000126cb: mem := mem with [RSP, el]:u64 <- 0x40C6A8
.address 0x40C6A3
000126ce: call @sub_414840 with return %00013e3f

.address 0x40C6A8
00013e3f: 
.address 0x40C6A8
00013e4a: #2603 := RAX
.address 0x40C6A8
00013e4d: OF := 0
.address 0x40C6A8
00013e50: CF := 0
.address 0x40C6A8
00013e53: AF := unknown[bits]:u1
.address 0x40C6A8
00013e56: PF := ~low:1[let $1 = #2603 >> 4 ^ #2603 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C6A8
00013e59: SF := high:1[#2603]
.address 0x40C6A8
00013e5c: ZF := 0 = #2603
.address 0x40C6AB
00013e63: RBP := RAX
.address 0x40C6AE
00013e6c: when ZF goto %0000f9f9
000449d4: goto %00013e72

.address 0x40C6B4
00013e72: 
.address 0x40C6B4
00013e77: RDI := RAX
.address 0x40C6B7
00013e80: RSP := RSP - 8
.address 0x40C6B7
00013e83: mem := mem with [RSP, el]:u64 <- 0x40C6BC
.address 0x40C6B7
00013e86: call @sub_403950 with return %00013e88

.address 0x40C6BC
00013e88: 
.address 0x40C6BC
00013e93: #2605 := RAX - 0xFFF
.address 0x40C6BC
00013e96: CF := RAX < 0xFFF
.address 0x40C6BC
00013e99: OF := high:1[(RAX ^ 0xFFF) & (RAX ^ #2605)]
.address 0x40C6BC
00013e9c: AF := 0x10 = (0x10 & (#2605 ^ RAX ^ 0xFFF))
.address 0x40C6BC
00013e9f: PF := ~low:1[let $1 = #2605 >> 4 ^ #2605 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C6BC
00013ea2: SF := high:1[#2605]
.address 0x40C6BC
00013ea5: ZF := 0 = #2605
.address 0x40C6C2
00013eac: R15 := RAX
.address 0x40C6C5
00013eb5: when CF | ZF goto %00012464
000449d5: goto %00013ebb

.address 0x40CB80
00012464: 
.address 0x40CB80
00012469: RDI := RBP
.address 0x40CB83
00012470: RSI := 0x1000
.address 0x40CB88
00012479: RSP := RSP - 8
.address 0x40CB88
0001247c: mem := mem with [RSP, el]:u64 <- 0x40CB8D
.address 0x40CB88
0001247f: call @sub_4144e0 with return %00012481

.address 0x40CB8D
00012481: 
.address 0x40CB8D
00012486: RBP := RAX
.address 0x40CB90
00012495: #2412 := R15
.address 0x40CB90
00012498: #2413 := RAX
.address 0x40CB90
0001249b: R15 := R15 + #2413
.address 0x40CB90
0001249e: CF := R15 < #2412
.address 0x40CB90
000124a1: OF := high:1[#2412] = high:1[#2413] & (high:1[#2412] | high:1[R15]) & ~(
high:1[#2412] & high:1[R15])
.address 0x40CB90
000124a4: AF := 0x10 = (0x10 & (R15 ^ #2412 ^ #2413))
.address 0x40CB90
000124a7: PF := ~low:1[let $1 = R15 >> 4 ^ R15 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CB90
000124aa: SF := high:1[R15]
.address 0x40CB90
000124ad: ZF := 0 = R15
.address 0x40CB93
000124b4: RBX := low:64[RAX + 0x1000]
.address 0x40CB9A
000124bb: goto %00012435

.address 0x40C6CB
00013ebb: 
.address 0x40C6CB
00013ec8: #2607 := R15
.address 0x40C6CB
00013ecb: #2608 := RBP
.address 0x40C6CB
00013ece: R15 := R15 + #2608
.address 0x40C6CB
00013ed1: CF := R15 < #2607
.address 0x40C6CB
00013ed4: OF := high:1[#2607] = high:1[#2608] & (high:1[#2607] | high:1[R15]) & ~(
high:1[#2607] & high:1[R15])
.address 0x40C6CB
00013ed7: AF := 0x10 = (0x10 & (R15 ^ #2607 ^ #2608))
.address 0x40C6CB
00013eda: PF := ~low:1[let $1 = R15 >> 4 ^ R15 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C6CB
00013edd: SF := high:1[R15]
.address 0x40C6CB
00013ee0: ZF := 0 = R15
.address 0x40C6CE
00013ee7: RBX := R15
000449d6: goto %00012435

.address 0x40C6D1
00012435: 
.address 0x40C6D1
0001243f: RAX := low:64[RSP + 0x40]
.address 0x40C6D6
00012446: mem := mem with [RSP + 0x20, el]:u64 <- R14
.address 0x40C6DB
0001244d: mem := mem with [RSP + 0x10, el]:u64 <- 0
.address 0x40C6E4
00012454: mem := mem with [RSP + 0x30, el]:u64 <- 0
.address 0x40C6ED
0001245b: mem := mem with [RSP + 0x28, el]:u64 <- 0
.address 0x40C6F6
00012462: mem := mem with [RSP + 8, el]:u64 <- RAX
000449d7: goto %00011ccc

.address 0x40C6FB
00011ccc: 
.address 0x40C6FB
00011cd6: RAX := pad:64[pad:32[mem[R14]]]
.address 0x40C6FF
00011ce3: #2343 := low:8[RAX]
.address 0x40C6FF
00011ce6: OF := 0
.address 0x40C6FF
00011ce9: CF := 0
.address 0x40C6FF
00011cec: AF := unknown[bits]:u1
.address 0x40C6FF
00011cef: PF := ~low:1[let $1 = #2343 >> 4 ^ #2343 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C6FF
00011cf2: SF := high:1[#2343]
.address 0x40C6FF
00011cf5: ZF := 0 = #2343
.address 0x40C701
00011cfe: when ZF goto %0001176f
000449d8: goto %00011d04

.address 0x40C707
00011d04: 
000449d9: goto %00011ab4

.address 0x40C710
00011ab4: 
.address 0x40C710
00011aca: #2323 := low:8[RAX] - 0x2F
.address 0x40C710
00011acd: CF := low:8[RAX] < 0x2F
.address 0x40C710
00011ad0: OF := high:1[(low:8[RAX] ^ 0x2F) & (low:8[RAX] ^ #2323)]
.address 0x40C710
00011ad3: AF := 0x10 = (0x10 & (#2323 ^ low:8[RAX] ^ 0x2F))
.address 0x40C710
00011ad6: PF := ~low:1[let $1 = #2323 >> 4 ^ #2323 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C710
00011ad9: SF := high:1[#2323]
.address 0x40C710
00011adc: ZF := 0 = #2323
.address 0x40C712
00011ae6: when ~ZF goto %00011ae0
000449da: goto %00011b7e

.address 0x40C714
00011b7e: 
000449db: goto %00011b81

.address 0x40C718
00011b81: 
.address 0x40C718
00011b8d: #2332 := R14
.address 0x40C718
00011b90: R14 := R14 + 1
.address 0x40C718
00011b93: CF := R14 < #2332
.address 0x40C718
00011b96: OF := ~high:1[#2332] & (high:1[#2332] | high:1[R14]) & ~(high:1[#2332] & high:1[R14])
.address 0x40C718
00011b99: AF := 0x10 = (0x10 & (R14 ^ #2332 ^ 1))
.address 0x40C718
00011b9c: PF := ~low:1[let $1 = R14 >> 4 ^ R14 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C718
00011b9f: SF := high:1[R14]
.address 0x40C718
00011ba2: ZF := 0 = R14
.address 0x40C71C
00011ba9: RAX := pad:64[pad:32[mem[R14]]]
.address 0x40C720
00011bb6: #2335 := low:8[RAX] - 0x2F
.address 0x40C720
00011bb9: CF := low:8[RAX] < 0x2F
.address 0x40C720
00011bbc: OF := high:1[(low:8[RAX] ^ 0x2F) & (low:8[RAX] ^ #2335)]
.address 0x40C720
00011bbf: AF := 0x10 = (0x10 & (#2335 ^ low:8[RAX] ^ 0x2F))
.address 0x40C720
00011bc2: PF := ~low:1[let $1 = #2335 >> 4 ^ #2335 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C720
00011bc5: SF := high:1[#2335]
.address 0x40C720
00011bc8: ZF := 0 = #2335
.address 0x40C722
00011bd1: when ZF goto %00011b81
000449dc: goto %00011bd7

.address 0x40C724
00011bd7: 
.address 0x40C724
00011be2: #2337 := low:8[RAX]
.address 0x40C724
00011be5: OF := 0
.address 0x40C724
00011be8: CF := 0
.address 0x40C724
00011beb: AF := unknown[bits]:u1
.address 0x40C724
00011bee: PF := ~low:1[let $1 = #2337 >> 4 ^ #2337 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C724
00011bf1: SF := high:1[#2337]
.address 0x40C724
00011bf4: ZF := 0 = #2337
.address 0x40C726
00011bfd: when ZF goto %00011740
000449dd: goto %00011ae0

.address 0x40C9F0
00011740: 
.address 0x40C9F0
00011745: R13 := R14
.address 0x40C9F3
0001174d: goto %00011749

.address 0x40C72C
00011ae0: 
.address 0x40C72C
00011af0: R13 := R14
.address 0x40C72F
00011af8: goto %00011af4

.address 0x40C73D
00011af4: 
.address 0x40C73D
00011b05: #2325 := R13
.address 0x40C73D
00011b08: R13 := R13 + 1
.address 0x40C73D
00011b0b: CF := R13 < #2325
.address 0x40C73D
00011b0e: OF := ~high:1[#2325] & (high:1[#2325] | high:1[R13]) & ~(high:1[#2325] & high:1[R13])
.address 0x40C73D
00011b11: AF := 0x10 = (0x10 & (R13 ^ #2325 ^ 1))
.address 0x40C73D
00011b14: PF := ~low:1[let $1 = R13 >> 4 ^ R13 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C73D
00011b17: SF := high:1[R13]
.address 0x40C73D
00011b1a: ZF := 0 = R13
.address 0x40C741
00011b21: RDX := pad:64[pad:32[mem[R13]]]
.address 0x40C746
00011b2e: #2328 := low:8[RDX]
.address 0x40C746
00011b31: OF := 0
.address 0x40C746
00011b34: CF := 0
.address 0x40C746
00011b37: AF := unknown[bits]:u1
.address 0x40C746
00011b3a: PF := ~low:1[let $1 = #2328 >> 4 ^ #2328 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C746
00011b3d: SF := high:1[#2328]
.address 0x40C746
00011b40: ZF := 0 = #2328
.address 0x40C748
00011b4a: when ~ZF goto %00011b44
000449de: goto %00011749

.address 0x40C738
00011b44: 
.address 0x40C738
00011b5a: #2330 := low:8[RDX] - 0x2F
.address 0x40C738
00011b5d: CF := low:8[RDX] < 0x2F
.address 0x40C738
00011b60: OF := high:1[(low:8[RDX] ^ 0x2F) & (low:8[RDX] ^ #2330)]
.address 0x40C738
00011b63: AF := 0x10 = (0x10 & (#2330 ^ low:8[RDX] ^ 0x2F))
.address 0x40C738
00011b66: PF := ~low:1[let $1 = #2330 >> 4 ^ #2330 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C738
00011b69: SF := high:1[#2330]
.address 0x40C738
00011b6c: ZF := 0 = #2330
.address 0x40C73B
00011b75: when ZF goto %00011749
000449df: goto %00011af4

.address 0x40C74A
00011749: 
.address 0x40C74A
00011759: #2288 := R13 - R14
.address 0x40C74A
0001175c: CF := R13 < R14
.address 0x40C74A
0001175f: OF := high:1[(R13 ^ R14) & (R13 ^ #2288)]
.address 0x40C74A
00011762: AF := 0x10 = (0x10 & (#2288 ^ R13 ^ R14))
.address 0x40C74A
00011765: PF := ~low:1[let $1 = #2288 >> 4 ^ #2288 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C74A
00011768: SF := high:1[#2288]
.address 0x40C74A
0001176b: ZF := 0 = #2288
.address 0x40C74D
00011775: when ZF goto %0001176f
000449e0: goto %000118e3

.address 0x40C753
000118e3: 
.address 0x40C753
000118e8: R12 := R13
.address 0x40C756
000118f7: #2304 := R12
.address 0x40C756
000118fa: #2305 := R14
.address 0x40C756
000118fd: R12 := R12 - R14
.address 0x40C756
00011900: CF := #2304 < #2305
.address 0x40C756
00011903: OF := high:1[(#2304 ^ #2305) & (#2304 ^ R12)]
.address 0x40C756
00011906: AF := 0x10 = (0x10 & (R12 ^ #2304 ^ #2305))
.address 0x40C756
00011909: PF := ~low:1[let $1 = R12 >> 4 ^ R12 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C756
0001190c: SF := high:1[R12]
.address 0x40C756
0001190f: ZF := 0 = R12
.address 0x40C759
0001191c: #2307 := R12 - 1
.address 0x40C759
0001191f: CF := R12 < 1
.address 0x40C759
00011922: OF := high:1[(R12 ^ 1) & (R12 ^ #2307)]
.address 0x40C759
00011925: AF := 0x10 = (0x10 & (#2307 ^ R12 ^ 1))
.address 0x40C759
00011928: PF := ~low:1[let $1 = #2307 >> 4 ^ #2307 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C759
0001192b: SF := high:1[#2307]
.address 0x40C759
0001192e: ZF := 0 = #2307
.address 0x40C75D
00011938: when ZF goto %00011932
000449e1: goto %00011e4b

.address 0x40C930
00011932: 
.address 0x40C930
00011948: #2309 := low:8[RAX] - 0x2E
.address 0x40C930
0001194b: CF := low:8[RAX] < 0x2E
.address 0x40C930
0001194e: OF := high:1[(low:8[RAX] ^ 0x2E) & (low:8[RAX] ^ #2309)]
.address 0x40C930
00011951: AF := 0x10 = (0x10 & (#2309 ^ low:8[RAX] ^ 0x2E))
.address 0x40C930
00011954: PF := ~low:1[let $1 = #2309 >> 4 ^ #2309 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C930
00011957: SF := high:1[#2309]
.address 0x40C930
0001195a: ZF := 0 = #2309
.address 0x40C932
00011964: when ~ZF goto %0001195e
000449e2: goto %00011e41

.address 0x40C938
00011e41: 
.address 0x40C938
00011e46: goto %00011a7a

.address 0x40C763
00011e4b: 
.address 0x40C763
00011e56: #2365 := R12 - 2
.address 0x40C763
00011e59: CF := R12 < 2
.address 0x40C763
00011e5c: OF := high:1[(R12 ^ 2) & (R12 ^ #2365)]
.address 0x40C763
00011e5f: AF := 0x10 = (0x10 & (#2365 ^ R12 ^ 2))
.address 0x40C763
00011e62: PF := ~low:1[let $1 = #2365 >> 4 ^ #2365 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C763
00011e65: SF := high:1[#2365]
.address 0x40C763
00011e68: ZF := 0 = #2365
.address 0x40C767
00011e71: when ~ZF goto %0001195e
000449e3: goto %00011e77

.address 0x40C769
00011e77: 
.address 0x40C769
00011e82: #2367 := low:8[RAX] - 0x2E
.address 0x40C769
00011e85: CF := low:8[RAX] < 0x2E
.address 0x40C769
00011e88: OF := high:1[(low:8[RAX] ^ 0x2E) & (low:8[RAX] ^ #2367)]
.address 0x40C769
00011e8b: AF := 0x10 = (0x10 & (#2367 ^ low:8[RAX] ^ 0x2E))
.address 0x40C769
00011e8e: PF := ~low:1[let $1 = #2367 >> 4 ^ #2367 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C769
00011e91: SF := high:1[#2367]
.address 0x40C769
00011e94: ZF := 0 = #2367
.address 0x40C76B
00011e9e: when ZF goto %00011e98
000449e4: goto %0001195e

.address 0x40CA00
00011e98: 
.address 0x40CA00
00011eae: #2369 := mem[R14 + 1] - 0x2E
.address 0x40CA00
00011eb1: CF := mem[R14 + 1] < 0x2E
.address 0x40CA00
00011eb4: OF := high:1[(mem[R14 + 1] ^ 0x2E) & (mem[R14 + 1] ^ #2369)]
.address 0x40CA00
00011eb7: AF := 0x10 = (0x10 & (#2369 ^ mem[R14 + 1] ^ 0x2E))
.address 0x40CA00
00011eba: PF := ~low:1[let $1 = #2369 >> 4 ^ #2369 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CA00
00011ebd: SF := high:1[#2369]
.address 0x40CA00
00011ec0: ZF := 0 = #2369
.address 0x40CA05
00011ec9: when ~ZF goto %0001195e
000449e5: goto %00011ecf

.address 0x40CA0B
00011ecf: 
.address 0x40CA0B
00011ed4: RAX := low:64[RBP + 1]
.address 0x40CA0F
00011edb: R14 := R13
.address 0x40CA12
00011ee8: #2371 := R15 - RAX
.address 0x40CA12
00011eeb: CF := R15 < RAX
.address 0x40CA12
00011eee: OF := high:1[(R15 ^ RAX) & (R15 ^ #2371)]
.address 0x40CA12
00011ef1: AF := 0x10 = (0x10 & (#2371 ^ R15 ^ RAX))
.address 0x40CA12
00011ef4: PF := ~low:1[let $1 = #2371 >> 4 ^ #2371 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CA12
00011ef7: SF := high:1[#2371]
.address 0x40CA12
00011efa: ZF := 0 = #2371
.address 0x40CA15
00011f03: when CF | ZF goto %00011ccc
000449e6: goto %00011f09

.address 0x40CA1B
00011f09: 
.address 0x40CA1B
00011f0e: RAX := low:64[R15 - 1]
.address 0x40CA1F
00011f1b: #2373 := RBP - RAX
.address 0x40CA1F
00011f1e: CF := RBP < RAX
.address 0x40CA1F
00011f21: OF := high:1[(RBP ^ RAX) & (RBP ^ #2373)]
.address 0x40CA1F
00011f24: AF := 0x10 = (0x10 & (#2373 ^ RBP ^ RAX))
.address 0x40CA1F
00011f27: PF := ~low:1[let $1 = #2373 >> 4 ^ #2373 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CA1F
00011f2a: SF := high:1[#2373]
.address 0x40CA1F
00011f2d: ZF := 0 = #2373
.address 0x40CA22
00011f36: when ~CF goto %00011cc3
000449e7: goto %00011f3c

.address 0x40CC69
00011cc3: 
.address 0x40CC69
00011cc8: R15 := RAX
.address 0x40CC6C
00011cd0: goto %00011ccc

.address 0x40CA28
00011f3c: 
.address 0x40CA28
00011f47: #2375 := mem[R15 - 2] - 0x2F
.address 0x40CA28
00011f4a: CF := mem[R15 - 2] < 0x2F
.address 0x40CA28
00011f4d: OF := high:1[(mem[R15 - 2] ^ 0x2F) & (mem[R15 - 2] ^ #2375)]
.address 0x40CA28
00011f50: AF := 0x10 = (0x10 & (#2375 ^ mem[R15 - 2] ^ 0x2F))
.address 0x40CA28
00011f53: PF := ~low:1[let $1 = #2375 >> 4 ^ #2375 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CA28
00011f56: SF := high:1[#2375]
.address 0x40CA28
00011f59: ZF := 0 = #2375
.address 0x40CA2D
00011f60: R15 := RAX
.address 0x40CA30
00011f69: when ZF goto %00011ccc
000449e8: goto %00011f6f

.address 0x40CA36
00011f6f: 
.address 0x40CA36
00011f7b: #2377 := R15
.address 0x40CA36
00011f7e: R15 := R15 - 1
.address 0x40CA36
00011f81: CF := #2377 < 1
.address 0x40CA36
00011f84: OF := high:1[(#2377 ^ 1) & (#2377 ^ R15)]
.address 0x40CA36
00011f87: AF := 0x10 = (0x10 & (R15 ^ #2377 ^ 1))
.address 0x40CA36
00011f8a: PF := ~low:1[let $1 = R15 >> 4 ^ R15 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CA36
00011f8d: SF := high:1[R15]
.address 0x40CA36
00011f90: ZF := 0 = R15
.address 0x40CA3A
00011f9d: #2380 := RBP - R15
.address 0x40CA3A
00011fa0: CF := RBP < R15
.address 0x40CA3A
00011fa3: OF := high:1[(RBP ^ R15) & (RBP ^ #2380)]
.address 0x40CA3A
00011fa6: AF := 0x10 = (0x10 & (#2380 ^ RBP ^ R15))
.address 0x40CA3A
00011fa9: PF := ~low:1[let $1 = #2380 >> 4 ^ #2380 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CA3A
00011fac: SF := high:1[#2380]
.address 0x40CA3A
00011faf: ZF := 0 = #2380
.address 0x40CA3D
00011fb8: when ZF goto %00011a7a
000449e9: goto %00011fbe

.address 0x40CA43
00011fbe: 
.address 0x40CA43
00011fc9: #2382 := mem[R15 - 1] - 0x2F
.address 0x40CA43
00011fcc: CF := mem[R15 - 1] < 0x2F
.address 0x40CA43
00011fcf: OF := high:1[(mem[R15 - 1] ^ 0x2F) & (mem[R15 - 1] ^ #2382)]
.address 0x40CA43
00011fd2: AF := 0x10 = (0x10 & (#2382 ^ mem[R15 - 1] ^ 0x2F))
.address 0x40CA43
00011fd5: PF := ~low:1[let $1 = #2382 >> 4 ^ #2382 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CA43
00011fd8: SF := high:1[#2382]
.address 0x40CA43
00011fdb: ZF := 0 = #2382
.address 0x40CA48
00011fe4: when ZF goto %00011a7a
000449ea: goto %00011fea

.address 0x40CA4E
00011fea: 
.address 0x40CA4E
00011fef: goto %00011f6f

.address 0x40C771
0001195e: 
.address 0x40C771
00011974: #2311 := mem[R15 - 1] - 0x2F
.address 0x40C771
00011977: CF := mem[R15 - 1] < 0x2F
.address 0x40C771
0001197a: OF := high:1[(mem[R15 - 1] ^ 0x2F) & (mem[R15 - 1] ^ #2311)]
.address 0x40C771
0001197d: AF := 0x10 = (0x10 & (#2311 ^ mem[R15 - 1] ^ 0x2F))
.address 0x40C771
00011980: PF := ~low:1[let $1 = #2311 >> 4 ^ #2311 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C771
00011983: SF := high:1[#2311]
.address 0x40C771
00011986: ZF := 0 = #2311
.address 0x40C776
00011990: when ZF goto %0001198a
000449eb: goto %00011e17

.address 0x40C778
00011e17: 
.address 0x40C778
00011e1c: mem := mem with [R15] <- 0x2F
.address 0x40C77C
00011e2a: #2362 := R15
.address 0x40C77C
00011e2d: R15 := R15 + 1
.address 0x40C77C
00011e30: CF := R15 < #2362
.address 0x40C77C
00011e33: OF := ~high:1[#2362] & (high:1[#2362] | high:1[R15]) & ~(high:1[#2362] & high:1[R15])
.address 0x40C77C
00011e36: AF := 0x10 = (0x10 & (R15 ^ #2362 ^ 1))
.address 0x40C77C
00011e39: PF := ~low:1[let $1 = R15 >> 4 ^ R15 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C77C
00011e3c: SF := high:1[R15]
.address 0x40C77C
00011e3f: ZF := 0 = R15
000449ec: goto %0001198a

.address 0x40C780
0001198a: 
.address 0x40C780
0001199a: RAX := low:64[R15 + R12]
.address 0x40C784
000119a7: #2313 := RBX - RAX
.address 0x40C784
000119aa: CF := RBX < RAX
.address 0x40C784
000119ad: OF := high:1[(RBX ^ RAX) & (RBX ^ #2313)]
.address 0x40C784
000119b0: AF := 0x10 = (0x10 & (#2313 ^ RBX ^ RAX))
.address 0x40C784
000119b3: PF := ~low:1[let $1 = #2313 >> 4 ^ #2313 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C784
000119b6: SF := high:1[#2313]
.address 0x40C784
000119b9: ZF := 0 = #2313
.address 0x40C787
000119c3: when ~(CF | ZF) goto %000119bd
000449ed: goto %00011d07

.address 0x40C789
00011d07: 
.address 0x40C789
00011d14: #2345 := RBX
.address 0x40C789
00011d17: #2346 := RBP
.address 0x40C789
00011d1a: RBX := RBX - RBP
.address 0x40C789
00011d1d: CF := #2345 < #2346
.address 0x40C789
00011d20: OF := high:1[(#2345 ^ #2346) & (#2345 ^ RBX)]
.address 0x40C789
00011d23: AF := 0x10 = (0x10 & (RBX ^ #2345 ^ #2346))
.address 0x40C789
00011d26: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C789
00011d29: SF := high:1[RBX]
.address 0x40C789
00011d2c: ZF := 0 = RBX
.address 0x40C78C
00011d3b: #2348 := R15
.address 0x40C78C
00011d3e: #2349 := RBP
.address 0x40C78C
00011d41: R15 := R15 - RBP
.address 0x40C78C
00011d44: CF := #2348 < #2349
.address 0x40C78C
00011d47: OF := high:1[(#2348 ^ #2349) & (#2348 ^ R15)]
.address 0x40C78C
00011d4a: AF := 0x10 = (0x10 & (R15 ^ #2348 ^ #2349))
.address 0x40C78C
00011d4d: PF := ~low:1[let $1 = R15 >> 4 ^ R15 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C78C
00011d50: SF := high:1[R15]
.address 0x40C78C
00011d53: ZF := 0 = R15
.address 0x40C78F
00011d5a: RDI := RBP
.address 0x40C792
00011d61: RAX := low:64[R12 + RBX + 1]
.address 0x40C797
00011d6f: #2351 := RBX
.address 0x40C797
00011d72: RBX := RBX + 0x1000
.address 0x40C797
00011d75: CF := RBX < #2351
.address 0x40C797
00011d78: OF := ~high:1[#2351] & (high:1[#2351] | high:1[RBX]) & ~(high:1[#2351] & high:1[RBX])
.address 0x40C797
00011d7b: AF := 0x10 = (0x10 & (RBX ^ #2351 ^ 0x1000))
.address 0x40C797
00011d7e: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C797
00011d81: SF := high:1[RBX]
.address 0x40C797
00011d84: ZF := 0 = RBX
.address 0x40C79E
00011d91: #2354 := R12 - 0x1000
.address 0x40C79E
00011d94: CF := R12 < 0x1000
.address 0x40C79E
00011d97: OF := high:1[(R12 ^ 0x1000) & (R12 ^ #2354)]
.address 0x40C79E
00011d9a: AF := 0x10 = (0x10 & (#2354 ^ R12 ^ 0x1000))
.address 0x40C79E
00011d9d: PF := ~low:1[let $1 = #2354 >> 4 ^ #2354 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C79E
00011da0: SF := high:1[#2354]
.address 0x40C79E
00011da3: ZF := 0 = #2354
.address 0x40C7A5
00011daa: RBX := if ~((SF | OF) & ~(SF & OF)) then RAX else RBX
.address 0x40C7A9
00011db1: RSI := RBX
.address 0x40C7AC
00011dba: RSP := RSP - 8
.address 0x40C7AC
00011dbd: mem := mem with [RSP, el]:u64 <- 0x40C7B1
.address 0x40C7AC
00011dc0: call @sub_4144e0 with return %00011dc2

.address 0x40C7B1
00011dc2: 
.address 0x40C7B1
00011dc7: RBP := RAX
.address 0x40C7B4
00011dd6: #2356 := RBX
.address 0x40C7B4
00011dd9: #2357 := RAX
.address 0x40C7B4
00011ddc: RBX := RBX + #2357
.address 0x40C7B4
00011ddf: CF := RBX < #2356
.address 0x40C7B4
00011de2: OF := high:1[#2356] = high:1[#2357] & (high:1[#2356] | high:1[RBX]) & ~(
high:1[#2356] & high:1[RBX])
.address 0x40C7B4
00011de5: AF := 0x10 = (0x10 & (RBX ^ #2356 ^ #2357))
.address 0x40C7B4
00011de8: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C7B4
00011deb: SF := high:1[RBX]
.address 0x40C7B4
00011dee: ZF := 0 = RBX
.address 0x40C7B7
00011dfd: #2359 := R15
.address 0x40C7B7
00011e00: #2360 := RAX
.address 0x40C7B7
00011e03: R15 := R15 + #2360
.address 0x40C7B7
00011e06: CF := R15 < #2359
.address 0x40C7B7
00011e09: OF := high:1[#2359] = high:1[#2360] & (high:1[#2359] | high:1[R15]) & ~(
high:1[#2359] & high:1[R15])
.address 0x40C7B7
00011e0c: AF := 0x10 = (0x10 & (R15 ^ #2359 ^ #2360))
.address 0x40C7B7
00011e0f: PF := ~low:1[let $1 = R15 >> 4 ^ R15 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C7B7
00011e12: SF := high:1[R15]
.address 0x40C7B7
00011e15: ZF := 0 = R15
000449ee: goto %000119bd

.address 0x40C7BA
000119bd: 
.address 0x40C7BA
000119cd: RDI := R15
.address 0x40C7BD
000119d4: RDX := R12
.address 0x40C7C0
000119db: RSI := R14
.address 0x40C7C3
000119e4: RSP := RSP - 8
.address 0x40C7C3
000119e7: mem := mem with [RSP, el]:u64 <- 0x40C7C8
.address 0x40C7C3
000119ea: call @sub_403b80 with return %000119ec

.address 0x40C7C8
000119ec: 
.address 0x40C7C8
000119f7: #2315 := mem[RSP + 4, el]:u32 - 2
.address 0x40C7C8
000119fa: CF := mem[RSP + 4, el]:u32 < 2
.address 0x40C7C8
000119fd: OF := high:1[(mem[RSP + 4, el]:u32 ^ 2) & (mem[RSP + 4, el]:u32 ^ #2315)]
.address 0x40C7C8
00011a00: AF := 0x10 = (0x10 & (#2315 ^ mem[RSP + 4, el]:u32 ^ 2))
.address 0x40C7C8
00011a03: PF := ~low:1[let $1 = #2315 >> 4 ^ #2315 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C7C8
00011a06: SF := high:1[#2315]
.address 0x40C7C8
00011a09: ZF := 0 = #2315
.address 0x40C7CD
00011a10: R15 := low:64[R15 + R12]
.address 0x40C7D1
00011a17: mem := mem with [R15] <- 0
.address 0x40C7D5
00011a20: when ~ZF goto %0000fde5
000449ef: goto %00011a26

.address 0x40C7DB
00011a26: 
.address 0x40C7DB
00011a31: #2317 := mem[RSP + 0x1B]
.address 0x40C7DB
00011a34: CF := mem[RSP + 0x1B] < 0
.address 0x40C7DB
00011a37: OF := high:1[mem[RSP + 0x1B] & (mem[RSP + 0x1B] ^ #2317)]
.address 0x40C7DB
00011a3a: AF := 0x10 = (0x10 & (#2317 ^ mem[RSP + 0x1B]))
.address 0x40C7DB
00011a3d: PF := ~low:1[let $1 = #2317 >> 4 ^ #2317 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C7DB
00011a40: SF := high:1[#2317]
.address 0x40C7DB
00011a43: ZF := 0 = #2317
.address 0x40C7E0
00011a4c: when ZF goto %0000fde5
000449f0: goto %00011a52

.address 0x40C890
0000fde5: 
.address 0x40C890
0000fdea: RAX := pad:64[mem[RSP + 0x1C, el]:u32]
.address 0x40C894
0000fdf1: RDX := mem[RSP + 8, el]:u64
.address 0x40C899
0000fdf8: RSI := RBP
.address 0x40C89C
0000fdff: RDI := 1
.address 0x40C8A1
0000fe0c: #2206 := low:32[RAX]
.address 0x40C8A1
0000fe0f: OF := 0
.address 0x40C8A1
0000fe12: CF := 0
.address 0x40C8A1
0000fe15: AF := unknown[bits]:u1
.address 0x40C8A1
0000fe18: PF := ~low:1[let $1 = #2206 >> 4 ^ #2206 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C8A1
0000fe1b: SF := high:1[#2206]
.address 0x40C8A1
0000fe1e: ZF := 0 = #2206
.address 0x40C8A3
0000fe28: when ZF goto %0000fe22
000449f1: goto %000125f9

.address 0x40C960
0000fe22: 
.address 0x40C960
0000fe34: RSP := RSP - 8
.address 0x40C960
0000fe37: mem := mem with [RSP, el]:u64 <- 0x40C965
.address 0x40C960
0000fe3a: call @sub_403960 with return %0000fe3c

.address 0x40C965
0000fe3c: 
.address 0x40C965
0000fe47: #2208 := low:32[RAX]
.address 0x40C965
0000fe4a: OF := 0
.address 0x40C965
0000fe4d: CF := 0
.address 0x40C965
0000fe50: AF := unknown[bits]:u1
.address 0x40C965
0000fe53: PF := ~low:1[let $1 = #2208 >> 4 ^ #2208 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C965
0000fe56: SF := high:1[#2208]
.address 0x40C965
0000fe59: ZF := 0 = #2208
.address 0x40C967
0000fe60: RAX := extract:63:8[RAX].pad:8[~ZF]
.address 0x40C96A
0000fe68: goto %0000fe64

.address 0x40C8A9
000125f9: 
.address 0x40C8A9
00012600: RSP := RSP - 8
.address 0x40C8A9
00012603: mem := mem with [RSP, el]:u64 <- 0x40C8AE
.address 0x40C8A9
00012606: call @sub_403be0 with return %00012608

.address 0x40C8AE
00012608: 
.address 0x40C8AE
00012613: #2425 := low:32[RAX]
.address 0x40C8AE
00012616: OF := 0
.address 0x40C8AE
00012619: CF := 0
.address 0x40C8AE
0001261c: AF := unknown[bits]:u1
.address 0x40C8AE
0001261f: PF := ~low:1[let $1 = #2425 >> 4 ^ #2425 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C8AE
00012622: SF := high:1[#2425]
.address 0x40C8AE
00012625: ZF := 0 = #2425
.address 0x40C8B0
0001262c: RAX := extract:63:8[RAX].pad:8[~ZF]
000449f2: goto %0000fe64

.address 0x40C8B3
0000fe64: 
.address 0x40C8B3
0000fe74: #2210 := low:8[RAX]
.address 0x40C8B3
0000fe77: OF := 0
.address 0x40C8B3
0000fe7a: CF := 0
.address 0x40C8B3
0000fe7d: AF := unknown[bits]:u1
.address 0x40C8B3
0000fe80: PF := ~low:1[let $1 = #2210 >> 4 ^ #2210 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C8B3
0000fe83: SF := high:1[#2210]
.address 0x40C8B3
0000fe86: ZF := 0 = #2210
.address 0x40C8B5
0000fe90: when ZF goto %0000fe8a
000449f3: goto %000124f0

.address 0x40C940
0000fe8a: 
.address 0x40C940
0000fe9a: RAX := pad:64[mem[RSP + 0x58, el]:u32]
.address 0x40C944
0000fea7: RAX := pad:64[low:32[RAX] & 0xF000]
.address 0x40C944
0000feaa: OF := 0
.address 0x40C944
0000fead: CF := 0
.address 0x40C944
0000feb0: AF := unknown[bits]:u1
.address 0x40C944
0000feb3: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C944
0000feb6: SF := high:1[low:32[RAX]]
.address 0x40C944
0000feb9: ZF := 0 = low:32[RAX]
.address 0x40C949
0000fec6: #2213 := low:32[RAX] - 0xA000
.address 0x40C949
0000fec9: CF := low:32[RAX] < 0xA000
.address 0x40C949
0000fecc: OF := high:1[(low:32[RAX] ^ 0xA000) & (low:32[RAX] ^ #2213)]
.address 0x40C949
0000fecf: AF := 0x10 = (0x10 & (#2213 ^ low:32[RAX] ^ 0xA000))
.address 0x40C949
0000fed2: PF := ~low:1[let $1 = #2213 >> 4 ^ #2213 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C949
0000fed5: SF := high:1[#2213]
.address 0x40C949
0000fed8: ZF := 0 = #2213
.address 0x40C94E
0000fee2: when ZF goto %0000fedc
000449f4: goto %000124bd

.address 0x40C970
0000fedc: 
.address 0x40C970
0000fef2: #2215 := mem[RSP + 0x10, el]:u64
.address 0x40C970
0000fef5: CF := mem[RSP + 0x10, el]:u64 < 0
.address 0x40C970
0000fef8: OF := high:1[mem[RSP + 0x10, el]:u64 & (mem[RSP + 0x10, el]:u64 ^ #2215)]
.address 0x40C970
0000fefb: AF := 0x10 = (0x10 & (#2215 ^ mem[RSP + 0x10, el]:u64))
.address 0x40C970
0000fefe: PF := ~low:1[let $1 = #2215 >> 4 ^ #2215 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C970
0000ff01: SF := high:1[#2215]
.address 0x40C970
0000ff04: ZF := 0 = #2215
.address 0x40C976
0000ff0e: when ZF goto %0000ff08
000449f5: goto %0000ff85

.address 0x40CB26
0000ff08: 
.address 0x40CB26
0000ff18: R8 := 0x40EC20
.address 0x40CB2D
0000ff1f: RCX := 0x40EBE0
.address 0x40CB34
0000ff2c: RSI := 0
.address 0x40CB34
0000ff2f: AF := unknown[bits]:u1
.address 0x40CB34
0000ff32: ZF := 1
.address 0x40CB34
0000ff35: PF := 1
.address 0x40CB34
0000ff38: OF := 0
.address 0x40CB34
0000ff3b: CF := 0
.address 0x40CB34
0000ff3e: SF := 0
.address 0x40CB36
0000ff45: RDX := 0x40EB70
.address 0x40CB3D
0000ff4c: RDI := 7
.address 0x40CB42
0000ff55: RSP := RSP - 8
.address 0x40CB42
0000ff58: mem := mem with [RSP, el]:u64 <- 0x40CB47
.address 0x40CB42
0000ff5b: call @sub_40e100 with return %0000ff5d

.address 0x40CB47
0000ff5d: 
.address 0x40CB47
0000ff68: #2217 := RAX
.address 0x40CB47
0000ff6b: OF := 0
.address 0x40CB47
0000ff6e: CF := 0
.address 0x40CB47
0000ff71: AF := unknown[bits]:u1
.address 0x40CB47
0000ff74: PF := ~low:1[let $1 = #2217 >> 4 ^ #2217 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CB47
0000ff77: SF := high:1[#2217]
.address 0x40CB47
0000ff7a: ZF := 0 = #2217
.address 0x40CB4A
0000ff81: mem := mem with [RSP + 0x10, el]:u64 <- RAX
.address 0x40CB4F
0000ff8b: when ~ZF goto %0000ff85
000449f6: goto %000123ef

.address 0x40CB55
000123ef: 
.address 0x40CB55
000123f6: RSP := RSP - 8
.address 0x40CB55
000123f9: mem := mem with [RSP, el]:u64 <- 0x40CB5A
.address 0x40CB55
000123fc: call @sub_4146d0 with return %000123fe

.address 0x40CB5A
000123fe: 
000449f7: goto %00012401

.address 0x40CB60
00012401: 
.address 0x40CB60
00012406: RDI := 0x1000
.address 0x40CB65
0001240f: RSP := RSP - 8
.address 0x40CB65
00012412: mem := mem with [RSP, el]:u64 <- 0x40CB6A
.address 0x40CB65
00012415: call @sub_414480 with return %00012417

.address 0x40CB6A
00012417: 
.address 0x40CB6A
0001241c: RBP := RAX
.address 0x40CB6D
00012423: RBX := low:64[RAX + 0x1000]
.address 0x40CB74
0001242a: R15 := low:64[RAX + 1]
.address 0x40CB78
00012431: mem := mem with [RAX] <- 0x2F
.address 0x40CB7B
00012439: goto %00012435

.address 0x40C97C
0000ff85: 
.address 0x40C97C
0000ff95: RDX := mem[RSP + 8, el]:u64
.address 0x40C981
0000ff9c: RSI := mem[RSP + 0x20, el]:u64
.address 0x40C986
0000ffa3: RDI := mem[RSP + 0x10, el]:u64
.address 0x40C98B
0000ffac: RSP := RSP - 8
.address 0x40C98B
0000ffaf: mem := mem with [RSP, el]:u64 <- 0x40C990
.address 0x40C98B
0000ffb2: call @sub_40d000 with return %0000ffb4

.address 0x40C990
0000ffb4: 
.address 0x40C990
0000ffbf: #2219 := low:8[RAX]
.address 0x40C990
0000ffc2: OF := 0
.address 0x40C990
0000ffc5: CF := 0
.address 0x40C990
0000ffc8: AF := unknown[bits]:u1
.address 0x40C990
0000ffcb: PF := ~low:1[let $1 = #2219 >> 4 ^ #2219 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C990
0000ffce: SF := high:1[#2219]
.address 0x40C990
0000ffd1: ZF := 0 = #2219
.address 0x40C992
0000ffdb: when ZF goto %0000ffd5
000449f8: goto %000123a6

.address 0x40CA50
0000ffd5: 
.address 0x40CA50
0000ffe5: RDX := mem[RSP + 8, el]:u64
.address 0x40CA55
0000ffec: RSI := mem[RSP + 0x20, el]:u64
.address 0x40CA5A
0000fff3: RDI := mem[RSP + 0x10, el]:u64
.address 0x40CA5F
0000fffc: RSP := RSP - 8
.address 0x40CA5F
0000ffff: mem := mem with [RSP, el]:u64 <- 0x40CA64
.address 0x40CA5F
00010002: call @sub_40cf70 with return %00010004

.address 0x40CA64
00010004: 
.address 0x40CA64
00010009: RSI := mem[RSP + 0x70, el]:u64
.address 0x40CA69
00010010: RDI := RBP
.address 0x40CA6C
0001001a: RSP := RSP - 8
.address 0x40CA6C
0001001d: mem := mem with [RSP, el]:u64 <- 0x40CA71
.address 0x40CA6C
00010020: call @sub_40c1c0 with return %00011628

.address 0x40CA71
00011628: 
.address 0x40CA71
00011633: #2284 := RAX
.address 0x40CA71
00011636: OF := 0
.address 0x40CA71
00011639: CF := 0
.address 0x40CA71
0001163c: AF := unknown[bits]:u1
.address 0x40CA71
0001163f: PF := ~low:1[let $1 = #2284 >> 4 ^ #2284 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CA71
00011642: SF := high:1[#2284]
.address 0x40CA71
00011645: ZF := 0 = #2284
.address 0x40CA74
0001164c: R14 := RAX
.address 0x40CA77
00011656: when ZF goto %00011650
000449f9: goto %00012168

.address 0x40CBE2
00011650: 
.address 0x40CBE2
00011662: RSP := RSP - 8
.address 0x40CBE2
00011665: mem := mem with [RSP, el]:u64 <- 0x40CBE7
.address 0x40CBE2
00011668: call @sub_4037f0 with return %0001166a

.address 0x40CBE7
0001166a: 
.address 0x40CBE7
00011675: #2286 := mem[RSP + 4, el]:u32 - 2
.address 0x40CBE7
00011678: CF := mem[RSP + 4, el]:u32 < 2
.address 0x40CBE7
0001167b: OF := high:1[(mem[RSP + 4, el]:u32 ^ 2) & (mem[RSP + 4, el]:u32 ^ #2286)]
.address 0x40CBE7
0001167e: AF := 0x10 = (0x10 & (#2286 ^ mem[RSP + 4, el]:u32 ^ 2))
.address 0x40CBE7
00011681: PF := ~low:1[let $1 = #2286 >> 4 ^ #2286 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CBE7
00011684: SF := high:1[#2286]
.address 0x40CBE7
00011687: ZF := 0 = #2286
.address 0x40CBEC
0001168e: R14 := RAX
.address 0x40CBEF
00011695: RDX := pad:64[mem[RAX, el]:u32]
.address 0x40CBF1
0001169f: when ~ZF goto %00011699
000449fa: goto %0001213c

.address 0x40CBF3
0001213c: 
.address 0x40CBF3
00012147: #2392 := low:32[RDX] - 0xC
.address 0x40CBF3
0001214a: CF := low:32[RDX] < 0xC
.address 0x40CBF3
0001214d: OF := high:1[(low:32[RDX] ^ 0xC) & (low:32[RDX] ^ #2392)]
.address 0x40CBF3
00012150: AF := 0x10 = (0x10 & (#2392 ^ low:32[RDX] ^ 0xC))
.address 0x40CBF3
00012153: PF := ~low:1[let $1 = #2392 >> 4 ^ #2392 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CBF3
00012156: SF := high:1[#2392]
.address 0x40CBF3
00012159: ZF := 0 = #2392
.address 0x40CBF6
00012162: when ~ZF goto %00011a7a
000449fb: goto %00011699

.address 0x40CBFC
00011699: 
.address 0x40CBFC
000116a9: R12 := R14
.address 0x40CBFF
000116b1: goto %000116ad

.address 0x40CA7D
00012168: 
.address 0x40CA7D
0001216d: RDI := RAX
.address 0x40CA80
00012176: RSP := RSP - 8
.address 0x40CA80
00012179: mem := mem with [RSP, el]:u64 <- 0x40CA85
.address 0x40CA80
0001217c: call @sub_403950 with return %0001217e

.address 0x40CA85
0001217e: 
.address 0x40CA85
00012183: RDI := R13
.address 0x40CA88
0001218a: R12 := RAX
.address 0x40CA8B
00012191: mem := mem with [RSP + 0x20, el]:u64 <- RAX
.address 0x40CA90
0001219a: RSP := RSP - 8
.address 0x40CA90
0001219d: mem := mem with [RSP, el]:u64 <- 0x40CA95
.address 0x40CA90
000121a0: call @sub_403950 with return %000121a2

.address 0x40CA95
000121a2: 
.address 0x40CA95
000121ad: #2394 := mem[RSP + 0x30, el]:u64
.address 0x40CA95
000121b0: CF := mem[RSP + 0x30, el]:u64 < 0
.address 0x40CA95
000121b3: OF := high:1[mem[RSP + 0x30, el]:u64 & (mem[RSP + 0x30, el]:u64 ^ #2394)]
.address 0x40CA95
000121b6: AF := 0x10 = (0x10 & (#2394 ^ mem[RSP + 0x30, el]:u64))
.address 0x40CA95
000121b9: PF := ~low:1[let $1 = #2394 >> 4 ^ #2394 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CA95
000121bc: SF := high:1[#2394]
.address 0x40CA95
000121bf: ZF := 0 = #2394
.address 0x40CA9B
000121c6: RDX := RAX
.address 0x40CA9E
000121cd: RCX := low:64[R12 + RDX + 1]
.address 0x40CAA3
000121d7: when ZF goto %000121d1
000449fc: goto %00012341

.address 0x40CB9F
000121d1: 
.address 0x40CB9F
000121e7: #2396 := RCX - 0x1000
.address 0x40CB9F
000121ea: CF := RCX < 0x1000
.address 0x40CB9F
000121ed: OF := high:1[(RCX ^ 0x1000) & (RCX ^ #2396)]
.address 0x40CB9F
000121f0: AF := 0x10 = (0x10 & (#2396 ^ RCX ^ 0x1000))
.address 0x40CB9F
000121f3: PF := ~low:1[let $1 = #2396 >> 4 ^ #2396 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CB9F
000121f6: SF := high:1[#2396]
.address 0x40CB9F
000121f9: ZF := 0 = #2396
.address 0x40CBA6
00012200: RAX := 0x1000
.address 0x40CBAB
00012207: mem := mem with [RSP + 0x38, el]:u64 <- RDX
.address 0x40CBB0
0001220e: RAX := if ~CF then RCX else RAX
.address 0x40CBB4
00012215: RDI := RAX
.address 0x40CBB7
0001221c: mem := mem with [RSP + 0x30, el]:u64 <- RAX
.address 0x40CBBC
00012225: RSP := RSP - 8
.address 0x40CBBC
00012228: mem := mem with [RSP, el]:u64 <- 0x40CBC1
.address 0x40CBBC
0001222b: call @sub_414480 with return %0001222d

.address 0x40CBC1
0001222d: 
.address 0x40CBC1
00012232: RDX := mem[RSP + 0x38, el]:u64
.address 0x40CBC6
00012239: mem := mem with [RSP + 0x28, el]:u64 <- RAX
.address 0x40CBCB
00012241: goto %0001223d

.address 0x40CAA9
00012341: 
.address 0x40CAA9
0001234c: #2408 := mem[RSP + 0x30, el]:u64 - RCX
.address 0x40CAA9
0001234f: CF := mem[RSP + 0x30, el]:u64 < RCX
.address 0x40CAA9
00012352: OF := high:1[(mem[RSP + 0x30, el]:u64 ^ RCX) & (mem[RSP + 0x30, el]:u64 ^ #2408)]
.address 0x40CAA9
00012355: AF := 0x10 = (0x10 & (#2408 ^ mem[RSP + 0x30, el]:u64 ^ RCX))
.address 0x40CAA9
00012358: PF := ~low:1[let $1 = #2408 >> 4 ^ #2408 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CAA9
0001235b: SF := high:1[#2408]
.address 0x40CAA9
0001235e: ZF := 0 = #2408
.address 0x40CAAE
00012367: when ~CF goto %0001223d
000449fd: goto %0001236d

.address 0x40CAB0
0001236d: 
.address 0x40CAB0
00012372: RDI := mem[RSP + 0x28, el]:u64
.address 0x40CAB5
00012379: RSI := RCX
.address 0x40CAB8
00012380: mem := mem with [RSP + 0x38, el]:u64 <- RDX
.address 0x40CABD
00012387: mem := mem with [RSP + 0x30, el]:u64 <- RCX
.address 0x40CAC2
00012390: RSP := RSP - 8
.address 0x40CAC2
00012393: mem := mem with [RSP, el]:u64 <- 0x40CAC7
.address 0x40CAC2
00012396: call @sub_4144e0 with return %00012398

.address 0x40CAC7
00012398: 
.address 0x40CAC7
0001239d: RDX := mem[RSP + 0x38, el]:u64
.address 0x40CACC
000123a4: mem := mem with [RSP + 0x28, el]:u64 <- RAX
000449fe: goto %0001223d

.address 0x40CAD1
0001223d: 
.address 0x40CAD1
00012247: R12 := mem[RSP + 0x28, el]:u64
.address 0x40CAD6
0001224e: RDI := mem[RSP + 0x20, el]:u64
.address 0x40CADB
0001225c: #2398 := RDX
.address 0x40CADB
0001225f: RDX := RDX + 1
.address 0x40CADB
00012262: CF := RDX < #2398
.address 0x40CADB
00012265: OF := ~high:1[#2398] & (high:1[#2398] | high:1[RDX]) & ~(high:1[#2398] & high:1[RDX])
.address 0x40CADB
00012268: AF := 0x10 = (0x10 & (RDX ^ #2398 ^ 1))
.address 0x40CADB
0001226b: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CADB
0001226e: SF := high:1[RDX]
.address 0x40CADB
00012271: ZF := 0 = RDX
.address 0x40CADF
00012278: RSI := R13
.address 0x40CAE2
00012287: #2401 := RDI
.address 0x40CAE2
0001228a: #2402 := R12
.address 0x40CAE2
0001228d: RDI := RDI + #2402
.address 0x40CAE2
00012290: CF := RDI < #2401
.address 0x40CAE2
00012293: OF := high:1[#2401] = high:1[#2402] & (high:1[#2401] | high:1[RDI]) & ~(
high:1[#2401] & high:1[RDI])
.address 0x40CAE2
00012296: AF := 0x10 = (0x10 & (RDI ^ #2401 ^ #2402))
.address 0x40CAE2
00012299: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CAE2
0001229c: SF := high:1[RDI]
.address 0x40CAE2
0001229f: ZF := 0 = RDI
.address 0x40CAE5
000122a6: R13 := R12
.address 0x40CAE8
000122af: RSP := RSP - 8
.address 0x40CAE8
000122b2: mem := mem with [RSP, el]:u64 <- 0x40CAED
.address 0x40CAE8
000122b5: call @sub_403d10 with return %000122b7

.address 0x40CAED
000122b7: 
.address 0x40CAED
000122bc: RDX := mem[RSP + 0x20, el]:u64
.address 0x40CAF2
000122c3: RSI := R14
.address 0x40CAF5
000122ca: RDI := R12
.address 0x40CAF8
000122d3: RSP := RSP - 8
.address 0x40CAF8
000122d6: mem := mem with [RSP, el]:u64 <- 0x40CAFD
.address 0x40CAF8
000122d9: call @sub_403b80 with return %000122db

.address 0x40CAFD
000122db: 
.address 0x40CAFD
000122e6: #2404 := mem[R14] - 0x2F
.address 0x40CAFD
000122e9: CF := mem[R14] < 0x2F
.address 0x40CAFD
000122ec: OF := high:1[(mem[R14] ^ 0x2F) & (mem[R14] ^ #2404)]
.address 0x40CAFD
000122ef: AF := 0x10 = (0x10 & (#2404 ^ mem[R14] ^ 0x2F))
.address 0x40CAFD
000122f2: PF := ~low:1[let $1 = #2404 >> 4 ^ #2404 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CAFD
000122f5: SF := high:1[#2404]
.address 0x40CAFD
000122f8: ZF := 0 = #2404
.address 0x40CB01
000122ff: mem := mem with [RSP + 0x20, el]:u64 <- R12
.address 0x40CB06
00012306: RAX := low:64[RBP + 1]
.address 0x40CB0A
0001230f: when ZF goto %00011ff4
000449ff: goto %00012315

.address 0x40CC04
00011ff4: 
.address 0x40CC04
00011ff9: mem := mem with [RBP] <- 0x2F
.address 0x40CC08
00012000: R15 := RAX
.address 0x40CC0B
00012008: goto %00012004

.address 0x40CB10
00012315: 
.address 0x40CB10
00012320: #2406 := R15 - RAX
.address 0x40CB10
00012323: CF := R15 < RAX
.address 0x40CB10
00012326: OF := high:1[(R15 ^ RAX) & (R15 ^ #2406)]
.address 0x40CB10
00012329: AF := 0x10 = (0x10 & (#2406 ^ R15 ^ RAX))
.address 0x40CB10
0001232c: PF := ~low:1[let $1 = #2406 >> 4 ^ #2406 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CB10
0001232f: SF := high:1[#2406]
.address 0x40CB10
00012332: ZF := 0 = #2406
.address 0x40CB13
0001233b: when ~(CF | ZF) goto %00012062
00044a00: goto %00012004

.address 0x40CC22
00012062: 
.address 0x40CC22
00012067: RAX := low:64[R15 - 1]
.address 0x40CC26
00012074: #2384 := RBP - RAX
.address 0x40CC26
00012077: CF := RBP < RAX
.address 0x40CC26
0001207a: OF := high:1[(RBP ^ RAX) & (RBP ^ #2384)]
.address 0x40CC26
0001207d: AF := 0x10 = (0x10 & (#2384 ^ RBP ^ RAX))
.address 0x40CC26
00012080: PF := ~low:1[let $1 = #2384 >> 4 ^ #2384 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CC26
00012083: SF := high:1[#2384]
.address 0x40CC26
00012086: ZF := 0 = #2384
.address 0x40CC29
00012090: when ~CF goto %0001208a
00044a01: goto %00012110

.address 0x40CC2B
00012110: 
.address 0x40CC2B
0001211b: #2390 := mem[R15 - 2] - 0x2F
.address 0x40CC2B
0001211e: CF := mem[R15 - 2] < 0x2F
.address 0x40CC2B
00012121: OF := high:1[(mem[R15 - 2] ^ 0x2F) & (mem[R15 - 2] ^ #2390)]
.address 0x40CC2B
00012124: AF := 0x10 = (0x10 & (#2390 ^ mem[R15 - 2] ^ 0x2F))
.address 0x40CC2B
00012127: PF := ~low:1[let $1 = #2390 >> 4 ^ #2390 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CC2B
0001212a: SF := high:1[#2390]
.address 0x40CC2B
0001212d: ZF := 0 = #2390
.address 0x40CC30
00012136: when ~ZF goto %000120aa
00044a02: goto %0001208a

.address 0x40CC3D
000120aa: 
.address 0x40CC3D
000120af: R15 := low:64[RAX - 1]
.address 0x40CC41
000120bc: #2386 := RBP - R15
.address 0x40CC41
000120bf: CF := RBP < R15
.address 0x40CC41
000120c2: OF := high:1[(RBP ^ R15) & (RBP ^ #2386)]
.address 0x40CC41
000120c5: AF := 0x10 = (0x10 & (#2386 ^ RBP ^ R15))
.address 0x40CC41
000120c8: PF := ~low:1[let $1 = #2386 >> 4 ^ #2386 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CC41
000120cb: SF := high:1[#2386]
.address 0x40CC41
000120ce: ZF := 0 = #2386
.address 0x40CC44
000120d7: when ZF goto %00012004
00044a03: goto %000120dd

.address 0x40CC4A
000120dd: 
.address 0x40CC4A
000120e8: #2388 := mem[R15 - 1] - 0x2F
.address 0x40CC4A
000120eb: CF := mem[R15 - 1] < 0x2F
.address 0x40CC4A
000120ee: OF := high:1[(mem[R15 - 1] ^ 0x2F) & (mem[R15 - 1] ^ #2388)]
.address 0x40CC4A
000120f1: AF := 0x10 = (0x10 & (#2388 ^ mem[R15 - 1] ^ 0x2F))
.address 0x40CC4A
000120f4: PF := ~low:1[let $1 = #2388 >> 4 ^ #2388 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CC4A
000120f7: SF := high:1[#2388]
.address 0x40CC4A
000120fa: ZF := 0 = #2388
.address 0x40CC4F
00012103: when ZF goto %00012004
00044a04: goto %00012109

.address 0x40CC55
00012109: 
.address 0x40CC55
0001210e: goto %000120a3

.address 0x40CC3A
000120a3: 
.address 0x40CC3A
000120a8: RAX := R15
00044a05: goto %000120aa

.address 0x40CC32
0001208a: 
.address 0x40CC32
0001209a: R15 := RAX
.address 0x40CC35
000120a1: goto %00012004

.address 0x40CB19
00012004: 
.address 0x40CB19
0001200e: RDI := R14
.address 0x40CB1C
00012017: RSP := RSP - 8
.address 0x40CB1C
0001201a: mem := mem with [RSP, el]:u64 <- 0x40CB21
.address 0x40CB1C
0001201d: call @sub_403e70 with return %0001201f

.address 0x40CB21
0001201f: 
.address 0x40CB21
00012024: goto %00011a7a

.address 0x40C998
000123a6: 
.address 0x40C998
000123b1: #2410 := mem[RSP + 4, el]:u32 - 2
.address 0x40C998
000123b4: CF := mem[RSP + 4, el]:u32 < 2
.address 0x40C998
000123b7: OF := high:1[(mem[RSP + 4, el]:u32 ^ 2) & (mem[RSP + 4, el]:u32 ^ #2410)]
.address 0x40C998
000123ba: AF := 0x10 = (0x10 & (#2410 ^ mem[RSP + 4, el]:u32 ^ 2))
.address 0x40C998
000123bd: PF := ~low:1[let $1 = #2410 >> 4 ^ #2410 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C998
000123c0: SF := high:1[#2410]
.address 0x40C998
000123c3: ZF := 0 = #2410
.address 0x40C99D
000123cc: when ZF goto %00011a7a
00044a06: goto %000123d2

.address 0x40C9A3
000123d2: 
.address 0x40C9A3
000123d9: RSP := RSP - 8
.address 0x40C9A3
000123dc: mem := mem with [RSP, el]:u64 <- 0x40C9A8
.address 0x40C9A3
000123df: call @sub_4037f0 with return %000123e1

.address 0x40C9A8
000123e1: 
.address 0x40C9A8
000123e6: RDX := 0x28
.address 0x40C9AD
000123ed: R12 := RAX
00044a07: goto %000116ad

.address 0x40C9B0
000116ad: 
.address 0x40C9B0
000116b7: RDI := mem[RSP + 0x28, el]:u64
.address 0x40C9B5
000116be: mem := mem with [RSP + 4, el]:u32 <- low:32[RDX]
.address 0x40C9B9
000116c7: RSP := RSP - 8
.address 0x40C9B9
000116ca: mem := mem with [RSP, el]:u64 <- 0x40C9BE
.address 0x40C9B9
000116cd: call @sub_403e70 with return %000116cf

.address 0x40C9BE
000116cf: 
.address 0x40C9BE
000116d4: RDI := RBP
.address 0x40C9C1
000116dd: RSP := RSP - 8
.address 0x40C9C1
000116e0: mem := mem with [RSP, el]:u64 <- 0x40C9C6
.address 0x40C9C1
000116e3: call @sub_403e70 with return %000116e5

.address 0x40C9C6
000116e5: 
.address 0x40C9C6
000116ea: RDX := pad:64[mem[RSP + 4, el]:u32]
00044a08: goto %000116ec

.address 0x40C950
000124bd: 
.address 0x40C950
000124c8: #2415 := low:32[RAX] - 0x4000
.address 0x40C950
000124cb: CF := low:32[RAX] < 0x4000
.address 0x40C950
000124ce: OF := high:1[(low:32[RAX] ^ 0x4000) & (low:32[RAX] ^ #2415)]
.address 0x40C950
000124d1: AF := 0x10 = (0x10 & (#2415 ^ low:32[RAX] ^ 0x4000))
.address 0x40C950
000124d4: PF := ~low:1[let $1 = #2415 >> 4 ^ #2415 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C950
000124d7: SF := high:1[#2415]
.address 0x40C950
000124da: ZF := 0 = #2415
.address 0x40C955
000124e3: when ZF goto %00011a7a
00044a09: goto %000124e9

.address 0x40C95B
000124e9: 
.address 0x40C95B
000124ee: goto %00011a59

.address 0x40C8BB
000124f0: 
.address 0x40C8BB
000124f7: RSP := RSP - 8
.address 0x40C8BB
000124fa: mem := mem with [RSP, el]:u64 <- 0x40C8C0
.address 0x40C8BB
000124fd: call @sub_4037f0 with return %000124ff

.address 0x40C8C0
000124ff: 
.address 0x40C8C0
00012504: R14 := RAX
.address 0x40C8C3
0001250b: RDX := pad:64[mem[RAX, el]:u32]
.address 0x40C8C5
00012512: RAX := pad:64[mem[RSP + 4, el]:u32]
.address 0x40C8C9
0001251f: #2417 := low:32[RAX]
.address 0x40C8C9
00012522: OF := 0
.address 0x40C8C9
00012525: CF := 0
.address 0x40C8C9
00012528: AF := unknown[bits]:u1
.address 0x40C8C9
0001252b: PF := ~low:1[let $1 = #2417 >> 4 ^ #2417 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C8C9
0001252e: SF := high:1[#2417]
.address 0x40C8C9
00012531: ZF := 0 = #2417
.address 0x40C8CB
0001253b: when ZF goto %00012535
00044a0a: goto %00012547

.address 0x40C8CD
00012547: 
.address 0x40C8CD
00012552: #2419 := low:32[RAX] - 1
.address 0x40C8CD
00012555: CF := low:32[RAX] < 1
.address 0x40C8CD
00012558: OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #2419)]
.address 0x40C8CD
0001255b: AF := 0x10 = (0x10 & (#2419 ^ low:32[RAX] ^ 1))
.address 0x40C8CD
0001255e: PF := ~low:1[let $1 = #2419 >> 4 ^ #2419 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C8CD
00012561: SF := high:1[#2419]
.address 0x40C8CD
00012564: ZF := 0 = #2419
.address 0x40C8D0
0001256d: when ~ZF goto %00011a52
00044a0b: goto %00012573

.address 0x40C8D6
00012573: 
.address 0x40C8D6
00012578: RSI := 0x417F4D
.address 0x40C8DD
0001257f: RDI := R13
.address 0x40C8E0
00012586: mem := mem with [RSP + 0x38, el]:u32 <- low:32[RDX]
.address 0x40C8E4
0001258f: RSP := RSP - 8
.address 0x40C8E4
00012592: mem := mem with [RSP, el]:u64 <- 0x40C8E9
.address 0x40C8E4
00012595: call @sub_403ab0 with return %00012597

.address 0x40C8E9
00012597: 
.address 0x40C8E9
000125a2: #2421 := mem[R13 + RAX]
.address 0x40C8E9
000125a5: CF := mem[R13 + RAX] < 0
.address 0x40C8E9
000125a8: OF := high:1[mem[R13 + RAX] & (mem[R13 + RAX] ^ #2421)]
.address 0x40C8E9
000125ab: AF := 0x10 = (0x10 & (#2421 ^ mem[R13 + RAX]))
.address 0x40C8E9
000125ae: PF := ~low:1[let $1 = #2421 >> 4 ^ #2421 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C8E9
000125b1: SF := high:1[#2421]
.address 0x40C8E9
000125b4: ZF := 0 = #2421
.address 0x40C8EF
000125bb: RDX := pad:64[mem[RSP + 0x38, el]:u32]
.address 0x40C8F3
000125c4: when ~ZF goto %00012535
00044a0c: goto %000125ca

.address 0x40C8F5
000125ca: 
.address 0x40C8F5
000125d5: #2423 := low:32[RDX] - 2
.address 0x40C8F5
000125d8: CF := low:32[RDX] < 2
.address 0x40C8F5
000125db: OF := high:1[(low:32[RDX] ^ 2) & (low:32[RDX] ^ #2423)]
.address 0x40C8F5
000125de: AF := 0x10 = (0x10 & (#2423 ^ low:32[RDX] ^ 2))
.address 0x40C8F5
000125e1: PF := ~low:1[let $1 = #2423 >> 4 ^ #2423 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C8F5
000125e4: SF := high:1[#2423]
.address 0x40C8F5
000125e7: ZF := 0 = #2423
.address 0x40C8F8
000125f0: when ZF goto %00011a7a
00044a0d: goto %00012535

.address 0x40C8FE
00012535: 
.address 0x40C8FE
00012545: R12 := R14
00044a0e: goto %00011c4e

.address 0x40C7E6
00011a52: 
.address 0x40C7E6
00011a57: mem := mem with [RSP + 0x58, el]:u32 <- 0
00044a0f: goto %00011a59

.address 0x40C7EE
00011a59: 
.address 0x40C7EE
00011a64: #2319 := mem[R13]
.address 0x40C7EE
00011a67: CF := mem[R13] < 0
.address 0x40C7EE
00011a6a: OF := high:1[mem[R13] & (mem[R13] ^ #2319)]
.address 0x40C7EE
00011a6d: AF := 0x10 = (0x10 & (#2319 ^ mem[R13]))
.address 0x40C7EE
00011a70: PF := ~low:1[let $1 = #2319 >> 4 ^ #2319 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C7EE
00011a73: SF := high:1[#2319]
.address 0x40C7EE
00011a76: ZF := 0 = #2319
.address 0x40C7F3
00011a80: when ZF goto %00011a7a
00044a10: goto %00011c03

.address 0x40C7F5
00011c03: 
.address 0x40C7F5
00011c0e: #2339 := mem[RSP + 4, el]:u32 - 2
.address 0x40C7F5
00011c11: CF := mem[RSP + 4, el]:u32 < 2
.address 0x40C7F5
00011c14: OF := high:1[(mem[RSP + 4, el]:u32 ^ 2) & (mem[RSP + 4, el]:u32 ^ #2339)]
.address 0x40C7F5
00011c17: AF := 0x10 = (0x10 & (#2339 ^ mem[RSP + 4, el]:u32 ^ 2))
.address 0x40C7F5
00011c1a: PF := ~low:1[let $1 = #2339 >> 4 ^ #2339 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C7F5
00011c1d: SF := high:1[#2339]
.address 0x40C7F5
00011c20: ZF := 0 = #2339
.address 0x40C7FA
00011c2a: when ~ZF goto %00011c24
00044a11: goto %00011a7a

.address 0x40CC57
00011c24: 
.address 0x40CC57
00011c36: RSP := RSP - 8
.address 0x40CC57
00011c39: mem := mem with [RSP, el]:u64 <- 0x40CC5C
.address 0x40CC57
00011c3c: call @sub_4037f0 with return %00011c3e

.address 0x40CC5C
00011c3e: 
.address 0x40CC5C
00011c43: RDX := 0x14
.address 0x40CC61
00011c4a: R12 := RAX
.address 0x40CC64
00011c52: goto %00011c4e

.address 0x40C901
00011c4e: 
.address 0x40C901
00011c58: RDI := mem[RSP + 0x28, el]:u64
.address 0x40C906
00011c5f: mem := mem with [RSP + 4, el]:u32 <- low:32[RDX]
.address 0x40C90A
00011c68: RSP := RSP - 8
.address 0x40C90A
00011c6b: mem := mem with [RSP, el]:u64 <- 0x40C90F
.address 0x40C90A
00011c6e: call @sub_403e70 with return %00011c70

.address 0x40C90F
00011c70: 
.address 0x40C90F
00011c75: RDI := RBP
.address 0x40C912
00011c7e: RSP := RSP - 8
.address 0x40C912
00011c81: mem := mem with [RSP, el]:u64 <- 0x40C917
.address 0x40C912
00011c84: call @sub_403e70 with return %00011c86

.address 0x40C917
00011c86: 
.address 0x40C917
00011c91: #2341 := mem[RSP + 0x10, el]:u64
.address 0x40C917
00011c94: CF := mem[RSP + 0x10, el]:u64 < 0
.address 0x40C917
00011c97: OF := high:1[mem[RSP + 0x10, el]:u64 & (mem[RSP + 0x10, el]:u64 ^ #2341)]
.address 0x40C917
00011c9a: AF := 0x10 = (0x10 & (#2341 ^ mem[RSP + 0x10, el]:u64))
.address 0x40C917
00011c9d: PF := ~low:1[let $1 = #2341 >> 4 ^ #2341 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C917
00011ca0: SF := high:1[#2341]
.address 0x40C917
00011ca3: ZF := 0 = #2341
.address 0x40C91D
00011caa: RDX := pad:64[mem[RSP + 4, el]:u32]
.address 0x40C921
00011cb3: when ZF goto %00011710
00044a12: goto %00011cb9

.address 0x40C927
00011cb9: 
.address 0x40C927
00011cbe: goto %000116ec

.address 0x40C9CA
000116ec: 
.address 0x40C9CA
000116f1: RDI := mem[RSP + 0x10, el]:u64
.address 0x40C9CF
000116f8: mem := mem with [RSP + 4, el]:u32 <- low:32[RDX]
.address 0x40C9D3
00011701: RSP := RSP - 8
.address 0x40C9D3
00011704: mem := mem with [RSP, el]:u64 <- 0x40C9D8
.address 0x40C9D3
00011707: call @sub_40e350 with return %00011709

.address 0x40C9D8
00011709: 
.address 0x40C9D8
0001170e: RDX := pad:64[mem[RSP + 4, el]:u32]
00044a13: goto %00011710

.address 0x40C9DC
00011710: 
.address 0x40C9DC
00011715: mem := mem with [R12, el]:u32 <- low:32[RDX]
.address 0x40C9E0
00011722: RBP := 0
.address 0x40C9E0
00011725: AF := unknown[bits]:u1
.address 0x40C9E0
00011728: ZF := 1
.address 0x40C9E0
0001172b: PF := 1
.address 0x40C9E0
0001172e: OF := 0
.address 0x40C9E0
00011731: CF := 0
.address 0x40C9E0
00011734: SF := 0
.address 0x40C9E2
0001173b: goto %0000f9f9

.address 0x40C800
00011a7a: 
.address 0x40C800
00011a8a: R14 := R13
.address 0x40C803
00011a91: RAX := pad:64[pad:32[mem[R14]]]
.address 0x40C807
00011a9e: #2321 := low:8[RAX]
.address 0x40C807
00011aa1: OF := 0
.address 0x40C807
00011aa4: CF := 0
.address 0x40C807
00011aa7: AF := unknown[bits]:u1
.address 0x40C807
00011aaa: PF := ~low:1[let $1 = #2321 >> 4 ^ #2321 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C807
00011aad: SF := high:1[#2321]
.address 0x40C807
00011ab0: ZF := 0 = #2321
.address 0x40C809
00011aba: when ~ZF goto %00011ab4
00044a14: goto %0001176f

.address 0x40C80F
0001176f: 
.address 0x40C80F
0001177f: RAX := low:64[RBP + 1]
.address 0x40C813
0001178c: #2290 := R15 - RAX
.address 0x40C813
0001178f: CF := R15 < RAX
.address 0x40C813
00011792: OF := high:1[(R15 ^ RAX) & (R15 ^ #2290)]
.address 0x40C813
00011795: AF := 0x10 = (0x10 & (#2290 ^ R15 ^ RAX))
.address 0x40C813
00011798: PF := ~low:1[let $1 = #2290 >> 4 ^ #2290 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C813
0001179b: SF := high:1[#2290]
.address 0x40C813
0001179e: ZF := 0 = #2290
.address 0x40C816
000117a8: when CF | ZF goto %000117a2
00044a15: goto %00011894

.address 0x40C818
00011894: 
.address 0x40C818
0001189f: #2299 := mem[R15 - 1] - 0x2F
.address 0x40C818
000118a2: CF := mem[R15 - 1] < 0x2F
.address 0x40C818
000118a5: OF := high:1[(mem[R15 - 1] ^ 0x2F) & (mem[R15 - 1] ^ #2299)]
.address 0x40C818
000118a8: AF := 0x10 = (0x10 & (#2299 ^ mem[R15 - 1] ^ 0x2F))
.address 0x40C818
000118ab: PF := ~low:1[let $1 = #2299 >> 4 ^ #2299 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C818
000118ae: SF := high:1[#2299]
.address 0x40C818
000118b1: ZF := 0 = #2299
.address 0x40C81D
000118ba: when ~ZF goto %000117a2
00044a16: goto %000118c0

.address 0x40C81F
000118c0: 
.address 0x40C81F
000118cc: #2301 := R15
.address 0x40C81F
000118cf: R15 := R15 - 1
.address 0x40C81F
000118d2: CF := #2301 < 1
.address 0x40C81F
000118d5: OF := high:1[(#2301 ^ 1) & (#2301 ^ R15)]
.address 0x40C81F
000118d8: AF := 0x10 = (0x10 & (R15 ^ #2301 ^ 1))
.address 0x40C81F
000118db: PF := ~low:1[let $1 = R15 >> 4 ^ R15 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C81F
000118de: SF := high:1[R15]
.address 0x40C81F
000118e1: ZF := 0 = R15
00044a17: goto %000117a2

.address 0x40C823
000117a2: 
.address 0x40C823
000117b2: RAX := low:64[R15 + 1]
.address 0x40C827
000117b9: mem := mem with [R15] <- 0
.address 0x40C82B
000117c6: #2292 := RBX - RAX
.address 0x40C82B
000117c9: CF := RBX < RAX
.address 0x40C82B
000117cc: OF := high:1[(RBX ^ RAX) & (RBX ^ #2292)]
.address 0x40C82B
000117cf: AF := 0x10 = (0x10 & (#2292 ^ RBX ^ RAX))
.address 0x40C82B
000117d2: PF := ~low:1[let $1 = #2292 >> 4 ^ #2292 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C82B
000117d5: SF := high:1[#2292]
.address 0x40C82B
000117d8: ZF := 0 = #2292
.address 0x40C82E
000117e2: when ZF goto %000117dc
00044a18: goto %00011849

.address 0x40C830
00011849: 
.address 0x40C830
00011856: #2296 := R15
.address 0x40C830
00011859: #2297 := RBP
.address 0x40C830
0001185c: R15 := R15 - RBP
.address 0x40C830
0001185f: CF := #2296 < #2297
.address 0x40C830
00011862: OF := high:1[(#2296 ^ #2297) & (#2296 ^ R15)]
.address 0x40C830
00011865: AF := 0x10 = (0x10 & (R15 ^ #2296 ^ #2297))
.address 0x40C830
00011868: PF := ~low:1[let $1 = R15 >> 4 ^ R15 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C830
0001186b: SF := high:1[R15]
.address 0x40C830
0001186e: ZF := 0 = R15
.address 0x40C833
00011875: RDI := RBP
.address 0x40C836
0001187c: RSI := low:64[R15 + 1]
.address 0x40C83A
00011885: RSP := RSP - 8
.address 0x40C83A
00011888: mem := mem with [RSP, el]:u64 <- 0x40C83F
.address 0x40C83A
0001188b: call @sub_4144e0 with return %0001188d

.address 0x40C83F
0001188d: 
.address 0x40C83F
00011892: RBP := RAX
00044a19: goto %000117dc

.address 0x40C842
000117dc: 
.address 0x40C842
000117ec: RDI := mem[RSP + 0x28, el]:u64
.address 0x40C847
000117f5: RSP := RSP - 8
.address 0x40C847
000117f8: mem := mem with [RSP, el]:u64 <- 0x40C84C
.address 0x40C847
000117fb: call @sub_403e70 with return %000117fd

.address 0x40C84C
000117fd: 
.address 0x40C84C
00011802: RAX := mem[RSP + 0x10, el]:u64
.address 0x40C851
0001180f: #2294 := RAX
.address 0x40C851
00011812: OF := 0
.address 0x40C851
00011815: CF := 0
.address 0x40C851
00011818: AF := unknown[bits]:u1
.address 0x40C851
0001181b: PF := ~low:1[let $1 = #2294 >> 4 ^ #2294 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40C851
0001181e: SF := high:1[#2294]
.address 0x40C851
00011821: ZF := 0 = #2294
.address 0x40C854
0001182a: when ZF goto %0000f9f9
00044a1a: goto %00011830

.address 0x40C856
00011830: 
.address 0x40C856
00011835: RDI := RAX
.address 0x40C859
0001183e: RSP := RSP - 8
.address 0x40C859
00011841: mem := mem with [RSP, el]:u64 <- 0x40C85E
.address 0x40C859
00011844: call @sub_40e350 with return %00011846

.address 0x40C85E
00011846: 
00044a1b: goto %0000f9f9

.address 0x40C860
0000f9f9: 
.address 0x40C860
0000fa03: RCX := mem[RSP + 0xD8, el]:u64
.address 0x40C868
0000fa10: RCX := RCX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x40C868
0000fa13: OF := 0
.address 0x40C868
0000fa16: CF := 0
.address 0x40C868
0000fa19: AF := unknown[bits]:u1
.address 0x40C868
0000fa1c: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C868
0000fa1f: SF := high:1[RCX]
.address 0x40C868
0000fa22: ZF := 0 = RCX
.address 0x40C871
0000fa29: RAX := RBP
.address 0x40C874
0000fa33: when ~ZF goto %0000fa2d
00044a1c: goto %0000fd6d

.address 0x40CC71
0000fa2d: 
.address 0x40CC71
0000fa3f: RSP := RSP - 8
.address 0x40CC71
0000fa42: mem := mem with [RSP, el]:u64 <- 0x40CC76
.address 0x40CC71
0000fa45: call @sub_403970 with return %0000fa47

.address 0x40CC76
0000fa47: 
.address 0x40CC80
0000fa4f: mem := mem with [0x6213D8, el]:u64 <- RDI
.address 0x40CC87
0000fa58: #2181 := mem[RSP, el]:u64
.address 0x40CC87
0000fa5b: RSP := RSP + 8
.address 0x40CC87
0000fa5f: call #2181 with noreturn

.address 0x40C87A
0000fd6d: 
.address 0x40C87A
0000fd79: #2202 := RSP
.address 0x40C87A
0000fd7c: RSP := RSP + 0xE8
.address 0x40C87A
0000fd7f: CF := RSP < #2202
.address 0x40C87A
0000fd82: OF := ~high:1[#2202] & (high:1[#2202] | high:1[RSP]) & ~(high:1[#2202] & high:1[RSP])
.address 0x40C87A
0000fd85: AF := 0x10 = (0x10 & (RSP ^ #2202 ^ 0xE8))
.address 0x40C87A
0000fd88: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40C87A
0000fd8b: SF := high:1[RSP]
.address 0x40C87A
0000fd8e: ZF := 0 = RSP
.address 0x40C881
0000fd96: RBX := mem[RSP, el]:u64
.address 0x40C881
0000fd99: RSP := RSP + 8
.address 0x40C882
0000fda1: RBP := mem[RSP, el]:u64
.address 0x40C882
0000fda4: RSP := RSP + 8
.address 0x40C883
0000fdac: R12 := mem[RSP, el]:u64
.address 0x40C883
0000fdaf: RSP := RSP + 8
.address 0x40C885
0000fdb7: R13 := mem[RSP, el]:u64
.address 0x40C885
0000fdba: RSP := RSP + 8
.address 0x40C887
0000fdc2: R14 := mem[RSP, el]:u64
.address 0x40C887
0000fdc5: RSP := RSP + 8
.address 0x40C889
0000fdcd: R15 := mem[RSP, el]:u64
.address 0x40C889
0000fdd0: RSP := RSP + 8
.address 0x40C88B
0000fdd9: #2205 := mem[RSP, el]:u64
.address 0x40C88B
0000fddc: RSP := RSP + 8
.address 0x40C88B
0000fde0: call #2205 with noreturn


.address 0x40CCA0
0004419f: sub sub_40cca0()
.address 0x40CCA0
0000fa7e: 
.address 0x40CCA0
0000fa85: #2183 := RBP
.address 0x40CCA0
0000fa88: RSP := RSP - 8
.address 0x40CCA0
0000fa8b: mem := mem with [RSP, el]:u64 <- #2183
.address 0x40CCA1
0000fa94: #2184 := RBX
.address 0x40CCA1
0000fa97: RSP := RSP - 8
.address 0x40CCA1
0000fa9a: mem := mem with [RSP, el]:u64 <- #2184
.address 0x40CCA2
0000faa8: #2185 := RSP
.address 0x40CCA2
0000faab: RSP := RSP - 8
.address 0x40CCA2
0000faae: CF := #2185 < 8
.address 0x40CCA2
0000fab1: OF := high:1[(#2185 ^ 8) & (#2185 ^ RSP)]
.address 0x40CCA2
0000fab4: AF := 0x10 = (0x10 & (RSP ^ #2185 ^ 8))
.address 0x40CCA2
0000fab7: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CCA2
0000faba: SF := high:1[RSP]
.address 0x40CCA2
0000fabd: ZF := 0 = RSP
.address 0x40CCA6
0000fac4: RDI := mem[0x620288, el]:u64
.address 0x40CCAD
0000facd: RSP := RSP - 8
.address 0x40CCAD
0000fad0: mem := mem with [RSP, el]:u64 <- 0x40CCB2
.address 0x40CCAD
0000fad3: call @sub_415c70 with return %0000fad5

.address 0x40CCB2
0000fad5: 
.address 0x40CCB2
0000fae0: #2188 := low:32[RAX]
.address 0x40CCB2
0000fae3: OF := 0
.address 0x40CCB2
0000fae6: CF := 0
.address 0x40CCB2
0000fae9: AF := unknown[bits]:u1
.address 0x40CCB2
0000faec: PF := ~low:1[let $1 = #2188 >> 4 ^ #2188 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CCB2
0000faef: SF := high:1[#2188]
.address 0x40CCB2
0000faf2: ZF := 0 = #2188
.address 0x40CCB4
0000fafc: when ZF goto %0000faf6
00044a1d: goto %0000fcff

.address 0x40CCB6
0000fcff: 
.address 0x40CCB6
0000fd06: RSP := RSP - 8
.address 0x40CCB6
0000fd09: mem := mem with [RSP, el]:u64 <- 0x40CCBB
.address 0x40CCB6
0000fd0c: call @sub_4037f0 with return %0000fd0e

.address 0x40CCBB
0000fd0e: 
.address 0x40CCBB
0000fd19: #2198 := mem[0x6213D0]
.address 0x40CCBB
0000fd1c: CF := mem[0x6213D0] < 0
.address 0x40CCBB
0000fd1f: OF := high:1[mem[0x6213D0] & (mem[0x6213D0] ^ #2198)]
.address 0x40CCBB
0000fd22: AF := 0x10 = (0x10 & (#2198 ^ mem[0x6213D0]))
.address 0x40CCBB
0000fd25: PF := ~low:1[let $1 = #2198 >> 4 ^ #2198 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CCBB
0000fd28: SF := high:1[#2198]
.address 0x40CCBB
0000fd2b: ZF := 0 = #2198
.address 0x40CCC2
0000fd32: RBX := RAX
.address 0x40CCC5
0000fd3b: when ZF goto %0000fc11
00044a1e: goto %0000fd41

.address 0x40CCC7
0000fd41: 
.address 0x40CCC7
0000fd4c: #2200 := mem[RAX, el]:u32 - 0x20
.address 0x40CCC7
0000fd4f: CF := mem[RAX, el]:u32 < 0x20
.address 0x40CCC7
0000fd52: OF := high:1[(mem[RAX, el]:u32 ^ 0x20) & (mem[RAX, el]:u32 ^ #2200)]
.address 0x40CCC7
0000fd55: AF := 0x10 = (0x10 & (#2200 ^ mem[RAX, el]:u32 ^ 0x20))
.address 0x40CCC7
0000fd58: PF := ~low:1[let $1 = #2200 >> 4 ^ #2200 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CCC7
0000fd5b: SF := high:1[#2200]
.address 0x40CCC7
0000fd5e: ZF := 0 = #2200
.address 0x40CCCA
0000fd67: when ~ZF goto %0000fc11
00044a1f: goto %0000faf6

.address 0x40CCE3
0000fc11: 
.address 0x40CCE3
0000fc16: RSI := 0x41A2FF
.address 0x40CCEA
0000fc23: RDI := 0
.address 0x40CCEA
0000fc26: AF := unknown[bits]:u1
.address 0x40CCEA
0000fc29: ZF := 1
.address 0x40CCEA
0000fc2c: PF := 1
.address 0x40CCEA
0000fc2f: OF := 0
.address 0x40CCEA
0000fc32: CF := 0
.address 0x40CCEA
0000fc35: SF := 0
.address 0x40CCEC
0000fc3c: RDX := 5
.address 0x40CCF1
0000fc45: RSP := RSP - 8
.address 0x40CCF1
0000fc48: mem := mem with [RSP, el]:u64 <- 0x40CCF6
.address 0x40CCF1
0000fc4b: call @sub_403930 with return %0000fc4d

.address 0x40CCF6
0000fc4d: 
.address 0x40CCF6
0000fc52: RDI := mem[0x6213D8, el]:u64
.address 0x40CCFD
0000fc59: RBP := RAX
.address 0x40CD00
0000fc66: #2196 := RDI
.address 0x40CD00
0000fc69: OF := 0
.address 0x40CD00
0000fc6c: CF := 0
.address 0x40CD00
0000fc6f: AF := unknown[bits]:u1
.address 0x40CD00
0000fc72: PF := ~low:1[let $1 = #2196 >> 4 ^ #2196 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CD00
0000fc75: SF := high:1[#2196]
.address 0x40CD00
0000fc78: ZF := 0 = #2196
.address 0x40CD03
0000fc81: when ZF goto %0000fb59
00044a20: goto %0000fc87

.address 0x40CD05
0000fc87: 
.address 0x40CD05
0000fc8e: RSP := RSP - 8
.address 0x40CD05
0000fc91: mem := mem with [RSP, el]:u64 <- 0x40CD0A
.address 0x40CD05
0000fc94: call @sub_413ae0 with return %0000fc96

.address 0x40CD0A
0000fc96: 
.address 0x40CD0A
0000fc9b: RSI := pad:64[mem[RBX, el]:u32]
.address 0x40CD0C
0000fca2: RDX := 0x417DD8
.address 0x40CD13
0000fca9: RCX := RAX
.address 0x40CD16
0000fcb0: R8 := RBP
.address 0x40CD19
0000fcbd: RDI := 0
.address 0x40CD19
0000fcc0: AF := unknown[bits]:u1
.address 0x40CD19
0000fcc3: ZF := 1
.address 0x40CD19
0000fcc6: PF := 1
.address 0x40CD19
0000fcc9: OF := 0
.address 0x40CD19
0000fccc: CF := 0
.address 0x40CD19
0000fccf: SF := 0
.address 0x40CD1B
0000fcdc: RAX := 0
.address 0x40CD1B
0000fcdf: AF := unknown[bits]:u1
.address 0x40CD1B
0000fce2: ZF := 1
.address 0x40CD1B
0000fce5: PF := 1
.address 0x40CD1B
0000fce8: OF := 0
.address 0x40CD1B
0000fceb: CF := 0
.address 0x40CD1B
0000fcee: SF := 0
.address 0x40CD1D
0000fcf7: RSP := RSP - 8
.address 0x40CD1D
0000fcfa: mem := mem with [RSP, el]:u64 <- 0x40CD22
.address 0x40CD1D
0000fcfd: call @sub_403d20 with return %0000fb38

.address 0x40CCCC
0000faf6: 
.address 0x40CCCC
0000fb06: RDI := mem[0x6202C0, el]:u64
.address 0x40CCD3
0000fb0f: RSP := RSP - 8
.address 0x40CCD3
0000fb12: mem := mem with [RSP, el]:u64 <- 0x40CCD8
.address 0x40CCD3
0000fb15: call @sub_415c70 with return %0000fb17

.address 0x40CCD8
0000fb17: 
.address 0x40CCD8
0000fb22: #2190 := low:32[RAX]
.address 0x40CCD8
0000fb25: OF := 0
.address 0x40CCD8
0000fb28: CF := 0
.address 0x40CCD8
0000fb2b: AF := unknown[bits]:u1
.address 0x40CCD8
0000fb2e: PF := ~low:1[let $1 = #2190 >> 4 ^ #2190 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CCD8
0000fb31: SF := high:1[#2190]
.address 0x40CCD8
0000fb34: ZF := 0 = #2190
.address 0x40CCDA
0000fb3e: when ~ZF goto %0000fb38
00044a21: goto %0000fbc8

.address 0x40CD22
0000fb38: 
.address 0x40CD22
0000fb48: RDI := pad:64[mem[0x6201F8, el]:u32]
.address 0x40CD28
0000fb51: RSP := RSP - 8
.address 0x40CD28
0000fb54: mem := mem with [RSP, el]:u64 <- 0x40CD2D
.address 0x40CD28
0000fb57: call @sub_403820 with return %0000fb59

.address 0x40CD2D
0000fb59: 
.address 0x40CD2D
0000fb5e: RSI := pad:64[mem[RBX, el]:u32]
.address 0x40CD2F
0000fb65: RDX := 0x41A2FC
.address 0x40CD36
0000fb6c: RCX := RAX
.address 0x40CD39
0000fb79: RDI := 0
.address 0x40CD39
0000fb7c: AF := unknown[bits]:u1
.address 0x40CD39
0000fb7f: ZF := 1
.address 0x40CD39
0000fb82: PF := 1
.address 0x40CD39
0000fb85: OF := 0
.address 0x40CD39
0000fb88: CF := 0
.address 0x40CD39
0000fb8b: SF := 0
.address 0x40CD3B
0000fb98: RAX := 0
.address 0x40CD3B
0000fb9b: AF := unknown[bits]:u1
.address 0x40CD3B
0000fb9e: ZF := 1
.address 0x40CD3B
0000fba1: PF := 1
.address 0x40CD3B
0000fba4: OF := 0
.address 0x40CD3B
0000fba7: CF := 0
.address 0x40CD3B
0000fbaa: SF := 0
.address 0x40CD3D
0000fbb3: RSP := RSP - 8
.address 0x40CD3D
0000fbb6: mem := mem with [RSP, el]:u64 <- 0x40CD42
.address 0x40CD3D
0000fbb9: call @sub_403d20 with return %0000fbbb

.address 0x40CD42
0000fbbb: 
.address 0x40CD42
0000fbc0: goto %0000fb38

.address 0x40CCDC
0000fbc8: 
.address 0x40CCDC
0000fbd4: #2192 := RSP
.address 0x40CCDC
0000fbd7: RSP := RSP + 8
.address 0x40CCDC
0000fbda: CF := RSP < #2192
.address 0x40CCDC
0000fbdd: OF := ~high:1[#2192] & (high:1[#2192] | high:1[RSP]) & ~(high:1[#2192] & high:1[RSP])
.address 0x40CCDC
0000fbe0: AF := 0x10 = (0x10 & (RSP ^ #2192 ^ 8))
.address 0x40CCDC
0000fbe3: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CCDC
0000fbe6: SF := high:1[RSP]
.address 0x40CCDC
0000fbe9: ZF := 0 = RSP
.address 0x40CCE0
0000fbf1: RBX := mem[RSP, el]:u64
.address 0x40CCE0
0000fbf4: RSP := RSP + 8
.address 0x40CCE1
0000fbfc: RBP := mem[RSP, el]:u64
.address 0x40CCE1
0000fbff: RSP := RSP + 8
.address 0x40CCE2
0000fc08: #2195 := mem[RSP, el]:u64
.address 0x40CCE2
0000fc0b: RSP := RSP + 8
.address 0x40CCE2
0000fc0f: call #2195 with noreturn


.address 0x40CD50
000441a5: sub sub_40cd50()
.address 0x40CD50
00005097: 
.address 0x40CD50
000050a9: #710 := RBP
.address 0x40CD50
000050ac: RSP := RSP - 8
.address 0x40CD50
000050af: mem := mem with [RSP, el]:u64 <- #710
.address 0x40CD51
000050b8: #711 := RBX
.address 0x40CD51
000050bb: RSP := RSP - 8
.address 0x40CD51
000050be: mem := mem with [RSP, el]:u64 <- #711
.address 0x40CD52
000050cb: RBP := 0
.address 0x40CD52
000050ce: AF := unknown[bits]:u1
.address 0x40CD52
000050d1: ZF := 1
.address 0x40CD52
000050d4: PF := 1
.address 0x40CD52
000050d7: OF := 0
.address 0x40CD52
000050da: CF := 0
.address 0x40CD52
000050dd: SF := 0
.address 0x40CD54
000050e4: RBX := RDI
.address 0x40CD57
000050f2: #712 := RSP
.address 0x40CD57
000050f5: RSP := RSP - 8
.address 0x40CD57
000050f8: CF := #712 < 8
.address 0x40CD57
000050fb: OF := high:1[(#712 ^ 8) & (#712 ^ RSP)]
.address 0x40CD57
000050fe: AF := 0x10 = (0x10 & (RSP ^ #712 ^ 8))
.address 0x40CD57
00005101: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CD57
00005104: SF := high:1[RSP]
.address 0x40CD57
00005107: ZF := 0 = RSP
.address 0x40CD5B
00005114: #715 := mem[RDI] - 0x2F
.address 0x40CD5B
00005117: CF := mem[RDI] < 0x2F
.address 0x40CD5B
0000511a: OF := high:1[(mem[RDI] ^ 0x2F) & (mem[RDI] ^ #715)]
.address 0x40CD5B
0000511d: AF := 0x10 = (0x10 & (#715 ^ mem[RDI] ^ 0x2F))
.address 0x40CD5B
00005120: PF := ~low:1[let $1 = #715 >> 4 ^ #715 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CD5B
00005123: SF := high:1[#715]
.address 0x40CD5B
00005126: ZF := 0 = #715
.address 0x40CD5E
0000512d: RBP := extract:63:8[RBP].pad:8[ZF]
.address 0x40CD62
00005137: RSP := RSP - 8
.address 0x40CD62
0000513a: mem := mem with [RSP, el]:u64 <- 0x40CD67
.address 0x40CD62
0000513d: call @sub_40ce10 with return %00022256

.address 0x40CD67
00022256: 
.address 0x40CD67
0002225b: RCX := RAX
.address 0x40CD6A
0002226a: #4820 := RCX
.address 0x40CD6A
0002226d: #4821 := RBX
.address 0x40CD6A
00022270: RCX := RCX - RBX
.address 0x40CD6A
00022273: CF := #4820 < #4821
.address 0x40CD6A
00022276: OF := high:1[(#4820 ^ #4821) & (#4820 ^ RCX)]
.address 0x40CD6A
00022279: AF := 0x10 = (0x10 & (RCX ^ #4820 ^ #4821))
.address 0x40CD6A
0002227c: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CD6A
0002227f: SF := high:1[RCX]
.address 0x40CD6A
00022282: ZF := 0 = RCX
.address 0x40CD6D
0002228f: #4823 := RCX - RBP
.address 0x40CD6D
00022292: CF := RCX < RBP
.address 0x40CD6D
00022295: OF := high:1[(RCX ^ RBP) & (RCX ^ #4823)]
.address 0x40CD6D
00022298: AF := 0x10 = (0x10 & (#4823 ^ RCX ^ RBP))
.address 0x40CD6D
0002229b: PF := ~low:1[let $1 = #4823 >> 4 ^ #4823 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CD6D
0002229e: SF := high:1[#4823]
.address 0x40CD6D
000222a1: ZF := 0 = #4823
.address 0x40CD70
000222ab: when CF | ZF goto %000222a5
00044a22: goto %0002230a

.address 0x40CD72
0002230a: 
.address 0x40CD72
00022315: #4829 := mem[RAX - 1] - 0x2F
.address 0x40CD72
00022318: CF := mem[RAX - 1] < 0x2F
.address 0x40CD72
0002231b: OF := high:1[(mem[RAX - 1] ^ 0x2F) & (mem[RAX - 1] ^ #4829)]
.address 0x40CD72
0002231e: AF := 0x10 = (0x10 & (#4829 ^ mem[RAX - 1] ^ 0x2F))
.address 0x40CD72
00022321: PF := ~low:1[let $1 = #4829 >> 4 ^ #4829 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CD72
00022324: SF := high:1[#4829]
.address 0x40CD72
00022327: ZF := 0 = #4829
.address 0x40CD76
0002232e: RDX := low:64[RCX - 1]
.address 0x40CD7A
00022338: when ZF goto %00022332
00044a23: goto %000223f6

.address 0x40CD8E
00022332: 
.address 0x40CD8E
00022348: #4831 := RBP - RDX
.address 0x40CD8E
0002234b: CF := RBP < RDX
.address 0x40CD8E
0002234e: OF := high:1[(RBP ^ RDX) & (RBP ^ #4831)]
.address 0x40CD8E
00022351: AF := 0x10 = (0x10 & (#4831 ^ RBP ^ RDX))
.address 0x40CD8E
00022354: PF := ~low:1[let $1 = #4831 >> 4 ^ #4831 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CD8E
00022357: SF := high:1[#4831]
.address 0x40CD8E
0002235a: ZF := 0 = #4831
.address 0x40CD91
00022364: when ~ZF goto %0002235e
00044a24: goto %00022391

.address 0x40CD80
0002235e: 
.address 0x40CD80
00022374: #4833 := mem[RBX + RDX - 1] - 0x2F
.address 0x40CD80
00022377: CF := mem[RBX + RDX - 1] < 0x2F
.address 0x40CD80
0002237a: OF := high:1[(mem[RBX + RDX - 1] ^ 0x2F) & (mem[RBX + RDX - 1] ^ #4833)]
.address 0x40CD80
0002237d: AF := 0x10 = (0x10 & (#4833 ^ mem[RBX + RDX - 1] ^ 0x2F))
.address 0x40CD80
00022380: PF := ~low:1[let $1 = #4833 >> 4 ^ #4833 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CD80
00022383: SF := high:1[#4833]
.address 0x40CD80
00022386: ZF := 0 = #4833
.address 0x40CD85
0002238d: RAX := low:64[RDX - 1]
.address 0x40CD89
00022397: when ~ZF goto %00022391
00044a25: goto %000223ef

.address 0x40CD93
00022391: 
.address 0x40CD93
000223a8: #4835 := RSP
.address 0x40CD93
000223ab: RSP := RSP + 8
.address 0x40CD93
000223ae: CF := RSP < #4835
.address 0x40CD93
000223b1: OF := ~high:1[#4835] & (high:1[#4835] | high:1[RSP]) & ~(high:1[#4835] & high:1[RSP])
.address 0x40CD93
000223b4: AF := 0x10 = (0x10 & (RSP ^ #4835 ^ 8))
.address 0x40CD93
000223b7: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CD93
000223ba: SF := high:1[RSP]
.address 0x40CD93
000223bd: ZF := 0 = RSP
.address 0x40CD97
000223c4: RAX := RDX
.address 0x40CD9A
000223cc: RBX := mem[RSP, el]:u64
.address 0x40CD9A
000223cf: RSP := RSP + 8
.address 0x40CD9B
000223d7: RBP := mem[RSP, el]:u64
.address 0x40CD9B
000223da: RSP := RSP + 8
.address 0x40CD9C
000223e3: #4838 := mem[RSP, el]:u64
.address 0x40CD9C
000223e6: RSP := RSP + 8
.address 0x40CD9C
000223ea: call #4838 with noreturn

.address 0x40CD8B
000223ef: 
.address 0x40CD8B
000223f4: RDX := RAX
00044a26: goto %00022332

.address 0x40CD7C
000223f6: 
.address 0x40CD7C
000223fb: goto %000222a5

.address 0x40CDA0
000222a5: 
.address 0x40CDA0
000222bc: #4825 := RSP
.address 0x40CDA0
000222bf: RSP := RSP + 8
.address 0x40CDA0
000222c2: CF := RSP < #4825
.address 0x40CDA0
000222c5: OF := ~high:1[#4825] & (high:1[#4825] | high:1[RSP]) & ~(high:1[#4825] & high:1[RSP])
.address 0x40CDA0
000222c8: AF := 0x10 = (0x10 & (RSP ^ #4825 ^ 8))
.address 0x40CDA0
000222cb: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CDA0
000222ce: SF := high:1[RSP]
.address 0x40CDA0
000222d1: ZF := 0 = RSP
.address 0x40CDA4
000222d8: RDX := RCX
.address 0x40CDA7
000222df: RAX := RDX
.address 0x40CDAA
000222e7: RBX := mem[RSP, el]:u64
.address 0x40CDAA
000222ea: RSP := RSP + 8
.address 0x40CDAB
000222f2: RBP := mem[RSP, el]:u64
.address 0x40CDAB
000222f5: RSP := RSP + 8
.address 0x40CDAC
000222fe: #4828 := mem[RSP, el]:u64
.address 0x40CDAC
00022301: RSP := RSP + 8
.address 0x40CDAC
00022305: call #4828 with noreturn


.address 0x40CDB0
000441ab: sub sub_40cdb0()
.address 0x40CDB0
00005040: 
.address 0x40CDB0
00005052: #705 := RBP
.address 0x40CDB0
00005055: RSP := RSP - 8
.address 0x40CDB0
00005058: mem := mem with [RSP, el]:u64 <- #705
.address 0x40CDB1
00005061: #706 := RBX
.address 0x40CDB1
00005064: RSP := RSP - 8
.address 0x40CDB1
00005067: mem := mem with [RSP, el]:u64 <- #706
.address 0x40CDB2
0000506e: RBP := RDI
.address 0x40CDB5
0000507c: #707 := RSP
.address 0x40CDB5
0000507f: RSP := RSP - 8
.address 0x40CDB5
00005082: CF := #707 < 8
.address 0x40CDB5
00005085: OF := high:1[(#707 ^ 8) & (#707 ^ RSP)]
.address 0x40CDB5
00005088: AF := 0x10 = (0x10 & (RSP ^ #707 ^ 8))
.address 0x40CDB5
0000508b: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CDB5
0000508e: SF := high:1[RSP]
.address 0x40CDB5
00005091: ZF := 0 = RSP
.address 0x40CDB9
0000509b: RSP := RSP - 8
.address 0x40CDB9
0000509e: mem := mem with [RSP, el]:u64 <- 0x40CDBE
.address 0x40CDB9
000050a1: call @sub_40cd50 with return %00022400

.address 0x40CDBE
00022400: 
.address 0x40CDBE
0002240b: #4839 := RAX
.address 0x40CDBE
0002240e: OF := 0
.address 0x40CDBE
00022411: CF := 0
.address 0x40CDBE
00022414: AF := unknown[bits]:u1
.address 0x40CDBE
00022417: PF := ~low:1[let $1 = #4839 >> 4 ^ #4839 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CDBE
0002241a: SF := high:1[#4839]
.address 0x40CDBE
0002241d: ZF := 0 = #4839
.address 0x40CDC1
00022424: RBX := RAX
.address 0x40CDC4
0002242b: RAX := extract:63:8[RAX].pad:8[ZF]
.address 0x40CDC7
00022432: RAX := pad:64[pad:32[low:8[RAX]]]
.address 0x40CDCA
00022439: RDI := low:64[RBX + RAX + 1]
.address 0x40CDCF
00022442: RSP := RSP - 8
.address 0x40CDCF
00022445: mem := mem with [RSP, el]:u64 <- 0x40CDD4
.address 0x40CDCF
00022448: call @sub_403e78 with return %0002244a

.address 0x40CDD4
0002244a: 
.address 0x40CDD4
00022455: #4841 := RAX
.address 0x40CDD4
00022458: OF := 0
.address 0x40CDD4
0002245b: CF := 0
.address 0x40CDD4
0002245e: AF := unknown[bits]:u1
.address 0x40CDD4
00022461: PF := ~low:1[let $1 = #4841 >> 4 ^ #4841 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CDD4
00022464: SF := high:1[#4841]
.address 0x40CDD4
00022467: ZF := 0 = #4841
.address 0x40CDD7
0002246e: RCX := RAX
.address 0x40CDDA
00022478: when ZF goto %00022472
00044a27: goto %000224ec

.address 0x40CDDC
000224ec: 
.address 0x40CDDC
000224f1: RDX := RBX
.address 0x40CDDF
000224f8: RSI := RBP
.address 0x40CDE2
000224ff: RDI := RAX
.address 0x40CDE5
00022508: RSP := RSP - 8
.address 0x40CDE5
0002250b: mem := mem with [RSP, el]:u64 <- 0x40CDEA
.address 0x40CDE5
0002250e: call @sub_403b80 with return %00022510

.address 0x40CDEA
00022510: 
.address 0x40CDEA
0002251b: #4847 := RBX
.address 0x40CDEA
0002251e: OF := 0
.address 0x40CDEA
00022521: CF := 0
.address 0x40CDEA
00022524: AF := unknown[bits]:u1
.address 0x40CDEA
00022527: PF := ~low:1[let $1 = #4847 >> 4 ^ #4847 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CDEA
0002252a: SF := high:1[#4847]
.address 0x40CDEA
0002252d: ZF := 0 = #4847
.address 0x40CDED
00022534: RCX := RAX
.address 0x40CDF0
0002253d: when ZF goto %000224cd
00044a28: goto %000224dd

.address 0x40CE00
000224cd: 
.address 0x40CE00
000224d2: mem := mem with [RAX] <- 0x2E
.address 0x40CE03
000224d9: RBX := 1
.address 0x40CE08
000224e1: goto %000224dd

.address 0x40CDF2
000224dd: 
.address 0x40CDF2
000224e7: mem := mem with [RCX + RBX] <- 0
00044a29: goto %00022472

.address 0x40CDF6
00022472: 
.address 0x40CDF6
00022489: #4843 := RSP
.address 0x40CDF6
0002248c: RSP := RSP + 8
.address 0x40CDF6
0002248f: CF := RSP < #4843
.address 0x40CDF6
00022492: OF := ~high:1[#4843] & (high:1[#4843] | high:1[RSP]) & ~(high:1[#4843] & high:1[RSP])
.address 0x40CDF6
00022495: AF := 0x10 = (0x10 & (RSP ^ #4843 ^ 8))
.address 0x40CDF6
00022498: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CDF6
0002249b: SF := high:1[RSP]
.address 0x40CDF6
0002249e: ZF := 0 = RSP
.address 0x40CDFA
000224a5: RAX := RCX
.address 0x40CDFD
000224ad: RBX := mem[RSP, el]:u64
.address 0x40CDFD
000224b0: RSP := RSP + 8
.address 0x40CDFE
000224b8: RBP := mem[RSP, el]:u64
.address 0x40CDFE
000224bb: RSP := RSP + 8
.address 0x40CDFF
000224c4: #4846 := mem[RSP, el]:u64
.address 0x40CDFF
000224c7: RSP := RSP + 8
.address 0x40CDFF
000224cb: call #4846 with noreturn


.address 0x40CE10
000441af: sub sub_40ce10()
.address 0x40CE10
00005133: 
.address 0x40CE10
00005143: RDX := pad:64[pad:32[mem[RDI]]]
.address 0x40CE13
0000514a: RAX := RDI
.address 0x40CE16
00005157: #717 := low:8[RDX] - 0x2F
.address 0x40CE16
0000515a: CF := low:8[RDX] < 0x2F
.address 0x40CE16
0000515d: OF := high:1[(low:8[RDX] ^ 0x2F) & (low:8[RDX] ^ #717)]
.address 0x40CE16
00005160: AF := 0x10 = (0x10 & (#717 ^ low:8[RDX] ^ 0x2F))
.address 0x40CE16
00005163: PF := ~low:1[let $1 = #717 >> 4 ^ #717 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CE16
00005166: SF := high:1[#717]
.address 0x40CE16
00005169: ZF := 0 = #717
.address 0x40CE19
00005173: when ~ZF goto %0000516d
00044a2a: goto %000221fd

.address 0x40CE1B
000221fd: 
00044a2b: goto %00022200

.address 0x40CE20
00022200: 
.address 0x40CE20
0002220c: #4815 := RAX
.address 0x40CE20
0002220f: RAX := RAX + 1
.address 0x40CE20
00022212: CF := RAX < #4815
.address 0x40CE20
00022215: OF := ~high:1[#4815] & (high:1[#4815] | high:1[RAX]) & ~(high:1[#4815] & high:1[RAX])
.address 0x40CE20
00022218: AF := 0x10 = (0x10 & (RAX ^ #4815 ^ 1))
.address 0x40CE20
0002221b: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CE20
0002221e: SF := high:1[RAX]
.address 0x40CE20
00022221: ZF := 0 = RAX
.address 0x40CE24
00022228: RDX := pad:64[pad:32[mem[RAX]]]
.address 0x40CE27
00022235: #4818 := low:8[RDX] - 0x2F
.address 0x40CE27
00022238: CF := low:8[RDX] < 0x2F
.address 0x40CE27
0002223b: OF := high:1[(low:8[RDX] ^ 0x2F) & (low:8[RDX] ^ #4818)]
.address 0x40CE27
0002223e: AF := 0x10 = (0x10 & (#4818 ^ low:8[RDX] ^ 0x2F))
.address 0x40CE27
00022241: PF := ~low:1[let $1 = #4818 >> 4 ^ #4818 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CE27
00022244: SF := high:1[#4818]
.address 0x40CE27
00022247: ZF := 0 = #4818
.address 0x40CE2A
00022250: when ZF goto %00022200
00044a2c: goto %0000516d

.address 0x40CE2C
0000516d: 
.address 0x40CE2C
00005183: #719 := low:8[RDX]
.address 0x40CE2C
00005186: OF := 0
.address 0x40CE2C
00005189: CF := 0
.address 0x40CE2C
0000518c: AF := unknown[bits]:u1
.address 0x40CE2C
0000518f: PF := ~low:1[let $1 = #719 >> 4 ^ #719 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CE2C
00005192: SF := high:1[#719]
.address 0x40CE2C
00005195: ZF := 0 = #719
.address 0x40CE2E
0000519f: when ZF goto %00005199
00044a2d: goto %0002209c

.address 0x40CE30
0002209c: 
.address 0x40CE30
000220a1: RCX := RAX
.address 0x40CE33
000220ae: RSI := 0
.address 0x40CE33
000220b1: AF := unknown[bits]:u1
.address 0x40CE33
000220b4: ZF := 1
.address 0x40CE33
000220b7: PF := 1
.address 0x40CE33
000220ba: OF := 0
.address 0x40CE33
000220bd: CF := 0
.address 0x40CE33
000220c0: SF := 0
.address 0x40CE35
000220c8: goto %000220c4

.address 0x40CE55
000220c4: 
.address 0x40CE55
000220d4: #4801 := low:8[RDX] - 0x2F
.address 0x40CE55
000220d7: CF := low:8[RDX] < 0x2F
.address 0x40CE55
000220da: OF := high:1[(low:8[RDX] ^ 0x2F) & (low:8[RDX] ^ #4801)]
.address 0x40CE55
000220dd: AF := 0x10 = (0x10 & (#4801 ^ low:8[RDX] ^ 0x2F))
.address 0x40CE55
000220e0: PF := ~low:1[let $1 = #4801 >> 4 ^ #4801 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CE55
000220e3: SF := high:1[#4801]
.address 0x40CE55
000220e6: ZF := 0 = #4801
.address 0x40CE58
000220f0: when ~ZF goto %000220ea
00044a2e: goto %0002219d

.address 0x40CE5A
0002219d: 
.address 0x40CE5A
000221a9: #4810 := RCX
.address 0x40CE5A
000221ac: RCX := RCX + 1
.address 0x40CE5A
000221af: CF := RCX < #4810
.address 0x40CE5A
000221b2: OF := ~high:1[#4810] & (high:1[#4810] | high:1[RCX]) & ~(high:1[#4810] & high:1[RCX])
.address 0x40CE5A
000221b5: AF := 0x10 = (0x10 & (RCX ^ #4810 ^ 1))
.address 0x40CE5A
000221b8: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CE5A
000221bb: SF := high:1[RCX]
.address 0x40CE5A
000221be: ZF := 0 = RCX
.address 0x40CE5E
000221c5: RDX := pad:64[pad:32[mem[RCX]]]
.address 0x40CE61
000221cc: RSI := 1
.address 0x40CE66
000221d9: #4813 := low:8[RDX]
.address 0x40CE66
000221dc: OF := 0
.address 0x40CE66
000221df: CF := 0
.address 0x40CE66
000221e2: AF := unknown[bits]:u1
.address 0x40CE66
000221e5: PF := ~low:1[let $1 = #4813 >> 4 ^ #4813 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CE66
000221e8: SF := high:1[#4813]
.address 0x40CE66
000221eb: ZF := 0 = #4813
.address 0x40CE68
000221f4: when ~ZF goto %000220c4
00044a2f: goto %00005199

.address 0x40CE40
000220ea: 
.address 0x40CE40
00022100: #4803 := low:8[RSI]
.address 0x40CE40
00022103: OF := 0
.address 0x40CE40
00022106: CF := 0
.address 0x40CE40
00022109: AF := unknown[bits]:u1
.address 0x40CE40
0002210c: PF := ~low:1[let $1 = #4803 >> 4 ^ #4803 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CE40
0002210f: SF := high:1[#4803]
.address 0x40CE40
00022112: ZF := 0 = #4803
.address 0x40CE43
0002211c: when ZF goto %00022116
00044a30: goto %00022177

.address 0x40CE45
00022177: 
.address 0x40CE45
0002217c: RAX := RCX
.address 0x40CE48
00022189: RSI := 0
.address 0x40CE48
0002218c: AF := unknown[bits]:u1
.address 0x40CE48
0002218f: ZF := 1
.address 0x40CE48
00022192: PF := 1
.address 0x40CE48
00022195: OF := 0
.address 0x40CE48
00022198: CF := 0
.address 0x40CE48
0002219b: SF := 0
00044a31: goto %00022116

.address 0x40CE4A
00022116: 
.address 0x40CE4A
0002212d: #4805 := RCX
.address 0x40CE4A
00022130: RCX := RCX + 1
.address 0x40CE4A
00022133: CF := RCX < #4805
.address 0x40CE4A
00022136: OF := ~high:1[#4805] & (high:1[#4805] | high:1[RCX]) & ~(high:1[#4805] & high:1[RCX])
.address 0x40CE4A
00022139: AF := 0x10 = (0x10 & (RCX ^ #4805 ^ 1))
.address 0x40CE4A
0002213c: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CE4A
0002213f: SF := high:1[RCX]
.address 0x40CE4A
00022142: ZF := 0 = RCX
.address 0x40CE4E
00022149: RDX := pad:64[pad:32[mem[RCX]]]
.address 0x40CE51
00022156: #4808 := low:8[RDX]
.address 0x40CE51
00022159: OF := 0
.address 0x40CE51
0002215c: CF := 0
.address 0x40CE51
0002215f: AF := unknown[bits]:u1
.address 0x40CE51
00022162: PF := ~low:1[let $1 = #4808 >> 4 ^ #4808 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CE51
00022165: SF := high:1[#4808]
.address 0x40CE51
00022168: ZF := 0 = #4808
.address 0x40CE53
00022171: when ZF goto %00005199
00044a32: goto %000220c4

.address 0x40CE6A
00005199: 
.address 0x40CE6A
000051ab: #721 := mem[RSP, el]:u64
.address 0x40CE6A
000051ae: RSP := RSP + 8
.address 0x40CE6A
000051b2: call #721 with noreturn


.address 0x40CE70
000441b9: sub sub_40ce70()
.address 0x40CE70
000051b7: 
.address 0x40CE70
000051be: #722 := RBX
.address 0x40CE70
000051c1: RSP := RSP - 8
.address 0x40CE70
000051c4: mem := mem with [RSP, el]:u64 <- #722
.address 0x40CE71
000051cb: RBX := RDI
.address 0x40CE74
000051d4: RSP := RSP - 8
.address 0x40CE74
000051d7: mem := mem with [RSP, el]:u64 <- 0x40CE79
.address 0x40CE74
000051da: call @sub_403950 with return %000051dc

.address 0x40CE79
000051dc: 
.address 0x40CE79
000051e7: #723 := RAX - 1
.address 0x40CE79
000051ea: CF := RAX < 1
.address 0x40CE79
000051ed: OF := high:1[(RAX ^ 1) & (RAX ^ #723)]
.address 0x40CE79
000051f0: AF := 0x10 = (0x10 & (#723 ^ RAX ^ 1))
.address 0x40CE79
000051f3: PF := ~low:1[let $1 = #723 >> 4 ^ #723 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CE79
000051f6: SF := high:1[#723]
.address 0x40CE79
000051f9: ZF := 0 = #723
.address 0x40CE7D
00005203: when CF | ZF goto %000051fd
00044a33: goto %00022069

.address 0x40CE7F
00022069: 
.address 0x40CE7F
00022074: #4799 := mem[RBX + RAX - 1] - 0x2F
.address 0x40CE7F
00022077: CF := mem[RBX + RAX - 1] < 0x2F
.address 0x40CE7F
0002207a: OF := high:1[(mem[RBX + RAX - 1] ^ 0x2F) & (mem[RBX + RAX - 1] ^ #4799)]
.address 0x40CE7F
0002207d: AF := 0x10 = (0x10 & (#4799 ^ mem[RBX + RAX - 1] ^ 0x2F))
.address 0x40CE7F
00022080: PF := ~low:1[let $1 = #4799 >> 4 ^ #4799 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CE7F
00022083: SF := high:1[#4799]
.address 0x40CE7F
00022086: ZF := 0 = #4799
.address 0x40CE84
0002208d: RDX := low:64[RAX - 1]
.address 0x40CE88
00022096: when ZF goto %00005230
00044a34: goto %000051fd

.address 0x40CE98
00005230: 
.address 0x40CE98
0000523b: #726 := RDX - 1
.address 0x40CE98
0000523e: CF := RDX < 1
.address 0x40CE98
00005241: OF := high:1[(RDX ^ 1) & (RDX ^ #726)]
.address 0x40CE98
00005244: AF := 0x10 = (0x10 & (#726 ^ RDX ^ 1))
.address 0x40CE98
00005247: PF := ~low:1[let $1 = #726 >> 4 ^ #726 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CE98
0000524a: SF := high:1[#726]
.address 0x40CE98
0000524d: ZF := 0 = #726
.address 0x40CE9C
00005257: when ZF goto %00005251
00044a35: goto %00022011

.address 0x40CEB0
00005251: 
.address 0x40CEB0
00005261: RAX := 1
.address 0x40CEB5
00005269: RBX := mem[RSP, el]:u64
.address 0x40CEB5
0000526c: RSP := RSP + 8
.address 0x40CEB6
00005275: #728 := mem[RSP, el]:u64
.address 0x40CEB6
00005278: RSP := RSP + 8
.address 0x40CEB6
0000527c: call #728 with noreturn

.address 0x40CE9E
00022011: 
.address 0x40CE9E
0002201c: #4796 := mem[RBX + RDX - 1] - 0x2F
.address 0x40CE9E
0002201f: CF := mem[RBX + RDX - 1] < 0x2F
.address 0x40CE9E
00022022: OF := high:1[(mem[RBX + RDX - 1] ^ 0x2F) & (mem[RBX + RDX - 1] ^ #4796)]
.address 0x40CE9E
00022025: AF := 0x10 = (0x10 & (#4796 ^ mem[RBX + RDX - 1] ^ 0x2F))
.address 0x40CE9E
00022028: PF := ~low:1[let $1 = #4796 >> 4 ^ #4796 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CE9E
0002202b: SF := high:1[#4796]
.address 0x40CE9E
0002202e: ZF := 0 = #4796
.address 0x40CEA3
00022035: RAX := low:64[RDX - 1]
.address 0x40CEA7
0002203e: when ZF goto %00005226
00044a36: goto %00022044

.address 0x40CEA9
00022044: 
.address 0x40CEA9
00022049: RAX := RDX
.address 0x40CEAC
00022051: RBX := mem[RSP, el]:u64
.address 0x40CEAC
00022054: RSP := RSP + 8
.address 0x40CEAD
0002205d: #4798 := mem[RSP, el]:u64
.address 0x40CEAD
00022060: RSP := RSP + 8
.address 0x40CEAD
00022064: call #4798 with noreturn

.address 0x40CE90
00005226: 
.address 0x40CE90
0000522b: RDX := RAX
00044a37: goto %00005230

.address 0x40CE8A
000051fd: 
.address 0x40CE8A
0000520e: RBX := mem[RSP, el]:u64
.address 0x40CE8A
00005211: RSP := RSP + 8
.address 0x40CE8B
0000521a: #725 := mem[RSP, el]:u64
.address 0x40CE8B
0000521d: RSP := RSP + 8
.address 0x40CE8B
00005221: call #725 with noreturn


.address 0x40CEC0
000441bf: sub sub_40cec0()
.address 0x40CEC0
00005281: 
.address 0x40CEC0
00005286: RAX := pad:64[mem[RSI + 0x18, el]:u32]
.address 0x40CEC3
00005293: RAX := pad:64[low:32[RAX] & 0xF000]
.address 0x40CEC3
00005296: OF := 0
.address 0x40CEC3
00005299: CF := 0
.address 0x40CEC3
0000529c: AF := unknown[bits]:u1
.address 0x40CEC3
0000529f: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CEC3
000052a2: SF := high:1[low:32[RAX]]
.address 0x40CEC3
000052a5: ZF := 0 = low:32[RAX]
.address 0x40CEC8
000052b2: #730 := low:32[RAX] - 0xA000
.address 0x40CEC8
000052b5: CF := low:32[RAX] < 0xA000
.address 0x40CEC8
000052b8: OF := high:1[(low:32[RAX] ^ 0xA000) & (low:32[RAX] ^ #730)]
.address 0x40CEC8
000052bb: AF := 0x10 = (0x10 & (#730 ^ low:32[RAX] ^ 0xA000))
.address 0x40CEC8
000052be: PF := ~low:1[let $1 = #730 >> 4 ^ #730 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CEC8
000052c1: SF := high:1[#730]
.address 0x40CEC8
000052c4: ZF := 0 = #730
.address 0x40CECD
000052ce: when ZF goto %000052c8
00044a38: goto %00021f35

.address 0x40CF00
000052c8: 
.address 0x40CF00
000052de: RAX := 0
.address 0x40CF00
000052e1: AF := unknown[bits]:u1
.address 0x40CF00
000052e4: ZF := 1
.address 0x40CF00
000052e7: PF := 1
.address 0x40CF00
000052ea: OF := 0
.address 0x40CF00
000052ed: CF := 0
.address 0x40CF00
000052f0: SF := 0
.address 0x40CF02
000052f9: #732 := mem[RSP, el]:u64
.address 0x40CF02
000052fc: RSP := RSP + 8
.address 0x40CF02
00005300: call #732 with noreturn

.address 0x40CECF
00021f35: 
.address 0x40CECF
00021f3c: #4789 := RBP
.address 0x40CECF
00021f3f: RSP := RSP - 8
.address 0x40CECF
00021f42: mem := mem with [RSP, el]:u64 <- #4789
.address 0x40CED0
00021f4b: #4790 := RBX
.address 0x40CED0
00021f4e: RSP := RSP - 8
.address 0x40CED0
00021f51: mem := mem with [RSP, el]:u64 <- #4790
.address 0x40CED1
00021f58: RBX := RSI
.address 0x40CED4
00021f5f: RSI := 0x41A30B
.address 0x40CEDB
00021f6c: RCX := 0
.address 0x40CEDB
00021f6f: AF := unknown[bits]:u1
.address 0x40CEDB
00021f72: ZF := 1
.address 0x40CEDB
00021f75: PF := 1
.address 0x40CEDB
00021f78: OF := 0
.address 0x40CEDB
00021f7b: CF := 0
.address 0x40CEDB
00021f7e: SF := 0
.address 0x40CEDD
00021f8b: RDX := 0
.address 0x40CEDD
00021f8e: AF := unknown[bits]:u1
.address 0x40CEDD
00021f91: ZF := 1
.address 0x40CEDD
00021f94: PF := 1
.address 0x40CEDD
00021f97: OF := 0
.address 0x40CEDD
00021f9a: CF := 0
.address 0x40CEDD
00021f9d: SF := 0
.address 0x40CEDF
00021fab: #4791 := RSP
.address 0x40CEDF
00021fae: RSP := RSP - 8
.address 0x40CEDF
00021fb1: CF := #4791 < 8
.address 0x40CEDF
00021fb4: OF := high:1[(#4791 ^ 8) & (#4791 ^ RSP)]
.address 0x40CEDF
00021fb7: AF := 0x10 = (0x10 & (RSP ^ #4791 ^ 8))
.address 0x40CEDF
00021fba: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CEDF
00021fbd: SF := high:1[RSP]
.address 0x40CEDF
00021fc0: ZF := 0 = RSP
.address 0x40CEE3
00021fc7: RBP := RDI
.address 0x40CEE6
00021fd0: RSP := RSP - 8
.address 0x40CEE6
00021fd3: mem := mem with [RSP, el]:u64 <- 0x40CEEB
.address 0x40CEE6
00021fd6: call @sub_403d90 with return %00021fd8

.address 0x40CEEB
00021fd8: 
.address 0x40CEEB
00021fe3: #4794 := RAX
.address 0x40CEEB
00021fe6: OF := 0
.address 0x40CEEB
00021fe9: CF := 0
.address 0x40CEEB
00021fec: AF := unknown[bits]:u1
.address 0x40CEEB
00021fef: PF := ~low:1[let $1 = #4794 >> 4 ^ #4794 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CEEB
00021ff2: SF := high:1[#4794]
.address 0x40CEEB
00021ff5: ZF := 0 = #4794
.address 0x40CEEE
00021ffe: when SF goto %00005305
00044a39: goto %00022004

.address 0x40CF08
00005305: 
.address 0x40CF08
0000530c: RSP := RSP - 8
.address 0x40CF08
0000530f: mem := mem with [RSP, el]:u64 <- 0x40CF0D
.address 0x40CF08
00005312: call @sub_4037f0 with return %00005314

.address 0x40CF0D
00005314: 
.address 0x40CF0D
0000531f: #733 := mem[RAX, el]:u32 - 0x3D
.address 0x40CF0D
00005322: CF := mem[RAX, el]:u32 < 0x3D
.address 0x40CF0D
00005325: OF := high:1[(mem[RAX, el]:u32 ^ 0x3D) & (mem[RAX, el]:u32 ^ #733)]
.address 0x40CF0D
00005328: AF := 0x10 = (0x10 & (#733 ^ mem[RAX, el]:u32 ^ 0x3D))
.address 0x40CF0D
0000532b: PF := ~low:1[let $1 = #733 >> 4 ^ #733 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CF0D
0000532e: SF := high:1[#733]
.address 0x40CF0D
00005331: ZF := 0 = #733
.address 0x40CF10
0000533b: when ZF goto %00005335
00044a3a: goto %00021f1f

.address 0x40CF12
00021f1f: 
.address 0x40CF12
00021f26: RSP := RSP - 8
.address 0x40CF12
00021f29: mem := mem with [RSP, el]:u64 <- 0x40CF17
.address 0x40CF12
00021f2c: call @sub_4037f0 with return %00021f2e

.address 0x40CF17
00021f2e: 
.address 0x40CF17
00021f33: RDI := pad:64[mem[RAX, el]:u32]
00044a3b: goto %00005434

.address 0x40CEF0
00022004: 
.address 0x40CEF0
0002200b: when ZF goto %00005335
00044a3c: goto %00021f0d

.address 0x40CF28
00005335: 
.address 0x40CF28
00005345: RAX := pad:64[mem[RBX + 0x18, el]:u32]
.address 0x40CF2B
00005352: RAX := pad:64[low:32[RAX] & 0xF000]
.address 0x40CF2B
00005355: OF := 0
.address 0x40CF2B
00005358: CF := 0
.address 0x40CF2B
0000535b: AF := unknown[bits]:u1
.address 0x40CF2B
0000535e: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CF2B
00005361: SF := high:1[low:32[RAX]]
.address 0x40CF2B
00005364: ZF := 0 = low:32[RAX]
.address 0x40CF30
00005371: #736 := low:32[RAX] - 0x4000
.address 0x40CF30
00005374: CF := low:32[RAX] < 0x4000
.address 0x40CF30
00005377: OF := high:1[(low:32[RAX] ^ 0x4000) & (low:32[RAX] ^ #736)]
.address 0x40CF30
0000537a: AF := 0x10 = (0x10 & (#736 ^ low:32[RAX] ^ 0x4000))
.address 0x40CF30
0000537d: PF := ~low:1[let $1 = #736 >> 4 ^ #736 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CF30
00005380: SF := high:1[#736]
.address 0x40CF30
00005383: ZF := 0 = #736
.address 0x40CF35
0000538d: when ~ZF goto %00005387
00044a3d: goto %00021e84

.address 0x40CF37
00021e84: 
.address 0x40CF37
00021e89: RSI := 0x41A323
.address 0x40CF3E
00021e96: RCX := 0
.address 0x40CF3E
00021e99: AF := unknown[bits]:u1
.address 0x40CF3E
00021e9c: ZF := 1
.address 0x40CF3E
00021e9f: PF := 1
.address 0x40CF3E
00021ea2: OF := 0
.address 0x40CF3E
00021ea5: CF := 0
.address 0x40CF3E
00021ea8: SF := 0
.address 0x40CF40
00021eb5: RDX := 0
.address 0x40CF40
00021eb8: AF := unknown[bits]:u1
.address 0x40CF40
00021ebb: ZF := 1
.address 0x40CF40
00021ebe: PF := 1
.address 0x40CF40
00021ec1: OF := 0
.address 0x40CF40
00021ec4: CF := 0
.address 0x40CF40
00021ec7: SF := 0
.address 0x40CF42
00021ece: RDI := RBP
.address 0x40CF45
00021ed7: RSP := RSP - 8
.address 0x40CF45
00021eda: mem := mem with [RSP, el]:u64 <- 0x40CF4A
.address 0x40CF45
00021edd: call @sub_403d90 with return %00021edf

.address 0x40CF4A
00021edf: 
.address 0x40CF4A
00021eea: #4787 := RAX
.address 0x40CF4A
00021eed: OF := 0
.address 0x40CF4A
00021ef0: CF := 0
.address 0x40CF4A
00021ef3: AF := unknown[bits]:u1
.address 0x40CF4A
00021ef6: PF := ~low:1[let $1 = #4787 >> 4 ^ #4787 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CF4A
00021ef9: SF := high:1[#4787]
.address 0x40CF4A
00021efc: ZF := 0 = #4787
.address 0x40CF4D
00021f05: when SF goto %000053fd
00044a3e: goto %00021f0b

.address 0x40CF60
000053fd: 
.address 0x40CF60
00005404: RSP := RSP - 8
.address 0x40CF60
00005407: mem := mem with [RSP, el]:u64 <- 0x40CF65
.address 0x40CF60
0000540a: call @sub_4037f0 with return %0000540c

.address 0x40CF65
0000540c: 
.address 0x40CF65
00005411: RDI := pad:64[mem[RAX, el]:u32]
.address 0x40CF67
0000541e: #742 := low:32[RDI] - 0x3D
.address 0x40CF67
00005421: CF := low:32[RDI] < 0x3D
.address 0x40CF67
00005424: OF := high:1[(low:32[RDI] ^ 0x3D) & (low:32[RDI] ^ #742)]
.address 0x40CF67
00005427: AF := 0x10 = (0x10 & (#742 ^ low:32[RDI] ^ 0x3D))
.address 0x40CF67
0000542a: PF := ~low:1[let $1 = #742 >> 4 ^ #742 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CF67
0000542d: SF := high:1[#742]
.address 0x40CF67
00005430: ZF := 0 = #742
.address 0x40CF6A
0000543a: when ~ZF goto %00005434
00044a3f: goto %000054ce

.address 0x40CF6C
000054ce: 
.address 0x40CF6C
000054d9: RAX := 0
.address 0x40CF6C
000054dc: AF := unknown[bits]:u1
.address 0x40CF6C
000054df: ZF := 1
.address 0x40CF6C
000054e2: PF := 1
.address 0x40CF6C
000054e5: OF := 0
.address 0x40CF6C
000054e8: CF := 0
.address 0x40CF6C
000054eb: SF := 0
.address 0x40CF6E
000054f2: goto %000053b1

.address 0x40CF19
00005434: 
.address 0x40CF19
00005446: RSP := RSP - 8
.address 0x40CF19
00005449: mem := mem with [RSP, el]:u64 <- 0x40CF1E
.address 0x40CF19
0000544c: call @sub_415c40 with return %0000544e

.address 0x40CF1E
0000544e: 
.address 0x40CF1E
00005453: RAX := pad:64[pad:32[low:8[RAX]]]
.address 0x40CF21
00005461: #744 := low:32[RAX]
.address 0x40CF21
00005464: RAX := pad:64[-low:32[RAX]]
.address 0x40CF21
00005467: CF := if #744 = 0 then 0 else 1
.address 0x40CF21
0000546a: OF := if #744 = 0x80000000 then 1 else 0
.address 0x40CF21
0000546d: AF := 0x10 = (0x10 & (low:32[RAX] ^ #744))
.address 0x40CF21
00005470: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CF21
00005473: SF := high:1[low:32[RAX]]
.address 0x40CF21
00005476: ZF := 0 = low:32[RAX]
.address 0x40CF23
0000547e: goto %0000547a

.address 0x40CF4F
00021f0b: 
.address 0x40CF4F
00021f13: when ~ZF goto %00021f0d
00044a40: goto %00005387

.address 0x40CF51
00005387: 
.address 0x40CF51
0000539d: RAX := 0
.address 0x40CF51
000053a0: AF := unknown[bits]:u1
.address 0x40CF51
000053a3: ZF := 1
.address 0x40CF51
000053a6: PF := 1
.address 0x40CF51
000053a9: OF := 0
.address 0x40CF51
000053ac: CF := 0
.address 0x40CF51
000053af: SF := 0
00044a41: goto %000053b1

.address 0x40CF53
000053b1: 
.address 0x40CF53
000053bd: #738 := RSP
.address 0x40CF53
000053c0: RSP := RSP + 8
.address 0x40CF53
000053c3: CF := RSP < #738
.address 0x40CF53
000053c6: OF := ~high:1[#738] & (high:1[#738] | high:1[RSP]) & ~(high:1[#738] & high:1[RSP])
.address 0x40CF53
000053c9: AF := 0x10 = (0x10 & (RSP ^ #738 ^ 8))
.address 0x40CF53
000053cc: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CF53
000053cf: SF := high:1[RSP]
.address 0x40CF53
000053d2: ZF := 0 = RSP
.address 0x40CF57
000053da: RBX := mem[RSP, el]:u64
.address 0x40CF57
000053dd: RSP := RSP + 8
.address 0x40CF58
000053e5: RBP := mem[RSP, el]:u64
.address 0x40CF58
000053e8: RSP := RSP + 8
.address 0x40CF59
000053f1: #741 := mem[RSP, el]:u64
.address 0x40CF59
000053f4: RSP := RSP + 8
.address 0x40CF59
000053f8: call #741 with noreturn

.address 0x40CEF2
00021f0d: 
.address 0x40CEF2
00021f1d: RAX := 1
00044a42: goto %0000547a

.address 0x40CEF7
0000547a: 
.address 0x40CEF7
0000548b: #746 := RSP
.address 0x40CEF7
0000548e: RSP := RSP + 8
.address 0x40CEF7
00005491: CF := RSP < #746
.address 0x40CEF7
00005494: OF := ~high:1[#746] & (high:1[#746] | high:1[RSP]) & ~(high:1[#746] & high:1[RSP])
.address 0x40CEF7
00005497: AF := 0x10 = (0x10 & (RSP ^ #746 ^ 8))
.address 0x40CEF7
0000549a: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CEF7
0000549d: SF := high:1[RSP]
.address 0x40CEF7
000054a0: ZF := 0 = RSP
.address 0x40CEFB
000054a8: RBX := mem[RSP, el]:u64
.address 0x40CEFB
000054ab: RSP := RSP + 8
.address 0x40CEFC
000054b3: RBP := mem[RSP, el]:u64
.address 0x40CEFC
000054b6: RSP := RSP + 8
.address 0x40CEFD
000054bf: #749 := mem[RSP, el]:u64
.address 0x40CEFD
000054c2: RSP := RSP + 8
.address 0x40CEFD
000054c6: call #749 with noreturn


.address 0x40CF70
000441cb: sub sub_40cf70()
.address 0x40CF70
000054f4: 
.address 0x40CF70
000054ff: #750 := RDI
.address 0x40CF70
00005502: OF := 0
.address 0x40CF70
00005505: CF := 0
.address 0x40CF70
00005508: AF := unknown[bits]:u1
.address 0x40CF70
0000550b: PF := ~low:1[let $1 = #750 >> 4 ^ #750 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CF70
0000550e: SF := high:1[#750]
.address 0x40CF70
00005511: ZF := 0 = #750
.address 0x40CF73
0000551b: when ZF goto %00005515
00044a43: goto %00021c83

.address 0x40CFF0
00005515: 
.address 0x40CFF0
00005527: #752 := mem[RSP, el]:u64
.address 0x40CFF0
0000552a: RSP := RSP + 8
.address 0x40CFF0
0000552e: call #752 with noreturn

.address 0x40CF75
00021c83: 
.address 0x40CF75
00021c8a: #4769 := R13
.address 0x40CF75
00021c8d: RSP := RSP - 8
.address 0x40CF75
00021c90: mem := mem with [RSP, el]:u64 <- #4769
.address 0x40CF77
00021c99: #4770 := R12
.address 0x40CF77
00021c9c: RSP := RSP - 8
.address 0x40CF77
00021c9f: mem := mem with [RSP, el]:u64 <- #4770
.address 0x40CF79
00021ca6: R13 := RDI
.address 0x40CF7C
00021caf: #4771 := RBP
.address 0x40CF7C
00021cb2: RSP := RSP - 8
.address 0x40CF7C
00021cb5: mem := mem with [RSP, el]:u64 <- #4771
.address 0x40CF7D
00021cbe: #4772 := RBX
.address 0x40CF7D
00021cc1: RSP := RSP - 8
.address 0x40CF7D
00021cc4: mem := mem with [RSP, el]:u64 <- #4772
.address 0x40CF7E
00021ccb: R12 := RSI
.address 0x40CF81
00021cd2: RDI := 0x18
.address 0x40CF86
00021cd9: RBP := RDX
.address 0x40CF89
00021ce7: #4773 := RSP
.address 0x40CF89
00021cea: RSP := RSP - 8
.address 0x40CF89
00021ced: CF := #4773 < 8
.address 0x40CF89
00021cf0: OF := high:1[(#4773 ^ 8) & (#4773 ^ RSP)]
.address 0x40CF89
00021cf3: AF := 0x10 = (0x10 & (RSP ^ #4773 ^ 8))
.address 0x40CF89
00021cf6: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CF89
00021cf9: SF := high:1[RSP]
.address 0x40CF89
00021cfc: ZF := 0 = RSP
.address 0x40CF8D
00021d05: RSP := RSP - 8
.address 0x40CF8D
00021d08: mem := mem with [RSP, el]:u64 <- 0x40CF92
.address 0x40CF8D
00021d0b: call @sub_414480 with return %00021d0d

.address 0x40CF92
00021d0d: 
.address 0x40CF92
00021d12: RDI := R12
.address 0x40CF95
00021d19: RBX := RAX
.address 0x40CF98
00021d22: RSP := RSP - 8
.address 0x40CF98
00021d25: mem := mem with [RSP, el]:u64 <- 0x40CF9D
.address 0x40CF98
00021d28: call @sub_4146b0 with return %00021d2a

.address 0x40CF9D
00021d2a: 
.address 0x40CF9D
00021d2f: mem := mem with [RBX, el]:u64 <- RAX
.address 0x40CFA0
00021d36: RAX := mem[RBP + 8, el]:u64
.address 0x40CFA4
00021d3d: RSI := RBX
.address 0x40CFA7
00021d44: RDI := R13
.address 0x40CFAA
00021d4b: mem := mem with [RBX + 8, el]:u64 <- RAX
.address 0x40CFAE
00021d52: RAX := mem[RBP, el]:u64
.address 0x40CFB2
00021d59: mem := mem with [RBX + 0x10, el]:u64 <- RAX
.address 0x40CFB6
00021d62: RSP := RSP - 8
.address 0x40CFB6
00021d65: mem := mem with [RSP, el]:u64 <- 0x40CFBB
.address 0x40CFB6
00021d68: call @sub_40e900 with return %00021d6a

.address 0x40CFBB
00021d6a: 
.address 0x40CFBB
00021d75: #4776 := RAX
.address 0x40CFBB
00021d78: OF := 0
.address 0x40CFBB
00021d7b: CF := 0
.address 0x40CFBB
00021d7e: AF := unknown[bits]:u1
.address 0x40CFBB
00021d81: PF := ~low:1[let $1 = #4776 >> 4 ^ #4776 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CFBB
00021d84: SF := high:1[#4776]
.address 0x40CFBB
00021d87: ZF := 0 = #4776
.address 0x40CFBE
00021d90: when ZF goto %00005530
00044a44: goto %00021d96

.address 0x40CFF2
00005530: 
.address 0x40CFF2
00005537: RSP := RSP - 8
.address 0x40CFF2
0000553a: mem := mem with [RSP, el]:u64 <- 0x40CFF7
.address 0x40CFF2
0000553d: call @sub_4146d0 with return %0000553f

.address 0x40CFF7
0000553f: 
00044a45: call @sub_40d000 with noreturn

.address 0x40CFC0
00021d96: 
.address 0x40CFC0
00021da1: #4778 := RBX - RAX
.address 0x40CFC0
00021da4: CF := RBX < RAX
.address 0x40CFC0
00021da7: OF := high:1[(RBX ^ RAX) & (RBX ^ #4778)]
.address 0x40CFC0
00021daa: AF := 0x10 = (0x10 & (#4778 ^ RBX ^ RAX))
.address 0x40CFC0
00021dad: PF := ~low:1[let $1 = #4778 >> 4 ^ #4778 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40CFC0
00021db0: SF := high:1[#4778]
.address 0x40CFC0
00021db3: ZF := 0 = #4778
.address 0x40CFC3
00021dbd: when ZF goto %00021db7
00044a46: goto %00021e24

.address 0x40CFE0
00021db7: 
.address 0x40CFE0
00021dce: #4780 := RSP
.address 0x40CFE0
00021dd1: RSP := RSP + 8
.address 0x40CFE0
00021dd4: CF := RSP < #4780
.address 0x40CFE0
00021dd7: OF := ~high:1[#4780] & (high:1[#4780] | high:1[RSP]) & ~(high:1[#4780] & high:1[RSP])
.address 0x40CFE0
00021dda: AF := 0x10 = (0x10 & (RSP ^ #4780 ^ 8))
.address 0x40CFE0
00021ddd: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CFE0
00021de0: SF := high:1[RSP]
.address 0x40CFE0
00021de3: ZF := 0 = RSP
.address 0x40CFE4
00021deb: RBX := mem[RSP, el]:u64
.address 0x40CFE4
00021dee: RSP := RSP + 8
.address 0x40CFE5
00021df6: RBP := mem[RSP, el]:u64
.address 0x40CFE5
00021df9: RSP := RSP + 8
.address 0x40CFE6
00021e01: R12 := mem[RSP, el]:u64
.address 0x40CFE6
00021e04: RSP := RSP + 8
.address 0x40CFE8
00021e0c: R13 := mem[RSP, el]:u64
.address 0x40CFE8
00021e0f: RSP := RSP + 8
.address 0x40CFEA
00021e18: #4783 := mem[RSP, el]:u64
.address 0x40CFEA
00021e1b: RSP := RSP + 8
.address 0x40CFEA
00021e1f: call #4783 with noreturn

.address 0x40CFC5
00021e24: 
.address 0x40CFC5
00021e30: #4784 := RSP
.address 0x40CFC5
00021e33: RSP := RSP + 8
.address 0x40CFC5
00021e36: CF := RSP < #4784
.address 0x40CFC5
00021e39: OF := ~high:1[#4784] & (high:1[#4784] | high:1[RSP]) & ~(high:1[#4784] & high:1[RSP])
.address 0x40CFC5
00021e3c: AF := 0x10 = (0x10 & (RSP ^ #4784 ^ 8))
.address 0x40CFC5
00021e3f: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40CFC5
00021e42: SF := high:1[RSP]
.address 0x40CFC5
00021e45: ZF := 0 = RSP
.address 0x40CFC9
00021e4c: RDI := RBX
.address 0x40CFCC
00021e54: RBX := mem[RSP, el]:u64
.address 0x40CFCC
00021e57: RSP := RSP + 8
.address 0x40CFCD
00021e5f: RBP := mem[RSP, el]:u64
.address 0x40CFCD
00021e62: RSP := RSP + 8
.address 0x40CFCE
00021e6a: R12 := mem[RSP, el]:u64
.address 0x40CFCE
00021e6d: RSP := RSP + 8
.address 0x40CFD0
00021e75: R13 := mem[RSP, el]:u64
.address 0x40CFD0
00021e78: RSP := RSP + 8
.address 0x40CFD2
00021e7f: call @sub_40ec20 with noreturn


.address 0x40D000
000441d0: sub sub_40d000()
.address 0x40D000
00005542: 
.address 0x40D000
0000554e: #753 := RSP
.address 0x40D000
00005551: RSP := RSP - 0x28
.address 0x40D000
00005554: CF := #753 < 0x28
.address 0x40D000
00005557: OF := high:1[(#753 ^ 0x28) & (#753 ^ RSP)]
.address 0x40D000
0000555a: AF := 0x10 = (0x10 & (RSP ^ #753 ^ 0x28))
.address 0x40D000
0000555d: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D000
00005560: SF := high:1[RSP]
.address 0x40D000
00005563: ZF := 0 = RSP
.address 0x40D004
0000556a: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x40D00D
00005571: mem := mem with [RSP + 0x18, el]:u64 <- RAX
.address 0x40D012
0000557e: RAX := 0
.address 0x40D012
00005581: AF := unknown[bits]:u1
.address 0x40D012
00005584: ZF := 1
.address 0x40D012
00005587: PF := 1
.address 0x40D012
0000558a: OF := 0
.address 0x40D012
0000558d: CF := 0
.address 0x40D012
00005590: SF := 0
.address 0x40D014
0000559d: #756 := RDI
.address 0x40D014
000055a0: OF := 0
.address 0x40D014
000055a3: CF := 0
.address 0x40D014
000055a6: AF := unknown[bits]:u1
.address 0x40D014
000055a9: PF := ~low:1[let $1 = #756 >> 4 ^ #756 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D014
000055ac: SF := high:1[#756]
.address 0x40D014
000055af: ZF := 0 = #756
.address 0x40D017
000055b9: when ZF goto %000055b3
00044a47: goto %00021c24

.address 0x40D019
00021c24: 
.address 0x40D019
00021c29: RAX := mem[RDX + 8, el]:u64
.address 0x40D01D
00021c30: mem := mem with [RSP, el]:u64 <- RSI
.address 0x40D021
00021c37: RSI := RSP
.address 0x40D024
00021c3e: mem := mem with [RSP + 8, el]:u64 <- RAX
.address 0x40D029
00021c45: RAX := mem[RDX, el]:u64
.address 0x40D02C
00021c4c: mem := mem with [RSP + 0x10, el]:u64 <- RAX
.address 0x40D031
00021c55: RSP := RSP - 8
.address 0x40D031
00021c58: mem := mem with [RSP, el]:u64 <- 0x40D036
.address 0x40D031
00021c5b: call @sub_40de90 with return %00021c5d

.address 0x40D036
00021c5d: 
.address 0x40D036
00021c68: #4767 := RAX
.address 0x40D036
00021c6b: OF := 0
.address 0x40D036
00021c6e: CF := 0
.address 0x40D036
00021c71: AF := unknown[bits]:u1
.address 0x40D036
00021c74: PF := ~low:1[let $1 = #4767 >> 4 ^ #4767 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D036
00021c77: SF := high:1[#4767]
.address 0x40D036
00021c7a: ZF := 0 = #4767
.address 0x40D039
00021c81: RAX := extract:63:8[RAX].pad:8[~ZF]
00044a48: goto %000055b3

.address 0x40D03C
000055b3: 
.address 0x40D03C
000055c3: RCX := mem[RSP + 0x18, el]:u64
.address 0x40D041
000055d0: RCX := RCX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x40D041
000055d3: OF := 0
.address 0x40D041
000055d6: CF := 0
.address 0x40D041
000055d9: AF := unknown[bits]:u1
.address 0x40D041
000055dc: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D041
000055df: SF := high:1[RCX]
.address 0x40D041
000055e2: ZF := 0 = RCX
.address 0x40D04A
000055ec: when ~ZF goto %000055e6
00044a49: goto %00021bf1

.address 0x40D051
000055e6: 
.address 0x40D051
000055f8: RSP := RSP - 8
.address 0x40D051
000055fb: mem := mem with [RSP, el]:u64 <- 0x40D056
.address 0x40D051
000055fe: call @sub_403970 with return %00005600

.address 0x40D056
00005600: 
00044a4a: call @sub_40d060 with noreturn

.address 0x40D04C
00021bf1: 
.address 0x40D04C
00021bfd: #4763 := RSP
.address 0x40D04C
00021c00: RSP := RSP + 0x28
.address 0x40D04C
00021c03: CF := RSP < #4763
.address 0x40D04C
00021c06: OF := ~high:1[#4763] & (high:1[#4763] | high:1[RSP]) & ~(high:1[#4763] & high:1[RSP])
.address 0x40D04C
00021c09: AF := 0x10 = (0x10 & (RSP ^ #4763 ^ 0x28))
.address 0x40D04C
00021c0c: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D04C
00021c0f: SF := high:1[RSP]
.address 0x40D04C
00021c12: ZF := 0 = RSP
.address 0x40D050
00021c1b: #4766 := mem[RSP, el]:u64
.address 0x40D050
00021c1e: RSP := RSP + 8
.address 0x40D050
00021c22: call #4766 with noreturn


.address 0x40D060
000441d5: sub sub_40d060()
.address 0x40D060
00005603: 
.address 0x40D060
00005608: RDX := pad:64[low:32[RDI]]
.address 0x40D062
0000560f: RAX := 0x2D
.address 0x40D067
0000561c: RDX := pad:64[low:32[RDX] & 0xF000]
.address 0x40D067
0000561f: OF := 0
.address 0x40D067
00005622: CF := 0
.address 0x40D067
00005625: AF := unknown[bits]:u1
.address 0x40D067
00005628: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D067
0000562b: SF := high:1[low:32[RDX]]
.address 0x40D067
0000562e: ZF := 0 = low:32[RDX]
.address 0x40D06D
0000563b: #760 := low:32[RDX] - 0x8000
.address 0x40D06D
0000563e: CF := low:32[RDX] < 0x8000
.address 0x40D06D
00005641: OF := high:1[(low:32[RDX] ^ 0x8000) & (low:32[RDX] ^ #760)]
.address 0x40D06D
00005644: AF := 0x10 = (0x10 & (#760 ^ low:32[RDX] ^ 0x8000))
.address 0x40D06D
00005647: PF := ~low:1[let $1 = #760 >> 4 ^ #760 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D06D
0000564a: SF := high:1[#760]
.address 0x40D06D
0000564d: ZF := 0 = #760
.address 0x40D073
00005657: when ZF goto %00005651
00044a4b: goto %00021abb

.address 0x40D075
00021abb: 
.address 0x40D075
00021ac6: #4751 := low:32[RDX] - 0x4000
.address 0x40D075
00021ac9: CF := low:32[RDX] < 0x4000
.address 0x40D075
00021acc: OF := high:1[(low:32[RDX] ^ 0x4000) & (low:32[RDX] ^ #4751)]
.address 0x40D075
00021acf: AF := 0x10 = (0x10 & (#4751 ^ low:32[RDX] ^ 0x4000))
.address 0x40D075
00021ad2: PF := ~low:1[let $1 = #4751 >> 4 ^ #4751 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D075
00021ad5: SF := high:1[#4751]
.address 0x40D075
00021ad8: ZF := 0 = #4751
.address 0x40D07B
00021adf: RAX := 0x64
.address 0x40D080
00021ae8: when ZF goto %00005651
00044a4c: goto %00021aee

.address 0x40D082
00021aee: 
.address 0x40D082
00021af9: #4753 := low:32[RDX] - 0x6000
.address 0x40D082
00021afc: CF := low:32[RDX] < 0x6000
.address 0x40D082
00021aff: OF := high:1[(low:32[RDX] ^ 0x6000) & (low:32[RDX] ^ #4753)]
.address 0x40D082
00021b02: AF := 0x10 = (0x10 & (#4753 ^ low:32[RDX] ^ 0x6000))
.address 0x40D082
00021b05: PF := ~low:1[let $1 = #4753 >> 4 ^ #4753 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D082
00021b08: SF := high:1[#4753]
.address 0x40D082
00021b0b: ZF := 0 = #4753
.address 0x40D088
00021b12: RAX := 0x62
.address 0x40D08D
00021b1b: when ZF goto %00005651
00044a4d: goto %00021b21

.address 0x40D08F
00021b21: 
.address 0x40D08F
00021b2c: #4755 := low:32[RDX] - 0x2000
.address 0x40D08F
00021b2f: CF := low:32[RDX] < 0x2000
.address 0x40D08F
00021b32: OF := high:1[(low:32[RDX] ^ 0x2000) & (low:32[RDX] ^ #4755)]
.address 0x40D08F
00021b35: AF := 0x10 = (0x10 & (#4755 ^ low:32[RDX] ^ 0x2000))
.address 0x40D08F
00021b38: PF := ~low:1[let $1 = #4755 >> 4 ^ #4755 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D08F
00021b3b: SF := high:1[#4755]
.address 0x40D08F
00021b3e: ZF := 0 = #4755
.address 0x40D095
00021b45: RAX := 0x63
.address 0x40D09A
00021b4e: when ZF goto %00005651
00044a4e: goto %00021b54

.address 0x40D09C
00021b54: 
.address 0x40D09C
00021b5f: #4757 := low:32[RDX] - 0xA000
.address 0x40D09C
00021b62: CF := low:32[RDX] < 0xA000
.address 0x40D09C
00021b65: OF := high:1[(low:32[RDX] ^ 0xA000) & (low:32[RDX] ^ #4757)]
.address 0x40D09C
00021b68: AF := 0x10 = (0x10 & (#4757 ^ low:32[RDX] ^ 0xA000))
.address 0x40D09C
00021b6b: PF := ~low:1[let $1 = #4757 >> 4 ^ #4757 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D09C
00021b6e: SF := high:1[#4757]
.address 0x40D09C
00021b71: ZF := 0 = #4757
.address 0x40D0A2
00021b78: RAX := 0x6C
.address 0x40D0A7
00021b81: when ZF goto %00005651
00044a4f: goto %00021b87

.address 0x40D0A9
00021b87: 
.address 0x40D0A9
00021b92: #4759 := low:32[RDX] - 0x1000
.address 0x40D0A9
00021b95: CF := low:32[RDX] < 0x1000
.address 0x40D0A9
00021b98: OF := high:1[(low:32[RDX] ^ 0x1000) & (low:32[RDX] ^ #4759)]
.address 0x40D0A9
00021b9b: AF := 0x10 = (0x10 & (#4759 ^ low:32[RDX] ^ 0x1000))
.address 0x40D0A9
00021b9e: PF := ~low:1[let $1 = #4759 >> 4 ^ #4759 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D0A9
00021ba1: SF := high:1[#4759]
.address 0x40D0A9
00021ba4: ZF := 0 = #4759
.address 0x40D0AF
00021bab: RAX := 0x70
.address 0x40D0B4
00021bb4: when ZF goto %00005651
00044a50: goto %00021bba

.address 0x40D0B6
00021bba: 
.address 0x40D0B6
00021bc5: #4761 := low:32[RDX] - 0xC000
.address 0x40D0B6
00021bc8: CF := low:32[RDX] < 0xC000
.address 0x40D0B6
00021bcb: OF := high:1[(low:32[RDX] ^ 0xC000) & (low:32[RDX] ^ #4761)]
.address 0x40D0B6
00021bce: AF := 0x10 = (0x10 & (#4761 ^ low:32[RDX] ^ 0xC000))
.address 0x40D0B6
00021bd1: PF := ~low:1[let $1 = #4761 >> 4 ^ #4761 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D0B6
00021bd4: SF := high:1[#4761]
.address 0x40D0B6
00021bd7: ZF := 0 = #4761
.address 0x40D0BC
00021bde: RAX := 0x73
.address 0x40D0C1
00021be5: RDX := 0x3F
.address 0x40D0C6
00021bec: RAX := pad:64[if ~ZF then low:32[RDX] else low:32[RAX]]
00044a51: goto %00005651

.address 0x40D0D0
00005651: 
.address 0x40D0D0
00005661: mem := mem with [RSI] <- low:8[RAX]
.address 0x40D0D2
00005668: RAX := pad:64[low:32[RDI]]
.address 0x40D0D4
00005675: RAX := pad:64[low:32[RAX] & 0x100]
.address 0x40D0D4
00005678: OF := 0
.address 0x40D0D4
0000567b: CF := 0
.address 0x40D0D4
0000567e: AF := unknown[bits]:u1
.address 0x40D0D4
00005681: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D0D4
00005684: SF := high:1[low:32[RAX]]
.address 0x40D0D4
00005687: ZF := 0 = low:32[RAX]
.address 0x40D0D9
00005694: #763 := low:32[RAX] - 1
.address 0x40D0D9
00005697: CF := low:32[RAX] < 1
.address 0x40D0D9
0000569a: OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #763)]
.address 0x40D0D9
0000569d: AF := 0x10 = (0x10 & (#763 ^ low:32[RAX] ^ 1))
.address 0x40D0D9
000056a0: PF := ~low:1[let $1 = #763 >> 4 ^ #763 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D0D9
000056a3: SF := high:1[#763]
.address 0x40D0D9
000056a6: ZF := 0 = #763
.address 0x40D0DC
000056b5: #765 := low:32[RAX]
.address 0x40D0DC
000056b8: #766 := low:32[RAX]
.address 0x40D0DC
000056bb: RAX := pad:64[#766 - #765 + pad:32[CF]]
.address 0x40D0DC
000056be: OF := high:1[(#765 ^ #766) & (#766 ^ low:32[RAX])]
.address 0x40D0DC
000056c1: CF := #766 < #765 + pad:32[CF] | #765 + pad:32[CF] < #765
.address 0x40D0DC
000056c4: AF := 0x10 = (0x10 & (low:32[RAX] ^ #765 ^ #766))
.address 0x40D0DC
000056c7: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D0DC
000056ca: SF := high:1[low:32[RAX]]
.address 0x40D0DC
000056cd: ZF := 0 = low:32[RAX]
.address 0x40D0DE
000056da: RAX := pad:64[low:32[RAX] & 0xFFFFFFBB]
.address 0x40D0DE
000056dd: OF := 0
.address 0x40D0DE
000056e0: CF := 0
.address 0x40D0DE
000056e3: AF := unknown[bits]:u1
.address 0x40D0DE
000056e6: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D0DE
000056e9: SF := high:1[low:32[RAX]]
.address 0x40D0DE
000056ec: ZF := 0 = low:32[RAX]
.address 0x40D0E1
000056fa: #769 := low:32[RAX]
.address 0x40D0E1
000056fd: RAX := pad:64[low:32[RAX] + 0x72]
.address 0x40D0E1
00005700: CF := low:32[RAX] < #769
.address 0x40D0E1
00005703: OF := ~high:1[#769] & (high:1[#769] | high:1[low:32[RAX]]) & ~(
high:1[#769] & high:1[low:32[RAX]])
.address 0x40D0E1
00005706: AF := 0x10 = (0x10 & (low:32[RAX] ^ #769 ^ 0x72))
.address 0x40D0E1
00005709: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D0E1
0000570c: SF := high:1[low:32[RAX]]
.address 0x40D0E1
0000570f: ZF := 0 = low:32[RAX]
.address 0x40D0E4
00005716: mem := mem with [RSI + 1] <- low:8[RAX]
.address 0x40D0E7
0000571d: RAX := pad:64[low:32[RDI]]
.address 0x40D0E9
0000572a: RAX := pad:64[low:32[RAX] & 0x80]
.address 0x40D0E9
0000572d: OF := 0
.address 0x40D0E9
00005730: CF := 0
.address 0x40D0E9
00005733: AF := unknown[bits]:u1
.address 0x40D0E9
00005736: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D0E9
00005739: SF := high:1[low:32[RAX]]
.address 0x40D0E9
0000573c: ZF := 0 = low:32[RAX]
.address 0x40D0EE
00005749: #773 := low:32[RAX] - 1
.address 0x40D0EE
0000574c: CF := low:32[RAX] < 1
.address 0x40D0EE
0000574f: OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #773)]
.address 0x40D0EE
00005752: AF := 0x10 = (0x10 & (#773 ^ low:32[RAX] ^ 1))
.address 0x40D0EE
00005755: PF := ~low:1[let $1 = #773 >> 4 ^ #773 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D0EE
00005758: SF := high:1[#773]
.address 0x40D0EE
0000575b: ZF := 0 = #773
.address 0x40D0F1
0000576a: #775 := low:32[RAX]
.address 0x40D0F1
0000576d: #776 := low:32[RAX]
.address 0x40D0F1
00005770: RAX := pad:64[#776 - #775 + pad:32[CF]]
.address 0x40D0F1
00005773: OF := high:1[(#775 ^ #776) & (#776 ^ low:32[RAX])]
.address 0x40D0F1
00005776: CF := #776 < #775 + pad:32[CF] | #775 + pad:32[CF] < #775
.address 0x40D0F1
00005779: AF := 0x10 = (0x10 & (low:32[RAX] ^ #775 ^ #776))
.address 0x40D0F1
0000577c: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D0F1
0000577f: SF := high:1[low:32[RAX]]
.address 0x40D0F1
00005782: ZF := 0 = low:32[RAX]
.address 0x40D0F3
0000578f: RAX := pad:64[low:32[RAX] & 0xFFFFFFB6]
.address 0x40D0F3
00005792: OF := 0
.address 0x40D0F3
00005795: CF := 0
.address 0x40D0F3
00005798: AF := unknown[bits]:u1
.address 0x40D0F3
0000579b: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D0F3
0000579e: SF := high:1[low:32[RAX]]
.address 0x40D0F3
000057a1: ZF := 0 = low:32[RAX]
.address 0x40D0F6
000057af: #779 := low:32[RAX]
.address 0x40D0F6
000057b2: RAX := pad:64[low:32[RAX] + 0x77]
.address 0x40D0F6
000057b5: CF := low:32[RAX] < #779
.address 0x40D0F6
000057b8: OF := ~high:1[#779] & (high:1[#779] | high:1[low:32[RAX]]) & ~(
high:1[#779] & high:1[low:32[RAX]])
.address 0x40D0F6
000057bb: AF := 0x10 = (0x10 & (low:32[RAX] ^ #779 ^ 0x77))
.address 0x40D0F6
000057be: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D0F6
000057c1: SF := high:1[low:32[RAX]]
.address 0x40D0F6
000057c4: ZF := 0 = low:32[RAX]
.address 0x40D0F9
000057cb: mem := mem with [RSI + 2] <- low:8[RAX]
.address 0x40D0FC
000057d2: RAX := pad:64[low:32[RDI]]
.address 0x40D0FE
000057df: RAX := pad:64[low:32[RAX] & 0x40]
.address 0x40D0FE
000057e2: OF := 0
.address 0x40D0FE
000057e5: CF := 0
.address 0x40D0FE
000057e8: AF := unknown[bits]:u1
.address 0x40D0FE
000057eb: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D0FE
000057ee: SF := high:1[low:32[RAX]]
.address 0x40D0FE
000057f1: ZF := 0 = low:32[RAX]
.address 0x40D101
000057fe: #783 := low:32[RAX] - 1
.address 0x40D101
00005801: CF := low:32[RAX] < 1
.address 0x40D101
00005804: OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #783)]
.address 0x40D101
00005807: AF := 0x10 = (0x10 & (#783 ^ low:32[RAX] ^ 1))
.address 0x40D101
0000580a: PF := ~low:1[let $1 = #783 >> 4 ^ #783 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D101
0000580d: SF := high:1[#783]
.address 0x40D101
00005810: ZF := 0 = #783
.address 0x40D104
0000581f: #785 := low:32[RAX]
.address 0x40D104
00005822: #786 := low:32[RAX]
.address 0x40D104
00005825: RAX := pad:64[#786 - #785 + pad:32[CF]]
.address 0x40D104
00005828: OF := high:1[(#785 ^ #786) & (#786 ^ low:32[RAX])]
.address 0x40D104
0000582b: CF := #786 < #785 + pad:32[CF] | #785 + pad:32[CF] < #785
.address 0x40D104
0000582e: AF := 0x10 = (0x10 & (low:32[RAX] ^ #785 ^ #786))
.address 0x40D104
00005831: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D104
00005834: SF := high:1[low:32[RAX]]
.address 0x40D104
00005837: ZF := 0 = low:32[RAX]
.address 0x40D106
00005844: #788 := low:32[RDI] & 0x800
.address 0x40D106
00005847: OF := 0
.address 0x40D106
0000584a: CF := 0
.address 0x40D106
0000584d: AF := unknown[bits]:u1
.address 0x40D106
00005850: PF := ~low:1[let $1 = #788 >> 4 ^ #788 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D106
00005853: SF := high:1[#788]
.address 0x40D106
00005856: ZF := 0 = #788
.address 0x40D10C
00005860: when ZF goto %0000585a
00044a52: goto %00021a79

.address 0x40D1B0
0000585a: 
.address 0x40D1B0
00005870: RAX := pad:64[low:32[RAX] & 0xFFFFFFB5]
.address 0x40D1B0
00005873: OF := 0
.address 0x40D1B0
00005876: CF := 0
.address 0x40D1B0
00005879: AF := unknown[bits]:u1
.address 0x40D1B0
0000587c: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D1B0
0000587f: SF := high:1[low:32[RAX]]
.address 0x40D1B0
00005882: ZF := 0 = low:32[RAX]
.address 0x40D1B3
00005890: #791 := low:32[RAX]
.address 0x40D1B3
00005893: RAX := pad:64[low:32[RAX] + 0x78]
.address 0x40D1B3
00005896: CF := low:32[RAX] < #791
.address 0x40D1B3
00005899: OF := ~high:1[#791] & (high:1[#791] | high:1[low:32[RAX]]) & ~(
high:1[#791] & high:1[low:32[RAX]])
.address 0x40D1B3
0000589c: AF := 0x10 = (0x10 & (low:32[RAX] ^ #791 ^ 0x78))
.address 0x40D1B3
0000589f: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D1B3
000058a2: SF := high:1[low:32[RAX]]
.address 0x40D1B3
000058a5: ZF := 0 = low:32[RAX]
.address 0x40D1B6
000058ad: goto %000058a9

.address 0x40D112
00021a79: 
.address 0x40D112
00021a84: RAX := pad:64[low:32[RAX] & 0xFFFFFFE0]
.address 0x40D112
00021a87: OF := 0
.address 0x40D112
00021a8a: CF := 0
.address 0x40D112
00021a8d: AF := unknown[bits]:u1
.address 0x40D112
00021a90: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D112
00021a93: SF := high:1[low:32[RAX]]
.address 0x40D112
00021a96: ZF := 0 = low:32[RAX]
.address 0x40D115
00021aa4: #4748 := low:32[RAX]
.address 0x40D115
00021aa7: RAX := pad:64[low:32[RAX] + 0x73]
.address 0x40D115
00021aaa: CF := low:32[RAX] < #4748
.address 0x40D115
00021aad: OF := ~high:1[#4748] & (high:1[#4748] | high:1[low:32[RAX]]) & ~(
high:1[#4748] & high:1[low:32[RAX]])
.address 0x40D115
00021ab0: AF := 0x10 = (0x10 & (low:32[RAX] ^ #4748 ^ 0x73))
.address 0x40D115
00021ab3: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D115
00021ab6: SF := high:1[low:32[RAX]]
.address 0x40D115
00021ab9: ZF := 0 = low:32[RAX]
00044a53: goto %000058a9

.address 0x40D118
000058a9: 
.address 0x40D118
000058b3: mem := mem with [RSI + 3] <- low:8[RAX]
.address 0x40D11B
000058ba: RAX := pad:64[low:32[RDI]]
.address 0x40D11D
000058c7: RAX := pad:64[low:32[RAX] & 0x20]
.address 0x40D11D
000058ca: OF := 0
.address 0x40D11D
000058cd: CF := 0
.address 0x40D11D
000058d0: AF := unknown[bits]:u1
.address 0x40D11D
000058d3: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D11D
000058d6: SF := high:1[low:32[RAX]]
.address 0x40D11D
000058d9: ZF := 0 = low:32[RAX]
.address 0x40D120
000058e6: #795 := low:32[RAX] - 1
.address 0x40D120
000058e9: CF := low:32[RAX] < 1
.address 0x40D120
000058ec: OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #795)]
.address 0x40D120
000058ef: AF := 0x10 = (0x10 & (#795 ^ low:32[RAX] ^ 1))
.address 0x40D120
000058f2: PF := ~low:1[let $1 = #795 >> 4 ^ #795 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D120
000058f5: SF := high:1[#795]
.address 0x40D120
000058f8: ZF := 0 = #795
.address 0x40D123
00005907: #797 := low:32[RAX]
.address 0x40D123
0000590a: #798 := low:32[RAX]
.address 0x40D123
0000590d: RAX := pad:64[#798 - #797 + pad:32[CF]]
.address 0x40D123
00005910: OF := high:1[(#797 ^ #798) & (#798 ^ low:32[RAX])]
.address 0x40D123
00005913: CF := #798 < #797 + pad:32[CF] | #797 + pad:32[CF] < #797
.address 0x40D123
00005916: AF := 0x10 = (0x10 & (low:32[RAX] ^ #797 ^ #798))
.address 0x40D123
00005919: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D123
0000591c: SF := high:1[low:32[RAX]]
.address 0x40D123
0000591f: ZF := 0 = low:32[RAX]
.address 0x40D125
0000592c: RAX := pad:64[low:32[RAX] & 0xFFFFFFBB]
.address 0x40D125
0000592f: OF := 0
.address 0x40D125
00005932: CF := 0
.address 0x40D125
00005935: AF := unknown[bits]:u1
.address 0x40D125
00005938: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D125
0000593b: SF := high:1[low:32[RAX]]
.address 0x40D125
0000593e: ZF := 0 = low:32[RAX]
.address 0x40D128
0000594c: #801 := low:32[RAX]
.address 0x40D128
0000594f: RAX := pad:64[low:32[RAX] + 0x72]
.address 0x40D128
00005952: CF := low:32[RAX] < #801
.address 0x40D128
00005955: OF := ~high:1[#801] & (high:1[#801] | high:1[low:32[RAX]]) & ~(
high:1[#801] & high:1[low:32[RAX]])
.address 0x40D128
00005958: AF := 0x10 = (0x10 & (low:32[RAX] ^ #801 ^ 0x72))
.address 0x40D128
0000595b: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D128
0000595e: SF := high:1[low:32[RAX]]
.address 0x40D128
00005961: ZF := 0 = low:32[RAX]
.address 0x40D12B
00005968: mem := mem with [RSI + 4] <- low:8[RAX]
.address 0x40D12E
0000596f: RAX := pad:64[low:32[RDI]]
.address 0x40D130
0000597c: RAX := pad:64[low:32[RAX] & 0x10]
.address 0x40D130
0000597f: OF := 0
.address 0x40D130
00005982: CF := 0
.address 0x40D130
00005985: AF := unknown[bits]:u1
.address 0x40D130
00005988: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D130
0000598b: SF := high:1[low:32[RAX]]
.address 0x40D130
0000598e: ZF := 0 = low:32[RAX]
.address 0x40D133
0000599b: #805 := low:32[RAX] - 1
.address 0x40D133
0000599e: CF := low:32[RAX] < 1
.address 0x40D133
000059a1: OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #805)]
.address 0x40D133
000059a4: AF := 0x10 = (0x10 & (#805 ^ low:32[RAX] ^ 1))
.address 0x40D133
000059a7: PF := ~low:1[let $1 = #805 >> 4 ^ #805 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D133
000059aa: SF := high:1[#805]
.address 0x40D133
000059ad: ZF := 0 = #805
.address 0x40D136
000059bc: #807 := low:32[RAX]
.address 0x40D136
000059bf: #808 := low:32[RAX]
.address 0x40D136
000059c2: RAX := pad:64[#808 - #807 + pad:32[CF]]
.address 0x40D136
000059c5: OF := high:1[(#807 ^ #808) & (#808 ^ low:32[RAX])]
.address 0x40D136
000059c8: CF := #808 < #807 + pad:32[CF] | #807 + pad:32[CF] < #807
.address 0x40D136
000059cb: AF := 0x10 = (0x10 & (low:32[RAX] ^ #807 ^ #808))
.address 0x40D136
000059ce: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D136
000059d1: SF := high:1[low:32[RAX]]
.address 0x40D136
000059d4: ZF := 0 = low:32[RAX]
.address 0x40D138
000059e1: RAX := pad:64[low:32[RAX] & 0xFFFFFFB6]
.address 0x40D138
000059e4: OF := 0
.address 0x40D138
000059e7: CF := 0
.address 0x40D138
000059ea: AF := unknown[bits]:u1
.address 0x40D138
000059ed: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D138
000059f0: SF := high:1[low:32[RAX]]
.address 0x40D138
000059f3: ZF := 0 = low:32[RAX]
.address 0x40D13B
00005a01: #811 := low:32[RAX]
.address 0x40D13B
00005a04: RAX := pad:64[low:32[RAX] + 0x77]
.address 0x40D13B
00005a07: CF := low:32[RAX] < #811
.address 0x40D13B
00005a0a: OF := ~high:1[#811] & (high:1[#811] | high:1[low:32[RAX]]) & ~(
high:1[#811] & high:1[low:32[RAX]])
.address 0x40D13B
00005a0d: AF := 0x10 = (0x10 & (low:32[RAX] ^ #811 ^ 0x77))
.address 0x40D13B
00005a10: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D13B
00005a13: SF := high:1[low:32[RAX]]
.address 0x40D13B
00005a16: ZF := 0 = low:32[RAX]
.address 0x40D13E
00005a1d: mem := mem with [RSI + 5] <- low:8[RAX]
.address 0x40D141
00005a24: RAX := pad:64[low:32[RDI]]
.address 0x40D143
00005a31: RAX := pad:64[low:32[RAX] & 8]
.address 0x40D143
00005a34: OF := 0
.address 0x40D143
00005a37: CF := 0
.address 0x40D143
00005a3a: AF := unknown[bits]:u1
.address 0x40D143
00005a3d: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D143
00005a40: SF := high:1[low:32[RAX]]
.address 0x40D143
00005a43: ZF := 0 = low:32[RAX]
.address 0x40D146
00005a50: #815 := low:32[RAX] - 1
.address 0x40D146
00005a53: CF := low:32[RAX] < 1
.address 0x40D146
00005a56: OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #815)]
.address 0x40D146
00005a59: AF := 0x10 = (0x10 & (#815 ^ low:32[RAX] ^ 1))
.address 0x40D146
00005a5c: PF := ~low:1[let $1 = #815 >> 4 ^ #815 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D146
00005a5f: SF := high:1[#815]
.address 0x40D146
00005a62: ZF := 0 = #815
.address 0x40D149
00005a71: #817 := low:32[RAX]
.address 0x40D149
00005a74: #818 := low:32[RAX]
.address 0x40D149
00005a77: RAX := pad:64[#818 - #817 + pad:32[CF]]
.address 0x40D149
00005a7a: OF := high:1[(#817 ^ #818) & (#818 ^ low:32[RAX])]
.address 0x40D149
00005a7d: CF := #818 < #817 + pad:32[CF] | #817 + pad:32[CF] < #817
.address 0x40D149
00005a80: AF := 0x10 = (0x10 & (low:32[RAX] ^ #817 ^ #818))
.address 0x40D149
00005a83: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D149
00005a86: SF := high:1[low:32[RAX]]
.address 0x40D149
00005a89: ZF := 0 = low:32[RAX]
.address 0x40D14B
00005a96: #820 := low:32[RDI] & 0x400
.address 0x40D14B
00005a99: OF := 0
.address 0x40D14B
00005a9c: CF := 0
.address 0x40D14B
00005a9f: AF := unknown[bits]:u1
.address 0x40D14B
00005aa2: PF := ~low:1[let $1 = #820 >> 4 ^ #820 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D14B
00005aa5: SF := high:1[#820]
.address 0x40D14B
00005aa8: ZF := 0 = #820
.address 0x40D151
00005ab2: when ZF goto %00005aac
00044a54: goto %00021a34

.address 0x40D1D8
00005aac: 
.address 0x40D1D8
00005ac2: RAX := pad:64[low:32[RAX] & 0xFFFFFFB5]
.address 0x40D1D8
00005ac5: OF := 0
.address 0x40D1D8
00005ac8: CF := 0
.address 0x40D1D8
00005acb: AF := unknown[bits]:u1
.address 0x40D1D8
00005ace: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D1D8
00005ad1: SF := high:1[low:32[RAX]]
.address 0x40D1D8
00005ad4: ZF := 0 = low:32[RAX]
.address 0x40D1DB
00005ae2: #823 := low:32[RAX]
.address 0x40D1DB
00005ae5: RAX := pad:64[low:32[RAX] + 0x78]
.address 0x40D1DB
00005ae8: CF := low:32[RAX] < #823
.address 0x40D1DB
00005aeb: OF := ~high:1[#823] & (high:1[#823] | high:1[low:32[RAX]]) & ~(
high:1[#823] & high:1[low:32[RAX]])
.address 0x40D1DB
00005aee: AF := 0x10 = (0x10 & (low:32[RAX] ^ #823 ^ 0x78))
.address 0x40D1DB
00005af1: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D1DB
00005af4: SF := high:1[low:32[RAX]]
.address 0x40D1DB
00005af7: ZF := 0 = low:32[RAX]
.address 0x40D1DE
00005aff: goto %00005afb

.address 0x40D157
00021a34: 
.address 0x40D157
00021a3f: RAX := pad:64[low:32[RAX] & 0xFFFFFFE0]
.address 0x40D157
00021a42: OF := 0
.address 0x40D157
00021a45: CF := 0
.address 0x40D157
00021a48: AF := unknown[bits]:u1
.address 0x40D157
00021a4b: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D157
00021a4e: SF := high:1[low:32[RAX]]
.address 0x40D157
00021a51: ZF := 0 = low:32[RAX]
.address 0x40D15A
00021a5f: #4744 := low:32[RAX]
.address 0x40D15A
00021a62: RAX := pad:64[low:32[RAX] + 0x73]
.address 0x40D15A
00021a65: CF := low:32[RAX] < #4744
.address 0x40D15A
00021a68: OF := ~high:1[#4744] & (high:1[#4744] | high:1[low:32[RAX]]) & ~(
high:1[#4744] & high:1[low:32[RAX]])
.address 0x40D15A
00021a6b: AF := 0x10 = (0x10 & (low:32[RAX] ^ #4744 ^ 0x73))
.address 0x40D15A
00021a6e: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D15A
00021a71: SF := high:1[low:32[RAX]]
.address 0x40D15A
00021a74: ZF := 0 = low:32[RAX]
00044a55: goto %00005afb

.address 0x40D15D
00005afb: 
.address 0x40D15D
00005b05: mem := mem with [RSI + 6] <- low:8[RAX]
.address 0x40D160
00005b0c: RAX := pad:64[low:32[RDI]]
.address 0x40D162
00005b19: RAX := pad:64[low:32[RAX] & 4]
.address 0x40D162
00005b1c: OF := 0
.address 0x40D162
00005b1f: CF := 0
.address 0x40D162
00005b22: AF := unknown[bits]:u1
.address 0x40D162
00005b25: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D162
00005b28: SF := high:1[low:32[RAX]]
.address 0x40D162
00005b2b: ZF := 0 = low:32[RAX]
.address 0x40D165
00005b38: #827 := low:32[RAX] - 1
.address 0x40D165
00005b3b: CF := low:32[RAX] < 1
.address 0x40D165
00005b3e: OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #827)]
.address 0x40D165
00005b41: AF := 0x10 = (0x10 & (#827 ^ low:32[RAX] ^ 1))
.address 0x40D165
00005b44: PF := ~low:1[let $1 = #827 >> 4 ^ #827 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D165
00005b47: SF := high:1[#827]
.address 0x40D165
00005b4a: ZF := 0 = #827
.address 0x40D168
00005b59: #829 := low:32[RAX]
.address 0x40D168
00005b5c: #830 := low:32[RAX]
.address 0x40D168
00005b5f: RAX := pad:64[#830 - #829 + pad:32[CF]]
.address 0x40D168
00005b62: OF := high:1[(#829 ^ #830) & (#830 ^ low:32[RAX])]
.address 0x40D168
00005b65: CF := #830 < #829 + pad:32[CF] | #829 + pad:32[CF] < #829
.address 0x40D168
00005b68: AF := 0x10 = (0x10 & (low:32[RAX] ^ #829 ^ #830))
.address 0x40D168
00005b6b: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D168
00005b6e: SF := high:1[low:32[RAX]]
.address 0x40D168
00005b71: ZF := 0 = low:32[RAX]
.address 0x40D16A
00005b7e: RAX := pad:64[low:32[RAX] & 0xFFFFFFBB]
.address 0x40D16A
00005b81: OF := 0
.address 0x40D16A
00005b84: CF := 0
.address 0x40D16A
00005b87: AF := unknown[bits]:u1
.address 0x40D16A
00005b8a: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D16A
00005b8d: SF := high:1[low:32[RAX]]
.address 0x40D16A
00005b90: ZF := 0 = low:32[RAX]
.address 0x40D16D
00005b9e: #833 := low:32[RAX]
.address 0x40D16D
00005ba1: RAX := pad:64[low:32[RAX] + 0x72]
.address 0x40D16D
00005ba4: CF := low:32[RAX] < #833
.address 0x40D16D
00005ba7: OF := ~high:1[#833] & (high:1[#833] | high:1[low:32[RAX]]) & ~(
high:1[#833] & high:1[low:32[RAX]])
.address 0x40D16D
00005baa: AF := 0x10 = (0x10 & (low:32[RAX] ^ #833 ^ 0x72))
.address 0x40D16D
00005bad: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D16D
00005bb0: SF := high:1[low:32[RAX]]
.address 0x40D16D
00005bb3: ZF := 0 = low:32[RAX]
.address 0x40D170
00005bba: mem := mem with [RSI + 7] <- low:8[RAX]
.address 0x40D173
00005bc1: RAX := pad:64[low:32[RDI]]
.address 0x40D175
00005bce: RAX := pad:64[low:32[RAX] & 2]
.address 0x40D175
00005bd1: OF := 0
.address 0x40D175
00005bd4: CF := 0
.address 0x40D175
00005bd7: AF := unknown[bits]:u1
.address 0x40D175
00005bda: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D175
00005bdd: SF := high:1[low:32[RAX]]
.address 0x40D175
00005be0: ZF := 0 = low:32[RAX]
.address 0x40D178
00005bed: #837 := low:32[RAX] - 1
.address 0x40D178
00005bf0: CF := low:32[RAX] < 1
.address 0x40D178
00005bf3: OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #837)]
.address 0x40D178
00005bf6: AF := 0x10 = (0x10 & (#837 ^ low:32[RAX] ^ 1))
.address 0x40D178
00005bf9: PF := ~low:1[let $1 = #837 >> 4 ^ #837 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D178
00005bfc: SF := high:1[#837]
.address 0x40D178
00005bff: ZF := 0 = #837
.address 0x40D17B
00005c0e: #839 := low:32[RAX]
.address 0x40D17B
00005c11: #840 := low:32[RAX]
.address 0x40D17B
00005c14: RAX := pad:64[#840 - #839 + pad:32[CF]]
.address 0x40D17B
00005c17: OF := high:1[(#839 ^ #840) & (#840 ^ low:32[RAX])]
.address 0x40D17B
00005c1a: CF := #840 < #839 + pad:32[CF] | #839 + pad:32[CF] < #839
.address 0x40D17B
00005c1d: AF := 0x10 = (0x10 & (low:32[RAX] ^ #839 ^ #840))
.address 0x40D17B
00005c20: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D17B
00005c23: SF := high:1[low:32[RAX]]
.address 0x40D17B
00005c26: ZF := 0 = low:32[RAX]
.address 0x40D17D
00005c33: RAX := pad:64[low:32[RAX] & 0xFFFFFFB6]
.address 0x40D17D
00005c36: OF := 0
.address 0x40D17D
00005c39: CF := 0
.address 0x40D17D
00005c3c: AF := unknown[bits]:u1
.address 0x40D17D
00005c3f: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D17D
00005c42: SF := high:1[low:32[RAX]]
.address 0x40D17D
00005c45: ZF := 0 = low:32[RAX]
.address 0x40D180
00005c53: #843 := low:32[RAX]
.address 0x40D180
00005c56: RAX := pad:64[low:32[RAX] + 0x77]
.address 0x40D180
00005c59: CF := low:32[RAX] < #843
.address 0x40D180
00005c5c: OF := ~high:1[#843] & (high:1[#843] | high:1[low:32[RAX]]) & ~(
high:1[#843] & high:1[low:32[RAX]])
.address 0x40D180
00005c5f: AF := 0x10 = (0x10 & (low:32[RAX] ^ #843 ^ 0x77))
.address 0x40D180
00005c62: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D180
00005c65: SF := high:1[low:32[RAX]]
.address 0x40D180
00005c68: ZF := 0 = low:32[RAX]
.address 0x40D183
00005c6f: mem := mem with [RSI + 8] <- low:8[RAX]
.address 0x40D186
00005c76: RAX := pad:64[low:32[RDI]]
.address 0x40D188
00005c83: RAX := pad:64[low:32[RAX] & 1]
.address 0x40D188
00005c86: OF := 0
.address 0x40D188
00005c89: CF := 0
.address 0x40D188
00005c8c: AF := unknown[bits]:u1
.address 0x40D188
00005c8f: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D188
00005c92: SF := high:1[low:32[RAX]]
.address 0x40D188
00005c95: ZF := 0 = low:32[RAX]
.address 0x40D18B
00005ca2: #847 := low:32[RAX] - 1
.address 0x40D18B
00005ca5: CF := low:32[RAX] < 1
.address 0x40D18B
00005ca8: OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #847)]
.address 0x40D18B
00005cab: AF := 0x10 = (0x10 & (#847 ^ low:32[RAX] ^ 1))
.address 0x40D18B
00005cae: PF := ~low:1[let $1 = #847 >> 4 ^ #847 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D18B
00005cb1: SF := high:1[#847]
.address 0x40D18B
00005cb4: ZF := 0 = #847
.address 0x40D18E
00005cc3: #849 := low:32[RAX]
.address 0x40D18E
00005cc6: #850 := low:32[RAX]
.address 0x40D18E
00005cc9: RAX := pad:64[#850 - #849 + pad:32[CF]]
.address 0x40D18E
00005ccc: OF := high:1[(#849 ^ #850) & (#850 ^ low:32[RAX])]
.address 0x40D18E
00005ccf: CF := #850 < #849 + pad:32[CF] | #849 + pad:32[CF] < #849
.address 0x40D18E
00005cd2: AF := 0x10 = (0x10 & (low:32[RAX] ^ #849 ^ #850))
.address 0x40D18E
00005cd5: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D18E
00005cd8: SF := high:1[low:32[RAX]]
.address 0x40D18E
00005cdb: ZF := 0 = low:32[RAX]
.address 0x40D190
00005ce8: RDI := pad:64[low:32[RDI] & 0x200]
.address 0x40D190
00005ceb: OF := 0
.address 0x40D190
00005cee: CF := 0
.address 0x40D190
00005cf1: AF := unknown[bits]:u1
.address 0x40D190
00005cf4: PF := ~low:1[let $1 = low:32[RDI] >> 4 ^ low:32[RDI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D190
00005cf7: SF := high:1[low:32[RDI]]
.address 0x40D190
00005cfa: ZF := 0 = low:32[RDI]
.address 0x40D196
00005d04: when ZF goto %00005cfe
00044a56: goto %00005d73

.address 0x40D1C0
00005cfe: 
.address 0x40D1C0
00005d14: RAX := pad:64[low:32[RAX] & 0xFFFFFFB5]
.address 0x40D1C0
00005d17: OF := 0
.address 0x40D1C0
00005d1a: CF := 0
.address 0x40D1C0
00005d1d: AF := unknown[bits]:u1
.address 0x40D1C0
00005d20: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D1C0
00005d23: SF := high:1[low:32[RAX]]
.address 0x40D1C0
00005d26: ZF := 0 = low:32[RAX]
.address 0x40D1C3
00005d34: #854 := low:32[RAX]
.address 0x40D1C3
00005d37: RAX := pad:64[low:32[RAX] + 0x78]
.address 0x40D1C3
00005d3a: CF := low:32[RAX] < #854
.address 0x40D1C3
00005d3d: OF := ~high:1[#854] & (high:1[#854] | high:1[low:32[RAX]]) & ~(
high:1[#854] & high:1[low:32[RAX]])
.address 0x40D1C3
00005d40: AF := 0x10 = (0x10 & (low:32[RAX] ^ #854 ^ 0x78))
.address 0x40D1C3
00005d43: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D1C3
00005d46: SF := high:1[low:32[RAX]]
.address 0x40D1C3
00005d49: ZF := 0 = low:32[RAX]
.address 0x40D1C6
00005d50: mem := mem with [RSI + 9] <- low:8[RAX]
.address 0x40D1C9
00005d57: RAX := 0x20
.address 0x40D1CE
00005d5e: mem := mem with [RSI + 0xA, el]:u16 <- low:16[RAX]
.address 0x40D1D2
00005d67: #857 := mem[RSP, el]:u64
.address 0x40D1D2
00005d6a: RSP := RSP + 8
.address 0x40D1D2
00005d6e: call #857 with noreturn

.address 0x40D198
00005d73: 
.address 0x40D198
00005d7e: RAX := pad:64[low:32[RAX] & 0xFFFFFFE0]
.address 0x40D198
00005d81: OF := 0
.address 0x40D198
00005d84: CF := 0
.address 0x40D198
00005d87: AF := unknown[bits]:u1
.address 0x40D198
00005d8a: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D198
00005d8d: SF := high:1[low:32[RAX]]
.address 0x40D198
00005d90: ZF := 0 = low:32[RAX]
.address 0x40D19B
00005d9e: #859 := low:32[RAX]
.address 0x40D19B
00005da1: RAX := pad:64[low:32[RAX] + 0x74]
.address 0x40D19B
00005da4: CF := low:32[RAX] < #859
.address 0x40D19B
00005da7: OF := ~high:1[#859] & (high:1[#859] | high:1[low:32[RAX]]) & ~(
high:1[#859] & high:1[low:32[RAX]])
.address 0x40D19B
00005daa: AF := 0x10 = (0x10 & (low:32[RAX] ^ #859 ^ 0x74))
.address 0x40D19B
00005dad: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D19B
00005db0: SF := high:1[low:32[RAX]]
.address 0x40D19B
00005db3: ZF := 0 = low:32[RAX]
.address 0x40D19E
00005dba: mem := mem with [RSI + 9] <- low:8[RAX]
.address 0x40D1A1
00005dc1: RAX := 0x20
.address 0x40D1A6
00005dc8: mem := mem with [RSI + 0xA, el]:u16 <- low:16[RAX]
.address 0x40D1AA
00005dd1: #862 := mem[RSP, el]:u64
.address 0x40D1AA
00005dd4: RSP := RSP + 8
.address 0x40D1AA
00005dd8: call #862 with noreturn


.address 0x40D1F0
000441e2: sub sub_40d1f0()
.address 0x40D1F0
00005de3: 
.address 0x40D1F0
00005de8: RDI := pad:64[mem[RDI + 0x18, el]:u32]
.address 0x40D1F3
00005def: call @sub_40d060 with noreturn


.address 0x40D200
000441e3: sub sub_40d200()
.address 0x40D200
00005df4: 
.address 0x40D200
00005e00: #863 := RSP
.address 0x40D200
00005e03: RSP := RSP - 8
.address 0x40D200
00005e06: CF := #863 < 8
.address 0x40D200
00005e09: OF := high:1[(#863 ^ 8) & (#863 ^ RSP)]
.address 0x40D200
00005e0c: AF := 0x10 = (0x10 & (RSP ^ #863 ^ 8))
.address 0x40D200
00005e0f: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D200
00005e12: SF := high:1[RSP]
.address 0x40D200
00005e15: ZF := 0 = RSP
.address 0x40D204
00005e1f: RSP := RSP - 8
.address 0x40D204
00005e22: mem := mem with [RSP, el]:u64 <- 0x40D209
.address 0x40D204
00005e25: call @sub_40d220 with return %000219c3

.address 0x40D209
000219c3: 
.address 0x40D209
000219ce: #4737 := RAX
.address 0x40D209
000219d1: OF := 0
.address 0x40D209
000219d4: CF := 0
.address 0x40D209
000219d7: AF := unknown[bits]:u1
.address 0x40D209
000219da: PF := ~low:1[let $1 = #4737 >> 4 ^ #4737 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D209
000219dd: SF := high:1[#4737]
.address 0x40D209
000219e0: ZF := 0 = #4737
.address 0x40D20C
000219ea: when ZF goto %000219e4
00044a57: goto %00021a01

.address 0x40D213
000219e4: 
.address 0x40D213
000219f6: RSP := RSP - 8
.address 0x40D213
000219f9: mem := mem with [RSP, el]:u64 <- 0x40D218
.address 0x40D213
000219fc: call @sub_4146d0 with return %000219fe

.address 0x40D218
000219fe: 
00044a58: call @sub_40d220 with noreturn

.address 0x40D20E
00021a01: 
.address 0x40D20E
00021a0d: #4739 := RSP
.address 0x40D20E
00021a10: RSP := RSP + 8
.address 0x40D20E
00021a13: CF := RSP < #4739
.address 0x40D20E
00021a16: OF := ~high:1[#4739] & (high:1[#4739] | high:1[RSP]) & ~(high:1[#4739] & high:1[RSP])
.address 0x40D20E
00021a19: AF := 0x10 = (0x10 & (RSP ^ #4739 ^ 8))
.address 0x40D20E
00021a1c: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D20E
00021a1f: SF := high:1[RSP]
.address 0x40D20E
00021a22: ZF := 0 = RSP
.address 0x40D212
00021a2b: #4742 := mem[RSP, el]:u64
.address 0x40D212
00021a2e: RSP := RSP + 8
.address 0x40D212
00021a32: call #4742 with noreturn


.address 0x40D220
000441e6: sub sub_40d220()
.address 0x40D220
00005e1b: 
.address 0x40D220
00005e2d: #866 := R15
.address 0x40D220
00005e30: RSP := RSP - 8
.address 0x40D220
00005e33: mem := mem with [RSP, el]:u64 <- #866
.address 0x40D222
00005e3c: #867 := R14
.address 0x40D222
00005e3f: RSP := RSP - 8
.address 0x40D222
00005e42: mem := mem with [RSP, el]:u64 <- #867
.address 0x40D224
00005e49: R15 := RDX
.address 0x40D227
00005e52: #868 := R13
.address 0x40D227
00005e55: RSP := RSP - 8
.address 0x40D227
00005e58: mem := mem with [RSP, el]:u64 <- #868
.address 0x40D229
00005e61: #869 := R12
.address 0x40D229
00005e64: RSP := RSP - 8
.address 0x40D229
00005e67: mem := mem with [RSP, el]:u64 <- #869
.address 0x40D22B
00005e6e: R14 := RDI
.address 0x40D22E
00005e77: #870 := RBP
.address 0x40D22E
00005e7a: RSP := RSP - 8
.address 0x40D22E
00005e7d: mem := mem with [RSP, el]:u64 <- #870
.address 0x40D22F
00005e86: #871 := RBX
.address 0x40D22F
00005e89: RSP := RSP - 8
.address 0x40D22F
00005e8c: mem := mem with [RSP, el]:u64 <- #871
.address 0x40D230
00005e93: R12 := RSI
.address 0x40D233
00005ea1: #872 := RSP
.address 0x40D233
00005ea4: RSP := RSP - 0x18
.address 0x40D233
00005ea7: CF := #872 < 0x18
.address 0x40D233
00005eaa: OF := high:1[(#872 ^ 0x18) & (#872 ^ RSP)]
.address 0x40D233
00005ead: AF := 0x10 = (0x10 & (RSP ^ #872 ^ 0x18))
.address 0x40D233
00005eb0: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D233
00005eb3: SF := high:1[RSP]
.address 0x40D233
00005eb6: ZF := 0 = RSP
.address 0x40D237
00005ebf: RSP := RSP - 8
.address 0x40D237
00005ec2: mem := mem with [RSP, el]:u64 <- 0x40D23C
.address 0x40D237
00005ec5: call @sub_40ce10 with return %00005ec7

.address 0x40D23C
00005ec7: 
.address 0x40D23C
00005ecc: R13 := RAX
.address 0x40D23F
00005ed3: RDI := RAX
.address 0x40D242
00005eda: RBP := R13
.address 0x40D245
00005ee9: #875 := RBP
.address 0x40D245
00005eec: #876 := R14
.address 0x40D245
00005eef: RBP := RBP - R14
.address 0x40D245
00005ef2: CF := #875 < #876
.address 0x40D245
00005ef5: OF := high:1[(#875 ^ #876) & (#875 ^ RBP)]
.address 0x40D245
00005ef8: AF := 0x10 = (0x10 & (RBP ^ #875 ^ #876))
.address 0x40D245
00005efb: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D245
00005efe: SF := high:1[RBP]
.address 0x40D245
00005f01: ZF := 0 = RBP
.address 0x40D248
00005f0a: RSP := RSP - 8
.address 0x40D248
00005f0d: mem := mem with [RSP, el]:u64 <- 0x40D24D
.address 0x40D248
00005f10: call @sub_40ce70 with return %00005f12

.address 0x40D24D
00005f12: 
.address 0x40D24D
00005f1f: #878 := RBP
.address 0x40D24D
00005f22: #879 := RAX
.address 0x40D24D
00005f25: RBP := RBP + #879
.address 0x40D24D
00005f28: CF := RBP < #878
.address 0x40D24D
00005f2b: OF := high:1[#878] = high:1[#879] & (high:1[#878] | high:1[RBP]) & ~(
high:1[#878] & high:1[RBP])
.address 0x40D24D
00005f2e: AF := 0x10 = (0x10 & (RBP ^ #878 ^ #879))
.address 0x40D24D
00005f31: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D24D
00005f34: SF := high:1[RBP]
.address 0x40D24D
00005f37: ZF := 0 = RBP
.address 0x40D250
00005f44: #881 := RAX
.address 0x40D250
00005f47: OF := 0
.address 0x40D250
00005f4a: CF := 0
.address 0x40D250
00005f4d: AF := unknown[bits]:u1
.address 0x40D250
00005f50: PF := ~low:1[let $1 = #881 >> 4 ^ #881 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D250
00005f53: SF := high:1[#881]
.address 0x40D250
00005f56: ZF := 0 = #881
.address 0x40D253
00005f5d: RBX := RAX
.address 0x40D256
00005f67: when ZF goto %00005f61
00044a59: goto %00021996

.address 0x40D258
00021996: 
.address 0x40D258
000219a1: #4735 := mem[R13 + RAX - 1] - 0x2F
.address 0x40D258
000219a4: CF := mem[R13 + RAX - 1] < 0x2F
.address 0x40D258
000219a7: OF := high:1[(mem[R13 + RAX - 1] ^ 0x2F) & (mem[R13 + RAX - 1] ^ #4735)]
.address 0x40D258
000219aa: AF := 0x10 = (0x10 & (#4735 ^ mem[R13 + RAX - 1] ^ 0x2F))
.address 0x40D258
000219ad: PF := ~low:1[let $1 = #4735 >> 4 ^ #4735 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D258
000219b0: SF := high:1[#4735]
.address 0x40D258
000219b3: ZF := 0 = #4735
.address 0x40D25E
000219ba: RBX := extract:63:8[RBX].pad:8[~ZF]
.address 0x40D261
000219c1: RBX := pad:64[pad:32[low:8[RBX]]]
00044a5a: goto %00005f61

.address 0x40D264
00005f61: 
.address 0x40D264
00005f71: RAX := pad:64[pad:32[mem[R12]]]
.address 0x40D269
00005f7e: #883 := low:8[RAX] - 0x2F
.address 0x40D269
00005f81: CF := low:8[RAX] < 0x2F
.address 0x40D269
00005f84: OF := high:1[(low:8[RAX] ^ 0x2F) & (low:8[RAX] ^ #883)]
.address 0x40D269
00005f87: AF := 0x10 = (0x10 & (#883 ^ low:8[RAX] ^ 0x2F))
.address 0x40D269
00005f8a: PF := ~low:1[let $1 = #883 >> 4 ^ #883 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D269
00005f8d: SF := high:1[#883]
.address 0x40D269
00005f90: ZF := 0 = #883
.address 0x40D26B
00005f97: mem := mem with [RSP + 0xF] <- low:8[RAX]
.address 0x40D26F
00005fa1: when ZF goto %00005f9b
00044a5b: goto %00005fea

.address 0x40D2E0
00005f9b: 
.address 0x40D2E0
00005fb2: #885 := R12
.address 0x40D2E0
00005fb5: R12 := R12 + 1
.address 0x40D2E0
00005fb8: CF := R12 < #885
.address 0x40D2E0
00005fbb: OF := ~high:1[#885] & (high:1[#885] | high:1[R12]) & ~(high:1[#885] & high:1[R12])
.address 0x40D2E0
00005fbe: AF := 0x10 = (0x10 & (R12 ^ #885 ^ 1))
.address 0x40D2E0
00005fc1: PF := ~low:1[let $1 = R12 >> 4 ^ R12 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D2E0
00005fc4: SF := high:1[R12]
.address 0x40D2E0
00005fc7: ZF := 0 = R12
.address 0x40D2E4
00005fd4: #888 := mem[R12] - 0x2F
.address 0x40D2E4
00005fd7: CF := mem[R12] < 0x2F
.address 0x40D2E4
00005fda: OF := high:1[(mem[R12] ^ 0x2F) & (mem[R12] ^ #888)]
.address 0x40D2E4
00005fdd: AF := 0x10 = (0x10 & (#888 ^ mem[R12] ^ 0x2F))
.address 0x40D2E4
00005fe0: PF := ~low:1[let $1 = #888 >> 4 ^ #888 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D2E4
00005fe3: SF := high:1[#888]
.address 0x40D2E4
00005fe6: ZF := 0 = #888
.address 0x40D2E9
00005ff0: when ~ZF goto %00005fea
00044a5c: goto %000061fa

.address 0x40D2EB
000061fa: 
.address 0x40D2EB
000061ff: goto %00005f9b

.address 0x40D271
00005fea: 
.address 0x40D271
00005ffa: RDI := R12
.address 0x40D274
00006003: RSP := RSP - 8
.address 0x40D274
00006006: mem := mem with [RSP, el]:u64 <- 0x40D279
.address 0x40D274
00006009: call @sub_403950 with return %0000600b

.address 0x40D279
0000600b: 
.address 0x40D279
00006010: RDI := low:64[RBX + RBP + 1]
.address 0x40D27E
00006017: mem := mem with [RSP, el]:u64 <- RAX
.address 0x40D282
00006026: #890 := RDI
.address 0x40D282
00006029: #891 := RAX
.address 0x40D282
0000602c: RDI := RDI + #891
.address 0x40D282
0000602f: CF := RDI < #890
.address 0x40D282
00006032: OF := high:1[#890] = high:1[#891] & (high:1[#890] | high:1[RDI]) & ~(
high:1[#890] & high:1[RDI])
.address 0x40D282
00006035: AF := 0x10 = (0x10 & (RDI ^ #890 ^ #891))
.address 0x40D282
00006038: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D282
0000603b: SF := high:1[RDI]
.address 0x40D282
0000603e: ZF := 0 = RDI
.address 0x40D285
00006047: RSP := RSP - 8
.address 0x40D285
0000604a: mem := mem with [RSP, el]:u64 <- 0x40D28A
.address 0x40D285
0000604d: call @sub_403e78 with return %0000604f

.address 0x40D28A
0000604f: 
.address 0x40D28A
0000605a: #893 := RAX
.address 0x40D28A
0000605d: OF := 0
.address 0x40D28A
00006060: CF := 0
.address 0x40D28A
00006063: AF := unknown[bits]:u1
.address 0x40D28A
00006066: PF := ~low:1[let $1 = #893 >> 4 ^ #893 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D28A
00006069: SF := high:1[#893]
.address 0x40D28A
0000606c: ZF := 0 = #893
.address 0x40D28D
00006073: R13 := RAX
.address 0x40D290
0000607d: when ZF goto %00006077
00044a5d: goto %000060fe

.address 0x40D292
000060fe: 
.address 0x40D292
00006103: RDI := RAX
.address 0x40D295
0000610a: RDX := RBP
.address 0x40D298
00006111: RSI := R14
.address 0x40D29B
0000611a: RSP := RSP - 8
.address 0x40D29B
0000611d: mem := mem with [RSP, el]:u64 <- 0x40D2A0
.address 0x40D29B
00006120: call @sub_403d00 with return %00006122

.address 0x40D2A0
00006122: 
.address 0x40D2A0
0000612d: #899 := R15
.address 0x40D2A0
00006130: OF := 0
.address 0x40D2A0
00006133: CF := 0
.address 0x40D2A0
00006136: AF := unknown[bits]:u1
.address 0x40D2A0
00006139: PF := ~low:1[let $1 = #899 >> 4 ^ #899 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D2A0
0000613c: SF := high:1[#899]
.address 0x40D2A0
0000613f: ZF := 0 = #899
.address 0x40D2A3
00006146: mem := mem with [RAX] <- 0x2F
.address 0x40D2A6
0000614d: RDI := low:64[RAX + RBX]
.address 0x40D2AA
00006157: when ZF goto %00006151
00044a5e: goto %00006180

.address 0x40D2AC
00006180: 
.address 0x40D2AC
0000618b: RAX := 0
.address 0x40D2AC
0000618e: AF := unknown[bits]:u1
.address 0x40D2AC
00006191: ZF := 1
.address 0x40D2AC
00006194: PF := 1
.address 0x40D2AC
00006197: OF := 0
.address 0x40D2AC
0000619a: CF := 0
.address 0x40D2AC
0000619d: SF := 0
.address 0x40D2AE
000061aa: #901 := mem[RSP + 0xF] - 0x2F
.address 0x40D2AE
000061ad: CF := mem[RSP + 0xF] < 0x2F
.address 0x40D2AE
000061b0: OF := high:1[(mem[RSP + 0xF] ^ 0x2F) & (mem[RSP + 0xF] ^ #901)]
.address 0x40D2AE
000061b3: AF := 0x10 = (0x10 & (#901 ^ mem[RSP + 0xF] ^ 0x2F))
.address 0x40D2AE
000061b6: PF := ~low:1[let $1 = #901 >> 4 ^ #901 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D2AE
000061b9: SF := high:1[#901]
.address 0x40D2AE
000061bc: ZF := 0 = #901
.address 0x40D2B3
000061c3: RCX := RDI
.address 0x40D2B6
000061ca: RAX := extract:63:8[RAX].pad:8[ZF]
.address 0x40D2B9
000061d9: #903 := RCX
.address 0x40D2B9
000061dc: #904 := RAX
.address 0x40D2B9
000061df: RCX := RCX - RAX
.address 0x40D2B9
000061e2: CF := #903 < #904
.address 0x40D2B9
000061e5: OF := high:1[(#903 ^ #904) & (#903 ^ RCX)]
.address 0x40D2B9
000061e8: AF := 0x10 = (0x10 & (RCX ^ #903 ^ #904))
.address 0x40D2B9
000061eb: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D2B9
000061ee: SF := high:1[RCX]
.address 0x40D2B9
000061f1: ZF := 0 = RCX
.address 0x40D2BC
000061f8: mem := mem with [R15, el]:u64 <- RCX
00044a5f: goto %00006151

.address 0x40D2BF
00006151: 
.address 0x40D2BF
00006161: RDX := mem[RSP, el]:u64
.address 0x40D2C3
00006168: RSI := R12
.address 0x40D2C6
00006171: RSP := RSP - 8
.address 0x40D2C6
00006174: mem := mem with [RSP, el]:u64 <- 0x40D2CB
.address 0x40D2C6
00006177: call @sub_403d00 with return %00006179

.address 0x40D2CB
00006179: 
.address 0x40D2CB
0000617e: mem := mem with [RAX] <- 0
00044a60: goto %00006077

.address 0x40D2CE
00006077: 
.address 0x40D2CE
0000608e: #895 := RSP
.address 0x40D2CE
00006091: RSP := RSP + 0x18
.address 0x40D2CE
00006094: CF := RSP < #895
.address 0x40D2CE
00006097: OF := ~high:1[#895] & (high:1[#895] | high:1[RSP]) & ~(high:1[#895] & high:1[RSP])
.address 0x40D2CE
0000609a: AF := 0x10 = (0x10 & (RSP ^ #895 ^ 0x18))
.address 0x40D2CE
0000609d: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D2CE
000060a0: SF := high:1[RSP]
.address 0x40D2CE
000060a3: ZF := 0 = RSP
.address 0x40D2D2
000060aa: RAX := R13
.address 0x40D2D5
000060b2: RBX := mem[RSP, el]:u64
.address 0x40D2D5
000060b5: RSP := RSP + 8
.address 0x40D2D6
000060bd: RBP := mem[RSP, el]:u64
.address 0x40D2D6
000060c0: RSP := RSP + 8
.address 0x40D2D7
000060c8: R12 := mem[RSP, el]:u64
.address 0x40D2D7
000060cb: RSP := RSP + 8
.address 0x40D2D9
000060d3: R13 := mem[RSP, el]:u64
.address 0x40D2D9
000060d6: RSP := RSP + 8
.address 0x40D2DB
000060de: R14 := mem[RSP, el]:u64
.address 0x40D2DB
000060e1: RSP := RSP + 8
.address 0x40D2DD
000060e9: R15 := mem[RSP, el]:u64
.address 0x40D2DD
000060ec: RSP := RSP + 8
.address 0x40D2DF
000060f5: #898 := mem[RSP, el]:u64
.address 0x40D2DF
000060f8: RSP := RSP + 8
.address 0x40D2DF
000060fc: call #898 with noreturn


.address 0x40D2F0
000441ef: sub sub_40d2f0()
.address 0x40D2F0
00006204: 
.address 0x40D2F0
00006209: RSI := mem[RDI, el]:u64
.address 0x40D2F3
00006210: RDX := pad:64[pad:32[mem[RSI]]]
.address 0x40D2F6
0000621d: #906 := low:8[RDX]
.address 0x40D2F6
00006220: OF := 0
.address 0x40D2F6
00006223: CF := 0
.address 0x40D2F6
00006226: AF := unknown[bits]:u1
.address 0x40D2F6
00006229: PF := ~low:1[let $1 = #906 >> 4 ^ #906 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D2F6
0000622c: SF := high:1[#906]
.address 0x40D2F6
0000622f: ZF := 0 = #906
.address 0x40D2F8
00006239: when ZF goto %00006233
00044a61: goto %000215a9

.address 0x40D3B0
00006233: 
.address 0x40D3B0
00006249: RAX := 0
.address 0x40D3B0
0000624c: AF := unknown[bits]:u1
.address 0x40D3B0
0000624f: ZF := 1
.address 0x40D3B0
00006252: PF := 1
.address 0x40D3B0
00006255: OF := 0
.address 0x40D3B0
00006258: CF := 0
.address 0x40D3B0
0000625b: SF := 0
.address 0x40D3B2
00006264: #908 := mem[RSP, el]:u64
.address 0x40D3B2
00006267: RSP := RSP + 8
.address 0x40D3B2
0000626b: call #908 with noreturn

.address 0x40D2FE
000215a9: 
.address 0x40D2FE
000215b4: RCX := 0
.address 0x40D2FE
000215b7: AF := unknown[bits]:u1
.address 0x40D2FE
000215ba: ZF := 1
.address 0x40D2FE
000215bd: PF := 1
.address 0x40D2FE
000215c0: OF := 0
.address 0x40D2FE
000215c3: CF := 0
.address 0x40D2FE
000215c6: SF := 0
.address 0x40D300
000215d3: RAX := 0
.address 0x40D300
000215d6: AF := unknown[bits]:u1
.address 0x40D300
000215d9: ZF := 1
.address 0x40D300
000215dc: PF := 1
.address 0x40D300
000215df: OF := 0
.address 0x40D300
000215e2: CF := 0
.address 0x40D300
000215e5: SF := 0
.address 0x40D302
000215f2: R8 := 0
.address 0x40D302
000215f5: AF := unknown[bits]:u1
.address 0x40D302
000215f8: ZF := 1
.address 0x40D302
000215fb: PF := 1
.address 0x40D302
000215fe: OF := 0
.address 0x40D302
00021601: CF := 0
.address 0x40D302
00021604: SF := 0
.address 0x40D305
0002160b: R11 := 1
.address 0x40D30B
00021612: R10 := 0x3FFFFFF03FFFFFF
.address 0x40D315
0002161a: goto %00021616

.address 0x40D34F
00021616: 
.address 0x40D34F
00021626: #4697 := low:8[RCX]
.address 0x40D34F
00021629: OF := 0
.address 0x40D34F
0002162c: CF := 0
.address 0x40D34F
0002162f: AF := unknown[bits]:u1
.address 0x40D34F
00021632: PF := ~low:1[let $1 = #4697 >> 4 ^ #4697 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D34F
00021635: SF := high:1[#4697]
.address 0x40D34F
00021638: ZF := 0 = #4697
.address 0x40D351
00021642: when ~ZF goto %0002163c
00044a62: goto %000218dc

.address 0x40D353
000218dc: 
.address 0x40D353
000218e7: #4727 := low:8[RDX] - 0x2E
.address 0x40D353
000218ea: CF := low:8[RDX] < 0x2E
.address 0x40D353
000218ed: OF := high:1[(low:8[RDX] ^ 0x2E) & (low:8[RDX] ^ #4727)]
.address 0x40D353
000218f0: AF := 0x10 = (0x10 & (#4727 ^ low:8[RDX] ^ 0x2E))
.address 0x40D353
000218f3: PF := ~low:1[let $1 = #4727 >> 4 ^ #4727 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D353
000218f6: SF := high:1[#4727]
.address 0x40D353
000218f9: ZF := 0 = #4727
.address 0x40D356
00021902: when ZF goto %00021752
00044a63: goto %00021908

.address 0x40D388
00021752: 
.address 0x40D388
0002175d: #4712 := RAX
.address 0x40D388
00021760: OF := 0
.address 0x40D388
00021763: CF := 0
.address 0x40D388
00021766: AF := unknown[bits]:u1
.address 0x40D388
00021769: PF := ~low:1[let $1 = #4712 >> 4 ^ #4712 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D388
0002176c: SF := high:1[#4712]
.address 0x40D388
0002176f: ZF := 0 = #4712
.address 0x40D38B
00021776: RCX := 1
.address 0x40D390
0002177d: RAX := if ZF then RSI else RAX
.address 0x40D394
00021784: goto %000216e2

.address 0x40D358
00021908: 
.address 0x40D358
00021913: #4729 := low:8[RDX] - 0x5A
.address 0x40D358
00021916: CF := low:8[RDX] < 0x5A
.address 0x40D358
00021919: OF := high:1[(low:8[RDX] ^ 0x5A) & (low:8[RDX] ^ #4729)]
.address 0x40D358
0002191c: AF := 0x10 = (0x10 & (#4729 ^ low:8[RDX] ^ 0x5A))
.address 0x40D358
0002191f: PF := ~low:1[let $1 = #4729 >> 4 ^ #4729 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D358
00021922: SF := high:1[#4729]
.address 0x40D358
00021925: ZF := 0 = #4729
.address 0x40D35B
0002192e: when ~(ZF | (SF | OF) & ~(SF & OF)) goto %00021789
00044a64: goto %00021934

.address 0x40D3A0
00021789: 
.address 0x40D3A0
0002178e: R9 := pad:64[low:32[RDX - 0x61]]
.address 0x40D3A4
0002179b: #4714 := low:8[R9] - 0x19
.address 0x40D3A4
0002179e: CF := low:8[R9] < 0x19
.address 0x40D3A4
000217a1: OF := high:1[(low:8[R9] ^ 0x19) & (low:8[R9] ^ #4714)]
.address 0x40D3A4
000217a4: AF := 0x10 = (0x10 & (#4714 ^ low:8[R9] ^ 0x19))
.address 0x40D3A4
000217a7: PF := ~low:1[let $1 = #4714 >> 4 ^ #4714 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D3A4
000217aa: SF := high:1[#4714]
.address 0x40D3A4
000217ad: ZF := 0 = #4714
.address 0x40D3A8
000217b7: when ~(CF | ZF) goto %000217b1
00044a65: goto %0002183f

.address 0x40D3AA
0002183f: 
.address 0x40D3AA
00021844: goto %000216e2

.address 0x40D35D
00021934: 
.address 0x40D35D
0002193f: #4731 := low:8[RDX] - 0x41
.address 0x40D35D
00021942: CF := low:8[RDX] < 0x41
.address 0x40D35D
00021945: OF := high:1[(low:8[RDX] ^ 0x41) & (low:8[RDX] ^ #4731)]
.address 0x40D35D
00021948: AF := 0x10 = (0x10 & (#4731 ^ low:8[RDX] ^ 0x41))
.address 0x40D35D
0002194b: PF := ~low:1[let $1 = #4731 >> 4 ^ #4731 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D35D
0002194e: SF := high:1[#4731]
.address 0x40D35D
00021951: ZF := 0 = #4731
.address 0x40D360
0002195a: when ~((SF | OF) & ~(SF & OF)) goto %000216e2
00044a66: goto %00021960

.address 0x40D362
00021960: 
.address 0x40D362
00021965: R9 := pad:64[low:32[RDX - 0x30]]
.address 0x40D366
00021972: #4733 := low:8[R9] - 9
.address 0x40D366
00021975: CF := low:8[R9] < 9
.address 0x40D366
00021978: OF := high:1[(low:8[R9] ^ 9) & (low:8[R9] ^ #4733)]
.address 0x40D366
0002197b: AF := 0x10 = (0x10 & (#4733 ^ low:8[R9] ^ 9))
.address 0x40D366
0002197e: PF := ~low:1[let $1 = #4733 >> 4 ^ #4733 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D366
00021981: SF := high:1[#4733]
.address 0x40D366
00021984: ZF := 0 = #4733
.address 0x40D36A
0002198d: when CF | ZF goto %000216e2
00044a67: goto %000217b1

.address 0x40D36C
000217b1: 
.address 0x40D36C
000217c7: #4716 := low:8[RDX] - 0x7E
.address 0x40D36C
000217ca: CF := low:8[RDX] < 0x7E
.address 0x40D36C
000217cd: OF := high:1[(low:8[RDX] ^ 0x7E) & (low:8[RDX] ^ #4716)]
.address 0x40D36C
000217d0: AF := 0x10 = (0x10 & (#4716 ^ low:8[RDX] ^ 0x7E))
.address 0x40D36C
000217d3: PF := ~low:1[let $1 = #4716 >> 4 ^ #4716 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D36C
000217d6: SF := high:1[#4716]
.address 0x40D36C
000217d9: ZF := 0 = #4716
.address 0x40D36F
000217e0: RAX := if ~ZF then R8 else RAX
.address 0x40D373
000217ee: #4718 := RSI
.address 0x40D373
000217f1: RSI := RSI + 1
.address 0x40D373
000217f4: CF := RSI < #4718
.address 0x40D373
000217f7: OF := ~high:1[#4718] & (high:1[#4718] | high:1[RSI]) & ~(high:1[#4718] & high:1[RSI])
.address 0x40D373
000217fa: AF := 0x10 = (0x10 & (RSI ^ #4718 ^ 1))
.address 0x40D373
000217fd: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D373
00021800: SF := high:1[RSI]
.address 0x40D373
00021803: ZF := 0 = RSI
.address 0x40D377
0002180a: mem := mem with [RDI, el]:u64 <- RSI
.address 0x40D37A
00021811: RDX := pad:64[pad:32[mem[RSI]]]
.address 0x40D37D
0002181e: #4721 := low:8[RDX]
.address 0x40D37D
00021821: OF := 0
.address 0x40D37D
00021824: CF := 0
.address 0x40D37D
00021827: AF := unknown[bits]:u1
.address 0x40D37D
0002182a: PF := ~low:1[let $1 = #4721 >> 4 ^ #4721 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D37D
0002182d: SF := high:1[#4721]
.address 0x40D37D
00021830: ZF := 0 = #4721
.address 0x40D37F
00021839: when ~ZF goto %00021616
00044a68: goto %00021734

.address 0x40D320
0002163c: 
.address 0x40D320
0002164c: RCX := pad:64[extend:32[low:8[RDX]]]
.address 0x40D323
0002165a: #4699 := low:32[RCX]
.address 0x40D323
0002165d: RCX := pad:64[low:32[RCX] - 0x41]
.address 0x40D323
00021660: CF := #4699 < 0x41
.address 0x40D323
00021663: OF := high:1[(#4699 ^ 0x41) & (#4699 ^ low:32[RCX])]
.address 0x40D323
00021666: AF := 0x10 = (0x10 & (low:32[RCX] ^ #4699 ^ 0x41))
.address 0x40D323
00021669: PF := ~low:1[let $1 = low:32[RCX] >> 4 ^ low:32[RCX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D323
0002166c: SF := high:1[low:32[RCX]]
.address 0x40D323
0002166f: ZF := 0 = low:32[RCX]
.address 0x40D326
0002167c: #4702 := low:32[RCX] - 0x39
.address 0x40D326
0002167f: CF := low:32[RCX] < 0x39
.address 0x40D326
00021682: OF := high:1[(low:32[RCX] ^ 0x39) & (low:32[RCX] ^ #4702)]
.address 0x40D326
00021685: AF := 0x10 = (0x10 & (#4702 ^ low:32[RCX] ^ 0x39))
.address 0x40D326
00021688: PF := ~low:1[let $1 = #4702 >> 4 ^ #4702 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D326
0002168b: SF := high:1[#4702]
.address 0x40D326
0002168e: ZF := 0 = #4702
.address 0x40D329
00021698: when ~(CF | ZF) goto %00021692
00044a69: goto %00021849

.address 0x40D32B
00021849: 
.address 0x40D32B
0002184e: R9 := R11
.address 0x40D32E
00021861: #4723 := R9
.address 0x40D32E
00021890: goto %00021863

00021879: 
.address 0x40D32E
0002187a: OF := unknown[bits]:u1
.address 0x40D32E
00021881: goto %0002187d

00021875: 
.address 0x40D32E
00021876: OF := (high:1[R9] | CF) & ~(high:1[R9] & CF)
.address 0x40D32E
00021880: goto %0002187d

0002187c: 
.address 0x40D32E
0002187e: when (RCX & 0x3F) = 1 goto %00021875
.address 0x40D32E
0002187f: goto %00021879

00021872: 
.address 0x40D32E
00021873: AF := unknown[bits]:u1
.address 0x40D32E
00021883: goto %0002187c

0002186f: 
.address 0x40D32E
00021870: PF := ~low:1[let $1 = R9 >> 4 ^ R9 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D32E
00021884: goto %00021872

0002186c: 
.address 0x40D32E
0002186d: ZF := 0 = R9
.address 0x40D32E
00021885: goto %0002186f

00021869: 
.address 0x40D32E
0002186a: SF := high:1[R9]
.address 0x40D32E
00021886: goto %0002186c

00021866: 
.address 0x40D32E
00021867: CF := low:1[#4723 >> 0x40 - (RCX & 0x3F)]
.address 0x40D32E
00021887: goto %00021869

0002187d: 
.address 0x40D32E
0002188d: goto %0002188a

00021889: 
.address 0x40D32E
0002188b: when (RCX & 0x3F) <> 0 goto %00021866
.address 0x40D32E
0002188c: goto %0002188a

00021863: 
.address 0x40D32E
00021864: R9 := R9 << (RCX & 0x3F)
.address 0x40D32E
0002188f: goto %00021889

0002188a: 
.address 0x40D331
0002189c: RCX := 0
.address 0x40D331
0002189f: AF := unknown[bits]:u1
.address 0x40D331
000218a2: ZF := 1
.address 0x40D331
000218a5: PF := 1
.address 0x40D331
000218a8: OF := 0
.address 0x40D331
000218ab: CF := 0
.address 0x40D331
000218ae: SF := 0
.address 0x40D333
000218bb: #4725 := R9 & R10
.address 0x40D333
000218be: OF := 0
.address 0x40D333
000218c1: CF := 0
.address 0x40D333
000218c4: AF := unknown[bits]:u1
.address 0x40D333
000218c7: PF := ~low:1[let $1 = #4725 >> 4 ^ #4725 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D333
000218ca: SF := high:1[#4725]
.address 0x40D333
000218cd: ZF := 0 = #4725
.address 0x40D336
000218d6: when ~ZF goto %000216e2
00044a6a: goto %00021692

.address 0x40D338
00021692: 
.address 0x40D338
000216a8: RCX := 0
.address 0x40D338
000216ab: AF := unknown[bits]:u1
.address 0x40D338
000216ae: ZF := 1
.address 0x40D338
000216b1: PF := 1
.address 0x40D338
000216b4: OF := 0
.address 0x40D338
000216b7: CF := 0
.address 0x40D338
000216ba: SF := 0
.address 0x40D33A
000216c7: #4704 := low:8[RDX] - 0x7E
.address 0x40D33A
000216ca: CF := low:8[RDX] < 0x7E
.address 0x40D33A
000216cd: OF := high:1[(low:8[RDX] ^ 0x7E) & (low:8[RDX] ^ #4704)]
.address 0x40D33A
000216d0: AF := 0x10 = (0x10 & (#4704 ^ low:8[RDX] ^ 0x7E))
.address 0x40D33A
000216d3: PF := ~low:1[let $1 = #4704 >> 4 ^ #4704 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D33A
000216d6: SF := high:1[#4704]
.address 0x40D33A
000216d9: ZF := 0 = #4704
.address 0x40D33D
000216e0: RAX := if ~ZF then R8 else RAX
00044a6b: goto %000216e2

.address 0x40D341
000216e2: 
.address 0x40D341
000216ee: #4706 := RSI
.address 0x40D341
000216f1: RSI := RSI + 1
.address 0x40D341
000216f4: CF := RSI < #4706
.address 0x40D341
000216f7: OF := ~high:1[#4706] & (high:1[#4706] | high:1[RSI]) & ~(high:1[#4706] & high:1[RSI])
.address 0x40D341
000216fa: AF := 0x10 = (0x10 & (RSI ^ #4706 ^ 1))
.address 0x40D341
000216fd: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D341
00021700: SF := high:1[RSI]
.address 0x40D341
00021703: ZF := 0 = RSI
.address 0x40D345
0002170a: mem := mem with [RDI, el]:u64 <- RSI
.address 0x40D348
00021711: RDX := pad:64[pad:32[mem[RSI]]]
.address 0x40D34B
0002171e: #4709 := low:8[RDX]
.address 0x40D34B
00021721: OF := 0
.address 0x40D34B
00021724: CF := 0
.address 0x40D34B
00021727: AF := unknown[bits]:u1
.address 0x40D34B
0002172a: PF := ~low:1[let $1 = #4709 >> 4 ^ #4709 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D34B
0002172d: SF := high:1[#4709]
.address 0x40D34B
00021730: ZF := 0 = #4709
.address 0x40D34D
0002173a: when ZF goto %00021734
00044a6c: goto %00021616

.address 0x40D381
00021734: 
.address 0x40D381
00021746: #4711 := mem[RSP, el]:u64
.address 0x40D381
00021749: RSP := RSP + 8
.address 0x40D381
0002174d: call #4711 with noreturn


.address 0x40D3C0
000441fc: sub sub_40d3c0()
.address 0x40D3C0
00006273: 
.address 0x40D3C0
0000627a: #909 := R15
.address 0x40D3C0
0000627d: RSP := RSP - 8
.address 0x40D3C0
00006280: mem := mem with [RSP, el]:u64 <- #909
.address 0x40D3C2
00006289: #910 := R14
.address 0x40D3C2
0000628c: RSP := RSP - 8
.address 0x40D3C2
0000628f: mem := mem with [RSP, el]:u64 <- #910
.address 0x40D3C4
00006298: #911 := R13
.address 0x40D3C4
0000629b: RSP := RSP - 8
.address 0x40D3C4
0000629e: mem := mem with [RSP, el]:u64 <- #911
00044a6d: call @sub_40d3c6 with noreturn


.address 0x40D3C6
000441fe: sub sub_40d3c6()
.address 0x40D3C6
000062a0: 
.address 0x40D3C6
000062a7: #912 := R12
.address 0x40D3C6
000062aa: RSP := RSP - 8
.address 0x40D3C6
000062ad: mem := mem with [RSP, el]:u64 <- #912
.address 0x40D3C8
000062b6: #913 := RBP
.address 0x40D3C8
000062b9: RSP := RSP - 8
.address 0x40D3C8
000062bc: mem := mem with [RSP, el]:u64 <- #913
.address 0x40D3C9
000062c5: #914 := RBX
.address 0x40D3C9
000062c8: RSP := RSP - 8
.address 0x40D3C9
000062cb: mem := mem with [RSP, el]:u64 <- #914
.address 0x40D3CA
000062d2: RBP := RSI
.address 0x40D3CD
000062d9: RBX := RDI
.address 0x40D3D0
000062e7: #915 := RSP
.address 0x40D3D0
000062ea: RSP := RSP - 0x38
.address 0x40D3D0
000062ed: CF := #915 < 0x38
.address 0x40D3D0
000062f0: OF := high:1[(#915 ^ 0x38) & (#915 ^ RSP)]
.address 0x40D3D0
000062f3: AF := 0x10 = (0x10 & (RSP ^ #915 ^ 0x38))
.address 0x40D3D0
000062f6: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D3D0
000062f9: SF := high:1[RSP]
.address 0x40D3D0
000062fc: ZF := 0 = RSP
.address 0x40D3D4
00006303: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x40D3DD
0000630a: mem := mem with [RSP + 0x28, el]:u64 <- RAX
.address 0x40D3E2
00006317: RAX := 0
.address 0x40D3E2
0000631a: AF := unknown[bits]:u1
.address 0x40D3E2
0000631d: ZF := 1
.address 0x40D3E2
00006320: PF := 1
.address 0x40D3E2
00006323: OF := 0
.address 0x40D3E2
00006326: CF := 0
.address 0x40D3E2
00006329: SF := 0
.address 0x40D3E4
00006332: RSP := RSP - 8
.address 0x40D3E4
00006335: mem := mem with [RSP, el]:u64 <- 0x40D3E9
.address 0x40D3E4
00006338: call @sub_403b20 with return %0000633a

.address 0x40D3E9
0000633a: 
.address 0x40D3E9
00006345: #918 := low:32[RAX]
.address 0x40D3E9
00006348: OF := 0
.address 0x40D3E9
0000634b: CF := 0
.address 0x40D3E9
0000634e: AF := unknown[bits]:u1
.address 0x40D3E9
00006351: PF := ~low:1[let $1 = #918 >> 4 ^ #918 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D3E9
00006354: SF := high:1[#918]
.address 0x40D3E9
00006357: ZF := 0 = #918
.address 0x40D3EB
0000635e: R12 := pad:64[low:32[RAX]]
.address 0x40D3EE
00006368: when ZF goto %00006362
00044a6e: goto %000213b1

.address 0x40D3F4
000213b1: 
.address 0x40D3F4
000213b6: RAX := pad:64[pad:32[mem[RBX]]]
.address 0x40D3F7
000213c3: #4669 := low:8[RAX]
.address 0x40D3F7
000213c6: OF := 0
.address 0x40D3F7
000213c9: CF := 0
.address 0x40D3F7
000213cc: AF := unknown[bits]:u1
.address 0x40D3F7
000213cf: PF := ~low:1[let $1 = #4669 >> 4 ^ #4669 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D3F7
000213d2: SF := high:1[#4669]
.address 0x40D3F7
000213d5: ZF := 0 = #4669
.address 0x40D3F9
000213de: when ZF goto %00006b63
00044a6f: goto %000213e4

.address 0x40D3FF
000213e4: 
.address 0x40D3FF
000213e9: RDX := pad:64[pad:32[mem[RBP]]]
.address 0x40D403
000213f6: #4671 := low:8[RDX]
.address 0x40D403
000213f9: OF := 0
.address 0x40D403
000213fc: CF := 0
.address 0x40D403
000213ff: AF := unknown[bits]:u1
.address 0x40D403
00021402: PF := ~low:1[let $1 = #4671 >> 4 ^ #4671 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D403
00021405: SF := high:1[#4671]
.address 0x40D403
00021408: ZF := 0 = #4671
.address 0x40D405
00021411: when ZF goto %000213a0
00044a70: goto %00021417

.address 0x40D40B
00021417: 
.address 0x40D40B
0002141c: R8 := 0x41A33D
.address 0x40D412
00021423: RCX := 2
.address 0x40D417
0002142a: RDI := RBX
.address 0x40D41A
00021431: RSI := R8
.address 0x40D41D
00021439: #4677 := 1
.address 0x40D41D
0002145b: goto %00021455

0002143b: 
.address 0x40D41D
0002143c: #4673 := mem[RSI]
.address 0x40D41D
0002143e: #4674 := mem[RDI]
.address 0x40D41D
00021440: #4675 := #4673 - #4674
.address 0x40D41D
00021442: RSI := RSI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x40D41D
00021444: RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x40D41D
00021446: CF := #4673 < #4674
.address 0x40D41D
00021448: OF := high:1[(#4673 ^ #4674) & (#4673 ^ #4675)]
.address 0x40D41D
0002144a: AF := 0x10 = (0x10 & (#4675 ^ #4673 ^ #4674))
.address 0x40D41D
0002144c: PF := ~low:1[let $1 = #4675 >> 4 ^ #4675 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D41D
0002144e: SF := high:1[#4675]
.address 0x40D41D
00021450: ZF := 0 = #4675
.address 0x40D41D
00021452: RCX := RCX - 1
.address 0x40D41D
00021454: #4677 := ZF
.address 0x40D41D
00021459: goto %00021456

00021455: 
.address 0x40D41D
00021458: goto %00021456

00021456: 
.address 0x40D41D
00021457: when RCX <> 0 & #4677 goto %0002143b
00044a71: goto %00021462

00021462: 
.address 0x40D41F
00021463: when ZF goto %00006b63
00044a72: goto %00021469

.address 0x40D425
00021469: 
.address 0x40D425
0002146e: RCX := 2
.address 0x40D42A
00021475: RSI := R8
.address 0x40D42D
0002147c: RDI := RBP
.address 0x40D430
00021484: #4682 := 1
.address 0x40D430
000214a6: goto %000214a0

00021486: 
.address 0x40D430
00021487: #4678 := mem[RSI]
.address 0x40D430
00021489: #4679 := mem[RDI]
.address 0x40D430
0002148b: #4680 := #4678 - #4679
.address 0x40D430
0002148d: RSI := RSI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x40D430
0002148f: RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x40D430
00021491: CF := #4678 < #4679
.address 0x40D430
00021493: OF := high:1[(#4678 ^ #4679) & (#4678 ^ #4680)]
.address 0x40D430
00021495: AF := 0x10 = (0x10 & (#4680 ^ #4678 ^ #4679))
.address 0x40D430
00021497: PF := ~low:1[let $1 = #4680 >> 4 ^ #4680 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D430
00021499: SF := high:1[#4680]
.address 0x40D430
0002149b: ZF := 0 = #4680
.address 0x40D430
0002149d: RCX := RCX - 1
.address 0x40D430
0002149f: #4682 := ZF
.address 0x40D430
000214a4: goto %000214a1

000214a0: 
.address 0x40D430
000214a3: goto %000214a1

000214a1: 
.address 0x40D430
000214a2: when RCX <> 0 & #4682 goto %00021486
00044a73: goto %000214ad

000214ad: 
.address 0x40D432
000214ae: when ZF goto %000213a0
00044a74: goto %000214b4

.address 0x40D438
000214b4: 
.address 0x40D438
000214b9: R8 := 0x41A33C
.address 0x40D43F
000214c0: RCX := 3
.address 0x40D444
000214c7: RDI := RBX
.address 0x40D447
000214ce: RSI := R8
.address 0x40D44A
000214d6: #4687 := 1
.address 0x40D44A
000214f8: goto %000214f2

000214d8: 
.address 0x40D44A
000214d9: #4683 := mem[RSI]
.address 0x40D44A
000214db: #4684 := mem[RDI]
.address 0x40D44A
000214dd: #4685 := #4683 - #4684
.address 0x40D44A
000214df: RSI := RSI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x40D44A
000214e1: RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x40D44A
000214e3: CF := #4683 < #4684
.address 0x40D44A
000214e5: OF := high:1[(#4683 ^ #4684) & (#4683 ^ #4685)]
.address 0x40D44A
000214e7: AF := 0x10 = (0x10 & (#4685 ^ #4683 ^ #4684))
.address 0x40D44A
000214e9: PF := ~low:1[let $1 = #4685 >> 4 ^ #4685 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D44A
000214eb: SF := high:1[#4685]
.address 0x40D44A
000214ed: ZF := 0 = #4685
.address 0x40D44A
000214ef: RCX := RCX - 1
.address 0x40D44A
000214f1: #4687 := ZF
.address 0x40D44A
000214f6: goto %000214f3

000214f2: 
.address 0x40D44A
000214f5: goto %000214f3

000214f3: 
.address 0x40D44A
000214f4: when RCX <> 0 & #4687 goto %000214d8
00044a75: goto %000214ff

000214ff: 
.address 0x40D44C
00021500: when ZF goto %00006b63
00044a76: goto %00021506

.address 0x40D452
00021506: 
.address 0x40D452
0002150b: RCX := 3
.address 0x40D457
00021512: RSI := R8
.address 0x40D45A
00021519: RDI := RBP
.address 0x40D45D
00021521: #4692 := 1
.address 0x40D45D
00021543: goto %0002153d

00021523: 
.address 0x40D45D
00021524: #4688 := mem[RSI]
.address 0x40D45D
00021526: #4689 := mem[RDI]
.address 0x40D45D
00021528: #4690 := #4688 - #4689
.address 0x40D45D
0002152a: RSI := RSI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x40D45D
0002152c: RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x40D45D
0002152e: CF := #4688 < #4689
.address 0x40D45D
00021530: OF := high:1[(#4688 ^ #4689) & (#4688 ^ #4690)]
.address 0x40D45D
00021532: AF := 0x10 = (0x10 & (#4690 ^ #4688 ^ #4689))
.address 0x40D45D
00021534: PF := ~low:1[let $1 = #4690 >> 4 ^ #4690 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D45D
00021536: SF := high:1[#4690]
.address 0x40D45D
00021538: ZF := 0 = #4690
.address 0x40D45D
0002153a: RCX := RCX - 1
.address 0x40D45D
0002153c: #4692 := ZF
.address 0x40D45D
00021541: goto %0002153e

0002153d: 
.address 0x40D45D
00021540: goto %0002153e

0002153e: 
.address 0x40D45D
0002153f: when RCX <> 0 & #4692 goto %00021523
00044a77: goto %0002154a

0002154a: 
.address 0x40D45F
0002154b: when ZF goto %000213a0
00044a78: goto %00021551

.address 0x40D465
00021551: 
.address 0x40D465
0002155c: #4693 := low:8[RAX] - 0x2E
.address 0x40D465
0002155f: CF := low:8[RAX] < 0x2E
.address 0x40D465
00021562: OF := high:1[(low:8[RAX] ^ 0x2E) & (low:8[RAX] ^ #4693)]
.address 0x40D465
00021565: AF := 0x10 = (0x10 & (#4693 ^ low:8[RAX] ^ 0x2E))
.address 0x40D465
00021568: PF := ~low:1[let $1 = #4693 >> 4 ^ #4693 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D465
0002156b: SF := high:1[#4693]
.address 0x40D465
0002156e: ZF := 0 = #4693
.address 0x40D467
00021577: when ZF goto %000066fe
00044a79: goto %0002157d

.address 0x40D740
000066fe: 
.address 0x40D740
0000670a: #951 := RBX
.address 0x40D740
0000670d: RBX := RBX + 1
.address 0x40D740
00006710: CF := RBX < #951
.address 0x40D740
00006713: OF := ~high:1[#951] & (high:1[#951] | high:1[RBX]) & ~(high:1[#951] & high:1[RBX])
.address 0x40D740
00006716: AF := 0x10 = (0x10 & (RBX ^ #951 ^ 1))
.address 0x40D740
00006719: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D740
0000671c: SF := high:1[RBX]
.address 0x40D740
0000671f: ZF := 0 = RBX
.address 0x40D744
0000672d: #954 := RBP
.address 0x40D744
00006730: RBP := RBP + 1
.address 0x40D744
00006733: CF := RBP < #954
.address 0x40D744
00006736: OF := ~high:1[#954] & (high:1[#954] | high:1[RBP]) & ~(high:1[#954] & high:1[RBP])
.address 0x40D744
00006739: AF := 0x10 = (0x10 & (RBP ^ #954 ^ 1))
.address 0x40D744
0000673c: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D744
0000673f: SF := high:1[RBP]
.address 0x40D744
00006742: ZF := 0 = RBP
.address 0x40D748
0000674f: #957 := low:8[RDX] - 0x2E
.address 0x40D748
00006752: CF := low:8[RDX] < 0x2E
.address 0x40D748
00006755: OF := high:1[(low:8[RDX] ^ 0x2E) & (low:8[RDX] ^ #957)]
.address 0x40D748
00006758: AF := 0x10 = (0x10 & (#957 ^ low:8[RDX] ^ 0x2E))
.address 0x40D748
0000675b: PF := ~low:1[let $1 = #957 >> 4 ^ #957 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D748
0000675e: SF := high:1[#957]
.address 0x40D748
00006761: ZF := 0 = #957
.address 0x40D74B
0000676b: when ZF goto %00006765
00044a7a: goto %00006b60

.address 0x40D751
00006b60: 
00044a7b: goto %00006b63

.address 0x40D758
00006b63: 
.address 0x40D758
00006b68: R12 := 0xFFFFFFFF
.address 0x40D75E
00006b6f: goto %00006362

.address 0x40D46D
0002157d: 
.address 0x40D46D
00021588: #4695 := low:8[RDX] - 0x2E
.address 0x40D46D
0002158b: CF := low:8[RDX] < 0x2E
.address 0x40D46D
0002158e: OF := high:1[(low:8[RDX] ^ 0x2E) & (low:8[RDX] ^ #4695)]
.address 0x40D46D
00021591: AF := 0x10 = (0x10 & (#4695 ^ low:8[RDX] ^ 0x2E))
.address 0x40D46D
00021594: PF := ~low:1[let $1 = #4695 >> 4 ^ #4695 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D46D
00021597: SF := high:1[#4695]
.address 0x40D46D
0002159a: ZF := 0 = #4695
.address 0x40D470
000215a3: when ZF goto %000213a0
00044a7c: goto %00006765

.address 0x40D640
000213a0: 
.address 0x40D640
000213a5: R12 := 1
.address 0x40D646
000213ac: goto %00006362

.address 0x40D476
00006765: 
.address 0x40D476
00006775: RDI := low:64[RSP + 0x18]
.address 0x40D47B
0000677c: mem := mem with [RSP + 0x18, el]:u64 <- RBX
.address 0x40D480
00006783: mem := mem with [RSP + 0x20, el]:u64 <- RBP
.address 0x40D485
0000678c: RSP := RSP - 8
.address 0x40D485
0000678f: mem := mem with [RSP, el]:u64 <- 0x40D48A
.address 0x40D485
00006792: call @sub_40d2f0 with return %00006794

.address 0x40D48A
00006794: 
.address 0x40D48A
00006799: RDI := low:64[RSP + 0x20]
.address 0x40D48F
000067a0: R13 := RAX
.address 0x40D492
000067a9: RSP := RSP - 8
.address 0x40D492
000067ac: mem := mem with [RSP, el]:u64 <- 0x40D497
.address 0x40D492
000067af: call @sub_40d2f0 with return %000067b1

.address 0x40D497
000067b1: 
.address 0x40D497
000067bc: #959 := R13
.address 0x40D497
000067bf: OF := 0
.address 0x40D497
000067c2: CF := 0
.address 0x40D497
000067c5: AF := unknown[bits]:u1
.address 0x40D497
000067c8: PF := ~low:1[let $1 = #959 >> 4 ^ #959 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D497
000067cb: SF := high:1[#959]
.address 0x40D497
000067ce: ZF := 0 = #959
.address 0x40D49A
000067d8: when ZF goto %000067d2
00044a7d: goto %00006b0d

.address 0x40D6B0
000067d2: 
.address 0x40D6B0
000067e2: R13 := mem[RSP + 0x18, el]:u64
.address 0x40D6B5
000067f1: #961 := R13
.address 0x40D6B5
000067f4: #962 := RBX
.address 0x40D6B5
000067f7: R13 := R13 - RBX
.address 0x40D6B5
000067fa: CF := #961 < #962
.address 0x40D6B5
000067fd: OF := high:1[(#961 ^ #962) & (#961 ^ R13)]
.address 0x40D6B5
00006800: AF := 0x10 = (0x10 & (R13 ^ #961 ^ #962))
.address 0x40D6B5
00006803: PF := ~low:1[let $1 = R13 >> 4 ^ R13 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D6B5
00006806: SF := high:1[R13]
.address 0x40D6B5
00006809: ZF := 0 = R13
.address 0x40D6B8
00006816: #964 := RAX
.address 0x40D6B8
00006819: OF := 0
.address 0x40D6B8
0000681c: CF := 0
.address 0x40D6B8
0000681f: AF := unknown[bits]:u1
.address 0x40D6B8
00006822: PF := ~low:1[let $1 = #964 >> 4 ^ #964 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D6B8
00006825: SF := high:1[#964]
.address 0x40D6B8
00006828: ZF := 0 = #964
.address 0x40D6BB
00006832: when ~ZF goto %0000682c
00044a7e: goto %00006865

.address 0x40D4A0
00006b0d: 
.address 0x40D4A0
00006b1a: #998 := R13
.address 0x40D4A0
00006b1d: #999 := RBX
.address 0x40D4A0
00006b20: R13 := R13 - RBX
.address 0x40D4A0
00006b23: CF := #998 < #999
.address 0x40D4A0
00006b26: OF := high:1[(#998 ^ #999) & (#998 ^ R13)]
.address 0x40D4A0
00006b29: AF := 0x10 = (0x10 & (R13 ^ #998 ^ #999))
.address 0x40D4A0
00006b2c: PF := ~low:1[let $1 = R13 >> 4 ^ R13 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D4A0
00006b2f: SF := high:1[R13]
.address 0x40D4A0
00006b32: ZF := 0 = R13
.address 0x40D4A3
00006b3f: #1001 := RAX
.address 0x40D4A3
00006b42: OF := 0
.address 0x40D4A3
00006b45: CF := 0
.address 0x40D4A3
00006b48: AF := unknown[bits]:u1
.address 0x40D4A3
00006b4b: PF := ~low:1[let $1 = #1001 >> 4 ^ #1001 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D4A3
00006b4e: SF := high:1[#1001]
.address 0x40D4A3
00006b51: ZF := 0 = #1001
.address 0x40D4A6
00006b5a: when ZF goto %000063b6
00044a7f: goto %0000682c

.address 0x40D4AC
0000682c: 
.address 0x40D4AC
00006844: #966 := RAX
.address 0x40D4AC
00006847: #967 := RBP
.address 0x40D4AC
0000684a: RAX := RAX - RBP
.address 0x40D4AC
0000684d: CF := #966 < #967
.address 0x40D4AC
00006850: OF := high:1[(#966 ^ #967) & (#966 ^ RAX)]
.address 0x40D4AC
00006853: AF := 0x10 = (0x10 & (RAX ^ #966 ^ #967))
.address 0x40D4AC
00006856: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D4AC
00006859: SF := high:1[RAX]
.address 0x40D4AC
0000685c: ZF := 0 = RAX
.address 0x40D4AF
00006863: R14 := RAX
00044a80: goto %000063e6

.address 0x40D4B2
000063e6: 
.address 0x40D4B2
000063f6: #924 := R13 - R14
.address 0x40D4B2
000063f9: CF := R13 < R14
.address 0x40D4B2
000063fc: OF := high:1[(R13 ^ R14) & (R13 ^ #924)]
.address 0x40D4B2
000063ff: AF := 0x10 = (0x10 & (#924 ^ R13 ^ R14))
.address 0x40D4B2
00006402: PF := ~low:1[let $1 = #924 >> 4 ^ #924 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D4B2
00006405: SF := high:1[#924]
.address 0x40D4B2
00006408: ZF := 0 = #924
.address 0x40D4B5
00006412: when ZF goto %0000640c
00044a81: goto %0000645c

.address 0x40D790
0000640c: 
.address 0x40D790
0000641c: RDX := R13
.address 0x40D793
00006423: RSI := RBP
.address 0x40D796
0000642a: RDI := RBX
.address 0x40D799
00006433: RSP := RSP - 8
.address 0x40D799
00006436: mem := mem with [RSP, el]:u64 <- 0x40D79E
.address 0x40D799
00006439: call @sub_403800 with return %0000643b

.address 0x40D79E
0000643b: 
.address 0x40D79E
00006446: #926 := low:32[RAX]
.address 0x40D79E
00006449: OF := 0
.address 0x40D79E
0000644c: CF := 0
.address 0x40D79E
0000644f: AF := unknown[bits]:u1
.address 0x40D79E
00006452: PF := ~low:1[let $1 = #926 >> 4 ^ #926 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D79E
00006455: SF := high:1[#926]
.address 0x40D79E
00006458: ZF := 0 = #926
.address 0x40D7A0
00006462: when ~ZF goto %0000645c
00044a82: goto %00007032

.address 0x40D7A6
00007032: 
.address 0x40D7A6
00007037: R13 := mem[RSP + 0x18, el]:u64
.address 0x40D7AB
00007046: #1055 := R13
.address 0x40D7AB
00007049: #1056 := RBX
.address 0x40D7AB
0000704c: R13 := R13 - RBX
.address 0x40D7AB
0000704f: CF := #1055 < #1056
.address 0x40D7AB
00007052: OF := high:1[(#1055 ^ #1056) & (#1055 ^ R13)]
.address 0x40D7AB
00007055: AF := 0x10 = (0x10 & (R13 ^ #1055 ^ #1056))
.address 0x40D7AB
00007058: PF := ~low:1[let $1 = R13 >> 4 ^ R13 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D7AB
0000705b: SF := high:1[R13]
.address 0x40D7AB
0000705e: ZF := 0 = R13
.address 0x40D7AE
00007065: goto %00006865

.address 0x40D6C1
00006865: 
.address 0x40D6C1
0000686a: R14 := mem[RSP + 0x20, el]:u64
.address 0x40D6C6
00006879: #969 := R14
.address 0x40D6C6
0000687c: #970 := RBP
.address 0x40D6C6
0000687f: R14 := R14 - RBP
.address 0x40D6C6
00006882: CF := #969 < #970
.address 0x40D6C6
00006885: OF := high:1[(#969 ^ #970) & (#969 ^ R14)]
.address 0x40D6C6
00006888: AF := 0x10 = (0x10 & (R14 ^ #969 ^ #970))
.address 0x40D6C6
0000688b: PF := ~low:1[let $1 = R14 >> 4 ^ R14 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D6C6
0000688e: SF := high:1[R14]
.address 0x40D6C6
00006891: ZF := 0 = R14
.address 0x40D6C9
00006898: goto %0000645c

.address 0x40D4BB
0000645c: 
.address 0x40D4BB
00006472: RSI := 0
.address 0x40D4BB
00006475: AF := unknown[bits]:u1
.address 0x40D4BB
00006478: ZF := 1
.address 0x40D4BB
0000647b: PF := 1
.address 0x40D4BB
0000647e: OF := 0
.address 0x40D4BB
00006481: CF := 0
.address 0x40D4BB
00006484: SF := 0
.address 0x40D4BD
00006491: RDX := 0
.address 0x40D4BD
00006494: AF := unknown[bits]:u1
.address 0x40D4BD
00006497: ZF := 1
.address 0x40D4BD
0000649a: PF := 1
.address 0x40D4BD
0000649d: OF := 0
.address 0x40D4BD
000064a0: CF := 0
.address 0x40D4BD
000064a3: SF := 0
.address 0x40D4BF
000064aa: R10 := 1
.address 0x40D4C5
000064b1: R15 := 0x3FFFFFF03FFFFFF
00044a83: goto %000064b3

.address 0x40D4CF
000064b3: 
.address 0x40D4CF
000064be: #928 := R13 - RDX
.address 0x40D4CF
000064c1: CF := R13 < RDX
.address 0x40D4CF
000064c4: OF := high:1[(R13 ^ RDX) & (R13 ^ #928)]
.address 0x40D4CF
000064c7: AF := 0x10 = (0x10 & (#928 ^ R13 ^ RDX))
.address 0x40D4CF
000064ca: PF := ~low:1[let $1 = #928 >> 4 ^ #928 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D4CF
000064cd: SF := high:1[#928]
.address 0x40D4CF
000064d0: ZF := 0 = #928
.address 0x40D4D2
000064da: when ~(CF | ZF) goto %000064d4
00044a84: goto %00007006

.address 0x40D4D4
00007006: 
.address 0x40D4D4
00007011: #1053 := R14 - RSI
.address 0x40D4D4
00007014: CF := R14 < RSI
.address 0x40D4D4
00007017: OF := high:1[(R14 ^ RSI) & (R14 ^ #1053)]
.address 0x40D4D4
0000701a: AF := 0x10 = (0x10 & (#1053 ^ R14 ^ RSI))
.address 0x40D4D4
0000701d: PF := ~low:1[let $1 = #1053 >> 4 ^ #1053 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D4D4
00007020: SF := high:1[#1053]
.address 0x40D4D4
00007023: ZF := 0 = #1053
.address 0x40D4D7
0000702c: when CF | ZF goto %00006362
00044a85: goto %000064d4

.address 0x40D4DD
000064d4: 
.address 0x40D4DD
000064e4: R11 := RSI
.address 0x40D4E0
000064eb: mem := mem with [RSP, el]:u64 <- RBP
.address 0x40D4E4
000064fa: #930 := R11
.address 0x40D4E4
000064fd: #931 := RDX
.address 0x40D4E4
00006500: R11 := R11 - RDX
.address 0x40D4E4
00006503: CF := #930 < #931
.address 0x40D4E4
00006506: OF := high:1[(#930 ^ #931) & (#930 ^ R11)]
.address 0x40D4E4
00006509: AF := 0x10 = (0x10 & (R11 ^ #930 ^ #931))
.address 0x40D4E4
0000650c: PF := ~low:1[let $1 = R11 >> 4 ^ R11 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D4E4
0000650f: SF := high:1[R11]
.address 0x40D4E4
00006512: ZF := 0 = R11
.address 0x40D4E7
00006519: RAX := low:64[R13 + R11]
.address 0x40D4EC
00006520: R9 := low:64[RBP + R11]
.address 0x40D4F1
00006527: mem := mem with [RSP + 8, el]:u64 <- RAX
00044a86: goto %0000652c

.address 0x40D500
0000652c: 
.address 0x40D500
00006537: #933 := R13 - RDX
.address 0x40D500
0000653a: CF := R13 < RDX
.address 0x40D500
0000653d: OF := high:1[(R13 ^ RDX) & (R13 ^ #933)]
.address 0x40D500
00006540: AF := 0x10 = (0x10 & (#933 ^ R13 ^ RDX))
.address 0x40D500
00006543: PF := ~low:1[let $1 = #933 >> 4 ^ #933 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D500
00006546: SF := high:1[#933]
.address 0x40D500
00006549: ZF := 0 = #933
.address 0x40D503
00006553: when CF | ZF goto %0000654d
00044a87: goto %00006fb0

.address 0x40D505
00006fb0: 
.address 0x40D505
00006fb5: RAX := pad:64[pad:32[mem[RBX + RDX]]]
.address 0x40D509
00006fc3: #1048 := low:32[RAX]
.address 0x40D509
00006fc6: RAX := pad:64[low:32[RAX] - 0x30]
.address 0x40D509
00006fc9: CF := #1048 < 0x30
.address 0x40D509
00006fcc: OF := high:1[(#1048 ^ 0x30) & (#1048 ^ low:32[RAX])]
.address 0x40D509
00006fcf: AF := 0x10 = (0x10 & (low:32[RAX] ^ #1048 ^ 0x30))
.address 0x40D509
00006fd2: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D509
00006fd5: SF := high:1[low:32[RAX]]
.address 0x40D509
00006fd8: ZF := 0 = low:32[RAX]
.address 0x40D50C
00006fe5: #1051 := low:8[RAX] - 9
.address 0x40D50C
00006fe8: CF := low:8[RAX] < 9
.address 0x40D50C
00006feb: OF := high:1[(low:8[RAX] ^ 9) & (low:8[RAX] ^ #1051)]
.address 0x40D50C
00006fee: AF := 0x10 = (0x10 & (#1051 ^ low:8[RAX] ^ 9))
.address 0x40D50C
00006ff1: PF := ~low:1[let $1 = #1051 >> 4 ^ #1051 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D50C
00006ff4: SF := high:1[#1051]
.address 0x40D50C
00006ff7: ZF := 0 = #1051
.address 0x40D50E
00007000: when ~(CF | ZF) goto %00006dd6
00044a88: goto %0000654d

.address 0x40D510
0000654d: 
.address 0x40D510
00006563: #935 := R14 - RSI
.address 0x40D510
00006566: CF := R14 < RSI
.address 0x40D510
00006569: OF := high:1[(R14 ^ RSI) & (R14 ^ #935)]
.address 0x40D510
0000656c: AF := 0x10 = (0x10 & (#935 ^ R14 ^ RSI))
.address 0x40D510
0000656f: PF := ~low:1[let $1 = #935 >> 4 ^ #935 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D510
00006572: SF := high:1[#935]
.address 0x40D510
00006575: ZF := 0 = #935
.address 0x40D513
0000657c: RAX := pad:64[extend:32[mem[R9 + RDX]]]
.address 0x40D518
00006586: when CF | ZF goto %00006580
00044a89: goto %00006da3

.address 0x40D51E
00006da3: 
.address 0x40D51E
00006da8: RCX := pad:64[low:32[RAX - 0x30]]
.address 0x40D521
00006db5: #1027 := low:8[RCX] - 9
.address 0x40D521
00006db8: CF := low:8[RCX] < 9
.address 0x40D521
00006dbb: OF := high:1[(low:8[RCX] ^ 9) & (low:8[RCX] ^ #1027)]
.address 0x40D521
00006dbe: AF := 0x10 = (0x10 & (#1027 ^ low:8[RCX] ^ 9))
.address 0x40D521
00006dc1: PF := ~low:1[let $1 = #1027 >> 4 ^ #1027 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D521
00006dc4: SF := high:1[#1027]
.address 0x40D521
00006dc7: ZF := 0 = #1027
.address 0x40D524
00006dd0: when CF | ZF goto %00006580
00044a8a: goto %00006dd6

.address 0x40D6E0
00006580: 
.address 0x40D6E0
00006590: RCX := pad:64[pad:32[mem[RBX + RDX]]]
.address 0x40D6E4
00006597: RBP := mem[RSP, el]:u64
.address 0x40D6E8
000065a4: #937 := low:8[RCX] - 0x30
.address 0x40D6E8
000065a7: CF := low:8[RCX] < 0x30
.address 0x40D6E8
000065aa: OF := high:1[(low:8[RCX] ^ 0x30) & (low:8[RCX] ^ #937)]
.address 0x40D6E8
000065ad: AF := 0x10 = (0x10 & (#937 ^ low:8[RCX] ^ 0x30))
.address 0x40D6E8
000065b0: PF := ~low:1[let $1 = #937 >> 4 ^ #937 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D6E8
000065b3: SF := high:1[#937]
.address 0x40D6E8
000065b6: ZF := 0 = #937
.address 0x40D6EB
000065c0: when ~ZF goto %000065ba
00044a8b: goto %00006d1a

.address 0x40D6F1
00006d1a: 
00044a8c: goto %00006d1d

.address 0x40D6F8
00006d1d: 
.address 0x40D6F8
00006d29: #1022 := RDX
.address 0x40D6F8
00006d2c: RDX := RDX + 1
.address 0x40D6F8
00006d2f: CF := RDX < #1022
.address 0x40D6F8
00006d32: OF := ~high:1[#1022] & (high:1[#1022] | high:1[RDX]) & ~(high:1[#1022] & high:1[RDX])
.address 0x40D6F8
00006d35: AF := 0x10 = (0x10 & (RDX ^ #1022 ^ 1))
.address 0x40D6F8
00006d38: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D6F8
00006d3b: SF := high:1[RDX]
.address 0x40D6F8
00006d3e: ZF := 0 = RDX
.address 0x40D6FC
00006d45: RCX := pad:64[pad:32[mem[RBX + RDX]]]
.address 0x40D700
00006d52: #1025 := low:8[RCX] - 0x30
.address 0x40D700
00006d55: CF := low:8[RCX] < 0x30
.address 0x40D700
00006d58: OF := high:1[(low:8[RCX] ^ 0x30) & (low:8[RCX] ^ #1025)]
.address 0x40D700
00006d5b: AF := 0x10 = (0x10 & (#1025 ^ low:8[RCX] ^ 0x30))
.address 0x40D700
00006d5e: PF := ~low:1[let $1 = #1025 >> 4 ^ #1025 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D700
00006d61: SF := high:1[#1025]
.address 0x40D700
00006d64: ZF := 0 = #1025
.address 0x40D703
00006d6d: when ZF goto %00006d1d
00044a8d: goto %00006d73

.address 0x40D705
00006d73: 
.address 0x40D705
00006d78: goto %000065ba

.address 0x40D5A9
000065ba: 
.address 0x40D5A9
000065d0: #939 := low:8[RAX] - 0x30
.address 0x40D5A9
000065d3: CF := low:8[RAX] < 0x30
.address 0x40D5A9
000065d6: OF := high:1[(low:8[RAX] ^ 0x30) & (low:8[RAX] ^ #939)]
.address 0x40D5A9
000065d9: AF := 0x10 = (0x10 & (#939 ^ low:8[RAX] ^ 0x30))
.address 0x40D5A9
000065dc: PF := ~low:1[let $1 = #939 >> 4 ^ #939 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D5A9
000065df: SF := high:1[#939]
.address 0x40D5A9
000065e2: ZF := 0 = #939
.address 0x40D5AB
000065ec: when ZF goto %000065e6
00044a8e: goto %0000661b

.address 0x40D5AD
0000661b: 
.address 0x40D5AD
00006628: #944 := RSI
.address 0x40D5AD
0000662b: #945 := RDX
.address 0x40D5AD
0000662e: RSI := RSI - RDX
.address 0x40D5AD
00006631: CF := #944 < #945
.address 0x40D5AD
00006634: OF := high:1[(#944 ^ #945) & (#944 ^ RSI)]
.address 0x40D5AD
00006637: AF := 0x10 = (0x10 & (RSI ^ #944 ^ #945))
.address 0x40D5AD
0000663a: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D5AD
0000663d: SF := high:1[RSI]
.address 0x40D5AD
00006640: ZF := 0 = RSI
.address 0x40D5B0
0000664d: R8 := 0
.address 0x40D5B0
00006650: AF := unknown[bits]:u1
.address 0x40D5B0
00006653: ZF := 1
.address 0x40D5B0
00006656: PF := 1
.address 0x40D5B0
00006659: OF := 0
.address 0x40D5B0
0000665c: CF := 0
.address 0x40D5B0
0000665f: SF := 0
.address 0x40D5B3
00006666: R9 := RSI
.address 0x40D5B6
0000666d: R11 := low:64[RBP + RSI]
.address 0x40D5BB
00006675: goto %00006671

.address 0x40D5E6
00006671: 
.address 0x40D5E6
0000667b: RDI := pad:64[low:32[RCX - 0x30]]
.address 0x40D5E9
00006682: RSI := low:64[RDX + R9]
.address 0x40D5ED
0000668f: #947 := low:8[RDI] - 9
.address 0x40D5ED
00006692: CF := low:8[RDI] < 9
.address 0x40D5ED
00006695: OF := high:1[(low:8[RDI] ^ 9) & (low:8[RDI] ^ #947)]
.address 0x40D5ED
00006698: AF := 0x10 = (0x10 & (#947 ^ low:8[RDI] ^ 9))
.address 0x40D5ED
0000669b: PF := ~low:1[let $1 = #947 >> 4 ^ #947 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D5ED
0000669e: SF := high:1[#947]
.address 0x40D5ED
000066a1: ZF := 0 = #947
.address 0x40D5F1
000066ab: when CF | ZF goto %000066a5
00044a8f: goto %00006c8b

.address 0x40D5F3
00006c8b: 
.address 0x40D5F3
00006c97: #1015 := low:32[RAX]
.address 0x40D5F3
00006c9a: RAX := pad:64[low:32[RAX] - 0x30]
.address 0x40D5F3
00006c9d: CF := #1015 < 0x30
.address 0x40D5F3
00006ca0: OF := high:1[(#1015 ^ 0x30) & (#1015 ^ low:32[RAX])]
.address 0x40D5F3
00006ca3: AF := 0x10 = (0x10 & (low:32[RAX] ^ #1015 ^ 0x30))
.address 0x40D5F3
00006ca6: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D5F3
00006ca9: SF := high:1[low:32[RAX]]
.address 0x40D5F3
00006cac: ZF := 0 = low:32[RAX]
.address 0x40D5F6
00006cb9: #1018 := low:8[RAX] - 9
.address 0x40D5F6
00006cbc: CF := low:8[RAX] < 9
.address 0x40D5F6
00006cbf: OF := high:1[(low:8[RAX] ^ 9) & (low:8[RAX] ^ #1018)]
.address 0x40D5F6
00006cc2: AF := 0x10 = (0x10 & (#1018 ^ low:8[RAX] ^ 9))
.address 0x40D5F6
00006cc5: PF := ~low:1[let $1 = #1018 >> 4 ^ #1018 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D5F6
00006cc8: SF := high:1[#1018]
.address 0x40D5F6
00006ccb: ZF := 0 = #1018
.address 0x40D5F8
00006cd5: when CF | ZF goto %00006ccf
00044a90: goto %00006ce8

.address 0x40D7B3
00006ccf: 
.address 0x40D7B3
00006cdf: R8 := 0xFFFFFFFF
.address 0x40D7B9
00006ce6: goto %000066ec

.address 0x40D5FE
00006ce8: 
.address 0x40D5FE
00006cf3: #1020 := low:32[R8]
.address 0x40D5FE
00006cf6: OF := 0
.address 0x40D5FE
00006cf9: CF := 0
.address 0x40D5FE
00006cfc: AF := unknown[bits]:u1
.address 0x40D5FE
00006cff: PF := ~low:1[let $1 = #1020 >> 4 ^ #1020 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D5FE
00006d02: SF := high:1[#1020]
.address 0x40D5FE
00006d05: ZF := 0 = #1020
.address 0x40D601
00006d0e: when ZF goto %000064b3
00044a91: goto %00006d14

.address 0x40D607
00006d14: 
00044a92: goto %000066ec

.address 0x40D5C0
000066a5: 
.address 0x40D5C0
000066b5: RSI := pad:64[low:32[RAX - 0x30]]
.address 0x40D5C3
000066c2: #949 := low:8[RSI] - 9
.address 0x40D5C3
000066c5: CF := low:8[RSI] < 9
.address 0x40D5C3
000066c8: OF := high:1[(low:8[RSI] ^ 9) & (low:8[RSI] ^ #949)]
.address 0x40D5C3
000066cb: AF := 0x10 = (0x10 & (#949 ^ low:8[RSI] ^ 9))
.address 0x40D5C3
000066ce: PF := ~low:1[let $1 = #949 >> 4 ^ #949 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D5C3
000066d1: SF := high:1[#949]
.address 0x40D5C3
000066d4: ZF := 0 = #949
.address 0x40D5C7
000066de: when ~(CF | ZF) goto %000066d8
00044a93: goto %00006c00

.address 0x40D730
000066d8: 
.address 0x40D730
000066e8: R8 := 1
.address 0x40D736
000066f0: goto %000066ec

.address 0x40D5CD
00006c00: 
.address 0x40D5CD
00006c0b: #1007 := low:32[R8]
.address 0x40D5CD
00006c0e: OF := 0
.address 0x40D5CD
00006c11: CF := 0
.address 0x40D5CD
00006c14: AF := unknown[bits]:u1
.address 0x40D5CD
00006c17: PF := ~low:1[let $1 = #1007 >> 4 ^ #1007 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D5CD
00006c1a: SF := high:1[#1007]
.address 0x40D5CD
00006c1d: ZF := 0 = #1007
.address 0x40D5D0
00006c27: when ~ZF goto %00006c21
00044a94: goto %00006c5d

.address 0x40D5D2
00006c5d: 
.address 0x40D5D2
00006c62: R8 := pad:64[extend:32[low:8[RCX]]]
.address 0x40D5D6
00006c71: #1012 := low:32[R8]
.address 0x40D5D6
00006c74: #1013 := low:32[RAX]
.address 0x40D5D6
00006c77: R8 := pad:64[low:32[R8] - low:32[RAX]]
.address 0x40D5D6
00006c7a: CF := #1012 < #1013
.address 0x40D5D6
00006c7d: OF := high:1[(#1012 ^ #1013) & (#1012 ^ low:32[R8])]
.address 0x40D5D6
00006c80: AF := 0x10 = (0x10 & (low:32[R8] ^ #1012 ^ #1013))
.address 0x40D5D6
00006c83: PF := ~low:1[let $1 = low:32[R8] >> 4 ^ low:32[R8] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D5D6
00006c86: SF := high:1[low:32[R8]]
.address 0x40D5D6
00006c89: ZF := 0 = low:32[R8]
00044a95: goto %00006c21

.address 0x40D5D9
00006c21: 
.address 0x40D5D9
00006c38: #1009 := RDX
.address 0x40D5D9
00006c3b: RDX := RDX + 1
.address 0x40D5D9
00006c3e: CF := RDX < #1009
.address 0x40D5D9
00006c41: OF := ~high:1[#1009] & (high:1[#1009] | high:1[RDX]) & ~(high:1[#1009] & high:1[RDX])
.address 0x40D5D9
00006c44: AF := 0x10 = (0x10 & (RDX ^ #1009 ^ 1))
.address 0x40D5D9
00006c47: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D5D9
00006c4a: SF := high:1[RDX]
.address 0x40D5D9
00006c4d: ZF := 0 = RDX
.address 0x40D5DD
00006c54: RCX := pad:64[pad:32[mem[RBX + RDX]]]
.address 0x40D5E1
00006c5b: RAX := pad:64[extend:32[mem[R11 + RDX]]]
00044a96: goto %00006671

.address 0x40D5A0
000065e6: 
.address 0x40D5A0
000065fd: #941 := RSI
.address 0x40D5A0
00006600: RSI := RSI + 1
.address 0x40D5A0
00006603: CF := RSI < #941
.address 0x40D5A0
00006606: OF := ~high:1[#941] & (high:1[#941] | high:1[RSI]) & ~(high:1[#941] & high:1[RSI])
.address 0x40D5A0
00006609: AF := 0x10 = (0x10 & (RSI ^ #941 ^ 1))
.address 0x40D5A0
0000660c: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D5A0
0000660f: SF := high:1[RSI]
.address 0x40D5A0
00006612: ZF := 0 = RSI
.address 0x40D5A4
00006619: RAX := pad:64[extend:32[mem[RBP + RSI]]]
00044a97: goto %000065ba

.address 0x40D52A
00006dd6: 
.address 0x40D52A
00006de1: #1029 := R13 - RDX
.address 0x40D52A
00006de4: CF := R13 < RDX
.address 0x40D52A
00006de7: OF := high:1[(R13 ^ RDX) & (R13 ^ #1029)]
.address 0x40D52A
00006dea: AF := 0x10 = (0x10 & (#1029 ^ R13 ^ RDX))
.address 0x40D52A
00006ded: PF := ~low:1[let $1 = #1029 >> 4 ^ #1029 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D52A
00006df0: SF := high:1[#1029]
.address 0x40D52A
00006df3: ZF := 0 = #1029
.address 0x40D52D
00006dfc: when ZF goto %00006b71
00044a98: goto %00006e02

.address 0x40D763
00006b71: 
.address 0x40D763
00006b7c: #1003 := R14 - mem[RSP + 8, el]:u64
.address 0x40D763
00006b7f: CF := R14 < mem[RSP + 8, el]:u64
.address 0x40D763
00006b82: OF := high:1[(R14 ^ mem[RSP + 8, el]:u64) & (R14 ^ #1003)]
.address 0x40D763
00006b85: AF := 0x10 = (0x10 & (#1003 ^ R14 ^ mem[RSP + 8, el]:u64))
.address 0x40D763
00006b88: PF := ~low:1[let $1 = #1003 >> 4 ^ #1003 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D763
00006b8b: SF := high:1[#1003]
.address 0x40D763
00006b8e: ZF := 0 = #1003
.address 0x40D768
00006b97: when ZF goto %00006978
00044a99: goto %00006b9d

.address 0x40D76E
00006b9d: 
.address 0x40D76E
00006ba2: RAX := pad:64[pad:32[mem[R9 + R13]]]
.address 0x40D773
00006ba9: RCX := pad:64[low:32[RAX - 0x30]]
.address 0x40D776
00006bb6: #1005 := low:8[RCX] - 9
.address 0x40D776
00006bb9: CF := low:8[RCX] < 9
.address 0x40D776
00006bbc: OF := high:1[(low:8[RCX] ^ 9) & (low:8[RCX] ^ #1005)]
.address 0x40D776
00006bbf: AF := 0x10 = (0x10 & (#1005 ^ low:8[RCX] ^ 9))
.address 0x40D776
00006bc2: PF := ~low:1[let $1 = #1005 >> 4 ^ #1005 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D776
00006bc5: SF := high:1[#1005]
.address 0x40D776
00006bc8: ZF := 0 = #1005
.address 0x40D779
00006bd1: when CF | ZF goto %00006978
00044a9a: goto %00006bd7

.address 0x40D77F
00006bd7: 
.address 0x40D77F
00006be2: R8 := 0
.address 0x40D77F
00006be5: AF := unknown[bits]:u1
.address 0x40D77F
00006be8: ZF := 1
.address 0x40D77F
00006beb: PF := 1
.address 0x40D77F
00006bee: OF := 0
.address 0x40D77F
00006bf1: CF := 0
.address 0x40D77F
00006bf4: SF := 0
.address 0x40D782
00006bfb: goto %000069f7

.address 0x40D533
00006e02: 
.address 0x40D533
00006e07: RAX := pad:64[pad:32[mem[RBX + RDX]]]
.address 0x40D537
00006e0e: RCX := pad:64[low:32[RAX - 0x30]]
.address 0x40D53A
00006e1b: #1031 := low:8[RCX] - 9
.address 0x40D53A
00006e1e: CF := low:8[RCX] < 9
.address 0x40D53A
00006e21: OF := high:1[(low:8[RCX] ^ 9) & (low:8[RCX] ^ #1031)]
.address 0x40D53A
00006e24: AF := 0x10 = (0x10 & (#1031 ^ low:8[RCX] ^ 9))
.address 0x40D53A
00006e27: PF := ~low:1[let $1 = #1031 >> 4 ^ #1031 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D53A
00006e2a: SF := high:1[#1031]
.address 0x40D53A
00006e2d: ZF := 0 = #1031
.address 0x40D53D
00006e36: when CF | ZF goto %0000689d
00044a9b: goto %00006e3c

.address 0x40D6D0
0000689d: 
.address 0x40D6D0
000068a8: R8 := 0
.address 0x40D6D0
000068ab: AF := unknown[bits]:u1
.address 0x40D6D0
000068ae: ZF := 1
.address 0x40D6D0
000068b1: PF := 1
.address 0x40D6D0
000068b4: OF := 0
.address 0x40D6D0
000068b7: CF := 0
.address 0x40D6D0
000068ba: SF := 0
.address 0x40D6D3
000068c2: goto %000068be

.address 0x40D543
00006e3c: 
.address 0x40D543
00006e41: R8 := pad:64[pad:32[low:8[RAX]]]
.address 0x40D547
00006e48: RCX := pad:64[low:32[R8 - 0x41]]
.address 0x40D54B
00006e55: #1033 := low:32[RCX] - 0x39
.address 0x40D54B
00006e58: CF := low:32[RCX] < 0x39
.address 0x40D54B
00006e5b: OF := high:1[(low:32[RCX] ^ 0x39) & (low:32[RCX] ^ #1033)]
.address 0x40D54B
00006e5e: AF := 0x10 = (0x10 & (#1033 ^ low:32[RCX] ^ 0x39))
.address 0x40D54B
00006e61: PF := ~low:1[let $1 = #1033 >> 4 ^ #1033 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D54B
00006e64: SF := high:1[#1033]
.address 0x40D54B
00006e67: ZF := 0 = #1033
.address 0x40D54E
00006e71: when ~(CF | ZF) goto %00006e6b
00044a9c: goto %00006f3c

.address 0x40D550
00006f3c: 
.address 0x40D550
00006f41: RDI := R10
.address 0x40D553
00006f54: #1044 := RDI
.address 0x40D553
00006f83: goto %00006f56

00006f6c: 
.address 0x40D553
00006f6d: OF := unknown[bits]:u1
.address 0x40D553
00006f74: goto %00006f70

00006f68: 
.address 0x40D553
00006f69: OF := (high:1[RDI] | CF) & ~(high:1[RDI] & CF)
.address 0x40D553
00006f73: goto %00006f70

00006f6f: 
.address 0x40D553
00006f71: when (RCX & 0x3F) = 1 goto %00006f68
.address 0x40D553
00006f72: goto %00006f6c

00006f65: 
.address 0x40D553
00006f66: AF := unknown[bits]:u1
.address 0x40D553
00006f76: goto %00006f6f

00006f62: 
.address 0x40D553
00006f63: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D553
00006f77: goto %00006f65

00006f5f: 
.address 0x40D553
00006f60: ZF := 0 = RDI
.address 0x40D553
00006f78: goto %00006f62

00006f5c: 
.address 0x40D553
00006f5d: SF := high:1[RDI]
.address 0x40D553
00006f79: goto %00006f5f

00006f59: 
.address 0x40D553
00006f5a: CF := low:1[#1044 >> 0x40 - (RCX & 0x3F)]
.address 0x40D553
00006f7a: goto %00006f5c

00006f70: 
.address 0x40D553
00006f80: goto %00006f7d

00006f7c: 
.address 0x40D553
00006f7e: when (RCX & 0x3F) <> 0 goto %00006f59
.address 0x40D553
00006f7f: goto %00006f7d

00006f56: 
.address 0x40D553
00006f57: RDI := RDI << (RCX & 0x3F)
.address 0x40D553
00006f82: goto %00006f7c

00006f7d: 
.address 0x40D556
00006f8f: #1046 := RDI & R15
.address 0x40D556
00006f92: OF := 0
.address 0x40D556
00006f95: CF := 0
.address 0x40D556
00006f98: AF := unknown[bits]:u1
.address 0x40D556
00006f9b: PF := ~low:1[let $1 = #1046 >> 4 ^ #1046 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D556
00006f9e: SF := high:1[#1046]
.address 0x40D556
00006fa1: ZF := 0 = #1046
.address 0x40D559
00006faa: when ~ZF goto %000068be
00044a9d: goto %00006e6b

.address 0x40D55B
00006e6b: 
.address 0x40D55B
00006e82: #1035 := low:32[R8]
.address 0x40D55B
00006e85: R8 := pad:64[low:32[R8] + 0x100]
.address 0x40D55B
00006e88: CF := low:32[R8] < #1035
.address 0x40D55B
00006e8b: OF := ~high:1[#1035] & (high:1[#1035] | high:1[low:32[R8]]) & ~(
high:1[#1035] & high:1[low:32[R8]])
.address 0x40D55B
00006e8e: AF := 0x10 = (0x10 & (low:32[R8] ^ #1035 ^ 0x100))
.address 0x40D55B
00006e91: PF := ~low:1[let $1 = low:32[R8] >> 4 ^ low:32[R8] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D55B
00006e94: SF := high:1[low:32[R8]]
.address 0x40D55B
00006e97: ZF := 0 = low:32[R8]
.address 0x40D562
00006ea4: #1038 := low:8[RAX] - 0x7E
.address 0x40D562
00006ea7: CF := low:8[RAX] < 0x7E
.address 0x40D562
00006eaa: OF := high:1[(low:8[RAX] ^ 0x7E) & (low:8[RAX] ^ #1038)]
.address 0x40D562
00006ead: AF := 0x10 = (0x10 & (#1038 ^ low:8[RAX] ^ 0x7E))
.address 0x40D562
00006eb0: PF := ~low:1[let $1 = #1038 >> 4 ^ #1038 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D562
00006eb3: SF := high:1[#1038]
.address 0x40D562
00006eb6: ZF := 0 = #1038
.address 0x40D564
00006ec0: when ZF goto %00006eba
00044a9e: goto %000068be

.address 0x40D650
00006eba: 
.address 0x40D650
00006eca: RAX := low:64[R11 + RDX]
.address 0x40D654
00006ed7: #1040 := R14 - RAX
.address 0x40D654
00006eda: CF := R14 < RAX
.address 0x40D654
00006edd: OF := high:1[(R14 ^ RAX) & (R14 ^ #1040)]
.address 0x40D654
00006ee0: AF := 0x10 = (0x10 & (#1040 ^ R14 ^ RAX))
.address 0x40D654
00006ee3: PF := ~low:1[let $1 = #1040 >> 4 ^ #1040 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D654
00006ee6: SF := high:1[#1040]
.address 0x40D654
00006ee9: ZF := 0 = #1040
.address 0x40D657
00006ef2: when ZF goto %00006d7d
00044a9f: goto %00006ef8

.address 0x40D65D
00006ef8: 
.address 0x40D65D
00006efd: RAX := pad:64[pad:32[mem[R9 + RDX]]]
.address 0x40D662
00006f04: RCX := pad:64[low:32[RAX - 0x30]]
.address 0x40D665
00006f11: #1042 := low:8[RCX] - 9
.address 0x40D665
00006f14: CF := low:8[RCX] < 9
.address 0x40D665
00006f17: OF := high:1[(low:8[RCX] ^ 9) & (low:8[RCX] ^ #1042)]
.address 0x40D665
00006f1a: AF := 0x10 = (0x10 & (#1042 ^ low:8[RCX] ^ 9))
.address 0x40D665
00006f1d: PF := ~low:1[let $1 = #1042 >> 4 ^ #1042 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D665
00006f20: SF := high:1[#1042]
.address 0x40D665
00006f23: ZF := 0 = #1042
.address 0x40D668
00006f2c: when CF | ZF goto %00006d7d
00044aa0: goto %00006f32

.address 0x40D710
00006d7d: 
.address 0x40D710
00006d88: RDI := 0
.address 0x40D710
00006d8b: AF := unknown[bits]:u1
.address 0x40D710
00006d8e: ZF := 1
.address 0x40D710
00006d91: PF := 1
.address 0x40D710
00006d94: OF := 0
.address 0x40D710
00006d97: CF := 0
.address 0x40D710
00006d9a: SF := 0
.address 0x40D712
00006da1: R8 := 0xFFFFFFFF
00044aa1: goto %0000692f

.address 0x40D66E
00006f32: 
.address 0x40D66E
00006f37: R8 := 0xFFFFFFFF
00044aa2: goto %000069f7

.address 0x40D56A
000068be: 
.address 0x40D56A
000068ce: #972 := R14 - RSI
.address 0x40D56A
000068d1: CF := R14 < RSI
.address 0x40D56A
000068d4: OF := high:1[(R14 ^ RSI) & (R14 ^ #972)]
.address 0x40D56A
000068d7: AF := 0x10 = (0x10 & (#972 ^ R14 ^ RSI))
.address 0x40D56A
000068da: PF := ~low:1[let $1 = #972 >> 4 ^ #972 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D56A
000068dd: SF := high:1[#972]
.address 0x40D56A
000068e0: ZF := 0 = #972
.address 0x40D56D
000068ea: when ZF goto %000068e4
00044aa3: goto %000069c8

.address 0x40D56F
000069c8: 
.address 0x40D56F
000069cd: RAX := pad:64[pad:32[mem[R9 + RDX]]]
.address 0x40D574
000069d4: RCX := pad:64[low:32[RAX - 0x30]]
.address 0x40D577
000069e1: #985 := low:8[RCX] - 9
.address 0x40D577
000069e4: CF := low:8[RCX] < 9
.address 0x40D577
000069e7: OF := high:1[(low:8[RCX] ^ 9) & (low:8[RCX] ^ #985)]
.address 0x40D577
000069ea: AF := 0x10 = (0x10 & (#985 ^ low:8[RCX] ^ 9))
.address 0x40D577
000069ed: PF := ~low:1[let $1 = #985 >> 4 ^ #985 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D577
000069f0: SF := high:1[#985]
.address 0x40D577
000069f3: ZF := 0 = #985
.address 0x40D57A
000069fd: when ~(CF | ZF) goto %000069f7
00044aa4: goto %000068e4

.address 0x40D678
000069f7: 
.address 0x40D678
00006a07: RDI := pad:64[pad:32[low:8[RAX]]]
.address 0x40D67B
00006a0e: RCX := pad:64[low:32[RDI - 0x41]]
.address 0x40D67E
00006a1b: #987 := low:32[RCX] - 0x39
.address 0x40D67E
00006a1e: CF := low:32[RCX] < 0x39
.address 0x40D67E
00006a21: OF := high:1[(low:32[RCX] ^ 0x39) & (low:32[RCX] ^ #987)]
.address 0x40D67E
00006a24: AF := 0x10 = (0x10 & (#987 ^ low:32[RCX] ^ 0x39))
.address 0x40D67E
00006a27: PF := ~low:1[let $1 = #987 >> 4 ^ #987 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D67E
00006a2a: SF := high:1[#987]
.address 0x40D67E
00006a2d: ZF := 0 = #987
.address 0x40D681
00006a37: when ~(CF | ZF) goto %00006a31
00044aa5: goto %00006a96

.address 0x40D683
00006a96: 
.address 0x40D683
00006a9b: RBP := R10
.address 0x40D686
00006aae: #994 := RBP
.address 0x40D686
00006add: goto %00006ab0

00006ac6: 
.address 0x40D686
00006ac7: OF := unknown[bits]:u1
.address 0x40D686
00006ace: goto %00006aca

00006ac2: 
.address 0x40D686
00006ac3: OF := (high:1[RBP] | CF) & ~(high:1[RBP] & CF)
.address 0x40D686
00006acd: goto %00006aca

00006ac9: 
.address 0x40D686
00006acb: when (RCX & 0x3F) = 1 goto %00006ac2
.address 0x40D686
00006acc: goto %00006ac6

00006abf: 
.address 0x40D686
00006ac0: AF := unknown[bits]:u1
.address 0x40D686
00006ad0: goto %00006ac9

00006abc: 
.address 0x40D686
00006abd: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D686
00006ad1: goto %00006abf

00006ab9: 
.address 0x40D686
00006aba: ZF := 0 = RBP
.address 0x40D686
00006ad2: goto %00006abc

00006ab6: 
.address 0x40D686
00006ab7: SF := high:1[RBP]
.address 0x40D686
00006ad3: goto %00006ab9

00006ab3: 
.address 0x40D686
00006ab4: CF := low:1[#994 >> 0x40 - (RCX & 0x3F)]
.address 0x40D686
00006ad4: goto %00006ab6

00006aca: 
.address 0x40D686
00006ada: goto %00006ad7

00006ad6: 
.address 0x40D686
00006ad8: when (RCX & 0x3F) <> 0 goto %00006ab3
.address 0x40D686
00006ad9: goto %00006ad7

00006ab0: 
.address 0x40D686
00006ab1: RBP := RBP << (RCX & 0x3F)
.address 0x40D686
00006adc: goto %00006ad6

00006ad7: 
.address 0x40D689
00006ae9: #996 := RBP & R15
.address 0x40D689
00006aec: OF := 0
.address 0x40D689
00006aef: CF := 0
.address 0x40D689
00006af2: AF := unknown[bits]:u1
.address 0x40D689
00006af5: PF := ~low:1[let $1 = #996 >> 4 ^ #996 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D689
00006af8: SF := high:1[#996]
.address 0x40D689
00006afb: ZF := 0 = #996
.address 0x40D68C
00006b04: when ~ZF goto %0000690e
00044aa6: goto %00006a31

.address 0x40D692
00006a31: 
.address 0x40D692
00006a48: #989 := low:32[RDI]
.address 0x40D692
00006a4b: RDI := pad:64[low:32[RDI] + 0x100]
.address 0x40D692
00006a4e: CF := low:32[RDI] < #989
.address 0x40D692
00006a51: OF := ~high:1[#989] & (high:1[#989] | high:1[low:32[RDI]]) & ~(
high:1[#989] & high:1[low:32[RDI]])
.address 0x40D692
00006a54: AF := 0x10 = (0x10 & (low:32[RDI] ^ #989 ^ 0x100))
.address 0x40D692
00006a57: PF := ~low:1[let $1 = low:32[RDI] >> 4 ^ low:32[RDI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D692
00006a5a: SF := high:1[low:32[RDI]]
.address 0x40D692
00006a5d: ZF := 0 = low:32[RDI]
.address 0x40D698
00006a6a: #992 := low:8[RAX] - 0x7E
.address 0x40D698
00006a6d: CF := low:8[RAX] < 0x7E
.address 0x40D698
00006a70: OF := high:1[(low:8[RAX] ^ 0x7E) & (low:8[RAX] ^ #992)]
.address 0x40D698
00006a73: AF := 0x10 = (0x10 & (#992 ^ low:8[RAX] ^ 0x7E))
.address 0x40D698
00006a76: PF := ~low:1[let $1 = #992 >> 4 ^ #992 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D698
00006a79: SF := high:1[#992]
.address 0x40D698
00006a7c: ZF := 0 = #992
.address 0x40D69A
00006a83: RAX := 0xFFFFFFFF
.address 0x40D69F
00006a8a: RDI := pad:64[if ZF then low:32[RAX] else low:32[RDI]]
.address 0x40D6A2
00006a91: goto %0000690e

.address 0x40D580
000068e4: 
.address 0x40D580
000068fa: RDI := 0
.address 0x40D580
000068fd: AF := unknown[bits]:u1
.address 0x40D580
00006900: ZF := 1
.address 0x40D580
00006903: PF := 1
.address 0x40D580
00006906: OF := 0
.address 0x40D580
00006909: CF := 0
.address 0x40D580
0000690c: SF := 0
00044aa7: goto %0000690e

.address 0x40D582
0000690e: 
.address 0x40D582
00006919: #974 := low:32[RDI] - low:32[R8]
.address 0x40D582
0000691c: CF := low:32[RDI] < low:32[R8]
.address 0x40D582
0000691f: OF := high:1[(low:32[RDI] ^ low:32[R8]) & (low:32[RDI] ^ #974)]
.address 0x40D582
00006922: AF := 0x10 = (0x10 & (#974 ^ low:32[RDI] ^ low:32[R8]))
.address 0x40D582
00006925: PF := ~low:1[let $1 = #974 >> 4 ^ #974 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D582
00006928: SF := high:1[#974]
.address 0x40D582
0000692b: ZF := 0 = #974
.address 0x40D585
00006935: when ~ZF goto %0000692f
00044aa8: goto %00006978

.address 0x40D718
0000692f: 
.address 0x40D718
00006947: #976 := low:32[R8]
.address 0x40D718
0000694a: #977 := low:32[RDI]
.address 0x40D718
0000694d: R8 := pad:64[low:32[R8] - low:32[RDI]]
.address 0x40D718
00006950: CF := #976 < #977
.address 0x40D718
00006953: OF := high:1[(#976 ^ #977) & (#976 ^ low:32[R8])]
.address 0x40D718
00006956: AF := 0x10 = (0x10 & (low:32[R8] ^ #976 ^ #977))
.address 0x40D718
00006959: PF := ~low:1[let $1 = low:32[R8] >> 4 ^ low:32[R8] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D718
0000695c: SF := high:1[low:32[R8]]
.address 0x40D718
0000695f: ZF := 0 = low:32[R8]
.address 0x40D71B
00006968: when ~ZF goto %000066ec
00044aa9: goto %0000696e

.address 0x40D721
0000696e: 
.address 0x40D721
00006973: goto %00006362

.address 0x40D610
000066ec: 
.address 0x40D610
000066f6: R12 := pad:64[low:32[R8]]
00044aaa: goto %00006362

.address 0x40D618
00006362: 
.address 0x40D618
00006372: RBX := mem[RSP + 0x28, el]:u64
.address 0x40D61D
0000637f: RBX := RBX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x40D61D
00006382: OF := 0
.address 0x40D61D
00006385: CF := 0
.address 0x40D61D
00006388: AF := unknown[bits]:u1
.address 0x40D61D
0000638b: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D61D
0000638e: SF := high:1[RBX]
.address 0x40D61D
00006391: ZF := 0 = RBX
.address 0x40D626
00006398: RAX := pad:64[low:32[R12]]
.address 0x40D629
000063a2: when ~ZF goto %0000639c
00044aab: goto %00021328

.address 0x40D7BE
0000639c: 
.address 0x40D7BE
000063ae: RSP := RSP - 8
.address 0x40D7BE
000063b1: mem := mem with [RSP, el]:u64 <- 0x40D7C3
.address 0x40D7BE
000063b4: call @sub_403970 with return %000063b6

.address 0x40D7C3
000063b6: 
.address 0x40D7C3
000063bb: R14 := mem[RSP + 0x20, el]:u64
.address 0x40D7C8
000063ca: #921 := R14
.address 0x40D7C8
000063cd: #922 := RBP
.address 0x40D7C8
000063d0: R14 := R14 - RBP
.address 0x40D7C8
000063d3: CF := #921 < #922
.address 0x40D7C8
000063d6: OF := high:1[(#921 ^ #922) & (#921 ^ R14)]
.address 0x40D7C8
000063d9: AF := 0x10 = (0x10 & (R14 ^ #921 ^ #922))
.address 0x40D7C8
000063dc: PF := ~low:1[let $1 = R14 >> 4 ^ R14 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D7C8
000063df: SF := high:1[R14]
.address 0x40D7C8
000063e2: ZF := 0 = R14
.address 0x40D7CB
000063ea: goto %000063e6

.address 0x40D62F
00021328: 
.address 0x40D62F
00021334: #4665 := RSP
.address 0x40D62F
00021337: RSP := RSP + 0x38
.address 0x40D62F
0002133a: CF := RSP < #4665
.address 0x40D62F
0002133d: OF := ~high:1[#4665] & (high:1[#4665] | high:1[RSP]) & ~(high:1[#4665] & high:1[RSP])
.address 0x40D62F
00021340: AF := 0x10 = (0x10 & (RSP ^ #4665 ^ 0x38))
.address 0x40D62F
00021343: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D62F
00021346: SF := high:1[RSP]
.address 0x40D62F
00021349: ZF := 0 = RSP
.address 0x40D633
00021351: RBX := mem[RSP, el]:u64
.address 0x40D633
00021354: RSP := RSP + 8
.address 0x40D634
0002135c: RBP := mem[RSP, el]:u64
.address 0x40D634
0002135f: RSP := RSP + 8
.address 0x40D635
00021367: R12 := mem[RSP, el]:u64
.address 0x40D635
0002136a: RSP := RSP + 8
.address 0x40D637
00021372: R13 := mem[RSP, el]:u64
.address 0x40D637
00021375: RSP := RSP + 8
.address 0x40D639
0002137d: R14 := mem[RSP, el]:u64
.address 0x40D639
00021380: RSP := RSP + 8
.address 0x40D63B
00021388: R15 := mem[RSP, el]:u64
.address 0x40D63B
0002138b: RSP := RSP + 8
.address 0x40D63D
00021394: #4668 := mem[RSP, el]:u64
.address 0x40D63D
00021397: RSP := RSP + 8
.address 0x40D63D
0002139b: call #4668 with noreturn

.address 0x40D58B
00006978: 
.address 0x40D58B
00006984: #979 := RDX
.address 0x40D58B
00006987: RDX := RDX + 1
.address 0x40D58B
0000698a: CF := RDX < #979
.address 0x40D58B
0000698d: OF := ~high:1[#979] & (high:1[#979] | high:1[RDX]) & ~(high:1[#979] & high:1[RDX])
.address 0x40D58B
00006990: AF := 0x10 = (0x10 & (RDX ^ #979 ^ 1))
.address 0x40D58B
00006993: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D58B
00006996: SF := high:1[RDX]
.address 0x40D58B
00006999: ZF := 0 = RDX
.address 0x40D58F
000069a7: #982 := RSI
.address 0x40D58F
000069aa: RSI := RSI + 1
.address 0x40D58F
000069ad: CF := RSI < #982
.address 0x40D58F
000069b0: OF := ~high:1[#982] & (high:1[#982] | high:1[RSI]) & ~(high:1[#982] & high:1[RSI])
.address 0x40D58F
000069b3: AF := 0x10 = (0x10 & (RSI ^ #982 ^ 1))
.address 0x40D58F
000069b6: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D58F
000069b9: SF := high:1[RSI]
.address 0x40D58F
000069bc: ZF := 0 = RSI
.address 0x40D593
000069c3: goto %0000652c


.address 0x40D7D0
0004423d: sub sub_40d7d0()
.address 0x40D7D0
00007067: 
.address 0x40D7D0
0000706e: #1058 := RBX
.address 0x40D7D0
00007071: RSP := RSP - 8
.address 0x40D7D0
00007074: mem := mem with [RSP, el]:u64 <- #1058
.address 0x40D7D1
0000707b: RSI := RDI
.address 0x40D7D4
00007082: RBX := RDI
.address 0x40D7D7
0000708f: RDI := 0
.address 0x40D7D7
00007092: AF := unknown[bits]:u1
.address 0x40D7D7
00007095: ZF := 1
.address 0x40D7D7
00007098: PF := 1
.address 0x40D7D7
0000709b: OF := 0
.address 0x40D7D7
0000709e: CF := 0
.address 0x40D7D7
000070a1: SF := 0
.address 0x40D7D9
000070af: #1059 := RSP
.address 0x40D7D9
000070b2: RSP := RSP - 0x20
.address 0x40D7D9
000070b5: CF := #1059 < 0x20
.address 0x40D7D9
000070b8: OF := high:1[(#1059 ^ 0x20) & (#1059 ^ RSP)]
.address 0x40D7D9
000070bb: AF := 0x10 = (0x10 & (RSP ^ #1059 ^ 0x20))
.address 0x40D7D9
000070be: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D7D9
000070c1: SF := high:1[RSP]
.address 0x40D7D9
000070c4: ZF := 0 = RSP
.address 0x40D7DD
000070cb: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x40D7E6
000070d2: mem := mem with [RSP + 0x18, el]:u64 <- RAX
.address 0x40D7EB
000070df: RAX := 0
.address 0x40D7EB
000070e2: AF := unknown[bits]:u1
.address 0x40D7EB
000070e5: ZF := 1
.address 0x40D7EB
000070e8: PF := 1
.address 0x40D7EB
000070eb: OF := 0
.address 0x40D7EB
000070ee: CF := 0
.address 0x40D7EB
000070f1: SF := 0
.address 0x40D7ED
000070fa: RSP := RSP - 8
.address 0x40D7ED
000070fd: mem := mem with [RSP, el]:u64 <- 0x40D7F2
.address 0x40D7ED
00007100: call @sub_4038c0 with return %00007102

.address 0x40D7F2
00007102: 
.address 0x40D7F2
0000710d: #1062 := low:32[RAX]
.address 0x40D7F2
00007110: OF := 0
.address 0x40D7F2
00007113: CF := 0
.address 0x40D7F2
00007116: AF := unknown[bits]:u1
.address 0x40D7F2
00007119: PF := ~low:1[let $1 = #1062 >> 4 ^ #1062 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D7F2
0000711c: SF := high:1[#1062]
.address 0x40D7F2
0000711f: ZF := 0 = #1062
.address 0x40D7F4
00007129: when ZF goto %00007123
00044aac: goto %000212bb

.address 0x40D7F6
000212bb: 
.address 0x40D7F6
000212c0: RDI := RSP
.address 0x40D7F9
000212cd: RSI := 0
.address 0x40D7F9
000212d0: AF := unknown[bits]:u1
.address 0x40D7F9
000212d3: ZF := 1
.address 0x40D7F9
000212d6: PF := 1
.address 0x40D7F9
000212d9: OF := 0
.address 0x40D7F9
000212dc: CF := 0
.address 0x40D7F9
000212df: SF := 0
.address 0x40D7FB
000212e8: RSP := RSP - 8
.address 0x40D7FB
000212eb: mem := mem with [RSP, el]:u64 <- 0x40D800
.address 0x40D7FB
000212ee: call @sub_403a20 with return %000212f0

.address 0x40D800
000212f0: 
.address 0x40D800
000212f5: RAX := mem[RSP, el]:u64
.address 0x40D804
000212fc: mem := mem with [RBX, el]:u64 <- RAX
.address 0x40D807
0002130a: #4664 := extend:128[mem[RSP + 8, el]:u64] * 0x3E8
.address 0x40D807
0002130d: RAX := low:64[#4664]
.address 0x40D807
00021310: OF := #4664 <> extend:128[RAX]
.address 0x40D807
00021313: CF := #4664 <> extend:128[RAX]
.address 0x40D807
00021316: PF := unknown[bits]:u1
.address 0x40D807
00021319: SF := unknown[bits]:u1
.address 0x40D807
0002131c: ZF := unknown[bits]:u1
.address 0x40D807
0002131f: AF := unknown[bits]:u1
.address 0x40D810
00021326: mem := mem with [RBX + 8, el]:u64 <- RAX
00044aad: goto %00007123

.address 0x40D814
00007123: 
.address 0x40D814
00007133: RAX := mem[RSP + 0x18, el]:u64
.address 0x40D819
00007140: RAX := RAX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x40D819
00007143: OF := 0
.address 0x40D819
00007146: CF := 0
.address 0x40D819
00007149: AF := unknown[bits]:u1
.address 0x40D819
0000714c: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D819
0000714f: SF := high:1[RAX]
.address 0x40D819
00007152: ZF := 0 = RAX
.address 0x40D822
0000715c: when ~ZF goto %00007156
00044aae: goto %0002127d

.address 0x40D82A
00007156: 
.address 0x40D82A
00007168: RSP := RSP - 8
.address 0x40D82A
0000716b: mem := mem with [RSP, el]:u64 <- 0x40D82F
.address 0x40D82A
0000716e: call @sub_403970 with return %00007170

.address 0x40D82F
00007170: 
00044aaf: call @sub_40d830 with noreturn

.address 0x40D824
0002127d: 
.address 0x40D824
00021289: #4660 := RSP
.address 0x40D824
0002128c: RSP := RSP + 0x20
.address 0x40D824
0002128f: CF := RSP < #4660
.address 0x40D824
00021292: OF := ~high:1[#4660] & (high:1[#4660] | high:1[RSP]) & ~(high:1[#4660] & high:1[RSP])
.address 0x40D824
00021295: AF := 0x10 = (0x10 & (RSP ^ #4660 ^ 0x20))
.address 0x40D824
00021298: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D824
0002129b: SF := high:1[RSP]
.address 0x40D824
0002129e: ZF := 0 = RSP
.address 0x40D828
000212a6: RBX := mem[RSP, el]:u64
.address 0x40D828
000212a9: RSP := RSP + 8
.address 0x40D829
000212b2: #4663 := mem[RSP, el]:u64
.address 0x40D829
000212b5: RSP := RSP + 8
.address 0x40D829
000212b9: call #4663 with noreturn


.address 0x40D830
00044242: sub sub_40d830()
.address 0x40D830
00007173: 
.address 0x40D830
0000717f: #1065 := RSP
.address 0x40D830
00007182: RSP := RSP - 8
.address 0x40D830
00007185: CF := #1065 < 8
.address 0x40D830
00007188: OF := high:1[(#1065 ^ 8) & (#1065 ^ RSP)]
.address 0x40D830
0000718b: AF := 0x10 = (0x10 & (RSP ^ #1065 ^ 8))
.address 0x40D830
0000718e: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D830
00007191: SF := high:1[RSP]
.address 0x40D830
00007194: ZF := 0 = RSP
.address 0x40D834
000071a1: RSI := 0
.address 0x40D834
000071a4: AF := unknown[bits]:u1
.address 0x40D834
000071a7: ZF := 1
.address 0x40D834
000071aa: PF := 1
.address 0x40D834
000071ad: OF := 0
.address 0x40D834
000071b0: CF := 0
.address 0x40D834
000071b3: SF := 0
.address 0x40D836
000071bc: RSP := RSP - 8
.address 0x40D836
000071bf: mem := mem with [RSP, el]:u64 <- 0x40D83B
.address 0x40D836
000071c2: call @sub_403cc0 with return %000071c4

.address 0x40D83B
000071c4: 
.address 0x40D83B
000071c9: RDX := RAX
.address 0x40D83E
000071d0: RAX := 1
.address 0x40D843
000071dd: #1068 := RDX
.address 0x40D843
000071e0: OF := 0
.address 0x40D843
000071e3: CF := 0
.address 0x40D843
000071e6: AF := unknown[bits]:u1
.address 0x40D843
000071e9: PF := ~low:1[let $1 = #1068 >> 4 ^ #1068 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D843
000071ec: SF := high:1[#1068]
.address 0x40D843
000071ef: ZF := 0 = #1068
.address 0x40D846
000071f9: when ZF goto %000071f3
00044ab0: goto %000211e6

.address 0x40D848
000211e6: 
.address 0x40D848
000211eb: RDI := 0x41A33F
.address 0x40D84F
000211f2: RCX := 2
.address 0x40D854
000211f9: RSI := RDX
.address 0x40D857
00021201: #4657 := 1
.address 0x40D857
00021223: goto %0002121d

00021203: 
.address 0x40D857
00021204: #4653 := mem[RSI]
.address 0x40D857
00021206: #4654 := mem[RDI]
.address 0x40D857
00021208: #4655 := #4653 - #4654
.address 0x40D857
0002120a: RSI := RSI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x40D857
0002120c: RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x40D857
0002120e: CF := #4653 < #4654
.address 0x40D857
00021210: OF := high:1[(#4653 ^ #4654) & (#4653 ^ #4655)]
.address 0x40D857
00021212: AF := 0x10 = (0x10 & (#4655 ^ #4653 ^ #4654))
.address 0x40D857
00021214: PF := ~low:1[let $1 = #4655 >> 4 ^ #4655 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D857
00021216: SF := high:1[#4655]
.address 0x40D857
00021218: ZF := 0 = #4655
.address 0x40D857
0002121a: RCX := RCX - 1
.address 0x40D857
0002121c: #4657 := ZF
.address 0x40D857
00021221: goto %0002121e

0002121d: 
.address 0x40D857
00021220: goto %0002121e

0002121e: 
.address 0x40D857
0002121f: when RCX <> 0 & #4657 goto %00021203
00044ab1: goto %00021228

00021228: 
.address 0x40D859
00021229: RSI := extract:63:8[RSI].pad:8[~(CF | ZF)]
.address 0x40D85D
00021230: RCX := extract:63:8[RCX].pad:8[CF]
.address 0x40D860
0002123d: RAX := 0
.address 0x40D860
00021240: AF := unknown[bits]:u1
.address 0x40D860
00021243: ZF := 1
.address 0x40D860
00021246: PF := 1
.address 0x40D860
00021249: OF := 0
.address 0x40D860
0002124c: CF := 0
.address 0x40D860
0002124f: SF := 0
.address 0x40D862
0002125c: #4658 := low:8[RSI] - low:8[RCX]
.address 0x40D862
0002125f: CF := low:8[RSI] < low:8[RCX]
.address 0x40D862
00021262: OF := high:1[(low:8[RSI] ^ low:8[RCX]) & (low:8[RSI] ^ #4658)]
.address 0x40D862
00021265: AF := 0x10 = (0x10 & (#4658 ^ low:8[RSI] ^ low:8[RCX]))
.address 0x40D862
00021268: PF := ~low:1[let $1 = #4658 >> 4 ^ #4658 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D862
0002126b: SF := high:1[#4658]
.address 0x40D862
0002126e: ZF := 0 = #4658
.address 0x40D865
00021277: when ~ZF goto %00007234
00044ab2: goto %000071f3

.address 0x40D870
00007234: 
.address 0x40D870
00007239: RDI := 0x41A341
.address 0x40D877
00007240: RCX := 6
.address 0x40D87C
00007247: RSI := RDX
.address 0x40D87F
0000724f: #1078 := 1
.address 0x40D87F
00007271: goto %0000726b

00007251: 
.address 0x40D87F
00007252: #1074 := mem[RSI]
.address 0x40D87F
00007254: #1075 := mem[RDI]
.address 0x40D87F
00007256: #1076 := #1074 - #1075
.address 0x40D87F
00007258: RSI := RSI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x40D87F
0000725a: RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x40D87F
0000725c: CF := #1074 < #1075
.address 0x40D87F
0000725e: OF := high:1[(#1074 ^ #1075) & (#1074 ^ #1076)]
.address 0x40D87F
00007260: AF := 0x10 = (0x10 & (#1076 ^ #1074 ^ #1075))
.address 0x40D87F
00007262: PF := ~low:1[let $1 = #1076 >> 4 ^ #1076 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D87F
00007264: SF := high:1[#1076]
.address 0x40D87F
00007266: ZF := 0 = #1076
.address 0x40D87F
00007268: RCX := RCX - 1
.address 0x40D87F
0000726a: #1078 := ZF
.address 0x40D87F
0000726f: goto %0000726c

0000726b: 
.address 0x40D87F
0000726e: goto %0000726c

0000726c: 
.address 0x40D87F
0000726d: when RCX <> 0 & #1078 goto %00007251
00044ab3: goto %00007276

00007276: 
.address 0x40D881
00007277: RAX := extract:63:8[RAX].pad:8[~ZF]
.address 0x40D884
00007285: #1079 := RSP
.address 0x40D884
00007288: RSP := RSP + 8
.address 0x40D884
0000728b: CF := RSP < #1079
.address 0x40D884
0000728e: OF := ~high:1[#1079] & (high:1[#1079] | high:1[RSP]) & ~(high:1[#1079] & high:1[RSP])
.address 0x40D884
00007291: AF := 0x10 = (0x10 & (RSP ^ #1079 ^ 8))
.address 0x40D884
00007294: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D884
00007297: SF := high:1[RSP]
.address 0x40D884
0000729a: ZF := 0 = RSP
.address 0x40D888
000072a3: #1082 := mem[RSP, el]:u64
.address 0x40D888
000072a6: RSP := RSP + 8
.address 0x40D888
000072aa: call #1082 with noreturn

.address 0x40D867
000071f3: 
.address 0x40D867
0000720a: #1070 := RSP
.address 0x40D867
0000720d: RSP := RSP + 8
.address 0x40D867
00007210: CF := RSP < #1070
.address 0x40D867
00007213: OF := ~high:1[#1070] & (high:1[#1070] | high:1[RSP]) & ~(high:1[#1070] & high:1[RSP])
.address 0x40D867
00007216: AF := 0x10 = (0x10 & (RSP ^ #1070 ^ 8))
.address 0x40D867
00007219: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D867
0000721c: SF := high:1[RSP]
.address 0x40D867
0000721f: ZF := 0 = RSP
.address 0x40D86B
00007228: #1073 := mem[RSP, el]:u64
.address 0x40D86B
0000722b: RSP := RSP + 8
.address 0x40D86B
0000722f: call #1073 with noreturn


.address 0x40D890
00044247: sub sub_40d890()
.address 0x40D890
000072af: 
.address 0x40D890
000072ba: #1083 := RDI - 0xA
.address 0x40D890
000072bd: CF := RDI < 0xA
.address 0x40D890
000072c0: OF := high:1[(RDI ^ 0xA) & (RDI ^ #1083)]
.address 0x40D890
000072c3: AF := 0x10 = (0x10 & (#1083 ^ RDI ^ 0xA))
.address 0x40D890
000072c6: PF := ~low:1[let $1 = #1083 >> 4 ^ #1083 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D890
000072c9: SF := high:1[#1083]
.address 0x40D890
000072cc: ZF := 0 = #1083
.address 0x40D894
000072d3: RAX := 0xA
.address 0x40D899
000072da: R9 := 0xAAAAAAAAAAAAAAAB
.address 0x40D8A3
000072e1: RDI := if CF then RAX else RDI
.address 0x40D8A7
000072ee: RDI := RDI | 1
.address 0x40D8A7
000072f1: OF := 0
.address 0x40D8A7
000072f4: CF := 0
.address 0x40D8A7
000072f7: AF := unknown[bits]:u1
.address 0x40D8A7
000072fa: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D8A7
000072fd: SF := high:1[RDI]
.address 0x40D8A7
00007300: ZF := 0 = RDI
.address 0x40D8AB
0000730d: #1086 := RDI - 0xFFFFFFFFFFFFFFFF
.address 0x40D8AB
00007310: CF := RDI < 0xFFFFFFFFFFFFFFFF
.address 0x40D8AB
00007313: OF := high:1[(RDI ^ 0xFFFFFFFFFFFFFFFF) & (RDI ^ #1086)]
.address 0x40D8AB
00007316: AF := 0x10 = (0x10 & (#1086 ^ RDI ^ 0xFFFFFFFFFFFFFFFF))
.address 0x40D8AB
00007319: PF := ~low:1[let $1 = #1086 >> 4 ^ #1086 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D8AB
0000731c: SF := high:1[#1086]
.address 0x40D8AB
0000731f: ZF := 0 = #1086
.address 0x40D8AF
00007329: when ZF goto %00007323
00044ab4: goto %00020f14

.address 0x40D8B1
00020f14: 
00044ab5: goto %00020f17

.address 0x40D8B8
00020f17: 
.address 0x40D8B8
00020f1c: RAX := RDI
.address 0x40D8BB
00020f23: RCX := RDI
.address 0x40D8BE
00020f32: #4618 := pad:128[RAX] * pad:128[R9]
.address 0x40D8BE
00020f35: RAX := extract:63:0[#4618]
.address 0x40D8BE
00020f38: RDX := extract:127:64[#4618]
.address 0x40D8BE
00020f3b: OF := extract:127:64[#4618] <> 0
.address 0x40D8BE
00020f3e: CF := extract:127:64[#4618] <> 0
.address 0x40D8BE
00020f41: SF := unknown[bits]:u1
.address 0x40D8BE
00020f44: ZF := unknown[bits]:u1
.address 0x40D8BE
00020f47: AF := unknown[bits]:u1
.address 0x40D8BE
00020f4a: PF := unknown[bits]:u1
.address 0x40D8C1
00020f51: RAX := RDX
.address 0x40D8C4
00020f5f: #4619 := RAX
.address 0x40D8C4
00020f62: RAX := RAX >> 1
.address 0x40D8C4
00020f65: CF := high:1[#4619 << 0x3F]
.address 0x40D8C4
00020f68: SF := high:1[RAX]
.address 0x40D8C4
00020f6b: ZF := 0 = RAX
.address 0x40D8C4
00020f6e: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D8C4
00020f71: AF := unknown[bits]:u1
.address 0x40D8C4
00020f74: OF := high:1[#4619]
.address 0x40D8C7
00020f7b: RAX := low:64[RAX + (RAX << 1)]
.address 0x40D8CB
00020f8a: #4621 := RCX
.address 0x40D8CB
00020f8d: #4622 := RAX
.address 0x40D8CB
00020f90: RCX := RCX - RAX
.address 0x40D8CB
00020f93: CF := #4621 < #4622
.address 0x40D8CB
00020f96: OF := high:1[(#4621 ^ #4622) & (#4621 ^ RCX)]
.address 0x40D8CB
00020f99: AF := 0x10 = (0x10 & (RCX ^ #4621 ^ #4622))
.address 0x40D8CB
00020f9c: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D8CB
00020f9f: SF := high:1[RCX]
.address 0x40D8CB
00020fa2: ZF := 0 = RCX
.address 0x40D8CE
00020faf: #4624 := RDI - 9
.address 0x40D8CE
00020fb2: CF := RDI < 9
.address 0x40D8CE
00020fb5: OF := high:1[(RDI ^ 9) & (RDI ^ #4624)]
.address 0x40D8CE
00020fb8: AF := 0x10 = (0x10 & (#4624 ^ RDI ^ 9))
.address 0x40D8CE
00020fbb: PF := ~low:1[let $1 = #4624 >> 4 ^ #4624 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D8CE
00020fbe: SF := high:1[#4624]
.address 0x40D8CE
00020fc1: ZF := 0 = #4624
.address 0x40D8D2
00020fc8: RAX := RCX
.address 0x40D8D5
00020fd2: when CF | ZF goto %00020fcc
00044ab6: goto %00021052

.address 0x40D8D7
00021052: 
.address 0x40D8D7
0002105d: #4633 := RCX
.address 0x40D8D7
00021060: OF := 0
.address 0x40D8D7
00021063: CF := 0
.address 0x40D8D7
00021066: AF := unknown[bits]:u1
.address 0x40D8D7
00021069: PF := ~low:1[let $1 = #4633 >> 4 ^ #4633 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D8D7
0002106c: SF := high:1[#4633]
.address 0x40D8D7
0002106f: ZF := 0 = #4633
.address 0x40D8DA
00021078: when ZF goto %00021003
00044ab7: goto %0002107e

.address 0x40D8DC
0002107e: 
.address 0x40D8DC
00021083: R8 := 0x10
.address 0x40D8E2
0002108a: RSI := 9
.address 0x40D8E7
00021091: RCX := 3
.address 0x40D8EC
00021099: goto %00021095

.address 0x40D8F9
00021095: 
.address 0x40D8F9
000210a6: #4635 := RCX
.address 0x40D8F9
000210a9: RCX := RCX + 2
.address 0x40D8F9
000210ac: CF := RCX < #4635
.address 0x40D8F9
000210af: OF := ~high:1[#4635] & (high:1[#4635] | high:1[RCX]) & ~(high:1[#4635] & high:1[RCX])
.address 0x40D8F9
000210b2: AF := 0x10 = (0x10 & (RCX ^ #4635 ^ 2))
.address 0x40D8F9
000210b5: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D8F9
000210b8: SF := high:1[RCX]
.address 0x40D8F9
000210bb: ZF := 0 = RCX
.address 0x40D8FD
000210c8: RDX := 0
.address 0x40D8FD
000210cb: AF := unknown[bits]:u1
.address 0x40D8FD
000210ce: ZF := 1
.address 0x40D8FD
000210d1: PF := 1
.address 0x40D8FD
000210d4: OF := 0
.address 0x40D8FD
000210d7: CF := 0
.address 0x40D8FD
000210da: SF := 0
.address 0x40D8FF
000210e1: RAX := RDI
.address 0x40D902
000210fa: #4639 := pad:128[RCX]
.address 0x40D902
00021139: goto %000210fc

00021113: 
.address 0x40D902
00021114: call %0000737f with noreturn

00021109: 
.address 0x40D902
0002110a: #4642 := low:64[#4641].low:64[#4640]
.address 0x40D902
0002110d: RAX := extract:63:0[#4642]
.address 0x40D902
00021110: RDX := extract:127:64[#4642]
.address 0x40D902
0002111a: goto %00021117

00021116: 
.address 0x40D902
00021118: when high:64[#4640] = 0 goto %00021109
.address 0x40D902
00021119: goto %00021113

00021106: 
.address 0x40D902
00021107: #4641 := #4638 % #4639
.address 0x40D902
0002111d: goto %00021116

00021103: 
.address 0x40D902
00021104: #4640 := #4638 / #4639
.address 0x40D902
0002111e: goto %00021106

00021117: 
.address 0x40D902
00021124: goto %00021120

000210ff: 
.address 0x40D902
00021100: call %0000737f with noreturn

0002111f: 
.address 0x40D902
00021121: when #4639 = 0 goto %000210ff
.address 0x40D902
00021122: goto %00021103

000210fc: 
.address 0x40D902
000210fd: #4638 := RDX.RAX
.address 0x40D902
00021138: goto %0002111f

00021120: 
.address 0x40D902
00021127: CF := unknown[bits]:u1
.address 0x40D902
0002112a: OF := unknown[bits]:u1
.address 0x40D902
0002112d: SF := unknown[bits]:u1
.address 0x40D902
00021130: ZF := unknown[bits]:u1
.address 0x40D902
00021133: AF := unknown[bits]:u1
.address 0x40D902
00021136: PF := unknown[bits]:u1
00044ab8: goto %0002113a

.address 0x40D905
0002113a: 
.address 0x40D905
00021147: #4643 := RSI
.address 0x40D905
0002114a: #4644 := R8
.address 0x40D905
0002114d: RSI := RSI + #4644
.address 0x40D905
00021150: CF := RSI < #4643
.address 0x40D905
00021153: OF := high:1[#4643] = high:1[#4644] & (high:1[#4643] | high:1[RSI]) & ~(
high:1[#4643] & high:1[RSI])
.address 0x40D905
00021156: AF := 0x10 = (0x10 & (RSI ^ #4643 ^ #4644))
.address 0x40D905
00021159: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D905
0002115c: SF := high:1[RSI]
.address 0x40D905
0002115f: ZF := 0 = RSI
.address 0x40D908
0002116c: #4646 := RSI - RDI
.address 0x40D908
0002116f: CF := RSI < RDI
.address 0x40D908
00021172: OF := high:1[(RSI ^ RDI) & (RSI ^ #4646)]
.address 0x40D908
00021175: AF := 0x10 = (0x10 & (#4646 ^ RSI ^ RDI))
.address 0x40D908
00021178: PF := ~low:1[let $1 = #4646 >> 4 ^ #4646 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D908
0002117b: SF := high:1[#4646]
.address 0x40D908
0002117e: ZF := 0 = #4646
.address 0x40D90B
00021185: RAX := RDX
.address 0x40D90E
0002118f: when CF goto %00021189
00044ab9: goto %00020fcc

.address 0x40D910
00020fcc: 
.address 0x40D910
00020fe2: #4626 := RAX
.address 0x40D910
00020fe5: OF := 0
.address 0x40D910
00020fe8: CF := 0
.address 0x40D910
00020feb: AF := unknown[bits]:u1
.address 0x40D910
00020fee: PF := ~low:1[let $1 = #4626 >> 4 ^ #4626 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D910
00020ff1: SF := high:1[#4626]
.address 0x40D910
00020ff4: ZF := 0 = #4626
.address 0x40D913
00020ffd: when ~ZF goto %00007323
00044aba: goto %00021003

.address 0x40D8F0
00021189: 
.address 0x40D8F0
000211a0: #4648 := R8
.address 0x40D8F0
000211a3: R8 := R8 + 8
.address 0x40D8F0
000211a6: CF := R8 < #4648
.address 0x40D8F0
000211a9: OF := ~high:1[#4648] & (high:1[#4648] | high:1[R8]) & ~(high:1[#4648] & high:1[R8])
.address 0x40D8F0
000211ac: AF := 0x10 = (0x10 & (R8 ^ #4648 ^ 8))
.address 0x40D8F0
000211af: PF := ~low:1[let $1 = R8 >> 4 ^ R8 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D8F0
000211b2: SF := high:1[R8]
.address 0x40D8F0
000211b5: ZF := 0 = R8
.address 0x40D8F4
000211c2: #4651 := RDX
.address 0x40D8F4
000211c5: OF := 0
.address 0x40D8F4
000211c8: CF := 0
.address 0x40D8F4
000211cb: AF := unknown[bits]:u1
.address 0x40D8F4
000211ce: PF := ~low:1[let $1 = #4651 >> 4 ^ #4651 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D8F4
000211d1: SF := high:1[#4651]
.address 0x40D8F4
000211d4: ZF := 0 = #4651
.address 0x40D8F7
000211dd: when ZF goto %00021003
00044abb: goto %00021095

.address 0x40D915
00021003: 
.address 0x40D915
0002100f: #4628 := RDI
.address 0x40D915
00021012: RDI := RDI + 2
.address 0x40D915
00021015: CF := RDI < #4628
.address 0x40D915
00021018: OF := ~high:1[#4628] & (high:1[#4628] | high:1[RDI]) & ~(high:1[#4628] & high:1[RDI])
.address 0x40D915
0002101b: AF := 0x10 = (0x10 & (RDI ^ #4628 ^ 2))
.address 0x40D915
0002101e: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D915
00021021: SF := high:1[RDI]
.address 0x40D915
00021024: ZF := 0 = RDI
.address 0x40D919
00021031: #4631 := RDI - 0xFFFFFFFFFFFFFFFF
.address 0x40D919
00021034: CF := RDI < 0xFFFFFFFFFFFFFFFF
.address 0x40D919
00021037: OF := high:1[(RDI ^ 0xFFFFFFFFFFFFFFFF) & (RDI ^ #4631)]
.address 0x40D919
0002103a: AF := 0x10 = (0x10 & (#4631 ^ RDI ^ 0xFFFFFFFFFFFFFFFF))
.address 0x40D919
0002103d: PF := ~low:1[let $1 = #4631 >> 4 ^ #4631 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D919
00021040: SF := high:1[#4631]
.address 0x40D919
00021043: ZF := 0 = #4631
.address 0x40D91D
0002104c: when ~ZF goto %00020f17
00044abc: goto %00007323

.address 0x40D91F
00007323: 
.address 0x40D91F
00007333: RAX := RDI
.address 0x40D922
0000733c: #1088 := mem[RSP, el]:u64
.address 0x40D922
0000733f: RSP := RSP + 8
.address 0x40D922
00007343: call #1088 with noreturn


.address 0x40D940
00044251: sub sub_40d940()
.address 0x40D940
000073eb: 
.address 0x40D940
000073f6: #1096 := RDI - RSI
.address 0x40D940
000073f9: CF := RDI < RSI
.address 0x40D940
000073fc: OF := high:1[(RDI ^ RSI) & (RDI ^ #1096)]
.address 0x40D940
000073ff: AF := 0x10 = (0x10 & (#1096 ^ RDI ^ RSI))
.address 0x40D940
00007402: PF := ~low:1[let $1 = #1096 >> 4 ^ #1096 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D940
00007405: SF := high:1[#1096]
.address 0x40D940
00007408: ZF := 0 = #1096
.address 0x40D943
0000740f: RAX := extract:63:8[RAX].pad:8[ZF]
.address 0x40D946
00007418: #1098 := mem[RSP, el]:u64
.address 0x40D946
0000741b: RSP := RSP + 8
.address 0x40D946
0000741f: call #1098 with noreturn


.address 0x40D950
00044252: sub sub_40d950()
.address 0x40D950
00007424: 
.address 0x40D950
0000742b: #1099 := RBX
.address 0x40D950
0000742e: RSP := RSP - 8
.address 0x40D950
00007431: mem := mem with [RSP, el]:u64 <- #1099
.address 0x40D951
00007438: RBX := RDI
.address 0x40D954
0000743f: RDI := RSI
.address 0x40D957
00007446: RSI := mem[RBX + 0x10, el]:u64
.address 0x40D95B
00007450: #1100 := mem[RBX + 0x30, el]:u64
.address 0x40D95B
00007453: RSP := RSP - 8
.address 0x40D95B
00007456: mem := mem with [RSP, el]:u64 <- 0x40D95E
.address 0x40D95B
0000745a: call #1100 with return %0000745c

.address 0x40D95E
0000745c: 
.address 0x40D95E
00007467: #1101 := mem[RBX + 0x10, el]:u64 - RAX
.address 0x40D95E
0000746a: CF := mem[RBX + 0x10, el]:u64 < RAX
.address 0x40D95E
0000746d: OF := high:1[(mem[RBX + 0x10, el]:u64 ^ RAX) & (mem[RBX + 0x10, el]:u64 ^ #1101)]
.address 0x40D95E
00007470: AF := 0x10 = (0x10 & (#1101 ^ mem[RBX + 0x10, el]:u64 ^ RAX))
.address 0x40D95E
00007473: PF := ~low:1[let $1 = #1101 >> 4 ^ #1101 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D95E
00007476: SF := high:1[#1101]
.address 0x40D95E
00007479: ZF := 0 = #1101
.address 0x40D962
00007483: when CF | ZF goto %0000747d
00044abd: goto %00020eaf

.address 0x40D96D
0000747d: 
.address 0x40D96D
0000748f: RSP := RSP - 8
.address 0x40D96D
00007492: mem := mem with [RSP, el]:u64 <- 0x40D972
.address 0x40D96D
00007495: call @sub_4037e0 with return %00007497

.address 0x40D972
00007497: 
00044abe: call @sub_40d980 with noreturn

.address 0x40D964
00020eaf: 
.address 0x40D964
00020ebb: #4612 := RAX
.address 0x40D964
00020ebe: RAX := RAX << 4
.address 0x40D964
00020ec1: CF := low:1[#4612 >> 0x3C]
.address 0x40D964
00020ec4: SF := high:1[RAX]
.address 0x40D964
00020ec7: ZF := 0 = RAX
.address 0x40D964
00020eca: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D964
00020ecd: AF := unknown[bits]:u1
.address 0x40D964
00020ed0: OF := unknown[bits]:u1
.address 0x40D968
00020edf: #4614 := RAX
.address 0x40D968
00020ee2: #4615 := mem[RBX, el]:u64
.address 0x40D968
00020ee5: RAX := RAX + #4615
.address 0x40D968
00020ee8: CF := RAX < #4614
.address 0x40D968
00020eeb: OF := high:1[#4614] = high:1[#4615] & (high:1[#4614] | high:1[RAX]) & ~(
high:1[#4614] & high:1[RAX])
.address 0x40D968
00020eee: AF := 0x10 = (0x10 & (RAX ^ #4614 ^ #4615))
.address 0x40D968
00020ef1: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40D968
00020ef4: SF := high:1[RAX]
.address 0x40D968
00020ef7: ZF := 0 = RAX
.address 0x40D96B
00020eff: RBX := mem[RSP, el]:u64
.address 0x40D96B
00020f02: RSP := RSP + 8
.address 0x40D96C
00020f0b: #4617 := mem[RSP, el]:u64
.address 0x40D96C
00020f0e: RSP := RSP + 8
.address 0x40D96C
00020f12: call #4617 with noreturn


.address 0x40D980
00044255: sub sub_40d980()
.address 0x40D980
0000749d: 
.address 0x40D980
000074a4: #1103 := R14
.address 0x40D980
000074a7: RSP := RSP - 8
.address 0x40D980
000074aa: mem := mem with [RSP, el]:u64 <- #1103
.address 0x40D982
000074b3: #1104 := R13
.address 0x40D982
000074b6: RSP := RSP - 8
.address 0x40D982
000074b9: mem := mem with [RSP, el]:u64 <- #1104
.address 0x40D984
000074c0: R14 := RDX
.address 0x40D987
000074c9: #1105 := R12
.address 0x40D987
000074cc: RSP := RSP - 8
.address 0x40D987
000074cf: mem := mem with [RSP, el]:u64 <- #1105
.address 0x40D989
000074d8: #1106 := RBP
.address 0x40D989
000074db: RSP := RSP - 8
.address 0x40D989
000074de: mem := mem with [RSP, el]:u64 <- #1106
.address 0x40D98A
000074e5: R12 := RDI
.address 0x40D98D
000074ee: #1107 := RBX
.address 0x40D98D
000074f1: RSP := RSP - 8
.address 0x40D98D
000074f4: mem := mem with [RSP, el]:u64 <- #1107
.address 0x40D98E
000074fb: RBP := RSI
.address 0x40D991
00007502: R13 := pad:64[low:32[RCX]]
.address 0x40D994
0000750b: RSP := RSP - 8
.address 0x40D994
0000750e: mem := mem with [RSP, el]:u64 <- 0x40D999
.address 0x40D994
00007511: call @sub_40d950 with return %00007513

.address 0x40D999
00007513: 
.address 0x40D999
00007518: mem := mem with [R14, el]:u64 <- RAX
.address 0x40D99C
0000751f: RSI := mem[RAX, el]:u64
.address 0x40D99F
0000752c: #1108 := RSI
.address 0x40D99F
0000752f: OF := 0
.address 0x40D99F
00007532: CF := 0
.address 0x40D99F
00007535: AF := unknown[bits]:u1
.address 0x40D99F
00007538: PF := ~low:1[let $1 = #1108 >> 4 ^ #1108 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D99F
0000753b: SF := high:1[#1108]
.address 0x40D99F
0000753e: ZF := 0 = #1108
.address 0x40D9A2
00007548: when ZF goto %00007542
00044abf: goto %00020b6a

.address 0x40D9A8
00020b6a: 
.address 0x40D9A8
00020b75: #4588 := RSI - RBP
.address 0x40D9A8
00020b78: CF := RSI < RBP
.address 0x40D9A8
00020b7b: OF := high:1[(RSI ^ RBP) & (RSI ^ #4588)]
.address 0x40D9A8
00020b7e: AF := 0x10 = (0x10 & (#4588 ^ RSI ^ RBP))
.address 0x40D9A8
00020b81: PF := ~low:1[let $1 = #4588 >> 4 ^ #4588 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D9A8
00020b84: SF := high:1[#4588]
.address 0x40D9A8
00020b87: ZF := 0 = #4588
.address 0x40D9AB
00020b8e: RBX := RAX
.address 0x40D9AE
00020b98: when ZF goto %00020b92
00044ac0: goto %00020ce0

.address 0x40D9B4
00020ce0: 
.address 0x40D9B4
00020ce5: RDI := RBP
.address 0x40D9B7
00020cef: #4596 := mem[R12 + 0x38, el]:u64
.address 0x40D9B7
00020cf2: RSP := RSP - 8
.address 0x40D9B7
00020cf5: mem := mem with [RSP, el]:u64 <- 0x40D9BC
.address 0x40D9B7
00020cf9: call #4596 with return %00020cfb

.address 0x40D9BC
00020cfb: 
.address 0x40D9BC
00020d06: #4597 := low:8[RAX]
.address 0x40D9BC
00020d09: OF := 0
.address 0x40D9BC
00020d0c: CF := 0
.address 0x40D9BC
00020d0f: AF := unknown[bits]:u1
.address 0x40D9BC
00020d12: PF := ~low:1[let $1 = #4597 >> 4 ^ #4597 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D9BC
00020d15: SF := high:1[#4597]
.address 0x40D9BC
00020d18: ZF := 0 = #4597
.address 0x40D9BE
00020d21: when ~ZF goto %00020c1a
00044ac1: goto %00020d27

.address 0x40DA40
00020c1a: 
.address 0x40DA40
00020c1f: RSI := mem[RBX, el]:u64
00044ac2: goto %00020b92

.address 0x40DA43
00020b92: 
.address 0x40DA43
00020ba8: #4590 := low:8[R13]
.address 0x40DA43
00020bab: OF := 0
.address 0x40DA43
00020bae: CF := 0
.address 0x40DA43
00020bb1: AF := unknown[bits]:u1
.address 0x40DA43
00020bb4: PF := ~low:1[let $1 = #4590 >> 4 ^ #4590 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DA43
00020bb7: SF := high:1[#4590]
.address 0x40DA43
00020bba: ZF := 0 = #4590
.address 0x40DA46
00020bc4: when ZF goto %00020bbe
00044ac3: goto %00020c21

.address 0x40DA48
00020c21: 
.address 0x40DA48
00020c26: RAX := mem[RBX + 8, el]:u64
.address 0x40DA4C
00020c33: #4593 := RAX
.address 0x40DA4C
00020c36: OF := 0
.address 0x40DA4C
00020c39: CF := 0
.address 0x40DA4C
00020c3c: AF := unknown[bits]:u1
.address 0x40DA4C
00020c3f: PF := ~low:1[let $1 = #4593 >> 4 ^ #4593 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DA4C
00020c42: SF := high:1[#4593]
.address 0x40DA4C
00020c45: ZF := 0 = #4593
.address 0x40DA4F
00020c4f: when ZF goto %00020c49
00044ac4: goto %00020c65

.address 0x40DA80
00020c49: 
.address 0x40DA80
00020c59: mem := mem with [RBX, el]:u64 <- 0
.address 0x40DA87
00020c60: goto %00020bbe

.address 0x40DA51
00020c65: 
.address 0x40DA51
00020c6a: YMM0 := extract:255:128[YMM0].pad:128[mem[RAX, el]:u128]
.address 0x40DA55
00020c71: mem := mem with [RBX, el]:u128 <- low:128[YMM0]
.address 0x40DA58
00020c78: mem := mem with [RAX, el]:u64 <- 0
.address 0x40DA5F
00020c7f: RDX := mem[R12 + 0x48, el]:u64
.address 0x40DA64
00020c86: mem := mem with [RAX + 8, el]:u64 <- RDX
.address 0x40DA68
00020c8d: mem := mem with [R12 + 0x48, el]:u64 <- RAX
.address 0x40DA6D
00020c94: RAX := RSI
.address 0x40DA70
00020c9c: RBX := mem[RSP, el]:u64
.address 0x40DA70
00020c9f: RSP := RSP + 8
.address 0x40DA71
00020ca7: RBP := mem[RSP, el]:u64
.address 0x40DA71
00020caa: RSP := RSP + 8
.address 0x40DA72
00020cb2: R12 := mem[RSP, el]:u64
.address 0x40DA72
00020cb5: RSP := RSP + 8
.address 0x40DA74
00020cbd: R13 := mem[RSP, el]:u64
.address 0x40DA74
00020cc0: RSP := RSP + 8
.address 0x40DA76
00020cc8: R14 := mem[RSP, el]:u64
.address 0x40DA76
00020ccb: RSP := RSP + 8
.address 0x40DA78
00020cd4: #4595 := mem[RSP, el]:u64
.address 0x40DA78
00020cd7: RSP := RSP + 8
.address 0x40DA78
00020cdb: call #4595 with noreturn

.address 0x40D9C4
00020d27: 
.address 0x40D9C4
00020d2c: RAX := mem[RBX + 8, el]:u64
.address 0x40D9C8
00020d39: #4599 := RAX
.address 0x40D9C8
00020d3c: OF := 0
.address 0x40D9C8
00020d3f: CF := 0
.address 0x40D9C8
00020d42: AF := unknown[bits]:u1
.address 0x40D9C8
00020d45: PF := ~low:1[let $1 = #4599 >> 4 ^ #4599 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D9C8
00020d48: SF := high:1[#4599]
.address 0x40D9C8
00020d4b: ZF := 0 = #4599
.address 0x40D9CB
00020d54: when ZF goto %00007542
00044ac5: goto %00020d5a

.address 0x40D9D1
00020d5a: 
.address 0x40D9D1
00020d5f: RSI := mem[RAX, el]:u64
.address 0x40D9D4
00020d6c: #4601 := RBP - RSI
.address 0x40D9D4
00020d6f: CF := RBP < RSI
.address 0x40D9D4
00020d72: OF := high:1[(RBP ^ RSI) & (RBP ^ #4601)]
.address 0x40D9D4
00020d75: AF := 0x10 = (0x10 & (#4601 ^ RBP ^ RSI))
.address 0x40D9D4
00020d78: PF := ~low:1[let $1 = #4601 >> 4 ^ #4601 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D9D4
00020d7b: SF := high:1[#4601]
.address 0x40D9D4
00020d7e: ZF := 0 = #4601
.address 0x40D9D7
00020d88: when ~ZF goto %00020d82
00044ac6: goto %00020ea5

.address 0x40D9F9
00020d82: 
.address 0x40D9F9
00020d92: RDI := RBP
.address 0x40D9FC
00020d9c: #4603 := mem[R12 + 0x38, el]:u64
.address 0x40D9FC
00020d9f: RSP := RSP - 8
.address 0x40D9FC
00020da2: mem := mem with [RSP, el]:u64 <- 0x40DA01
.address 0x40D9FC
00020da6: call #4603 with return %00020da8

.address 0x40DA01
00020da8: 
.address 0x40DA01
00020db3: #4604 := low:8[RAX]
.address 0x40DA01
00020db6: OF := 0
.address 0x40DA01
00020db9: CF := 0
.address 0x40DA01
00020dbc: AF := unknown[bits]:u1
.address 0x40DA01
00020dbf: PF := ~low:1[let $1 = #4604 >> 4 ^ #4604 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DA01
00020dc2: SF := high:1[#4604]
.address 0x40DA01
00020dc5: ZF := 0 = #4604
.address 0x40DA03
00020dcf: when ZF goto %00020dc9
00044ac7: goto %00020e97

.address 0x40DA05
00020e97: 
.address 0x40DA05
00020e9c: RAX := mem[RBX + 8, el]:u64
.address 0x40DA09
00020ea3: RSI := mem[RAX, el]:u64
00044ac8: goto %00020e36

.address 0x40D9E0
00020dc9: 
.address 0x40D9E0
00020dd9: RBX := mem[RBX + 8, el]:u64
.address 0x40D9E4
00020de0: RAX := mem[RBX + 8, el]:u64
.address 0x40D9E8
00020ded: #4606 := RAX
.address 0x40D9E8
00020df0: OF := 0
.address 0x40D9E8
00020df3: CF := 0
.address 0x40D9E8
00020df6: AF := unknown[bits]:u1
.address 0x40D9E8
00020df9: PF := ~low:1[let $1 = #4606 >> 4 ^ #4606 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D9E8
00020dfc: SF := high:1[#4606]
.address 0x40D9E8
00020dff: ZF := 0 = #4606
.address 0x40D9EB
00020e08: when ZF goto %00007542
00044ac9: goto %00020e0e

.address 0x40DA90
00007542: 
.address 0x40DA90
00007558: RSI := 0
.address 0x40DA90
0000755b: AF := unknown[bits]:u1
.address 0x40DA90
0000755e: ZF := 1
.address 0x40DA90
00007561: PF := 1
.address 0x40DA90
00007564: OF := 0
.address 0x40DA90
00007567: CF := 0
.address 0x40DA90
0000756a: SF := 0
.address 0x40DA92
00007572: RBX := mem[RSP, el]:u64
.address 0x40DA92
00007575: RSP := RSP + 8
.address 0x40DA93
0000757c: RAX := RSI
.address 0x40DA96
00007584: RBP := mem[RSP, el]:u64
.address 0x40DA96
00007587: RSP := RSP + 8
.address 0x40DA97
0000758f: R12 := mem[RSP, el]:u64
.address 0x40DA97
00007592: RSP := RSP + 8
.address 0x40DA99
0000759a: R13 := mem[RSP, el]:u64
.address 0x40DA99
0000759d: RSP := RSP + 8
.address 0x40DA9B
000075a5: R14 := mem[RSP, el]:u64
.address 0x40DA9B
000075a8: RSP := RSP + 8
.address 0x40DA9D
000075b1: #1110 := mem[RSP, el]:u64
.address 0x40DA9D
000075b4: RSP := RSP + 8
.address 0x40DA9D
000075b8: call #1110 with noreturn

.address 0x40D9F1
00020e0e: 
.address 0x40D9F1
00020e13: RSI := mem[RAX, el]:u64
.address 0x40D9F4
00020e20: #4608 := RSI - RBP
.address 0x40D9F4
00020e23: CF := RSI < RBP
.address 0x40D9F4
00020e26: OF := high:1[(RSI ^ RBP) & (RSI ^ #4608)]
.address 0x40D9F4
00020e29: AF := 0x10 = (0x10 & (#4608 ^ RSI ^ RBP))
.address 0x40D9F4
00020e2c: PF := ~low:1[let $1 = #4608 >> 4 ^ #4608 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40D9F4
00020e2f: SF := high:1[#4608]
.address 0x40D9F4
00020e32: ZF := 0 = #4608
.address 0x40D9F7
00020e3c: when ZF goto %00020e36
00044aca: goto %00020d82

.address 0x40D9D9
00020ea5: 
.address 0x40D9D9
00020eaa: goto %00020e36

.address 0x40DA0C
00020e36: 
.address 0x40DA0C
00020e4c: #4610 := low:8[R13]
.address 0x40DA0C
00020e4f: OF := 0
.address 0x40DA0C
00020e52: CF := 0
.address 0x40DA0C
00020e55: AF := unknown[bits]:u1
.address 0x40DA0C
00020e58: PF := ~low:1[let $1 = #4610 >> 4 ^ #4610 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DA0C
00020e5b: SF := high:1[#4610]
.address 0x40DA0C
00020e5e: ZF := 0 = #4610
.address 0x40DA0F
00020e67: when ZF goto %00020bbe
00044acb: goto %00020e6d

.address 0x40DA11
00020e6d: 
.address 0x40DA11
00020e72: RDX := mem[RAX + 8, el]:u64
.address 0x40DA15
00020e79: mem := mem with [RBX + 8, el]:u64 <- RDX
.address 0x40DA19
00020e80: mem := mem with [RAX, el]:u64 <- 0
.address 0x40DA20
00020e87: RDX := mem[R12 + 0x48, el]:u64
.address 0x40DA25
00020e8e: mem := mem with [RAX + 8, el]:u64 <- RDX
.address 0x40DA29
00020e95: mem := mem with [R12 + 0x48, el]:u64 <- RAX
00044acc: goto %00020bbe

.address 0x40DA2E
00020bbe: 
.address 0x40DA2E
00020bcf: RBX := mem[RSP, el]:u64
.address 0x40DA2E
00020bd2: RSP := RSP + 8
.address 0x40DA2F
00020bd9: RAX := RSI
.address 0x40DA32
00020be1: RBP := mem[RSP, el]:u64
.address 0x40DA32
00020be4: RSP := RSP + 8
.address 0x40DA33
00020bec: R12 := mem[RSP, el]:u64
.address 0x40DA33
00020bef: RSP := RSP + 8
.address 0x40DA35
00020bf7: R13 := mem[RSP, el]:u64
.address 0x40DA35
00020bfa: RSP := RSP + 8
.address 0x40DA37
00020c02: R14 := mem[RSP, el]:u64
.address 0x40DA37
00020c05: RSP := RSP + 8
.address 0x40DA39
00020c0e: #4592 := mem[RSP, el]:u64
.address 0x40DA39
00020c11: RSP := RSP + 8
.address 0x40DA39
00020c15: call #4592 with noreturn


.address 0x40DAA0
00044264: sub sub_40daa0()
.address 0x40DAA0
000075bd: 
.address 0x40DAA0
000075c2: RDX := mem[RDI, el]:u64
.address 0x40DAA3
000075c9: RCX := 0x41A3C0
.address 0x40DAAA
000075d0: RAX := 1
.address 0x40DAAF
000075dd: #1111 := RDX - RCX
.address 0x40DAAF
000075e0: CF := RDX < RCX
.address 0x40DAAF
000075e3: OF := high:1[(RDX ^ RCX) & (RDX ^ #1111)]
.address 0x40DAAF
000075e6: AF := 0x10 = (0x10 & (#1111 ^ RDX ^ RCX))
.address 0x40DAAF
000075e9: PF := ~low:1[let $1 = #1111 >> 4 ^ #1111 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DAAF
000075ec: SF := high:1[#1111]
.address 0x40DAAF
000075ef: ZF := 0 = #1111
.address 0x40DAB2
000075f9: when ZF goto %000075f3
00044acd: goto %00020ab4

.address 0x40DAB4
00020ab4: 
.address 0x40DAB4
00020ab9: YMM0 := extract:255:128[YMM0].pad:128[mem[RDX + 8, el]:u32]
.address 0x40DAC0
00020ac4: when CF | ZF goto %00020abe
00044ace: goto %00020aef

.address 0x40DAC2
00020aef: 
.address 0x40DAC2
00020af4: YMM1 := extract:255:128[YMM1].pad:128[mem[0x41A3D8, el]:u32]
.address 0x40DACD
00020afe: when CF | ZF goto %00020abe
00044acf: goto %00020b04

.address 0x40DACF
00020b04: 
.address 0x40DACF
00020b09: YMM1 := extract:255:128[YMM1].pad:128[mem[RDX + 0xC, el]:u32]
.address 0x40DADB
00020b13: when CF | ZF goto %00020abe
00044ad0: goto %00020b19

.address 0x40DADD
00020b19: 
.address 0x40DADD
00020b1e: YMM1 := extract:255:128[YMM1].pad:128[mem[RDX, el]:u32]
.address 0x40DAE8
00020b28: when CF goto %00020abe
00044ad1: goto %00020b2e

.address 0x40DAEA
00020b2e: 
.address 0x40DAF2
00020b34: YMM2 := extract:255:128[YMM2].pad:128[mem[RDX + 4, el]:u32]
.address 0x40DAFA
00020b3e: when CF | ZF goto %00020abe
00044ad2: goto %00020b44

.address 0x40DAFC
00020b44: 
.address 0x40DAFC
00020b49: YMM3 := extract:255:128[YMM3].pad:128[mem[0x41A3E4, el]:u32]
.address 0x40DB07
00020b53: when CF goto %00020abe
00044ad3: goto %00020b59

.address 0x40DB09
00020b59: 
.address 0x40DB0C
00020b61: when ~(CF | ZF) goto %000075f3
00044ad4: goto %00020b67

.address 0x40DB0E
00020b67: 
00044ad5: goto %00020abe

.address 0x40DB10
00020abe: 
.address 0x40DB10
00020ace: mem := mem with [RDI, el]:u64 <- RCX
.address 0x40DB13
00020adb: RAX := 0
.address 0x40DB13
00020ade: AF := unknown[bits]:u1
.address 0x40DB13
00020ae1: ZF := 1
.address 0x40DB13
00020ae4: PF := 1
.address 0x40DB13
00020ae7: OF := 0
.address 0x40DB13
00020aea: CF := 0
.address 0x40DB13
00020aed: SF := 0
00044ad6: goto %000075f3

.address 0x40DB15
000075f3: 
.address 0x40DB15
00007605: #1113 := mem[RSP, el]:u64
.address 0x40DB15
00007608: RSP := RSP + 8
.address 0x40DB15
0000760c: call #1113 with noreturn


.address 0x40DB20
0004426f: sub sub_40db20()
.address 0x40DB20
00007611: 
.address 0x40DB20
00007618: #1114 := R15
.address 0x40DB20
0000761b: RSP := RSP - 8
.address 0x40DB20
0000761e: mem := mem with [RSP, el]:u64 <- #1114
.address 0x40DB22
00007627: #1115 := R14
.address 0x40DB22
0000762a: RSP := RSP - 8
.address 0x40DB22
0000762d: mem := mem with [RSP, el]:u64 <- #1115
.address 0x40DB24
00007636: #1116 := R13
.address 0x40DB24
00007639: RSP := RSP - 8
.address 0x40DB24
0000763c: mem := mem with [RSP, el]:u64 <- #1116
.address 0x40DB26
00007645: #1117 := R12
.address 0x40DB26
00007648: RSP := RSP - 8
.address 0x40DB26
0000764b: mem := mem with [RSP, el]:u64 <- #1117
.address 0x40DB28
00007654: #1118 := RBP
.address 0x40DB28
00007657: RSP := RSP - 8
.address 0x40DB28
0000765a: mem := mem with [RSP, el]:u64 <- #1118
.address 0x40DB29
00007663: #1119 := RBX
.address 0x40DB29
00007666: RSP := RSP - 8
.address 0x40DB29
00007669: mem := mem with [RSP, el]:u64 <- #1119
.address 0x40DB2A
00007677: #1120 := RSP
.address 0x40DB2A
0000767a: RSP := RSP - 8
.address 0x40DB2A
0000767d: CF := #1120 < 8
.address 0x40DB2A
00007680: OF := high:1[(#1120 ^ 8) & (#1120 ^ RSP)]
.address 0x40DB2A
00007683: AF := 0x10 = (0x10 & (RSP ^ #1120 ^ 8))
.address 0x40DB2A
00007686: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40DB2A
00007689: SF := high:1[RSP]
.address 0x40DB2A
0000768c: ZF := 0 = RSP
.address 0x40DB2E
00007693: R12 := mem[RSI, el]:u64
.address 0x40DB31
000076a0: #1123 := R12 - mem[RSI + 8, el]:u64
.address 0x40DB31
000076a3: CF := R12 < mem[RSI + 8, el]:u64
.address 0x40DB31
000076a6: OF := high:1[(R12 ^ mem[RSI + 8, el]:u64) & (R12 ^ #1123)]
.address 0x40DB31
000076a9: AF := 0x10 = (0x10 & (#1123 ^ R12 ^ mem[RSI + 8, el]:u64))
.address 0x40DB31
000076ac: PF := ~low:1[let $1 = #1123 >> 4 ^ #1123 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DB31
000076af: SF := high:1[#1123]
.address 0x40DB31
000076b2: ZF := 0 = #1123
.address 0x40DB35
000076bc: when ~CF goto %000076b6
00044ad7: goto %00020a9c

.address 0x40DB3B
00020a9c: 
.address 0x40DB3B
00020aa1: RBP := RDI
.address 0x40DB3E
00020aa8: R13 := RSI
.address 0x40DB41
00020aaf: R14 := pad:64[low:32[RDX]]
00044ad8: goto %000077df

.address 0x40DB48
000077df: 
.address 0x40DB48
000077ef: R15 := mem[R12, el]:u64
.address 0x40DB4C
000077fc: #1140 := R15
.address 0x40DB4C
000077ff: OF := 0
.address 0x40DB4C
00007802: CF := 0
.address 0x40DB4C
00007805: AF := unknown[bits]:u1
.address 0x40DB4C
00007808: PF := ~low:1[let $1 = #1140 >> 4 ^ #1140 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DB4C
0000780b: SF := high:1[#1140]
.address 0x40DB4C
0000780e: ZF := 0 = #1140
.address 0x40DB4F
00007817: when ZF goto %0000779b
00044ad9: goto %0000781d

.address 0x40DB55
0000781d: 
.address 0x40DB55
00007822: RBX := mem[R12 + 8, el]:u64
.address 0x40DB5A
0000782f: #1142 := RBX
.address 0x40DB5A
00007832: OF := 0
.address 0x40DB5A
00007835: CF := 0
.address 0x40DB5A
00007838: AF := unknown[bits]:u1
.address 0x40DB5A
0000783b: PF := ~low:1[let $1 = #1142 >> 4 ^ #1142 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DB5A
0000783e: SF := high:1[#1142]
.address 0x40DB5A
00007841: ZF := 0 = #1142
.address 0x40DB5D
0000784b: when ~ZF goto %00007845
00044ada: goto %00020a8f

.address 0x40DB7C
00007845: 
.address 0x40DB7C
00007855: R15 := mem[RBX, el]:u64
.address 0x40DB7F
0000785c: RDI := RBP
.address 0x40DB82
00007863: RSI := R15
.address 0x40DB85
0000786c: RSP := RSP - 8
.address 0x40DB85
0000786f: mem := mem with [RSP, el]:u64 <- 0x40DB8A
.address 0x40DB85
00007872: call @sub_40d950 with return %00007874

.address 0x40DB8A
00007874: 
.address 0x40DB8A
0000787f: #1144 := mem[RAX, el]:u64
.address 0x40DB8A
00007882: CF := mem[RAX, el]:u64 < 0
.address 0x40DB8A
00007885: OF := high:1[mem[RAX, el]:u64 & (mem[RAX, el]:u64 ^ #1144)]
.address 0x40DB8A
00007888: AF := 0x10 = (0x10 & (#1144 ^ mem[RAX, el]:u64))
.address 0x40DB8A
0000788b: PF := ~low:1[let $1 = #1144 >> 4 ^ #1144 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DB8A
0000788e: SF := high:1[#1144]
.address 0x40DB8A
00007891: ZF := 0 = #1144
.address 0x40DB8E
00007898: RDX := mem[RBX + 8, el]:u64
.address 0x40DB92
000078a2: when ~ZF goto %0000789c
00044adb: goto %00020a16

.address 0x40DB94
00020a16: 
.address 0x40DB94
00020a1b: mem := mem with [RAX, el]:u64 <- R15
.address 0x40DB97
00020a29: #4583 := mem[RBP + 0x18, el]:u64
.address 0x40DB97
00020a2c: mem := mem with [RBP + 0x18, el]:u64 <- mem[RBP + 0x18, el]:u64 + 1
.address 0x40DB97
00020a2f: CF := mem[RBP + 0x18, el]:u64 < #4583
.address 0x40DB97
00020a32: OF := ~high:1[#4583] & (high:1[#4583] | high:1[mem[RBP + 0x18, el]:u64]) & ~(
high:1[#4583] & high:1[mem[RBP + 0x18, el]:u64])
.address 0x40DB97
00020a35: AF := 0x10 = (0x10 & (mem[RBP + 0x18, el]:u64 ^ #4583 ^ 1))
.address 0x40DB97
00020a38: PF := ~low:1[let $1 = mem[RBP + 0x18, el]:u64 >> 4 ^ mem[RBP + 0x18, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DB97
00020a3b: SF := high:1[mem[RBP + 0x18, el]:u64]
.address 0x40DB97
00020a3e: ZF := 0 = mem[RBP + 0x18, el]:u64
.address 0x40DB9C
00020a4b: #4586 := RDX
.address 0x40DB9C
00020a4e: OF := 0
.address 0x40DB9C
00020a51: CF := 0
.address 0x40DB9C
00020a54: AF := unknown[bits]:u1
.address 0x40DB9C
00020a57: PF := ~low:1[let $1 = #4586 >> 4 ^ #4586 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DB9C
00020a5a: SF := high:1[#4586]
.address 0x40DB9C
00020a5d: ZF := 0 = #4586
.address 0x40DB9F
00020a64: mem := mem with [RBX, el]:u64 <- 0
.address 0x40DBA6
00020a6b: RAX := mem[RBP + 0x48, el]:u64
.address 0x40DBAA
00020a72: mem := mem with [RBX + 8, el]:u64 <- RAX
.address 0x40DBAE
00020a79: mem := mem with [RBP + 0x48, el]:u64 <- RBX
.address 0x40DBB2
00020a80: RBX := RDX
.address 0x40DBB5
00020a89: when ~ZF goto %00007845
00044adc: goto %000078e4

.address 0x40DB68
0000789c: 
.address 0x40DB68
000078ac: RCX := mem[RAX + 8, el]:u64
.address 0x40DB6C
000078b9: #1146 := RDX
.address 0x40DB6C
000078bc: OF := 0
.address 0x40DB6C
000078bf: CF := 0
.address 0x40DB6C
000078c2: AF := unknown[bits]:u1
.address 0x40DB6C
000078c5: PF := ~low:1[let $1 = #1146 >> 4 ^ #1146 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DB6C
000078c8: SF := high:1[#1146]
.address 0x40DB6C
000078cb: ZF := 0 = #1146
.address 0x40DB6F
000078d2: mem := mem with [RBX + 8, el]:u64 <- RCX
.address 0x40DB73
000078d9: mem := mem with [RAX + 8, el]:u64 <- RBX
.address 0x40DB77
000078e0: RBX := RDX
.address 0x40DB7A
000078ea: when ZF goto %000078e4
00044add: goto %00007845

.address 0x40DBB7
000078e4: 
.address 0x40DBB7
000078f4: R15 := mem[R12, el]:u64
00044ade: goto %000078f6

.address 0x40DB5F
00020a8f: 
.address 0x40DB5F
00020a94: goto %000078f6

.address 0x40DBBB
000078f6: 
.address 0x40DBBB
00007901: #1148 := low:8[R14]
.address 0x40DBBB
00007904: OF := 0
.address 0x40DBBB
00007907: CF := 0
.address 0x40DBBB
0000790a: AF := unknown[bits]:u1
.address 0x40DBBB
0000790d: PF := ~low:1[let $1 = #1148 >> 4 ^ #1148 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DBBB
00007910: SF := high:1[#1148]
.address 0x40DBBB
00007913: ZF := 0 = #1148
.address 0x40DBBE
0000791a: mem := mem with [R12 + 8, el]:u64 <- 0
.address 0x40DBC7
00007923: when ~ZF goto %0000779b
00044adf: goto %00007929

.address 0x40DBC9
00007929: 
.address 0x40DBC9
0000792e: RSI := R15
.address 0x40DBCC
00007935: RDI := RBP
.address 0x40DBCF
0000793e: RSP := RSP - 8
.address 0x40DBCF
00007941: mem := mem with [RSP, el]:u64 <- 0x40DBD4
.address 0x40DBCF
00007944: call @sub_40d950 with return %00007946

.address 0x40DBD4
00007946: 
.address 0x40DBD4
00007951: #1150 := mem[RAX, el]:u64
.address 0x40DBD4
00007954: CF := mem[RAX, el]:u64 < 0
.address 0x40DBD4
00007957: OF := high:1[mem[RAX, el]:u64 & (mem[RAX, el]:u64 ^ #1150)]
.address 0x40DBD4
0000795a: AF := 0x10 = (0x10 & (#1150 ^ mem[RAX, el]:u64))
.address 0x40DBD4
0000795d: PF := ~low:1[let $1 = #1150 >> 4 ^ #1150 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DBD4
00007960: SF := high:1[#1150]
.address 0x40DBD4
00007963: ZF := 0 = #1150
.address 0x40DBD8
0000796a: RBX := RAX
.address 0x40DBDB
00007973: when ZF goto %00007740
00044ae0: goto %00007979

.address 0x40DC30
00007740: 
.address 0x40DC30
00007745: mem := mem with [RAX, el]:u64 <- R15
.address 0x40DC33
00007753: #1129 := mem[RBP + 0x18, el]:u64
.address 0x40DC33
00007756: mem := mem with [RBP + 0x18, el]:u64 <- mem[RBP + 0x18, el]:u64 + 1
.address 0x40DC33
00007759: CF := mem[RBP + 0x18, el]:u64 < #1129
.address 0x40DC33
0000775c: OF := ~high:1[#1129] & (high:1[#1129] | high:1[mem[RBP + 0x18, el]:u64]) & ~(
high:1[#1129] & high:1[mem[RBP + 0x18, el]:u64])
.address 0x40DC33
0000775f: AF := 0x10 = (0x10 & (mem[RBP + 0x18, el]:u64 ^ #1129 ^ 1))
.address 0x40DC33
00007762: PF := ~low:1[let $1 = mem[RBP + 0x18, el]:u64 >> 4 ^ mem[RBP + 0x18, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DC33
00007765: SF := high:1[mem[RBP + 0x18, el]:u64]
.address 0x40DC33
00007768: ZF := 0 = mem[RBP + 0x18, el]:u64
.address 0x40DC38
00007770: goto %0000776c

.address 0x40DBDD
00007979: 
.address 0x40DBDD
0000797e: RAX := mem[RBP + 0x48, el]:u64
.address 0x40DBE1
0000798b: #1152 := RAX
.address 0x40DBE1
0000798e: OF := 0
.address 0x40DBE1
00007991: CF := 0
.address 0x40DBE1
00007994: AF := unknown[bits]:u1
.address 0x40DBE1
00007997: PF := ~low:1[let $1 = #1152 >> 4 ^ #1152 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DBE1
0000799a: SF := high:1[#1152]
.address 0x40DBE1
0000799d: ZF := 0 = #1152
.address 0x40DBE4
000079a7: when ZF goto %000079a1
00044ae1: goto %00020a08

.address 0x40DC40
000079a1: 
.address 0x40DC40
000079b1: RDI := 0x10
.address 0x40DC45
000079ba: RSP := RSP - 8
.address 0x40DC45
000079bd: mem := mem with [RSP, el]:u64 <- 0x40DC4A
.address 0x40DC45
000079c0: call @sub_403e78 with return %000079c2

.address 0x40DC4A
000079c2: 
.address 0x40DC4A
000079cd: #1154 := RAX
.address 0x40DC4A
000079d0: OF := 0
.address 0x40DC4A
000079d3: CF := 0
.address 0x40DC4A
000079d6: AF := unknown[bits]:u1
.address 0x40DC4A
000079d9: PF := ~low:1[let $1 = #1154 >> 4 ^ #1154 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DC4A
000079dc: SF := high:1[#1154]
.address 0x40DC4A
000079df: ZF := 0 = #1154
.address 0x40DC4D
000079e9: when ~ZF goto %000079e3
00044ae2: goto %00007a0a

.address 0x40DC4F
00007a0a: 
.address 0x40DC4F
00007a16: #1156 := RSP
.address 0x40DC4F
00007a19: RSP := RSP + 8
.address 0x40DC4F
00007a1c: CF := RSP < #1156
.address 0x40DC4F
00007a1f: OF := ~high:1[#1156] & (high:1[#1156] | high:1[RSP]) & ~(high:1[#1156] & high:1[RSP])
.address 0x40DC4F
00007a22: AF := 0x10 = (0x10 & (RSP ^ #1156 ^ 8))
.address 0x40DC4F
00007a25: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40DC4F
00007a28: SF := high:1[RSP]
.address 0x40DC4F
00007a2b: ZF := 0 = RSP
.address 0x40DC53
00007a38: RAX := 0
.address 0x40DC53
00007a3b: AF := unknown[bits]:u1
.address 0x40DC53
00007a3e: ZF := 1
.address 0x40DC53
00007a41: PF := 1
.address 0x40DC53
00007a44: OF := 0
.address 0x40DC53
00007a47: CF := 0
.address 0x40DC53
00007a4a: SF := 0
.address 0x40DC55
00007a52: RBX := mem[RSP, el]:u64
.address 0x40DC55
00007a55: RSP := RSP + 8
.address 0x40DC56
00007a5d: RBP := mem[RSP, el]:u64
.address 0x40DC56
00007a60: RSP := RSP + 8
.address 0x40DC57
00007a68: R12 := mem[RSP, el]:u64
.address 0x40DC57
00007a6b: RSP := RSP + 8
.address 0x40DC59
00007a73: R13 := mem[RSP, el]:u64
.address 0x40DC59
00007a76: RSP := RSP + 8
.address 0x40DC5B
00007a7e: R14 := mem[RSP, el]:u64
.address 0x40DC5B
00007a81: RSP := RSP + 8
.address 0x40DC5D
00007a89: R15 := mem[RSP, el]:u64
.address 0x40DC5D
00007a8c: RSP := RSP + 8
.address 0x40DC5F
00007a95: #1159 := mem[RSP, el]:u64
.address 0x40DC5F
00007a98: RSP := RSP + 8
.address 0x40DC5F
00007a9c: call #1159 with noreturn

.address 0x40DBE6
00020a08: 
.address 0x40DBE6
00020a0d: RDX := mem[RAX + 8, el]:u64
.address 0x40DBEA
00020a14: mem := mem with [RBP + 0x48, el]:u64 <- RDX
00044ae3: goto %000079e3

.address 0x40DBEE
000079e3: 
.address 0x40DBEE
000079f3: RDX := mem[RBX + 8, el]:u64
.address 0x40DBF2
000079fa: mem := mem with [RAX, el]:u64 <- R15
.address 0x40DBF5
00007a01: mem := mem with [RAX + 8, el]:u64 <- RDX
.address 0x40DBF9
00007a08: mem := mem with [RBX + 8, el]:u64 <- RAX
00044ae4: goto %0000776c

.address 0x40DBFD
0000776c: 
.address 0x40DBFD
00007776: mem := mem with [R12, el]:u64 <- 0
.address 0x40DC05
00007784: #1132 := mem[R13 + 0x18, el]:u64
.address 0x40DC05
00007787: mem := mem with [R13 + 0x18, el]:u64 <- mem[R13 + 0x18, el]:u64 - 1
.address 0x40DC05
0000778a: CF := #1132 < 1
.address 0x40DC05
0000778d: OF := high:1[(#1132 ^ 1) & (#1132 ^ mem[R13 + 0x18, el]:u64)]
.address 0x40DC05
00007790: AF := 0x10 = (0x10 & (mem[R13 + 0x18, el]:u64 ^ #1132 ^ 1))
.address 0x40DC05
00007793: PF := ~low:1[let $1 = mem[R13 + 0x18, el]:u64 >> 4 ^ mem[R13 + 0x18, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DC05
00007796: SF := high:1[mem[R13 + 0x18, el]:u64]
.address 0x40DC05
00007799: ZF := 0 = mem[R13 + 0x18, el]:u64
00044ae5: goto %0000779b

.address 0x40DC0A
0000779b: 
.address 0x40DC0A
000077a7: #1135 := R12
.address 0x40DC0A
000077aa: R12 := R12 + 0x10
.address 0x40DC0A
000077ad: CF := R12 < #1135
.address 0x40DC0A
000077b0: OF := ~high:1[#1135] & (high:1[#1135] | high:1[R12]) & ~(high:1[#1135] & high:1[R12])
.address 0x40DC0A
000077b3: AF := 0x10 = (0x10 & (R12 ^ #1135 ^ 0x10))
.address 0x40DC0A
000077b6: PF := ~low:1[let $1 = R12 >> 4 ^ R12 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40DC0A
000077b9: SF := high:1[R12]
.address 0x40DC0A
000077bc: ZF := 0 = R12
.address 0x40DC0E
000077c9: #1138 := mem[R13 + 8, el]:u64 - R12
.address 0x40DC0E
000077cc: CF := mem[R13 + 8, el]:u64 < R12
.address 0x40DC0E
000077cf: OF := high:1[(mem[R13 + 8, el]:u64 ^ R12) & (mem[R13 + 8, el]:u64 ^ #1138)]
.address 0x40DC0E
000077d2: AF := 0x10 = (0x10 & (#1138 ^ mem[R13 + 8, el]:u64 ^ R12))
.address 0x40DC0E
000077d5: PF := ~low:1[let $1 = #1138 >> 4 ^ #1138 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DC0E
000077d8: SF := high:1[#1138]
.address 0x40DC0E
000077db: ZF := 0 = #1138
.address 0x40DC12
000077e5: when ~(CF | ZF) goto %000077df
00044ae6: goto %000076b6

.address 0x40DC18
000076b6: 
.address 0x40DC18
000076cd: #1125 := RSP
.address 0x40DC18
000076d0: RSP := RSP + 8
.address 0x40DC18
000076d3: CF := RSP < #1125
.address 0x40DC18
000076d6: OF := ~high:1[#1125] & (high:1[#1125] | high:1[RSP]) & ~(high:1[#1125] & high:1[RSP])
.address 0x40DC18
000076d9: AF := 0x10 = (0x10 & (RSP ^ #1125 ^ 8))
.address 0x40DC18
000076dc: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40DC18
000076df: SF := high:1[RSP]
.address 0x40DC18
000076e2: ZF := 0 = RSP
.address 0x40DC1C
000076e9: RAX := 1
.address 0x40DC21
000076f1: RBX := mem[RSP, el]:u64
.address 0x40DC21
000076f4: RSP := RSP + 8
.address 0x40DC22
000076fc: RBP := mem[RSP, el]:u64
.address 0x40DC22
000076ff: RSP := RSP + 8
.address 0x40DC23
00007707: R12 := mem[RSP, el]:u64
.address 0x40DC23
0000770a: RSP := RSP + 8
.address 0x40DC25
00007712: R13 := mem[RSP, el]:u64
.address 0x40DC25
00007715: RSP := RSP + 8
.address 0x40DC27
0000771d: R14 := mem[RSP, el]:u64
.address 0x40DC27
00007720: RSP := RSP + 8
.address 0x40DC29
00007728: R15 := mem[RSP, el]:u64
.address 0x40DC29
0000772b: RSP := RSP + 8
.address 0x40DC2B
00007734: #1128 := mem[RSP, el]:u64
.address 0x40DC2B
00007737: RSP := RSP + 8
.address 0x40DC2B
0000773b: call #1128 with noreturn


.address 0x40DC80
00044280: sub sub_40dc80()
.address 0x40DC80
00007ad8: 
.address 0x40DC80
00007add: RAX := mem[RDI + 0x20, el]:u64
.address 0x40DC84
00007ae6: #1162 := mem[RSP, el]:u64
.address 0x40DC84
00007ae9: RSP := RSP + 8
.address 0x40DC84
00007aed: call #1162 with noreturn


.address 0x40DC90
00044281: sub sub_40dc90()
.address 0x40DC90
00007af5: 
.address 0x40DC90
00007afa: RSI := mem[RDI, el]:u64
.address 0x40DC93
00007b01: RDI := mem[RDI + 8, el]:u64
.address 0x40DC97
00007b0e: RAX := 0
.address 0x40DC97
00007b11: AF := unknown[bits]:u1
.address 0x40DC97
00007b14: ZF := 1
.address 0x40DC97
00007b17: PF := 1
.address 0x40DC97
00007b1a: OF := 0
.address 0x40DC97
00007b1d: CF := 0
.address 0x40DC97
00007b20: SF := 0
.address 0x40DC99
00007b2d: #1163 := RSI - RDI
.address 0x40DC99
00007b30: CF := RSI < RDI
.address 0x40DC99
00007b33: OF := high:1[(RSI ^ RDI) & (RSI ^ #1163)]
.address 0x40DC99
00007b36: AF := 0x10 = (0x10 & (#1163 ^ RSI ^ RDI))
.address 0x40DC99
00007b39: PF := ~low:1[let $1 = #1163 >> 4 ^ #1163 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DC99
00007b3c: SF := high:1[#1163]
.address 0x40DC99
00007b3f: ZF := 0 = #1163
.address 0x40DC9C
00007b49: when ~CF goto %00007b43
00044ae7: goto %000208c1

.address 0x40DCD7
00007b43: 
.address 0x40DCD7
00007b55: #1165 := mem[RSP, el]:u64
.address 0x40DCD7
00007b58: RSP := RSP + 8
.address 0x40DCD7
00007b5c: call #1165 with noreturn

.address 0x40DC9E
000208c1: 
00044ae8: goto %000208c4

.address 0x40DCA0
000208c4: 
.address 0x40DCA0
000208cf: #4566 := mem[RSI, el]:u64
.address 0x40DCA0
000208d2: CF := mem[RSI, el]:u64 < 0
.address 0x40DCA0
000208d5: OF := high:1[mem[RSI, el]:u64 & (mem[RSI, el]:u64 ^ #4566)]
.address 0x40DCA0
000208d8: AF := 0x10 = (0x10 & (#4566 ^ mem[RSI, el]:u64))
.address 0x40DCA0
000208db: PF := ~low:1[let $1 = #4566 >> 4 ^ #4566 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DCA0
000208de: SF := high:1[#4566]
.address 0x40DCA0
000208e1: ZF := 0 = #4566
.address 0x40DCA4
000208eb: when ZF goto %000208e5
00044ae9: goto %0002094f

.address 0x40DCA6
0002094f: 
.address 0x40DCA6
00020954: RDX := mem[RSI + 8, el]:u64
.address 0x40DCAA
0002095b: RCX := 1
.address 0x40DCAF
00020968: #4574 := RDX
.address 0x40DCAF
0002096b: OF := 0
.address 0x40DCAF
0002096e: CF := 0
.address 0x40DCAF
00020971: AF := unknown[bits]:u1
.address 0x40DCAF
00020974: PF := ~low:1[let $1 = #4574 >> 4 ^ #4574 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DCAF
00020977: SF := high:1[#4574]
.address 0x40DCAF
0002097a: ZF := 0 = #4574
.address 0x40DCB2
00020984: when ZF goto %0002097e
00044aea: goto %000209af

.address 0x40DCB4
000209af: 
00044aeb: goto %000209b2

.address 0x40DCB8
000209b2: 
.address 0x40DCB8
000209b7: RDX := mem[RDX + 8, el]:u64
.address 0x40DCBC
000209c5: #4578 := RCX
.address 0x40DCBC
000209c8: RCX := RCX + 1
.address 0x40DCBC
000209cb: CF := RCX < #4578
.address 0x40DCBC
000209ce: OF := ~high:1[#4578] & (high:1[#4578] | high:1[RCX]) & ~(high:1[#4578] & high:1[RCX])
.address 0x40DCBC
000209d1: AF := 0x10 = (0x10 & (RCX ^ #4578 ^ 1))
.address 0x40DCBC
000209d4: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40DCBC
000209d7: SF := high:1[RCX]
.address 0x40DCBC
000209da: ZF := 0 = RCX
.address 0x40DCC0
000209e7: #4581 := RDX
.address 0x40DCC0
000209ea: OF := 0
.address 0x40DCC0
000209ed: CF := 0
.address 0x40DCC0
000209f0: AF := unknown[bits]:u1
.address 0x40DCC0
000209f3: PF := ~low:1[let $1 = #4581 >> 4 ^ #4581 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DCC0
000209f6: SF := high:1[#4581]
.address 0x40DCC0
000209f9: ZF := 0 = #4581
.address 0x40DCC3
00020a02: when ~ZF goto %000209b2
00044aec: goto %0002097e

.address 0x40DCC5
0002097e: 
.address 0x40DCC5
00020994: #4576 := RAX - RCX
.address 0x40DCC5
00020997: CF := RAX < RCX
.address 0x40DCC5
0002099a: OF := high:1[(RAX ^ RCX) & (RAX ^ #4576)]
.address 0x40DCC5
0002099d: AF := 0x10 = (0x10 & (#4576 ^ RAX ^ RCX))
.address 0x40DCC5
000209a0: PF := ~low:1[let $1 = #4576 >> 4 ^ #4576 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DCC5
000209a3: SF := high:1[#4576]
.address 0x40DCC5
000209a6: ZF := 0 = #4576
.address 0x40DCC8
000209ad: RAX := if CF then RCX else RAX
00044aed: goto %000208e5

.address 0x40DCCC
000208e5: 
.address 0x40DCCC
000208fc: #4568 := RSI
.address 0x40DCCC
000208ff: RSI := RSI + 0x10
.address 0x40DCCC
00020902: CF := RSI < #4568
.address 0x40DCCC
00020905: OF := ~high:1[#4568] & (high:1[#4568] | high:1[RSI]) & ~(high:1[#4568] & high:1[RSI])
.address 0x40DCCC
00020908: AF := 0x10 = (0x10 & (RSI ^ #4568 ^ 0x10))
.address 0x40DCCC
0002090b: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40DCCC
0002090e: SF := high:1[RSI]
.address 0x40DCCC
00020911: ZF := 0 = RSI
.address 0x40DCD0
0002091e: #4571 := RSI - RDI
.address 0x40DCD0
00020921: CF := RSI < RDI
.address 0x40DCD0
00020924: OF := high:1[(RSI ^ RDI) & (RSI ^ #4571)]
.address 0x40DCD0
00020927: AF := 0x10 = (0x10 & (#4571 ^ RSI ^ RDI))
.address 0x40DCD0
0002092a: PF := ~low:1[let $1 = #4571 >> 4 ^ #4571 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DCD0
0002092d: SF := high:1[#4571]
.address 0x40DCD0
00020930: ZF := 0 = #4571
.address 0x40DCD3
00020939: when CF goto %000208c4
00044aee: goto %0002093f

.address 0x40DCD5
0002093f: 
.address 0x40DCD5
00020946: #4573 := mem[RSP, el]:u64
.address 0x40DCD5
00020949: RSP := RSP + 8
.address 0x40DCD5
0002094d: call #4573 with noreturn


.address 0x40DCE0
0004428a: sub sub_40dce0()
.address 0x40DCE0
00007b61: 
.address 0x40DCE0
00007b66: RCX := mem[RDI, el]:u64
.address 0x40DCE3
00007b6d: R8 := mem[RDI + 8, el]:u64
.address 0x40DCE7
00007b7a: RDX := 0
.address 0x40DCE7
00007b7d: AF := unknown[bits]:u1
.address 0x40DCE7
00007b80: ZF := 1
.address 0x40DCE7
00007b83: PF := 1
.address 0x40DCE7
00007b86: OF := 0
.address 0x40DCE7
00007b89: CF := 0
.address 0x40DCE7
00007b8c: SF := 0
.address 0x40DCE9
00007b99: RSI := 0
.address 0x40DCE9
00007b9c: AF := unknown[bits]:u1
.address 0x40DCE9
00007b9f: ZF := 1
.address 0x40DCE9
00007ba2: PF := 1
.address 0x40DCE9
00007ba5: OF := 0
.address 0x40DCE9
00007ba8: CF := 0
.address 0x40DCE9
00007bab: SF := 0
.address 0x40DCEB
00007bb8: #1166 := RCX - R8
.address 0x40DCEB
00007bbb: CF := RCX < R8
.address 0x40DCEB
00007bbe: OF := high:1[(RCX ^ R8) & (RCX ^ #1166)]
.address 0x40DCEB
00007bc1: AF := 0x10 = (0x10 & (#1166 ^ RCX ^ R8))
.address 0x40DCEB
00007bc4: PF := ~low:1[let $1 = #1166 >> 4 ^ #1166 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DCEB
00007bc7: SF := high:1[#1166]
.address 0x40DCEB
00007bca: ZF := 0 = #1166
.address 0x40DCEE
00007bd4: when ~CF goto %00007bce
00044aef: goto %00020774

.address 0x40DCF0
00020774: 
.address 0x40DCF0
0002077f: #4546 := mem[RCX, el]:u64
.address 0x40DCF0
00020782: CF := mem[RCX, el]:u64 < 0
.address 0x40DCF0
00020785: OF := high:1[mem[RCX, el]:u64 & (mem[RCX, el]:u64 ^ #4546)]
.address 0x40DCF0
00020788: AF := 0x10 = (0x10 & (#4546 ^ mem[RCX, el]:u64))
.address 0x40DCF0
0002078b: PF := ~low:1[let $1 = #4546 >> 4 ^ #4546 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DCF0
0002078e: SF := high:1[#4546]
.address 0x40DCF0
00020791: ZF := 0 = #4546
.address 0x40DCF4
0002079b: when ZF goto %00020795
00044af0: goto %000207ef

.address 0x40DCF6
000207ef: 
.address 0x40DCF6
000207f4: RAX := mem[RCX + 8, el]:u64
.address 0x40DCFA
00020802: #4553 := RSI
.address 0x40DCFA
00020805: RSI := RSI + 1
.address 0x40DCFA
00020808: CF := RSI < #4553
.address 0x40DCFA
0002080b: OF := ~high:1[#4553] & (high:1[#4553] | high:1[RSI]) & ~(high:1[#4553] & high:1[RSI])
.address 0x40DCFA
0002080e: AF := 0x10 = (0x10 & (RSI ^ #4553 ^ 1))
.address 0x40DCFA
00020811: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40DCFA
00020814: SF := high:1[RSI]
.address 0x40DCFA
00020817: ZF := 0 = RSI
.address 0x40DCFE
00020825: #4556 := RDX
.address 0x40DCFE
00020828: RDX := RDX + 1
.address 0x40DCFE
0002082b: CF := RDX < #4556
.address 0x40DCFE
0002082e: OF := ~high:1[#4556] & (high:1[#4556] | high:1[RDX]) & ~(high:1[#4556] & high:1[RDX])
.address 0x40DCFE
00020831: AF := 0x10 = (0x10 & (RDX ^ #4556 ^ 1))
.address 0x40DCFE
00020834: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40DCFE
00020837: SF := high:1[RDX]
.address 0x40DCFE
0002083a: ZF := 0 = RDX
.address 0x40DD02
00020847: #4559 := RAX
.address 0x40DD02
0002084a: OF := 0
.address 0x40DD02
0002084d: CF := 0
.address 0x40DD02
00020850: AF := unknown[bits]:u1
.address 0x40DD02
00020853: PF := ~low:1[let $1 = #4559 >> 4 ^ #4559 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DD02
00020856: SF := high:1[#4559]
.address 0x40DD02
00020859: ZF := 0 = #4559
.address 0x40DD05
00020862: when ZF goto %00020795
00044af1: goto %00020868

.address 0x40DD07
00020868: 
00044af2: goto %0002086b

.address 0x40DD10
0002086b: 
.address 0x40DD10
00020870: RAX := mem[RAX + 8, el]:u64
.address 0x40DD14
0002087e: #4561 := RDX
.address 0x40DD14
00020881: RDX := RDX + 1
.address 0x40DD14
00020884: CF := RDX < #4561
.address 0x40DD14
00020887: OF := ~high:1[#4561] & (high:1[#4561] | high:1[RDX]) & ~(high:1[#4561] & high:1[RDX])
.address 0x40DD14
0002088a: AF := 0x10 = (0x10 & (RDX ^ #4561 ^ 1))
.address 0x40DD14
0002088d: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40DD14
00020890: SF := high:1[RDX]
.address 0x40DD14
00020893: ZF := 0 = RDX
.address 0x40DD18
000208a0: #4564 := RAX
.address 0x40DD18
000208a3: OF := 0
.address 0x40DD18
000208a6: CF := 0
.address 0x40DD18
000208a9: AF := unknown[bits]:u1
.address 0x40DD18
000208ac: PF := ~low:1[let $1 = #4564 >> 4 ^ #4564 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DD18
000208af: SF := high:1[#4564]
.address 0x40DD18
000208b2: ZF := 0 = #4564
.address 0x40DD1B
000208bb: when ~ZF goto %0002086b
00044af3: goto %00020795

.address 0x40DD1D
00020795: 
.address 0x40DD1D
000207ac: #4548 := RCX
.address 0x40DD1D
000207af: RCX := RCX + 0x10
.address 0x40DD1D
000207b2: CF := RCX < #4548
.address 0x40DD1D
000207b5: OF := ~high:1[#4548] & (high:1[#4548] | high:1[RCX]) & ~(high:1[#4548] & high:1[RCX])
.address 0x40DD1D
000207b8: AF := 0x10 = (0x10 & (RCX ^ #4548 ^ 0x10))
.address 0x40DD1D
000207bb: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40DD1D
000207be: SF := high:1[RCX]
.address 0x40DD1D
000207c1: ZF := 0 = RCX
.address 0x40DD21
000207ce: #4551 := RCX - R8
.address 0x40DD21
000207d1: CF := RCX < R8
.address 0x40DD21
000207d4: OF := high:1[(RCX ^ R8) & (RCX ^ #4551)]
.address 0x40DD21
000207d7: AF := 0x10 = (0x10 & (#4551 ^ RCX ^ R8))
.address 0x40DD21
000207da: PF := ~low:1[let $1 = #4551 >> 4 ^ #4551 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DD21
000207dd: SF := high:1[#4551]
.address 0x40DD21
000207e0: ZF := 0 = #4551
.address 0x40DD24
000207e9: when CF goto %00020774
00044af4: goto %00007bce

.address 0x40DD26
00007bce: 
.address 0x40DD26
00007be4: RAX := 0
.address 0x40DD26
00007be7: AF := unknown[bits]:u1
.address 0x40DD26
00007bea: ZF := 1
.address 0x40DD26
00007bed: PF := 1
.address 0x40DD26
00007bf0: OF := 0
.address 0x40DD26
00007bf3: CF := 0
.address 0x40DD26
00007bf6: SF := 0
.address 0x40DD28
00007c03: #1168 := mem[RDI + 0x18, el]:u64 - RSI
.address 0x40DD28
00007c06: CF := mem[RDI + 0x18, el]:u64 < RSI
.address 0x40DD28
00007c09: OF := high:1[(mem[RDI + 0x18, el]:u64 ^ RSI) & (mem[RDI + 0x18, el]:u64 ^ #1168)]
.address 0x40DD28
00007c0c: AF := 0x10 = (0x10 & (#1168 ^ mem[RDI + 0x18, el]:u64 ^ RSI))
.address 0x40DD28
00007c0f: PF := ~low:1[let $1 = #1168 >> 4 ^ #1168 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DD28
00007c12: SF := high:1[#1168]
.address 0x40DD28
00007c15: ZF := 0 = #1168
.address 0x40DD2C
00007c1f: when ZF goto %00007c19
00044af5: goto %00020764

.address 0x40DD30
00007c19: 
.address 0x40DD30
00007c2f: #1170 := mem[RDI + 0x20, el]:u64 - RDX
.address 0x40DD30
00007c32: CF := mem[RDI + 0x20, el]:u64 < RDX
.address 0x40DD30
00007c35: OF := high:1[(mem[RDI + 0x20, el]:u64 ^ RDX) & (mem[RDI + 0x20, el]:u64 ^ #1170)]
.address 0x40DD30
00007c38: AF := 0x10 = (0x10 & (#1170 ^ mem[RDI + 0x20, el]:u64 ^ RDX))
.address 0x40DD30
00007c3b: PF := ~low:1[let $1 = #1170 >> 4 ^ #1170 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DD30
00007c3e: SF := high:1[#1170]
.address 0x40DD30
00007c41: ZF := 0 = #1170
.address 0x40DD34
00007c48: RAX := extract:63:8[RAX].pad:8[ZF]
.address 0x40DD37
00007c51: #1172 := mem[RSP, el]:u64
.address 0x40DD37
00007c54: RSP := RSP + 8
.address 0x40DD37
00007c58: call #1172 with noreturn

.address 0x40DD2E
00020764: 
.address 0x40DD2E
0002076b: #4545 := mem[RSP, el]:u64
.address 0x40DD2E
0002076e: RSP := RSP + 8
.address 0x40DD2E
00020772: call #4545 with noreturn


.address 0x40DE90
00044292: sub sub_40de90()
.address 0x40DE90
00007fd9: 
.address 0x40DE90
00007fe0: #1197 := R12
.address 0x40DE90
00007fe3: RSP := RSP - 8
.address 0x40DE90
00007fe6: mem := mem with [RSP, el]:u64 <- #1197
.address 0x40DE92
00007fef: #1198 := RBP
.address 0x40DE92
00007ff2: RSP := RSP - 8
.address 0x40DE92
00007ff5: mem := mem with [RSP, el]:u64 <- #1198
.address 0x40DE93
00007ffc: R12 := RDI
.address 0x40DE96
00008005: #1199 := RBX
.address 0x40DE96
00008008: RSP := RSP - 8
.address 0x40DE96
0000800b: mem := mem with [RSP, el]:u64 <- #1199
.address 0x40DE97
00008012: RBP := RSI
.address 0x40DE9A
0000801b: RSP := RSP - 8
.address 0x40DE9A
0000801e: mem := mem with [RSP, el]:u64 <- 0x40DE9F
.address 0x40DE9A
00008021: call @sub_40d950 with return %00008023

.address 0x40DE9F
00008023: 
.address 0x40DE9F
00008028: RSI := mem[RAX, el]:u64
.address 0x40DEA2
00008035: #1200 := RSI
.address 0x40DEA2
00008038: OF := 0
.address 0x40DEA2
0000803b: CF := 0
.address 0x40DEA2
0000803e: AF := unknown[bits]:u1
.address 0x40DEA2
00008041: PF := ~low:1[let $1 = #1200 >> 4 ^ #1200 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DEA2
00008044: SF := high:1[#1200]
.address 0x40DEA2
00008047: ZF := 0 = #1200
.address 0x40DEA5
00008051: when ZF goto %0000804b
00044af6: goto %0002053a

.address 0x40DEA7
0002053a: 
.address 0x40DEA7
0002053f: RBX := RAX
.address 0x40DEAA
00020547: goto %00020543

.address 0x40DEB3
00020543: 
.address 0x40DEB3
00020553: #4520 := RSI - RBP
.address 0x40DEB3
00020556: CF := RSI < RBP
.address 0x40DEB3
00020559: OF := high:1[(RSI ^ RBP) & (RSI ^ #4520)]
.address 0x40DEB3
0002055c: AF := 0x10 = (0x10 & (#4520 ^ RSI ^ RBP))
.address 0x40DEB3
0002055f: PF := ~low:1[let $1 = #4520 >> 4 ^ #4520 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DEB3
00020562: SF := high:1[#4520]
.address 0x40DEB3
00020565: ZF := 0 = #4520
.address 0x40DEB6
0002056e: when ZF goto %00008075
00044af7: goto %00020574

.address 0x40DEB8
00020574: 
.address 0x40DEB8
00020579: RDI := RBP
.address 0x40DEBB
00020583: #4522 := mem[R12 + 0x38, el]:u64
.address 0x40DEBB
00020586: RSP := RSP - 8
.address 0x40DEBB
00020589: mem := mem with [RSP, el]:u64 <- 0x40DEC0
.address 0x40DEBB
0002058d: call #4522 with return %0002058f

.address 0x40DEC0
0002058f: 
.address 0x40DEC0
0002059a: #4523 := low:8[RAX]
.address 0x40DEC0
0002059d: OF := 0
.address 0x40DEC0
000205a0: CF := 0
.address 0x40DEC0
000205a3: AF := unknown[bits]:u1
.address 0x40DEC0
000205a6: PF := ~low:1[let $1 = #4523 >> 4 ^ #4523 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DEC0
000205a9: SF := high:1[#4523]
.address 0x40DEC0
000205ac: ZF := 0 = #4523
.address 0x40DEC2
000205b5: when ~ZF goto %000080b0
00044af8: goto %000205bb

.address 0x40DEE0
000080b0: 
.address 0x40DEE0
000080b5: RSI := mem[RBX, el]:u64
.address 0x40DEE3
000080bd: RBX := mem[RSP, el]:u64
.address 0x40DEE3
000080c0: RSP := RSP + 8
.address 0x40DEE4
000080c8: RBP := mem[RSP, el]:u64
.address 0x40DEE4
000080cb: RSP := RSP + 8
.address 0x40DEE5
000080d2: RAX := RSI
.address 0x40DEE8
000080da: R12 := mem[RSP, el]:u64
.address 0x40DEE8
000080dd: RSP := RSP + 8
.address 0x40DEEA
000080e6: #1203 := mem[RSP, el]:u64
.address 0x40DEEA
000080e9: RSP := RSP + 8
.address 0x40DEEA
000080ed: call #1203 with noreturn

.address 0x40DEC4
000205bb: 
.address 0x40DEC4
000205c0: RBX := mem[RBX + 8, el]:u64
.address 0x40DEC8
000205cd: #4525 := RBX
.address 0x40DEC8
000205d0: OF := 0
.address 0x40DEC8
000205d3: CF := 0
.address 0x40DEC8
000205d6: AF := unknown[bits]:u1
.address 0x40DEC8
000205d9: PF := ~low:1[let $1 = #4525 >> 4 ^ #4525 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DEC8
000205dc: SF := high:1[#4525]
.address 0x40DEC8
000205df: ZF := 0 = #4525
.address 0x40DECB
000205e9: when ~ZF goto %000205e3
00044af9: goto %0000804b

.address 0x40DECD
0000804b: 
.address 0x40DECD
00008061: RSI := 0
.address 0x40DECD
00008064: AF := unknown[bits]:u1
.address 0x40DECD
00008067: ZF := 1
.address 0x40DECD
0000806a: PF := 1
.address 0x40DECD
0000806d: OF := 0
.address 0x40DECD
00008070: CF := 0
.address 0x40DECD
00008073: SF := 0
00044afa: goto %00008075

.address 0x40DECF
00008075: 
.address 0x40DECF
0000807b: RBX := mem[RSP, el]:u64
.address 0x40DECF
0000807e: RSP := RSP + 8
.address 0x40DED0
00008085: RAX := RSI
.address 0x40DED3
0000808d: RBP := mem[RSP, el]:u64
.address 0x40DED3
00008090: RSP := RSP + 8
.address 0x40DED4
00008098: R12 := mem[RSP, el]:u64
.address 0x40DED4
0000809b: RSP := RSP + 8
.address 0x40DED6
000080a4: #1202 := mem[RSP, el]:u64
.address 0x40DED6
000080a7: RSP := RSP + 8
.address 0x40DED6
000080ab: call #1202 with noreturn

.address 0x40DEB0
000205e3: 
.address 0x40DEB0
000205f3: RSI := mem[RBX, el]:u64
00044afb: goto %00020543


.address 0x40DF40
00044299: sub sub_40df40()
.address 0x40DF40
00008195: 
.address 0x40DF40
0000819c: #1211 := RBP
.address 0x40DF40
0000819f: RSP := RSP - 8
.address 0x40DF40
000081a2: mem := mem with [RSP, el]:u64 <- #1211
.address 0x40DF41
000081ab: #1212 := RBX
.address 0x40DF41
000081ae: RSP := RSP - 8
.address 0x40DF41
000081b1: mem := mem with [RSP, el]:u64 <- #1212
.address 0x40DF42
000081b8: RBP := RDI
.address 0x40DF45
000081bf: RBX := RSI
.address 0x40DF48
000081cd: #1213 := RSP
.address 0x40DF48
000081d0: RSP := RSP - 8
.address 0x40DF48
000081d3: CF := #1213 < 8
.address 0x40DF48
000081d6: OF := high:1[(#1213 ^ 8) & (#1213 ^ RSP)]
.address 0x40DF48
000081d9: AF := 0x10 = (0x10 & (RSP ^ #1213 ^ 8))
.address 0x40DF48
000081dc: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40DF48
000081df: SF := high:1[RSP]
.address 0x40DF48
000081e2: ZF := 0 = RSP
.address 0x40DF4C
000081eb: RSP := RSP - 8
.address 0x40DF4C
000081ee: mem := mem with [RSP, el]:u64 <- 0x40DF51
.address 0x40DF4C
000081f1: call @sub_40d950 with return %000081f3

.address 0x40DF51
000081f3: 
.address 0x40DF51
000081f8: RDX := RAX
.address 0x40DF54
000081ff: RCX := RAX
.address 0x40DF57
00008206: RAX := mem[RDX, el]:u64
.address 0x40DF5A
0000820d: RDX := mem[RDX + 8, el]:u64
.address 0x40DF5E
0000821a: #1216 := RAX - RBX
.address 0x40DF5E
0000821d: CF := RAX < RBX
.address 0x40DF5E
00008220: OF := high:1[(RAX ^ RBX) & (RAX ^ #1216)]
.address 0x40DF5E
00008223: AF := 0x10 = (0x10 & (#1216 ^ RAX ^ RBX))
.address 0x40DF5E
00008226: PF := ~low:1[let $1 = #1216 >> 4 ^ #1216 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DF5E
00008229: SF := high:1[#1216]
.address 0x40DF5E
0000822c: ZF := 0 = #1216
.address 0x40DF61
00008236: when ZF goto %00008230
00044afc: goto %000203cf

.address 0x40DF63
000203cf: 
00044afd: goto %000203d2

.address 0x40DF68
000203d2: 
.address 0x40DF68
000203dd: #4504 := RDX
.address 0x40DF68
000203e0: OF := 0
.address 0x40DF68
000203e3: CF := 0
.address 0x40DF68
000203e6: AF := unknown[bits]:u1
.address 0x40DF68
000203e9: PF := ~low:1[let $1 = #4504 >> 4 ^ #4504 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DF68
000203ec: SF := high:1[#4504]
.address 0x40DF68
000203ef: ZF := 0 = #4504
.address 0x40DF6B
000203f8: when ZF goto %000202d1
00044afe: goto %000203fe

.address 0x40DF6D
000203fe: 
.address 0x40DF6D
00020403: RAX := mem[RDX, el]:u64
.address 0x40DF70
0002040a: RDX := mem[RDX + 8, el]:u64
.address 0x40DF74
00020417: #4506 := RAX - RBX
.address 0x40DF74
0002041a: CF := RAX < RBX
.address 0x40DF74
0002041d: OF := high:1[(RAX ^ RBX) & (RAX ^ #4506)]
.address 0x40DF74
00020420: AF := 0x10 = (0x10 & (#4506 ^ RAX ^ RBX))
.address 0x40DF74
00020423: PF := ~low:1[let $1 = #4506 >> 4 ^ #4506 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DF74
00020426: SF := high:1[#4506]
.address 0x40DF74
00020429: ZF := 0 = #4506
.address 0x40DF77
00020432: when ~ZF goto %000203d2
00044aff: goto %00008230

.address 0x40DF79
00008230: 
.address 0x40DF79
00008246: #1218 := RDX
.address 0x40DF79
00008249: OF := 0
.address 0x40DF79
0000824c: CF := 0
.address 0x40DF79
0000824f: AF := unknown[bits]:u1
.address 0x40DF79
00008252: PF := ~low:1[let $1 = #1218 >> 4 ^ #1218 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DF79
00008255: SF := high:1[#1218]
.address 0x40DF79
00008258: ZF := 0 = #1218
.address 0x40DF7C
00008262: when ~ZF goto %0000825c
00044b00: goto %000202d1

.address 0x40DFA8
0000825c: 
.address 0x40DFA8
0000826c: RAX := mem[RDX, el]:u64
.address 0x40DFAB
0000827a: #1220 := RSP
.address 0x40DFAB
0000827d: RSP := RSP + 8
.address 0x40DFAB
00008280: CF := RSP < #1220
.address 0x40DFAB
00008283: OF := ~high:1[#1220] & (high:1[#1220] | high:1[RSP]) & ~(high:1[#1220] & high:1[RSP])
.address 0x40DFAB
00008286: AF := 0x10 = (0x10 & (RSP ^ #1220 ^ 8))
.address 0x40DFAB
00008289: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40DFAB
0000828c: SF := high:1[RSP]
.address 0x40DFAB
0000828f: ZF := 0 = RSP
.address 0x40DFAF
00008297: RBX := mem[RSP, el]:u64
.address 0x40DFAF
0000829a: RSP := RSP + 8
.address 0x40DFB0
000082a2: RBP := mem[RSP, el]:u64
.address 0x40DFB0
000082a5: RSP := RSP + 8
.address 0x40DFB1
000082ae: #1223 := mem[RSP, el]:u64
.address 0x40DFB1
000082b1: RSP := RSP + 8
.address 0x40DFB1
000082b5: call #1223 with noreturn

.address 0x40DF7E
000202d1: 
.address 0x40DF7E
000202d6: RDX := mem[RBP + 8, el]:u64
.address 0x40DF82
000202de: goto %000202da

.address 0x40DF90
000202da: 
.address 0x40DF90
000202eb: #4493 := RCX
.address 0x40DF90
000202ee: RCX := RCX + 0x10
.address 0x40DF90
000202f1: CF := RCX < #4493
.address 0x40DF90
000202f4: OF := ~high:1[#4493] & (high:1[#4493] | high:1[RCX]) & ~(high:1[#4493] & high:1[RCX])
.address 0x40DF90
000202f7: AF := 0x10 = (0x10 & (RCX ^ #4493 ^ 0x10))
.address 0x40DF90
000202fa: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40DF90
000202fd: SF := high:1[RCX]
.address 0x40DF90
00020300: ZF := 0 = RCX
.address 0x40DF94
0002030d: #4496 := RDX - RCX
.address 0x40DF94
00020310: CF := RDX < RCX
.address 0x40DF94
00020313: OF := high:1[(RDX ^ RCX) & (RDX ^ #4496)]
.address 0x40DF94
00020316: AF := 0x10 = (0x10 & (#4496 ^ RDX ^ RCX))
.address 0x40DF94
00020319: PF := ~low:1[let $1 = #4496 >> 4 ^ #4496 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DF94
0002031c: SF := high:1[#4496]
.address 0x40DF94
0002031f: ZF := 0 = #4496
.address 0x40DF97
00020329: when ~(CF | ZF) goto %00020323
00044b01: goto %000203ad

.address 0x40DF99
000203ad: 
.address 0x40DF99
000203b8: RAX := 0
.address 0x40DF99
000203bb: AF := unknown[bits]:u1
.address 0x40DF99
000203be: ZF := 1
.address 0x40DF99
000203c1: PF := 1
.address 0x40DF99
000203c4: OF := 0
.address 0x40DF99
000203c7: CF := 0
.address 0x40DF99
000203ca: SF := 0
00044b02: goto %00020356

.address 0x40DF88
00020323: 
.address 0x40DF88
00020333: RAX := mem[RCX, el]:u64
.address 0x40DF8B
00020340: #4498 := RAX
.address 0x40DF8B
00020343: OF := 0
.address 0x40DF8B
00020346: CF := 0
.address 0x40DF8B
00020349: AF := unknown[bits]:u1
.address 0x40DF8B
0002034c: PF := ~low:1[let $1 = #4498 >> 4 ^ #4498 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40DF8B
0002034f: SF := high:1[#4498]
.address 0x40DF8B
00020352: ZF := 0 = #4498
.address 0x40DF8E
0002035c: when ~ZF goto %00020356
00044b03: goto %000202da

.address 0x40DF9B
00020356: 
.address 0x40DF9B
0002036d: #4500 := RSP
.address 0x40DF9B
00020370: RSP := RSP + 8
.address 0x40DF9B
00020373: CF := RSP < #4500
.address 0x40DF9B
00020376: OF := ~high:1[#4500] & (high:1[#4500] | high:1[RSP]) & ~(high:1[#4500] & high:1[RSP])
.address 0x40DF9B
00020379: AF := 0x10 = (0x10 & (RSP ^ #4500 ^ 8))
.address 0x40DF9B
0002037c: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40DF9B
0002037f: SF := high:1[RSP]
.address 0x40DF9B
00020382: ZF := 0 = RSP
.address 0x40DF9F
0002038a: RBX := mem[RSP, el]:u64
.address 0x40DF9F
0002038d: RSP := RSP + 8
.address 0x40DFA0
00020395: RBP := mem[RSP, el]:u64
.address 0x40DFA0
00020398: RSP := RSP + 8
.address 0x40DFA1
000203a1: #4503 := mem[RSP, el]:u64
.address 0x40DFA1
000203a4: RSP := RSP + 8
.address 0x40DFA1
000203a8: call #4503 with noreturn


.address 0x40E030
000442a2: sub sub_40e030()
.address 0x40E030
00008325: 
.address 0x40E030
0000832c: #1227 := R15
.address 0x40E030
0000832f: RSP := RSP - 8
.address 0x40E030
00008332: mem := mem with [RSP, el]:u64 <- #1227
.address 0x40E032
0000833b: #1228 := R14
.address 0x40E032
0000833e: RSP := RSP - 8
.address 0x40E032
00008341: mem := mem with [RSP, el]:u64 <- #1228
.address 0x40E034
0000834a: #1229 := R13
.address 0x40E034
0000834d: RSP := RSP - 8
.address 0x40E034
00008350: mem := mem with [RSP, el]:u64 <- #1229
.address 0x40E036
00008359: #1230 := R12
.address 0x40E036
0000835c: RSP := RSP - 8
.address 0x40E036
0000835f: mem := mem with [RSP, el]:u64 <- #1230
.address 0x40E038
00008368: #1231 := RBP
.address 0x40E038
0000836b: RSP := RSP - 8
.address 0x40E038
0000836e: mem := mem with [RSP, el]:u64 <- #1231
.address 0x40E039
00008377: #1232 := RBX
.address 0x40E039
0000837a: RSP := RSP - 8
.address 0x40E039
0000837d: mem := mem with [RSP, el]:u64 <- #1232
.address 0x40E03A
0000838b: #1233 := RSP
.address 0x40E03A
0000838e: RSP := RSP - 8
.address 0x40E03A
00008391: CF := #1233 < 8
.address 0x40E03A
00008394: OF := high:1[(#1233 ^ 8) & (#1233 ^ RSP)]
.address 0x40E03A
00008397: AF := 0x10 = (0x10 & (RSP ^ #1233 ^ 8))
.address 0x40E03A
0000839a: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E03A
0000839d: SF := high:1[RSP]
.address 0x40E03A
000083a0: ZF := 0 = RSP
.address 0x40E03E
000083a7: R14 := mem[RDI, el]:u64
.address 0x40E041
000083b4: #1236 := mem[RDI + 8, el]:u64 - R14
.address 0x40E041
000083b7: CF := mem[RDI + 8, el]:u64 < R14
.address 0x40E041
000083ba: OF := high:1[(mem[RDI + 8, el]:u64 ^ R14) & (mem[RDI + 8, el]:u64 ^ #1236)]
.address 0x40E041
000083bd: AF := 0x10 = (0x10 & (#1236 ^ mem[RDI + 8, el]:u64 ^ R14))
.address 0x40E041
000083c0: PF := ~low:1[let $1 = #1236 >> 4 ^ #1236 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E041
000083c3: SF := high:1[#1236]
.address 0x40E041
000083c6: ZF := 0 = #1236
.address 0x40E045
000083d0: when CF | ZF goto %000083ca
00044b04: goto %0001ff94

.address 0x40E096
000083ca: 
.address 0x40E096
000083e0: RBP := 0
.address 0x40E096
000083e3: AF := unknown[bits]:u1
.address 0x40E096
000083e6: ZF := 1
.address 0x40E096
000083e9: PF := 1
.address 0x40E096
000083ec: OF := 0
.address 0x40E096
000083ef: CF := 0
.address 0x40E096
000083f2: SF := 0
.address 0x40E098
000083fa: goto %000083f6

.address 0x40E047
0001ff94: 
.address 0x40E047
0001ff99: R13 := RDX
.address 0x40E04A
0001ffa0: R12 := RSI
.address 0x40E04D
0001ffa7: R15 := RDI
.address 0x40E050
0001ffb4: RBP := 0
.address 0x40E050
0001ffb7: AF := unknown[bits]:u1
.address 0x40E050
0001ffba: ZF := 1
.address 0x40E050
0001ffbd: PF := 1
.address 0x40E050
0001ffc0: OF := 0
.address 0x40E050
0001ffc3: CF := 0
.address 0x40E050
0001ffc6: SF := 0
00044b05: goto %0001ffc8

.address 0x40E052
0001ffc8: 
.address 0x40E052
0001ffcd: RDI := mem[R14, el]:u64
.address 0x40E055
0001ffda: #4458 := RDI
.address 0x40E055
0001ffdd: OF := 0
.address 0x40E055
0001ffe0: CF := 0
.address 0x40E055
0001ffe3: AF := unknown[bits]:u1
.address 0x40E055
0001ffe6: PF := ~low:1[let $1 = #4458 >> 4 ^ #4458 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E055
0001ffe9: SF := high:1[#4458]
.address 0x40E055
0001ffec: ZF := 0 = #4458
.address 0x40E058
0001fff6: when ZF goto %0001fff0
00044b06: goto %0002004a

.address 0x40E05A
0002004a: 
.address 0x40E05A
0002004f: RBX := R14
.address 0x40E05D
00020057: goto %00020053

.address 0x40E063
00020053: 
.address 0x40E063
0002005d: RSI := R13
.address 0x40E066
00020067: #4465 := R12
.address 0x40E066
0002006a: RSP := RSP - 8
.address 0x40E066
0002006d: mem := mem with [RSP, el]:u64 <- 0x40E069
.address 0x40E066
00020071: call #4465 with return %00020073

.address 0x40E069
00020073: 
.address 0x40E069
0002007e: #4466 := low:8[RAX]
.address 0x40E069
00020081: OF := 0
.address 0x40E069
00020084: CF := 0
.address 0x40E069
00020087: AF := unknown[bits]:u1
.address 0x40E069
0002008a: PF := ~low:1[let $1 = #4466 >> 4 ^ #4466 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E069
0002008d: SF := high:1[#4466]
.address 0x40E069
00020090: ZF := 0 = #4466
.address 0x40E06B
00020099: when ZF goto %000083f6
00044b07: goto %0002009f

.address 0x40E06D
0002009f: 
.address 0x40E06D
000200a4: RBX := mem[RBX + 8, el]:u64
.address 0x40E071
000200b2: #4468 := RBP
.address 0x40E071
000200b5: RBP := RBP + 1
.address 0x40E071
000200b8: CF := RBP < #4468
.address 0x40E071
000200bb: OF := ~high:1[#4468] & (high:1[#4468] | high:1[RBP]) & ~(high:1[#4468] & high:1[RBP])
.address 0x40E071
000200be: AF := 0x10 = (0x10 & (RBP ^ #4468 ^ 1))
.address 0x40E071
000200c1: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E071
000200c4: SF := high:1[RBP]
.address 0x40E071
000200c7: ZF := 0 = RBP
.address 0x40E075
000200d4: #4471 := RBX
.address 0x40E075
000200d7: OF := 0
.address 0x40E075
000200da: CF := 0
.address 0x40E075
000200dd: AF := unknown[bits]:u1
.address 0x40E075
000200e0: PF := ~low:1[let $1 = #4471 >> 4 ^ #4471 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E075
000200e3: SF := high:1[#4471]
.address 0x40E075
000200e6: ZF := 0 = #4471
.address 0x40E078
000200f0: when ~ZF goto %000200ea
00044b08: goto %0001fff0

.address 0x40E07A
0001fff0: 
.address 0x40E07A
00020007: #4460 := R14
.address 0x40E07A
0002000a: R14 := R14 + 0x10
.address 0x40E07A
0002000d: CF := R14 < #4460
.address 0x40E07A
00020010: OF := ~high:1[#4460] & (high:1[#4460] | high:1[R14]) & ~(high:1[#4460] & high:1[R14])
.address 0x40E07A
00020013: AF := 0x10 = (0x10 & (R14 ^ #4460 ^ 0x10))
.address 0x40E07A
00020016: PF := ~low:1[let $1 = R14 >> 4 ^ R14 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E07A
00020019: SF := high:1[R14]
.address 0x40E07A
0002001c: ZF := 0 = R14
.address 0x40E07E
00020029: #4463 := mem[R15 + 8, el]:u64 - R14
.address 0x40E07E
0002002c: CF := mem[R15 + 8, el]:u64 < R14
.address 0x40E07E
0002002f: OF := high:1[(mem[R15 + 8, el]:u64 ^ R14) & (mem[R15 + 8, el]:u64 ^ #4463)]
.address 0x40E07E
00020032: AF := 0x10 = (0x10 & (#4463 ^ mem[R15 + 8, el]:u64 ^ R14))
.address 0x40E07E
00020035: PF := ~low:1[let $1 = #4463 >> 4 ^ #4463 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E07E
00020038: SF := high:1[#4463]
.address 0x40E07E
0002003b: ZF := 0 = #4463
.address 0x40E082
00020044: when ~(CF | ZF) goto %0001ffc8
00044b09: goto %000083f6

.address 0x40E084
000083f6: 
.address 0x40E084
00008407: #1238 := RSP
.address 0x40E084
0000840a: RSP := RSP + 8
.address 0x40E084
0000840d: CF := RSP < #1238
.address 0x40E084
00008410: OF := ~high:1[#1238] & (high:1[#1238] | high:1[RSP]) & ~(high:1[#1238] & high:1[RSP])
.address 0x40E084
00008413: AF := 0x10 = (0x10 & (RSP ^ #1238 ^ 8))
.address 0x40E084
00008416: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E084
00008419: SF := high:1[RSP]
.address 0x40E084
0000841c: ZF := 0 = RSP
.address 0x40E088
00008423: RAX := RBP
.address 0x40E08B
0000842b: RBX := mem[RSP, el]:u64
.address 0x40E08B
0000842e: RSP := RSP + 8
.address 0x40E08C
00008436: RBP := mem[RSP, el]:u64
.address 0x40E08C
00008439: RSP := RSP + 8
.address 0x40E08D
00008441: R12 := mem[RSP, el]:u64
.address 0x40E08D
00008444: RSP := RSP + 8
.address 0x40E08F
0000844c: R13 := mem[RSP, el]:u64
.address 0x40E08F
0000844f: RSP := RSP + 8
.address 0x40E091
00008457: R14 := mem[RSP, el]:u64
.address 0x40E091
0000845a: RSP := RSP + 8
.address 0x40E093
00008462: R15 := mem[RSP, el]:u64
.address 0x40E093
00008465: RSP := RSP + 8
.address 0x40E095
0000846e: #1241 := mem[RSP, el]:u64
.address 0x40E095
00008471: RSP := RSP + 8
.address 0x40E095
00008475: call #1241 with noreturn

.address 0x40E060
000200ea: 
.address 0x40E060
000200fa: RDI := mem[RBX, el]:u64
00044b0a: goto %00020053


.address 0x40E100
000442aa: sub sub_40e100()
.address 0x40E100
0000851c: 
.address 0x40E100
00008523: #1246 := R15
.address 0x40E100
00008526: RSP := RSP - 8
.address 0x40E100
00008529: mem := mem with [RSP, el]:u64 <- #1246
.address 0x40E102
00008532: #1247 := R14
.address 0x40E102
00008535: RSP := RSP - 8
.address 0x40E102
00008538: mem := mem with [RSP, el]:u64 <- #1247
.address 0x40E104
0000853f: RAX := 0x40D930
.address 0x40E10B
00008548: #1248 := R13
.address 0x40E10B
0000854b: RSP := RSP - 8
.address 0x40E10B
0000854e: mem := mem with [RSP, el]:u64 <- #1248
.address 0x40E10D
00008557: #1249 := R12
.address 0x40E10D
0000855a: RSP := RSP - 8
.address 0x40E10D
0000855d: mem := mem with [RSP, el]:u64 <- #1249
.address 0x40E10F
00008564: R12 := RDX
.address 0x40E112
0000856d: #1250 := RBP
.address 0x40E112
00008570: RSP := RSP - 8
.address 0x40E112
00008573: mem := mem with [RSP, el]:u64 <- #1250
.address 0x40E113
0000857c: #1251 := RBX
.address 0x40E113
0000857f: RSP := RSP - 8
.address 0x40E113
00008582: mem := mem with [RSP, el]:u64 <- #1251
.address 0x40E114
00008589: R13 := RCX
.address 0x40E117
00008590: RBP := RDI
.address 0x40E11A
00008597: RDI := 0x50
.address 0x40E11F
0000859e: R15 := RSI
.address 0x40E122
000085ac: #1252 := RSP
.address 0x40E122
000085af: RSP := RSP - 8
.address 0x40E122
000085b2: CF := #1252 < 8
.address 0x40E122
000085b5: OF := high:1[(#1252 ^ 8) & (#1252 ^ RSP)]
.address 0x40E122
000085b8: AF := 0x10 = (0x10 & (RSP ^ #1252 ^ 8))
.address 0x40E122
000085bb: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E122
000085be: SF := high:1[RSP]
.address 0x40E122
000085c1: ZF := 0 = RSP
.address 0x40E126
000085ce: #1255 := RDX
.address 0x40E126
000085d1: OF := 0
.address 0x40E126
000085d4: CF := 0
.address 0x40E126
000085d7: AF := unknown[bits]:u1
.address 0x40E126
000085da: PF := ~low:1[let $1 = #1255 >> 4 ^ #1255 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E126
000085dd: SF := high:1[#1255]
.address 0x40E126
000085e0: ZF := 0 = #1255
.address 0x40E129
000085e7: R14 := R8
.address 0x40E12C
000085ee: R12 := if ZF then RAX else R12
.address 0x40E130
000085f5: RAX := 0x40D940
.address 0x40E137
00008602: #1257 := RCX
.address 0x40E137
00008605: OF := 0
.address 0x40E137
00008608: CF := 0
.address 0x40E137
0000860b: AF := unknown[bits]:u1
.address 0x40E137
0000860e: PF := ~low:1[let $1 = #1257 >> 4 ^ #1257 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E137
00008611: SF := high:1[#1257]
.address 0x40E137
00008614: ZF := 0 = #1257
.address 0x40E13A
0000861b: R13 := if ZF then RAX else R13
.address 0x40E13E
00008624: RSP := RSP - 8
.address 0x40E13E
00008627: mem := mem with [RSP, el]:u64 <- 0x40E143
.address 0x40E13E
0000862a: call @sub_403e78 with return %0000862c

.address 0x40E143
0000862c: 
.address 0x40E143
00008637: #1259 := RAX
.address 0x40E143
0000863a: OF := 0
.address 0x40E143
0000863d: CF := 0
.address 0x40E143
00008640: AF := unknown[bits]:u1
.address 0x40E143
00008643: PF := ~low:1[let $1 = #1259 >> 4 ^ #1259 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E143
00008646: SF := high:1[#1259]
.address 0x40E143
00008649: ZF := 0 = #1259
.address 0x40E146
00008650: RBX := RAX
.address 0x40E149
0000865a: when ZF goto %00008654
00044b0b: goto %0001fdac

.address 0x40E14F
0001fdac: 
.address 0x40E14F
0001fdb7: #4434 := R15
.address 0x40E14F
0001fdba: OF := 0
.address 0x40E14F
0001fdbd: CF := 0
.address 0x40E14F
0001fdc0: AF := unknown[bits]:u1
.address 0x40E14F
0001fdc3: PF := ~low:1[let $1 = #4434 >> 4 ^ #4434 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E14F
0001fdc6: SF := high:1[#4434]
.address 0x40E14F
0001fdc9: ZF := 0 = #4434
.address 0x40E152
0001fdd0: RDI := low:64[RAX + 0x28]
.address 0x40E156
0001fdd9: when ZF goto %000086de
00044b0c: goto %0001fddf

.address 0x40E210
000086de: 
.address 0x40E210
000086e3: RAX := 0x41A3C0
.address 0x40E217
000086ea: mem := mem with [RBX + 0x28, el]:u64 <- RAX
.address 0x40E21B
000086f3: RSP := RSP - 8
.address 0x40E21B
000086f6: mem := mem with [RSP, el]:u64 <- 0x40E220
.address 0x40E21B
000086f9: call @sub_40daa0 with return %000086fb

.address 0x40E220
000086fb: 
.address 0x40E220
00008706: #1265 := low:8[RAX]
.address 0x40E220
00008709: OF := 0
.address 0x40E220
0000870c: CF := 0
.address 0x40E220
0000870f: AF := unknown[bits]:u1
.address 0x40E220
00008712: PF := ~low:1[let $1 = #1265 >> 4 ^ #1265 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E220
00008715: SF := high:1[#1265]
.address 0x40E220
00008718: ZF := 0 = #1265
.address 0x40E222
0000871f: YMM1 := extract:255:128[YMM1].pad:128[mem[0x41A3E8, el]:u32]
.address 0x40E22A
00008729: when ZF goto %00008723
00044b0d: goto %00008763

.address 0x40E22C
00008763: 
.address 0x40E22C
0000876e: #1267 := RBP
.address 0x40E22C
00008771: OF := 0
.address 0x40E22C
00008774: CF := 0
.address 0x40E22C
00008777: AF := unknown[bits]:u1
.address 0x40E22C
0000877a: PF := ~low:1[let $1 = #1267 >> 4 ^ #1267 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E22C
0000877d: SF := high:1[#1267]
.address 0x40E22C
00008780: ZF := 0 = #1267
.address 0x40E22F
0000878a: when SF goto %00008784
00044b0e: goto %0001fd96

.address 0x40E15C
0001fddf: 
.address 0x40E15C
0001fde4: mem := mem with [RAX + 0x28, el]:u64 <- R15
.address 0x40E160
0001fded: RSP := RSP - 8
.address 0x40E160
0001fdf0: mem := mem with [RSP, el]:u64 <- 0x40E165
.address 0x40E160
0001fdf3: call @sub_40daa0 with return %0001fdf5

.address 0x40E165
0001fdf5: 
.address 0x40E165
0001fe00: #4436 := low:8[RAX]
.address 0x40E165
0001fe03: OF := 0
.address 0x40E165
0001fe06: CF := 0
.address 0x40E165
0001fe09: AF := unknown[bits]:u1
.address 0x40E165
0001fe0c: PF := ~low:1[let $1 = #4436 >> 4 ^ #4436 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E165
0001fe0f: SF := high:1[#4436]
.address 0x40E165
0001fe12: ZF := 0 = #4436
.address 0x40E167
0001fe1b: when ZF goto %00008723
00044b0f: goto %0001fe21

.address 0x40E16D
0001fe21: 
.address 0x40E16D
0001fe2c: #4438 := mem[R15 + 0x10]
.address 0x40E16D
0001fe2f: CF := mem[R15 + 0x10] < 0
.address 0x40E16D
0001fe32: OF := high:1[mem[R15 + 0x10] & (mem[R15 + 0x10] ^ #4438)]
.address 0x40E16D
0001fe35: AF := 0x10 = (0x10 & (#4438 ^ mem[R15 + 0x10]))
.address 0x40E16D
0001fe38: PF := ~low:1[let $1 = #4438 >> 4 ^ #4438 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E16D
0001fe3b: SF := high:1[#4438]
.address 0x40E16D
0001fe3e: ZF := 0 = #4438
.address 0x40E172
0001fe47: when ZF goto %0001fd6e
00044b10: goto %00008827

.address 0x40E270
0001fd6e: 
.address 0x40E270
0001fd79: #4432 := RBP
.address 0x40E270
0001fd7c: OF := 0
.address 0x40E270
0001fd7f: CF := 0
.address 0x40E270
0001fd82: AF := unknown[bits]:u1
.address 0x40E270
0001fd85: PF := ~low:1[let $1 = #4432 >> 4 ^ #4432 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E270
0001fd88: SF := high:1[#4432]
.address 0x40E270
0001fd8b: ZF := 0 = #4432
.address 0x40E273
0001fd92: YMM1 := extract:255:128[YMM1].pad:128[mem[R15 + 8, el]:u32]
.address 0x40E279
0001fd9c: when ~SF goto %0001fd96
00044b11: goto %00008784

.address 0x40E27B
00008784: 
.address 0x40E27B
00008794: RAX := RBP
.address 0x40E27E
0000879b: YMM0 := extract:255:128[YMM0].0
.address 0x40E282
000087a9: #1269 := RAX
.address 0x40E282
000087ac: RAX := RAX >> 1
.address 0x40E282
000087af: CF := high:1[#1269 << 0x3F]
.address 0x40E282
000087b2: SF := high:1[RAX]
.address 0x40E282
000087b5: ZF := 0 = RAX
.address 0x40E282
000087b8: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E282
000087bb: AF := unknown[bits]:u1
.address 0x40E282
000087be: OF := high:1[#1269]
.address 0x40E285
000087cb: RBP := pad:64[low:32[RBP] & 1]
.address 0x40E285
000087ce: OF := 0
.address 0x40E285
000087d1: CF := 0
.address 0x40E285
000087d4: AF := unknown[bits]:u1
.address 0x40E285
000087d7: PF := ~low:1[let $1 = low:32[RBP] >> 4 ^ low:32[RBP] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E285
000087da: SF := high:1[low:32[RBP]]
.address 0x40E285
000087dd: ZF := 0 = low:32[RBP]
.address 0x40E288
000087ea: RAX := RAX | RBP
.address 0x40E288
000087ed: OF := 0
.address 0x40E288
000087f0: CF := 0
.address 0x40E288
000087f3: AF := unknown[bits]:u1
.address 0x40E288
000087f6: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E288
000087f9: SF := high:1[RAX]
.address 0x40E288
000087fc: ZF := 0 = RAX
.address 0x40E294
00008806: goto %00008802

.address 0x40E231
0001fd96: 
.address 0x40E231
0001fda6: YMM0 := extract:255:128[YMM0].0
00044b12: goto %00008802

.address 0x40E23A
00008802: 
.address 0x40E245
00008810: when ~CF goto %00008723
00044b13: goto %00008816

.address 0x40E247
00008816: 
.address 0x40E24E
0000881f: when CF goto %00008819
00044b14: goto %0001fd3c

.address 0x40E2A0
00008819: 
.address 0x40E2A5
0000882b: goto %00008827

.address 0x40E250
0001fd3c: 
.address 0x40E258
0001fd42: RAX := 0x8000000000000000
.address 0x40E267
0001fd50: RBP := RBP ^ RAX
.address 0x40E267
0001fd53: OF := 0
.address 0x40E267
0001fd56: CF := 0
.address 0x40E267
0001fd59: AF := unknown[bits]:u1
.address 0x40E267
0001fd5c: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E267
0001fd5f: SF := high:1[RBP]
.address 0x40E267
0001fd62: ZF := 0 = RBP
.address 0x40E26A
0001fd69: goto %00008827

.address 0x40E178
00008827: 
.address 0x40E178
00008831: RDI := RBP
.address 0x40E17B
0000883a: RSP := RSP - 8
.address 0x40E17B
0000883d: mem := mem with [RSP, el]:u64 <- 0x40E180
.address 0x40E17B
00008840: call @sub_40d890 with return %00008842

.address 0x40E180
00008842: 
.address 0x40E180
00008847: RDX := 8
.address 0x40E185
0000884e: RBP := RAX
.address 0x40E188
0000885b: RCX := 0
.address 0x40E188
0000885e: AF := unknown[bits]:u1
.address 0x40E188
00008861: ZF := 1
.address 0x40E188
00008864: PF := 1
.address 0x40E188
00008867: OF := 0
.address 0x40E188
0000886a: CF := 0
.address 0x40E188
0000886d: SF := 0
.address 0x40E18A
00008874: RAX := RDX
.address 0x40E18D
00008883: #1273 := pad:128[RAX] * pad:128[RBP]
.address 0x40E18D
00008886: RAX := extract:63:0[#1273]
.address 0x40E18D
00008889: RDX := extract:127:64[#1273]
.address 0x40E18D
0000888c: OF := extract:127:64[#1273] <> 0
.address 0x40E18D
0000888f: CF := extract:127:64[#1273] <> 0
.address 0x40E18D
00008892: SF := unknown[bits]:u1
.address 0x40E18D
00008895: ZF := unknown[bits]:u1
.address 0x40E18D
00008898: AF := unknown[bits]:u1
.address 0x40E18D
0000889b: PF := unknown[bits]:u1
.address 0x40E190
000088a5: when OF goto %0000889f
00044b15: goto %000088b3

.address 0x40E2AA
0000889f: 
.address 0x40E2AA
000088af: RCX := 1
.address 0x40E2AF
000088b7: goto %000088b3

.address 0x40E196
000088b3: 
.address 0x40E196
000088c3: #1274 := RAX
.address 0x40E196
000088c6: OF := 0
.address 0x40E196
000088c9: CF := 0
.address 0x40E196
000088cc: AF := unknown[bits]:u1
.address 0x40E196
000088cf: PF := ~low:1[let $1 = #1274 >> 4 ^ #1274 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E196
000088d2: SF := high:1[#1274]
.address 0x40E196
000088d5: ZF := 0 = #1274
.address 0x40E199
000088de: when SF goto %00008723
00044b16: goto %000088e4

.address 0x40E19B
000088e4: 
.address 0x40E19B
000088ef: #1276 := RCX
.address 0x40E19B
000088f2: OF := 0
.address 0x40E19B
000088f5: CF := 0
.address 0x40E19B
000088f8: AF := unknown[bits]:u1
.address 0x40E19B
000088fb: PF := ~low:1[let $1 = #1276 >> 4 ^ #1276 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E19B
000088fe: SF := high:1[#1276]
.address 0x40E19B
00008901: ZF := 0 = #1276
.address 0x40E19E
0000890a: when ~ZF goto %00008723
00044b17: goto %00008910

.address 0x40E1A0
00008910: 
.address 0x40E1A0
0000891b: #1278 := RBP
.address 0x40E1A0
0000891e: OF := 0
.address 0x40E1A0
00008921: CF := 0
.address 0x40E1A0
00008924: AF := unknown[bits]:u1
.address 0x40E1A0
00008927: PF := ~low:1[let $1 = #1278 >> 4 ^ #1278 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E1A0
0000892a: SF := high:1[#1278]
.address 0x40E1A0
0000892d: ZF := 0 = #1278
.address 0x40E1A3
00008934: mem := mem with [RBX + 0x10, el]:u64 <- RBP
.address 0x40E1A7
0000893d: when ZF goto %00008723
00044b18: goto %00008943

.address 0x40E1A9
00008943: 
.address 0x40E1A9
00008948: RSI := 0x10
.address 0x40E1AE
0000894f: RDI := RBP
.address 0x40E1B1
00008958: RSP := RSP - 8
.address 0x40E1B1
0000895b: mem := mem with [RSP, el]:u64 <- 0x40E1B6
.address 0x40E1B1
0000895e: call @sub_403b00 with return %00008960

.address 0x40E1B6
00008960: 
.address 0x40E1B6
0000896b: #1280 := RAX
.address 0x40E1B6
0000896e: OF := 0
.address 0x40E1B6
00008971: CF := 0
.address 0x40E1B6
00008974: AF := unknown[bits]:u1
.address 0x40E1B6
00008977: PF := ~low:1[let $1 = #1280 >> 4 ^ #1280 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E1B6
0000897a: SF := high:1[#1280]
.address 0x40E1B6
0000897d: ZF := 0 = #1280
.address 0x40E1B9
00008984: mem := mem with [RBX, el]:u64 <- RAX
.address 0x40E1BC
0000898d: when ZF goto %00008723
00044b19: goto %00008993

.address 0x40E1F0
00008723: 
.address 0x40E1F0
00008733: RDI := RBX
.address 0x40E1F3
00008740: RBX := 0
.address 0x40E1F3
00008743: AF := unknown[bits]:u1
.address 0x40E1F3
00008746: ZF := 1
.address 0x40E1F3
00008749: PF := 1
.address 0x40E1F3
0000874c: OF := 0
.address 0x40E1F3
0000874f: CF := 0
.address 0x40E1F3
00008752: SF := 0
.address 0x40E1F5
0000875b: RSP := RSP - 8
.address 0x40E1F5
0000875e: mem := mem with [RSP, el]:u64 <- 0x40E1FA
.address 0x40E1F5
00008761: call @sub_403e70 with return %00008654

.address 0x40E1BE
00008993: 
.address 0x40E1BE
0000899f: #1282 := RBP
.address 0x40E1BE
000089a2: RBP := RBP << 4
.address 0x40E1BE
000089a5: CF := low:1[#1282 >> 0x3C]
.address 0x40E1BE
000089a8: SF := high:1[RBP]
.address 0x40E1BE
000089ab: ZF := 0 = RBP
.address 0x40E1BE
000089ae: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E1BE
000089b1: AF := unknown[bits]:u1
.address 0x40E1BE
000089b4: OF := unknown[bits]:u1
.address 0x40E1C2
000089bb: mem := mem with [RBX + 0x18, el]:u64 <- 0
.address 0x40E1CA
000089c2: mem := mem with [RBX + 0x20, el]:u64 <- 0
.address 0x40E1D2
000089d1: #1284 := RBP
.address 0x40E1D2
000089d4: #1285 := RAX
.address 0x40E1D2
000089d7: RBP := RBP + #1285
.address 0x40E1D2
000089da: CF := RBP < #1284
.address 0x40E1D2
000089dd: OF := high:1[#1284] = high:1[#1285] & (high:1[#1284] | high:1[RBP]) & ~(
high:1[#1284] & high:1[RBP])
.address 0x40E1D2
000089e0: AF := 0x10 = (0x10 & (RBP ^ #1284 ^ #1285))
.address 0x40E1D2
000089e3: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E1D2
000089e6: SF := high:1[RBP]
.address 0x40E1D2
000089e9: ZF := 0 = RBP
.address 0x40E1D5
000089f0: mem := mem with [RBX + 0x30, el]:u64 <- R12
.address 0x40E1D9
000089f7: mem := mem with [RBX + 0x38, el]:u64 <- R13
.address 0x40E1DD
000089fe: mem := mem with [RBX + 8, el]:u64 <- RBP
.address 0x40E1E1
00008a05: mem := mem with [RBX + 0x40, el]:u64 <- R14
.address 0x40E1E5
00008a0c: mem := mem with [RBX + 0x48, el]:u64 <- 0
.address 0x40E1ED
00008a13: goto %00008654

.address 0x40E1FA
00008654: 
.address 0x40E1FA
0000866b: #1261 := RSP
.address 0x40E1FA
0000866e: RSP := RSP + 8
.address 0x40E1FA
00008671: CF := RSP < #1261
.address 0x40E1FA
00008674: OF := ~high:1[#1261] & (high:1[#1261] | high:1[RSP]) & ~(high:1[#1261] & high:1[RSP])
.address 0x40E1FA
00008677: AF := 0x10 = (0x10 & (RSP ^ #1261 ^ 8))
.address 0x40E1FA
0000867a: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E1FA
0000867d: SF := high:1[RSP]
.address 0x40E1FA
00008680: ZF := 0 = RSP
.address 0x40E1FE
00008687: RAX := RBX
.address 0x40E201
0000868f: RBX := mem[RSP, el]:u64
.address 0x40E201
00008692: RSP := RSP + 8
.address 0x40E202
0000869a: RBP := mem[RSP, el]:u64
.address 0x40E202
0000869d: RSP := RSP + 8
.address 0x40E203
000086a5: R12 := mem[RSP, el]:u64
.address 0x40E203
000086a8: RSP := RSP + 8
.address 0x40E205
000086b0: R13 := mem[RSP, el]:u64
.address 0x40E205
000086b3: RSP := RSP + 8
.address 0x40E207
000086bb: R14 := mem[RSP, el]:u64
.address 0x40E207
000086be: RSP := RSP + 8
.address 0x40E209
000086c6: R15 := mem[RSP, el]:u64
.address 0x40E209
000086c9: RSP := RSP + 8
.address 0x40E20B
000086d2: #1264 := mem[RSP, el]:u64
.address 0x40E20B
000086d5: RSP := RSP + 8
.address 0x40E20B
000086d9: call #1264 with noreturn


.address 0x40E2C0
000442ba: sub sub_40e2c0()
.address 0x40E2C0
00008a1e: 
.address 0x40E2C0
00008a25: #1287 := R12
.address 0x40E2C0
00008a28: RSP := RSP - 8
.address 0x40E2C0
00008a2b: mem := mem with [RSP, el]:u64 <- #1287
.address 0x40E2C2
00008a34: #1288 := RBP
.address 0x40E2C2
00008a37: RSP := RSP - 8
.address 0x40E2C2
00008a3a: mem := mem with [RSP, el]:u64 <- #1288
.address 0x40E2C3
00008a41: RBP := RDI
.address 0x40E2C6
00008a4a: #1289 := RBX
.address 0x40E2C6
00008a4d: RSP := RSP - 8
.address 0x40E2C6
00008a50: mem := mem with [RSP, el]:u64 <- #1289
.address 0x40E2C7
00008a57: R12 := mem[RDI, el]:u64
.address 0x40E2CA
00008a64: #1290 := R12 - mem[RDI + 8, el]:u64
.address 0x40E2CA
00008a67: CF := R12 < mem[RDI + 8, el]:u64
.address 0x40E2CA
00008a6a: OF := high:1[(R12 ^ mem[RDI + 8, el]:u64) & (R12 ^ #1290)]
.address 0x40E2CA
00008a6d: AF := 0x10 = (0x10 & (#1290 ^ R12 ^ mem[RDI + 8, el]:u64))
.address 0x40E2CA
00008a70: PF := ~low:1[let $1 = #1290 >> 4 ^ #1290 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E2CA
00008a73: SF := high:1[#1290]
.address 0x40E2CA
00008a76: ZF := 0 = #1290
.address 0x40E2CE
00008a80: when ~CF goto %00008a7a
00044b1a: goto %0001fb8b

.address 0x40E2D0
0001fb8b: 
.address 0x40E2D0
0001fb96: #4414 := mem[R12, el]:u64
.address 0x40E2D0
0001fb99: CF := mem[R12, el]:u64 < 0
.address 0x40E2D0
0001fb9c: OF := high:1[mem[R12, el]:u64 & (mem[R12, el]:u64 ^ #4414)]
.address 0x40E2D0
0001fb9f: AF := 0x10 = (0x10 & (#4414 ^ mem[R12, el]:u64))
.address 0x40E2D0
0001fba2: PF := ~low:1[let $1 = #4414 >> 4 ^ #4414 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E2D0
0001fba5: SF := high:1[#4414]
.address 0x40E2D0
0001fba8: ZF := 0 = #4414
.address 0x40E2D5
0001fbb2: when ZF goto %0001fbac
00044b1b: goto %0001fc06

.address 0x40E2D7
0001fc06: 
.address 0x40E2D7
0001fc0b: RBX := mem[R12 + 8, el]:u64
.address 0x40E2DC
0001fc12: RAX := mem[RBP + 0x40, el]:u64
.address 0x40E2E0
0001fc1f: #4421 := RBX
.address 0x40E2E0
0001fc22: OF := 0
.address 0x40E2E0
0001fc25: CF := 0
.address 0x40E2E0
0001fc28: AF := unknown[bits]:u1
.address 0x40E2E0
0001fc2b: PF := ~low:1[let $1 = #4421 >> 4 ^ #4421 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E2E0
0001fc2e: SF := high:1[#4421]
.address 0x40E2E0
0001fc31: ZF := 0 = #4421
.address 0x40E2E3
0001fc3b: when ZF goto %0001fc35
00044b1c: goto %0001fc95

.address 0x40E2E5
0001fc95: 
00044b1d: goto %0001fc98

.address 0x40E2E8
0001fc98: 
.address 0x40E2E8
0001fca3: #4426 := RAX
.address 0x40E2E8
0001fca6: OF := 0
.address 0x40E2E8
0001fca9: CF := 0
.address 0x40E2E8
0001fcac: AF := unknown[bits]:u1
.address 0x40E2E8
0001fcaf: PF := ~low:1[let $1 = #4426 >> 4 ^ #4426 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E2E8
0001fcb2: SF := high:1[#4426]
.address 0x40E2E8
0001fcb5: ZF := 0 = #4426
.address 0x40E2EB
0001fcbf: when ZF goto %0001fcb9
00044b1e: goto %0001fd1a

.address 0x40E2ED
0001fd1a: 
.address 0x40E2ED
0001fd1f: RDI := mem[RBX, el]:u64
.address 0x40E2F0
0001fd29: #4430 := RAX
.address 0x40E2F0
0001fd2c: RSP := RSP - 8
.address 0x40E2F0
0001fd2f: mem := mem with [RSP, el]:u64 <- 0x40E2F2
.address 0x40E2F0
0001fd33: call #4430 with return %0001fd35

.address 0x40E2F2
0001fd35: 
.address 0x40E2F2
0001fd3a: RAX := mem[RBP + 0x40, el]:u64
00044b1f: goto %0001fcb9

.address 0x40E2F6
0001fcb9: 
.address 0x40E2F6
0001fcc9: RDX := mem[RBX + 8, el]:u64
.address 0x40E2FA
0001fcd0: RCX := mem[RBP + 0x48, el]:u64
.address 0x40E2FE
0001fcd7: mem := mem with [RBX, el]:u64 <- 0
.address 0x40E305
0001fce4: #4428 := RDX
.address 0x40E305
0001fce7: OF := 0
.address 0x40E305
0001fcea: CF := 0
.address 0x40E305
0001fced: AF := unknown[bits]:u1
.address 0x40E305
0001fcf0: PF := ~low:1[let $1 = #4428 >> 4 ^ #4428 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E305
0001fcf3: SF := high:1[#4428]
.address 0x40E305
0001fcf6: ZF := 0 = #4428
.address 0x40E308
0001fcfd: mem := mem with [RBX + 8, el]:u64 <- RCX
.address 0x40E30C
0001fd04: mem := mem with [RBP + 0x48, el]:u64 <- RBX
.address 0x40E310
0001fd0b: RBX := RDX
.address 0x40E313
0001fd14: when ~ZF goto %0001fc98
00044b20: goto %0001fc35

.address 0x40E315
0001fc35: 
.address 0x40E315
0001fc4b: #4423 := RAX
.address 0x40E315
0001fc4e: OF := 0
.address 0x40E315
0001fc51: CF := 0
.address 0x40E315
0001fc54: AF := unknown[bits]:u1
.address 0x40E315
0001fc57: PF := ~low:1[let $1 = #4423 >> 4 ^ #4423 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E315
0001fc5a: SF := high:1[#4423]
.address 0x40E315
0001fc5d: ZF := 0 = #4423
.address 0x40E318
0001fc67: when ZF goto %0001fc61
00044b21: goto %0001fc7a

.address 0x40E31A
0001fc7a: 
.address 0x40E31A
0001fc7f: RDI := mem[R12, el]:u64
.address 0x40E31E
0001fc89: #4425 := RAX
.address 0x40E31E
0001fc8c: RSP := RSP - 8
.address 0x40E31E
0001fc8f: mem := mem with [RSP, el]:u64 <- 0x40E320
.address 0x40E31E
0001fc93: call #4425 with return %0001fc61

.address 0x40E320
0001fc61: 
.address 0x40E320
0001fc71: mem := mem with [R12, el]:u64 <- 0
.address 0x40E328
0001fc78: mem := mem with [R12 + 8, el]:u64 <- 0
00044b22: goto %0001fbac

.address 0x40E331
0001fbac: 
.address 0x40E331
0001fbc3: #4416 := R12
.address 0x40E331
0001fbc6: R12 := R12 + 0x10
.address 0x40E331
0001fbc9: CF := R12 < #4416
.address 0x40E331
0001fbcc: OF := ~high:1[#4416] & (high:1[#4416] | high:1[R12]) & ~(high:1[#4416] & high:1[R12])
.address 0x40E331
0001fbcf: AF := 0x10 = (0x10 & (R12 ^ #4416 ^ 0x10))
.address 0x40E331
0001fbd2: PF := ~low:1[let $1 = R12 >> 4 ^ R12 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E331
0001fbd5: SF := high:1[R12]
.address 0x40E331
0001fbd8: ZF := 0 = R12
.address 0x40E335
0001fbe5: #4419 := mem[RBP + 8, el]:u64 - R12
.address 0x40E335
0001fbe8: CF := mem[RBP + 8, el]:u64 < R12
.address 0x40E335
0001fbeb: OF := high:1[(mem[RBP + 8, el]:u64 ^ R12) & (mem[RBP + 8, el]:u64 ^ #4419)]
.address 0x40E335
0001fbee: AF := 0x10 = (0x10 & (#4419 ^ mem[RBP + 8, el]:u64 ^ R12))
.address 0x40E335
0001fbf1: PF := ~low:1[let $1 = #4419 >> 4 ^ #4419 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E335
0001fbf4: SF := high:1[#4419]
.address 0x40E335
0001fbf7: ZF := 0 = #4419
.address 0x40E339
0001fc00: when ~(CF | ZF) goto %0001fb8b
00044b23: goto %00008a7a

.address 0x40E33B
00008a7a: 
.address 0x40E33B
00008a8a: mem := mem with [RBP + 0x18, el]:u64 <- 0
.address 0x40E343
00008a91: mem := mem with [RBP + 0x20, el]:u64 <- 0
.address 0x40E34B
00008a99: RBX := mem[RSP, el]:u64
.address 0x40E34B
00008a9c: RSP := RSP + 8
.address 0x40E34C
00008aa4: RBP := mem[RSP, el]:u64
.address 0x40E34C
00008aa7: RSP := RSP + 8
.address 0x40E34D
00008aaf: R12 := mem[RSP, el]:u64
.address 0x40E34D
00008ab2: RSP := RSP + 8
.address 0x40E34F
00008abb: #1292 := mem[RSP, el]:u64
.address 0x40E34F
00008abe: RSP := RSP + 8
.address 0x40E34F
00008ac2: call #1292 with noreturn


.address 0x40E350
000442c5: sub sub_40e350()
.address 0x40E350
00008ac4: 
.address 0x40E350
00008acb: #1293 := R12
.address 0x40E350
00008ace: RSP := RSP - 8
.address 0x40E350
00008ad1: mem := mem with [RSP, el]:u64 <- #1293
.address 0x40E352
00008ada: #1294 := RBP
.address 0x40E352
00008add: RSP := RSP - 8
.address 0x40E352
00008ae0: mem := mem with [RSP, el]:u64 <- #1294
.address 0x40E353
00008ae7: R12 := RDI
.address 0x40E356
00008af0: #1295 := RBX
.address 0x40E356
00008af3: RSP := RSP - 8
.address 0x40E356
00008af6: mem := mem with [RSP, el]:u64 <- #1295
.address 0x40E357
00008b03: #1296 := mem[RDI + 0x40, el]:u64
.address 0x40E357
00008b06: CF := mem[RDI + 0x40, el]:u64 < 0
.address 0x40E357
00008b09: OF := high:1[mem[RDI + 0x40, el]:u64 & (mem[RDI + 0x40, el]:u64 ^ #1296)]
.address 0x40E357
00008b0c: AF := 0x10 = (0x10 & (#1296 ^ mem[RDI + 0x40, el]:u64))
.address 0x40E357
00008b0f: PF := ~low:1[let $1 = #1296 >> 4 ^ #1296 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E357
00008b12: SF := high:1[#1296]
.address 0x40E357
00008b15: ZF := 0 = #1296
.address 0x40E35C
00008b1c: RBP := mem[RDI, el]:u64
.address 0x40E35F
00008b23: RAX := mem[RDI + 8, el]:u64
.address 0x40E363
00008b2d: when ZF goto %00008b27
00044b24: goto %0001fa41

.address 0x40E365
0001fa41: 
.address 0x40E365
0001fa4c: #4400 := mem[RDI + 0x20, el]:u64
.address 0x40E365
0001fa4f: CF := mem[RDI + 0x20, el]:u64 < 0
.address 0x40E365
0001fa52: OF := high:1[mem[RDI + 0x20, el]:u64 & (mem[RDI + 0x20, el]:u64 ^ #4400)]
.address 0x40E365
0001fa55: AF := 0x10 = (0x10 & (#4400 ^ mem[RDI + 0x20, el]:u64))
.address 0x40E365
0001fa58: PF := ~low:1[let $1 = #4400 >> 4 ^ #4400 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E365
0001fa5b: SF := high:1[#4400]
.address 0x40E365
0001fa5e: ZF := 0 = #4400
.address 0x40E36A
0001fa67: when ZF goto %00008b27
00044b25: goto %0001fa6d

.address 0x40E36C
0001fa6d: 
.address 0x40E36C
0001fa78: #4402 := RBP - RAX
.address 0x40E36C
0001fa7b: CF := RBP < RAX
.address 0x40E36C
0001fa7e: OF := high:1[(RBP ^ RAX) & (RBP ^ #4402)]
.address 0x40E36C
0001fa81: AF := 0x10 = (0x10 & (#4402 ^ RBP ^ RAX))
.address 0x40E36C
0001fa84: PF := ~low:1[let $1 = #4402 >> 4 ^ #4402 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E36C
0001fa87: SF := high:1[#4402]
.address 0x40E36C
0001fa8a: ZF := 0 = #4402
.address 0x40E36F
0001fa93: when ~CF goto %00008b53
00044b26: goto %0001fa99

.address 0x40E371
0001fa99: 
00044b27: goto %0001fa9c

.address 0x40E378
0001fa9c: 
.address 0x40E378
0001faa1: RDI := mem[RBP, el]:u64
.address 0x40E37C
0001faae: #4404 := RDI
.address 0x40E37C
0001fab1: OF := 0
.address 0x40E37C
0001fab4: CF := 0
.address 0x40E37C
0001fab7: AF := unknown[bits]:u1
.address 0x40E37C
0001faba: PF := ~low:1[let $1 = #4404 >> 4 ^ #4404 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E37C
0001fabd: SF := high:1[#4404]
.address 0x40E37C
0001fac0: ZF := 0 = #4404
.address 0x40E37F
0001faca: when ZF goto %0001fac4
00044b28: goto %0001fb25

.address 0x40E381
0001fb25: 
.address 0x40E381
0001fb2a: RBX := RBP
.address 0x40E384
0001fb32: goto %0001fb2e

.address 0x40E393
0001fb2e: 
.address 0x40E393
0001fb3b: #4411 := mem[R12 + 0x40, el]:u64
.address 0x40E393
0001fb3e: RSP := RSP - 8
.address 0x40E393
0001fb41: mem := mem with [RSP, el]:u64 <- 0x40E398
.address 0x40E393
0001fb45: call #4411 with return %0001fb47

.address 0x40E398
0001fb47: 
.address 0x40E398
0001fb4c: RBX := mem[RBX + 8, el]:u64
.address 0x40E39C
0001fb59: #4412 := RBX
.address 0x40E39C
0001fb5c: OF := 0
.address 0x40E39C
0001fb5f: CF := 0
.address 0x40E39C
0001fb62: AF := unknown[bits]:u1
.address 0x40E39C
0001fb65: PF := ~low:1[let $1 = #4412 >> 4 ^ #4412 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E39C
0001fb68: SF := high:1[#4412]
.address 0x40E39C
0001fb6b: ZF := 0 = #4412
.address 0x40E39F
0001fb75: when ~ZF goto %0001fb6f
00044b29: goto %0001fb81

.address 0x40E3A1
0001fb81: 
.address 0x40E3A1
0001fb86: RAX := mem[R12 + 8, el]:u64
00044b2a: goto %0001fac4

.address 0x40E3A6
0001fac4: 
.address 0x40E3A6
0001fadb: #4406 := RBP
.address 0x40E3A6
0001fade: RBP := RBP + 0x10
.address 0x40E3A6
0001fae1: CF := RBP < #4406
.address 0x40E3A6
0001fae4: OF := ~high:1[#4406] & (high:1[#4406] | high:1[RBP]) & ~(high:1[#4406] & high:1[RBP])
.address 0x40E3A6
0001fae7: AF := 0x10 = (0x10 & (RBP ^ #4406 ^ 0x10))
.address 0x40E3A6
0001faea: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E3A6
0001faed: SF := high:1[RBP]
.address 0x40E3A6
0001faf0: ZF := 0 = RBP
.address 0x40E3AA
0001fafd: #4409 := RAX - RBP
.address 0x40E3AA
0001fb00: CF := RAX < RBP
.address 0x40E3AA
0001fb03: OF := high:1[(RAX ^ RBP) & (RAX ^ #4409)]
.address 0x40E3AA
0001fb06: AF := 0x10 = (0x10 & (#4409 ^ RAX ^ RBP))
.address 0x40E3AA
0001fb09: PF := ~low:1[let $1 = #4409 >> 4 ^ #4409 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E3AA
0001fb0c: SF := high:1[#4409]
.address 0x40E3AA
0001fb0f: ZF := 0 = #4409
.address 0x40E3AD
0001fb18: when ~(CF | ZF) goto %0001fa9c
00044b2b: goto %0001fb1e

.address 0x40E3AF
0001fb1e: 
.address 0x40E3AF
0001fb23: RBP := mem[R12, el]:u64
00044b2c: goto %00008b27

.address 0x40E3B3
00008b27: 
.address 0x40E3B3
00008b3d: #1298 := RBP - RAX
.address 0x40E3B3
00008b40: CF := RBP < RAX
.address 0x40E3B3
00008b43: OF := high:1[(RBP ^ RAX) & (RBP ^ #1298)]
.address 0x40E3B3
00008b46: AF := 0x10 = (0x10 & (#1298 ^ RBP ^ RAX))
.address 0x40E3B3
00008b49: PF := ~low:1[let $1 = #1298 >> 4 ^ #1298 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E3B3
00008b4c: SF := high:1[#1298]
.address 0x40E3B3
00008b4f: ZF := 0 = #1298
.address 0x40E3B6
00008b59: when ~CF goto %00008b53
00044b2d: goto %0001f970

.address 0x40E3B8
0001f970: 
00044b2e: goto %0001f973

.address 0x40E3C0
0001f973: 
.address 0x40E3C0
0001f978: RDI := mem[RBP + 8, el]:u64
.address 0x40E3C4
0001f985: #4391 := RDI
.address 0x40E3C4
0001f988: OF := 0
.address 0x40E3C4
0001f98b: CF := 0
.address 0x40E3C4
0001f98e: AF := unknown[bits]:u1
.address 0x40E3C4
0001f991: PF := ~low:1[let $1 = #4391 >> 4 ^ #4391 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E3C4
0001f994: SF := high:1[#4391]
.address 0x40E3C4
0001f997: ZF := 0 = #4391
.address 0x40E3C7
0001f9a1: when ZF goto %0001f99b
00044b2f: goto %0001f9f5

.address 0x40E3C9
0001f9f5: 
00044b30: goto %0001f9f8

.address 0x40E3D0
0001f9f8: 
.address 0x40E3D0
0001f9fd: RBX := mem[RDI + 8, el]:u64
.address 0x40E3D4
0001fa06: RSP := RSP - 8
.address 0x40E3D4
0001fa09: mem := mem with [RSP, el]:u64 <- 0x40E3D9
.address 0x40E3D4
0001fa0c: call @sub_403e70 with return %0001fa0e

.address 0x40E3D9
0001fa0e: 
.address 0x40E3D9
0001fa19: #4398 := RBX
.address 0x40E3D9
0001fa1c: OF := 0
.address 0x40E3D9
0001fa1f: CF := 0
.address 0x40E3D9
0001fa22: AF := unknown[bits]:u1
.address 0x40E3D9
0001fa25: PF := ~low:1[let $1 = #4398 >> 4 ^ #4398 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E3D9
0001fa28: SF := high:1[#4398]
.address 0x40E3D9
0001fa2b: ZF := 0 = #4398
.address 0x40E3DC
0001fa32: RDI := RBX
.address 0x40E3DF
0001fa3b: when ~ZF goto %0001f9f8
00044b31: goto %0001f99b

.address 0x40E3E1
0001f99b: 
.address 0x40E3E1
0001f9b2: #4393 := RBP
.address 0x40E3E1
0001f9b5: RBP := RBP + 0x10
.address 0x40E3E1
0001f9b8: CF := RBP < #4393
.address 0x40E3E1
0001f9bb: OF := ~high:1[#4393] & (high:1[#4393] | high:1[RBP]) & ~(high:1[#4393] & high:1[RBP])
.address 0x40E3E1
0001f9be: AF := 0x10 = (0x10 & (RBP ^ #4393 ^ 0x10))
.address 0x40E3E1
0001f9c1: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E3E1
0001f9c4: SF := high:1[RBP]
.address 0x40E3E1
0001f9c7: ZF := 0 = RBP
.address 0x40E3E5
0001f9d4: #4396 := mem[R12 + 8, el]:u64 - RBP
.address 0x40E3E5
0001f9d7: CF := mem[R12 + 8, el]:u64 < RBP
.address 0x40E3E5
0001f9da: OF := high:1[(mem[R12 + 8, el]:u64 ^ RBP) & (mem[R12 + 8, el]:u64 ^ #4396)]
.address 0x40E3E5
0001f9dd: AF := 0x10 = (0x10 & (#4396 ^ mem[R12 + 8, el]:u64 ^ RBP))
.address 0x40E3E5
0001f9e0: PF := ~low:1[let $1 = #4396 >> 4 ^ #4396 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E3E5
0001f9e3: SF := high:1[#4396]
.address 0x40E3E5
0001f9e6: ZF := 0 = #4396
.address 0x40E3EA
0001f9ef: when ~(CF | ZF) goto %0001f973
00044b32: goto %00008b53

.address 0x40E3EC
00008b53: 
.address 0x40E3EC
00008b63: RDI := mem[R12 + 0x48, el]:u64
.address 0x40E3F1
00008b70: #1300 := RDI
.address 0x40E3F1
00008b73: OF := 0
.address 0x40E3F1
00008b76: CF := 0
.address 0x40E3F1
00008b79: AF := unknown[bits]:u1
.address 0x40E3F1
00008b7c: PF := ~low:1[let $1 = #1300 >> 4 ^ #1300 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E3F1
00008b7f: SF := high:1[#1300]
.address 0x40E3F1
00008b82: ZF := 0 = #1300
.address 0x40E3F4
00008b8c: when ZF goto %00008b86
00044b33: goto %0001f924

.address 0x40E3F6
0001f924: 
00044b34: goto %0001f927

.address 0x40E400
0001f927: 
.address 0x40E400
0001f92c: RBX := mem[RDI + 8, el]:u64
.address 0x40E404
0001f935: RSP := RSP - 8
.address 0x40E404
0001f938: mem := mem with [RSP, el]:u64 <- 0x40E409
.address 0x40E404
0001f93b: call @sub_403e70 with return %0001f93d

.address 0x40E409
0001f93d: 
.address 0x40E409
0001f948: #4389 := RBX
.address 0x40E409
0001f94b: OF := 0
.address 0x40E409
0001f94e: CF := 0
.address 0x40E409
0001f951: AF := unknown[bits]:u1
.address 0x40E409
0001f954: PF := ~low:1[let $1 = #4389 >> 4 ^ #4389 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E409
0001f957: SF := high:1[#4389]
.address 0x40E409
0001f95a: ZF := 0 = #4389
.address 0x40E40C
0001f961: RDI := RBX
.address 0x40E40F
0001f96a: when ~ZF goto %0001f927
00044b35: goto %00008b86

.address 0x40E411
00008b86: 
.address 0x40E411
00008b96: RDI := mem[R12, el]:u64
.address 0x40E415
00008b9f: RSP := RSP - 8
.address 0x40E415
00008ba2: mem := mem with [RSP, el]:u64 <- 0x40E41A
.address 0x40E415
00008ba5: call @sub_403e70 with return %00008ba7

.address 0x40E41A
00008ba7: 
.address 0x40E41A
00008bad: RBX := mem[RSP, el]:u64
.address 0x40E41A
00008bb0: RSP := RSP + 8
.address 0x40E41B
00008bb7: RDI := R12
.address 0x40E41E
00008bbf: RBP := mem[RSP, el]:u64
.address 0x40E41E
00008bc2: RSP := RSP + 8
.address 0x40E41F
00008bca: R12 := mem[RSP, el]:u64
.address 0x40E41F
00008bcd: RSP := RSP + 8
.address 0x40E421
00008bd4: call @sub_403e70 with noreturn

.address 0x40E390
0001fb6f: 
.address 0x40E390
0001fb7f: RDI := mem[RBX, el]:u64
00044b36: goto %0001fb2e


.address 0x40E430
000442d9: sub sub_40e430()
.address 0x40E430
00008bd9: 
.address 0x40E430
00008be0: #1302 := R12
.address 0x40E430
00008be3: RSP := RSP - 8
.address 0x40E430
00008be6: mem := mem with [RSP, el]:u64 <- #1302
.address 0x40E432
00008bef: #1303 := RBP
.address 0x40E432
00008bf2: RSP := RSP - 8
.address 0x40E432
00008bf5: mem := mem with [RSP, el]:u64 <- #1303
.address 0x40E433
00008bfc: RBP := RDI
.address 0x40E436
00008c05: #1304 := RBX
.address 0x40E436
00008c08: RSP := RSP - 8
.address 0x40E436
00008c0b: mem := mem with [RSP, el]:u64 <- #1304
.address 0x40E437
00008c19: #1305 := RSP
.address 0x40E437
00008c1c: RSP := RSP - 0x60
.address 0x40E437
00008c1f: CF := #1305 < 0x60
.address 0x40E437
00008c22: OF := high:1[(#1305 ^ 0x60) & (#1305 ^ RSP)]
.address 0x40E437
00008c25: AF := 0x10 = (0x10 & (RSP ^ #1305 ^ 0x60))
.address 0x40E437
00008c28: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E437
00008c2b: SF := high:1[RSP]
.address 0x40E437
00008c2e: ZF := 0 = RSP
.address 0x40E43B
00008c35: R12 := mem[RDI + 0x28, el]:u64
.address 0x40E43F
00008c3c: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x40E448
00008c43: mem := mem with [RSP + 0x58, el]:u64 <- RAX
.address 0x40E44D
00008c50: RAX := 0
.address 0x40E44D
00008c53: AF := unknown[bits]:u1
.address 0x40E44D
00008c56: ZF := 1
.address 0x40E44D
00008c59: PF := 1
.address 0x40E44D
00008c5c: OF := 0
.address 0x40E44D
00008c5f: CF := 0
.address 0x40E44D
00008c62: SF := 0
.address 0x40E44F
00008c6f: #1308 := mem[R12 + 0x10]
.address 0x40E44F
00008c72: CF := mem[R12 + 0x10] < 0
.address 0x40E44F
00008c75: OF := high:1[mem[R12 + 0x10] & (mem[R12 + 0x10] ^ #1308)]
.address 0x40E44F
00008c78: AF := 0x10 = (0x10 & (#1308 ^ mem[R12 + 0x10]))
.address 0x40E44F
00008c7b: PF := ~low:1[let $1 = #1308 >> 4 ^ #1308 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E44F
00008c7e: SF := high:1[#1308]
.address 0x40E44F
00008c81: ZF := 0 = #1308
.address 0x40E455
00008c8b: when ~ZF goto %00008c85
00044b37: goto %0001f8f0

.address 0x40E457
0001f8f0: 
.address 0x40E457
0001f8fb: #4387 := RSI
.address 0x40E457
0001f8fe: OF := 0
.address 0x40E457
0001f901: CF := 0
.address 0x40E457
0001f904: AF := unknown[bits]:u1
.address 0x40E457
0001f907: PF := ~low:1[let $1 = #4387 >> 4 ^ #4387 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E457
0001f90a: SF := high:1[#4387]
.address 0x40E457
0001f90d: ZF := 0 = #4387
.address 0x40E45A
0001f916: when SF goto %00008e34
00044b38: goto %0001f91c

.address 0x40E5D8
00008e34: 
.address 0x40E5D8
00008e39: RAX := RSI
.address 0x40E5DB
00008e40: YMM0 := extract:255:128[YMM0].0
.address 0x40E5DF
00008e4e: #1320 := RAX
.address 0x40E5DF
00008e51: RAX := RAX >> 1
.address 0x40E5DF
00008e54: CF := high:1[#1320 << 0x3F]
.address 0x40E5DF
00008e57: SF := high:1[RAX]
.address 0x40E5DF
00008e5a: ZF := 0 = RAX
.address 0x40E5DF
00008e5d: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E5DF
00008e60: AF := unknown[bits]:u1
.address 0x40E5DF
00008e63: OF := high:1[#1320]
.address 0x40E5E2
00008e70: RSI := pad:64[low:32[RSI] & 1]
.address 0x40E5E2
00008e73: OF := 0
.address 0x40E5E2
00008e76: CF := 0
.address 0x40E5E2
00008e79: AF := unknown[bits]:u1
.address 0x40E5E2
00008e7c: PF := ~low:1[let $1 = low:32[RSI] >> 4 ^ low:32[RSI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E5E2
00008e7f: SF := high:1[low:32[RSI]]
.address 0x40E5E2
00008e82: ZF := 0 = low:32[RSI]
.address 0x40E5E5
00008e8f: RAX := RAX | RSI
.address 0x40E5E5
00008e92: OF := 0
.address 0x40E5E5
00008e95: CF := 0
.address 0x40E5E5
00008e98: AF := unknown[bits]:u1
.address 0x40E5E5
00008e9b: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E5E5
00008e9e: SF := high:1[RAX]
.address 0x40E5E5
00008ea1: ZF := 0 = RAX
.address 0x40E5F1
00008eab: goto %00008ea7

.address 0x40E460
0001f91c: 
.address 0x40E460
0001f921: YMM0 := extract:255:128[YMM0].0
00044b39: goto %00008ea7

.address 0x40E469
00008ea7: 
.address 0x40E477
00008eb5: when ~CF goto %00008d6a
00044b3a: goto %00008ebb

.address 0x40E47D
00008ebb: 
.address 0x40E484
00008ec4: when CF goto %00008ebe
00044b3b: goto %00008f48

.address 0x40E600
00008ebe: 
.address 0x40E605
00008ecf: goto %00008c85

.address 0x40E48A
00008f48: 
.address 0x40E492
00008f4e: RAX := 0x8000000000000000
.address 0x40E4A1
00008f5c: RSI := RSI ^ RAX
.address 0x40E4A1
00008f5f: OF := 0
.address 0x40E4A1
00008f62: CF := 0
.address 0x40E4A1
00008f65: AF := unknown[bits]:u1
.address 0x40E4A1
00008f68: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E4A1
00008f6b: SF := high:1[RSI]
.address 0x40E4A1
00008f6e: ZF := 0 = RSI
00044b3c: goto %00008c85

.address 0x40E4A8
00008c85: 
.address 0x40E4A8
00008c95: RDI := RSI
.address 0x40E4AB
00008c9e: RSP := RSP - 8
.address 0x40E4AB
00008ca1: mem := mem with [RSP, el]:u64 <- 0x40E4B0
.address 0x40E4AB
00008ca4: call @sub_40d890 with return %00008ca6

.address 0x40E4B0
00008ca6: 
.address 0x40E4B0
00008cab: RDX := 8
.address 0x40E4B5
00008cb2: RBX := RAX
.address 0x40E4B8
00008cbf: RCX := 0
.address 0x40E4B8
00008cc2: AF := unknown[bits]:u1
.address 0x40E4B8
00008cc5: ZF := 1
.address 0x40E4B8
00008cc8: PF := 1
.address 0x40E4B8
00008ccb: OF := 0
.address 0x40E4B8
00008cce: CF := 0
.address 0x40E4B8
00008cd1: SF := 0
.address 0x40E4BA
00008cd8: RAX := RDX
.address 0x40E4BD
00008ce7: #1310 := pad:128[RAX] * pad:128[RBX]
.address 0x40E4BD
00008cea: RAX := extract:63:0[#1310]
.address 0x40E4BD
00008ced: RDX := extract:127:64[#1310]
.address 0x40E4BD
00008cf0: OF := extract:127:64[#1310] <> 0
.address 0x40E4BD
00008cf3: CF := extract:127:64[#1310] <> 0
.address 0x40E4BD
00008cf6: SF := unknown[bits]:u1
.address 0x40E4BD
00008cf9: ZF := unknown[bits]:u1
.address 0x40E4BD
00008cfc: AF := unknown[bits]:u1
.address 0x40E4BD
00008cff: PF := unknown[bits]:u1
.address 0x40E4C0
00008d09: when OF goto %00008d03
00044b3d: goto %00008d17

.address 0x40E4C6
00008d17: 
.address 0x40E4C6
00008d27: #1311 := RAX
.address 0x40E4C6
00008d2a: OF := 0
.address 0x40E4C6
00008d2d: CF := 0
.address 0x40E4C6
00008d30: AF := unknown[bits]:u1
.address 0x40E4C6
00008d33: PF := ~low:1[let $1 = #1311 >> 4 ^ #1311 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E4C6
00008d36: SF := high:1[#1311]
.address 0x40E4C6
00008d39: ZF := 0 = #1311
.address 0x40E4C9
00008d40: RAX := 1
.address 0x40E4CE
00008d47: RCX := if SF then RAX else RCX
.address 0x40E4D2
00008d54: #1313 := RBX
.address 0x40E4D2
00008d57: OF := 0
.address 0x40E4D2
00008d5a: CF := 0
.address 0x40E4D2
00008d5d: AF := unknown[bits]:u1
.address 0x40E4D2
00008d60: PF := ~low:1[let $1 = #1313 >> 4 ^ #1313 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E4D2
00008d63: SF := high:1[#1313]
.address 0x40E4D2
00008d66: ZF := 0 = #1313
.address 0x40E4D5
00008d70: when ZF goto %00008d6a
00044b3e: goto %00008f76

.address 0x40E4DB
00008f76: 
.address 0x40E4DB
00008f81: RCX := pad:64[low:32[RCX] & 1]
.address 0x40E4DB
00008f84: OF := 0
.address 0x40E4DB
00008f87: CF := 0
.address 0x40E4DB
00008f8a: AF := unknown[bits]:u1
.address 0x40E4DB
00008f8d: PF := ~low:1[let $1 = low:32[RCX] >> 4 ^ low:32[RCX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E4DB
00008f90: SF := high:1[low:32[RCX]]
.address 0x40E4DB
00008f93: ZF := 0 = low:32[RCX]
.address 0x40E4DE
00008f9c: when ~ZF goto %00008d6a
00044b3f: goto %00008fa2

.address 0x40E4E4
00008fa2: 
.address 0x40E4E4
00008fad: #1326 := mem[RBP + 0x10, el]:u64 - RBX
.address 0x40E4E4
00008fb0: CF := mem[RBP + 0x10, el]:u64 < RBX
.address 0x40E4E4
00008fb3: OF := high:1[(mem[RBP + 0x10, el]:u64 ^ RBX) & (mem[RBP + 0x10, el]:u64 ^ #1326)]
.address 0x40E4E4
00008fb6: AF := 0x10 = (0x10 & (#1326 ^ mem[RBP + 0x10, el]:u64 ^ RBX))
.address 0x40E4E4
00008fb9: PF := ~low:1[let $1 = #1326 >> 4 ^ #1326 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E4E4
00008fbc: SF := high:1[#1326]
.address 0x40E4E4
00008fbf: ZF := 0 = #1326
.address 0x40E4E8
00008fc8: when ZF goto %00008ed4
00044b40: goto %00008fce

.address 0x40E610
00008ed4: 
.address 0x40E610
00008ed9: RBX := 1
.address 0x40E615
00008ee0: goto %00008d94

.address 0x40E4EE
00008fce: 
.address 0x40E4EE
00008fd3: RSI := 0x10
.address 0x40E4F3
00008fda: RDI := RBX
.address 0x40E4F6
00008fe3: RSP := RSP - 8
.address 0x40E4F6
00008fe6: mem := mem with [RSP, el]:u64 <- 0x40E4FB
.address 0x40E4F6
00008fe9: call @sub_403b00 with return %00008feb

.address 0x40E4FB
00008feb: 
.address 0x40E4FB
00008ff6: #1328 := RAX
.address 0x40E4FB
00008ff9: OF := 0
.address 0x40E4FB
00008ffc: CF := 0
.address 0x40E4FB
00008fff: AF := unknown[bits]:u1
.address 0x40E4FB
00009002: PF := ~low:1[let $1 = #1328 >> 4 ^ #1328 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E4FB
00009005: SF := high:1[#1328]
.address 0x40E4FB
00009008: ZF := 0 = #1328
.address 0x40E4FE
0000900f: mem := mem with [RSP, el]:u64 <- RAX
.address 0x40E502
00009018: when ZF goto %00008d6a
00044b41: goto %0000901e

.address 0x40E5B0
00008d6a: 
.address 0x40E5B0
00008d80: RBX := 0
.address 0x40E5B0
00008d83: AF := unknown[bits]:u1
.address 0x40E5B0
00008d86: ZF := 1
.address 0x40E5B0
00008d89: PF := 1
.address 0x40E5B0
00008d8c: OF := 0
.address 0x40E5B0
00008d8f: CF := 0
.address 0x40E5B0
00008d92: SF := 0
00044b42: goto %00008d94

.address 0x40E508
0000901e: 
.address 0x40E508
00009023: mem := mem with [RSP + 0x10, el]:u64 <- RBX
.address 0x40E50D
00009031: #1330 := RBX
.address 0x40E50D
00009034: RBX := RBX << 4
.address 0x40E50D
00009037: CF := low:1[#1330 >> 0x3C]
.address 0x40E50D
0000903a: SF := high:1[RBX]
.address 0x40E50D
0000903d: ZF := 0 = RBX
.address 0x40E50D
00009040: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E50D
00009043: AF := unknown[bits]:u1
.address 0x40E50D
00009046: OF := unknown[bits]:u1
.address 0x40E511
0000904d: mem := mem with [RSP + 0x28, el]:u64 <- R12
.address 0x40E516
0000905c: #1332 := RBX
.address 0x40E516
0000905f: #1333 := RAX
.address 0x40E516
00009062: RBX := RBX + #1333
.address 0x40E516
00009065: CF := RBX < #1332
.address 0x40E516
00009068: OF := high:1[#1332] = high:1[#1333] & (high:1[#1332] | high:1[RBX]) & ~(
high:1[#1332] & high:1[RBX])
.address 0x40E516
0000906b: AF := 0x10 = (0x10 & (RBX ^ #1332 ^ #1333))
.address 0x40E516
0000906e: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E516
00009071: SF := high:1[RBX]
.address 0x40E516
00009074: ZF := 0 = RBX
.address 0x40E519
0000907b: RAX := mem[RBP + 0x30, el]:u64
.address 0x40E51D
00009082: R12 := RSP
.address 0x40E520
0000908f: RDX := 0
.address 0x40E520
00009092: AF := unknown[bits]:u1
.address 0x40E520
00009095: ZF := 1
.address 0x40E520
00009098: PF := 1
.address 0x40E520
0000909b: OF := 0
.address 0x40E520
0000909e: CF := 0
.address 0x40E520
000090a1: SF := 0
.address 0x40E522
000090a8: RSI := RBP
.address 0x40E525
000090af: RDI := R12
.address 0x40E528
000090b6: mem := mem with [RSP + 8, el]:u64 <- RBX
.address 0x40E52D
000090bd: mem := mem with [RSP + 0x18, el]:u64 <- 0
.address 0x40E536
000090c4: mem := mem with [RSP + 0x30, el]:u64 <- RAX
.address 0x40E53B
000090cb: RAX := mem[RBP + 0x38, el]:u64
.address 0x40E53F
000090d2: mem := mem with [RSP + 0x20, el]:u64 <- 0
.address 0x40E548
000090d9: mem := mem with [RSP + 0x38, el]:u64 <- RAX
.address 0x40E54D
000090e0: RAX := mem[RBP + 0x40, el]:u64
.address 0x40E551
000090e7: mem := mem with [RSP + 0x40, el]:u64 <- RAX
.address 0x40E556
000090ee: RAX := mem[RBP + 0x48, el]:u64
.address 0x40E55A
000090f5: mem := mem with [RSP + 0x48, el]:u64 <- RAX
.address 0x40E55F
000090fe: RSP := RSP - 8
.address 0x40E55F
00009101: mem := mem with [RSP, el]:u64 <- 0x40E564
.address 0x40E55F
00009104: call @sub_40db20 with return %00009106

.address 0x40E564
00009106: 
.address 0x40E564
00009111: #1335 := low:8[RAX]
.address 0x40E564
00009114: OF := 0
.address 0x40E564
00009117: CF := 0
.address 0x40E564
0000911a: AF := unknown[bits]:u1
.address 0x40E564
0000911d: PF := ~low:1[let $1 = #1335 >> 4 ^ #1335 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E564
00009120: SF := high:1[#1335]
.address 0x40E564
00009123: ZF := 0 = #1335
.address 0x40E566
0000912a: RBX := pad:64[low:32[RAX]]
.address 0x40E568
00009133: when ~ZF goto %00008ee5
00044b43: goto %00009139

.address 0x40E620
00008ee5: 
.address 0x40E620
00008eea: RDI := mem[RBP, el]:u64
.address 0x40E624
00008ef3: RSP := RSP - 8
.address 0x40E624
00008ef6: mem := mem with [RSP, el]:u64 <- 0x40E629
.address 0x40E624
00008ef9: call @sub_403e70 with return %00008efb

.address 0x40E629
00008efb: 
.address 0x40E629
00008f00: RAX := mem[RSP, el]:u64
.address 0x40E62D
00008f07: mem := mem with [RBP, el]:u64 <- RAX
.address 0x40E631
00008f0e: RAX := mem[RSP + 8, el]:u64
.address 0x40E636
00008f15: mem := mem with [RBP + 8, el]:u64 <- RAX
.address 0x40E63A
00008f1c: RAX := mem[RSP + 0x10, el]:u64
.address 0x40E63F
00008f23: mem := mem with [RBP + 0x10, el]:u64 <- RAX
.address 0x40E643
00008f2a: RAX := mem[RSP + 0x18, el]:u64
.address 0x40E648
00008f31: mem := mem with [RBP + 0x18, el]:u64 <- RAX
.address 0x40E64C
00008f38: RAX := mem[RSP + 0x48, el]:u64
.address 0x40E651
00008f3f: mem := mem with [RBP + 0x48, el]:u64 <- RAX
.address 0x40E655
00008f46: goto %00008d94

.address 0x40E56E
00009139: 
.address 0x40E56E
0000913e: RAX := mem[RSP + 0x48, el]:u64
.address 0x40E573
00009145: RDX := 1
.address 0x40E578
0000914c: RSI := R12
.address 0x40E57B
00009153: RDI := RBP
.address 0x40E57E
0000915a: mem := mem with [RBP + 0x48, el]:u64 <- RAX
.address 0x40E582
00009163: RSP := RSP - 8
.address 0x40E582
00009166: mem := mem with [RSP, el]:u64 <- 0x40E587
.address 0x40E582
00009169: call @sub_40db20 with return %0000916b

.address 0x40E587
0000916b: 
.address 0x40E587
00009176: #1337 := low:8[RAX]
.address 0x40E587
00009179: OF := 0
.address 0x40E587
0000917c: CF := 0
.address 0x40E587
0000917f: AF := unknown[bits]:u1
.address 0x40E587
00009182: PF := ~low:1[let $1 = #1337 >> 4 ^ #1337 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E587
00009185: SF := high:1[#1337]
.address 0x40E587
00009188: ZF := 0 = #1337
.address 0x40E589
00009192: when ZF goto %0000918c
00044b44: goto %0001f868

.address 0x40E58F
0001f868: 
.address 0x40E58F
0001f873: RDX := 0
.address 0x40E58F
0001f876: AF := unknown[bits]:u1
.address 0x40E58F
0001f879: ZF := 1
.address 0x40E58F
0001f87c: PF := 1
.address 0x40E58F
0001f87f: OF := 0
.address 0x40E58F
0001f882: CF := 0
.address 0x40E58F
0001f885: SF := 0
.address 0x40E591
0001f88c: RSI := R12
.address 0x40E594
0001f893: RDI := RBP
.address 0x40E597
0001f89c: RSP := RSP - 8
.address 0x40E597
0001f89f: mem := mem with [RSP, el]:u64 <- 0x40E59C
.address 0x40E597
0001f8a2: call @sub_40db20 with return %0001f8a4

.address 0x40E59C
0001f8a4: 
.address 0x40E59C
0001f8af: #4385 := low:8[RAX]
.address 0x40E59C
0001f8b2: OF := 0
.address 0x40E59C
0001f8b5: CF := 0
.address 0x40E59C
0001f8b8: AF := unknown[bits]:u1
.address 0x40E59C
0001f8bb: PF := ~low:1[let $1 = #4385 >> 4 ^ #4385 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E59C
0001f8be: SF := high:1[#4385]
.address 0x40E59C
0001f8c1: ZF := 0 = #4385
.address 0x40E59E
0001f8ca: when ZF goto %0000918c
00044b45: goto %0001f8d0

.address 0x40E669
0000918c: 
.address 0x40E669
0000919e: RSP := RSP - 8
.address 0x40E669
000091a1: mem := mem with [RSP, el]:u64 <- 0x40E66E
.address 0x40E669
000091a4: call @sub_4037e0 with return %000091a6

.address 0x40E66E
000091a6: 
00044b46: call @sub_40e670 with noreturn

.address 0x40E5A4
0001f8d0: 
.address 0x40E5A4
0001f8d5: RDI := mem[RSP, el]:u64
.address 0x40E5A8
0001f8de: RSP := RSP - 8
.address 0x40E5A8
0001f8e1: mem := mem with [RSP, el]:u64 <- 0x40E5AD
.address 0x40E5A8
0001f8e4: call @sub_403e70 with return %0001f8e6

.address 0x40E5AD
0001f8e6: 
.address 0x40E5AD
0001f8eb: goto %00008d94

.address 0x40E5B2
00008d94: 
.address 0x40E5B2
00008d99: RCX := mem[RSP + 0x58, el]:u64
.address 0x40E5B7
00008da6: RCX := RCX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x40E5B7
00008da9: OF := 0
.address 0x40E5B7
00008dac: CF := 0
.address 0x40E5B7
00008daf: AF := unknown[bits]:u1
.address 0x40E5B7
00008db2: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E5B7
00008db5: SF := high:1[RCX]
.address 0x40E5B7
00008db8: ZF := 0 = RCX
.address 0x40E5C0
00008dbf: RAX := pad:64[low:32[RBX]]
.address 0x40E5C2
00008dc9: when ~ZF goto %00008dc3
00044b47: goto %00008ddd

.address 0x40E65A
00008dc3: 
.address 0x40E65A
00008dd5: RSP := RSP - 8
.address 0x40E65A
00008dd8: mem := mem with [RSP, el]:u64 <- 0x40E65F
.address 0x40E65A
00008ddb: call @sub_403970 with return %00008d03

.address 0x40E65F
00008d03: 
.address 0x40E65F
00008d13: RCX := 1
.address 0x40E664
00008d1b: goto %00008d17

.address 0x40E5C8
00008ddd: 
.address 0x40E5C8
00008de9: #1316 := RSP
.address 0x40E5C8
00008dec: RSP := RSP + 0x60
.address 0x40E5C8
00008def: CF := RSP < #1316
.address 0x40E5C8
00008df2: OF := ~high:1[#1316] & (high:1[#1316] | high:1[RSP]) & ~(high:1[#1316] & high:1[RSP])
.address 0x40E5C8
00008df5: AF := 0x10 = (0x10 & (RSP ^ #1316 ^ 0x60))
.address 0x40E5C8
00008df8: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E5C8
00008dfb: SF := high:1[RSP]
.address 0x40E5C8
00008dfe: ZF := 0 = RSP
.address 0x40E5CC
00008e06: RBX := mem[RSP, el]:u64
.address 0x40E5CC
00008e09: RSP := RSP + 8
.address 0x40E5CD
00008e11: RBP := mem[RSP, el]:u64
.address 0x40E5CD
00008e14: RSP := RSP + 8
.address 0x40E5CE
00008e1c: R12 := mem[RSP, el]:u64
.address 0x40E5CE
00008e1f: RSP := RSP + 8
.address 0x40E5D0
00008e28: #1319 := mem[RSP, el]:u64
.address 0x40E5D0
00008e2b: RSP := RSP + 8
.address 0x40E5D0
00008e2f: call #1319 with noreturn


.address 0x40E670
000442eb: sub sub_40e670()
.address 0x40E670
000091a9: 
.address 0x40E670
000091b0: #1339 := R13
.address 0x40E670
000091b3: RSP := RSP - 8
.address 0x40E670
000091b6: mem := mem with [RSP, el]:u64 <- #1339
.address 0x40E672
000091bf: #1340 := R12
.address 0x40E672
000091c2: RSP := RSP - 8
.address 0x40E672
000091c5: mem := mem with [RSP, el]:u64 <- #1340
.address 0x40E674
000091ce: #1341 := RBP
.address 0x40E674
000091d1: RSP := RSP - 8
.address 0x40E674
000091d4: mem := mem with [RSP, el]:u64 <- #1341
.address 0x40E675
000091dd: #1342 := RBX
.address 0x40E675
000091e0: RSP := RSP - 8
.address 0x40E675
000091e3: mem := mem with [RSP, el]:u64 <- #1342
.address 0x40E676
000091f1: #1343 := RSP
.address 0x40E676
000091f4: RSP := RSP - 0x18
.address 0x40E676
000091f7: CF := #1343 < 0x18
.address 0x40E676
000091fa: OF := high:1[(#1343 ^ 0x18) & (#1343 ^ RSP)]
.address 0x40E676
000091fd: AF := 0x10 = (0x10 & (RSP ^ #1343 ^ 0x18))
.address 0x40E676
00009200: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E676
00009203: SF := high:1[RSP]
.address 0x40E676
00009206: ZF := 0 = RSP
.address 0x40E67A
0000920d: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x40E683
00009214: mem := mem with [RSP + 8, el]:u64 <- RAX
.address 0x40E688
00009221: RAX := 0
.address 0x40E688
00009224: AF := unknown[bits]:u1
.address 0x40E688
00009227: ZF := 1
.address 0x40E688
0000922a: PF := 1
.address 0x40E688
0000922d: OF := 0
.address 0x40E688
00009230: CF := 0
.address 0x40E688
00009233: SF := 0
.address 0x40E68A
00009240: #1346 := RSI
.address 0x40E68A
00009243: OF := 0
.address 0x40E68A
00009246: CF := 0
.address 0x40E68A
00009249: AF := unknown[bits]:u1
.address 0x40E68A
0000924c: PF := ~low:1[let $1 = #1346 >> 4 ^ #1346 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E68A
0000924f: SF := high:1[#1346]
.address 0x40E68A
00009252: ZF := 0 = #1346
.address 0x40E68D
0000925c: when ZF goto %00009256
00044b48: goto %0001f792

.address 0x40E693
0001f792: 
.address 0x40E693
0001f797: R12 := RSP
.address 0x40E696
0001f7a4: RCX := 0
.address 0x40E696
0001f7a7: AF := unknown[bits]:u1
.address 0x40E696
0001f7aa: ZF := 1
.address 0x40E696
0001f7ad: PF := 1
.address 0x40E696
0001f7b0: OF := 0
.address 0x40E696
0001f7b3: CF := 0
.address 0x40E696
0001f7b6: SF := 0
.address 0x40E698
0001f7bd: R13 := RDX
.address 0x40E69B
0001f7c4: RDX := R12
.address 0x40E69E
0001f7cb: RBX := RDI
.address 0x40E6A1
0001f7d2: RBP := RSI
.address 0x40E6A4
0001f7db: RSP := RSP - 8
.address 0x40E6A4
0001f7de: mem := mem with [RSP, el]:u64 <- 0x40E6A9
.address 0x40E6A4
0001f7e1: call @sub_40d980 with return %0001f7e3

.address 0x40E6A9
0001f7e3: 
.address 0x40E6A9
0001f7ee: #4381 := RAX
.address 0x40E6A9
0001f7f1: OF := 0
.address 0x40E6A9
0001f7f4: CF := 0
.address 0x40E6A9
0001f7f7: AF := unknown[bits]:u1
.address 0x40E6A9
0001f7fa: PF := ~low:1[let $1 = #4381 >> 4 ^ #4381 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E6A9
0001f7fd: SF := high:1[#4381]
.address 0x40E6A9
0001f800: ZF := 0 = #4381
.address 0x40E6AC
0001f807: RDX := RAX
.address 0x40E6AF
0001f810: when ZF goto %0001f1f8
00044b49: goto %0001f816

.address 0x40E6E0
0001f1f8: 
.address 0x40E6E0
0001f1fd: RAX := mem[RBX + 0x18, el]:u64
.address 0x40E6E4
0001f20a: #4339 := RAX
.address 0x40E6E4
0001f20d: OF := 0
.address 0x40E6E4
0001f210: CF := 0
.address 0x40E6E4
0001f213: AF := unknown[bits]:u1
.address 0x40E6E4
0001f216: PF := ~low:1[let $1 = #4339 >> 4 ^ #4339 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E6E4
0001f219: SF := high:1[#4339]
.address 0x40E6E4
0001f21c: ZF := 0 = #4339
.address 0x40E6E7
0001f226: when SF goto %0001f220
00044b4a: goto %0001f750

.address 0x40E760
0001f220: 
.address 0x40E760
0001f230: RDX := RAX
.address 0x40E763
0001f237: YMM1 := extract:255:128[YMM1].0
.address 0x40E767
0001f244: RAX := pad:64[low:32[RAX] & 1]
.address 0x40E767
0001f247: OF := 0
.address 0x40E767
0001f24a: CF := 0
.address 0x40E767
0001f24d: AF := unknown[bits]:u1
.address 0x40E767
0001f250: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E767
0001f253: SF := high:1[low:32[RAX]]
.address 0x40E767
0001f256: ZF := 0 = low:32[RAX]
.address 0x40E76A
0001f264: #4342 := RDX
.address 0x40E76A
0001f267: RDX := RDX >> 1
.address 0x40E76A
0001f26a: CF := high:1[#4342 << 0x3F]
.address 0x40E76A
0001f26d: SF := high:1[RDX]
.address 0x40E76A
0001f270: ZF := 0 = RDX
.address 0x40E76A
0001f273: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E76A
0001f276: AF := unknown[bits]:u1
.address 0x40E76A
0001f279: OF := high:1[#4342]
.address 0x40E76D
0001f286: RDX := RDX | RAX
.address 0x40E76D
0001f289: OF := 0
.address 0x40E76D
0001f28c: CF := 0
.address 0x40E76D
0001f28f: AF := unknown[bits]:u1
.address 0x40E76D
0001f292: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E76D
0001f295: SF := high:1[RDX]
.address 0x40E76D
0001f298: ZF := 0 = RDX
.address 0x40E770
0001f29f: RAX := mem[RBX + 0x10, el]:u64
.address 0x40E779
0001f2a7: RDX := mem[RBX + 0x28, el]:u64
.address 0x40E77D
0001f2b4: #4345 := RAX
.address 0x40E77D
0001f2b7: OF := 0
.address 0x40E77D
0001f2ba: CF := 0
.address 0x40E77D
0001f2bd: AF := unknown[bits]:u1
.address 0x40E77D
0001f2c0: PF := ~low:1[let $1 = #4345 >> 4 ^ #4345 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E77D
0001f2c3: SF := high:1[#4345]
.address 0x40E77D
0001f2c6: ZF := 0 = #4345
.address 0x40E784
0001f2d1: when ~SF goto %0001f2cb
00044b4b: goto %0001f6d5

.address 0x40E6E9
0001f750: 
.address 0x40E6E9
0001f755: YMM1 := extract:255:128[YMM1].0
.address 0x40E6ED
0001f75c: RDX := mem[RBX + 0x28, el]:u64
.address 0x40E6F6
0001f764: RAX := mem[RBX + 0x10, el]:u64
.address 0x40E6FA
0001f771: #4379 := RAX
.address 0x40E6FA
0001f774: OF := 0
.address 0x40E6FA
0001f777: CF := 0
.address 0x40E6FA
0001f77a: AF := unknown[bits]:u1
.address 0x40E6FA
0001f77d: PF := ~low:1[let $1 = #4379 >> 4 ^ #4379 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E6FA
0001f780: SF := high:1[#4379]
.address 0x40E6FA
0001f783: ZF := 0 = #4379
.address 0x40E6FD
0001f78c: when SF goto %0001f6d5
00044b4c: goto %0001f2cb

.address 0x40E78A
0001f6d5: 
.address 0x40E78A
0001f6da: RCX := RAX
.address 0x40E78D
0001f6e1: YMM0 := extract:255:128[YMM0].0
.address 0x40E791
0001f6ef: #4375 := RCX
.address 0x40E791
0001f6f2: RCX := RCX >> 1
.address 0x40E791
0001f6f5: CF := high:1[#4375 << 0x3F]
.address 0x40E791
0001f6f8: SF := high:1[RCX]
.address 0x40E791
0001f6fb: ZF := 0 = RCX
.address 0x40E791
0001f6fe: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E791
0001f701: AF := unknown[bits]:u1
.address 0x40E791
0001f704: OF := high:1[#4375]
.address 0x40E794
0001f711: RAX := pad:64[low:32[RAX] & 1]
.address 0x40E794
0001f714: OF := 0
.address 0x40E794
0001f717: CF := 0
.address 0x40E794
0001f71a: AF := unknown[bits]:u1
.address 0x40E794
0001f71d: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E794
0001f720: SF := high:1[low:32[RAX]]
.address 0x40E794
0001f723: ZF := 0 = low:32[RAX]
.address 0x40E797
0001f730: RCX := RCX | RAX
.address 0x40E797
0001f733: OF := 0
.address 0x40E797
0001f736: CF := 0
.address 0x40E797
0001f739: AF := unknown[bits]:u1
.address 0x40E797
0001f73c: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E797
0001f73f: SF := high:1[RCX]
.address 0x40E797
0001f742: ZF := 0 = RCX
.address 0x40E7A3
0001f74b: goto %0001f2de

.address 0x40E703
0001f2cb: 
.address 0x40E703
0001f2db: YMM0 := extract:255:128[YMM0].0
00044b4d: goto %0001f2de

.address 0x40E70C
0001f2de: 
.address 0x40E714
0001f2e8: when ~(CF | ZF) goto %0001f2e2
00044b4e: goto %0001f472

.address 0x40E7B0
0001f2e2: 
.address 0x40E7B0
0001f2f2: RDI := low:64[RBX + 0x28]
.address 0x40E7B4
0001f2fb: RSP := RSP - 8
.address 0x40E7B4
0001f2fe: mem := mem with [RSP, el]:u64 <- 0x40E7B9
.address 0x40E7B4
0001f301: call @sub_40daa0 with return %0001f303

.address 0x40E7B9
0001f303: 
.address 0x40E7B9
0001f308: RAX := mem[RBX + 0x10, el]:u64
.address 0x40E7BD
0001f30f: RDX := mem[RBX + 0x28, el]:u64
.address 0x40E7C1
0001f31c: #4347 := RAX
.address 0x40E7C1
0001f31f: OF := 0
.address 0x40E7C1
0001f322: CF := 0
.address 0x40E7C1
0001f325: AF := unknown[bits]:u1
.address 0x40E7C1
0001f328: PF := ~low:1[let $1 = #4347 >> 4 ^ #4347 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E7C1
0001f32b: SF := high:1[#4347]
.address 0x40E7C1
0001f32e: ZF := 0 = #4347
.address 0x40E7C4
0001f335: YMM2 := extract:255:128[YMM2].pad:128[mem[RDX + 8, el]:u32]
.address 0x40E7C9
0001f33f: when SF goto %0001f339
00044b4f: goto %0001f6cd

.address 0x40E890
0001f339: 
.address 0x40E890
0001f349: RCX := RAX
.address 0x40E893
0001f350: YMM0 := extract:255:128[YMM0].0
.address 0x40E897
0001f35e: #4349 := RCX
.address 0x40E897
0001f361: RCX := RCX >> 1
.address 0x40E897
0001f364: CF := high:1[#4349 << 0x3F]
.address 0x40E897
0001f367: SF := high:1[RCX]
.address 0x40E897
0001f36a: ZF := 0 = RCX
.address 0x40E897
0001f36d: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E897
0001f370: AF := unknown[bits]:u1
.address 0x40E897
0001f373: OF := high:1[#4349]
.address 0x40E89A
0001f380: RAX := pad:64[low:32[RAX] & 1]
.address 0x40E89A
0001f383: OF := 0
.address 0x40E89A
0001f386: CF := 0
.address 0x40E89A
0001f389: AF := unknown[bits]:u1
.address 0x40E89A
0001f38c: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E89A
0001f38f: SF := high:1[low:32[RAX]]
.address 0x40E89A
0001f392: ZF := 0 = low:32[RAX]
.address 0x40E89D
0001f39f: RCX := RCX | RAX
.address 0x40E89D
0001f3a2: OF := 0
.address 0x40E89D
0001f3a5: CF := 0
.address 0x40E89D
0001f3a8: AF := unknown[bits]:u1
.address 0x40E89D
0001f3ab: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E89D
0001f3ae: SF := high:1[RCX]
.address 0x40E89D
0001f3b1: ZF := 0 = RCX
.address 0x40E8A9
0001f3bb: goto %0001f3b7

.address 0x40E7CF
0001f6cd: 
.address 0x40E7CF
0001f6d2: YMM0 := extract:255:128[YMM0].0
00044b50: goto %0001f3b7

.address 0x40E7D8
0001f3b7: 
.address 0x40E7D8
0001f3c1: RAX := mem[RBX + 0x18, el]:u64
.address 0x40E7DC
0001f3ce: #4353 := RAX
.address 0x40E7DC
0001f3d1: OF := 0
.address 0x40E7DC
0001f3d4: CF := 0
.address 0x40E7DC
0001f3d7: AF := unknown[bits]:u1
.address 0x40E7DC
0001f3da: PF := ~low:1[let $1 = #4353 >> 4 ^ #4353 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E7DC
0001f3dd: SF := high:1[#4353]
.address 0x40E7DC
0001f3e0: ZF := 0 = #4353
.address 0x40E7DF
0001f3ea: when SF goto %0001f3e4
00044b51: goto %0001f6c2

.address 0x40E8B0
0001f3e4: 
.address 0x40E8B0
0001f3f4: RCX := RAX
.address 0x40E8B3
0001f3fb: YMM1 := extract:255:128[YMM1].0
.address 0x40E8B7
0001f409: #4355 := RCX
.address 0x40E8B7
0001f40c: RCX := RCX >> 1
.address 0x40E8B7
0001f40f: CF := high:1[#4355 << 0x3F]
.address 0x40E8B7
0001f412: SF := high:1[RCX]
.address 0x40E8B7
0001f415: ZF := 0 = RCX
.address 0x40E8B7
0001f418: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E8B7
0001f41b: AF := unknown[bits]:u1
.address 0x40E8B7
0001f41e: OF := high:1[#4355]
.address 0x40E8BA
0001f42b: RAX := pad:64[low:32[RAX] & 1]
.address 0x40E8BA
0001f42e: OF := 0
.address 0x40E8BA
0001f431: CF := 0
.address 0x40E8BA
0001f434: AF := unknown[bits]:u1
.address 0x40E8BA
0001f437: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E8BA
0001f43a: SF := high:1[low:32[RAX]]
.address 0x40E8BA
0001f43d: ZF := 0 = low:32[RAX]
.address 0x40E8BD
0001f44a: RCX := RCX | RAX
.address 0x40E8BD
0001f44d: OF := 0
.address 0x40E8BD
0001f450: CF := 0
.address 0x40E8BD
0001f453: AF := unknown[bits]:u1
.address 0x40E8BD
0001f456: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E8BD
0001f459: SF := high:1[RCX]
.address 0x40E8BD
0001f45c: ZF := 0 = RCX
.address 0x40E8C9
0001f466: goto %0001f462

.address 0x40E7E5
0001f6c2: 
.address 0x40E7E5
0001f6c7: YMM1 := extract:255:128[YMM1].0
00044b52: goto %0001f462

.address 0x40E7EE
0001f462: 
.address 0x40E7EE
0001f46c: YMM3 := extract:255:128[YMM3].low:128[YMM2]
.address 0x40E7F8
0001f478: when CF | ZF goto %0001f472
00044b53: goto %0001f594

.address 0x40E7FE
0001f594: 
.address 0x40E7FE
0001f59f: #4368 := mem[RDX + 0x10]
.address 0x40E7FE
0001f5a2: CF := mem[RDX + 0x10] < 0
.address 0x40E7FE
0001f5a5: OF := high:1[mem[RDX + 0x10] & (mem[RDX + 0x10] ^ #4368)]
.address 0x40E7FE
0001f5a8: AF := 0x10 = (0x10 & (#4368 ^ mem[RDX + 0x10]))
.address 0x40E7FE
0001f5ab: PF := ~low:1[let $1 = #4368 >> 4 ^ #4368 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E7FE
0001f5ae: SF := high:1[#4368]
.address 0x40E7FE
0001f5b1: ZF := 0 = #4368
.address 0x40E807
0001f5bc: when ~ZF goto %0001f5b6
00044b54: goto %0001f6be

.address 0x40E809
0001f6be: 
00044b55: goto %0001f5b6

.address 0x40E80D
0001f5b6: 
.address 0x40E814
0001f5c9: when ~CF goto %0001f575
00044b56: goto %0001f5cf

.address 0x40E816
0001f5cf: 
.address 0x40E81D
0001f5d8: when ~CF goto %0001f5d2
00044b57: goto %0001f6bd

.address 0x40E8D0
0001f5d2: 
.address 0x40E8D8
0001f5e3: RAX := 0x8000000000000000
.address 0x40E8E7
0001f5f1: RSI := RSI ^ RAX
.address 0x40E8E7
0001f5f4: OF := 0
.address 0x40E8E7
0001f5f7: CF := 0
.address 0x40E8E7
0001f5fa: AF := unknown[bits]:u1
.address 0x40E8E7
0001f5fd: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E8E7
0001f600: SF := high:1[RSI]
.address 0x40E8E7
0001f603: ZF := 0 = RSI
.address 0x40E8EA
0001f60b: goto %0001f607

.address 0x40E823
0001f6bd: 
00044b58: goto %0001f607

.address 0x40E828
0001f607: 
.address 0x40E828
0001f611: RDI := RBX
.address 0x40E82B
0001f61a: RSP := RSP - 8
.address 0x40E82B
0001f61d: mem := mem with [RSP, el]:u64 <- 0x40E830
.address 0x40E82B
0001f620: call @sub_40e430 with return %0001f622

.address 0x40E830
0001f622: 
.address 0x40E830
0001f62d: #4371 := low:8[RAX]
.address 0x40E830
0001f630: OF := 0
.address 0x40E830
0001f633: CF := 0
.address 0x40E830
0001f636: AF := unknown[bits]:u1
.address 0x40E830
0001f639: PF := ~low:1[let $1 = #4371 >> 4 ^ #4371 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E830
0001f63c: SF := high:1[#4371]
.address 0x40E830
0001f63f: ZF := 0 = #4371
.address 0x40E832
0001f648: when ZF goto %0001f575
00044b59: goto %0001f64e

.address 0x40E834
0001f64e: 
.address 0x40E834
0001f659: RCX := 0
.address 0x40E834
0001f65c: AF := unknown[bits]:u1
.address 0x40E834
0001f65f: ZF := 1
.address 0x40E834
0001f662: PF := 1
.address 0x40E834
0001f665: OF := 0
.address 0x40E834
0001f668: CF := 0
.address 0x40E834
0001f66b: SF := 0
.address 0x40E836
0001f672: RDX := R12
.address 0x40E839
0001f679: RSI := RBP
.address 0x40E83C
0001f680: RDI := RBX
.address 0x40E83F
0001f689: RSP := RSP - 8
.address 0x40E83F
0001f68c: mem := mem with [RSP, el]:u64 <- 0x40E844
.address 0x40E83F
0001f68f: call @sub_40d980 with return %0001f691

.address 0x40E844
0001f691: 
.address 0x40E844
0001f69c: #4373 := RAX
.address 0x40E844
0001f69f: OF := 0
.address 0x40E844
0001f6a2: CF := 0
.address 0x40E844
0001f6a5: AF := unknown[bits]:u1
.address 0x40E844
0001f6a8: PF := ~low:1[let $1 = #4373 >> 4 ^ #4373 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E844
0001f6ab: SF := high:1[#4373]
.address 0x40E844
0001f6ae: ZF := 0 = #4373
.address 0x40E847
0001f6b7: when ZF goto %0001f472
00044b5a: goto %00009256

.address 0x40E84D
00009256: 
.address 0x40E84D
00009268: RSP := RSP - 8
.address 0x40E84D
0000926b: mem := mem with [RSP, el]:u64 <- 0x40E852
.address 0x40E84D
0000926e: call @sub_4037e0 with return %00009270

.address 0x40E852
00009270: 
00044b5b: goto %00009273

.address 0x40E71A
0001f472: 
.address 0x40E71A
0001f482: R12 := mem[RSP, el]:u64
.address 0x40E71E
0001f48f: #4359 := mem[R12, el]:u64
.address 0x40E71E
0001f492: CF := mem[R12, el]:u64 < 0
.address 0x40E71E
0001f495: OF := high:1[mem[R12, el]:u64 & (mem[R12, el]:u64 ^ #4359)]
.address 0x40E71E
0001f498: AF := 0x10 = (0x10 & (#4359 ^ mem[R12, el]:u64))
.address 0x40E71E
0001f49b: PF := ~low:1[let $1 = #4359 >> 4 ^ #4359 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E71E
0001f49e: SF := high:1[#4359]
.address 0x40E71E
0001f4a1: ZF := 0 = #4359
.address 0x40E723
0001f4aa: when ZF goto %00009273
00044b5c: goto %0001f4b0

.address 0x40E858
00009273: 
.address 0x40E858
00009278: mem := mem with [R12, el]:u64 <- RBP
.address 0x40E85C
0000927f: RAX := 1
.address 0x40E861
0000928d: #1348 := mem[RBX + 0x20, el]:u64
.address 0x40E861
00009290: mem := mem with [RBX + 0x20, el]:u64 <- mem[RBX + 0x20, el]:u64 + 1
.address 0x40E861
00009293: CF := mem[RBX + 0x20, el]:u64 < #1348
.address 0x40E861
00009296: OF := ~high:1[#1348] & (high:1[#1348] | high:1[mem[RBX + 0x20, el]:u64]) & ~(
high:1[#1348] & high:1[mem[RBX + 0x20, el]:u64])
.address 0x40E861
00009299: AF := 0x10 = (0x10 & (mem[RBX + 0x20, el]:u64 ^ #1348 ^ 1))
.address 0x40E861
0000929c: PF := ~low:1[let $1 = mem[RBX + 0x20, el]:u64 >> 4 ^ mem[RBX + 0x20, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E861
0000929f: SF := high:1[mem[RBX + 0x20, el]:u64]
.address 0x40E861
000092a2: ZF := 0 = mem[RBX + 0x20, el]:u64
.address 0x40E866
000092b0: #1351 := mem[RBX + 0x18, el]:u64
.address 0x40E866
000092b3: mem := mem with [RBX + 0x18, el]:u64 <- mem[RBX + 0x18, el]:u64 + 1
.address 0x40E866
000092b6: CF := mem[RBX + 0x18, el]:u64 < #1351
.address 0x40E866
000092b9: OF := ~high:1[#1351] & (high:1[#1351] | high:1[mem[RBX + 0x18, el]:u64]) & ~(
high:1[#1351] & high:1[mem[RBX + 0x18, el]:u64])
.address 0x40E866
000092bc: AF := 0x10 = (0x10 & (mem[RBX + 0x18, el]:u64 ^ #1351 ^ 1))
.address 0x40E866
000092bf: PF := ~low:1[let $1 = mem[RBX + 0x18, el]:u64 >> 4 ^ mem[RBX + 0x18, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E866
000092c2: SF := high:1[mem[RBX + 0x18, el]:u64]
.address 0x40E866
000092c5: ZF := 0 = mem[RBX + 0x18, el]:u64
.address 0x40E86B
000092cd: goto %000092c9

.address 0x40E729
0001f4b0: 
.address 0x40E729
0001f4b5: RAX := mem[RBX + 0x48, el]:u64
.address 0x40E72D
0001f4c2: #4361 := RAX
.address 0x40E72D
0001f4c5: OF := 0
.address 0x40E72D
0001f4c8: CF := 0
.address 0x40E72D
0001f4cb: AF := unknown[bits]:u1
.address 0x40E72D
0001f4ce: PF := ~low:1[let $1 = #4361 >> 4 ^ #4361 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E72D
0001f4d1: SF := high:1[#4361]
.address 0x40E72D
0001f4d4: ZF := 0 = #4361
.address 0x40E730
0001f4de: when ZF goto %0001f4d8
00044b5d: goto %0001f586

.address 0x40E870
0001f4d8: 
.address 0x40E870
0001f4e8: RDI := 0x10
.address 0x40E875
0001f4f1: RSP := RSP - 8
.address 0x40E875
0001f4f4: mem := mem with [RSP, el]:u64 <- 0x40E87A
.address 0x40E875
0001f4f7: call @sub_403e78 with return %0001f4f9

.address 0x40E87A
0001f4f9: 
.address 0x40E87A
0001f504: #4363 := RAX
.address 0x40E87A
0001f507: OF := 0
.address 0x40E87A
0001f50a: CF := 0
.address 0x40E87A
0001f50d: AF := unknown[bits]:u1
.address 0x40E87A
0001f510: PF := ~low:1[let $1 = #4363 >> 4 ^ #4363 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E87A
0001f513: SF := high:1[#4363]
.address 0x40E87A
0001f516: ZF := 0 = #4363
.address 0x40E87D
0001f520: when ~ZF goto %0001f51a
00044b5e: goto %0001f575

.address 0x40E883
0001f575: 
.address 0x40E883
0001f57a: RAX := 0xFFFFFFFF
.address 0x40E888
0001f581: goto %000092c9

.address 0x40E736
0001f586: 
.address 0x40E736
0001f58b: RDX := mem[RAX + 8, el]:u64
.address 0x40E73A
0001f592: mem := mem with [RBX + 0x48, el]:u64 <- RDX
00044b5f: goto %0001f51a

.address 0x40E73E
0001f51a: 
.address 0x40E73E
0001f52a: RDX := mem[R12 + 8, el]:u64
.address 0x40E743
0001f531: mem := mem with [RAX, el]:u64 <- RBP
.address 0x40E746
0001f538: mem := mem with [RAX + 8, el]:u64 <- RDX
.address 0x40E74A
0001f53f: mem := mem with [R12 + 8, el]:u64 <- RAX
.address 0x40E74F
0001f546: RAX := 1
.address 0x40E754
0001f554: #4365 := mem[RBX + 0x20, el]:u64
.address 0x40E754
0001f557: mem := mem with [RBX + 0x20, el]:u64 <- mem[RBX + 0x20, el]:u64 + 1
.address 0x40E754
0001f55a: CF := mem[RBX + 0x20, el]:u64 < #4365
.address 0x40E754
0001f55d: OF := ~high:1[#4365] & (high:1[#4365] | high:1[mem[RBX + 0x20, el]:u64]) & ~(
high:1[#4365] & high:1[mem[RBX + 0x20, el]:u64])
.address 0x40E754
0001f560: AF := 0x10 = (0x10 & (mem[RBX + 0x20, el]:u64 ^ #4365 ^ 1))
.address 0x40E754
0001f563: PF := ~low:1[let $1 = mem[RBX + 0x20, el]:u64 >> 4 ^ mem[RBX + 0x20, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E754
0001f566: SF := high:1[mem[RBX + 0x20, el]:u64]
.address 0x40E754
0001f569: ZF := 0 = mem[RBX + 0x20, el]:u64
.address 0x40E759
0001f570: goto %000092c9

.address 0x40E6B1
0001f816: 
.address 0x40E6B1
0001f821: RAX := 0
.address 0x40E6B1
0001f824: AF := unknown[bits]:u1
.address 0x40E6B1
0001f827: ZF := 1
.address 0x40E6B1
0001f82a: PF := 1
.address 0x40E6B1
0001f82d: OF := 0
.address 0x40E6B1
0001f830: CF := 0
.address 0x40E6B1
0001f833: SF := 0
.address 0x40E6B3
0001f840: #4383 := R13
.address 0x40E6B3
0001f843: OF := 0
.address 0x40E6B3
0001f846: CF := 0
.address 0x40E6B3
0001f849: AF := unknown[bits]:u1
.address 0x40E6B3
0001f84c: PF := ~low:1[let $1 = #4383 >> 4 ^ #4383 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E6B3
0001f84f: SF := high:1[#4383]
.address 0x40E6B3
0001f852: ZF := 0 = #4383
.address 0x40E6B6
0001f85b: when ZF goto %000092c9
00044b60: goto %0001f861

.address 0x40E6B8
0001f861: 
.address 0x40E6B8
0001f866: mem := mem with [R13, el]:u64 <- RDX
00044b61: goto %000092c9

.address 0x40E6BC
000092c9: 
.address 0x40E6BC
000092d3: RCX := mem[RSP + 8, el]:u64
.address 0x40E6C1
000092e0: RCX := RCX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x40E6C1
000092e3: OF := 0
.address 0x40E6C1
000092e6: CF := 0
.address 0x40E6C1
000092e9: AF := unknown[bits]:u1
.address 0x40E6C1
000092ec: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E6C1
000092ef: SF := high:1[RCX]
.address 0x40E6C1
000092f2: ZF := 0 = RCX
.address 0x40E6CA
000092fc: when ~ZF goto %000092f6
00044b62: goto %0001f196

.address 0x40E8EF
000092f6: 
.address 0x40E8EF
00009308: RSP := RSP - 8
.address 0x40E8EF
0000930b: mem := mem with [RSP, el]:u64 <- 0x40E8F4
.address 0x40E8EF
0000930e: call @sub_403970 with return %00009310

.address 0x40E8F4
00009310: 
00044b63: call @sub_40e900 with noreturn

.address 0x40E6D0
0001f196: 
.address 0x40E6D0
0001f1a2: #4335 := RSP
.address 0x40E6D0
0001f1a5: RSP := RSP + 0x18
.address 0x40E6D0
0001f1a8: CF := RSP < #4335
.address 0x40E6D0
0001f1ab: OF := ~high:1[#4335] & (high:1[#4335] | high:1[RSP]) & ~(high:1[#4335] & high:1[RSP])
.address 0x40E6D0
0001f1ae: AF := 0x10 = (0x10 & (RSP ^ #4335 ^ 0x18))
.address 0x40E6D0
0001f1b1: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E6D0
0001f1b4: SF := high:1[RSP]
.address 0x40E6D0
0001f1b7: ZF := 0 = RSP
.address 0x40E6D4
0001f1bf: RBX := mem[RSP, el]:u64
.address 0x40E6D4
0001f1c2: RSP := RSP + 8
.address 0x40E6D5
0001f1ca: RBP := mem[RSP, el]:u64
.address 0x40E6D5
0001f1cd: RSP := RSP + 8
.address 0x40E6D6
0001f1d5: R12 := mem[RSP, el]:u64
.address 0x40E6D6
0001f1d8: RSP := RSP + 8
.address 0x40E6D8
0001f1e0: R13 := mem[RSP, el]:u64
.address 0x40E6D8
0001f1e3: RSP := RSP + 8
.address 0x40E6DA
0001f1ec: #4338 := mem[RSP, el]:u64
.address 0x40E6DA
0001f1ef: RSP := RSP + 8
.address 0x40E6DA
0001f1f3: call #4338 with noreturn


.address 0x40E900
00044308: sub sub_40e900()
.address 0x40E900
00009316: 
.address 0x40E900
0000931d: #1355 := RBX
.address 0x40E900
00009320: RSP := RSP - 8
.address 0x40E900
00009323: mem := mem with [RSP, el]:u64 <- #1355
.address 0x40E901
0000932a: RBX := RSI
.address 0x40E904
00009338: #1356 := RSP
.address 0x40E904
0000933b: RSP := RSP - 0x10
.address 0x40E904
0000933e: CF := #1356 < 0x10
.address 0x40E904
00009341: OF := high:1[(#1356 ^ 0x10) & (#1356 ^ RSP)]
.address 0x40E904
00009344: AF := 0x10 = (0x10 & (RSP ^ #1356 ^ 0x10))
.address 0x40E904
00009347: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E904
0000934a: SF := high:1[RSP]
.address 0x40E904
0000934d: ZF := 0 = RSP
.address 0x40E908
00009354: RDX := RSP
.address 0x40E90B
0000935b: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x40E914
00009362: mem := mem with [RSP + 8, el]:u64 <- RAX
.address 0x40E919
0000936f: RAX := 0
.address 0x40E919
00009372: AF := unknown[bits]:u1
.address 0x40E919
00009375: ZF := 1
.address 0x40E919
00009378: PF := 1
.address 0x40E919
0000937b: OF := 0
.address 0x40E919
0000937e: CF := 0
.address 0x40E919
00009381: SF := 0
.address 0x40E91B
0000938a: RSP := RSP - 8
.address 0x40E91B
0000938d: mem := mem with [RSP, el]:u64 <- 0x40E920
.address 0x40E91B
00009390: call @sub_40e670 with return %00009392

.address 0x40E920
00009392: 
.address 0x40E920
0000939d: #1359 := low:32[RAX] - 0xFFFFFFFF
.address 0x40E920
000093a0: CF := low:32[RAX] < 0xFFFFFFFF
.address 0x40E920
000093a3: OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ #1359)]
.address 0x40E920
000093a6: AF := 0x10 = (0x10 & (#1359 ^ low:32[RAX] ^ 0xFFFFFFFF))
.address 0x40E920
000093a9: PF := ~low:1[let $1 = #1359 >> 4 ^ #1359 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E920
000093ac: SF := high:1[#1359]
.address 0x40E920
000093af: ZF := 0 = #1359
.address 0x40E923
000093b9: when ZF goto %000093b3
00044b64: goto %0001f163

.address 0x40E950
000093b3: 
.address 0x40E950
000093c9: RBX := 0
.address 0x40E950
000093cc: AF := unknown[bits]:u1
.address 0x40E950
000093cf: ZF := 1
.address 0x40E950
000093d2: PF := 1
.address 0x40E950
000093d5: OF := 0
.address 0x40E950
000093d8: CF := 0
.address 0x40E950
000093db: SF := 0
.address 0x40E952
000093e3: goto %000093df

.address 0x40E925
0001f163: 
.address 0x40E925
0001f16e: #4333 := low:32[RAX]
.address 0x40E925
0001f171: OF := 0
.address 0x40E925
0001f174: CF := 0
.address 0x40E925
0001f177: AF := unknown[bits]:u1
.address 0x40E925
0001f17a: PF := ~low:1[let $1 = #4333 >> 4 ^ #4333 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E925
0001f17d: SF := high:1[#4333]
.address 0x40E925
0001f180: ZF := 0 = #4333
.address 0x40E927
0001f189: when ~ZF goto %000093df
00044b65: goto %0001f18f

.address 0x40E929
0001f18f: 
.address 0x40E929
0001f194: RBX := mem[RSP, el]:u64
00044b66: goto %000093df

.address 0x40E92D
000093df: 
.address 0x40E92D
000093e9: RCX := mem[RSP + 8, el]:u64
.address 0x40E932
000093f6: RCX := RCX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x40E932
000093f9: OF := 0
.address 0x40E932
000093fc: CF := 0
.address 0x40E932
000093ff: AF := unknown[bits]:u1
.address 0x40E932
00009402: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E932
00009405: SF := high:1[RCX]
.address 0x40E932
00009408: ZF := 0 = RCX
.address 0x40E93B
0000940f: RAX := RBX
.address 0x40E93E
00009419: when ~ZF goto %00009413
00044b67: goto %0001f122

.address 0x40E954
00009413: 
.address 0x40E954
00009425: RSP := RSP - 8
.address 0x40E954
00009428: mem := mem with [RSP, el]:u64 <- 0x40E959
.address 0x40E954
0000942b: call @sub_403970 with return %0000942d

.address 0x40E959
0000942d: 
00044b68: call @sub_40e960 with noreturn

.address 0x40E940
0001f122: 
.address 0x40E940
0001f12e: #4329 := RSP
.address 0x40E940
0001f131: RSP := RSP + 0x10
.address 0x40E940
0001f134: CF := RSP < #4329
.address 0x40E940
0001f137: OF := ~high:1[#4329] & (high:1[#4329] | high:1[RSP]) & ~(high:1[#4329] & high:1[RSP])
.address 0x40E940
0001f13a: AF := 0x10 = (0x10 & (RSP ^ #4329 ^ 0x10))
.address 0x40E940
0001f13d: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E940
0001f140: SF := high:1[RSP]
.address 0x40E940
0001f143: ZF := 0 = RSP
.address 0x40E944
0001f14b: RBX := mem[RSP, el]:u64
.address 0x40E944
0001f14e: RSP := RSP + 8
.address 0x40E945
0001f157: #4332 := mem[RSP, el]:u64
.address 0x40E945
0001f15a: RSP := RSP + 8
.address 0x40E945
0001f15e: call #4332 with noreturn


.address 0x40E960
0004430e: sub sub_40e960()
.address 0x40E960
00009430: 
.address 0x40E960
00009437: #1362 := R12
.address 0x40E960
0000943a: RSP := RSP - 8
.address 0x40E960
0000943d: mem := mem with [RSP, el]:u64 <- #1362
00044b69: call @sub_40e962 with noreturn


.address 0x40E962
00044310: sub sub_40e962()
.address 0x40E962
0000943f: 
.address 0x40E962
00009446: #1363 := RBP
.address 0x40E962
00009449: RSP := RSP - 8
.address 0x40E962
0000944c: mem := mem with [RSP, el]:u64 <- #1363
.address 0x40E963
00009453: RCX := 1
00044b6a: call @sub_40e968 with noreturn


.address 0x40E968
00044312: sub sub_40e968()
.address 0x40E968
00009455: 
.address 0x40E968
0000945c: #1364 := RBX
.address 0x40E968
0000945f: RSP := RSP - 8
.address 0x40E968
00009462: mem := mem with [RSP, el]:u64 <- #1364
.address 0x40E969
00009469: RBX := RDI
.address 0x40E96C
00009477: #1365 := RSP
.address 0x40E96C
0000947a: RSP := RSP - 0x10
.address 0x40E96C
0000947d: CF := #1365 < 0x10
.address 0x40E96C
00009480: OF := high:1[(#1365 ^ 0x10) & (#1365 ^ RSP)]
.address 0x40E96C
00009483: AF := 0x10 = (0x10 & (RSP ^ #1365 ^ 0x10))
.address 0x40E96C
00009486: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E96C
00009489: SF := high:1[RSP]
.address 0x40E96C
0000948c: ZF := 0 = RSP
.address 0x40E970
00009493: RDX := RSP
.address 0x40E973
0000949a: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x40E97C
000094a1: mem := mem with [RSP + 8, el]:u64 <- RAX
.address 0x40E981
000094ae: RAX := 0
.address 0x40E981
000094b1: AF := unknown[bits]:u1
.address 0x40E981
000094b4: ZF := 1
.address 0x40E981
000094b7: PF := 1
.address 0x40E981
000094ba: OF := 0
.address 0x40E981
000094bd: CF := 0
.address 0x40E981
000094c0: SF := 0
.address 0x40E983
000094c9: RSP := RSP - 8
.address 0x40E983
000094cc: mem := mem with [RSP, el]:u64 <- 0x40E988
.address 0x40E983
000094cf: call @sub_40d980 with return %000094d1

.address 0x40E988
000094d1: 
.address 0x40E988
000094dc: #1368 := RAX
.address 0x40E988
000094df: OF := 0
.address 0x40E988
000094e2: CF := 0
.address 0x40E988
000094e5: AF := unknown[bits]:u1
.address 0x40E988
000094e8: PF := ~low:1[let $1 = #1368 >> 4 ^ #1368 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E988
000094eb: SF := high:1[#1368]
.address 0x40E988
000094ee: ZF := 0 = #1368
.address 0x40E98B
000094f5: RBP := RAX
.address 0x40E98E
000094ff: when ZF goto %000094f9
00044b6b: goto %0001f0cc

.address 0x40E990
0001f0cc: 
.address 0x40E990
0001f0d1: RAX := mem[RSP, el]:u64
.address 0x40E994
0001f0df: #4324 := mem[RBX + 0x20, el]:u64
.address 0x40E994
0001f0e2: mem := mem with [RBX + 0x20, el]:u64 <- mem[RBX + 0x20, el]:u64 - 1
.address 0x40E994
0001f0e5: CF := #4324 < 1
.address 0x40E994
0001f0e8: OF := high:1[(#4324 ^ 1) & (#4324 ^ mem[RBX + 0x20, el]:u64)]
.address 0x40E994
0001f0eb: AF := 0x10 = (0x10 & (mem[RBX + 0x20, el]:u64 ^ #4324 ^ 1))
.address 0x40E994
0001f0ee: PF := ~low:1[let $1 = mem[RBX + 0x20, el]:u64 >> 4 ^ mem[RBX + 0x20, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E994
0001f0f1: SF := high:1[mem[RBX + 0x20, el]:u64]
.address 0x40E994
0001f0f4: ZF := 0 = mem[RBX + 0x20, el]:u64
.address 0x40E999
0001f101: #4327 := mem[RAX, el]:u64
.address 0x40E999
0001f104: CF := mem[RAX, el]:u64 < 0
.address 0x40E999
0001f107: OF := high:1[mem[RAX, el]:u64 & (mem[RAX, el]:u64 ^ #4327)]
.address 0x40E999
0001f10a: AF := 0x10 = (0x10 & (#4327 ^ mem[RAX, el]:u64))
.address 0x40E999
0001f10d: PF := ~low:1[let $1 = #4327 >> 4 ^ #4327 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E999
0001f110: SF := high:1[#4327]
.address 0x40E999
0001f113: ZF := 0 = #4327
.address 0x40E99D
0001f11c: when ZF goto %0001ec39
00044b6c: goto %000094f9

.address 0x40E9C0
0001ec39: 
.address 0x40E9C0
0001ec3e: RAX := mem[RBX + 0x18, el]:u64
.address 0x40E9C4
0001ec4c: #4288 := RAX
.address 0x40E9C4
0001ec4f: RAX := RAX - 1
.address 0x40E9C4
0001ec52: CF := #4288 < 1
.address 0x40E9C4
0001ec55: OF := high:1[(#4288 ^ 1) & (#4288 ^ RAX)]
.address 0x40E9C4
0001ec58: AF := 0x10 = (0x10 & (RAX ^ #4288 ^ 1))
.address 0x40E9C4
0001ec5b: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E9C4
0001ec5e: SF := high:1[RAX]
.address 0x40E9C4
0001ec61: ZF := 0 = RAX
.address 0x40E9C8
0001ec6e: #4291 := RAX
.address 0x40E9C8
0001ec71: OF := 0
.address 0x40E9C8
0001ec74: CF := 0
.address 0x40E9C8
0001ec77: AF := unknown[bits]:u1
.address 0x40E9C8
0001ec7a: PF := ~low:1[let $1 = #4291 >> 4 ^ #4291 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E9C8
0001ec7d: SF := high:1[#4291]
.address 0x40E9C8
0001ec80: ZF := 0 = #4291
.address 0x40E9CB
0001ec87: mem := mem with [RBX + 0x18, el]:u64 <- RAX
.address 0x40E9CF
0001ec91: when SF goto %0001ec8b
00044b6d: goto %0001f0c4

.address 0x40EAD0
0001ec8b: 
.address 0x40EAD0
0001ec9b: RDX := RAX
.address 0x40EAD3
0001eca2: YMM0 := extract:255:128[YMM0].0
.address 0x40EAD7
0001ecb0: #4293 := RDX
.address 0x40EAD7
0001ecb3: RDX := RDX >> 1
.address 0x40EAD7
0001ecb6: CF := high:1[#4293 << 0x3F]
.address 0x40EAD7
0001ecb9: SF := high:1[RDX]
.address 0x40EAD7
0001ecbc: ZF := 0 = RDX
.address 0x40EAD7
0001ecbf: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40EAD7
0001ecc2: AF := unknown[bits]:u1
.address 0x40EAD7
0001ecc5: OF := high:1[#4293]
.address 0x40EADA
0001ecd2: RAX := pad:64[low:32[RAX] & 1]
.address 0x40EADA
0001ecd5: OF := 0
.address 0x40EADA
0001ecd8: CF := 0
.address 0x40EADA
0001ecdb: AF := unknown[bits]:u1
.address 0x40EADA
0001ecde: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EADA
0001ece1: SF := high:1[low:32[RAX]]
.address 0x40EADA
0001ece4: ZF := 0 = low:32[RAX]
.address 0x40EADD
0001ecf1: RDX := RDX | RAX
.address 0x40EADD
0001ecf4: OF := 0
.address 0x40EADD
0001ecf7: CF := 0
.address 0x40EADD
0001ecfa: AF := unknown[bits]:u1
.address 0x40EADD
0001ecfd: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40EADD
0001ed00: SF := high:1[RDX]
.address 0x40EADD
0001ed03: ZF := 0 = RDX
.address 0x40EAE9
0001ed0d: goto %0001ed09

.address 0x40E9D5
0001f0c4: 
.address 0x40E9D5
0001f0c9: YMM0 := extract:255:128[YMM0].0
00044b6e: goto %0001ed09

.address 0x40E9DE
0001ed09: 
.address 0x40E9DE
0001ed13: RAX := mem[RBX + 0x10, el]:u64
.address 0x40E9E2
0001ed1a: RDX := mem[RBX + 0x28, el]:u64
.address 0x40E9E6
0001ed27: #4297 := RAX
.address 0x40E9E6
0001ed2a: OF := 0
.address 0x40E9E6
0001ed2d: CF := 0
.address 0x40E9E6
0001ed30: AF := unknown[bits]:u1
.address 0x40E9E6
0001ed33: PF := ~low:1[let $1 = #4297 >> 4 ^ #4297 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40E9E6
0001ed36: SF := high:1[#4297]
.address 0x40E9E6
0001ed39: ZF := 0 = #4297
.address 0x40E9E9
0001ed43: when SF goto %0001ed3d
00044b6f: goto %0001f0b9

.address 0x40EAB0
0001ed3d: 
.address 0x40EAB0
0001ed4d: RCX := RAX
.address 0x40EAB3
0001ed54: YMM1 := extract:255:128[YMM1].0
.address 0x40EAB7
0001ed62: #4299 := RCX
.address 0x40EAB7
0001ed65: RCX := RCX >> 1
.address 0x40EAB7
0001ed68: CF := high:1[#4299 << 0x3F]
.address 0x40EAB7
0001ed6b: SF := high:1[RCX]
.address 0x40EAB7
0001ed6e: ZF := 0 = RCX
.address 0x40EAB7
0001ed71: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40EAB7
0001ed74: AF := unknown[bits]:u1
.address 0x40EAB7
0001ed77: OF := high:1[#4299]
.address 0x40EABA
0001ed84: RAX := pad:64[low:32[RAX] & 1]
.address 0x40EABA
0001ed87: OF := 0
.address 0x40EABA
0001ed8a: CF := 0
.address 0x40EABA
0001ed8d: AF := unknown[bits]:u1
.address 0x40EABA
0001ed90: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EABA
0001ed93: SF := high:1[low:32[RAX]]
.address 0x40EABA
0001ed96: ZF := 0 = low:32[RAX]
.address 0x40EABD
0001eda3: RCX := RCX | RAX
.address 0x40EABD
0001eda6: OF := 0
.address 0x40EABD
0001eda9: CF := 0
.address 0x40EABD
0001edac: AF := unknown[bits]:u1
.address 0x40EABD
0001edaf: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40EABD
0001edb2: SF := high:1[RCX]
.address 0x40EABD
0001edb5: ZF := 0 = RCX
.address 0x40EAC9
0001edbf: goto %0001edbb

.address 0x40E9EF
0001f0b9: 
.address 0x40E9EF
0001f0be: YMM1 := extract:255:128[YMM1].0
00044b70: goto %0001edbb

.address 0x40E9F8
0001edbb: 
.address 0x40E9FF
0001edc9: when CF | ZF goto %000094f9
00044b71: goto %0001edcf

.address 0x40EA01
0001edcf: 
.address 0x40EA01
0001edd4: RDI := low:64[RBX + 0x28]
.address 0x40EA05
0001eddd: RSP := RSP - 8
.address 0x40EA05
0001ede0: mem := mem with [RSP, el]:u64 <- 0x40EA0A
.address 0x40EA05
0001ede3: call @sub_40daa0 with return %0001ede5

.address 0x40EA0A
0001ede5: 
.address 0x40EA0A
0001edea: RAX := mem[RBX + 0x10, el]:u64
.address 0x40EA0E
0001edf1: RDX := mem[RBX + 0x28, el]:u64
.address 0x40EA12
0001edfe: #4303 := RAX
.address 0x40EA12
0001ee01: OF := 0
.address 0x40EA12
0001ee04: CF := 0
.address 0x40EA12
0001ee07: AF := unknown[bits]:u1
.address 0x40EA12
0001ee0a: PF := ~low:1[let $1 = #4303 >> 4 ^ #4303 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EA12
0001ee0d: SF := high:1[#4303]
.address 0x40EA12
0001ee10: ZF := 0 = #4303
.address 0x40EA15
0001ee1a: when SF goto %0001ee14
00044b72: goto %0001f0ae

.address 0x40EB40
0001ee14: 
.address 0x40EB40
0001ee24: RCX := RAX
.address 0x40EB43
0001ee2b: YMM0 := extract:255:128[YMM0].0
.address 0x40EB47
0001ee39: #4305 := RCX
.address 0x40EB47
0001ee3c: RCX := RCX >> 1
.address 0x40EB47
0001ee3f: CF := high:1[#4305 << 0x3F]
.address 0x40EB47
0001ee42: SF := high:1[RCX]
.address 0x40EB47
0001ee45: ZF := 0 = RCX
.address 0x40EB47
0001ee48: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40EB47
0001ee4b: AF := unknown[bits]:u1
.address 0x40EB47
0001ee4e: OF := high:1[#4305]
.address 0x40EB4A
0001ee5b: RAX := pad:64[low:32[RAX] & 1]
.address 0x40EB4A
0001ee5e: OF := 0
.address 0x40EB4A
0001ee61: CF := 0
.address 0x40EB4A
0001ee64: AF := unknown[bits]:u1
.address 0x40EB4A
0001ee67: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EB4A
0001ee6a: SF := high:1[low:32[RAX]]
.address 0x40EB4A
0001ee6d: ZF := 0 = low:32[RAX]
.address 0x40EB4D
0001ee7a: RCX := RCX | RAX
.address 0x40EB4D
0001ee7d: OF := 0
.address 0x40EB4D
0001ee80: CF := 0
.address 0x40EB4D
0001ee83: AF := unknown[bits]:u1
.address 0x40EB4D
0001ee86: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40EB4D
0001ee89: SF := high:1[RCX]
.address 0x40EB4D
0001ee8c: ZF := 0 = RCX
.address 0x40EB59
0001ee96: goto %0001ee92

.address 0x40EA1B
0001f0ae: 
.address 0x40EA1B
0001f0b3: YMM0 := extract:255:128[YMM0].0
00044b73: goto %0001ee92

.address 0x40EA24
0001ee92: 
.address 0x40EA24
0001ee9c: RAX := mem[RBX + 0x18, el]:u64
.address 0x40EA28
0001eea9: #4309 := RAX
.address 0x40EA28
0001eeac: OF := 0
.address 0x40EA28
0001eeaf: CF := 0
.address 0x40EA28
0001eeb2: AF := unknown[bits]:u1
.address 0x40EA28
0001eeb5: PF := ~low:1[let $1 = #4309 >> 4 ^ #4309 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EA28
0001eeb8: SF := high:1[#4309]
.address 0x40EA28
0001eebb: ZF := 0 = #4309
.address 0x40EA2B
0001eec5: when SF goto %0001eebf
00044b74: goto %0001f0a6

.address 0x40EB20
0001eebf: 
.address 0x40EB20
0001eecf: RCX := RAX
.address 0x40EB23
0001eed6: YMM1 := extract:255:128[YMM1].0
.address 0x40EB27
0001eee4: #4311 := RCX
.address 0x40EB27
0001eee7: RCX := RCX >> 1
.address 0x40EB27
0001eeea: CF := high:1[#4311 << 0x3F]
.address 0x40EB27
0001eeed: SF := high:1[RCX]
.address 0x40EB27
0001eef0: ZF := 0 = RCX
.address 0x40EB27
0001eef3: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40EB27
0001eef6: AF := unknown[bits]:u1
.address 0x40EB27
0001eef9: OF := high:1[#4311]
.address 0x40EB2A
0001ef06: RAX := pad:64[low:32[RAX] & 1]
.address 0x40EB2A
0001ef09: OF := 0
.address 0x40EB2A
0001ef0c: CF := 0
.address 0x40EB2A
0001ef0f: AF := unknown[bits]:u1
.address 0x40EB2A
0001ef12: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EB2A
0001ef15: SF := high:1[low:32[RAX]]
.address 0x40EB2A
0001ef18: ZF := 0 = low:32[RAX]
.address 0x40EB2D
0001ef25: RCX := RCX | RAX
.address 0x40EB2D
0001ef28: OF := 0
.address 0x40EB2D
0001ef2b: CF := 0
.address 0x40EB2D
0001ef2e: AF := unknown[bits]:u1
.address 0x40EB2D
0001ef31: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40EB2D
0001ef34: SF := high:1[RCX]
.address 0x40EB2D
0001ef37: ZF := 0 = RCX
.address 0x40EB39
0001ef41: goto %0001ef3d

.address 0x40EA31
0001f0a6: 
.address 0x40EA31
0001f0ab: YMM1 := extract:255:128[YMM1].0
00044b75: goto %0001ef3d

.address 0x40EA3A
0001ef3d: 
.address 0x40EA3A
0001ef47: YMM2 := extract:255:128[YMM2].pad:128[mem[RDX, el]:u32]
.address 0x40EA45
0001ef52: when CF | ZF goto %000094f9
00044b76: goto %0001ef58

.address 0x40EA4B
0001ef58: 
.address 0x40EA4B
0001ef63: #4315 := mem[RDX + 0x10]
.address 0x40EA4B
0001ef66: CF := mem[RDX + 0x10] < 0
.address 0x40EA4B
0001ef69: OF := high:1[mem[RDX + 0x10] & (mem[RDX + 0x10] ^ #4315)]
.address 0x40EA4B
0001ef6c: AF := 0x10 = (0x10 & (#4315 ^ mem[RDX + 0x10]))
.address 0x40EA4B
0001ef6f: PF := ~low:1[let $1 = #4315 >> 4 ^ #4315 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EA4B
0001ef72: SF := high:1[#4315]
.address 0x40EA4B
0001ef75: ZF := 0 = #4315
.address 0x40EA54
0001ef80: when ZF goto %0001ef7a
00044b77: goto %0001ef88

.address 0x40EB10
0001ef7a: 
.address 0x40EB15
0001ef8c: goto %0001ef88

.address 0x40EA5A
0001ef88: 
.address 0x40EA61
0001ef96: when ~CF goto %0001ef90
00044b78: goto %0001f09f

.address 0x40EAF0
0001ef90: 
.address 0x40EAF8
0001efa1: RAX := 0x8000000000000000
.address 0x40EB07
0001efaf: RSI := RSI ^ RAX
.address 0x40EB07
0001efb2: OF := 0
.address 0x40EB07
0001efb5: CF := 0
.address 0x40EB07
0001efb8: AF := unknown[bits]:u1
.address 0x40EB07
0001efbb: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40EB07
0001efbe: SF := high:1[RSI]
.address 0x40EB07
0001efc1: ZF := 0 = RSI
.address 0x40EB0A
0001efc9: goto %0001efc5

.address 0x40EA67
0001f09f: 
00044b79: goto %0001efc5

.address 0x40EA6C
0001efc5: 
.address 0x40EA6C
0001efcf: RDI := RBX
.address 0x40EA6F
0001efd8: RSP := RSP - 8
.address 0x40EA6F
0001efdb: mem := mem with [RSP, el]:u64 <- 0x40EA74
.address 0x40EA6F
0001efde: call @sub_40e430 with return %0001efe0

.address 0x40EA74
0001efe0: 
.address 0x40EA74
0001efeb: #4318 := low:8[RAX]
.address 0x40EA74
0001efee: OF := 0
.address 0x40EA74
0001eff1: CF := 0
.address 0x40EA74
0001eff4: AF := unknown[bits]:u1
.address 0x40EA74
0001eff7: PF := ~low:1[let $1 = #4318 >> 4 ^ #4318 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EA74
0001effa: SF := high:1[#4318]
.address 0x40EA74
0001effd: ZF := 0 = #4318
.address 0x40EA76
0001f006: when ~ZF goto %000094f9
00044b7a: goto %0001f00c

.address 0x40EA7C
0001f00c: 
.address 0x40EA7C
0001f011: RDI := mem[RBX + 0x48, el]:u64
.address 0x40EA80
0001f01e: #4320 := RDI
.address 0x40EA80
0001f021: OF := 0
.address 0x40EA80
0001f024: CF := 0
.address 0x40EA80
0001f027: AF := unknown[bits]:u1
.address 0x40EA80
0001f02a: PF := ~low:1[let $1 = #4320 >> 4 ^ #4320 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EA80
0001f02d: SF := high:1[#4320]
.address 0x40EA80
0001f030: ZF := 0 = #4320
.address 0x40EA83
0001f03a: when ZF goto %0001f034
00044b7b: goto %0001f050

.address 0x40EA85
0001f050: 
00044b7c: goto %0001f053

.address 0x40EA88
0001f053: 
.address 0x40EA88
0001f058: R12 := mem[RDI + 8, el]:u64
.address 0x40EA8C
0001f061: RSP := RSP - 8
.address 0x40EA8C
0001f064: mem := mem with [RSP, el]:u64 <- 0x40EA91
.address 0x40EA8C
0001f067: call @sub_403e70 with return %0001f069

.address 0x40EA91
0001f069: 
.address 0x40EA91
0001f074: #4322 := R12
.address 0x40EA91
0001f077: OF := 0
.address 0x40EA91
0001f07a: CF := 0
.address 0x40EA91
0001f07d: AF := unknown[bits]:u1
.address 0x40EA91
0001f080: PF := ~low:1[let $1 = #4322 >> 4 ^ #4322 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EA91
0001f083: SF := high:1[#4322]
.address 0x40EA91
0001f086: ZF := 0 = #4322
.address 0x40EA94
0001f08d: RDI := R12
.address 0x40EA97
0001f096: when ~ZF goto %0001f053
00044b7d: goto %0001f034

.address 0x40EA99
0001f034: 
.address 0x40EA99
0001f044: mem := mem with [RBX + 0x48, el]:u64 <- 0
.address 0x40EAA1
0001f04b: goto %000094f9

.address 0x40E99F
000094f9: 
.address 0x40E99F
00009509: RCX := mem[RSP + 8, el]:u64
.address 0x40E9A4
00009516: RCX := RCX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x40E9A4
00009519: OF := 0
.address 0x40E9A4
0000951c: CF := 0
.address 0x40E9A4
0000951f: AF := unknown[bits]:u1
.address 0x40E9A4
00009522: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E9A4
00009525: SF := high:1[RCX]
.address 0x40E9A4
00009528: ZF := 0 = RCX
.address 0x40E9AD
0000952f: RAX := RBP
.address 0x40E9B0
00009539: when ~ZF goto %00009533
00044b7e: goto %0001ebe2

.address 0x40EB5E
00009533: 
.address 0x40EB5E
00009545: RSP := RSP - 8
.address 0x40EB5E
00009548: mem := mem with [RSP, el]:u64 <- 0x40EB63
.address 0x40EB5E
0000954b: call @sub_403970 with return %0000954d

.address 0x40EB63
0000954d: 
00044b7f: call @sub_40eb70 with noreturn

.address 0x40E9B6
0001ebe2: 
.address 0x40E9B6
0001ebee: #4284 := RSP
.address 0x40E9B6
0001ebf1: RSP := RSP + 0x10
.address 0x40E9B6
0001ebf4: CF := RSP < #4284
.address 0x40E9B6
0001ebf7: OF := ~high:1[#4284] & (high:1[#4284] | high:1[RSP]) & ~(high:1[#4284] & high:1[RSP])
.address 0x40E9B6
0001ebfa: AF := 0x10 = (0x10 & (RSP ^ #4284 ^ 0x10))
.address 0x40E9B6
0001ebfd: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40E9B6
0001ec00: SF := high:1[RSP]
.address 0x40E9B6
0001ec03: ZF := 0 = RSP
.address 0x40E9BA
0001ec0b: RBX := mem[RSP, el]:u64
.address 0x40E9BA
0001ec0e: RSP := RSP + 8
.address 0x40E9BB
0001ec16: RBP := mem[RSP, el]:u64
.address 0x40E9BB
0001ec19: RSP := RSP + 8
.address 0x40E9BC
0001ec21: R12 := mem[RSP, el]:u64
.address 0x40E9BC
0001ec24: RSP := RSP + 8
.address 0x40E9BE
0001ec2d: #4287 := mem[RSP, el]:u64
.address 0x40E9BE
0001ec30: RSP := RSP + 8
.address 0x40E9BE
0001ec34: call #4287 with noreturn


.address 0x40EB70
00044328: sub sub_40eb70()
.address 0x40EB70
00009553: 
.address 0x40EB70
0000955a: #1371 := RBP
.address 0x40EB70
0000955d: RSP := RSP - 8
.address 0x40EB70
00009560: mem := mem with [RSP, el]:u64 <- #1371
.address 0x40EB71
00009569: #1372 := RBX
.address 0x40EB71
0000956c: RSP := RSP - 8
.address 0x40EB71
0000956f: mem := mem with [RSP, el]:u64 <- #1372
.address 0x40EB72
00009576: RBP := RDI
.address 0x40EB75
0000957d: RBX := RSI
00044b80: call @sub_40eb78 with noreturn


.address 0x40EB78
0004432a: sub sub_40eb78()
.address 0x40EB78
0000957f: 
.address 0x40EB78
0000958b: #1373 := RSP
.address 0x40EB78
0000958e: RSP := RSP - 8
.address 0x40EB78
00009591: CF := #1373 < 8
.address 0x40EB78
00009594: OF := high:1[(#1373 ^ 8) & (#1373 ^ RSP)]
.address 0x40EB78
00009597: AF := 0x10 = (0x10 & (RSP ^ #1373 ^ 8))
.address 0x40EB78
0000959a: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40EB78
0000959d: SF := high:1[RSP]
.address 0x40EB78
000095a0: ZF := 0 = RSP
.address 0x40EB7C
000095a7: RDI := mem[RDI, el]:u64
.address 0x40EB7F
000095b1: RSP := RSP - 8
.address 0x40EB7F
000095b4: mem := mem with [RSP, el]:u64 <- 0x40EB84
.address 0x40EB7F
000095b7: call @sub_415d10 with return %0000975e

.address 0x40EB84
0000975e: 
.address 0x40EB84
00009769: RAX := RAX ^ mem[RBP + 8, el]:u64
.address 0x40EB84
0000976c: OF := 0
.address 0x40EB84
0000976f: CF := 0
.address 0x40EB84
00009772: AF := unknown[bits]:u1
.address 0x40EB84
00009775: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40EB84
00009778: SF := high:1[RAX]
.address 0x40EB84
0000977b: ZF := 0 = RAX
.address 0x40EB88
00009788: RDX := 0
.address 0x40EB88
0000978b: AF := unknown[bits]:u1
.address 0x40EB88
0000978e: ZF := 1
.address 0x40EB88
00009791: PF := 1
.address 0x40EB88
00009794: OF := 0
.address 0x40EB88
00009797: CF := 0
.address 0x40EB88
0000979a: SF := 0
.address 0x40EB8A
000097a8: #1395 := RSP
.address 0x40EB8A
000097ab: RSP := RSP + 8
.address 0x40EB8A
000097ae: CF := RSP < #1395
.address 0x40EB8A
000097b1: OF := ~high:1[#1395] & (high:1[#1395] | high:1[RSP]) & ~(high:1[#1395] & high:1[RSP])
.address 0x40EB8A
000097b4: AF := 0x10 = (0x10 & (RSP ^ #1395 ^ 8))
.address 0x40EB8A
000097b7: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40EB8A
000097ba: SF := high:1[RSP]
.address 0x40EB8A
000097bd: ZF := 0 = RSP
.address 0x40EB8E
000097d6: #1399 := pad:128[RBX]
.address 0x40EB8E
00009815: goto %000097d8

000097ef: 
.address 0x40EB8E
000097f0: call %0000737f with noreturn

000097e5: 
.address 0x40EB8E
000097e6: #1402 := low:64[#1401].low:64[#1400]
.address 0x40EB8E
000097e9: RAX := extract:63:0[#1402]
.address 0x40EB8E
000097ec: RDX := extract:127:64[#1402]
.address 0x40EB8E
000097f6: goto %000097f3

000097f2: 
.address 0x40EB8E
000097f4: when high:64[#1400] = 0 goto %000097e5
.address 0x40EB8E
000097f5: goto %000097ef

000097e2: 
.address 0x40EB8E
000097e3: #1401 := #1398 % #1399
.address 0x40EB8E
000097f9: goto %000097f2

000097df: 
.address 0x40EB8E
000097e0: #1400 := #1398 / #1399
.address 0x40EB8E
000097fa: goto %000097e2

000097f3: 
.address 0x40EB8E
00009800: goto %000097fc

000097db: 
.address 0x40EB8E
000097dc: call %0000737f with noreturn

000097fb: 
.address 0x40EB8E
000097fd: when #1399 = 0 goto %000097db
.address 0x40EB8E
000097fe: goto %000097df

000097d8: 
.address 0x40EB8E
000097d9: #1398 := RDX.RAX
.address 0x40EB8E
00009814: goto %000097fb

000097fc: 
.address 0x40EB8E
00009803: CF := unknown[bits]:u1
.address 0x40EB8E
00009806: OF := unknown[bits]:u1
.address 0x40EB8E
00009809: SF := unknown[bits]:u1
.address 0x40EB8E
0000980c: ZF := unknown[bits]:u1
.address 0x40EB8E
0000980f: AF := unknown[bits]:u1
.address 0x40EB8E
00009812: PF := unknown[bits]:u1
00044b81: goto %00009816

.address 0x40EB91
00009816: 
.address 0x40EB91
0000981c: RBX := mem[RSP, el]:u64
.address 0x40EB91
0000981f: RSP := RSP + 8
.address 0x40EB92
00009827: RBP := mem[RSP, el]:u64
.address 0x40EB92
0000982a: RSP := RSP + 8
.address 0x40EB93
00009831: RAX := RDX
.address 0x40EB96
0000983a: #1403 := mem[RSP, el]:u64
.address 0x40EB96
0000983d: RSP := RSP + 8
.address 0x40EB96
00009841: call #1403 with noreturn


.address 0x40EBA0
0004432c: sub sub_40eba0()
.address 0x40EBA0
00009846: 
.address 0x40EBA0
0000984b: RAX := mem[RDI + 8, el]:u64
.address 0x40EBA4
00009858: RDX := 0
.address 0x40EBA4
0000985b: AF := unknown[bits]:u1
.address 0x40EBA4
0000985e: ZF := 1
.address 0x40EBA4
00009861: PF := 1
.address 0x40EBA4
00009864: OF := 0
.address 0x40EBA4
00009867: CF := 0
.address 0x40EBA4
0000986a: SF := 0
.address 0x40EBA6
00009883: #1405 := pad:128[RSI]
.address 0x40EBA6
000098c2: goto %00009885

0000989c: 
.address 0x40EBA6
0000989d: call %0000737f with noreturn

00009892: 
.address 0x40EBA6
00009893: #1408 := low:64[#1407].low:64[#1406]
.address 0x40EBA6
00009896: RAX := extract:63:0[#1408]
.address 0x40EBA6
00009899: RDX := extract:127:64[#1408]
.address 0x40EBA6
000098a3: goto %000098a0

0000989f: 
.address 0x40EBA6
000098a1: when high:64[#1406] = 0 goto %00009892
.address 0x40EBA6
000098a2: goto %0000989c

0000988f: 
.address 0x40EBA6
00009890: #1407 := #1404 % #1405
.address 0x40EBA6
000098a6: goto %0000989f

0000988c: 
.address 0x40EBA6
0000988d: #1406 := #1404 / #1405
.address 0x40EBA6
000098a7: goto %0000988f

000098a0: 
.address 0x40EBA6
000098ad: goto %000098a9

00009888: 
.address 0x40EBA6
00009889: call %0000737f with noreturn

000098a8: 
.address 0x40EBA6
000098aa: when #1405 = 0 goto %00009888
.address 0x40EBA6
000098ab: goto %0000988c

00009885: 
.address 0x40EBA6
00009886: #1404 := RDX.RAX
.address 0x40EBA6
000098c1: goto %000098a8

000098a9: 
.address 0x40EBA6
000098b0: CF := unknown[bits]:u1
.address 0x40EBA6
000098b3: OF := unknown[bits]:u1
.address 0x40EBA6
000098b6: SF := unknown[bits]:u1
.address 0x40EBA6
000098b9: ZF := unknown[bits]:u1
.address 0x40EBA6
000098bc: AF := unknown[bits]:u1
.address 0x40EBA6
000098bf: PF := unknown[bits]:u1
00044b82: goto %000098c3

.address 0x40EBA9
000098c3: 
.address 0x40EBA9
000098c8: RAX := RDX
.address 0x40EBAC
000098d1: #1409 := mem[RSP, el]:u64
.address 0x40EBAC
000098d4: RSP := RSP + 8
.address 0x40EBAC
000098d8: call #1409 with noreturn


.address 0x40EBB0
0004432e: sub sub_40ebb0()
.address 0x40EBB0
000098dd: 
.address 0x40EBB0
000098e8: RAX := 0
.address 0x40EBB0
000098eb: AF := unknown[bits]:u1
.address 0x40EBB0
000098ee: ZF := 1
.address 0x40EBB0
000098f1: PF := 1
.address 0x40EBB0
000098f4: OF := 0
.address 0x40EBB0
000098f7: CF := 0
.address 0x40EBB0
000098fa: SF := 0
.address 0x40EBB2
00009901: RDX := mem[RSI + 8, el]:u64
.address 0x40EBB6
0000990e: #1410 := mem[RDI + 8, el]:u64 - RDX
.address 0x40EBB6
00009911: CF := mem[RDI + 8, el]:u64 < RDX
.address 0x40EBB6
00009914: OF := high:1[(mem[RDI + 8, el]:u64 ^ RDX) & (mem[RDI + 8, el]:u64 ^ #1410)]
.address 0x40EBB6
00009917: AF := 0x10 = (0x10 & (#1410 ^ mem[RDI + 8, el]:u64 ^ RDX))
.address 0x40EBB6
0000991a: PF := ~low:1[let $1 = #1410 >> 4 ^ #1410 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EBB6
0000991d: SF := high:1[#1410]
.address 0x40EBB6
00009920: ZF := 0 = #1410
.address 0x40EBBA
0000992a: when ZF goto %00009924
00044b83: goto %00009957

.address 0x40EBC0
00009924: 
.address 0x40EBC0
00009934: RCX := mem[RSI + 0x10, el]:u64
.address 0x40EBC4
00009941: #1412 := mem[RDI + 0x10, el]:u64 - RCX
.address 0x40EBC4
00009944: CF := mem[RDI + 0x10, el]:u64 < RCX
.address 0x40EBC4
00009947: OF := high:1[(mem[RDI + 0x10, el]:u64 ^ RCX) & (mem[RDI + 0x10, el]:u64 ^ #1412)]
.address 0x40EBC4
0000994a: AF := 0x10 = (0x10 & (#1412 ^ mem[RDI + 0x10, el]:u64 ^ RCX))
.address 0x40EBC4
0000994d: PF := ~low:1[let $1 = #1412 >> 4 ^ #1412 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EBC4
00009950: SF := high:1[#1412]
.address 0x40EBC4
00009953: ZF := 0 = #1412
.address 0x40EBC8
0000995d: when ~ZF goto %00009957
00044b84: goto %00009975

.address 0x40EBCA
00009975: 
.address 0x40EBCA
00009981: #1415 := RSP
.address 0x40EBCA
00009984: RSP := RSP - 8
.address 0x40EBCA
00009987: CF := #1415 < 8
.address 0x40EBCA
0000998a: OF := high:1[(#1415 ^ 8) & (#1415 ^ RSP)]
.address 0x40EBCA
0000998d: AF := 0x10 = (0x10 & (RSP ^ #1415 ^ 8))
.address 0x40EBCA
00009990: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40EBCA
00009993: SF := high:1[RSP]
.address 0x40EBCA
00009996: ZF := 0 = RSP
.address 0x40EBCE
0000999d: RSI := mem[RSI, el]:u64
.address 0x40EBD1
000099a4: RDI := mem[RDI, el]:u64
.address 0x40EBD4
000099ae: RSP := RSP - 8
.address 0x40EBD4
000099b1: mem := mem with [RSP, el]:u64 <- 0x40EBD9
.address 0x40EBD4
000099b4: call @sub_413d00 with return %0000bdd1

.address 0x40EBD9
0000bdd1: 
.address 0x40EBD9
0000bddd: #1671 := RSP
.address 0x40EBD9
0000bde0: RSP := RSP + 8
.address 0x40EBD9
0000bde3: CF := RSP < #1671
.address 0x40EBD9
0000bde6: OF := ~high:1[#1671] & (high:1[#1671] | high:1[RSP]) & ~(high:1[#1671] & high:1[RSP])
.address 0x40EBD9
0000bde9: AF := 0x10 = (0x10 & (RSP ^ #1671 ^ 8))
.address 0x40EBD9
0000bdec: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40EBD9
0000bdef: SF := high:1[RSP]
.address 0x40EBD9
0000bdf2: ZF := 0 = RSP
.address 0x40EBDD
0000bdfb: #1674 := mem[RSP, el]:u64
.address 0x40EBDD
0000bdfe: RSP := RSP + 8
.address 0x40EBDD
0000be02: call #1674 with noreturn

.address 0x40EBBC
00009957: 
.address 0x40EBBC
00009969: #1414 := mem[RSP, el]:u64
.address 0x40EBBC
0000996c: RSP := RSP + 8
.address 0x40EBBC
00009970: call #1414 with noreturn


.address 0x40EBE0
00044331: sub sub_40ebe0()
.address 0x40EBE0
0000be07: 
.address 0x40EBE0
0000be12: RAX := 0
.address 0x40EBE0
0000be15: AF := unknown[bits]:u1
.address 0x40EBE0
0000be18: ZF := 1
.address 0x40EBE0
0000be1b: PF := 1
.address 0x40EBE0
0000be1e: OF := 0
.address 0x40EBE0
0000be21: CF := 0
.address 0x40EBE0
0000be24: SF := 0
.address 0x40EBE2
0000be2b: RDX := mem[RSI + 8, el]:u64
.address 0x40EBE6
0000be38: #1675 := mem[RDI + 8, el]:u64 - RDX
.address 0x40EBE6
0000be3b: CF := mem[RDI + 8, el]:u64 < RDX
.address 0x40EBE6
0000be3e: OF := high:1[(mem[RDI + 8, el]:u64 ^ RDX) & (mem[RDI + 8, el]:u64 ^ #1675)]
.address 0x40EBE6
0000be41: AF := 0x10 = (0x10 & (#1675 ^ mem[RDI + 8, el]:u64 ^ RDX))
.address 0x40EBE6
0000be44: PF := ~low:1[let $1 = #1675 >> 4 ^ #1675 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EBE6
0000be47: SF := high:1[#1675]
.address 0x40EBE6
0000be4a: ZF := 0 = #1675
.address 0x40EBEA
0000be54: when ZF goto %0000be4e
00044b85: goto %0000be81

.address 0x40EBF0
0000be4e: 
.address 0x40EBF0
0000be5e: RCX := mem[RSI + 0x10, el]:u64
.address 0x40EBF4
0000be6b: #1677 := mem[RDI + 0x10, el]:u64 - RCX
.address 0x40EBF4
0000be6e: CF := mem[RDI + 0x10, el]:u64 < RCX
.address 0x40EBF4
0000be71: OF := high:1[(mem[RDI + 0x10, el]:u64 ^ RCX) & (mem[RDI + 0x10, el]:u64 ^ #1677)]
.address 0x40EBF4
0000be74: AF := 0x10 = (0x10 & (#1677 ^ mem[RDI + 0x10, el]:u64 ^ RCX))
.address 0x40EBF4
0000be77: PF := ~low:1[let $1 = #1677 >> 4 ^ #1677 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EBF4
0000be7a: SF := high:1[#1677]
.address 0x40EBF4
0000be7d: ZF := 0 = #1677
.address 0x40EBF8
0000be87: when ~ZF goto %0000be81
00044b86: goto %0000be9f

.address 0x40EBFA
0000be9f: 
.address 0x40EBFA
0000beab: #1680 := RSP
.address 0x40EBFA
0000beae: RSP := RSP - 8
.address 0x40EBFA
0000beb1: CF := #1680 < 8
.address 0x40EBFA
0000beb4: OF := high:1[(#1680 ^ 8) & (#1680 ^ RSP)]
.address 0x40EBFA
0000beb7: AF := 0x10 = (0x10 & (RSP ^ #1680 ^ 8))
.address 0x40EBFA
0000beba: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40EBFA
0000bebd: SF := high:1[RSP]
.address 0x40EBFA
0000bec0: ZF := 0 = RSP
.address 0x40EBFE
0000bec7: RSI := mem[RSI, el]:u64
.address 0x40EC01
0000bece: RDI := mem[RDI, el]:u64
.address 0x40EC04
0000bed7: RSP := RSP - 8
.address 0x40EC04
0000beda: mem := mem with [RSP, el]:u64 <- 0x40EC09
.address 0x40EC04
0000bedd: call @sub_403b20 with return %0000bedf

.address 0x40EC09
0000bedf: 
.address 0x40EC09
0000beea: #1683 := low:32[RAX]
.address 0x40EC09
0000beed: OF := 0
.address 0x40EC09
0000bef0: CF := 0
.address 0x40EC09
0000bef3: AF := unknown[bits]:u1
.address 0x40EC09
0000bef6: PF := ~low:1[let $1 = #1683 >> 4 ^ #1683 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EC09
0000bef9: SF := high:1[#1683]
.address 0x40EC09
0000befc: ZF := 0 = #1683
.address 0x40EC0B
0000bf03: RAX := extract:63:8[RAX].pad:8[ZF]
.address 0x40EC0E
0000bf11: #1685 := RSP
.address 0x40EC0E
0000bf14: RSP := RSP + 8
.address 0x40EC0E
0000bf17: CF := RSP < #1685
.address 0x40EC0E
0000bf1a: OF := ~high:1[#1685] & (high:1[#1685] | high:1[RSP]) & ~(high:1[#1685] & high:1[RSP])
.address 0x40EC0E
0000bf1d: AF := 0x10 = (0x10 & (RSP ^ #1685 ^ 8))
.address 0x40EC0E
0000bf20: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40EC0E
0000bf23: SF := high:1[RSP]
.address 0x40EC0E
0000bf26: ZF := 0 = RSP
.address 0x40EC12
0000bf2f: #1688 := mem[RSP, el]:u64
.address 0x40EC12
0000bf32: RSP := RSP + 8
.address 0x40EC12
0000bf36: call #1688 with noreturn

.address 0x40EBEC
0000be81: 
.address 0x40EBEC
0000be93: #1679 := mem[RSP, el]:u64
.address 0x40EBEC
0000be96: RSP := RSP + 8
.address 0x40EBEC
0000be9a: call #1679 with noreturn


.address 0x40EC20
00044334: sub sub_40ec20()
.address 0x40EC20
0000bf3e: 
.address 0x40EC20
0000bf45: #1689 := RBX
.address 0x40EC20
0000bf48: RSP := RSP - 8
.address 0x40EC20
0000bf4b: mem := mem with [RSP, el]:u64 <- #1689
.address 0x40EC21
0000bf52: RBX := RDI
.address 0x40EC24
0000bf59: RDI := mem[RDI, el]:u64
.address 0x40EC27
0000bf62: RSP := RSP - 8
.address 0x40EC27
0000bf65: mem := mem with [RSP, el]:u64 <- 0x40EC2C
.address 0x40EC27
0000bf68: call @sub_403e70 with return %0000bf6a

.address 0x40EC2C
0000bf6a: 
.address 0x40EC2C
0000bf6f: RDI := RBX
.address 0x40EC2F
0000bf77: RBX := mem[RSP, el]:u64
.address 0x40EC2F
0000bf7a: RSP := RSP + 8
.address 0x40EC30
0000bf81: call @sub_403e70 with noreturn


.address 0x40EC40
00044335: sub sub_40ec40()
.address 0x40EC40
0000bf89: 
.address 0x40EC4C
0000bf94: when ~CF goto %0000bf8e
00044b87: goto %0001eb96

.address 0x40ECC0
0000bf8e: 
.address 0x40ECC0
0000bf9e: mem := mem with [RSP - 0xA, el]:u16 <- FPU_CONTROL
.address 0x40ECC4
0000bfa5: RAX := pad:64[pad:32[mem[RSP - 0xA, el]:u16]]
.address 0x40ECCD
0000bfae: RDX := 0x8000000000000000
.address 0x40ECD7
0000bfbb: RAX := extract:63:16[RAX].high:8[low:16[RAX]] | 0xC.extract:7:0[RAX]
.address 0x40ECD7
0000bfbe: OF := 0
.address 0x40ECD7
0000bfc1: CF := 0
.address 0x40ECD7
0000bfc4: AF := unknown[bits]:u1
.address 0x40ECD7
0000bfc7: PF := ~low:1[let $1 = high:8[low:16[RAX]] >> 4 ^ high:8[low:16[RAX]] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40ECD7
0000bfca: SF := high:1[low:16[RAX]]
.address 0x40ECD7
0000bfcd: ZF := 0 = high:8[low:16[RAX]]
.address 0x40ECDA
0000bfd4: mem := mem with [RSP - 0xC, el]:u16 <- low:16[RAX]
.address 0x40ECDF
0000bfdb: FPU_CONTROL := mem[RSP - 0xC, el]:u16
.address 0x40ECE7
0000bfe3: FPU_CONTROL := mem[RSP - 0xA, el]:u16
.address 0x40ECEB
0000bfea: RAX := mem[RSP - 0x18, el]:u64
.address 0x40ECF0
0000bff7: RAX := RAX ^ RDX
.address 0x40ECF0
0000bffa: OF := 0
.address 0x40ECF0
0000bffd: CF := 0
.address 0x40ECF0
0000c000: AF := unknown[bits]:u1
.address 0x40ECF0
0000c003: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40ECF0
0000c006: SF := high:1[RAX]
.address 0x40ECF0
0000c009: ZF := 0 = RAX
.address 0x40ECF3
0000c011: goto %0000c00d

.address 0x40EC4E
0001eb96: 
.address 0x40EC50
0001eb9c: mem := mem with [RSP - 0xA, el]:u16 <- FPU_CONTROL
.address 0x40EC54
0001eba3: RAX := pad:64[pad:32[mem[RSP - 0xA, el]:u16]]
.address 0x40EC59
0001ebb0: RAX := extract:63:16[RAX].high:8[low:16[RAX]] | 0xC.extract:7:0[RAX]
.address 0x40EC59
0001ebb3: OF := 0
.address 0x40EC59
0001ebb6: CF := 0
.address 0x40EC59
0001ebb9: AF := unknown[bits]:u1
.address 0x40EC59
0001ebbc: PF := ~low:1[let $1 = high:8[low:16[RAX]] >> 4 ^ high:8[low:16[RAX]] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EC59
0001ebbf: SF := high:1[low:16[RAX]]
.address 0x40EC59
0001ebc2: ZF := 0 = high:8[low:16[RAX]]
.address 0x40EC5C
0001ebc9: mem := mem with [RSP - 0xC, el]:u16 <- low:16[RAX]
.address 0x40EC63
0001ebd1: FPU_CONTROL := mem[RSP - 0xC, el]:u16
.address 0x40EC6B
0001ebd9: FPU_CONTROL := mem[RSP - 0xA, el]:u16
.address 0x40EC6F
0001ebe0: RAX := mem[RSP - 0x18, el]:u64
00044b88: goto %0000c00d

.address 0x40EC74
0000c00d: 
.address 0x40EC74
0000c017: mem := mem with [RSP - 0x20, el]:u64 <- RAX
.address 0x40EC79
0000c024: #1692 := RAX
.address 0x40EC79
0000c027: OF := 0
.address 0x40EC79
0000c02a: CF := 0
.address 0x40EC79
0000c02d: AF := unknown[bits]:u1
.address 0x40EC79
0000c030: PF := ~low:1[let $1 = #1692 >> 4 ^ #1692 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EC79
0000c033: SF := high:1[#1692]
.address 0x40EC79
0000c036: ZF := 0 = #1692
.address 0x40EC80
0000c041: when ~SF goto %0000c03b
00044b89: goto %0001eb92

.address 0x40EC82
0001eb92: 
00044b8a: goto %0000c03b

.address 0x40EC88
0000c03b: 
.address 0x40EC88
0000c051: #1694 := low:32[RDI]
.address 0x40EC88
0000c054: OF := 0
.address 0x40EC88
0000c057: CF := 0
.address 0x40EC88
0000c05a: AF := unknown[bits]:u1
.address 0x40EC88
0000c05d: PF := ~low:1[let $1 = #1694 >> 4 ^ #1694 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EC88
0000c060: SF := high:1[#1694]
.address 0x40EC88
0000c063: ZF := 0 = #1694
.address 0x40EC8A
0000c06d: when ~ZF goto %0000c067
00044b8b: goto %0000c086

.address 0x40ECB8
0000c067: 
00044b8c: goto %0000c073

.address 0x40EC8C
0000c086: 
.address 0x40EC90
0000c090: when PF goto %0000c08a
00044b8d: goto %0001eb7d

.address 0x40EC98
0000c08a: 
00044b8e: goto %0000c099

.address 0x40EC92
0001eb7d: 
.address 0x40EC92
0001eb84: when ZF goto %0000c073
00044b8f: goto %0001eb8a

.address 0x40EC94
0001eb8a: 
.address 0x40EC96
0001eb90: goto %0000c099

.address 0x40ECA0
0000c099: 
.address 0x40ECA0
0000c0a5: #1697 := RAX
.address 0x40ECA0
0000c0a8: RAX := RAX + 1
.address 0x40ECA0
0000c0ab: CF := RAX < #1697
.address 0x40ECA0
0000c0ae: OF := ~high:1[#1697] & (high:1[#1697] | high:1[RAX]) & ~(high:1[#1697] & high:1[RAX])
.address 0x40ECA0
0000c0b1: AF := 0x10 = (0x10 & (RAX ^ #1697 ^ 1))
.address 0x40ECA0
0000c0b4: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40ECA0
0000c0b7: SF := high:1[RAX]
.address 0x40ECA0
0000c0ba: ZF := 0 = RAX
.address 0x40ECA4
0000c0c1: mem := mem with [RSP - 0x20, el]:u64 <- RAX
.address 0x40ECA9
0000c0ce: #1700 := RAX
.address 0x40ECA9
0000c0d1: OF := 0
.address 0x40ECA9
0000c0d4: CF := 0
.address 0x40ECA9
0000c0d7: AF := unknown[bits]:u1
.address 0x40ECA9
0000c0da: PF := ~low:1[let $1 = #1700 >> 4 ^ #1700 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40ECA9
0000c0dd: SF := high:1[#1700]
.address 0x40ECA9
0000c0e0: ZF := 0 = #1700
.address 0x40ECB0
0000c0eb: when SF goto %0000c0e5
00044b90: goto %0001eb73

.address 0x40ED00
0000c0e5: 
.address 0x40ED06
0000c0f8: #1702 := mem[RSP, el]:u64
.address 0x40ED06
0000c0fb: RSP := RSP + 8
.address 0x40ED06
0000c0ff: call #1702 with noreturn

.address 0x40ECB2
0001eb73: 
.address 0x40ECB2
0001eb78: goto %0000c073

.address 0x40ECBA
0000c073: 
.address 0x40ECBA
0000c07a: #1696 := mem[RSP, el]:u64
.address 0x40ECBA
0000c07d: RSP := RSP + 8
.address 0x40ECBA
0000c081: call #1696 with noreturn


.address 0x40ED10
00044340: sub sub_40ed10()
.address 0x40ED10
0000c104: 
.address 0x40ED10
0000c10b: #1703 := R15
.address 0x40ED10
0000c10e: RSP := RSP - 8
.address 0x40ED10
0000c111: mem := mem with [RSP, el]:u64 <- #1703
.address 0x40ED12
0000c11a: #1704 := R14
.address 0x40ED12
0000c11d: RSP := RSP - 8
.address 0x40ED12
0000c120: mem := mem with [RSP, el]:u64 <- #1704
.address 0x40ED14
0000c127: RAX := pad:64[low:32[RDX]]
.address 0x40ED16
0000c130: #1705 := R13
.address 0x40ED16
0000c133: RSP := RSP - 8
.address 0x40ED16
0000c136: mem := mem with [RSP, el]:u64 <- #1705
.address 0x40ED18
0000c13f: #1706 := R12
.address 0x40ED18
0000c142: RSP := RSP - 8
.address 0x40ED18
0000c145: mem := mem with [RSP, el]:u64 <- #1706
.address 0x40ED1A
0000c14c: R15 := pad:64[low:32[RDX]]
.address 0x40ED1D
0000c155: #1707 := RBP
.address 0x40ED1D
0000c158: RSP := RSP - 8
.address 0x40ED1D
0000c15b: mem := mem with [RSP, el]:u64 <- #1707
.address 0x40ED1E
0000c164: #1708 := RBX
.address 0x40ED1E
0000c167: RSP := RSP - 8
.address 0x40ED1E
0000c16a: mem := mem with [RSP, el]:u64 <- #1708
.address 0x40ED1F
0000c177: RAX := pad:64[low:32[RAX] & 0x20]
.address 0x40ED1F
0000c17a: OF := 0
.address 0x40ED1F
0000c17d: CF := 0
.address 0x40ED1F
0000c180: AF := unknown[bits]:u1
.address 0x40ED1F
0000c183: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40ED1F
0000c186: SF := high:1[low:32[RAX]]
.address 0x40ED1F
0000c189: ZF := 0 = low:32[RAX]
.address 0x40ED22
0000c196: R15 := pad:64[low:32[R15] & 3]
.address 0x40ED22
0000c199: OF := 0
.address 0x40ED22
0000c19c: CF := 0
.address 0x40ED22
0000c19f: AF := unknown[bits]:u1
.address 0x40ED22
0000c1a2: PF := ~low:1[let $1 = low:32[R15] >> 4 ^ low:32[R15] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40ED22
0000c1a5: SF := high:1[low:32[R15]]
.address 0x40ED22
0000c1a8: ZF := 0 = low:32[R15]
.address 0x40ED26
0000c1af: R12 := pad:64[low:32[RDX]]
.address 0x40ED29
0000c1b6: RBX := RDI
.address 0x40ED2C
0000c1c4: #1711 := RSP
.address 0x40ED2C
0000c1c7: RSP := RSP - 0x98
.address 0x40ED2C
0000c1ca: CF := #1711 < 0x98
.address 0x40ED2C
0000c1cd: OF := high:1[(#1711 ^ 0x98) & (#1711 ^ RSP)]
.address 0x40ED2C
0000c1d0: AF := 0x10 = (0x10 & (RSP ^ #1711 ^ 0x98))
.address 0x40ED2C
0000c1d3: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40ED2C
0000c1d6: SF := high:1[RSP]
.address 0x40ED2C
0000c1d9: ZF := 0 = RSP
.address 0x40ED33
0000c1e0: mem := mem with [RSP + 0x18, el]:u64 <- RCX
.address 0x40ED38
0000c1e7: mem := mem with [RSP + 0x30, el]:u32 <- low:32[RAX]
.address 0x40ED3C
0000c1ee: RCX := mem[FS_BASE + 0x28, el]:u64
.address 0x40ED45
0000c1f5: mem := mem with [RSP + 0x88, el]:u64 <- RCX
.address 0x40ED4D
0000c202: RCX := 0
.address 0x40ED4D
0000c205: AF := unknown[bits]:u1
.address 0x40ED4D
0000c208: ZF := 1
.address 0x40ED4D
0000c20b: PF := 1
.address 0x40ED4D
0000c20e: OF := 0
.address 0x40ED4D
0000c211: CF := 0
.address 0x40ED4D
0000c214: SF := 0
.address 0x40ED4F
0000c221: #1714 := low:32[RAX] - 1
.address 0x40ED4F
0000c224: CF := low:32[RAX] < 1
.address 0x40ED4F
0000c227: OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #1714)]
.address 0x40ED4F
0000c22a: AF := 0x10 = (0x10 & (#1714 ^ low:32[RAX] ^ 1))
.address 0x40ED4F
0000c22d: PF := ~low:1[let $1 = #1714 >> 4 ^ #1714 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40ED4F
0000c230: SF := high:1[#1714]
.address 0x40ED4F
0000c233: ZF := 0 = #1714
.address 0x40ED52
0000c23a: mem := mem with [RSP, el]:u64 <- RSI
.address 0x40ED56
0000c241: mem := mem with [RSP + 0x10, el]:u64 <- R8
.address 0x40ED5B
0000c250: #1716 := low:32[RAX]
.address 0x40ED5B
0000c253: #1717 := low:32[RAX]
.address 0x40ED5B
0000c256: RAX := pad:64[#1717 - #1716 + pad:32[CF]]
.address 0x40ED5B
0000c259: OF := high:1[(#1716 ^ #1717) & (#1717 ^ low:32[RAX])]
.address 0x40ED5B
0000c25c: CF := #1717 < #1716 + pad:32[CF] | #1716 + pad:32[CF] < #1716
.address 0x40ED5B
0000c25f: AF := 0x10 = (0x10 & (low:32[RAX] ^ #1716 ^ #1717))
.address 0x40ED5B
0000c262: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40ED5B
0000c265: SF := high:1[low:32[RAX]]
.address 0x40ED5B
0000c268: ZF := 0 = low:32[RAX]
.address 0x40ED5D
0000c275: RAX := pad:64[low:32[RAX] & 0xFFFFFFE8]
.address 0x40ED5D
0000c278: OF := 0
.address 0x40ED5D
0000c27b: CF := 0
.address 0x40ED5D
0000c27e: AF := unknown[bits]:u1
.address 0x40ED5D
0000c281: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40ED5D
0000c284: SF := high:1[low:32[RAX]]
.address 0x40ED5D
0000c287: ZF := 0 = low:32[RAX]
.address 0x40ED60
0000c295: #1720 := low:32[RAX]
.address 0x40ED60
0000c298: RAX := pad:64[low:32[RAX] + 0x400]
.address 0x40ED60
0000c29b: CF := low:32[RAX] < #1720
.address 0x40ED60
0000c29e: OF := ~high:1[#1720] & (high:1[#1720] | high:1[low:32[RAX]]) & ~(
high:1[#1720] & high:1[low:32[RAX]])
.address 0x40ED60
0000c2a1: AF := 0x10 = (0x10 & (low:32[RAX] ^ #1720 ^ 0x400))
.address 0x40ED60
0000c2a4: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40ED60
0000c2a7: SF := high:1[low:32[RAX]]
.address 0x40ED60
0000c2aa: ZF := 0 = low:32[RAX]
.address 0x40ED65
0000c2b1: mem := mem with [RSP + 0x34, el]:u32 <- low:32[RAX]
.address 0x40ED69
0000c2ba: RSP := RSP - 8
.address 0x40ED69
0000c2bd: mem := mem with [RSP, el]:u64 <- 0x40ED6E
.address 0x40ED69
0000c2c0: call @sub_403890 with return %0000c2c2

.address 0x40ED6E
0000c2c2: 
.address 0x40ED6E
0000c2c7: R14 := mem[RAX, el]:u64
.address 0x40ED71
0000c2ce: R13 := RAX
.address 0x40ED74
0000c2d5: RDI := R14
.address 0x40ED77
0000c2de: RSP := RSP - 8
.address 0x40ED77
0000c2e1: mem := mem with [RSP, el]:u64 <- 0x40ED7C
.address 0x40ED77
0000c2e4: call @sub_403950 with return %0000c2e6

.address 0x40ED7C
0000c2e6: 
.address 0x40ED7C
0000c2eb: RCX := mem[R13 + 0x10, el]:u64
.address 0x40ED80
0000c2f2: R13 := mem[R13 + 8, el]:u64
.address 0x40ED84
0000c2f9: RBP := RAX
.address 0x40ED87
0000c307: #1723 := RAX
.address 0x40ED87
0000c30a: RAX := RAX - 1
.address 0x40ED87
0000c30d: CF := #1723 < 1
.address 0x40ED87
0000c310: OF := high:1[(#1723 ^ 1) & (#1723 ^ RAX)]
.address 0x40ED87
0000c313: AF := 0x10 = (0x10 & (RAX ^ #1723 ^ 1))
.address 0x40ED87
0000c316: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40ED87
0000c319: SF := high:1[RAX]
.address 0x40ED87
0000c31c: ZF := 0 = RAX
.address 0x40ED8B
0000c323: RDX := 1
.address 0x40ED90
0000c330: #1726 := RAX - 0x10
.address 0x40ED90
0000c333: CF := RAX < 0x10
.address 0x40ED90
0000c336: OF := high:1[(RAX ^ 0x10) & (RAX ^ #1726)]
.address 0x40ED90
0000c339: AF := 0x10 = (0x10 & (#1726 ^ RAX ^ 0x10))
.address 0x40ED90
0000c33c: PF := ~low:1[let $1 = #1726 >> 4 ^ #1726 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40ED90
0000c33f: SF := high:1[#1726]
.address 0x40ED90
0000c342: ZF := 0 = #1726
.address 0x40ED94
0000c349: RAX := 0x41A33D
.address 0x40ED9B
0000c350: RDI := R13
.address 0x40ED9E
0000c357: RBP := if ~CF then RDX else RBP
.address 0x40EDA2
0000c35e: mem := mem with [RSP + 0x38, el]:u64 <- RCX
.address 0x40EDA7
0000c365: R14 := if ~CF then RAX else R14
.address 0x40EDAB
0000c36e: RSP := RSP - 8
.address 0x40EDAB
0000c371: mem := mem with [RSP, el]:u64 <- 0x40EDB0
.address 0x40EDAB
0000c374: call @sub_403950 with return %0000c376

.address 0x40EDB0
0000c376: 
.address 0x40EDB0
0000c381: #1728 := RAX - 0x11
.address 0x40EDB0
0000c384: CF := RAX < 0x11
.address 0x40EDB0
0000c387: OF := high:1[(RAX ^ 0x11) & (RAX ^ #1728)]
.address 0x40EDB0
0000c38a: AF := 0x10 = (0x10 & (#1728 ^ RAX ^ 0x11))
.address 0x40EDB0
0000c38d: PF := ~low:1[let $1 = #1728 >> 4 ^ #1728 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EDB0
0000c390: SF := high:1[#1728]
.address 0x40EDB0
0000c393: ZF := 0 = #1728
.address 0x40EDB4
0000c39a: RAX := 0x417C4A
.address 0x40EDBB
0000c3a1: RDI := mem[RSP + 0x10, el]:u64
.address 0x40EDC0
0000c3a8: RCX := mem[RSP + 0x18, el]:u64
.address 0x40EDC5
0000c3af: R13 := if ~CF then RAX else R13
.address 0x40EDC9
0000c3b6: RAX := mem[RSP, el]:u64
.address 0x40EDCD
0000c3c4: #1730 := RAX
.address 0x40EDCD
0000c3c7: RAX := RAX + 0x287
.address 0x40EDCD
0000c3ca: CF := RAX < #1730
.address 0x40EDCD
0000c3cd: OF := ~high:1[#1730] & (high:1[#1730] | high:1[RAX]) & ~(high:1[#1730] & high:1[RAX])
.address 0x40EDCD
0000c3d0: AF := 0x10 = (0x10 & (RAX ^ #1730 ^ 0x287))
.address 0x40EDCD
0000c3d3: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40EDCD
0000c3d6: SF := high:1[RAX]
.address 0x40EDCD
0000c3d9: ZF := 0 = RAX
.address 0x40EDD3
0000c3e6: #1733 := RDI - RCX
.address 0x40EDD3
0000c3e9: CF := RDI < RCX
.address 0x40EDD3
0000c3ec: OF := high:1[(RDI ^ RCX) & (RDI ^ #1733)]
.address 0x40EDD3
0000c3ef: AF := 0x10 = (0x10 & (#1733 ^ RDI ^ RCX))
.address 0x40EDD3
0000c3f2: PF := ~low:1[let $1 = #1733 >> 4 ^ #1733 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EDD3
0000c3f5: SF := high:1[#1733]
.address 0x40EDD3
0000c3f8: ZF := 0 = #1733
.address 0x40EDD6
0000c3ff: mem := mem with [RSP + 8, el]:u64 <- RAX
.address 0x40EDDB
0000c409: when ~(CF | ZF) goto %0000c403
00044b91: goto %0001eac3

.address 0x40EF28
0000c403: 
.address 0x40EF28
0000c419: #1735 := RCX
.address 0x40EF28
0000c41c: OF := 0
.address 0x40EF28
0000c41f: CF := 0
.address 0x40EF28
0000c422: AF := unknown[bits]:u1
.address 0x40EF28
0000c425: PF := ~low:1[let $1 = #1735 >> 4 ^ #1735 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EF28
0000c428: SF := high:1[#1735]
.address 0x40EF28
0000c42b: ZF := 0 = #1735
.address 0x40EF2B
0000c435: when ZF goto %0000c42f
00044b92: goto %0001e845

.address 0x40EF31
0001e845: 
.address 0x40EF31
0001e84a: RAX := mem[RSP + 0x10, el]:u64
.address 0x40EF36
0001e857: RDX := 0
.address 0x40EF36
0001e85a: AF := unknown[bits]:u1
.address 0x40EF36
0001e85d: ZF := 1
.address 0x40EF36
0001e860: PF := 1
.address 0x40EF36
0001e863: OF := 0
.address 0x40EF36
0001e866: CF := 0
.address 0x40EF36
0001e869: SF := 0
.address 0x40EF38
0001e882: #4250 := pad:128[RCX]
.address 0x40EF38
0001e8c1: goto %0001e884

0001e89b: 
.address 0x40EF38
0001e89c: call %0000737f with noreturn

0001e891: 
.address 0x40EF38
0001e892: #4253 := low:64[#4252].low:64[#4251]
.address 0x40EF38
0001e895: RAX := extract:63:0[#4253]
.address 0x40EF38
0001e898: RDX := extract:127:64[#4253]
.address 0x40EF38
0001e8a2: goto %0001e89f

0001e89e: 
.address 0x40EF38
0001e8a0: when high:64[#4251] = 0 goto %0001e891
.address 0x40EF38
0001e8a1: goto %0001e89b

0001e88e: 
.address 0x40EF38
0001e88f: #4252 := #4249 % #4250
.address 0x40EF38
0001e8a5: goto %0001e89e

0001e88b: 
.address 0x40EF38
0001e88c: #4251 := #4249 / #4250
.address 0x40EF38
0001e8a6: goto %0001e88e

0001e89f: 
.address 0x40EF38
0001e8ac: goto %0001e8a8

0001e887: 
.address 0x40EF38
0001e888: call %0000737f with noreturn

0001e8a7: 
.address 0x40EF38
0001e8a9: when #4250 = 0 goto %0001e887
.address 0x40EF38
0001e8aa: goto %0001e88b

0001e884: 
.address 0x40EF38
0001e885: #4249 := RDX.RAX
.address 0x40EF38
0001e8c0: goto %0001e8a7

0001e8a8: 
.address 0x40EF38
0001e8af: CF := unknown[bits]:u1
.address 0x40EF38
0001e8b2: OF := unknown[bits]:u1
.address 0x40EF38
0001e8b5: SF := unknown[bits]:u1
.address 0x40EF38
0001e8b8: ZF := unknown[bits]:u1
.address 0x40EF38
0001e8bb: AF := unknown[bits]:u1
.address 0x40EF38
0001e8be: PF := unknown[bits]:u1
00044b93: goto %0001e8c2

.address 0x40EF3B
0001e8c2: 
.address 0x40EF3B
0001e8cd: #4254 := RDX
.address 0x40EF3B
0001e8d0: OF := 0
.address 0x40EF3B
0001e8d3: CF := 0
.address 0x40EF3B
0001e8d6: AF := unknown[bits]:u1
.address 0x40EF3B
0001e8d9: PF := ~low:1[let $1 = #4254 >> 4 ^ #4254 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EF3B
0001e8dc: SF := high:1[#4254]
.address 0x40EF3B
0001e8df: ZF := 0 = #4254
.address 0x40EF3E
0001e8e6: R8 := RAX
.address 0x40EF41
0001e8ef: when ~ZF goto %0000c42f
00044b94: goto %0001e8f5

.address 0x40EF47
0001e8f5: 
.address 0x40EF47
0001e8fa: RAX := RBX
.address 0x40EF4A
0001e907: RDX := 0
.address 0x40EF4A
0001e90a: AF := unknown[bits]:u1
.address 0x40EF4A
0001e90d: ZF := 1
.address 0x40EF4A
0001e910: PF := 1
.address 0x40EF4A
0001e913: OF := 0
.address 0x40EF4A
0001e916: CF := 0
.address 0x40EF4A
0001e919: SF := 0
.address 0x40EF4C
0001e932: #4257 := pad:128[R8]
.address 0x40EF4C
0001e971: goto %0001e934

0001e94b: 
.address 0x40EF4C
0001e94c: call %0000737f with noreturn

0001e941: 
.address 0x40EF4C
0001e942: #4260 := low:64[#4259].low:64[#4258]
.address 0x40EF4C
0001e945: RAX := extract:63:0[#4260]
.address 0x40EF4C
0001e948: RDX := extract:127:64[#4260]
.address 0x40EF4C
0001e952: goto %0001e94f

0001e94e: 
.address 0x40EF4C
0001e950: when high:64[#4258] = 0 goto %0001e941
.address 0x40EF4C
0001e951: goto %0001e94b

0001e93e: 
.address 0x40EF4C
0001e93f: #4259 := #4256 % #4257
.address 0x40EF4C
0001e955: goto %0001e94e

0001e93b: 
.address 0x40EF4C
0001e93c: #4258 := #4256 / #4257
.address 0x40EF4C
0001e956: goto %0001e93e

0001e94f: 
.address 0x40EF4C
0001e95c: goto %0001e958

0001e937: 
.address 0x40EF4C
0001e938: call %0000737f with noreturn

0001e957: 
.address 0x40EF4C
0001e959: when #4257 = 0 goto %0001e937
.address 0x40EF4C
0001e95a: goto %0001e93b

0001e934: 
.address 0x40EF4C
0001e935: #4256 := RDX.RAX
.address 0x40EF4C
0001e970: goto %0001e957

0001e958: 
.address 0x40EF4C
0001e95f: CF := unknown[bits]:u1
.address 0x40EF4C
0001e962: OF := unknown[bits]:u1
.address 0x40EF4C
0001e965: SF := unknown[bits]:u1
.address 0x40EF4C
0001e968: ZF := unknown[bits]:u1
.address 0x40EF4C
0001e96b: AF := unknown[bits]:u1
.address 0x40EF4C
0001e96e: PF := unknown[bits]:u1
00044b95: goto %0001e972

.address 0x40EF4F
0001e972: 
.address 0x40EF4F
0001e977: RBX := RAX
.address 0x40EF52
0001e97e: RAX := low:64[RDX + (RDX << 2)]
.address 0x40EF56
0001e98b: RDX := 0
.address 0x40EF56
0001e98e: AF := unknown[bits]:u1
.address 0x40EF56
0001e991: ZF := 1
.address 0x40EF56
0001e994: PF := 1
.address 0x40EF56
0001e997: OF := 0
.address 0x40EF56
0001e99a: CF := 0
.address 0x40EF56
0001e99d: SF := 0
.address 0x40EF58
0001e9a4: RSI := RBX
.address 0x40EF5B
0001e9b3: #4261 := RAX
.address 0x40EF5B
0001e9b6: #4262 := RAX
.address 0x40EF5B
0001e9b9: RAX := RAX + #4262
.address 0x40EF5B
0001e9bc: CF := RAX < #4261
.address 0x40EF5B
0001e9bf: OF := high:1[#4261] = high:1[#4262] & (high:1[#4261] | high:1[RAX]) & ~(
high:1[#4261] & high:1[RAX])
.address 0x40EF5B
0001e9c2: AF := 0x10 = (0x10 & (RAX ^ #4261 ^ #4262))
.address 0x40EF5B
0001e9c5: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40EF5B
0001e9c8: SF := high:1[RAX]
.address 0x40EF5B
0001e9cb: ZF := 0 = RAX
.address 0x40EF5E
0001e9e4: #4265 := pad:128[R8]
.address 0x40EF5E
0001ea23: goto %0001e9e6

0001e9fd: 
.address 0x40EF5E
0001e9fe: call %0000737f with noreturn

0001e9f3: 
.address 0x40EF5E
0001e9f4: #4268 := low:64[#4267].low:64[#4266]
.address 0x40EF5E
0001e9f7: RAX := extract:63:0[#4268]
.address 0x40EF5E
0001e9fa: RDX := extract:127:64[#4268]
.address 0x40EF5E
0001ea04: goto %0001ea01

0001ea00: 
.address 0x40EF5E
0001ea02: when high:64[#4266] = 0 goto %0001e9f3
.address 0x40EF5E
0001ea03: goto %0001e9fd

0001e9f0: 
.address 0x40EF5E
0001e9f1: #4267 := #4264 % #4265
.address 0x40EF5E
0001ea07: goto %0001ea00

0001e9ed: 
.address 0x40EF5E
0001e9ee: #4266 := #4264 / #4265
.address 0x40EF5E
0001ea08: goto %0001e9f0

0001ea01: 
.address 0x40EF5E
0001ea0e: goto %0001ea0a

0001e9e9: 
.address 0x40EF5E
0001e9ea: call %0000737f with noreturn

0001ea09: 
.address 0x40EF5E
0001ea0b: when #4265 = 0 goto %0001e9e9
.address 0x40EF5E
0001ea0c: goto %0001e9ed

0001e9e6: 
.address 0x40EF5E
0001e9e7: #4264 := RDX.RAX
.address 0x40EF5E
0001ea22: goto %0001ea09

0001ea0a: 
.address 0x40EF5E
0001ea11: CF := unknown[bits]:u1
.address 0x40EF5E
0001ea14: OF := unknown[bits]:u1
.address 0x40EF5E
0001ea17: SF := unknown[bits]:u1
.address 0x40EF5E
0001ea1a: ZF := unknown[bits]:u1
.address 0x40EF5E
0001ea1d: AF := unknown[bits]:u1
.address 0x40EF5E
0001ea20: PF := unknown[bits]:u1
00044b96: goto %0001ea24

.address 0x40EF61
0001ea24: 
.address 0x40EF61
0001ea31: #4269 := RDX
.address 0x40EF61
0001ea34: #4270 := RDX
.address 0x40EF61
0001ea37: RDX := RDX + #4270
.address 0x40EF61
0001ea3a: CF := RDX < #4269
.address 0x40EF61
0001ea3d: OF := high:1[#4269] = high:1[#4270] & (high:1[#4269] | high:1[RDX]) & ~(
high:1[#4269] & high:1[RDX])
.address 0x40EF61
0001ea40: AF := 0x10 = (0x10 & (RDX ^ #4269 ^ #4270))
.address 0x40EF61
0001ea43: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40EF61
0001ea46: SF := high:1[RDX]
.address 0x40EF61
0001ea49: ZF := 0 = RDX
.address 0x40EF64
0001ea50: R9 := pad:64[low:32[RAX]]
.address 0x40EF67
0001ea5d: #4272 := R8 - RDX
.address 0x40EF67
0001ea60: CF := R8 < RDX
.address 0x40EF67
0001ea63: OF := high:1[(R8 ^ RDX) & (R8 ^ #4272)]
.address 0x40EF67
0001ea66: AF := 0x10 = (0x10 & (#4272 ^ R8 ^ RDX))
.address 0x40EF67
0001ea69: PF := ~low:1[let $1 = #4272 >> 4 ^ #4272 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EF67
0001ea6c: SF := high:1[#4272]
.address 0x40EF67
0001ea6f: ZF := 0 = #4272
.address 0x40EF6A
0001ea78: when CF | ZF goto %0000dd63
00044b97: goto %0001ea7e

.address 0x40F4F8
0000dd63: 
.address 0x40F4F8
0000dd68: RDI := extract:63:8[RDI].pad:8[CF]
.address 0x40F4FC
0000dd6f: RDI := pad:64[pad:32[low:8[RDI]]]
.address 0x40F500
0000dd7d: #1963 := low:32[RDI]
.address 0x40F500
0000dd80: RDI := pad:64[low:32[RDI] + 2]
.address 0x40F500
0000dd83: CF := low:32[RDI] < #1963
.address 0x40F500
0000dd86: OF := ~high:1[#1963] & (high:1[#1963] | high:1[low:32[RDI]]) & ~(
high:1[#1963] & high:1[low:32[RDI]])
.address 0x40F500
0000dd89: AF := 0x10 = (0x10 & (low:32[RDI] ^ #1963 ^ 2))
.address 0x40F500
0000dd8c: PF := ~low:1[let $1 = low:32[RDI] >> 4 ^ low:32[RDI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F500
0000dd8f: SF := high:1[low:32[RDI]]
.address 0x40F500
0000dd92: ZF := 0 = low:32[RDI]
.address 0x40F503
0000dd9a: goto %0000dd96

.address 0x40EF70
0001ea7e: 
.address 0x40EF70
0001ea89: RDI := 0
.address 0x40EF70
0001ea8c: AF := unknown[bits]:u1
.address 0x40EF70
0001ea8f: ZF := 1
.address 0x40EF70
0001ea92: PF := 1
.address 0x40EF70
0001ea95: OF := 0
.address 0x40EF70
0001ea98: CF := 0
.address 0x40EF70
0001ea9b: SF := 0
.address 0x40EF72
0001eaa8: #4274 := RDX
.address 0x40EF72
0001eaab: OF := 0
.address 0x40EF72
0001eaae: CF := 0
.address 0x40EF72
0001eab1: AF := unknown[bits]:u1
.address 0x40EF72
0001eab4: PF := ~low:1[let $1 = #4274 >> 4 ^ #4274 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EF72
0001eab7: SF := high:1[#4274]
.address 0x40EF72
0001eaba: ZF := 0 = #4274
.address 0x40EF75
0001eac1: RDI := extract:63:8[RDI].pad:8[~ZF]
00044b98: goto %0000dd96

.address 0x40EDE1
0001eac3: 
.address 0x40EDE1
0001eace: RDX := 0
.address 0x40EDE1
0001ead1: AF := unknown[bits]:u1
.address 0x40EDE1
0001ead4: ZF := 1
.address 0x40EDE1
0001ead7: PF := 1
.address 0x40EDE1
0001eada: OF := 0
.address 0x40EDE1
0001eadd: CF := 0
.address 0x40EDE1
0001eae0: SF := 0
.address 0x40EDE3
0001eae7: RAX := RCX
.address 0x40EDE6
0001eb00: #4277 := pad:128[RDI]
.address 0x40EDE6
0001eb3f: goto %0001eb02

0001eb19: 
.address 0x40EDE6
0001eb1a: call %0000737f with noreturn

0001eb0f: 
.address 0x40EDE6
0001eb10: #4280 := low:64[#4279].low:64[#4278]
.address 0x40EDE6
0001eb13: RAX := extract:63:0[#4280]
.address 0x40EDE6
0001eb16: RDX := extract:127:64[#4280]
.address 0x40EDE6
0001eb20: goto %0001eb1d

0001eb1c: 
.address 0x40EDE6
0001eb1e: when high:64[#4278] = 0 goto %0001eb0f
.address 0x40EDE6
0001eb1f: goto %0001eb19

0001eb0c: 
.address 0x40EDE6
0001eb0d: #4279 := #4276 % #4277
.address 0x40EDE6
0001eb23: goto %0001eb1c

0001eb09: 
.address 0x40EDE6
0001eb0a: #4278 := #4276 / #4277
.address 0x40EDE6
0001eb24: goto %0001eb0c

0001eb1d: 
.address 0x40EDE6
0001eb2a: goto %0001eb26

0001eb05: 
.address 0x40EDE6
0001eb06: call %0000737f with noreturn

0001eb25: 
.address 0x40EDE6
0001eb27: when #4277 = 0 goto %0001eb05
.address 0x40EDE6
0001eb28: goto %0001eb09

0001eb02: 
.address 0x40EDE6
0001eb03: #4276 := RDX.RAX
.address 0x40EDE6
0001eb3e: goto %0001eb25

0001eb26: 
.address 0x40EDE6
0001eb2d: CF := unknown[bits]:u1
.address 0x40EDE6
0001eb30: OF := unknown[bits]:u1
.address 0x40EDE6
0001eb33: SF := unknown[bits]:u1
.address 0x40EDE6
0001eb36: ZF := unknown[bits]:u1
.address 0x40EDE6
0001eb39: AF := unknown[bits]:u1
.address 0x40EDE6
0001eb3c: PF := unknown[bits]:u1
00044b99: goto %0001eb40

.address 0x40EDE9
0001eb40: 
.address 0x40EDE9
0001eb4b: #4281 := RDX
.address 0x40EDE9
0001eb4e: OF := 0
.address 0x40EDE9
0001eb51: CF := 0
.address 0x40EDE9
0001eb54: AF := unknown[bits]:u1
.address 0x40EDE9
0001eb57: PF := ~low:1[let $1 = #4281 >> 4 ^ #4281 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EDE9
0001eb5a: SF := high:1[#4281]
.address 0x40EDE9
0001eb5d: ZF := 0 = #4281
.address 0x40EDEC
0001eb64: RDI := RAX
.address 0x40EDEF
0001eb6d: when ZF goto %0000e205
00044b9a: goto %0000c42f

.address 0x40F150
0000e205: 
.address 0x40F150
0000e20a: RSI := RBX
.address 0x40F153
0000e217: RDX := 0
.address 0x40F153
0000e21a: AF := unknown[bits]:u1
.address 0x40F153
0000e21d: ZF := 1
.address 0x40F153
0000e220: PF := 1
.address 0x40F153
0000e223: OF := 0
.address 0x40F153
0000e226: CF := 0
.address 0x40F153
0000e229: SF := 0
.address 0x40F155
0000e237: #2011 := extend:128[RSI] * extend:128[RAX]
.address 0x40F155
0000e23a: RSI := low:64[#2011]
.address 0x40F155
0000e23d: OF := #2011 <> extend:128[RSI]
.address 0x40F155
0000e240: CF := #2011 <> extend:128[RSI]
.address 0x40F155
0000e243: PF := unknown[bits]:u1
.address 0x40F155
0000e246: SF := unknown[bits]:u1
.address 0x40F155
0000e249: ZF := unknown[bits]:u1
.address 0x40F155
0000e24c: AF := unknown[bits]:u1
.address 0x40F159
0000e253: RAX := RSI
.address 0x40F15C
0000e26c: #2013 := pad:128[RDI]
.address 0x40F15C
0000e2ab: goto %0000e26e

0000e285: 
.address 0x40F15C
0000e286: call %0000737f with noreturn

0000e27b: 
.address 0x40F15C
0000e27c: #2016 := low:64[#2015].low:64[#2014]
.address 0x40F15C
0000e27f: RAX := extract:63:0[#2016]
.address 0x40F15C
0000e282: RDX := extract:127:64[#2016]
.address 0x40F15C
0000e28c: goto %0000e289

0000e288: 
.address 0x40F15C
0000e28a: when high:64[#2014] = 0 goto %0000e27b
.address 0x40F15C
0000e28b: goto %0000e285

0000e278: 
.address 0x40F15C
0000e279: #2015 := #2012 % #2013
.address 0x40F15C
0000e28f: goto %0000e288

0000e275: 
.address 0x40F15C
0000e276: #2014 := #2012 / #2013
.address 0x40F15C
0000e290: goto %0000e278

0000e289: 
.address 0x40F15C
0000e296: goto %0000e292

0000e271: 
.address 0x40F15C
0000e272: call %0000737f with noreturn

0000e291: 
.address 0x40F15C
0000e293: when #2013 = 0 goto %0000e271
.address 0x40F15C
0000e294: goto %0000e275

0000e26e: 
.address 0x40F15C
0000e26f: #2012 := RDX.RAX
.address 0x40F15C
0000e2aa: goto %0000e291

0000e292: 
.address 0x40F15C
0000e299: CF := unknown[bits]:u1
.address 0x40F15C
0000e29c: OF := unknown[bits]:u1
.address 0x40F15C
0000e29f: SF := unknown[bits]:u1
.address 0x40F15C
0000e2a2: ZF := unknown[bits]:u1
.address 0x40F15C
0000e2a5: AF := unknown[bits]:u1
.address 0x40F15C
0000e2a8: PF := unknown[bits]:u1
00044b9b: goto %0000e2ac

.address 0x40F15F
0000e2ac: 
.address 0x40F15F
0000e2b7: #2017 := RAX - RBX
.address 0x40F15F
0000e2ba: CF := RAX < RBX
.address 0x40F15F
0000e2bd: OF := high:1[(RAX ^ RBX) & (RAX ^ #2017)]
.address 0x40F15F
0000e2c0: AF := 0x10 = (0x10 & (#2017 ^ RAX ^ RBX))
.address 0x40F15F
0000e2c3: PF := ~low:1[let $1 = #2017 >> 4 ^ #2017 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F15F
0000e2c6: SF := high:1[#2017]
.address 0x40F15F
0000e2c9: ZF := 0 = #2017
.address 0x40F162
0000e2d2: when ~ZF goto %0000c42f
00044b9c: goto %0000e2d8

.address 0x40F168
0000e2d8: 
.address 0x40F168
0000e2e3: RDI := 0
.address 0x40F168
0000e2e6: AF := unknown[bits]:u1
.address 0x40F168
0000e2e9: ZF := 1
.address 0x40F168
0000e2ec: PF := 1
.address 0x40F168
0000e2ef: OF := 0
.address 0x40F168
0000e2f2: CF := 0
.address 0x40F168
0000e2f5: SF := 0
.address 0x40F16A
0000e302: R9 := 0
.address 0x40F16A
0000e305: AF := unknown[bits]:u1
.address 0x40F16A
0000e308: ZF := 1
.address 0x40F16A
0000e30b: PF := 1
.address 0x40F16A
0000e30e: OF := 0
.address 0x40F16A
0000e311: CF := 0
.address 0x40F16A
0000e314: SF := 0
.address 0x40F16D
0000e31b: goto %0000dd96

.address 0x40EF79
0000dd96: 
.address 0x40EF79
0000dda0: RCX := pad:64[low:32[R12]]
.address 0x40EF7C
0000dda7: R8 := mem[RSP + 8, el]:u64
.address 0x40EF81
0000ddae: RBX := 0xFFFFFFFF
.address 0x40EF86
0000ddbb: RCX := pad:64[low:32[RCX] & 0x10]
.address 0x40EF86
0000ddbe: OF := 0
.address 0x40EF86
0000ddc1: CF := 0
.address 0x40EF86
0000ddc4: AF := unknown[bits]:u1
.address 0x40EF86
0000ddc7: PF := ~low:1[let $1 = low:32[RCX] >> 4 ^ low:32[RCX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EF86
0000ddca: SF := high:1[low:32[RCX]]
.address 0x40EF86
0000ddcd: ZF := 0 = low:32[RCX]
.address 0x40EF89
0000ddd6: when ZF goto %0000c9a9
00044b9d: goto %0000dddc

.address 0x40EF8F
0000dddc: 
.address 0x40EF8F
0000dde1: R8 := pad:64[mem[RSP + 0x34, el]:u32]
.address 0x40EF94
0000ddee: #1967 := R8 - RSI
.address 0x40EF94
0000ddf1: CF := R8 < RSI
.address 0x40EF94
0000ddf4: OF := high:1[(R8 ^ RSI) & (R8 ^ #1967)]
.address 0x40EF94
0000ddf7: AF := 0x10 = (0x10 & (#1967 ^ R8 ^ RSI))
.address 0x40EF94
0000ddfa: PF := ~low:1[let $1 = #1967 >> 4 ^ #1967 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EF94
0000ddfd: SF := high:1[#1967]
.address 0x40EF94
0000de00: ZF := 0 = #1967
.address 0x40EF97
0000de07: R11 := R8
.address 0x40EF9A
0000de11: when ~(CF | ZF) goto %0000de0b
00044b9e: goto %0000de46

.address 0x40F510
0000de0b: 
.address 0x40F510
0000de1b: R8 := mem[RSP + 8, el]:u64
.address 0x40F515
0000de28: RBX := 0
.address 0x40F515
0000de2b: AF := unknown[bits]:u1
.address 0x40F515
0000de2e: ZF := 1
.address 0x40F515
0000de31: PF := 1
.address 0x40F515
0000de34: OF := 0
.address 0x40F515
0000de37: CF := 0
.address 0x40F515
0000de3a: SF := 0
.address 0x40F517
0000de41: goto %0000c9a9

.address 0x40EFA0
0000de46: 
.address 0x40EFA0
0000de51: RBX := 0
.address 0x40EFA0
0000de54: AF := unknown[bits]:u1
.address 0x40EFA0
0000de57: ZF := 1
.address 0x40EFA0
0000de5a: PF := 1
.address 0x40EFA0
0000de5d: OF := 0
.address 0x40EFA0
0000de60: CF := 0
.address 0x40EFA0
0000de63: SF := 0
.address 0x40EFA2
0000de6b: goto %0000de67

.address 0x40EFC7
0000de67: 
.address 0x40EFC7
0000de71: RAX := RSI
.address 0x40EFCA
0000de7e: RDX := 0
.address 0x40EFCA
0000de81: AF := unknown[bits]:u1
.address 0x40EFCA
0000de84: ZF := 1
.address 0x40EFCA
0000de87: PF := 1
.address 0x40EFCA
0000de8a: OF := 0
.address 0x40EFCA
0000de8d: CF := 0
.address 0x40EFCA
0000de90: SF := 0
.address 0x40EFCC
0000de97: RSI := pad:64[low:32[RDI]]
.address 0x40EFCE
0000deb0: #1970 := pad:128[R8]
.address 0x40EFCE
0000deef: goto %0000deb2

0000dec9: 
.address 0x40EFCE
0000deca: call %0000737f with noreturn

0000debf: 
.address 0x40EFCE
0000dec0: #1973 := low:64[#1972].low:64[#1971]
.address 0x40EFCE
0000dec3: RAX := extract:63:0[#1973]
.address 0x40EFCE
0000dec6: RDX := extract:127:64[#1973]
.address 0x40EFCE
0000ded0: goto %0000decd

0000decc: 
.address 0x40EFCE
0000dece: when high:64[#1971] = 0 goto %0000debf
.address 0x40EFCE
0000decf: goto %0000dec9

0000debc: 
.address 0x40EFCE
0000debd: #1972 := #1969 % #1970
.address 0x40EFCE
0000ded3: goto %0000decc

0000deb9: 
.address 0x40EFCE
0000deba: #1971 := #1969 / #1970
.address 0x40EFCE
0000ded4: goto %0000debc

0000decd: 
.address 0x40EFCE
0000deda: goto %0000ded6

0000deb5: 
.address 0x40EFCE
0000deb6: call %0000737f with noreturn

0000ded5: 
.address 0x40EFCE
0000ded7: when #1970 = 0 goto %0000deb5
.address 0x40EFCE
0000ded8: goto %0000deb9

0000deb2: 
.address 0x40EFCE
0000deb3: #1969 := RDX.RAX
.address 0x40EFCE
0000deee: goto %0000ded5

0000ded6: 
.address 0x40EFCE
0000dedd: CF := unknown[bits]:u1
.address 0x40EFCE
0000dee0: OF := unknown[bits]:u1
.address 0x40EFCE
0000dee3: SF := unknown[bits]:u1
.address 0x40EFCE
0000dee6: ZF := unknown[bits]:u1
.address 0x40EFCE
0000dee9: AF := unknown[bits]:u1
.address 0x40EFCE
0000deec: PF := unknown[bits]:u1
00044b9f: goto %0000def0

.address 0x40EFD1
0000def0: 
.address 0x40EFD1
0000defc: #1974 := low:32[RSI]
.address 0x40EFD1
0000deff: RSI := pad:64[low:32[RSI] ~>> 1]
.address 0x40EFD1
0000df02: CF := high:1[#1974 << 0x1F]
.address 0x40EFD1
0000df05: SF := high:1[low:32[RSI]]
.address 0x40EFD1
0000df08: ZF := 0 = low:32[RSI]
.address 0x40EFD1
0000df0b: PF := ~low:1[let $1 = low:32[RSI] >> 4 ^ low:32[RSI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EFD1
0000df0e: AF := unknown[bits]:u1
.address 0x40EFD1
0000df11: OF := 0
.address 0x40EFD3
0000df18: R10 := RAX
.address 0x40EFD6
0000df1f: RAX := pad:64[low:32[RDX + (RDX << 2)]]
.address 0x40EFD9
0000df2c: RDX := 0
.address 0x40EFD9
0000df2f: AF := unknown[bits]:u1
.address 0x40EFD9
0000df32: ZF := 1
.address 0x40EFD9
0000df35: PF := 1
.address 0x40EFD9
0000df38: OF := 0
.address 0x40EFD9
0000df3b: CF := 0
.address 0x40EFD9
0000df3e: SF := 0
.address 0x40EFDB
0000df45: RAX := pad:64[low:32[R9 + (RAX << 1)]]
.address 0x40EFDF
0000df5e: #1977 := pad:64[low:32[R11]]
.address 0x40EFDF
0000df9d: goto %0000df60

0000df77: 
.address 0x40EFDF
0000df78: call %0000737f with noreturn

0000df6d: 
.address 0x40EFDF
0000df6e: #1980 := low:32[#1979].low:32[#1978]
.address 0x40EFDF
0000df71: RAX := pad:64[extract:31:0[#1980]]
.address 0x40EFDF
0000df74: RDX := pad:64[extract:63:32[#1980]]
.address 0x40EFDF
0000df7e: goto %0000df7b

0000df7a: 
.address 0x40EFDF
0000df7c: when high:32[#1978] = 0 goto %0000df6d
.address 0x40EFDF
0000df7d: goto %0000df77

0000df6a: 
.address 0x40EFDF
0000df6b: #1979 := #1976 % #1977
.address 0x40EFDF
0000df81: goto %0000df7a

0000df67: 
.address 0x40EFDF
0000df68: #1978 := #1976 / #1977
.address 0x40EFDF
0000df82: goto %0000df6a

0000df7b: 
.address 0x40EFDF
0000df88: goto %0000df84

0000df63: 
.address 0x40EFDF
0000df64: call %0000737f with noreturn

0000df83: 
.address 0x40EFDF
0000df85: when #1977 = 0 goto %0000df63
.address 0x40EFDF
0000df86: goto %0000df67

0000df60: 
.address 0x40EFDF
0000df61: #1976 := low:32[RDX].low:32[RAX]
.address 0x40EFDF
0000df9c: goto %0000df83

0000df84: 
.address 0x40EFDF
0000df8b: CF := unknown[bits]:u1
.address 0x40EFDF
0000df8e: OF := unknown[bits]:u1
.address 0x40EFDF
0000df91: SF := unknown[bits]:u1
.address 0x40EFDF
0000df94: ZF := unknown[bits]:u1
.address 0x40EFDF
0000df97: AF := unknown[bits]:u1
.address 0x40EFDF
0000df9a: PF := unknown[bits]:u1
00044ba0: goto %0000df9e

.address 0x40EFE2
0000df9e: 
.address 0x40EFE2
0000dfa3: RDX := pad:64[low:32[RSI + (RDX << 1)]]
.address 0x40EFE5
0000dfaa: R9 := pad:64[low:32[RAX]]
.address 0x40EFE8
0000dfb1: RSI := R10
.address 0x40EFEB
0000dfc0: #1981 := low:32[RDI]
.address 0x40EFEB
0000dfc3: #1982 := low:32[RDX]
.address 0x40EFEB
0000dfc6: RDI := pad:64[low:32[RDI] + #1982]
.address 0x40EFEB
0000dfc9: CF := low:32[RDI] < #1981
.address 0x40EFEB
0000dfcc: OF := high:1[#1981] = high:1[#1982] & (high:1[#1981] | high:1[low:32[RDI]]) & ~(
high:1[#1981] & high:1[low:32[RDI]])
.address 0x40EFEB
0000dfcf: AF := 0x10 = (0x10 & (low:32[RDI] ^ #1981 ^ #1982))
.address 0x40EFEB
0000dfd2: PF := ~low:1[let $1 = low:32[RDI] >> 4 ^ low:32[RDI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EFEB
0000dfd5: SF := high:1[low:32[RDI]]
.address 0x40EFEB
0000dfd8: ZF := 0 = low:32[RDI]
.address 0x40EFED
0000dfe5: #1984 := low:32[R11] - low:32[RDX]
.address 0x40EFED
0000dfe8: CF := low:32[R11] < low:32[RDX]
.address 0x40EFED
0000dfeb: OF := high:1[(low:32[R11] ^ low:32[RDX]) & (low:32[R11] ^ #1984)]
.address 0x40EFED
0000dfee: AF := 0x10 = (0x10 & (#1984 ^ low:32[R11] ^ low:32[RDX]))
.address 0x40EFED
0000dff1: PF := ~low:1[let $1 = #1984 >> 4 ^ #1984 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EFED
0000dff4: SF := high:1[#1984]
.address 0x40EFED
0000dff7: ZF := 0 = #1984
.address 0x40EFF0
0000e001: when ~(CF | ZF) goto %0000dffb
00044ba1: goto %0000e0ae

.address 0x40EFF2
0000e0ae: 
.address 0x40EFF2
0000e0b9: #1995 := low:32[R11] - low:32[RDI]
.address 0x40EFF2
0000e0bc: CF := low:32[R11] < low:32[RDI]
.address 0x40EFF2
0000e0bf: OF := high:1[(low:32[R11] ^ low:32[RDI]) & (low:32[R11] ^ #1995)]
.address 0x40EFF2
0000e0c2: AF := 0x10 = (0x10 & (#1995 ^ low:32[R11] ^ low:32[RDI]))
.address 0x40EFF2
0000e0c5: PF := ~low:1[let $1 = #1995 >> 4 ^ #1995 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EFF2
0000e0c8: SF := high:1[#1995]
.address 0x40EFF2
0000e0cb: ZF := 0 = #1995
.address 0x40EFF5
0000e0d2: RDI := extract:63:8[RDI].pad:8[CF]
.address 0x40EFF9
0000e0d9: RDI := pad:64[pad:32[low:8[RDI]]]
.address 0x40EFFD
0000e0e7: #1997 := low:32[RDI]
.address 0x40EFFD
0000e0ea: RDI := pad:64[low:32[RDI] + 2]
.address 0x40EFFD
0000e0ed: CF := low:32[RDI] < #1997
.address 0x40EFFD
0000e0f0: OF := ~high:1[#1997] & (high:1[#1997] | high:1[low:32[RDI]]) & ~(
high:1[#1997] & high:1[low:32[RDI]])
.address 0x40EFFD
0000e0f3: AF := 0x10 = (0x10 & (low:32[RDI] ^ #1997 ^ 2))
.address 0x40EFFD
0000e0f6: PF := ~low:1[let $1 = low:32[RDI] >> 4 ^ low:32[RDI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EFFD
0000e0f9: SF := high:1[low:32[RDI]]
.address 0x40EFFD
0000e0fc: ZF := 0 = low:32[RDI]
.address 0x40F000
0000e103: goto %0000e033

.address 0x40EFA8
0000dffb: 
.address 0x40EFA8
0000e011: #1986 := low:32[RDI]
.address 0x40EFA8
0000e014: OF := 0
.address 0x40EFA8
0000e017: CF := 0
.address 0x40EFA8
0000e01a: AF := unknown[bits]:u1
.address 0x40EFA8
0000e01d: PF := ~low:1[let $1 = #1986 >> 4 ^ #1986 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EFA8
0000e020: SF := high:1[#1986]
.address 0x40EFA8
0000e023: ZF := 0 = #1986
.address 0x40EFAA
0000e02a: RDI := extract:63:8[RDI].pad:8[~ZF]
.address 0x40EFAE
0000e031: RDI := pad:64[pad:32[low:8[RDI]]]
00044ba2: goto %0000e033

.address 0x40EFB2
0000e033: 
.address 0x40EFB2
0000e03f: #1988 := low:32[RBX]
.address 0x40EFB2
0000e042: RBX := pad:64[low:32[RBX] + 1]
.address 0x40EFB2
0000e045: CF := low:32[RBX] < #1988
.address 0x40EFB2
0000e048: OF := ~high:1[#1988] & (high:1[#1988] | high:1[low:32[RBX]]) & ~(
high:1[#1988] & high:1[low:32[RBX]])
.address 0x40EFB2
0000e04b: AF := 0x10 = (0x10 & (low:32[RBX] ^ #1988 ^ 1))
.address 0x40EFB2
0000e04e: PF := ~low:1[let $1 = low:32[RBX] >> 4 ^ low:32[RBX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EFB2
0000e051: SF := high:1[low:32[RBX]]
.address 0x40EFB2
0000e054: ZF := 0 = low:32[RBX]
.address 0x40EFB5
0000e061: #1991 := R8 - R10
.address 0x40EFB5
0000e064: CF := R8 < R10
.address 0x40EFB5
0000e067: OF := high:1[(R8 ^ R10) & (R8 ^ #1991)]
.address 0x40EFB5
0000e06a: AF := 0x10 = (0x10 & (#1991 ^ R8 ^ R10))
.address 0x40EFB5
0000e06d: PF := ~low:1[let $1 = #1991 >> 4 ^ #1991 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EFB5
0000e070: SF := high:1[#1991]
.address 0x40EFB5
0000e073: ZF := 0 = #1991
.address 0x40EFB8
0000e07c: when ~(CF | ZF) goto %0000d238
00044ba3: goto %0000e082

.address 0x40F2CD
0000d238: 
.address 0x40F2CD
0000d243: #1863 := R10 - 9
.address 0x40F2CD
0000d246: CF := R10 < 9
.address 0x40F2CD
0000d249: OF := high:1[(R10 ^ 9) & (R10 ^ #1863)]
.address 0x40F2CD
0000d24c: AF := 0x10 = (0x10 & (#1863 ^ R10 ^ 9))
.address 0x40F2CD
0000d24f: PF := ~low:1[let $1 = #1863 >> 4 ^ #1863 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F2CD
0000d252: SF := high:1[#1863]
.address 0x40F2CD
0000d255: ZF := 0 = #1863
.address 0x40F2D1
0000d25e: when ~(CF | ZF) goto %0000d03b
00044ba4: goto %0000d264

.address 0x40F2D7
0000d264: 
.address 0x40F2D7
0000d26f: #1865 := low:32[R15] - 1
.address 0x40F2D7
0000d272: CF := low:32[R15] < 1
.address 0x40F2D7
0000d275: OF := high:1[(low:32[R15] ^ 1) & (low:32[R15] ^ #1865)]
.address 0x40F2D7
0000d278: AF := 0x10 = (0x10 & (#1865 ^ low:32[R15] ^ 1))
.address 0x40F2D7
0000d27b: PF := ~low:1[let $1 = #1865 >> 4 ^ #1865 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F2D7
0000d27e: SF := high:1[#1865]
.address 0x40F2D7
0000d281: ZF := 0 = #1865
.address 0x40F2DB
0000d28b: when ZF goto %0000d285
00044ba5: goto %0000d739

.address 0x40F592
0000d285: 
.address 0x40F592
0000d295: RDX := pad:64[low:32[RAX]]
.address 0x40F594
0000d2a2: RDX := pad:64[low:32[RDX] & 1]
.address 0x40F594
0000d2a5: OF := 0
.address 0x40F594
0000d2a8: CF := 0
.address 0x40F594
0000d2ab: AF := unknown[bits]:u1
.address 0x40F594
0000d2ae: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F594
0000d2b1: SF := high:1[low:32[RDX]]
.address 0x40F594
0000d2b4: ZF := 0 = low:32[RDX]
.address 0x40F597
0000d2c3: #1868 := low:32[RDX]
.address 0x40F597
0000d2c6: #1869 := low:32[RDI]
.address 0x40F597
0000d2c9: RDX := pad:64[low:32[RDX] + #1869]
.address 0x40F597
0000d2cc: CF := low:32[RDX] < #1868
.address 0x40F597
0000d2cf: OF := high:1[#1868] = high:1[#1869] & (high:1[#1868] | high:1[low:32[RDX]]) & ~(
high:1[#1868] & high:1[low:32[RDX]])
.address 0x40F597
0000d2d2: AF := 0x10 = (0x10 & (low:32[RDX] ^ #1868 ^ #1869))
.address 0x40F597
0000d2d5: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F597
0000d2d8: SF := high:1[low:32[RDX]]
.address 0x40F597
0000d2db: ZF := 0 = low:32[RDX]
.address 0x40F599
0000d2e8: #1871 := low:32[RDX] - 2
.address 0x40F599
0000d2eb: CF := low:32[RDX] < 2
.address 0x40F599
0000d2ee: OF := high:1[(low:32[RDX] ^ 2) & (low:32[RDX] ^ #1871)]
.address 0x40F599
0000d2f1: AF := 0x10 = (0x10 & (#1871 ^ low:32[RDX] ^ 2))
.address 0x40F599
0000d2f4: PF := ~low:1[let $1 = #1871 >> 4 ^ #1871 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F599
0000d2f7: SF := high:1[#1871]
.address 0x40F599
0000d2fa: ZF := 0 = #1871
.address 0x40F59C
0000d301: RDX := extract:63:8[RDX].pad:8[~(ZF | SF ^ OF)]
.address 0x40F59F
0000d309: goto %0000d305

.address 0x40F2E1
0000d739: 
.address 0x40F2E1
0000d744: #1916 := low:32[R15]
.address 0x40F2E1
0000d747: OF := 0
.address 0x40F2E1
0000d74a: CF := 0
.address 0x40F2E1
0000d74d: AF := unknown[bits]:u1
.address 0x40F2E1
0000d750: PF := ~low:1[let $1 = #1916 >> 4 ^ #1916 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F2E1
0000d753: SF := high:1[#1916]
.address 0x40F2E1
0000d756: ZF := 0 = #1916
.address 0x40F2E4
0000d75d: RDX := extract:63:8[RDX].pad:8[ZF]
.address 0x40F2E7
0000d76a: #1918 := low:32[RDI]
.address 0x40F2E7
0000d76d: OF := 0
.address 0x40F2E7
0000d770: CF := 0
.address 0x40F2E7
0000d773: AF := unknown[bits]:u1
.address 0x40F2E7
0000d776: PF := ~low:1[let $1 = #1918 >> 4 ^ #1918 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F2E7
0000d779: SF := high:1[#1918]
.address 0x40F2E7
0000d77c: ZF := 0 = #1918
.address 0x40F2E9
0000d783: R8 := extract:63:8[R8].pad:8[~(ZF | SF ^ OF)]
.address 0x40F2ED
0000d790: RDX := pad:64[low:32[RDX] & low:32[R8]]
.address 0x40F2ED
0000d793: OF := 0
.address 0x40F2ED
0000d796: CF := 0
.address 0x40F2ED
0000d799: AF := unknown[bits]:u1
.address 0x40F2ED
0000d79c: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F2ED
0000d79f: SF := high:1[low:32[RDX]]
.address 0x40F2ED
0000d7a2: ZF := 0 = low:32[RDX]
00044ba6: goto %0000d305

.address 0x40F2F0
0000d305: 
.address 0x40F2F0
0000d315: #1873 := low:8[RDX]
.address 0x40F2F0
0000d318: OF := 0
.address 0x40F2F0
0000d31b: CF := 0
.address 0x40F2F0
0000d31e: AF := unknown[bits]:u1
.address 0x40F2F0
0000d321: PF := ~low:1[let $1 = #1873 >> 4 ^ #1873 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F2F0
0000d324: SF := high:1[#1873]
.address 0x40F2F0
0000d327: ZF := 0 = #1873
.address 0x40F2F2
0000d331: when ZF goto %0000d32b
00044ba7: goto %0000d706

.address 0x40F579
0000d32b: 
.address 0x40F579
0000d341: #1875 := low:32[RAX]
.address 0x40F579
0000d344: OF := 0
.address 0x40F579
0000d347: CF := 0
.address 0x40F579
0000d34a: AF := unknown[bits]:u1
.address 0x40F579
0000d34d: PF := ~low:1[let $1 = #1875 >> 4 ^ #1875 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F579
0000d350: SF := high:1[#1875]
.address 0x40F579
0000d353: ZF := 0 = #1875
.address 0x40F57B
0000d35d: when ~ZF goto %0000d357
00044ba8: goto %0000d608

.address 0x40F2F8
0000d706: 
.address 0x40F2F8
0000d70b: R9 := pad:64[low:32[RAX + 1]]
.address 0x40F2FC
0000d718: #1914 := low:32[R9] - 0xA
.address 0x40F2FC
0000d71b: CF := low:32[R9] < 0xA
.address 0x40F2FC
0000d71e: OF := high:1[(low:32[R9] ^ 0xA) & (low:32[R9] ^ #1914)]
.address 0x40F2FC
0000d721: AF := 0x10 = (0x10 & (#1914 ^ low:32[R9] ^ 0xA))
.address 0x40F2FC
0000d724: PF := ~low:1[let $1 = #1914 >> 4 ^ #1914 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F2FC
0000d727: SF := high:1[#1914]
.address 0x40F2FC
0000d72a: ZF := 0 = #1914
.address 0x40F300
0000d733: when ZF goto %0000d5b4
00044ba9: goto %0000d357

.address 0x40F601
0000d5b4: 
.address 0x40F601
0000d5b9: RSI := low:64[R10 + 1]
.address 0x40F605
0000d5c6: #1904 := RSI - 0xA
.address 0x40F605
0000d5c9: CF := RSI < 0xA
.address 0x40F605
0000d5cc: OF := high:1[(RSI ^ 0xA) & (RSI ^ #1904)]
.address 0x40F605
0000d5cf: AF := 0x10 = (0x10 & (#1904 ^ RSI ^ 0xA))
.address 0x40F605
0000d5d2: PF := ~low:1[let $1 = #1904 >> 4 ^ #1904 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F605
0000d5d5: SF := high:1[#1904]
.address 0x40F605
0000d5d8: ZF := 0 = #1904
.address 0x40F609
0000d5e1: when ZF goto %0000d1e2
00044baa: goto %0000d5e7

.address 0x40F660
0000d1e2: 
.address 0x40F660
0000d1e7: R8 := mem[RSP + 8, el]:u64
.address 0x40F665
0000d1ee: goto %0000c963

.address 0x40F60B
0000d5e7: 
.address 0x40F60B
0000d5f2: RDI := 0
.address 0x40F60B
0000d5f5: AF := unknown[bits]:u1
.address 0x40F60B
0000d5f8: ZF := 1
.address 0x40F60B
0000d5fb: PF := 1
.address 0x40F60B
0000d5fe: OF := 0
.address 0x40F60B
0000d601: CF := 0
.address 0x40F60B
0000d604: SF := 0
.address 0x40F60D
0000d60c: goto %0000d608

.address 0x40F581
0000d608: 
.address 0x40F581
0000d618: #1906 := low:8[R12] & 8
.address 0x40F581
0000d61b: OF := 0
.address 0x40F581
0000d61e: CF := 0
.address 0x40F581
0000d621: AF := unknown[bits]:u1
.address 0x40F581
0000d624: PF := ~low:1[let $1 = #1906 >> 4 ^ #1906 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F581
0000d627: SF := high:1[#1906]
.address 0x40F581
0000d62a: ZF := 0 = #1906
.address 0x40F585
0000d634: when ~ZF goto %0000d62e
00044bab: goto %0000d666

.address 0x40F5A4
0000d62e: 
.address 0x40F5A4
0000d63e: R8 := mem[RSP + 8, el]:u64
.address 0x40F5A9
0000d64b: R9 := 0
.address 0x40F5A9
0000d64e: AF := unknown[bits]:u1
.address 0x40F5A9
0000d651: ZF := 1
.address 0x40F5A9
0000d654: PF := 1
.address 0x40F5A9
0000d657: OF := 0
.address 0x40F5A9
0000d65a: CF := 0
.address 0x40F5A9
0000d65d: SF := 0
.address 0x40F5AC
0000d664: goto %0000c9a9

.address 0x40F587
0000d666: 
.address 0x40F587
0000d66b: R9 := 0x30
.address 0x40F58D
0000d672: goto %0000d385

.address 0x40F306
0000d357: 
.address 0x40F306
0000d36e: #1877 := low:32[R9]
.address 0x40F306
0000d371: R9 := pad:64[low:32[R9] + 0x30]
.address 0x40F306
0000d374: CF := low:32[R9] < #1877
.address 0x40F306
0000d377: OF := ~high:1[#1877] & (high:1[#1877] | high:1[low:32[R9]]) & ~(
high:1[#1877] & high:1[low:32[R9]])
.address 0x40F306
0000d37a: AF := 0x10 = (0x10 & (low:32[R9] ^ #1877 ^ 0x30))
.address 0x40F306
0000d37d: PF := ~low:1[let $1 = low:32[R9] >> 4 ^ low:32[R9] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F306
0000d380: SF := high:1[low:32[R9]]
.address 0x40F306
0000d383: ZF := 0 = low:32[R9]
00044bac: goto %0000d385

.address 0x40F30A
0000d385: 
.address 0x40F30A
0000d38a: RAX := mem[RSP, el]:u64
.address 0x40F30E
0000d391: R8 := low:64[RAX + 0x286]
.address 0x40F315
0000d398: mem := mem with [RAX + 0x286] <- low:8[R9]
.address 0x40F31C
0000d39f: RAX := pad:64[low:32[RBP]]
.address 0x40F31E
0000d3ae: #1880 := R8
.address 0x40F31E
0000d3b1: #1881 := RBP
.address 0x40F31E
0000d3b4: R8 := R8 - RBP
.address 0x40F31E
0000d3b7: CF := #1880 < #1881
.address 0x40F31E
0000d3ba: OF := high:1[(#1880 ^ #1881) & (#1880 ^ R8)]
.address 0x40F31E
0000d3bd: AF := 0x10 = (0x10 & (R8 ^ #1880 ^ #1881))
.address 0x40F31E
0000d3c0: PF := ~low:1[let $1 = R8 >> 4 ^ R8 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F31E
0000d3c3: SF := high:1[R8]
.address 0x40F31E
0000d3c6: ZF := 0 = R8
.address 0x40F321
0000d3d3: #1883 := low:32[RBP] - 8
.address 0x40F321
0000d3d6: CF := low:32[RBP] < 8
.address 0x40F321
0000d3d9: OF := high:1[(low:32[RBP] ^ 8) & (low:32[RBP] ^ #1883)]
.address 0x40F321
0000d3dc: AF := 0x10 = (0x10 & (#1883 ^ low:32[RBP] ^ 8))
.address 0x40F321
0000d3df: PF := ~low:1[let $1 = #1883 >> 4 ^ #1883 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F321
0000d3e2: SF := high:1[#1883]
.address 0x40F321
0000d3e5: ZF := 0 = #1883
.address 0x40F324
0000d3ef: when ~CF goto %0000d3e9
00044bad: goto %0000d674

.address 0x40F5B1
0000d3e9: 
.address 0x40F5B1
0000d3f9: RAX := mem[R14, el]:u64
.address 0x40F5B4
0000d400: R9 := R14
.address 0x40F5B7
0000d407: mem := mem with [R8, el]:u64 <- RAX
.address 0x40F5BA
0000d40e: RAX := pad:64[low:32[RBP]]
.address 0x40F5BC
0000d415: RDX := mem[R14 + RAX - 8, el]:u64
.address 0x40F5C1
0000d41c: mem := mem with [R8 + RAX - 8, el]:u64 <- RDX
.address 0x40F5C6
0000d423: RDX := low:64[R8 + 8]
.address 0x40F5CA
0000d42a: RAX := R8
.address 0x40F5CD
0000d437: RDX := RDX & 0xFFFFFFFFFFFFFFF8
.address 0x40F5CD
0000d43a: OF := 0
.address 0x40F5CD
0000d43d: CF := 0
.address 0x40F5CD
0000d440: AF := unknown[bits]:u1
.address 0x40F5CD
0000d443: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F5CD
0000d446: SF := high:1[RDX]
.address 0x40F5CD
0000d449: ZF := 0 = RDX
.address 0x40F5D1
0000d458: #1886 := RAX
.address 0x40F5D1
0000d45b: #1887 := RDX
.address 0x40F5D1
0000d45e: RAX := RAX - RDX
.address 0x40F5D1
0000d461: CF := #1886 < #1887
.address 0x40F5D1
0000d464: OF := high:1[(#1886 ^ #1887) & (#1886 ^ RAX)]
.address 0x40F5D1
0000d467: AF := 0x10 = (0x10 & (RAX ^ #1886 ^ #1887))
.address 0x40F5D1
0000d46a: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F5D1
0000d46d: SF := high:1[RAX]
.address 0x40F5D1
0000d470: ZF := 0 = RAX
.address 0x40F5D4
0000d47f: #1889 := R9
.address 0x40F5D4
0000d482: #1890 := RAX
.address 0x40F5D4
0000d485: R9 := R9 - RAX
.address 0x40F5D4
0000d488: CF := #1889 < #1890
.address 0x40F5D4
0000d48b: OF := high:1[(#1889 ^ #1890) & (#1889 ^ R9)]
.address 0x40F5D4
0000d48e: AF := 0x10 = (0x10 & (R9 ^ #1889 ^ #1890))
.address 0x40F5D4
0000d491: PF := ~low:1[let $1 = R9 >> 4 ^ R9 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F5D4
0000d494: SF := high:1[R9]
.address 0x40F5D4
0000d497: ZF := 0 = R9
.address 0x40F5D7
0000d4a6: #1892 := low:32[RAX]
.address 0x40F5D7
0000d4a9: #1893 := low:32[RBP]
.address 0x40F5D7
0000d4ac: RAX := pad:64[low:32[RAX] + #1893]
.address 0x40F5D7
0000d4af: CF := low:32[RAX] < #1892
.address 0x40F5D7
0000d4b2: OF := high:1[#1892] = high:1[#1893] & (high:1[#1892] | high:1[low:32[RAX]]) & ~(
high:1[#1892] & high:1[low:32[RAX]])
.address 0x40F5D7
0000d4b5: AF := 0x10 = (0x10 & (low:32[RAX] ^ #1892 ^ #1893))
.address 0x40F5D7
0000d4b8: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F5D7
0000d4bb: SF := high:1[low:32[RAX]]
.address 0x40F5D7
0000d4be: ZF := 0 = low:32[RAX]
.address 0x40F5D9
0000d4cb: RAX := pad:64[low:32[RAX] & 0xFFFFFFF8]
.address 0x40F5D9
0000d4ce: OF := 0
.address 0x40F5D9
0000d4d1: CF := 0
.address 0x40F5D9
0000d4d4: AF := unknown[bits]:u1
.address 0x40F5D9
0000d4d7: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F5D9
0000d4da: SF := high:1[low:32[RAX]]
.address 0x40F5D9
0000d4dd: ZF := 0 = low:32[RAX]
.address 0x40F5DC
0000d4ea: #1896 := low:32[RAX] - 8
.address 0x40F5DC
0000d4ed: CF := low:32[RAX] < 8
.address 0x40F5DC
0000d4f0: OF := high:1[(low:32[RAX] ^ 8) & (low:32[RAX] ^ #1896)]
.address 0x40F5DC
0000d4f3: AF := 0x10 = (0x10 & (#1896 ^ low:32[RAX] ^ 8))
.address 0x40F5DC
0000d4f6: PF := ~low:1[let $1 = #1896 >> 4 ^ #1896 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F5DC
0000d4f9: SF := high:1[#1896]
.address 0x40F5DC
0000d4fc: ZF := 0 = #1896
.address 0x40F5DF
0000d505: when CF goto %0000c963
00044bae: goto %0000d50b

.address 0x40F5E5
0000d50b: 
.address 0x40F5E5
0000d516: RAX := pad:64[low:32[RAX] & 0xFFFFFFF8]
.address 0x40F5E5
0000d519: OF := 0
.address 0x40F5E5
0000d51c: CF := 0
.address 0x40F5E5
0000d51f: AF := unknown[bits]:u1
.address 0x40F5E5
0000d522: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F5E5
0000d525: SF := high:1[low:32[RAX]]
.address 0x40F5E5
0000d528: ZF := 0 = low:32[RAX]
.address 0x40F5E8
0000d535: RDI := 0
.address 0x40F5E8
0000d538: AF := unknown[bits]:u1
.address 0x40F5E8
0000d53b: ZF := 1
.address 0x40F5E8
0000d53e: PF := 1
.address 0x40F5E8
0000d541: OF := 0
.address 0x40F5E8
0000d544: CF := 0
.address 0x40F5E8
0000d547: SF := 0
00044baf: goto %0000d549

.address 0x40F5EA
0000d549: 
.address 0x40F5EA
0000d54e: R10 := pad:64[low:32[RDI]]
.address 0x40F5ED
0000d55c: #1899 := low:32[RDI]
.address 0x40F5ED
0000d55f: RDI := pad:64[low:32[RDI] + 8]
.address 0x40F5ED
0000d562: CF := low:32[RDI] < #1899
.address 0x40F5ED
0000d565: OF := ~high:1[#1899] & (high:1[#1899] | high:1[low:32[RDI]]) & ~(
high:1[#1899] & high:1[low:32[RDI]])
.address 0x40F5ED
0000d568: AF := 0x10 = (0x10 & (low:32[RDI] ^ #1899 ^ 8))
.address 0x40F5ED
0000d56b: PF := ~low:1[let $1 = low:32[RDI] >> 4 ^ low:32[RDI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F5ED
0000d56e: SF := high:1[low:32[RDI]]
.address 0x40F5ED
0000d571: ZF := 0 = low:32[RDI]
.address 0x40F5F0
0000d578: R11 := mem[R9 + R10, el]:u64
.address 0x40F5F4
0000d585: #1902 := low:32[RDI] - low:32[RAX]
.address 0x40F5F4
0000d588: CF := low:32[RDI] < low:32[RAX]
.address 0x40F5F4
0000d58b: OF := high:1[(low:32[RDI] ^ low:32[RAX]) & (low:32[RDI] ^ #1902)]
.address 0x40F5F4
0000d58e: AF := 0x10 = (0x10 & (#1902 ^ low:32[RDI] ^ low:32[RAX]))
.address 0x40F5F4
0000d591: PF := ~low:1[let $1 = #1902 >> 4 ^ #1902 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F5F4
0000d594: SF := high:1[#1902]
.address 0x40F5F4
0000d597: ZF := 0 = #1902
.address 0x40F5F6
0000d59e: mem := mem with [RDX + R10, el]:u64 <- R11
.address 0x40F5FA
0000d5a7: when CF goto %0000d549
00044bb0: goto %0000d5ad

.address 0x40F5FC
0000d5ad: 
.address 0x40F5FC
0000d5b2: goto %0000c963

.address 0x40F32A
0000d674: 
.address 0x40F32A
0000d67f: #1908 := low:8[RBP] & 4
.address 0x40F32A
0000d682: OF := 0
.address 0x40F32A
0000d685: CF := 0
.address 0x40F32A
0000d688: AF := unknown[bits]:u1
.address 0x40F32A
0000d68b: PF := ~low:1[let $1 = #1908 >> 4 ^ #1908 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F32A
0000d68e: SF := high:1[#1908]
.address 0x40F32A
0000d691: ZF := 0 = #1908
.address 0x40F32E
0000d69a: when ~ZF goto %0000d0f2
00044bb1: goto %0000d6a0

.address 0x40F6B6
0000d0f2: 
.address 0x40F6B6
0000d0f7: RDX := pad:64[mem[R14, el]:u32]
.address 0x40F6B9
0000d0fe: mem := mem with [R8, el]:u32 <- low:32[RDX]
.address 0x40F6BC
0000d105: RDX := pad:64[mem[R14 + RAX - 4, el]:u32]
.address 0x40F6C1
0000d10c: mem := mem with [R8 + RAX - 4, el]:u32 <- low:32[RDX]
.address 0x40F6C6
0000d113: goto %0000c963

.address 0x40F334
0000d6a0: 
.address 0x40F334
0000d6ab: #1910 := low:32[RAX]
.address 0x40F334
0000d6ae: OF := 0
.address 0x40F334
0000d6b1: CF := 0
.address 0x40F334
0000d6b4: AF := unknown[bits]:u1
.address 0x40F334
0000d6b7: PF := ~low:1[let $1 = #1910 >> 4 ^ #1910 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F334
0000d6ba: SF := high:1[#1910]
.address 0x40F334
0000d6bd: ZF := 0 = #1910
.address 0x40F336
0000d6c6: when ZF goto %0000c963
00044bb2: goto %0000d6cc

.address 0x40F338
0000d6cc: 
.address 0x40F338
0000d6d1: RDX := pad:64[pad:32[mem[R14]]]
.address 0x40F33C
0000d6de: #1912 := low:8[RAX] & 2
.address 0x40F33C
0000d6e1: OF := 0
.address 0x40F33C
0000d6e4: CF := 0
.address 0x40F33C
0000d6e7: AF := unknown[bits]:u1
.address 0x40F33C
0000d6ea: PF := ~low:1[let $1 = #1912 >> 4 ^ #1912 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F33C
0000d6ed: SF := high:1[#1912]
.address 0x40F33C
0000d6f0: ZF := 0 = #1912
.address 0x40F33E
0000d6f7: mem := mem with [R8] <- low:8[RDX]
.address 0x40F341
0000d700: when ~ZF goto %0000c953
00044bb3: goto %0000c963

.address 0x40EFBE
0000e082: 
.address 0x40EFBE
0000e08d: #1993 := low:32[RBX] - 8
.address 0x40EFBE
0000e090: CF := low:32[RBX] < 8
.address 0x40EFBE
0000e093: OF := high:1[(low:32[RBX] ^ 8) & (low:32[RBX] ^ #1993)]
.address 0x40EFBE
0000e096: AF := 0x10 = (0x10 & (#1993 ^ low:32[RBX] ^ 8))
.address 0x40EFBE
0000e099: PF := ~low:1[let $1 = #1993 >> 4 ^ #1993 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EFBE
0000e09c: SF := high:1[#1993]
.address 0x40EFBE
0000e09f: ZF := 0 = #1993
.address 0x40EFC1
0000e0a8: when ZF goto %0000d03b
00044bb4: goto %0000de67

.address 0x40F568
0000d03b: 
.address 0x40F568
0000d040: R8 := mem[RSP + 8, el]:u64
.address 0x40F56D
0000d047: goto %0000c9a9

.address 0x40EDF5
0000c42f: 
.address 0x40EDF5
0000c43f: mem := mem with [RSP + 0x18, el]:u64 <- RCX
.address 0x40EDFA
0000c44c: #1737 := RCX
.address 0x40EDFA
0000c44f: OF := 0
.address 0x40EDFA
0000c452: CF := 0
.address 0x40EDFA
0000c455: AF := unknown[bits]:u1
.address 0x40EDFA
0000c458: PF := ~low:1[let $1 = #1737 >> 4 ^ #1737 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EDFA
0000c45b: SF := high:1[#1737]
.address 0x40EDFA
0000c45e: ZF := 0 = #1737
.address 0x40EE01
0000c469: when ~SF goto %0000c463
00044bb5: goto %0001e844

.address 0x40EE03
0001e844: 
00044bb6: goto %0000c463

.address 0x40EE09
0000c463: 
.address 0x40EE09
0000c473: RAX := mem[RSP + 0x10, el]:u64
.address 0x40EE0E
0000c47a: mem := mem with [RSP + 0x18, el]:u64 <- RAX
.address 0x40EE13
0000c487: #1739 := RAX
.address 0x40EE13
0000c48a: OF := 0
.address 0x40EE13
0000c48d: CF := 0
.address 0x40EE13
0000c490: AF := unknown[bits]:u1
.address 0x40EE13
0000c493: PF := ~low:1[let $1 = #1739 >> 4 ^ #1739 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EE13
0000c496: SF := high:1[#1739]
.address 0x40EE13
0000c499: ZF := 0 = #1739
.address 0x40EE1A
0000c4a4: when ~SF goto %0000c49e
00044bb7: goto %0001e843

.address 0x40EE1C
0001e843: 
00044bb8: goto %0000c49e

.address 0x40EE22
0000c49e: 
.address 0x40EE24
0000c4af: mem := mem with [RSP + 0x18, el]:u64 <- RBX
.address 0x40EE29
0000c4bc: #1741 := RBX
.address 0x40EE29
0000c4bf: OF := 0
.address 0x40EE29
0000c4c2: CF := 0
.address 0x40EE29
0000c4c5: AF := unknown[bits]:u1
.address 0x40EE29
0000c4c8: PF := ~low:1[let $1 = #1741 >> 4 ^ #1741 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EE29
0000c4cb: SF := high:1[#1741]
.address 0x40EE29
0000c4ce: ZF := 0 = #1741
.address 0x40EE30
0000c4d9: when ~SF goto %0000c4d3
00044bb9: goto %0001e842

.address 0x40EE32
0001e842: 
00044bba: goto %0000c4d3

.address 0x40EE38
0000c4d3: 
.address 0x40EE38
0000c4e9: #1743 := low:8[R12] & 0x10
.address 0x40EE38
0000c4ec: OF := 0
.address 0x40EE38
0000c4ef: CF := 0
.address 0x40EE38
0000c4f2: AF := unknown[bits]:u1
.address 0x40EE38
0000c4f5: PF := ~low:1[let $1 = #1743 >> 4 ^ #1743 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EE38
0000c4f8: SF := high:1[#1743]
.address 0x40EE38
0000c4fb: ZF := 0 = #1743
.address 0x40EE3E
0000c506: when ZF goto %0000c500
00044bbb: goto %0001e6ed

.address 0x40F008
0000c500: 
.address 0x40F008
0000c516: #1745 := low:32[R15] - 1
.address 0x40F008
0000c519: CF := low:32[R15] < 1
.address 0x40F008
0000c51c: OF := high:1[(low:32[R15] ^ 1) & (low:32[R15] ^ #1745)]
.address 0x40F008
0000c51f: AF := 0x10 = (0x10 & (#1745 ^ low:32[R15] ^ 1))
.address 0x40F008
0000c522: PF := ~low:1[let $1 = #1745 >> 4 ^ #1745 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F008
0000c525: SF := high:1[#1745]
.address 0x40F008
0000c528: ZF := 0 = #1745
.address 0x40F00C
0000c532: when ZF goto %0000c52c
00044bbc: goto %0001e6de

.address 0x40F00E
0001e6de: 
.address 0x40F016
0001e6e7: when ~(CF | ZF) goto %0000db33
00044bbd: goto %0000c52c

.address 0x40F2A0
0000db33: 
.address 0x40F2A0
0000db3f: #1945 := RSP
.address 0x40F2A0
0000db42: RSP := RSP - 0x10
.address 0x40F2A0
0000db45: CF := #1945 < 0x10
.address 0x40F2A0
0000db48: OF := high:1[(#1945 ^ 0x10) & (#1945 ^ RSP)]
.address 0x40F2A0
0000db4b: AF := 0x10 = (0x10 & (RSP ^ #1945 ^ 0x10))
.address 0x40F2A0
0000db4e: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F2A0
0000db51: SF := high:1[RSP]
.address 0x40F2A0
0000db54: ZF := 0 = RSP
.address 0x40F2A4
0000db5b: RDI := pad:64[low:32[R15]]
.address 0x40F2AA
0000db65: RSP := RSP - 8
.address 0x40F2AA
0000db68: mem := mem with [RSP, el]:u64 <- 0x40F2AF
.address 0x40F2AA
0000db6b: call @sub_40ec40 with return %0000db6d

.address 0x40F2AF
0000db6d: 
.address 0x40F2AF
0000db73: R8 := mem[RSP, el]:u64
.address 0x40F2AF
0000db76: RSP := RSP + 8
.address 0x40F2B1
0000db7e: R9 := mem[RSP, el]:u64
.address 0x40F2B1
0000db81: RSP := RSP + 8
.address 0x40F2B3
0000db88: goto %0000c52c

.address 0x40F01C
0000c52c: 
.address 0x40F01C
0000c543: #1747 := RSP
.address 0x40F01C
0000c546: RSP := RSP - 0x10
.address 0x40F01C
0000c549: CF := #1747 < 0x10
.address 0x40F01C
0000c54c: OF := high:1[(#1747 ^ 0x10) & (#1747 ^ RSP)]
.address 0x40F01C
0000c54f: AF := 0x10 = (0x10 & (RSP ^ #1747 ^ 0x10))
.address 0x40F01C
0000c552: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F01C
0000c555: SF := high:1[RSP]
.address 0x40F01C
0000c558: ZF := 0 = RSP
.address 0x40F020
0000c55f: RCX := 0x41A400
.address 0x40F027
0000c566: RSI := 1
.address 0x40F02C
0000c56d: RBX := mem[RSP + 0x10, el]:u64
.address 0x40F031
0000c574: RDX := 0xFFFFFFFFFFFFFFFF
.address 0x40F038
0000c581: RAX := 0
.address 0x40F038
0000c584: AF := unknown[bits]:u1
.address 0x40F038
0000c587: ZF := 1
.address 0x40F038
0000c58a: PF := 1
.address 0x40F038
0000c58d: OF := 0
.address 0x40F038
0000c590: CF := 0
.address 0x40F038
0000c593: SF := 0
.address 0x40F03D
0000c5a1: RBP := 0
.address 0x40F03D
0000c5a4: AF := unknown[bits]:u1
.address 0x40F03D
0000c5a7: ZF := 1
.address 0x40F03D
0000c5aa: PF := 1
.address 0x40F03D
0000c5ad: OF := 0
.address 0x40F03D
0000c5b0: CF := 0
.address 0x40F03D
0000c5b3: SF := 0
.address 0x40F03F
0000c5ba: RDI := RBX
.address 0x40F042
0000c5c3: RSP := RSP - 8
.address 0x40F042
0000c5c6: mem := mem with [RSP, el]:u64 <- 0x40F047
.address 0x40F042
0000c5c9: call @sub_403e60 with return %0000c5cb

.address 0x40F047
0000c5cb: 
.address 0x40F047
0000c5d0: RDI := RBX
.address 0x40F04A
0000c5d7: RBX := 0xFFFFFFFF
.address 0x40F04F
0000c5e0: RSP := RSP - 8
.address 0x40F04F
0000c5e3: mem := mem with [RSP, el]:u64 <- 0x40F054
.address 0x40F04F
0000c5e6: call @sub_403950 with return %0000c5e8

.address 0x40F054
0000c5e8: 
.address 0x40F054
0000c5ee: RSI := mem[RSP, el]:u64
.address 0x40F054
0000c5f1: RSP := RSP + 8
.address 0x40F055
0000c5f9: RDI := mem[RSP, el]:u64
.address 0x40F055
0000c5fc: RSP := RSP + 8
.address 0x40F056
0000c603: R14 := RAX
.address 0x40F059
0000c60b: goto %0000c607

.address 0x40EE44
0001e6ed: 
.address 0x40EE48
0001e6f9: RBX := 0
.address 0x40EE48
0001e6fc: AF := unknown[bits]:u1
.address 0x40EE48
0001e6ff: ZF := 1
.address 0x40EE48
0001e702: PF := 1
.address 0x40EE48
0001e705: OF := 0
.address 0x40EE48
0001e708: CF := 0
.address 0x40EE48
0001e70b: SF := 0
.address 0x40EE4C
0001e714: goto %0001e710

.address 0x40EE54
0001e710: 
.address 0x40EE56
0001e722: #4237 := low:32[RBX]
.address 0x40EE56
0001e725: RBX := pad:64[low:32[RBX] + 1]
.address 0x40EE56
0001e728: CF := low:32[RBX] < #4237
.address 0x40EE56
0001e72b: OF := ~high:1[#4237] & (high:1[#4237] | high:1[low:32[RBX]]) & ~(
high:1[#4237] & high:1[low:32[RBX]])
.address 0x40EE56
0001e72e: AF := 0x10 = (0x10 & (low:32[RBX] ^ #4237 ^ 1))
.address 0x40EE56
0001e731: PF := ~low:1[let $1 = low:32[RBX] >> 4 ^ low:32[RBX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EE56
0001e734: SF := high:1[low:32[RBX]]
.address 0x40EE56
0001e737: ZF := 0 = low:32[RBX]
.address 0x40EE5F
0001e744: when CF goto %0001e73e
00044bbe: goto %0001e805

.address 0x40EE70
0001e73e: 
00044bbf: goto %0001e74b

.address 0x40EE61
0001e805: 
.address 0x40EE61
0001e810: #4247 := low:32[RBX] - 8
.address 0x40EE61
0001e813: CF := low:32[RBX] < 8
.address 0x40EE61
0001e816: OF := high:1[(low:32[RBX] ^ 8) & (low:32[RBX] ^ #4247)]
.address 0x40EE61
0001e819: AF := 0x10 = (0x10 & (#4247 ^ low:32[RBX] ^ 8))
.address 0x40EE61
0001e81c: PF := ~low:1[let $1 = #4247 >> 4 ^ #4247 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EE61
0001e81f: SF := high:1[#4247]
.address 0x40EE61
0001e822: ZF := 0 = #4247
.address 0x40EE64
0001e82c: when ~ZF goto %0001e826
00044bc0: goto %0001e833

.address 0x40EE66
0001e833: 
.address 0x40EE6A
0001e83a: goto %0001e74b

.address 0x40EE74
0001e74b: 
.address 0x40EE74
0001e750: RCX := pad:64[mem[RSP + 0x30, el]:u32]
.address 0x40EE78
0001e75e: #4240 := RBP
.address 0x40EE78
0001e761: RBP := RBP + 1
.address 0x40EE78
0001e764: CF := RBP < #4240
.address 0x40EE78
0001e767: OF := ~high:1[#4240] & (high:1[#4240] | high:1[RBP]) & ~(high:1[#4240] & high:1[RBP])
.address 0x40EE78
0001e76a: AF := 0x10 = (0x10 & (RBP ^ #4240 ^ 1))
.address 0x40EE78
0001e76d: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40EE78
0001e770: SF := high:1[RBP]
.address 0x40EE78
0001e773: ZF := 0 = RBP
.address 0x40EE7C
0001e780: RAX := 0
.address 0x40EE7C
0001e783: AF := unknown[bits]:u1
.address 0x40EE7C
0001e786: ZF := 1
.address 0x40EE7C
0001e789: PF := 1
.address 0x40EE7C
0001e78c: OF := 0
.address 0x40EE7C
0001e78f: CF := 0
.address 0x40EE7C
0001e792: SF := 0
.address 0x40EE80
0001e7a0: #4243 := low:32[RCX]
.address 0x40EE80
0001e7a3: OF := 0
.address 0x40EE80
0001e7a6: CF := 0
.address 0x40EE80
0001e7a9: AF := unknown[bits]:u1
.address 0x40EE80
0001e7ac: PF := ~low:1[let $1 = #4243 >> 4 ^ #4243 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EE80
0001e7af: SF := high:1[#4243]
.address 0x40EE80
0001e7b2: ZF := 0 = #4243
.address 0x40EE82
0001e7b9: RAX := extract:63:8[RAX].pad:8[ZF]
.address 0x40EE85
0001e7c6: #4245 := low:32[R15] - 1
.address 0x40EE85
0001e7c9: CF := low:32[R15] < 1
.address 0x40EE85
0001e7cc: OF := high:1[(low:32[R15] ^ 1) & (low:32[R15] ^ #4245)]
.address 0x40EE85
0001e7cf: AF := 0x10 = (0x10 & (#4245 ^ low:32[R15] ^ 1))
.address 0x40EE85
0001e7d2: PF := ~low:1[let $1 = #4245 >> 4 ^ #4245 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EE85
0001e7d5: SF := high:1[#4245]
.address 0x40EE85
0001e7d8: ZF := 0 = #4245
.address 0x40EE89
0001e7df: RAX := low:64[RBP + RAX + 1]
.address 0x40EE8E
0001e7e6: mem := mem with [RSP + 0x18, el]:u64 <- RAX
.address 0x40EE93
0001e7ef: when ZF goto %0000dc4a
00044bc1: goto %0001e7f5

.address 0x40F400
0000dc4a: 
.address 0x40F400
0000dc56: #1956 := RSP
.address 0x40F400
0000dc59: RSP := RSP - 0x10
.address 0x40F400
0000dc5c: CF := #1956 < 0x10
.address 0x40F400
0000dc5f: OF := high:1[(#1956 ^ 0x10) & (#1956 ^ RSP)]
.address 0x40F400
0000dc62: AF := 0x10 = (0x10 & (RSP ^ #1956 ^ 0x10))
.address 0x40F400
0000dc65: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F400
0000dc68: SF := high:1[RSP]
.address 0x40F400
0000dc6b: ZF := 0 = RSP
.address 0x40F404
0000dc72: RCX := 0x41A406
.address 0x40F40B
0000dc79: RDX := 0xFFFFFFFFFFFFFFFF
.address 0x40F417
0000dc82: R14 := mem[RSP + 0x10, el]:u64
.address 0x40F41C
0000dc89: RSI := 1
.address 0x40F421
0000dc96: RAX := 0
.address 0x40F421
0000dc99: AF := unknown[bits]:u1
.address 0x40F421
0000dc9c: ZF := 1
.address 0x40F421
0000dc9f: PF := 1
.address 0x40F421
0000dca2: OF := 0
.address 0x40F421
0000dca5: CF := 0
.address 0x40F421
0000dca8: SF := 0
.address 0x40F423
0000dcaf: RDI := R14
.address 0x40F42A
0000dcb9: RSP := RSP - 8
.address 0x40F42A
0000dcbc: mem := mem with [RSP, el]:u64 <- 0x40F42F
.address 0x40F42A
0000dcbf: call @sub_403e60 with return %0000dcc1

.address 0x40F42F
0000dcc1: 
.address 0x40F42F
0000dcc6: RDI := R14
.address 0x40F432
0000dccf: RSP := RSP - 8
.address 0x40F432
0000dcd2: mem := mem with [RSP, el]:u64 <- 0x40F437
.address 0x40F432
0000dcd5: call @sub_403950 with return %0000dcd7

.address 0x40F437
0000dcd7: 
.address 0x40F437
0000dcdc: R14 := RAX
.address 0x40F43A
0000dce4: RAX := mem[RSP, el]:u64
.address 0x40F43A
0000dce7: RSP := RSP + 8
.address 0x40F43B
0000dcef: RDX := mem[RSP, el]:u64
.address 0x40F43B
0000dcf2: RSP := RSP + 8
.address 0x40F43C
0000dcff: #1959 := R14 - mem[RSP + 0x18, el]:u64
.address 0x40F43C
0000dd02: CF := R14 < mem[RSP + 0x18, el]:u64
.address 0x40F43C
0000dd05: OF := high:1[(R14 ^ mem[RSP + 0x18, el]:u64) & (R14 ^ #1959)]
.address 0x40F43C
0000dd08: AF := 0x10 = (0x10 & (#1959 ^ R14 ^ mem[RSP + 0x18, el]:u64))
.address 0x40F43C
0000dd0b: PF := ~low:1[let $1 = #1959 >> 4 ^ #1959 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F43C
0000dd0e: SF := high:1[#1959]
.address 0x40F43C
0000dd11: ZF := 0 = #1959
.address 0x40F445
0000dd1b: when CF | ZF goto %0000da8a
00044bc2: goto %0000dd21

.address 0x40F44B
0000dd21: 
00044bc3: goto %0000d951

.address 0x40EE99
0001e7f5: 
.address 0x40EEA1
0001e7fe: when ~(CF | ZF) goto %0000d81b
00044bc4: goto %0001e804

.address 0x40F278
0000d81b: 
.address 0x40F278
0000d827: #1925 := RSP
.address 0x40F278
0000d82a: RSP := RSP - 0x10
.address 0x40F278
0000d82d: CF := #1925 < 0x10
.address 0x40F278
0000d830: OF := high:1[(#1925 ^ 0x10) & (#1925 ^ RSP)]
.address 0x40F278
0000d833: AF := 0x10 = (0x10 & (RSP ^ #1925 ^ 0x10))
.address 0x40F278
0000d836: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F278
0000d839: SF := high:1[RSP]
.address 0x40F278
0000d83c: ZF := 0 = RSP
.address 0x40F27C
0000d843: RDI := pad:64[low:32[R15]]
.address 0x40F288
0000d84f: RSP := RSP - 8
.address 0x40F288
0000d852: mem := mem with [RSP, el]:u64 <- 0x40F28D
.address 0x40F288
0000d855: call @sub_40ec40 with return %0000d857

.address 0x40F28D
0000d857: 
.address 0x40F28D
0000d85d: RAX := mem[RSP, el]:u64
.address 0x40F28D
0000d860: RSP := RSP + 8
.address 0x40F28E
0000d868: RDX := mem[RSP, el]:u64
.address 0x40F28E
0000d86b: RSP := RSP + 8
.address 0x40F293
0000d874: goto %0000d870

.address 0x40EEA7
0001e804: 
00044bc5: goto %0000d870

.address 0x40EEA9
0000d870: 
.address 0x40EEAD
0000d882: #1928 := RSP
.address 0x40EEAD
0000d885: RSP := RSP - 0x10
.address 0x40EEAD
0000d888: CF := #1928 < 0x10
.address 0x40EEAD
0000d88b: OF := high:1[(#1928 ^ 0x10) & (#1928 ^ RSP)]
.address 0x40EEAD
0000d88e: AF := 0x10 = (0x10 & (RSP ^ #1928 ^ 0x10))
.address 0x40EEAD
0000d891: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40EEAD
0000d894: SF := high:1[RSP]
.address 0x40EEAD
0000d897: ZF := 0 = RSP
.address 0x40EEB1
0000d89e: RCX := 0x41A406
.address 0x40EEB8
0000d8a5: RSI := 1
.address 0x40EEBD
0000d8ac: RDX := 0xFFFFFFFFFFFFFFFF
.address 0x40EEC4
0000d8b9: RAX := 0
.address 0x40EEC4
0000d8bc: AF := unknown[bits]:u1
.address 0x40EEC4
0000d8bf: ZF := 1
.address 0x40EEC4
0000d8c2: PF := 1
.address 0x40EEC4
0000d8c5: OF := 0
.address 0x40EEC4
0000d8c8: CF := 0
.address 0x40EEC4
0000d8cb: SF := 0
.address 0x40EEC6
0000d8d2: R14 := mem[RSP + 0x10, el]:u64
.address 0x40EECB
0000d8d9: RDI := R14
.address 0x40EED1
0000d8e3: RSP := RSP - 8
.address 0x40EED1
0000d8e6: mem := mem with [RSP, el]:u64 <- 0x40EED6
.address 0x40EED1
0000d8e9: call @sub_403e60 with return %0000d8eb

.address 0x40EED6
0000d8eb: 
.address 0x40EED6
0000d8f0: RDI := R14
.address 0x40EED9
0000d8f9: RSP := RSP - 8
.address 0x40EED9
0000d8fc: mem := mem with [RSP, el]:u64 <- 0x40EEDE
.address 0x40EED9
0000d8ff: call @sub_403950 with return %0000d901

.address 0x40EEDE
0000d901: 
.address 0x40EEDE
0000d907: RCX := mem[RSP, el]:u64
.address 0x40EEDE
0000d90a: RSP := RSP + 8
.address 0x40EEDF
0000d912: RSI := mem[RSP, el]:u64
.address 0x40EEDF
0000d915: RSP := RSP + 8
.address 0x40EEE0
0000d922: #1931 := RAX - mem[RSP + 0x18, el]:u64
.address 0x40EEE0
0000d925: CF := RAX < mem[RSP + 0x18, el]:u64
.address 0x40EEE0
0000d928: OF := high:1[(RAX ^ mem[RSP + 0x18, el]:u64) & (RAX ^ #1931)]
.address 0x40EEE0
0000d92b: AF := 0x10 = (0x10 & (#1931 ^ RAX ^ mem[RSP + 0x18, el]:u64))
.address 0x40EEE0
0000d92e: PF := ~low:1[let $1 = #1931 >> 4 ^ #1931 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EEE0
0000d931: SF := high:1[#1931]
.address 0x40EEE0
0000d934: ZF := 0 = #1931
.address 0x40EEE5
0000d93b: R14 := RAX
.address 0x40EEEC
0000d946: when ~(CF | ZF) goto %0000d940
00044bc6: goto %0000da8a

.address 0x40F498
0000d940: 
00044bc7: goto %0000d94d

.address 0x40EEF2
0000da8a: 
.address 0x40EEF2
0000da95: #1939 := low:8[R12] & 8
.address 0x40EEF2
0000da98: OF := 0
.address 0x40EEF2
0000da9b: CF := 0
.address 0x40EEF2
0000da9e: AF := unknown[bits]:u1
.address 0x40EEF2
0000daa1: PF := ~low:1[let $1 = #1939 >> 4 ^ #1939 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EEF2
0000daa4: SF := high:1[#1939]
.address 0x40EEF2
0000daa7: ZF := 0 = #1939
.address 0x40EEF6
0000dab1: when ZF goto %0000daab
00044bc8: goto %0000dac5

.address 0x40F060
0000daab: 
.address 0x40F062
0000dabc: goto %0000c607

.address 0x40EEFC
0000dac5: 
.address 0x40EEFC
0000daca: RAX := mem[RSP, el]:u64
.address 0x40EF00
0000dad7: #1941 := mem[RAX + R14 - 1] - 0x30
.address 0x40EF00
0000dada: CF := mem[RAX + R14 - 1] < 0x30
.address 0x40EF00
0000dadd: OF := high:1[(mem[RAX + R14 - 1] ^ 0x30) & (mem[RAX + R14 - 1] ^ #1941)]
.address 0x40EF00
0000dae0: AF := 0x10 = (0x10 & (#1941 ^ mem[RAX + R14 - 1] ^ 0x30))
.address 0x40EF00
0000dae3: PF := ~low:1[let $1 = #1941 >> 4 ^ #1941 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EF00
0000dae6: SF := high:1[#1941]
.address 0x40EF00
0000dae9: ZF := 0 = #1941
.address 0x40EF06
0000daf2: when ~ZF goto %0000dac1
00044bc9: goto %0000daf8

.address 0x40F068
0000dac1: 
00044bca: goto %0000c607

.address 0x40EF0C
0000daf8: 
.address 0x40EF12
0000db04: #1943 := low:32[R15] - 1
.address 0x40EF12
0000db07: CF := low:32[R15] < 1
.address 0x40EF12
0000db0a: OF := high:1[(low:32[R15] ^ 1) & (low:32[R15] ^ #1943)]
.address 0x40EF12
0000db0d: AF := 0x10 = (0x10 & (#1943 ^ low:32[R15] ^ 1))
.address 0x40EF12
0000db10: PF := ~low:1[let $1 = #1943 >> 4 ^ #1943 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40EF12
0000db13: SF := high:1[#1943]
.address 0x40EF12
0000db16: ZF := 0 = #1943
.address 0x40EF18
0000db20: when ~ZF goto %0000d94d
00044bcb: goto %0000db26

.address 0x40F4A0
0000d94d: 
.address 0x40F4A8
0000d957: when CF | ZF goto %0000d951
00044bcc: goto %0000da2e

.address 0x40F4AA
0000da2e: 
.address 0x40F4AE
0000da3b: #1936 := RSP
.address 0x40F4AE
0000da3e: RSP := RSP - 0x10
.address 0x40F4AE
0000da41: CF := #1936 < 0x10
.address 0x40F4AE
0000da44: OF := high:1[(#1936 ^ 0x10) & (#1936 ^ RSP)]
.address 0x40F4AE
0000da47: AF := 0x10 = (0x10 & (RSP ^ #1936 ^ 0x10))
.address 0x40F4AE
0000da4a: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F4AE
0000da4d: SF := high:1[RSP]
.address 0x40F4AE
0000da50: ZF := 0 = RSP
.address 0x40F4B2
0000da57: RDI := pad:64[low:32[R15]]
.address 0x40F4B8
0000da61: RSP := RSP - 8
.address 0x40F4B8
0000da64: mem := mem with [RSP, el]:u64 <- 0x40F4BD
.address 0x40F4B8
0000da67: call @sub_40ec40 with return %0000da69

.address 0x40F4BD
0000da69: 
.address 0x40F4BD
0000da6f: RBP := mem[RSP, el]:u64
.address 0x40F4BD
0000da72: RSP := RSP + 8
.address 0x40F4BE
0000da7a: R14 := mem[RSP, el]:u64
.address 0x40F4BE
0000da7d: RSP := RSP + 8
.address 0x40F4C4
0000da85: goto %0000d951

.address 0x40EF1E
0000db26: 
.address 0x40EF1E
0000db2b: goto %0000d951

.address 0x40F453
0000d951: 
.address 0x40F455
0000d969: #1933 := RSP
.address 0x40F455
0000d96c: RSP := RSP - 0x10
.address 0x40F455
0000d96f: CF := #1933 < 0x10
.address 0x40F455
0000d972: OF := high:1[(#1933 ^ 0x10) & (#1933 ^ RSP)]
.address 0x40F455
0000d975: AF := 0x10 = (0x10 & (RSP ^ #1933 ^ 0x10))
.address 0x40F455
0000d978: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F455
0000d97b: SF := high:1[RSP]
.address 0x40F455
0000d97e: ZF := 0 = RSP
.address 0x40F459
0000d985: RCX := 0x41A400
.address 0x40F460
0000d98c: R14 := mem[RSP + 0x10, el]:u64
.address 0x40F465
0000d993: RDX := 0xFFFFFFFFFFFFFFFF
.address 0x40F46C
0000d99a: RSI := 1
.address 0x40F471
0000d9a7: RAX := 0
.address 0x40F471
0000d9aa: AF := unknown[bits]:u1
.address 0x40F471
0000d9ad: ZF := 1
.address 0x40F471
0000d9b0: PF := 1
.address 0x40F471
0000d9b3: OF := 0
.address 0x40F471
0000d9b6: CF := 0
.address 0x40F471
0000d9b9: SF := 0
.address 0x40F473
0000d9c6: RBP := 0
.address 0x40F473
0000d9c9: AF := unknown[bits]:u1
.address 0x40F473
0000d9cc: ZF := 1
.address 0x40F473
0000d9cf: PF := 1
.address 0x40F473
0000d9d2: OF := 0
.address 0x40F473
0000d9d5: CF := 0
.address 0x40F473
0000d9d8: SF := 0
.address 0x40F475
0000d9df: RDI := R14
.address 0x40F47B
0000d9e9: RSP := RSP - 8
.address 0x40F47B
0000d9ec: mem := mem with [RSP, el]:u64 <- 0x40F480
.address 0x40F47B
0000d9ef: call @sub_403e60 with return %0000d9f1

.address 0x40F480
0000d9f1: 
.address 0x40F480
0000d9f6: RDI := R14
.address 0x40F483
0000d9ff: RSP := RSP - 8
.address 0x40F483
0000da02: mem := mem with [RSP, el]:u64 <- 0x40F488
.address 0x40F483
0000da05: call @sub_403950 with return %0000da07

.address 0x40F488
0000da07: 
.address 0x40F488
0000da0d: R10 := mem[RSP, el]:u64
.address 0x40F488
0000da10: RSP := RSP + 8
.address 0x40F48A
0000da17: R14 := RAX
.address 0x40F48D
0000da1f: R11 := mem[RSP, el]:u64
.address 0x40F48D
0000da22: RSP := RSP + 8
.address 0x40F48F
0000da29: goto %0000c607

.address 0x40F070
0000c607: 
.address 0x40F070
0000c611: R15 := mem[RSP + 8, el]:u64
.address 0x40F075
0000c618: RSI := mem[RSP, el]:u64
.address 0x40F079
0000c61f: RDX := R14
.address 0x40F07C
0000c62e: #1750 := R15
.address 0x40F07C
0000c631: #1751 := R14
.address 0x40F07C
0000c634: R15 := R15 - R14
.address 0x40F07C
0000c637: CF := #1750 < #1751
.address 0x40F07C
0000c63a: OF := high:1[(#1750 ^ #1751) & (#1750 ^ R15)]
.address 0x40F07C
0000c63d: AF := 0x10 = (0x10 & (R15 ^ #1750 ^ #1751))
.address 0x40F07C
0000c640: PF := ~low:1[let $1 = R15 >> 4 ^ R15 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F07C
0000c643: SF := high:1[R15]
.address 0x40F07C
0000c646: ZF := 0 = R15
.address 0x40F07F
0000c655: #1753 := R14
.address 0x40F07F
0000c658: #1754 := RBP
.address 0x40F07F
0000c65b: R14 := R14 - RBP
.address 0x40F07F
0000c65e: CF := #1753 < #1754
.address 0x40F07F
0000c661: OF := high:1[(#1753 ^ #1754) & (#1753 ^ R14)]
.address 0x40F07F
0000c664: AF := 0x10 = (0x10 & (R14 ^ #1753 ^ #1754))
.address 0x40F07F
0000c667: PF := ~low:1[let $1 = R14 >> 4 ^ R14 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F07F
0000c66a: SF := high:1[R14]
.address 0x40F07F
0000c66d: ZF := 0 = R14
.address 0x40F082
0000c674: RDI := R15
.address 0x40F085
0000c67d: RSP := RSP - 8
.address 0x40F085
0000c680: mem := mem with [RSP, el]:u64 <- 0x40F08A
.address 0x40F085
0000c683: call @sub_403d10 with return %0000c685

.address 0x40F08A
0000c685: 
.address 0x40F08A
0000c68a: R8 := R14
.address 0x40F08D
0000c699: #1756 := R8
.address 0x40F08D
0000c69c: #1757 := R15
.address 0x40F08D
0000c69f: R8 := R8 + #1757
.address 0x40F08D
0000c6a2: CF := R8 < #1756
.address 0x40F08D
0000c6a5: OF := high:1[#1756] = high:1[#1757] & (high:1[#1756] | high:1[R8]) & ~(
high:1[#1756] & high:1[R8])
.address 0x40F08D
0000c6a8: AF := 0x10 = (0x10 & (R8 ^ #1756 ^ #1757))
.address 0x40F08D
0000c6ab: PF := ~low:1[let $1 = R8 >> 4 ^ R8 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F08D
0000c6ae: SF := high:1[R8]
.address 0x40F08D
0000c6b1: ZF := 0 = R8
00044bcd: goto %0000c6b3

.address 0x40F090
0000c6b3: 
.address 0x40F090
0000c6be: #1759 := low:8[R12] & 4
.address 0x40F090
0000c6c1: OF := 0
.address 0x40F090
0000c6c4: CF := 0
.address 0x40F090
0000c6c7: AF := unknown[bits]:u1
.address 0x40F090
0000c6ca: PF := ~low:1[let $1 = #1759 >> 4 ^ #1759 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F090
0000c6cd: SF := high:1[#1759]
.address 0x40F090
0000c6d0: ZF := 0 = #1759
.address 0x40F094
0000c6da: when ~ZF goto %0000c6d4
00044bce: goto %0000c8cb

.address 0x40F178
0000c6d4: 
.address 0x40F178
0000c6e4: R14 := R8
.address 0x40F17B
0000c6eb: RDI := R13
.address 0x40F17E
0000c6f2: mem := mem with [RSP + 0x48, el]:u64 <- R8
.address 0x40F183
0000c701: #1761 := R14
.address 0x40F183
0000c704: #1762 := R15
.address 0x40F183
0000c707: R14 := R14 - R15
.address 0x40F183
0000c70a: CF := #1761 < #1762
.address 0x40F183
0000c70d: OF := high:1[(#1761 ^ #1762) & (#1761 ^ R14)]
.address 0x40F183
0000c710: AF := 0x10 = (0x10 & (R14 ^ #1761 ^ #1762))
.address 0x40F183
0000c713: PF := ~low:1[let $1 = R14 >> 4 ^ R14 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F183
0000c716: SF := high:1[R14]
.address 0x40F183
0000c719: ZF := 0 = R14
.address 0x40F186
0000c720: RBP := 0xFFFFFFFFFFFFFFFF
.address 0x40F18D
0000c729: RSP := RSP - 8
.address 0x40F18D
0000c72c: mem := mem with [RSP, el]:u64 <- 0x40F192
.address 0x40F18D
0000c72f: call @sub_403950 with return %0000c731

.address 0x40F192
0000c731: 
.address 0x40F192
0000c736: RDI := low:64[RSP + 0x50]
.address 0x40F197
0000c73d: RCX := 0x29
.address 0x40F19C
0000c744: RDX := R14
.address 0x40F19F
0000c74b: RSI := R15
.address 0x40F1A2
0000c752: mem := mem with [RSP + 0x40, el]:u64 <- RAX
.address 0x40F1A7
0000c759: mem := mem with [RSP + 0x18, el]:u64 <- RDI
.address 0x40F1AC
0000c762: RSP := RSP - 8
.address 0x40F1AC
0000c765: mem := mem with [RSP, el]:u64 <- 0x40F1B1
.address 0x40F1AC
0000c768: call @sub_403b60 with return %0000c76a

.address 0x40F1B1
0000c76a: 
.address 0x40F1B1
0000c76f: RCX := pad:64[low:32[R12]]
.address 0x40F1B4
0000c776: mem := mem with [RSP + 0x20, el]:u32 <- low:32[RBX]
.address 0x40F1B8
0000c77d: R12 := R14
.address 0x40F1BB
0000c784: RBX := R13
.address 0x40F1BE
0000c78b: R8 := mem[RSP + 0x48, el]:u64
.address 0x40F1C3
0000c792: R15 := mem[RSP + 0x38, el]:u64
.address 0x40F1C8
0000c799: R13 := mem[RSP + 0x40, el]:u64
.address 0x40F1CD
0000c7a0: R14 := pad:64[low:32[RCX]]
.address 0x40F1D0
0000c7a8: goto %0000c7a4

.address 0x40F212
0000c7a4: 
.address 0x40F212
0000c7ae: RAX := pad:64[pad:32[mem[R15]]]
.address 0x40F216
0000c7bb: #1764 := low:8[RAX]
.address 0x40F216
0000c7be: OF := 0
.address 0x40F216
0000c7c1: CF := 0
.address 0x40F216
0000c7c4: AF := unknown[bits]:u1
.address 0x40F216
0000c7c7: PF := ~low:1[let $1 = #1764 >> 4 ^ #1764 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F216
0000c7ca: SF := high:1[#1764]
.address 0x40F216
0000c7cd: ZF := 0 = #1764
.address 0x40F218
0000c7d7: when ZF goto %0000c7d1
00044bcf: goto %0001e688

.address 0x40F21A
0001e688: 
.address 0x40F21A
0001e693: #4232 := low:8[RAX] - 0x7F
.address 0x40F21A
0001e696: CF := low:8[RAX] < 0x7F
.address 0x40F21A
0001e699: OF := high:1[(low:8[RAX] ^ 0x7F) & (low:8[RAX] ^ #4232)]
.address 0x40F21A
0001e69c: AF := 0x10 = (0x10 & (#4232 ^ low:8[RAX] ^ 0x7F))
.address 0x40F21A
0001e69f: PF := ~low:1[let $1 = #4232 >> 4 ^ #4232 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F21A
0001e6a2: SF := high:1[#4232]
.address 0x40F21A
0001e6a5: ZF := 0 = #4232
.address 0x40F21C
0001e6ac: RBP := pad:64[pad:32[low:8[RAX]]]
.address 0x40F21F
0001e6b3: RBP := if ~CF then R12 else RBP
.address 0x40F223
0001e6c1: #4234 := R15
.address 0x40F223
0001e6c4: R15 := R15 + 1
.address 0x40F223
0001e6c7: CF := R15 < #4234
.address 0x40F223
0001e6ca: OF := ~high:1[#4234] & (high:1[#4234] | high:1[R15]) & ~(high:1[#4234] & high:1[R15])
.address 0x40F223
0001e6cd: AF := 0x10 = (0x10 & (R15 ^ #4234 ^ 1))
.address 0x40F223
0001e6d0: PF := ~low:1[let $1 = R15 >> 4 ^ R15 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F223
0001e6d3: SF := high:1[R15]
.address 0x40F223
0001e6d6: ZF := 0 = R15
00044bd0: goto %0000c7d1

.address 0x40F227
0000c7d1: 
.address 0x40F227
0000c7e7: #1766 := RBP - R12
.address 0x40F227
0000c7ea: CF := RBP < R12
.address 0x40F227
0000c7ed: OF := high:1[(RBP ^ R12) & (RBP ^ #1766)]
.address 0x40F227
0000c7f0: AF := 0x10 = (0x10 & (#1766 ^ RBP ^ R12))
.address 0x40F227
0000c7f3: PF := ~low:1[let $1 = #1766 >> 4 ^ #1766 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F227
0000c7f6: SF := high:1[#1766]
.address 0x40F227
0000c7f9: ZF := 0 = #1766
.address 0x40F22A
0000c803: when CF | ZF goto %0000c7fd
00044bd1: goto %0001e610

.address 0x40F22C
0001e610: 
.address 0x40F22C
0001e615: RAX := pad:64[low:32[R14]]
.address 0x40F22F
0001e61c: R15 := R8
.address 0x40F232
0001e623: R14 := R12
.address 0x40F235
0001e62a: RSI := mem[RSP + 0x18, el]:u64
.address 0x40F23A
0001e639: #4229 := R15
.address 0x40F23A
0001e63c: #4230 := R14
.address 0x40F23A
0001e63f: R15 := R15 - R14
.address 0x40F23A
0001e642: CF := #4229 < #4230
.address 0x40F23A
0001e645: OF := high:1[(#4229 ^ #4230) & (#4229 ^ R15)]
.address 0x40F23A
0001e648: AF := 0x10 = (0x10 & (R15 ^ #4229 ^ #4230))
.address 0x40F23A
0001e64b: PF := ~low:1[let $1 = R15 >> 4 ^ R15 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F23A
0001e64e: SF := high:1[R15]
.address 0x40F23A
0001e651: ZF := 0 = R15
.address 0x40F23D
0001e658: RDX := R14
.address 0x40F240
0001e65f: RDI := R15
.address 0x40F243
0001e666: RBX := pad:64[mem[RSP + 0x20, el]:u32]
.address 0x40F247
0001e66d: R12 := pad:64[low:32[RAX]]
.address 0x40F24A
0001e676: RSP := RSP - 8
.address 0x40F24A
0001e679: mem := mem with [RSP, el]:u64 <- 0x40F24F
.address 0x40F24A
0001e67c: call @sub_403b80 with return %0001e67e

.address 0x40F24F
0001e67e: 
.address 0x40F24F
0001e683: goto %0000c8cb

.address 0x40F1D8
0000c7fd: 
.address 0x40F1D8
0000c80d: RAX := mem[RSP + 0x18, el]:u64
.address 0x40F1DD
0000c81c: #1768 := R12
.address 0x40F1DD
0000c81f: #1769 := RBP
.address 0x40F1DD
0000c822: R12 := R12 - RBP
.address 0x40F1DD
0000c825: CF := #1768 < #1769
.address 0x40F1DD
0000c828: OF := high:1[(#1768 ^ #1769) & (#1768 ^ R12)]
.address 0x40F1DD
0000c82b: AF := 0x10 = (0x10 & (R12 ^ #1768 ^ #1769))
.address 0x40F1DD
0000c82e: PF := ~low:1[let $1 = R12 >> 4 ^ R12 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F1DD
0000c831: SF := high:1[R12]
.address 0x40F1DD
0000c834: ZF := 0 = R12
.address 0x40F1E0
0000c843: #1771 := R8
.address 0x40F1E0
0000c846: #1772 := RBP
.address 0x40F1E0
0000c849: R8 := R8 - RBP
.address 0x40F1E0
0000c84c: CF := #1771 < #1772
.address 0x40F1E0
0000c84f: OF := high:1[(#1771 ^ #1772) & (#1771 ^ R8)]
.address 0x40F1E0
0000c852: AF := 0x10 = (0x10 & (R8 ^ #1771 ^ #1772))
.address 0x40F1E0
0000c855: PF := ~low:1[let $1 = R8 >> 4 ^ R8 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F1E0
0000c858: SF := high:1[R8]
.address 0x40F1E0
0000c85b: ZF := 0 = R8
.address 0x40F1E3
0000c862: RDI := R8
.address 0x40F1E6
0000c869: RDX := RBP
.address 0x40F1E9
0000c870: RSI := low:64[RAX + R12]
.address 0x40F1ED
0000c879: RSP := RSP - 8
.address 0x40F1ED
0000c87c: mem := mem with [RSP, el]:u64 <- 0x40F1F2
.address 0x40F1ED
0000c87f: call @sub_403b80 with return %0000c881

.address 0x40F1F2
0000c881: 
.address 0x40F1F2
0000c88c: #1774 := R12
.address 0x40F1F2
0000c88f: OF := 0
.address 0x40F1F2
0000c892: CF := 0
.address 0x40F1F2
0000c895: AF := unknown[bits]:u1
.address 0x40F1F2
0000c898: PF := ~low:1[let $1 = #1774 >> 4 ^ #1774 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F1F2
0000c89b: SF := high:1[#1774]
.address 0x40F1F2
0000c89e: ZF := 0 = #1774
.address 0x40F1F5
0000c8a5: R8 := RAX
.address 0x40F1F8
0000c8af: when ZF goto %0000c8a9
00044bd2: goto %0001e5be

.address 0x40F708
0000c8a9: 
.address 0x40F708
0000c8b9: RBX := pad:64[mem[RSP + 0x20, el]:u32]
.address 0x40F70C
0000c8c0: R15 := RAX
.address 0x40F70F
0000c8c7: R12 := pad:64[low:32[R14]]
.address 0x40F712
0000c8cf: goto %0000c8cb

.address 0x40F1FE
0001e5be: 
.address 0x40F1FE
0001e5cb: #4226 := R8
.address 0x40F1FE
0001e5ce: #4227 := R13
.address 0x40F1FE
0001e5d1: R8 := R8 - R13
.address 0x40F1FE
0001e5d4: CF := #4226 < #4227
.address 0x40F1FE
0001e5d7: OF := high:1[(#4226 ^ #4227) & (#4226 ^ R8)]
.address 0x40F1FE
0001e5da: AF := 0x10 = (0x10 & (R8 ^ #4226 ^ #4227))
.address 0x40F1FE
0001e5dd: PF := ~low:1[let $1 = R8 >> 4 ^ R8 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F1FE
0001e5e0: SF := high:1[R8]
.address 0x40F1FE
0001e5e3: ZF := 0 = R8
.address 0x40F201
0001e5ea: RDX := R13
.address 0x40F204
0001e5f1: RSI := RBX
.address 0x40F207
0001e5f8: RDI := R8
.address 0x40F20A
0001e601: RSP := RSP - 8
.address 0x40F20A
0001e604: mem := mem with [RSP, el]:u64 <- 0x40F20F
.address 0x40F20A
0001e607: call @sub_403b80 with return %0001e609

.address 0x40F20F
0001e609: 
.address 0x40F20F
0001e60e: R8 := RAX
00044bd3: goto %0000c7a4

.address 0x40F09A
0000c8cb: 
.address 0x40F09A
0000c8db: #1776 := low:8[R12] & 0x80
.address 0x40F09A
0000c8de: OF := 0
.address 0x40F09A
0000c8e1: CF := 0
.address 0x40F09A
0000c8e4: AF := unknown[bits]:u1
.address 0x40F09A
0000c8e7: PF := ~low:1[let $1 = #1776 >> 4 ^ #1776 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F09A
0000c8ea: SF := high:1[#1776]
.address 0x40F09A
0000c8ed: ZF := 0 = #1776
.address 0x40F09E
0000c8f7: when ZF goto %0000c8f1
00044bd4: goto %0000e320

.address 0x40F0A0
0000e320: 
.address 0x40F0A0
0000e32b: #2019 := low:32[RBX] - 0xFFFFFFFF
.address 0x40F0A0
0000e32e: CF := low:32[RBX] < 0xFFFFFFFF
.address 0x40F0A0
0000e331: OF := high:1[(low:32[RBX] ^ 0xFFFFFFFF) & (low:32[RBX] ^ #2019)]
.address 0x40F0A0
0000e334: AF := 0x10 = (0x10 & (#2019 ^ low:32[RBX] ^ 0xFFFFFFFF))
.address 0x40F0A0
0000e337: PF := ~low:1[let $1 = #2019 >> 4 ^ #2019 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F0A0
0000e33a: SF := high:1[#2019]
.address 0x40F0A0
0000e33d: ZF := 0 = #2019
.address 0x40F0A3
0000e346: when ZF goto %0000cc1a
00044bd5: goto %0000cc6e

.address 0x40F3C0
0000cc1a: 
.address 0x40F3C0
0000cc1f: RCX := mem[RSP + 0x10, el]:u64
.address 0x40F3C5
0000cc2c: #1812 := RCX - 1
.address 0x40F3C5
0000cc2f: CF := RCX < 1
.address 0x40F3C5
0000cc32: OF := high:1[(RCX ^ 1) & (RCX ^ #1812)]
.address 0x40F3C5
0000cc35: AF := 0x10 = (0x10 & (#1812 ^ RCX ^ 1))
.address 0x40F3C5
0000cc38: PF := ~low:1[let $1 = #1812 >> 4 ^ #1812 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F3C5
0000cc3b: SF := high:1[#1812]
.address 0x40F3C5
0000cc3e: ZF := 0 = #1812
.address 0x40F3C9
0000cc48: when CF | ZF goto %0000cc42
00044bd6: goto %0000db8d

.address 0x40F572
0000cc42: 
.address 0x40F572
0000cc58: RBX := 0
.address 0x40F572
0000cc5b: AF := unknown[bits]:u1
.address 0x40F572
0000cc5e: ZF := 1
.address 0x40F572
0000cc61: PF := 1
.address 0x40F572
0000cc64: OF := 0
.address 0x40F572
0000cc67: CF := 0
.address 0x40F572
0000cc6a: SF := 0
.address 0x40F574
0000cc72: goto %0000cc6e

.address 0x40F3CF
0000db8d: 
.address 0x40F3CF
0000db92: RDX := pad:64[mem[RSP + 0x34, el]:u32]
.address 0x40F3D3
0000db99: RBX := 1
.address 0x40F3D8
0000dba0: RAX := 1
00044bd7: goto %0000dba2

.address 0x40F3DD
0000dba2: 
.address 0x40F3DD
0000dbae: #1948 := extend:128[RAX] * extend:128[RDX]
.address 0x40F3DD
0000dbb1: RAX := low:64[#1948]
.address 0x40F3DD
0000dbb4: OF := #1948 <> extend:128[RAX]
.address 0x40F3DD
0000dbb7: CF := #1948 <> extend:128[RAX]
.address 0x40F3DD
0000dbba: PF := unknown[bits]:u1
.address 0x40F3DD
0000dbbd: SF := unknown[bits]:u1
.address 0x40F3DD
0000dbc0: ZF := unknown[bits]:u1
.address 0x40F3DD
0000dbc3: AF := unknown[bits]:u1
.address 0x40F3E1
0000dbd0: #1949 := RCX - RAX
.address 0x40F3E1
0000dbd3: CF := RCX < RAX
.address 0x40F3E1
0000dbd6: OF := high:1[(RCX ^ RAX) & (RCX ^ #1949)]
.address 0x40F3E1
0000dbd9: AF := 0x10 = (0x10 & (#1949 ^ RCX ^ RAX))
.address 0x40F3E1
0000dbdc: PF := ~low:1[let $1 = #1949 >> 4 ^ #1949 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F3E1
0000dbdf: SF := high:1[#1949]
.address 0x40F3E1
0000dbe2: ZF := 0 = #1949
.address 0x40F3E4
0000dbeb: when CF | ZF goto %0000cc6e
00044bd8: goto %0000dbf1

.address 0x40F3EA
0000dbf1: 
.address 0x40F3EA
0000dbfd: #1951 := low:32[RBX]
.address 0x40F3EA
0000dc00: RBX := pad:64[low:32[RBX] + 1]
.address 0x40F3EA
0000dc03: CF := low:32[RBX] < #1951
.address 0x40F3EA
0000dc06: OF := ~high:1[#1951] & (high:1[#1951] | high:1[low:32[RBX]]) & ~(
high:1[#1951] & high:1[low:32[RBX]])
.address 0x40F3EA
0000dc09: AF := 0x10 = (0x10 & (low:32[RBX] ^ #1951 ^ 1))
.address 0x40F3EA
0000dc0c: PF := ~low:1[let $1 = low:32[RBX] >> 4 ^ low:32[RBX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F3EA
0000dc0f: SF := high:1[low:32[RBX]]
.address 0x40F3EA
0000dc12: ZF := 0 = low:32[RBX]
.address 0x40F3ED
0000dc1f: #1954 := low:32[RBX] - 8
.address 0x40F3ED
0000dc22: CF := low:32[RBX] < 8
.address 0x40F3ED
0000dc25: OF := high:1[(low:32[RBX] ^ 8) & (low:32[RBX] ^ #1954)]
.address 0x40F3ED
0000dc28: AF := 0x10 = (0x10 & (#1954 ^ low:32[RBX] ^ 8))
.address 0x40F3ED
0000dc2b: PF := ~low:1[let $1 = #1954 >> 4 ^ #1954 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F3ED
0000dc2e: SF := high:1[#1954]
.address 0x40F3ED
0000dc31: ZF := 0 = #1954
.address 0x40F3F0
0000dc3a: when ~ZF goto %0000dba2
00044bd9: goto %0000dc40

.address 0x40F3F2
0000dc40: 
.address 0x40F3F2
0000dc45: goto %0000cc6e

.address 0x40F0A9
0000cc6e: 
.address 0x40F0A9
0000cc78: RAX := pad:64[low:32[R12]]
.address 0x40F0AC
0000cc85: RAX := pad:64[low:32[RAX] & 0x100]
.address 0x40F0AC
0000cc88: OF := 0
.address 0x40F0AC
0000cc8b: CF := 0
.address 0x40F0AC
0000cc8e: AF := unknown[bits]:u1
.address 0x40F0AC
0000cc91: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F0AC
0000cc94: SF := high:1[low:32[RAX]]
.address 0x40F0AC
0000cc97: ZF := 0 = low:32[RAX]
.address 0x40F0B1
0000cc9e: RCX := pad:64[low:32[RAX]]
.address 0x40F0B3
0000ccab: RCX := pad:64[low:32[RCX] | low:32[RBX]]
.address 0x40F0B3
0000ccae: OF := 0
.address 0x40F0B3
0000ccb1: CF := 0
.address 0x40F0B3
0000ccb4: AF := unknown[bits]:u1
.address 0x40F0B3
0000ccb7: PF := ~low:1[let $1 = low:32[RCX] >> 4 ^ low:32[RCX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F0B3
0000ccba: SF := high:1[low:32[RCX]]
.address 0x40F0B3
0000ccbd: ZF := 0 = low:32[RCX]
.address 0x40F0B5
0000ccc6: when ZF goto %0000c8f1
00044bda: goto %0000cccc

.address 0x40F0B7
0000cccc: 
.address 0x40F0B7
0000ccd7: R12 := pad:64[low:32[R12] & 0x40]
.address 0x40F0B7
0000ccda: OF := 0
.address 0x40F0B7
0000ccdd: CF := 0
.address 0x40F0B7
0000cce0: AF := unknown[bits]:u1
.address 0x40F0B7
0000cce3: PF := ~low:1[let $1 = low:32[R12] >> 4 ^ low:32[R12] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F0B7
0000cce6: SF := high:1[low:32[R12]]
.address 0x40F0B7
0000cce9: ZF := 0 = low:32[R12]
.address 0x40F0BB
0000ccf3: when ~ZF goto %0000cced
00044bdb: goto %0000cd16

.address 0x40F258
0000cced: 
.address 0x40F258
0000ccfd: RCX := mem[RSP, el]:u64
.address 0x40F25C
0000cd04: RDI := low:64[RCX + 0x288]
.address 0x40F263
0000cd0b: mem := mem with [RCX + 0x287] <- 0x20
.address 0x40F26A
0000cd12: mem := mem with [RSP + 8, el]:u64 <- RDI
.address 0x40F26F
0000cd1a: goto %0000cd16

.address 0x40F0C1
0000cd16: 
.address 0x40F0C1
0000cd26: #1817 := low:32[RBX]
.address 0x40F0C1
0000cd29: OF := 0
.address 0x40F0C1
0000cd2c: CF := 0
.address 0x40F0C1
0000cd2f: AF := unknown[bits]:u1
.address 0x40F0C1
0000cd32: PF := ~low:1[let $1 = #1817 >> 4 ^ #1817 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F0C1
0000cd35: SF := high:1[#1817]
.address 0x40F0C1
0000cd38: ZF := 0 = #1817
.address 0x40F0C3
0000cd42: when ZF goto %0000cd3c
00044bdc: goto %0000cd96

.address 0x40F6F6
0000cd3c: 
.address 0x40F6F6
0000cd52: #1819 := low:32[RAX]
.address 0x40F6F6
0000cd55: OF := 0
.address 0x40F6F6
0000cd58: CF := 0
.address 0x40F6F6
0000cd5b: AF := unknown[bits]:u1
.address 0x40F6F6
0000cd5e: PF := ~low:1[let $1 = #1819 >> 4 ^ #1819 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F6F6
0000cd61: SF := high:1[#1819]
.address 0x40F6F6
0000cd64: ZF := 0 = #1819
.address 0x40F6F8
0000cd6b: RDX := mem[RSP + 8, el]:u64
.address 0x40F6FD
0000cd75: when ~ZF goto %0000cd6f
00044bdd: goto %0000cd8f

.address 0x40F703
0000cd8f: 
.address 0x40F703
0000cd94: goto %0000c8f1

.address 0x40F0C9
0000cd96: 
.address 0x40F0C9
0000cda1: #1821 := low:32[RBX] - 1
.address 0x40F0C9
0000cda4: CF := low:32[RBX] < 1
.address 0x40F0C9
0000cda7: OF := high:1[(low:32[RBX] ^ 1) & (low:32[RBX] ^ #1821)]
.address 0x40F0C9
0000cdaa: AF := 0x10 = (0x10 & (#1821 ^ low:32[RBX] ^ 1))
.address 0x40F0C9
0000cdad: PF := ~low:1[let $1 = #1821 >> 4 ^ #1821 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F0C9
0000cdb0: SF := high:1[#1821]
.address 0x40F0C9
0000cdb3: ZF := 0 = #1821
.address 0x40F0CC
0000cdbd: when ~ZF goto %0000cdb7
00044bde: goto %0000d7a4

.address 0x40F0CE
0000d7a4: 
.address 0x40F0CE
0000d7a9: R9 := pad:64[mem[RSP + 0x30, el]:u32]
.address 0x40F0D3
0000d7b6: #1921 := low:32[R9]
.address 0x40F0D3
0000d7b9: OF := 0
.address 0x40F0D3
0000d7bc: CF := 0
.address 0x40F0D3
0000d7bf: AF := unknown[bits]:u1
.address 0x40F0D3
0000d7c2: PF := ~low:1[let $1 = #1921 >> 4 ^ #1921 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F0D3
0000d7c5: SF := high:1[#1921]
.address 0x40F0D3
0000d7c8: ZF := 0 = #1921
.address 0x40F0D6
0000d7d2: when ZF goto %0000d7cc
00044bdf: goto %0000cdb7

.address 0x40F520
0000d7cc: 
.address 0x40F520
0000d7dc: RBX := mem[RSP + 8, el]:u64
.address 0x40F525
0000d7e9: #1923 := low:32[RAX]
.address 0x40F525
0000d7ec: OF := 0
.address 0x40F525
0000d7ef: CF := 0
.address 0x40F525
0000d7f2: AF := unknown[bits]:u1
.address 0x40F525
0000d7f5: PF := ~low:1[let $1 = #1923 >> 4 ^ #1923 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F525
0000d7f8: SF := high:1[#1923]
.address 0x40F525
0000d7fb: ZF := 0 = #1923
.address 0x40F527
0000d802: RDX := low:64[RBX + 1]
.address 0x40F52B
0000d809: mem := mem with [RBX] <- 0x6B
.address 0x40F52E
0000d812: when ~ZF goto %0000cd6f
00044be0: goto %0000ce0d

.address 0x40F0DC
0000cdb7: 
.address 0x40F0DC
0000cdc7: RCX := 0x41A440
.address 0x40F0E3
0000cdce: RBX := extend:64[low:32[RBX]]
.address 0x40F0E6
0000cdd5: RDI := mem[RSP + 8, el]:u64
.address 0x40F0EB
0000cde2: #1823 := low:32[RAX]
.address 0x40F0EB
0000cde5: OF := 0
.address 0x40F0EB
0000cde8: CF := 0
.address 0x40F0EB
0000cdeb: AF := unknown[bits]:u1
.address 0x40F0EB
0000cdee: PF := ~low:1[let $1 = #1823 >> 4 ^ #1823 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F0EB
0000cdf1: SF := high:1[#1823]
.address 0x40F0EB
0000cdf4: ZF := 0 = #1823
.address 0x40F0ED
0000cdfb: RCX := pad:64[pad:32[mem[RCX + RBX]]]
.address 0x40F0F1
0000ce02: RDX := low:64[RDI + 1]
.address 0x40F0F5
0000ce09: mem := mem with [RDI] <- low:8[RCX]
.address 0x40F0F7
0000ce13: when ZF goto %0000ce0d
00044be1: goto %0000d1f0

.address 0x40F534
0000ce0d: 
.address 0x40F534
0000ce1d: mem := mem with [RSP + 8, el]:u64 <- RDX
.address 0x40F539
0000ce24: goto %0000c8f1

.address 0x40F0FD
0000d1f0: 
.address 0x40F0FD
0000d1f5: R8 := pad:64[mem[RSP + 0x30, el]:u32]
.address 0x40F102
0000d202: #1861 := low:32[R8]
.address 0x40F102
0000d205: OF := 0
.address 0x40F102
0000d208: CF := 0
.address 0x40F102
0000d20b: AF := unknown[bits]:u1
.address 0x40F102
0000d20e: PF := ~low:1[let $1 = #1861 >> 4 ^ #1861 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F102
0000d211: SF := high:1[#1861]
.address 0x40F102
0000d214: ZF := 0 = #1861
.address 0x40F105
0000d21e: when ~ZF goto %0000d218
00044be2: goto %0000cd6f

.address 0x40F2C0
0000d218: 
.address 0x40F2C0
0000d228: RDX := low:64[RDI + 2]
.address 0x40F2C4
0000d22f: mem := mem with [RDI + 1] <- 0x69
.address 0x40F2C8
0000d236: goto %0000cd6f

.address 0x40F10B
0000cd6f: 
.address 0x40F10B
0000cd7f: RAX := low:64[RDX + 1]
.address 0x40F10F
0000cd86: mem := mem with [RDX] <- 0x42
.address 0x40F112
0000cd8d: mem := mem with [RSP + 8, el]:u64 <- RAX
00044be3: goto %0000c8f1

.address 0x40F117
0000c8f1: 
.address 0x40F117
0000c901: RAX := mem[RSP + 8, el]:u64
.address 0x40F11C
0000c908: RCX := mem[RSP + 0x88, el]:u64
.address 0x40F124
0000c915: RCX := RCX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x40F124
0000c918: OF := 0
.address 0x40F124
0000c91b: CF := 0
.address 0x40F124
0000c91e: AF := unknown[bits]:u1
.address 0x40F124
0000c921: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F124
0000c924: SF := high:1[RCX]
.address 0x40F124
0000c927: ZF := 0 = RCX
.address 0x40F12D
0000c92e: mem := mem with [RAX] <- 0
.address 0x40F130
0000c935: RAX := R15
.address 0x40F133
0000c93f: when ~ZF goto %0000c939
00044be4: goto %0000e18d

.address 0x40F6CB
0000c939: 
.address 0x40F6CB
0000c94b: RSP := RSP - 8
.address 0x40F6CB
0000c94e: mem := mem with [RSP, el]:u64 <- 0x40F6D0
.address 0x40F6CB
0000c951: call @sub_403970 with return %0000c953

.address 0x40F6D0
0000c953: 
.address 0x40F6D0
0000c958: RDX := pad:64[pad:32[mem[R14 + RAX - 2, el]:u16]]
.address 0x40F6D6
0000c95f: mem := mem with [R8 + RAX - 2, el]:u16 <- low:16[RDX]
.address 0x40F6DC
0000c967: goto %0000c963

.address 0x40F347
0000c963: 
.address 0x40F347
0000c973: RDI := 0
.address 0x40F347
0000c976: AF := unknown[bits]:u1
.address 0x40F347
0000c979: ZF := 1
.address 0x40F347
0000c97c: PF := 1
.address 0x40F347
0000c97f: OF := 0
.address 0x40F347
0000c982: CF := 0
.address 0x40F347
0000c985: SF := 0
.address 0x40F349
0000c992: R9 := 0
.address 0x40F349
0000c995: AF := unknown[bits]:u1
.address 0x40F349
0000c998: ZF := 1
.address 0x40F349
0000c99b: PF := 1
.address 0x40F349
0000c99e: OF := 0
.address 0x40F349
0000c9a1: CF := 0
.address 0x40F349
0000c9a4: SF := 0
00044be5: goto %0000c9a9

.address 0x40F350
0000c9a9: 
.address 0x40F350
0000c9b4: #1779 := low:32[R15] - 1
.address 0x40F350
0000c9b7: CF := low:32[R15] < 1
.address 0x40F350
0000c9ba: OF := high:1[(low:32[R15] ^ 1) & (low:32[R15] ^ #1779)]
.address 0x40F350
0000c9bd: AF := 0x10 = (0x10 & (#1779 ^ low:32[R15] ^ 1))
.address 0x40F350
0000c9c0: PF := ~low:1[let $1 = #1779 >> 4 ^ #1779 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F350
0000c9c3: SF := high:1[#1779]
.address 0x40F350
0000c9c6: ZF := 0 = #1779
.address 0x40F354
0000c9d0: when ZF goto %0000c9ca
00044be6: goto %0000e10e

.address 0x40F4D0
0000c9ca: 
.address 0x40F4D0
0000c9da: RAX := RSI
.address 0x40F4D3
0000c9e1: RDI := extend:64[low:32[RDI]]
.address 0x40F4D6
0000c9ee: RAX := pad:64[low:32[RAX] & 1]
.address 0x40F4D6
0000c9f1: OF := 0
.address 0x40F4D6
0000c9f4: CF := 0
.address 0x40F4D6
0000c9f7: AF := unknown[bits]:u1
.address 0x40F4D6
0000c9fa: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F4D6
0000c9fd: SF := high:1[low:32[RAX]]
.address 0x40F4D6
0000ca00: ZF := 0 = low:32[RAX]
.address 0x40F4D9
0000ca0f: #1782 := RAX
.address 0x40F4D9
0000ca12: #1783 := RDI
.address 0x40F4D9
0000ca15: RAX := RAX + #1783
.address 0x40F4D9
0000ca18: CF := RAX < #1782
.address 0x40F4D9
0000ca1b: OF := high:1[#1782] = high:1[#1783] & (high:1[#1782] | high:1[RAX]) & ~(
high:1[#1782] & high:1[RAX])
.address 0x40F4D9
0000ca1e: AF := 0x10 = (0x10 & (RAX ^ #1782 ^ #1783))
.address 0x40F4D9
0000ca21: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F4D9
0000ca24: SF := high:1[RAX]
.address 0x40F4D9
0000ca27: ZF := 0 = RAX
.address 0x40F4DC
0000ca2e: RAX := extract:63:8[RAX].pad:8[~ZF]
.address 0x40F4DF
0000ca35: RAX := pad:64[pad:32[low:8[RAX]]]
.address 0x40F4E2
0000ca44: #1785 := low:32[R9]
.address 0x40F4E2
0000ca47: #1786 := low:32[RAX]
.address 0x40F4E2
0000ca4a: R9 := pad:64[low:32[R9] + #1786]
.address 0x40F4E2
0000ca4d: CF := low:32[R9] < #1785
.address 0x40F4E2
0000ca50: OF := high:1[#1785] = high:1[#1786] & (high:1[#1785] | high:1[low:32[R9]]) & ~(
high:1[#1785] & high:1[low:32[R9]])
.address 0x40F4E2
0000ca53: AF := 0x10 = (0x10 & (low:32[R9] ^ #1785 ^ #1786))
.address 0x40F4E2
0000ca56: PF := ~low:1[let $1 = low:32[R9] >> 4 ^ low:32[R9] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F4E2
0000ca59: SF := high:1[low:32[R9]]
.address 0x40F4E2
0000ca5c: ZF := 0 = low:32[R9]
.address 0x40F4E5
0000ca69: #1788 := low:32[R9] - 5
.address 0x40F4E5
0000ca6c: CF := low:32[R9] < 5
.address 0x40F4E5
0000ca6f: OF := high:1[(low:32[R9] ^ 5) & (low:32[R9] ^ #1788)]
.address 0x40F4E5
0000ca72: AF := 0x10 = (0x10 & (#1788 ^ low:32[R9] ^ 5))
.address 0x40F4E5
0000ca75: PF := ~low:1[let $1 = #1788 >> 4 ^ #1788 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F4E5
0000ca78: SF := high:1[#1788]
.address 0x40F4E5
0000ca7b: ZF := 0 = #1788
.address 0x40F4E9
0000ca85: when ~(ZF | (SF | OF) & ~(SF & OF)) goto %0000ca7f
00044be7: goto %0000dd59

.address 0x40F4EF
0000dd59: 
.address 0x40F4EF
0000dd5e: goto %0000cace

.address 0x40F35A
0000e10e: 
.address 0x40F35A
0000e119: #2000 := low:32[R15]
.address 0x40F35A
0000e11c: OF := 0
.address 0x40F35A
0000e11f: CF := 0
.address 0x40F35A
0000e122: AF := unknown[bits]:u1
.address 0x40F35A
0000e125: PF := ~low:1[let $1 = #2000 >> 4 ^ #2000 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F35A
0000e128: SF := high:1[#2000]
.address 0x40F35A
0000e12b: ZF := 0 = #2000
.address 0x40F35D
0000e134: when ~ZF goto %0000cace
00044be8: goto %0000e13a

.address 0x40F35F
0000e13a: 
.address 0x40F35F
0000e147: #2002 := low:32[RDI]
.address 0x40F35F
0000e14a: #2003 := low:32[R9]
.address 0x40F35F
0000e14d: RDI := pad:64[low:32[RDI] + #2003]
.address 0x40F35F
0000e150: CF := low:32[RDI] < #2002
.address 0x40F35F
0000e153: OF := high:1[#2002] = high:1[#2003] & (high:1[#2002] | high:1[low:32[RDI]]) & ~(
high:1[#2002] & high:1[low:32[RDI]])
.address 0x40F35F
0000e156: AF := 0x10 = (0x10 & (low:32[RDI] ^ #2002 ^ #2003))
.address 0x40F35F
0000e159: PF := ~low:1[let $1 = low:32[RDI] >> 4 ^ low:32[RDI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F35F
0000e15c: SF := high:1[low:32[RDI]]
.address 0x40F35F
0000e15f: ZF := 0 = low:32[RDI]
.address 0x40F362
0000e16c: #2005 := low:32[RDI]
.address 0x40F362
0000e16f: OF := 0
.address 0x40F362
0000e172: CF := 0
.address 0x40F362
0000e175: AF := unknown[bits]:u1
.address 0x40F362
0000e178: PF := ~low:1[let $1 = #2005 >> 4 ^ #2005 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F362
0000e17b: SF := high:1[#2005]
.address 0x40F362
0000e17e: ZF := 0 = #2005
.address 0x40F364
0000e187: when ZF | (SF | OF) & ~(SF & OF) goto %0000cace
00044be9: goto %0000ca7f

.address 0x40F366
0000ca7f: 
.address 0x40F366
0000ca96: #1790 := RSI
.address 0x40F366
0000ca99: RSI := RSI + 1
.address 0x40F366
0000ca9c: CF := RSI < #1790
.address 0x40F366
0000ca9f: OF := ~high:1[#1790] & (high:1[#1790] | high:1[RSI]) & ~(high:1[#1790] & high:1[RSI])
.address 0x40F366
0000caa2: AF := 0x10 = (0x10 & (RSI ^ #1790 ^ 1))
.address 0x40F366
0000caa5: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F366
0000caa8: SF := high:1[RSI]
.address 0x40F366
0000caab: ZF := 0 = RSI
.address 0x40F36A
0000cab8: #1793 := low:32[RCX]
.address 0x40F36A
0000cabb: OF := 0
.address 0x40F36A
0000cabe: CF := 0
.address 0x40F36A
0000cac1: AF := unknown[bits]:u1
.address 0x40F36A
0000cac4: PF := ~low:1[let $1 = #1793 >> 4 ^ #1793 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F36A
0000cac7: SF := high:1[#1793]
.address 0x40F36A
0000caca: ZF := 0 = #1793
.address 0x40F36C
0000cad4: when ZF goto %0000cace
00044bea: goto %0000dd23

.address 0x40F36E
0000dd23: 
.address 0x40F36E
0000dd28: RAX := pad:64[mem[RSP + 0x34, el]:u32]
.address 0x40F372
0000dd35: #1961 := RAX - RSI
.address 0x40F372
0000dd38: CF := RAX < RSI
.address 0x40F372
0000dd3b: OF := high:1[(RAX ^ RSI) & (RAX ^ #1961)]
.address 0x40F372
0000dd3e: AF := 0x10 = (0x10 & (#1961 ^ RAX ^ RSI))
.address 0x40F372
0000dd41: PF := ~low:1[let $1 = #1961 >> 4 ^ #1961 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F372
0000dd44: SF := high:1[#1961]
.address 0x40F372
0000dd47: ZF := 0 = #1961
.address 0x40F375
0000dd50: when ZF goto %0000ce29
00044beb: goto %0000dd56

.address 0x40F540
0000ce29: 
.address 0x40F540
0000ce34: #1825 := low:32[RBX] - 8
.address 0x40F540
0000ce37: CF := low:32[RBX] < 8
.address 0x40F540
0000ce3a: OF := high:1[(low:32[RBX] ^ 8) & (low:32[RBX] ^ #1825)]
.address 0x40F540
0000ce3d: AF := 0x10 = (0x10 & (#1825 ^ low:32[RBX] ^ 8))
.address 0x40F540
0000ce40: PF := ~low:1[let $1 = #1825 >> 4 ^ #1825 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F540
0000ce43: SF := high:1[#1825]
.address 0x40F540
0000ce46: ZF := 0 = #1825
.address 0x40F543
0000ce4f: when ZF goto %0000cace
00044bec: goto %0000ce55

.address 0x40F549
0000ce55: 
.address 0x40F549
0000ce61: #1827 := low:32[RBX]
.address 0x40F549
0000ce64: RBX := pad:64[low:32[RBX] + 1]
.address 0x40F549
0000ce67: CF := low:32[RBX] < #1827
.address 0x40F549
0000ce6a: OF := ~high:1[#1827] & (high:1[#1827] | high:1[low:32[RBX]]) & ~(
high:1[#1827] & high:1[low:32[RBX]])
.address 0x40F549
0000ce6d: AF := 0x10 = (0x10 & (low:32[RBX] ^ #1827 ^ 1))
.address 0x40F549
0000ce70: PF := ~low:1[let $1 = low:32[RBX] >> 4 ^ low:32[RBX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F549
0000ce73: SF := high:1[low:32[RBX]]
.address 0x40F549
0000ce76: ZF := 0 = low:32[RBX]
.address 0x40F54C
0000ce83: #1830 := low:8[R12] & 8
.address 0x40F54C
0000ce86: OF := 0
.address 0x40F54C
0000ce89: CF := 0
.address 0x40F54C
0000ce8c: AF := unknown[bits]:u1
.address 0x40F54C
0000ce8f: PF := ~low:1[let $1 = #1830 >> 4 ^ #1830 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F54C
0000ce92: SF := high:1[#1830]
.address 0x40F54C
0000ce95: ZF := 0 = #1830
.address 0x40F550
0000ce9f: when ZF goto %0000ce99
00044bed: goto %0000d018

.address 0x40F612
0000ce99: 
.address 0x40F612
0000cea9: RAX := RBP
.address 0x40F615
0000ceb0: mem := mem with [R8 - 1] <- 0x30
.address 0x40F61A
0000ceb7: RAX := ~RAX
.address 0x40F61D
0000cec6: #1832 := R8
.address 0x40F61D
0000cec9: #1833 := RAX
.address 0x40F61D
0000cecc: R8 := R8 + #1833
.address 0x40F61D
0000cecf: CF := R8 < #1832
.address 0x40F61D
0000ced2: OF := high:1[#1832] = high:1[#1833] & (high:1[#1832] | high:1[R8]) & ~(
high:1[#1832] & high:1[R8])
.address 0x40F61D
0000ced5: AF := 0x10 = (0x10 & (R8 ^ #1832 ^ #1833))
.address 0x40F61D
0000ced8: PF := ~low:1[let $1 = R8 >> 4 ^ R8 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F61D
0000cedb: SF := high:1[R8]
.address 0x40F61D
0000cede: ZF := 0 = R8
.address 0x40F620
0000ceeb: #1835 := low:32[RBP] - 8
.address 0x40F620
0000ceee: CF := low:32[RBP] < 8
.address 0x40F620
0000cef1: OF := high:1[(low:32[RBP] ^ 8) & (low:32[RBP] ^ #1835)]
.address 0x40F620
0000cef4: AF := 0x10 = (0x10 & (#1835 ^ low:32[RBP] ^ 8))
.address 0x40F620
0000cef7: PF := ~low:1[let $1 = #1835 >> 4 ^ #1835 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F620
0000cefa: SF := high:1[#1835]
.address 0x40F620
0000cefd: ZF := 0 = #1835
.address 0x40F623
0000cf04: RAX := pad:64[low:32[RBP]]
.address 0x40F625
0000cf0e: when ~CF goto %0000cf08
00044bee: goto %0000d115

.address 0x40F66A
0000cf08: 
.address 0x40F66A
0000cf18: RAX := mem[R14, el]:u64
.address 0x40F66D
0000cf1f: RCX := low:64[R8 + 8]
.address 0x40F671
0000cf2c: RCX := RCX & 0xFFFFFFFFFFFFFFF8
.address 0x40F671
0000cf2f: OF := 0
.address 0x40F671
0000cf32: CF := 0
.address 0x40F671
0000cf35: AF := unknown[bits]:u1
.address 0x40F671
0000cf38: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F671
0000cf3b: SF := high:1[RCX]
.address 0x40F671
0000cf3e: ZF := 0 = RCX
.address 0x40F675
0000cf45: mem := mem with [R8, el]:u64 <- RAX
.address 0x40F678
0000cf4c: RAX := pad:64[low:32[RBP]]
.address 0x40F67A
0000cf53: RDX := mem[R14 + RAX - 8, el]:u64
.address 0x40F67F
0000cf5a: mem := mem with [R8 + RAX - 8, el]:u64 <- RDX
.address 0x40F684
0000cf61: RAX := R8
.address 0x40F687
0000cf70: #1838 := RAX
.address 0x40F687
0000cf73: #1839 := RCX
.address 0x40F687
0000cf76: RAX := RAX - RCX
.address 0x40F687
0000cf79: CF := #1838 < #1839
.address 0x40F687
0000cf7c: OF := high:1[(#1838 ^ #1839) & (#1838 ^ RAX)]
.address 0x40F687
0000cf7f: AF := 0x10 = (0x10 & (RAX ^ #1838 ^ #1839))
.address 0x40F687
0000cf82: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F687
0000cf85: SF := high:1[RAX]
.address 0x40F687
0000cf88: ZF := 0 = RAX
.address 0x40F68A
0000cf97: #1841 := R14
.address 0x40F68A
0000cf9a: #1842 := RAX
.address 0x40F68A
0000cf9d: R14 := R14 - RAX
.address 0x40F68A
0000cfa0: CF := #1841 < #1842
.address 0x40F68A
0000cfa3: OF := high:1[(#1841 ^ #1842) & (#1841 ^ R14)]
.address 0x40F68A
0000cfa6: AF := 0x10 = (0x10 & (R14 ^ #1841 ^ #1842))
.address 0x40F68A
0000cfa9: PF := ~low:1[let $1 = R14 >> 4 ^ R14 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F68A
0000cfac: SF := high:1[R14]
.address 0x40F68A
0000cfaf: ZF := 0 = R14
.address 0x40F68D
0000cfbe: #1844 := low:32[RAX]
.address 0x40F68D
0000cfc1: #1845 := low:32[RBP]
.address 0x40F68D
0000cfc4: RAX := pad:64[low:32[RAX] + #1845]
.address 0x40F68D
0000cfc7: CF := low:32[RAX] < #1844
.address 0x40F68D
0000cfca: OF := high:1[#1844] = high:1[#1845] & (high:1[#1844] | high:1[low:32[RAX]]) & ~(
high:1[#1844] & high:1[low:32[RAX]])
.address 0x40F68D
0000cfcd: AF := 0x10 = (0x10 & (low:32[RAX] ^ #1844 ^ #1845))
.address 0x40F68D
0000cfd0: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F68D
0000cfd3: SF := high:1[low:32[RAX]]
.address 0x40F68D
0000cfd6: ZF := 0 = low:32[RAX]
.address 0x40F68F
0000cfe3: RAX := pad:64[low:32[RAX] & 0xFFFFFFF8]
.address 0x40F68F
0000cfe6: OF := 0
.address 0x40F68F
0000cfe9: CF := 0
.address 0x40F68F
0000cfec: AF := unknown[bits]:u1
.address 0x40F68F
0000cfef: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F68F
0000cff2: SF := high:1[low:32[RAX]]
.address 0x40F68F
0000cff5: ZF := 0 = low:32[RAX]
.address 0x40F692
0000d002: #1848 := low:32[RAX] - 8
.address 0x40F692
0000d005: CF := low:32[RAX] < 8
.address 0x40F692
0000d008: OF := high:1[(low:32[RAX] ^ 8) & (low:32[RAX] ^ #1848)]
.address 0x40F692
0000d00b: AF := 0x10 = (0x10 & (#1848 ^ low:32[RAX] ^ 8))
.address 0x40F692
0000d00e: PF := ~low:1[let $1 = #1848 >> 4 ^ #1848 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F692
0000d011: SF := high:1[#1848]
.address 0x40F692
0000d014: ZF := 0 = #1848
.address 0x40F695
0000d01e: when CF goto %0000d018
00044bef: goto %0000d049

.address 0x40F69B
0000d049: 
.address 0x40F69B
0000d054: RAX := pad:64[low:32[RAX] & 0xFFFFFFF8]
.address 0x40F69B
0000d057: OF := 0
.address 0x40F69B
0000d05a: CF := 0
.address 0x40F69B
0000d05d: AF := unknown[bits]:u1
.address 0x40F69B
0000d060: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F69B
0000d063: SF := high:1[low:32[RAX]]
.address 0x40F69B
0000d066: ZF := 0 = low:32[RAX]
.address 0x40F69E
0000d073: RDX := 0
.address 0x40F69E
0000d076: AF := unknown[bits]:u1
.address 0x40F69E
0000d079: ZF := 1
.address 0x40F69E
0000d07c: PF := 1
.address 0x40F69E
0000d07f: OF := 0
.address 0x40F69E
0000d082: CF := 0
.address 0x40F69E
0000d085: SF := 0
00044bf0: goto %0000d087

.address 0x40F6A0
0000d087: 
.address 0x40F6A0
0000d08c: RSI := pad:64[low:32[RDX]]
.address 0x40F6A2
0000d09a: #1851 := low:32[RDX]
.address 0x40F6A2
0000d09d: RDX := pad:64[low:32[RDX] + 8]
.address 0x40F6A2
0000d0a0: CF := low:32[RDX] < #1851
.address 0x40F6A2
0000d0a3: OF := ~high:1[#1851] & (high:1[#1851] | high:1[low:32[RDX]]) & ~(
high:1[#1851] & high:1[low:32[RDX]])
.address 0x40F6A2
0000d0a6: AF := 0x10 = (0x10 & (low:32[RDX] ^ #1851 ^ 8))
.address 0x40F6A2
0000d0a9: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F6A2
0000d0ac: SF := high:1[low:32[RDX]]
.address 0x40F6A2
0000d0af: ZF := 0 = low:32[RDX]
.address 0x40F6A5
0000d0b6: RDI := mem[R14 + RSI, el]:u64
.address 0x40F6A9
0000d0c3: #1854 := low:32[RDX] - low:32[RAX]
.address 0x40F6A9
0000d0c6: CF := low:32[RDX] < low:32[RAX]
.address 0x40F6A9
0000d0c9: OF := high:1[(low:32[RDX] ^ low:32[RAX]) & (low:32[RDX] ^ #1854)]
.address 0x40F6A9
0000d0cc: AF := 0x10 = (0x10 & (#1854 ^ low:32[RDX] ^ low:32[RAX]))
.address 0x40F6A9
0000d0cf: PF := ~low:1[let $1 = #1854 >> 4 ^ #1854 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F6A9
0000d0d2: SF := high:1[#1854]
.address 0x40F6A9
0000d0d5: ZF := 0 = #1854
.address 0x40F6AB
0000d0dc: mem := mem with [RCX + RSI, el]:u64 <- RDI
.address 0x40F6AF
0000d0e5: when CF goto %0000d087
00044bf1: goto %0000d0eb

.address 0x40F6B1
0000d0eb: 
.address 0x40F6B1
0000d0f0: goto %0000d018

.address 0x40F627
0000d115: 
.address 0x40F627
0000d120: RBP := pad:64[low:32[RBP] & 4]
.address 0x40F627
0000d123: OF := 0
.address 0x40F627
0000d126: CF := 0
.address 0x40F627
0000d129: AF := unknown[bits]:u1
.address 0x40F627
0000d12c: PF := ~low:1[let $1 = low:32[RBP] >> 4 ^ low:32[RBP] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F627
0000d12f: SF := high:1[low:32[RBP]]
.address 0x40F627
0000d132: ZF := 0 = low:32[RBP]
.address 0x40F62A
0000d13c: when ~ZF goto %0000d136
00044bf2: goto %0000d164

.address 0x40F6E1
0000d136: 
.address 0x40F6E1
0000d146: RDX := pad:64[mem[R14, el]:u32]
.address 0x40F6E4
0000d14d: mem := mem with [R8, el]:u32 <- low:32[RDX]
.address 0x40F6E7
0000d154: RDX := pad:64[mem[R14 + RAX - 4, el]:u32]
.address 0x40F6EC
0000d15b: mem := mem with [R8 + RAX - 4, el]:u32 <- low:32[RDX]
.address 0x40F6F1
0000d162: goto %0000d018

.address 0x40F630
0000d164: 
.address 0x40F630
0000d16f: #1857 := low:32[RAX]
.address 0x40F630
0000d172: OF := 0
.address 0x40F630
0000d175: CF := 0
.address 0x40F630
0000d178: AF := unknown[bits]:u1
.address 0x40F630
0000d17b: PF := ~low:1[let $1 = #1857 >> 4 ^ #1857 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F630
0000d17e: SF := high:1[#1857]
.address 0x40F630
0000d181: ZF := 0 = #1857
.address 0x40F632
0000d18a: when ZF goto %0000d018
00044bf3: goto %0000d190

.address 0x40F638
0000d190: 
.address 0x40F638
0000d195: RDX := pad:64[pad:32[mem[R14]]]
.address 0x40F63C
0000d1a2: #1859 := low:8[RAX] & 2
.address 0x40F63C
0000d1a5: OF := 0
.address 0x40F63C
0000d1a8: CF := 0
.address 0x40F63C
0000d1ab: AF := unknown[bits]:u1
.address 0x40F63C
0000d1ae: PF := ~low:1[let $1 = #1859 >> 4 ^ #1859 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F63C
0000d1b1: SF := high:1[#1859]
.address 0x40F63C
0000d1b4: ZF := 0 = #1859
.address 0x40F63E
0000d1bb: mem := mem with [R8] <- low:8[RDX]
.address 0x40F641
0000d1c4: when ZF goto %0000d018
00044bf4: goto %0000d1ca

.address 0x40F647
0000d1ca: 
.address 0x40F647
0000d1cf: RDX := pad:64[pad:32[mem[R14 + RAX - 2, el]:u16]]
.address 0x40F64D
0000d1d6: mem := mem with [R8 + RAX - 2, el]:u16 <- low:16[RDX]
.address 0x40F653
0000d1dd: goto %0000d018

.address 0x40F556
0000d018: 
.address 0x40F556
0000d028: R15 := low:64[R8 - 1]
.address 0x40F55A
0000d02f: mem := mem with [R8 - 1] <- 0x31
.address 0x40F55F
0000d036: goto %0000c6b3

.address 0x40F37B
0000dd56: 
00044bf5: goto %0000cace

.address 0x40F380
0000cace: 
.address 0x40F380
0000cade: R15 := R8
.address 0x40F383
0000cae5: RCX := 0xCCCCCCCCCCCCCCCD
00044bf6: goto %0000caea

.address 0x40F390
0000caea: 
.address 0x40F390
0000caef: RAX := RSI
.address 0x40F393
0000cafd: #1795 := R15
.address 0x40F393
0000cb00: R15 := R15 - 1
.address 0x40F393
0000cb03: CF := #1795 < 1
.address 0x40F393
0000cb06: OF := high:1[(#1795 ^ 1) & (#1795 ^ R15)]
.address 0x40F393
0000cb09: AF := 0x10 = (0x10 & (R15 ^ #1795 ^ 1))
.address 0x40F393
0000cb0c: PF := ~low:1[let $1 = R15 >> 4 ^ R15 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F393
0000cb0f: SF := high:1[R15]
.address 0x40F393
0000cb12: ZF := 0 = R15
.address 0x40F397
0000cb21: #1798 := pad:128[RAX] * pad:128[RCX]
.address 0x40F397
0000cb24: RAX := extract:63:0[#1798]
.address 0x40F397
0000cb27: RDX := extract:127:64[#1798]
.address 0x40F397
0000cb2a: OF := extract:127:64[#1798] <> 0
.address 0x40F397
0000cb2d: CF := extract:127:64[#1798] <> 0
.address 0x40F397
0000cb30: SF := unknown[bits]:u1
.address 0x40F397
0000cb33: ZF := unknown[bits]:u1
.address 0x40F397
0000cb36: AF := unknown[bits]:u1
.address 0x40F397
0000cb39: PF := unknown[bits]:u1
.address 0x40F39A
0000cb47: #1799 := RDX
.address 0x40F39A
0000cb4a: RDX := RDX >> 3
.address 0x40F39A
0000cb4d: CF := high:1[#1799 << 0x3D]
.address 0x40F39A
0000cb50: SF := high:1[RDX]
.address 0x40F39A
0000cb53: ZF := 0 = RDX
.address 0x40F39A
0000cb56: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F39A
0000cb59: AF := unknown[bits]:u1
.address 0x40F39A
0000cb5c: OF := unknown[bits]:u1
.address 0x40F39E
0000cb63: RAX := low:64[RDX + (RDX << 2)]
.address 0x40F3A2
0000cb72: #1801 := RAX
.address 0x40F3A2
0000cb75: #1802 := RAX
.address 0x40F3A2
0000cb78: RAX := RAX + #1802
.address 0x40F3A2
0000cb7b: CF := RAX < #1801
.address 0x40F3A2
0000cb7e: OF := high:1[#1801] = high:1[#1802] & (high:1[#1801] | high:1[RAX]) & ~(
high:1[#1801] & high:1[RAX])
.address 0x40F3A2
0000cb81: AF := 0x10 = (0x10 & (RAX ^ #1801 ^ #1802))
.address 0x40F3A2
0000cb84: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F3A2
0000cb87: SF := high:1[RAX]
.address 0x40F3A2
0000cb8a: ZF := 0 = RAX
.address 0x40F3A5
0000cb99: #1804 := RSI
.address 0x40F3A5
0000cb9c: #1805 := RAX
.address 0x40F3A5
0000cb9f: RSI := RSI - RAX
.address 0x40F3A5
0000cba2: CF := #1804 < #1805
.address 0x40F3A5
0000cba5: OF := high:1[(#1804 ^ #1805) & (#1804 ^ RSI)]
.address 0x40F3A5
0000cba8: AF := 0x10 = (0x10 & (RSI ^ #1804 ^ #1805))
.address 0x40F3A5
0000cbab: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F3A5
0000cbae: SF := high:1[RSI]
.address 0x40F3A5
0000cbb1: ZF := 0 = RSI
.address 0x40F3A8
0000cbbf: #1807 := low:32[RSI]
.address 0x40F3A8
0000cbc2: RSI := pad:64[low:32[RSI] + 0x30]
.address 0x40F3A8
0000cbc5: CF := low:32[RSI] < #1807
.address 0x40F3A8
0000cbc8: OF := ~high:1[#1807] & (high:1[#1807] | high:1[low:32[RSI]]) & ~(
high:1[#1807] & high:1[low:32[RSI]])
.address 0x40F3A8
0000cbcb: AF := 0x10 = (0x10 & (low:32[RSI] ^ #1807 ^ 0x30))
.address 0x40F3A8
0000cbce: PF := ~low:1[let $1 = low:32[RSI] >> 4 ^ low:32[RSI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F3A8
0000cbd1: SF := high:1[low:32[RSI]]
.address 0x40F3A8
0000cbd4: ZF := 0 = low:32[RSI]
.address 0x40F3AB
0000cbe1: #1810 := RDX
.address 0x40F3AB
0000cbe4: OF := 0
.address 0x40F3AB
0000cbe7: CF := 0
.address 0x40F3AB
0000cbea: AF := unknown[bits]:u1
.address 0x40F3AB
0000cbed: PF := ~low:1[let $1 = #1810 >> 4 ^ #1810 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F3AB
0000cbf0: SF := high:1[#1810]
.address 0x40F3AB
0000cbf3: ZF := 0 = #1810
.address 0x40F3AE
0000cbfa: mem := mem with [R15] <- low:8[RSI]
.address 0x40F3B1
0000cc01: RSI := RDX
.address 0x40F3B4
0000cc0a: when ~ZF goto %0000caea
00044bf7: goto %0000cc10

.address 0x40F3B6
0000cc10: 
.address 0x40F3B6
0000cc15: goto %0000c6b3

.address 0x40F139
0000e18d: 
.address 0x40F139
0000e199: #2007 := RSP
.address 0x40F139
0000e19c: RSP := RSP + 0x98
.address 0x40F139
0000e19f: CF := RSP < #2007
.address 0x40F139
0000e1a2: OF := ~high:1[#2007] & (high:1[#2007] | high:1[RSP]) & ~(high:1[#2007] & high:1[RSP])
.address 0x40F139
0000e1a5: AF := 0x10 = (0x10 & (RSP ^ #2007 ^ 0x98))
.address 0x40F139
0000e1a8: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F139
0000e1ab: SF := high:1[RSP]
.address 0x40F139
0000e1ae: ZF := 0 = RSP
.address 0x40F140
0000e1b6: RBX := mem[RSP, el]:u64
.address 0x40F140
0000e1b9: RSP := RSP + 8
.address 0x40F141
0000e1c1: RBP := mem[RSP, el]:u64
.address 0x40F141
0000e1c4: RSP := RSP + 8
.address 0x40F142
0000e1cc: R12 := mem[RSP, el]:u64
.address 0x40F142
0000e1cf: RSP := RSP + 8
.address 0x40F144
0000e1d7: R13 := mem[RSP, el]:u64
.address 0x40F144
0000e1da: RSP := RSP + 8
.address 0x40F146
0000e1e2: R14 := mem[RSP, el]:u64
.address 0x40F146
0000e1e5: RSP := RSP + 8
.address 0x40F148
0000e1ed: R15 := mem[RSP, el]:u64
.address 0x40F148
0000e1f0: RSP := RSP + 8
.address 0x40F14A
0000e1f9: #2010 := mem[RSP, el]:u64
.address 0x40F14A
0000e1fc: RSP := RSP + 8
.address 0x40F14A
0000e200: call #2010 with noreturn

.address 0x40EE50
0001e826: 
00044bf8: goto %0001e710


.address 0x40F720
000443a9: sub sub_40f720()
.address 0x40F720
0000e34f: 
.address 0x40F720
0000e356: #2021 := R13
.address 0x40F720
0000e359: RSP := RSP - 8
.address 0x40F720
0000e35c: mem := mem with [RSP, el]:u64 <- #2021
.address 0x40F722
0000e365: #2022 := R12
.address 0x40F722
0000e368: RSP := RSP - 8
.address 0x40F722
0000e36b: mem := mem with [RSP, el]:u64 <- #2022
.address 0x40F724
0000e372: R13 := RSI
.address 0x40F727
0000e37b: #2023 := RBP
.address 0x40F727
0000e37e: RSP := RSP - 8
.address 0x40F727
0000e381: mem := mem with [RSP, el]:u64 <- #2023
.address 0x40F728
0000e38a: #2024 := RBX
.address 0x40F728
0000e38d: RSP := RSP - 8
.address 0x40F728
0000e390: mem := mem with [RSP, el]:u64 <- #2024
.address 0x40F729
0000e397: R12 := RDX
.address 0x40F72C
0000e39e: RBX := RDI
.address 0x40F72F
0000e3ac: #2025 := RSP
.address 0x40F72F
0000e3af: RSP := RSP - 0x18
.address 0x40F72F
0000e3b2: CF := #2025 < 0x18
.address 0x40F72F
0000e3b5: OF := high:1[(#2025 ^ 0x18) & (#2025 ^ RSP)]
.address 0x40F72F
0000e3b8: AF := 0x10 = (0x10 & (RSP ^ #2025 ^ 0x18))
.address 0x40F72F
0000e3bb: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F72F
0000e3be: SF := high:1[RSP]
.address 0x40F72F
0000e3c1: ZF := 0 = RSP
.address 0x40F733
0000e3c8: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x40F73C
0000e3cf: mem := mem with [RSP + 8, el]:u64 <- RAX
.address 0x40F741
0000e3dc: RAX := 0
.address 0x40F741
0000e3df: AF := unknown[bits]:u1
.address 0x40F741
0000e3e2: ZF := 1
.address 0x40F741
0000e3e5: PF := 1
.address 0x40F741
0000e3e8: OF := 0
.address 0x40F741
0000e3eb: CF := 0
.address 0x40F741
0000e3ee: SF := 0
.address 0x40F743
0000e3fb: #2028 := RDI
.address 0x40F743
0000e3fe: OF := 0
.address 0x40F743
0000e401: CF := 0
.address 0x40F743
0000e404: AF := unknown[bits]:u1
.address 0x40F743
0000e407: PF := ~low:1[let $1 = #2028 >> 4 ^ #2028 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F743
0000e40a: SF := high:1[#2028]
.address 0x40F743
0000e40d: ZF := 0 = #2028
.address 0x40F746
0000e417: when ZF goto %0000e411
00044bf9: goto %0000e45a

.address 0x40F860
0000e411: 
.address 0x40F860
0000e421: RDI := 0x417E68
.address 0x40F867
0000e42a: RSP := RSP - 8
.address 0x40F867
0000e42d: mem := mem with [RSP, el]:u64 <- 0x40F86C
.address 0x40F867
0000e430: call @sub_4037a0 with return %0000e432

.address 0x40F86C
0000e432: 
.address 0x40F86C
0000e43d: #2030 := RAX
.address 0x40F86C
0000e440: OF := 0
.address 0x40F86C
0000e443: CF := 0
.address 0x40F86C
0000e446: AF := unknown[bits]:u1
.address 0x40F86C
0000e449: PF := ~low:1[let $1 = #2030 >> 4 ^ #2030 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F86C
0000e44c: SF := high:1[#2030]
.address 0x40F86C
0000e44f: ZF := 0 = #2030
.address 0x40F86F
0000e456: RBX := RAX
.address 0x40F872
0000e460: when ~ZF goto %0000e45a
00044bfa: goto %0001e4fc

.address 0x40F878
0001e4fc: 
.address 0x40F878
0001e501: RDI := 0x41A40C
.address 0x40F87F
0001e50a: RSP := RSP - 8
.address 0x40F87F
0001e50d: mem := mem with [RSP, el]:u64 <- 0x40F884
.address 0x40F87F
0001e510: call @sub_4037a0 with return %0001e512

.address 0x40F884
0001e512: 
.address 0x40F884
0001e51d: #4222 := RAX
.address 0x40F884
0001e520: OF := 0
.address 0x40F884
0001e523: CF := 0
.address 0x40F884
0001e526: AF := unknown[bits]:u1
.address 0x40F884
0001e529: PF := ~low:1[let $1 = #4222 >> 4 ^ #4222 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F884
0001e52c: SF := high:1[#4222]
.address 0x40F884
0001e52f: ZF := 0 = #4222
.address 0x40F887
0001e536: RBX := RAX
.address 0x40F88A
0001e53f: when ~ZF goto %0000e45a
00044bfb: goto %0001e545

.address 0x40F890
0001e545: 
.address 0x40F890
0001e54a: RDI := 0x41A416
.address 0x40F897
0001e553: RSP := RSP - 8
.address 0x40F897
0001e556: mem := mem with [RSP, el]:u64 <- 0x40F89C
.address 0x40F897
0001e559: call @sub_4037a0 with return %0001e55b

.address 0x40F89C
0001e55b: 
.address 0x40F89C
0001e566: #4224 := RAX
.address 0x40F89C
0001e569: OF := 0
.address 0x40F89C
0001e56c: CF := 0
.address 0x40F89C
0001e56f: AF := unknown[bits]:u1
.address 0x40F89C
0001e572: PF := ~low:1[let $1 = #4224 >> 4 ^ #4224 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F89C
0001e575: SF := high:1[#4224]
.address 0x40F89C
0001e578: ZF := 0 = #4224
.address 0x40F89F
0001e581: when ZF goto %0001e41b
00044bfc: goto %0001e587

.address 0x40F8EA
0001e41b: 
.address 0x40F8EA
0001e420: mem := mem with [R12, el]:u64 <- 0x400
.address 0x40F8F2
0001e42d: RAX := 0
.address 0x40F8F2
0001e430: AF := unknown[bits]:u1
.address 0x40F8F2
0001e433: ZF := 1
.address 0x40F8F2
0001e436: PF := 1
.address 0x40F8F2
0001e439: OF := 0
.address 0x40F8F2
0001e43c: CF := 0
.address 0x40F8F2
0001e43f: SF := 0
.address 0x40F8F4
0001e446: mem := mem with [R13, el]:u32 <- 0
.address 0x40F8FC
0001e44d: goto %000145c7

.address 0x40F8A1
0001e587: 
.address 0x40F8A1
0001e58c: mem := mem with [R12, el]:u64 <- 0x200
.address 0x40F8A9
0001e599: RAX := 0
.address 0x40F8A9
0001e59c: AF := unknown[bits]:u1
.address 0x40F8A9
0001e59f: ZF := 1
.address 0x40F8A9
0001e5a2: PF := 1
.address 0x40F8A9
0001e5a5: OF := 0
.address 0x40F8A9
0001e5a8: CF := 0
.address 0x40F8A9
0001e5ab: SF := 0
.address 0x40F8AB
0001e5b2: mem := mem with [R13, el]:u32 <- 0
.address 0x40F8B3
0001e5b9: goto %000145c7

.address 0x40F74C
0000e45a: 
.address 0x40F74C
0000e470: RBP := 0
.address 0x40F74C
0000e473: AF := unknown[bits]:u1
.address 0x40F74C
0000e476: ZF := 1
.address 0x40F74C
0000e479: PF := 1
.address 0x40F74C
0000e47c: OF := 0
.address 0x40F74C
0000e47f: CF := 0
.address 0x40F74C
0000e482: SF := 0
.address 0x40F74E
0000e48f: #2032 := mem[RBX] - 0x27
.address 0x40F74E
0000e492: CF := mem[RBX] < 0x27
.address 0x40F74E
0000e495: OF := high:1[(mem[RBX] ^ 0x27) & (mem[RBX] ^ #2032)]
.address 0x40F74E
0000e498: AF := 0x10 = (0x10 & (#2032 ^ mem[RBX] ^ 0x27))
.address 0x40F74E
0000e49b: PF := ~low:1[let $1 = #2032 >> 4 ^ #2032 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F74E
0000e49e: SF := high:1[#2032]
.address 0x40F74E
0000e4a1: ZF := 0 = #2032
.address 0x40F751
0000e4ab: when ~ZF goto %0000e4a5
00044bfd: goto %0001e4d2

.address 0x40F753
0001e4d2: 
.address 0x40F753
0001e4de: #4219 := RBX
.address 0x40F753
0001e4e1: RBX := RBX + 1
.address 0x40F753
0001e4e4: CF := RBX < #4219
.address 0x40F753
0001e4e7: OF := ~high:1[#4219] & (high:1[#4219] | high:1[RBX]) & ~(high:1[#4219] & high:1[RBX])
.address 0x40F753
0001e4ea: AF := 0x10 = (0x10 & (RBX ^ #4219 ^ 1))
.address 0x40F753
0001e4ed: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F753
0001e4f0: SF := high:1[RBX]
.address 0x40F753
0001e4f3: ZF := 0 = RBX
.address 0x40F757
0001e4fa: RBP := 4
00044bfe: goto %0000e4a5

.address 0x40F75C
0000e4a5: 
.address 0x40F75C
0000e4b5: RDX := 0x41A438
.address 0x40F763
0000e4bc: RSI := 0x61F9B0
.address 0x40F76A
0000e4c3: RCX := 4
.address 0x40F76F
0000e4ca: RDI := RBX
.address 0x40F772
0000e4d4: RSP := RSP - 8
.address 0x40F772
0000e4d7: mem := mem with [RSP, el]:u64 <- 0x40F777
.address 0x40F772
0000e4da: call @sub_40c2c0 with return %000144f6

.address 0x40F777
000144f6: 
.address 0x40F777
00014501: #2662 := low:32[RAX]
.address 0x40F777
00014504: OF := 0
.address 0x40F777
00014507: CF := 0
.address 0x40F777
0001450a: AF := unknown[bits]:u1
.address 0x40F777
0001450d: PF := ~low:1[let $1 = #2662 >> 4 ^ #2662 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F777
00014510: SF := high:1[#2662]
.address 0x40F777
00014513: ZF := 0 = #2662
.address 0x40F779
0001451d: when SF goto %00014517
00044bff: goto %0001e478

.address 0x40F7B8
00014517: 
.address 0x40F7B8
00014527: R8 := 0x41A426
.address 0x40F7BF
00014534: RDX := 0
.address 0x40F7BF
00014537: AF := unknown[bits]:u1
.address 0x40F7BF
0001453a: ZF := 1
.address 0x40F7BF
0001453d: PF := 1
.address 0x40F7BF
00014540: OF := 0
.address 0x40F7BF
00014543: CF := 0
.address 0x40F7BF
00014546: SF := 0
.address 0x40F7C1
0001454d: RSI := RSP
.address 0x40F7C4
00014554: RCX := R12
.address 0x40F7C7
0001455b: RDI := RBX
.address 0x40F7CA
00014564: RSP := RSP - 8
.address 0x40F7CA
00014567: mem := mem with [RSP, el]:u64 <- 0x40F7CF
.address 0x40F7CA
0001456a: call @sub_414e20 with return %0001456c

.address 0x40F7CF
0001456c: 
.address 0x40F7CF
00014577: #2664 := low:32[RAX]
.address 0x40F7CF
0001457a: OF := 0
.address 0x40F7CF
0001457d: CF := 0
.address 0x40F7CF
00014580: AF := unknown[bits]:u1
.address 0x40F7CF
00014583: PF := ~low:1[let $1 = #2664 >> 4 ^ #2664 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F7CF
00014586: SF := high:1[#2664]
.address 0x40F7CF
00014589: ZF := 0 = #2664
.address 0x40F7D1
00014593: when ~ZF goto %0001458d
00044c00: goto %0001e266

.address 0x40F818
0001458d: 
.address 0x40F818
0001459d: RDX := mem[R12, el]:u64
.address 0x40F81C
000145a4: mem := mem with [R13, el]:u32 <- 0
00044c01: goto %000145a6

.address 0x40F7D3
0001e266: 
.address 0x40F7D3
0001e26b: RSI := pad:64[pad:32[mem[RBX]]]
.address 0x40F7D6
0001e272: RDX := pad:64[low:32[RSI - 0x30]]
.address 0x40F7D9
0001e27f: #4200 := low:8[RDX] - 9
.address 0x40F7D9
0001e282: CF := low:8[RDX] < 9
.address 0x40F7D9
0001e285: OF := high:1[(low:8[RDX] ^ 9) & (low:8[RDX] ^ #4200)]
.address 0x40F7D9
0001e288: AF := 0x10 = (0x10 & (#4200 ^ low:8[RDX] ^ 9))
.address 0x40F7D9
0001e28b: PF := ~low:1[let $1 = #4200 >> 4 ^ #4200 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F7D9
0001e28e: SF := high:1[#4200]
.address 0x40F7D9
0001e291: ZF := 0 = #4200
.address 0x40F7DC
0001e29b: when CF | ZF goto %0001e295
00044c02: goto %0001e2b8

.address 0x40F7DE
0001e2b8: 
.address 0x40F7DE
0001e2bd: RCX := mem[RSP, el]:u64
.address 0x40F7E2
0001e2ca: #4202 := RBX - RCX
.address 0x40F7E2
0001e2cd: CF := RBX < RCX
.address 0x40F7E2
0001e2d0: OF := high:1[(RBX ^ RCX) & (RBX ^ #4202)]
.address 0x40F7E2
0001e2d3: AF := 0x10 = (0x10 & (#4202 ^ RBX ^ RCX))
.address 0x40F7E2
0001e2d6: PF := ~low:1[let $1 = #4202 >> 4 ^ #4202 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F7E2
0001e2d9: SF := high:1[#4202]
.address 0x40F7E2
0001e2dc: ZF := 0 = #4202
.address 0x40F7E5
0001e2e6: when ~ZF goto %0001e2e0
00044c03: goto %0001e46e

.address 0x40F7F9
0001e2e0: 
.address 0x40F7F9
0001e2f7: #4204 := RBX
.address 0x40F7F9
0001e2fa: RBX := RBX + 1
.address 0x40F7F9
0001e2fd: CF := RBX < #4204
.address 0x40F7F9
0001e300: OF := ~high:1[#4204] & (high:1[#4204] | high:1[RBX]) & ~(high:1[#4204] & high:1[RBX])
.address 0x40F7F9
0001e303: AF := 0x10 = (0x10 & (RBX ^ #4204 ^ 1))
.address 0x40F7F9
0001e306: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F7F9
0001e309: SF := high:1[RBX]
.address 0x40F7F9
0001e30c: ZF := 0 = RBX
.address 0x40F7FD
0001e313: RDI := pad:64[pad:32[mem[RBX]]]
.address 0x40F800
0001e31a: RDX := pad:64[low:32[RDI - 0x30]]
.address 0x40F803
0001e327: #4207 := low:8[RDX] - 9
.address 0x40F803
0001e32a: CF := low:8[RDX] < 9
.address 0x40F803
0001e32d: OF := high:1[(low:8[RDX] ^ 9) & (low:8[RDX] ^ #4207)]
.address 0x40F803
0001e330: AF := 0x10 = (0x10 & (#4207 ^ low:8[RDX] ^ 9))
.address 0x40F803
0001e333: PF := ~low:1[let $1 = #4207 >> 4 ^ #4207 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F803
0001e336: SF := high:1[#4207]
.address 0x40F803
0001e339: ZF := 0 = #4207
.address 0x40F806
0001e343: when ~(CF | ZF) goto %0001e33d
00044c04: goto %0001e295

.address 0x40F7F0
0001e33d: 
.address 0x40F7F0
0001e353: #4209 := RBX - RCX
.address 0x40F7F0
0001e356: CF := RBX < RCX
.address 0x40F7F0
0001e359: OF := high:1[(RBX ^ RCX) & (RBX ^ #4209)]
.address 0x40F7F0
0001e35c: AF := 0x10 = (0x10 & (#4209 ^ RBX ^ RCX))
.address 0x40F7F0
0001e35f: PF := ~low:1[let $1 = #4209 >> 4 ^ #4209 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F7F0
0001e362: SF := high:1[#4209]
.address 0x40F7F0
0001e365: ZF := 0 = #4209
.address 0x40F7F3
0001e36f: when ZF goto %0001e369
00044c05: goto %0001e2e0

.address 0x40F7E7
0001e46e: 
.address 0x40F7E7
0001e473: goto %0001e369

.address 0x40F8C0
0001e369: 
.address 0x40F8C0
0001e37f: #4211 := mem[RCX - 1] - 0x42
.address 0x40F8C0
0001e382: CF := mem[RCX - 1] < 0x42
.address 0x40F8C0
0001e385: OF := high:1[(mem[RCX - 1] ^ 0x42) & (mem[RCX - 1] ^ #4211)]
.address 0x40F8C0
0001e388: AF := 0x10 = (0x10 & (#4211 ^ mem[RCX - 1] ^ 0x42))
.address 0x40F8C0
0001e38b: PF := ~low:1[let $1 = #4211 >> 4 ^ #4211 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F8C0
0001e38e: SF := high:1[#4211]
.address 0x40F8C0
0001e391: ZF := 0 = #4211
.address 0x40F8C4
0001e39b: when ZF goto %0001e395
00044c06: goto %0001e44f

.address 0x40F8D8
0001e395: 
.address 0x40F8D8
0001e3ab: RBP := pad:64[low:32[RBP] | 0x180]
.address 0x40F8D8
0001e3ae: OF := 0
.address 0x40F8D8
0001e3b1: CF := 0
.address 0x40F8D8
0001e3b4: AF := unknown[bits]:u1
.address 0x40F8D8
0001e3b7: PF := ~low:1[let $1 = low:32[RBP] >> 4 ^ low:32[RBP] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F8D8
0001e3ba: SF := high:1[low:32[RBP]]
.address 0x40F8D8
0001e3bd: ZF := 0 = low:32[RBP]
.address 0x40F8DE
0001e3ca: #4214 := mem[RCX - 2] - 0x69
.address 0x40F8DE
0001e3cd: CF := mem[RCX - 2] < 0x69
.address 0x40F8DE
0001e3d0: OF := high:1[(mem[RCX - 2] ^ 0x69) & (mem[RCX - 2] ^ #4214)]
.address 0x40F8DE
0001e3d3: AF := 0x10 = (0x10 & (#4214 ^ mem[RCX - 2] ^ 0x69))
.address 0x40F8DE
0001e3d6: PF := ~low:1[let $1 = #4214 >> 4 ^ #4214 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F8DE
0001e3d9: SF := high:1[#4214]
.address 0x40F8DE
0001e3dc: ZF := 0 = #4214
.address 0x40F8E2
0001e3e5: when ~ZF goto %0001e295
00044c07: goto %0001e3eb

.address 0x40F8E8
0001e3eb: 
.address 0x40F8E8
0001e3f1: goto %0001e3ed

.address 0x40F8C6
0001e44f: 
.address 0x40F8C6
0001e45a: RBP := extract:63:8[RBP].low:8[RBP] | 0x80
.address 0x40F8C6
0001e45d: OF := 0
.address 0x40F8C6
0001e460: CF := 0
.address 0x40F8C6
0001e463: AF := unknown[bits]:u1
.address 0x40F8C6
0001e466: PF := ~low:1[let $1 = low:8[RBP] >> 4 ^ low:8[RBP] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F8C6
0001e469: SF := high:1[low:8[RBP]]
.address 0x40F8C6
0001e46c: ZF := 0 = low:8[RBP]
00044c08: goto %0001e3ed

.address 0x40F8CA
0001e3ed: 
.address 0x40F8CA
0001e3fd: RBP := pad:64[low:32[RBP] | 0x20]
.address 0x40F8CA
0001e400: OF := 0
.address 0x40F8CA
0001e403: CF := 0
.address 0x40F8CA
0001e406: AF := unknown[bits]:u1
.address 0x40F8CA
0001e409: PF := ~low:1[let $1 = low:32[RBP] >> 4 ^ low:32[RBP] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F8CA
0001e40c: SF := high:1[low:32[RBP]]
.address 0x40F8CA
0001e40f: ZF := 0 = low:32[RBP]
.address 0x40F8CD
0001e416: goto %0001e295

.address 0x40F808
0001e295: 
.address 0x40F808
0001e2a5: RDX := mem[R12, el]:u64
.address 0x40F80C
0001e2ac: mem := mem with [R13, el]:u32 <- low:32[RBP]
.address 0x40F810
0001e2b3: goto %000145a6

.address 0x40F824
000145a6: 
.address 0x40F824
000145b1: #2666 := RDX
.address 0x40F824
000145b4: OF := 0
.address 0x40F824
000145b7: CF := 0
.address 0x40F824
000145ba: AF := unknown[bits]:u1
.address 0x40F824
000145bd: PF := ~low:1[let $1 = #2666 >> 4 ^ #2666 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F824
000145c0: SF := high:1[#2666]
.address 0x40F824
000145c3: ZF := 0 = #2666
.address 0x40F827
000145cd: when ~ZF goto %000145c7
00044c09: goto %0001e1b0

.address 0x40F82D
0001e1b0: 
.address 0x40F82D
0001e1b5: RDI := 0x41A416
.address 0x40F834
0001e1be: RSP := RSP - 8
.address 0x40F834
0001e1c1: mem := mem with [RSP, el]:u64 <- 0x40F839
.address 0x40F834
0001e1c4: call @sub_4037a0 with return %0001e1c6

.address 0x40F839
0001e1c6: 
.address 0x40F839
0001e1d1: #4191 := RAX - 1
.address 0x40F839
0001e1d4: CF := RAX < 1
.address 0x40F839
0001e1d7: OF := high:1[(RAX ^ 1) & (RAX ^ #4191)]
.address 0x40F839
0001e1da: AF := 0x10 = (0x10 & (#4191 ^ RAX ^ 1))
.address 0x40F839
0001e1dd: PF := ~low:1[let $1 = #4191 >> 4 ^ #4191 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F839
0001e1e0: SF := high:1[#4191]
.address 0x40F839
0001e1e3: ZF := 0 = #4191
.address 0x40F83D
0001e1f2: #4193 := RAX
.address 0x40F83D
0001e1f5: #4194 := RAX
.address 0x40F83D
0001e1f8: RAX := #4194 - #4193 + pad:64[CF]
.address 0x40F83D
0001e1fb: OF := high:1[(#4193 ^ #4194) & (#4194 ^ RAX)]
.address 0x40F83D
0001e1fe: CF := #4194 < #4193 + pad:64[CF] | #4193 + pad:64[CF] < #4193
.address 0x40F83D
0001e201: AF := 0x10 = (0x10 & (RAX ^ #4193 ^ #4194))
.address 0x40F83D
0001e204: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F83D
0001e207: SF := high:1[RAX]
.address 0x40F83D
0001e20a: ZF := 0 = RAX
.address 0x40F840
0001e217: RAX := pad:64[low:32[RAX] & 0x200]
.address 0x40F840
0001e21a: OF := 0
.address 0x40F840
0001e21d: CF := 0
.address 0x40F840
0001e220: AF := unknown[bits]:u1
.address 0x40F840
0001e223: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F840
0001e226: SF := high:1[low:32[RAX]]
.address 0x40F840
0001e229: ZF := 0 = low:32[RAX]
.address 0x40F845
0001e237: #4197 := RAX
.address 0x40F845
0001e23a: RAX := RAX + 0x200
.address 0x40F845
0001e23d: CF := RAX < #4197
.address 0x40F845
0001e240: OF := ~high:1[#4197] & (high:1[#4197] | high:1[RAX]) & ~(high:1[#4197] & high:1[RAX])
.address 0x40F845
0001e243: AF := 0x10 = (0x10 & (RAX ^ #4197 ^ 0x200))
.address 0x40F845
0001e246: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F845
0001e249: SF := high:1[RAX]
.address 0x40F845
0001e24c: ZF := 0 = RAX
.address 0x40F84B
0001e253: mem := mem with [R12, el]:u64 <- RAX
.address 0x40F84F
0001e25a: RAX := 4
.address 0x40F854
0001e261: goto %000145c7

.address 0x40F77B
0001e478: 
.address 0x40F77B
0001e47d: RDX := 0x41A438
.address 0x40F782
0001e484: RAX := extend:64[low:32[RAX]]
.address 0x40F784
0001e48b: mem := mem with [R12, el]:u64 <- 1
.address 0x40F78C
0001e498: RBP := pad:64[low:32[RBP] | mem[RDX + (RAX << 2), el]:u32]
.address 0x40F78C
0001e49b: OF := 0
.address 0x40F78C
0001e49e: CF := 0
.address 0x40F78C
0001e4a1: AF := unknown[bits]:u1
.address 0x40F78C
0001e4a4: PF := ~low:1[let $1 = low:32[RBP] >> 4 ^ low:32[RBP] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F78C
0001e4a7: SF := high:1[low:32[RBP]]
.address 0x40F78C
0001e4aa: ZF := 0 = low:32[RBP]
.address 0x40F78F
0001e4b7: RAX := 0
.address 0x40F78F
0001e4ba: AF := unknown[bits]:u1
.address 0x40F78F
0001e4bd: ZF := 1
.address 0x40F78F
0001e4c0: PF := 1
.address 0x40F78F
0001e4c3: OF := 0
.address 0x40F78F
0001e4c6: CF := 0
.address 0x40F78F
0001e4c9: SF := 0
.address 0x40F791
0001e4d0: mem := mem with [R13, el]:u32 <- low:32[RBP]
00044c0a: goto %000145c7

.address 0x40F795
000145c7: 
.address 0x40F795
000145d7: RCX := mem[RSP + 8, el]:u64
.address 0x40F79A
000145e4: RCX := RCX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x40F79A
000145e7: OF := 0
.address 0x40F79A
000145ea: CF := 0
.address 0x40F79A
000145ed: AF := unknown[bits]:u1
.address 0x40F79A
000145f0: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F79A
000145f3: SF := high:1[RCX]
.address 0x40F79A
000145f6: ZF := 0 = RCX
.address 0x40F7A3
00014600: when ~ZF goto %000145fa
00044c0b: goto %0001e14e

.address 0x40F901
000145fa: 
.address 0x40F901
0001460c: RSP := RSP - 8
.address 0x40F901
0001460f: mem := mem with [RSP, el]:u64 <- 0x40F906
.address 0x40F901
00014612: call @sub_403970 with return %00014614

.address 0x40F906
00014614: 
00044c0c: call @sub_40f910 with noreturn

.address 0x40F7A9
0001e14e: 
.address 0x40F7A9
0001e15a: #4187 := RSP
.address 0x40F7A9
0001e15d: RSP := RSP + 0x18
.address 0x40F7A9
0001e160: CF := RSP < #4187
.address 0x40F7A9
0001e163: OF := ~high:1[#4187] & (high:1[#4187] | high:1[RSP]) & ~(high:1[#4187] & high:1[RSP])
.address 0x40F7A9
0001e166: AF := 0x10 = (0x10 & (RSP ^ #4187 ^ 0x18))
.address 0x40F7A9
0001e169: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F7A9
0001e16c: SF := high:1[RSP]
.address 0x40F7A9
0001e16f: ZF := 0 = RSP
.address 0x40F7AD
0001e177: RBX := mem[RSP, el]:u64
.address 0x40F7AD
0001e17a: RSP := RSP + 8
.address 0x40F7AE
0001e182: RBP := mem[RSP, el]:u64
.address 0x40F7AE
0001e185: RSP := RSP + 8
.address 0x40F7AF
0001e18d: R12 := mem[RSP, el]:u64
.address 0x40F7AF
0001e190: RSP := RSP + 8
.address 0x40F7B1
0001e198: R13 := mem[RSP, el]:u64
.address 0x40F7B1
0001e19b: RSP := RSP + 8
.address 0x40F7B3
0001e1a4: #4190 := mem[RSP, el]:u64
.address 0x40F7B3
0001e1a7: RSP := RSP + 8
.address 0x40F7B3
0001e1ab: call #4190 with noreturn


.address 0x40F910
000443be: sub sub_40f910()
.address 0x40F910
00014617: 
.address 0x40F910
0001461e: #2669 := R12
.address 0x40F910
00014621: RSP := RSP - 8
.address 0x40F910
00014624: mem := mem with [RSP, el]:u64 <- #2669
.address 0x40F912
0001462d: #2670 := RBP
.address 0x40F912
00014630: RSP := RSP - 8
.address 0x40F912
00014633: mem := mem with [RSP, el]:u64 <- #2670
.address 0x40F913
0001463c: #2671 := RBX
.address 0x40F913
0001463f: RSP := RSP - 8
.address 0x40F913
00014642: mem := mem with [RSP, el]:u64 <- #2671
.address 0x40F914
00014649: RBX := mem[0x6213F8, el]:u64
.address 0x40F91B
00014656: #2672 := RBX
.address 0x40F91B
00014659: OF := 0
.address 0x40F91B
0001465c: CF := 0
.address 0x40F91B
0001465f: AF := unknown[bits]:u1
.address 0x40F91B
00014662: PF := ~low:1[let $1 = #2672 >> 4 ^ #2672 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F91B
00014665: SF := high:1[#2672]
.address 0x40F91B
00014668: ZF := 0 = #2672
.address 0x40F91E
00014672: when ZF goto %0001466c
00044c0d: goto %0001e0b9

.address 0x40F920
0001e0b9: 
.address 0x40F920
0001e0c4: #4181 := low:32[RDI] - mem[RBX, el]:u32
.address 0x40F920
0001e0c7: CF := low:32[RDI] < mem[RBX, el]:u32
.address 0x40F920
0001e0ca: OF := high:1[(low:32[RDI] ^ mem[RBX, el]:u32) & (low:32[RDI] ^ #4181)]
.address 0x40F920
0001e0cd: AF := 0x10 = (0x10 & (#4181 ^ low:32[RDI] ^ mem[RBX, el]:u32))
.address 0x40F920
0001e0d0: PF := ~low:1[let $1 = #4181 >> 4 ^ #4181 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F920
0001e0d3: SF := high:1[#4181]
.address 0x40F920
0001e0d6: ZF := 0 = #4181
.address 0x40F922
0001e0e0: when ~ZF goto %0001e0da
00044c0e: goto %0001e144

.address 0x40F934
0001e0da: 
.address 0x40F934
0001e0ea: RBX := mem[RBX + 8, el]:u64
.address 0x40F938
0001e0f7: #4183 := RBX
.address 0x40F938
0001e0fa: OF := 0
.address 0x40F938
0001e0fd: CF := 0
.address 0x40F938
0001e100: AF := unknown[bits]:u1
.address 0x40F938
0001e103: PF := ~low:1[let $1 = #4183 >> 4 ^ #4183 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F938
0001e106: SF := high:1[#4183]
.address 0x40F938
0001e109: ZF := 0 = #4183
.address 0x40F93B
0001e113: when ~ZF goto %0001e10d
00044c0f: goto %0001466c

.address 0x40F93D
0001466c: 
.address 0x40F93D
0001467c: RBP := pad:64[low:32[RDI]]
.address 0x40F93F
00014683: R12 := 0x417C4A
.address 0x40F946
0001468c: RSP := RSP - 8
.address 0x40F946
0001468f: mem := mem with [RSP, el]:u64 <- 0x40F94B
.address 0x40F946
00014692: call @sub_403910 with return %00014694

.address 0x40F94B
00014694: 
.address 0x40F94B
0001469f: #2674 := RAX
.address 0x40F94B
000146a2: OF := 0
.address 0x40F94B
000146a5: CF := 0
.address 0x40F94B
000146a8: AF := unknown[bits]:u1
.address 0x40F94B
000146ab: PF := ~low:1[let $1 = #2674 >> 4 ^ #2674 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F94B
000146ae: SF := high:1[#2674]
.address 0x40F94B
000146b1: ZF := 0 = #2674
.address 0x40F94E
000146b8: RDI := 0x18
.address 0x40F953
000146c2: when ZF goto %000146bc
00044c10: goto %0001e076

.address 0x40F955
0001e076: 
.address 0x40F955
0001e07b: R12 := mem[RAX, el]:u64
.address 0x40F958
0001e082: RDI := R12
.address 0x40F95B
0001e08b: RSP := RSP - 8
.address 0x40F95B
0001e08e: mem := mem with [RSP, el]:u64 <- 0x40F960
.address 0x40F95B
0001e091: call @sub_403950 with return %0001e093

.address 0x40F960
0001e093: 
.address 0x40F960
0001e098: RDI := low:64[RAX + 0x18]
.address 0x40F964
0001e0a5: RDI := RDI & 0xFFFFFFFFFFFFFFF8
.address 0x40F964
0001e0a8: OF := 0
.address 0x40F964
0001e0ab: CF := 0
.address 0x40F964
0001e0ae: AF := unknown[bits]:u1
.address 0x40F964
0001e0b1: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40F964
0001e0b4: SF := high:1[RDI]
.address 0x40F964
0001e0b7: ZF := 0 = RDI
00044c11: goto %000146bc

.address 0x40F968
000146bc: 
.address 0x40F968
000146ce: RSP := RSP - 8
.address 0x40F968
000146d1: mem := mem with [RSP, el]:u64 <- 0x40F96D
.address 0x40F968
000146d4: call @sub_414480 with return %000146d6

.address 0x40F96D
000146d6: 
.address 0x40F96D
000146db: RDI := low:64[RAX + 0x10]
.address 0x40F971
000146e2: mem := mem with [RAX, el]:u32 <- low:32[RBP]
.address 0x40F973
000146e9: RSI := R12
.address 0x40F976
000146f0: RBX := RAX
.address 0x40F979
000146f9: RSP := RSP - 8
.address 0x40F979
000146fc: mem := mem with [RSP, el]:u64 <- 0x40F97E
.address 0x40F979
000146ff: call @sub_403830 with return %00014701

.address 0x40F97E
00014701: 
.address 0x40F97E
00014706: RAX := mem[0x6213F8, el]:u64
.address 0x40F985
0001470d: mem := mem with [0x6213F8, el]:u64 <- RBX
.address 0x40F98C
00014714: mem := mem with [RBX + 8, el]:u64 <- RAX
00044c12: goto %00014716

.address 0x40F930
0001e10d: 
.address 0x40F930
0001e123: #4185 := mem[RBX, el]:u32 - low:32[RDI]
.address 0x40F930
0001e126: CF := mem[RBX, el]:u32 < low:32[RDI]
.address 0x40F930
0001e129: OF := high:1[(mem[RBX, el]:u32 ^ low:32[RDI]) & (mem[RBX, el]:u32 ^ #4185)]
.address 0x40F930
0001e12c: AF := 0x10 = (0x10 & (#4185 ^ mem[RBX, el]:u32 ^ low:32[RDI]))
.address 0x40F930
0001e12f: PF := ~low:1[let $1 = #4185 >> 4 ^ #4185 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F930
0001e132: SF := high:1[#4185]
.address 0x40F930
0001e135: ZF := 0 = #4185
.address 0x40F932
0001e13e: when ZF goto %00014716
00044c13: goto %0001e0da

.address 0x40F924
0001e144: 
.address 0x40F924
0001e149: goto %00014716

.address 0x40F990
00014716: 
.address 0x40F990
00014721: #2676 := mem[RBX + 0x10]
.address 0x40F990
00014724: CF := mem[RBX + 0x10] < 0
.address 0x40F990
00014727: OF := high:1[mem[RBX + 0x10] & (mem[RBX + 0x10] ^ #2676)]
.address 0x40F990
0001472a: AF := 0x10 = (0x10 & (#2676 ^ mem[RBX + 0x10]))
.address 0x40F990
0001472d: PF := ~low:1[let $1 = #2676 >> 4 ^ #2676 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40F990
00014730: SF := high:1[#2676]
.address 0x40F990
00014733: ZF := 0 = #2676
.address 0x40F994
0001473d: when ZF goto %00014737
00044c14: goto %0001e06f

.address 0x40F9A0
00014737: 
.address 0x40F9A0
0001474d: RAX := 0
.address 0x40F9A0
00014750: AF := unknown[bits]:u1
.address 0x40F9A0
00014753: ZF := 1
.address 0x40F9A0
00014756: PF := 1
.address 0x40F9A0
00014759: OF := 0
.address 0x40F9A0
0001475c: CF := 0
.address 0x40F9A0
0001475f: SF := 0
.address 0x40F9A2
00014767: goto %00014763

.address 0x40F996
0001e06f: 
.address 0x40F996
0001e074: RAX := low:64[RBX + 0x10]
00044c15: goto %00014763

.address 0x40F99A
00014763: 
.address 0x40F99A
0001476e: RBX := mem[RSP, el]:u64
.address 0x40F99A
00014771: RSP := RSP + 8
.address 0x40F99B
00014779: RBP := mem[RSP, el]:u64
.address 0x40F99B
0001477c: RSP := RSP + 8
.address 0x40F99C
00014784: R12 := mem[RSP, el]:u64
.address 0x40F99C
00014787: RSP := RSP + 8
.address 0x40F99E
00014790: #2678 := mem[RSP, el]:u64
.address 0x40F99E
00014793: RSP := RSP + 8
.address 0x40F99E
00014797: call #2678 with noreturn


.address 0x40FAB0
000443c8: sub sub_40fab0()
.address 0x40FAB0
00014966: 
.address 0x40FAB0
0001496d: #2690 := R12
.address 0x40FAB0
00014970: RSP := RSP - 8
.address 0x40FAB0
00014973: mem := mem with [RSP, el]:u64 <- #2690
.address 0x40FAB2
0001497c: #2691 := RBP
.address 0x40FAB2
0001497f: RSP := RSP - 8
.address 0x40FAB2
00014982: mem := mem with [RSP, el]:u64 <- #2691
.address 0x40FAB3
0001498b: #2692 := RBX
.address 0x40FAB3
0001498e: RSP := RSP - 8
.address 0x40FAB3
00014991: mem := mem with [RSP, el]:u64 <- #2692
.address 0x40FAB4
00014998: RBX := mem[0x6213E8, el]:u64
.address 0x40FABB
000149a5: #2693 := RBX
.address 0x40FABB
000149a8: OF := 0
.address 0x40FABB
000149ab: CF := 0
.address 0x40FABB
000149ae: AF := unknown[bits]:u1
.address 0x40FABB
000149b1: PF := ~low:1[let $1 = #2693 >> 4 ^ #2693 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FABB
000149b4: SF := high:1[#2693]
.address 0x40FABB
000149b7: ZF := 0 = #2693
.address 0x40FABE
000149c1: when ZF goto %000149bb
00044c16: goto %0001dde4

.address 0x40FAC0
0001dde4: 
.address 0x40FAC0
0001ddef: #4161 := low:32[RDI] - mem[RBX, el]:u32
.address 0x40FAC0
0001ddf2: CF := low:32[RDI] < mem[RBX, el]:u32
.address 0x40FAC0
0001ddf5: OF := high:1[(low:32[RDI] ^ mem[RBX, el]:u32) & (low:32[RDI] ^ #4161)]
.address 0x40FAC0
0001ddf8: AF := 0x10 = (0x10 & (#4161 ^ low:32[RDI] ^ mem[RBX, el]:u32))
.address 0x40FAC0
0001ddfb: PF := ~low:1[let $1 = #4161 >> 4 ^ #4161 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FAC0
0001ddfe: SF := high:1[#4161]
.address 0x40FAC0
0001de01: ZF := 0 = #4161
.address 0x40FAC2
0001de0b: when ~ZF goto %0001de05
00044c17: goto %0001de6f

.address 0x40FAD4
0001de05: 
.address 0x40FAD4
0001de15: RBX := mem[RBX + 8, el]:u64
.address 0x40FAD8
0001de22: #4163 := RBX
.address 0x40FAD8
0001de25: OF := 0
.address 0x40FAD8
0001de28: CF := 0
.address 0x40FAD8
0001de2b: AF := unknown[bits]:u1
.address 0x40FAD8
0001de2e: PF := ~low:1[let $1 = #4163 >> 4 ^ #4163 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FAD8
0001de31: SF := high:1[#4163]
.address 0x40FAD8
0001de34: ZF := 0 = #4163
.address 0x40FADB
0001de3e: when ~ZF goto %0001de38
00044c18: goto %000149bb

.address 0x40FADD
000149bb: 
.address 0x40FADD
000149cb: RBP := pad:64[low:32[RDI]]
.address 0x40FADF
000149d2: R12 := 0x417C4A
.address 0x40FAE6
000149db: RSP := RSP - 8
.address 0x40FAE6
000149de: mem := mem with [RSP, el]:u64 <- 0x40FAEB
.address 0x40FAE6
000149e1: call @sub_4039b0 with return %000149e3

.address 0x40FAEB
000149e3: 
.address 0x40FAEB
000149ee: #2695 := RAX
.address 0x40FAEB
000149f1: OF := 0
.address 0x40FAEB
000149f4: CF := 0
.address 0x40FAEB
000149f7: AF := unknown[bits]:u1
.address 0x40FAEB
000149fa: PF := ~low:1[let $1 = #2695 >> 4 ^ #2695 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FAEB
000149fd: SF := high:1[#2695]
.address 0x40FAEB
00014a00: ZF := 0 = #2695
.address 0x40FAEE
00014a07: RDI := 0x18
.address 0x40FAF3
00014a11: when ZF goto %00014a0b
00044c19: goto %0001dda1

.address 0x40FAF5
0001dda1: 
.address 0x40FAF5
0001dda6: R12 := mem[RAX, el]:u64
.address 0x40FAF8
0001ddad: RDI := R12
.address 0x40FAFB
0001ddb6: RSP := RSP - 8
.address 0x40FAFB
0001ddb9: mem := mem with [RSP, el]:u64 <- 0x40FB00
.address 0x40FAFB
0001ddbc: call @sub_403950 with return %0001ddbe

.address 0x40FB00
0001ddbe: 
.address 0x40FB00
0001ddc3: RDI := low:64[RAX + 0x18]
.address 0x40FB04
0001ddd0: RDI := RDI & 0xFFFFFFFFFFFFFFF8
.address 0x40FB04
0001ddd3: OF := 0
.address 0x40FB04
0001ddd6: CF := 0
.address 0x40FB04
0001ddd9: AF := unknown[bits]:u1
.address 0x40FB04
0001dddc: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FB04
0001dddf: SF := high:1[RDI]
.address 0x40FB04
0001dde2: ZF := 0 = RDI
00044c1a: goto %00014a0b

.address 0x40FB08
00014a0b: 
.address 0x40FB08
00014a1d: RSP := RSP - 8
.address 0x40FB08
00014a20: mem := mem with [RSP, el]:u64 <- 0x40FB0D
.address 0x40FB08
00014a23: call @sub_414480 with return %00014a25

.address 0x40FB0D
00014a25: 
.address 0x40FB0D
00014a2a: RDI := low:64[RAX + 0x10]
.address 0x40FB11
00014a31: mem := mem with [RAX, el]:u32 <- low:32[RBP]
.address 0x40FB13
00014a38: RSI := R12
.address 0x40FB16
00014a3f: RBX := RAX
.address 0x40FB19
00014a48: RSP := RSP - 8
.address 0x40FB19
00014a4b: mem := mem with [RSP, el]:u64 <- 0x40FB1E
.address 0x40FB19
00014a4e: call @sub_403830 with return %00014a50

.address 0x40FB1E
00014a50: 
.address 0x40FB1E
00014a55: RAX := mem[0x6213E8, el]:u64
.address 0x40FB25
00014a5c: mem := mem with [0x6213E8, el]:u64 <- RBX
.address 0x40FB2C
00014a63: mem := mem with [RBX + 8, el]:u64 <- RAX
00044c1b: goto %00014a65

.address 0x40FAD0
0001de38: 
.address 0x40FAD0
0001de4e: #4165 := mem[RBX, el]:u32 - low:32[RDI]
.address 0x40FAD0
0001de51: CF := mem[RBX, el]:u32 < low:32[RDI]
.address 0x40FAD0
0001de54: OF := high:1[(mem[RBX, el]:u32 ^ low:32[RDI]) & (mem[RBX, el]:u32 ^ #4165)]
.address 0x40FAD0
0001de57: AF := 0x10 = (0x10 & (#4165 ^ mem[RBX, el]:u32 ^ low:32[RDI]))
.address 0x40FAD0
0001de5a: PF := ~low:1[let $1 = #4165 >> 4 ^ #4165 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FAD0
0001de5d: SF := high:1[#4165]
.address 0x40FAD0
0001de60: ZF := 0 = #4165
.address 0x40FAD2
0001de69: when ZF goto %00014a65
00044c1c: goto %0001de05

.address 0x40FAC4
0001de6f: 
.address 0x40FAC4
0001de74: goto %00014a65

.address 0x40FB30
00014a65: 
.address 0x40FB30
00014a70: #2697 := mem[RBX + 0x10]
.address 0x40FB30
00014a73: CF := mem[RBX + 0x10] < 0
.address 0x40FB30
00014a76: OF := high:1[mem[RBX + 0x10] & (mem[RBX + 0x10] ^ #2697)]
.address 0x40FB30
00014a79: AF := 0x10 = (0x10 & (#2697 ^ mem[RBX + 0x10]))
.address 0x40FB30
00014a7c: PF := ~low:1[let $1 = #2697 >> 4 ^ #2697 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FB30
00014a7f: SF := high:1[#2697]
.address 0x40FB30
00014a82: ZF := 0 = #2697
.address 0x40FB34
00014a8c: when ZF goto %00014a86
00044c1d: goto %0001dd9a

.address 0x40FB40
00014a86: 
.address 0x40FB40
00014a9c: RAX := 0
.address 0x40FB40
00014a9f: AF := unknown[bits]:u1
.address 0x40FB40
00014aa2: ZF := 1
.address 0x40FB40
00014aa5: PF := 1
.address 0x40FB40
00014aa8: OF := 0
.address 0x40FB40
00014aab: CF := 0
.address 0x40FB40
00014aae: SF := 0
.address 0x40FB42
00014ab6: goto %00014ab2

.address 0x40FB36
0001dd9a: 
.address 0x40FB36
0001dd9f: RAX := low:64[RBX + 0x10]
00044c1e: goto %00014ab2

.address 0x40FB3A
00014ab2: 
.address 0x40FB3A
00014abd: RBX := mem[RSP, el]:u64
.address 0x40FB3A
00014ac0: RSP := RSP + 8
.address 0x40FB3B
00014ac8: RBP := mem[RSP, el]:u64
.address 0x40FB3B
00014acb: RSP := RSP + 8
.address 0x40FB3C
00014ad3: R12 := mem[RSP, el]:u64
.address 0x40FB3C
00014ad6: RSP := RSP + 8
.address 0x40FB3E
00014adf: #2699 := mem[RSP, el]:u64
.address 0x40FB3E
00014ae2: RSP := RSP + 8
.address 0x40FB3E
00014ae6: call #2699 with noreturn


.address 0x40FC50
000443d2: sub sub_40fc50()
.address 0x40FC50
00014cb5: 
.address 0x40FC50
00014cc0: #2711 := RDI
.address 0x40FC50
00014cc3: OF := 0
.address 0x40FC50
00014cc6: CF := 0
.address 0x40FC50
00014cc9: AF := unknown[bits]:u1
.address 0x40FC50
00014ccc: PF := ~low:1[let $1 = #2711 >> 4 ^ #2711 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FC50
00014ccf: SF := high:1[#2711]
.address 0x40FC50
00014cd2: ZF := 0 = #2711
00044c1f: call @sub_40fc53 with noreturn


.address 0x40FC53
000443d4: sub sub_40fc53()
.address 0x40FC53
00014cd4: 
.address 0x40FC53
00014cd9: RCX := low:64[RSI + 0x14]
.address 0x40FC57
00014ce0: mem := mem with [RSI + 0x14] <- 0
.address 0x40FC5B
00014ce7: R9 := 0x6666666666666667
.address 0x40FC65
00014cee: RSI := 0xCCCCCCCCCCCCCCCD
.address 0x40FC6F
00014cf5: R8 := 0x30
.address 0x40FC75
00014cff: when SF goto %00014cf9
00044c20: goto %0001da61

.address 0x40FCB3
00014cf9: 
.address 0x40FCB3
00014d09: RAX := RDI
.address 0x40FCB6
00014d10: RSI := low:64[RCX - 1]
.address 0x40FCBA
00014d1f: #2713 := extend:128[RAX] * extend:128[R9]
.address 0x40FCBA
00014d22: RAX := extract:63:0[#2713]
.address 0x40FCBA
00014d25: RDX := extract:127:64[#2713]
.address 0x40FCBA
00014d28: OF := extract:127:64[#2713] <> 0
.address 0x40FCBA
00014d2b: CF := extract:127:64[#2713] <> 0
.address 0x40FCBA
00014d2e: PF := unknown[bits]:u1
.address 0x40FCBA
00014d31: SF := unknown[bits]:u1
.address 0x40FCBA
00014d34: ZF := unknown[bits]:u1
.address 0x40FCBA
00014d37: AF := unknown[bits]:u1
.address 0x40FCBD
00014d3e: RAX := RDI
.address 0x40FCC0
00014d4c: #2714 := RAX
.address 0x40FCC0
00014d4f: RAX := RAX ~>> 0x3F
.address 0x40FCC0
00014d52: CF := high:1[#2714 << 1]
.address 0x40FCC0
00014d55: SF := high:1[RAX]
.address 0x40FCC0
00014d58: ZF := 0 = RAX
.address 0x40FCC0
00014d5b: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FCC0
00014d5e: AF := unknown[bits]:u1
.address 0x40FCC0
00014d61: OF := unknown[bits]:u1
.address 0x40FCC4
00014d6f: #2716 := RDX
.address 0x40FCC4
00014d72: RDX := RDX ~>> 2
.address 0x40FCC4
00014d75: CF := high:1[#2716 << 0x3E]
.address 0x40FCC4
00014d78: SF := high:1[RDX]
.address 0x40FCC4
00014d7b: ZF := 0 = RDX
.address 0x40FCC4
00014d7e: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FCC4
00014d81: AF := unknown[bits]:u1
.address 0x40FCC4
00014d84: OF := unknown[bits]:u1
.address 0x40FCC8
00014d93: #2718 := RDX
.address 0x40FCC8
00014d96: #2719 := RAX
.address 0x40FCC8
00014d99: RDX := RDX - RAX
.address 0x40FCC8
00014d9c: CF := #2718 < #2719
.address 0x40FCC8
00014d9f: OF := high:1[(#2718 ^ #2719) & (#2718 ^ RDX)]
.address 0x40FCC8
00014da2: AF := 0x10 = (0x10 & (RDX ^ #2718 ^ #2719))
.address 0x40FCC8
00014da5: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FCC8
00014da8: SF := high:1[RDX]
.address 0x40FCC8
00014dab: ZF := 0 = RDX
.address 0x40FCCB
00014db2: RAX := low:64[RDX + (RDX << 2)]
.address 0x40FCCF
00014db9: RAX := pad:64[low:32[R8 + (RAX << 1)]]
.address 0x40FCD3
00014dc8: #2721 := low:32[RAX]
.address 0x40FCD3
00014dcb: #2722 := low:32[RDI]
.address 0x40FCD3
00014dce: RAX := pad:64[low:32[RAX] - low:32[RDI]]
.address 0x40FCD3
00014dd1: CF := #2721 < #2722
.address 0x40FCD3
00014dd4: OF := high:1[(#2721 ^ #2722) & (#2721 ^ low:32[RAX])]
.address 0x40FCD3
00014dd7: AF := 0x10 = (0x10 & (low:32[RAX] ^ #2721 ^ #2722))
.address 0x40FCD3
00014dda: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FCD3
00014ddd: SF := high:1[low:32[RAX]]
.address 0x40FCD3
00014de0: ZF := 0 = low:32[RAX]
.address 0x40FCD5
00014ded: #2724 := RDX
.address 0x40FCD5
00014df0: OF := 0
.address 0x40FCD5
00014df3: CF := 0
.address 0x40FCD5
00014df6: AF := unknown[bits]:u1
.address 0x40FCD5
00014df9: PF := ~low:1[let $1 = #2724 >> 4 ^ #2724 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FCD5
00014dfc: SF := high:1[#2724]
.address 0x40FCD5
00014dff: ZF := 0 = #2724
.address 0x40FCD8
00014e06: RDI := RDX
.address 0x40FCDB
00014e0d: mem := mem with [RCX - 1] <- low:8[RAX]
.address 0x40FCDE
00014e17: when ~ZF goto %00014e11
00044c21: goto %00014e23

.address 0x40FCE0
00014e23: 
.address 0x40FCE0
00014e2f: #2726 := RCX
.address 0x40FCE0
00014e32: RCX := RCX - 2
.address 0x40FCE0
00014e35: CF := #2726 < 2
.address 0x40FCE0
00014e38: OF := high:1[(#2726 ^ 2) & (#2726 ^ RCX)]
.address 0x40FCE0
00014e3b: AF := 0x10 = (0x10 & (RCX ^ #2726 ^ 2))
.address 0x40FCE0
00014e3e: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FCE0
00014e41: SF := high:1[RCX]
.address 0x40FCE0
00014e44: ZF := 0 = RCX
.address 0x40FCE4
00014e4b: mem := mem with [RSI - 1] <- 0x2D
.address 0x40FCE8
00014e52: RAX := RCX
.address 0x40FCEB
00014e5b: #2729 := mem[RSP, el]:u64
.address 0x40FCEB
00014e5e: RSP := RSP + 8
.address 0x40FCEB
00014e62: call #2729 with noreturn

.address 0x40FCB0
00014e11: 
.address 0x40FCB0
00014e21: RCX := RSI
00044c22: goto %00014cf9

.address 0x40FC77
0001da61: 
00044c23: goto %0001da64

.address 0x40FC80
0001da64: 
.address 0x40FC80
0001da69: RAX := RDI
.address 0x40FC83
0001da77: #4129 := RCX
.address 0x40FC83
0001da7a: RCX := RCX - 1
.address 0x40FC83
0001da7d: CF := #4129 < 1
.address 0x40FC83
0001da80: OF := high:1[(#4129 ^ 1) & (#4129 ^ RCX)]
.address 0x40FC83
0001da83: AF := 0x10 = (0x10 & (RCX ^ #4129 ^ 1))
.address 0x40FC83
0001da86: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FC83
0001da89: SF := high:1[RCX]
.address 0x40FC83
0001da8c: ZF := 0 = RCX
.address 0x40FC87
0001da9b: #4132 := pad:128[RAX] * pad:128[RSI]
.address 0x40FC87
0001da9e: RAX := extract:63:0[#4132]
.address 0x40FC87
0001daa1: RDX := extract:127:64[#4132]
.address 0x40FC87
0001daa4: OF := extract:127:64[#4132] <> 0
.address 0x40FC87
0001daa7: CF := extract:127:64[#4132] <> 0
.address 0x40FC87
0001daaa: SF := unknown[bits]:u1
.address 0x40FC87
0001daad: ZF := unknown[bits]:u1
.address 0x40FC87
0001dab0: AF := unknown[bits]:u1
.address 0x40FC87
0001dab3: PF := unknown[bits]:u1
.address 0x40FC8A
0001dac1: #4133 := RDX
.address 0x40FC8A
0001dac4: RDX := RDX >> 3
.address 0x40FC8A
0001dac7: CF := high:1[#4133 << 0x3D]
.address 0x40FC8A
0001daca: SF := high:1[RDX]
.address 0x40FC8A
0001dacd: ZF := 0 = RDX
.address 0x40FC8A
0001dad0: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FC8A
0001dad3: AF := unknown[bits]:u1
.address 0x40FC8A
0001dad6: OF := unknown[bits]:u1
.address 0x40FC8E
0001dadd: RAX := low:64[RDX + (RDX << 2)]
.address 0x40FC92
0001daec: #4135 := RAX
.address 0x40FC92
0001daef: #4136 := RAX
.address 0x40FC92
0001daf2: RAX := RAX + #4136
.address 0x40FC92
0001daf5: CF := RAX < #4135
.address 0x40FC92
0001daf8: OF := high:1[#4135] = high:1[#4136] & (high:1[#4135] | high:1[RAX]) & ~(
high:1[#4135] & high:1[RAX])
.address 0x40FC92
0001dafb: AF := 0x10 = (0x10 & (RAX ^ #4135 ^ #4136))
.address 0x40FC92
0001dafe: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FC92
0001db01: SF := high:1[RAX]
.address 0x40FC92
0001db04: ZF := 0 = RAX
.address 0x40FC95
0001db13: #4138 := RDI
.address 0x40FC95
0001db16: #4139 := RAX
.address 0x40FC95
0001db19: RDI := RDI - RAX
.address 0x40FC95
0001db1c: CF := #4138 < #4139
.address 0x40FC95
0001db1f: OF := high:1[(#4138 ^ #4139) & (#4138 ^ RDI)]
.address 0x40FC95
0001db22: AF := 0x10 = (0x10 & (RDI ^ #4138 ^ #4139))
.address 0x40FC95
0001db25: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FC95
0001db28: SF := high:1[RDI]
.address 0x40FC95
0001db2b: ZF := 0 = RDI
.address 0x40FC98
0001db39: #4141 := low:32[RDI]
.address 0x40FC98
0001db3c: RDI := pad:64[low:32[RDI] + 0x30]
.address 0x40FC98
0001db3f: CF := low:32[RDI] < #4141
.address 0x40FC98
0001db42: OF := ~high:1[#4141] & (high:1[#4141] | high:1[low:32[RDI]]) & ~(
high:1[#4141] & high:1[low:32[RDI]])
.address 0x40FC98
0001db45: AF := 0x10 = (0x10 & (low:32[RDI] ^ #4141 ^ 0x30))
.address 0x40FC98
0001db48: PF := ~low:1[let $1 = low:32[RDI] >> 4 ^ low:32[RDI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FC98
0001db4b: SF := high:1[low:32[RDI]]
.address 0x40FC98
0001db4e: ZF := 0 = low:32[RDI]
.address 0x40FC9B
0001db5b: #4144 := RDX
.address 0x40FC9B
0001db5e: OF := 0
.address 0x40FC9B
0001db61: CF := 0
.address 0x40FC9B
0001db64: AF := unknown[bits]:u1
.address 0x40FC9B
0001db67: PF := ~low:1[let $1 = #4144 >> 4 ^ #4144 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FC9B
0001db6a: SF := high:1[#4144]
.address 0x40FC9B
0001db6d: ZF := 0 = #4144
.address 0x40FC9E
0001db74: mem := mem with [RCX] <- low:8[RDI]
.address 0x40FCA1
0001db7b: RDI := RDX
.address 0x40FCA4
0001db84: when ~ZF goto %0001da64
00044c24: goto %0001db8a

.address 0x40FCA6
0001db8a: 
.address 0x40FCA6
0001db8f: RAX := RCX
.address 0x40FCA9
0001db98: #4146 := mem[RSP, el]:u64
.address 0x40FCA9
0001db9b: RSP := RSP + 8
.address 0x40FCA9
0001db9f: call #4146 with noreturn


.address 0x40FCF0
000443da: sub sub_40fcf0()
.address 0x40FCF0
00014e67: 
.address 0x40FCF0
00014e6c: RCX := low:64[RSI + 0x14]
.address 0x40FCF4
00014e73: mem := mem with [RSI + 0x14] <- 0
.address 0x40FCF8
00014e7a: RSI := 0xCCCCCCCCCCCCCCCD
00044c25: goto %00014e7f

.address 0x40FD08
00014e7f: 
.address 0x40FD08
00014e84: RAX := RDI
.address 0x40FD0B
00014e92: #2730 := RCX
.address 0x40FD0B
00014e95: RCX := RCX - 1
.address 0x40FD0B
00014e98: CF := #2730 < 1
.address 0x40FD0B
00014e9b: OF := high:1[(#2730 ^ 1) & (#2730 ^ RCX)]
.address 0x40FD0B
00014e9e: AF := 0x10 = (0x10 & (RCX ^ #2730 ^ 1))
.address 0x40FD0B
00014ea1: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FD0B
00014ea4: SF := high:1[RCX]
.address 0x40FD0B
00014ea7: ZF := 0 = RCX
.address 0x40FD0F
00014eb6: #2733 := pad:128[RAX] * pad:128[RSI]
.address 0x40FD0F
00014eb9: RAX := extract:63:0[#2733]
.address 0x40FD0F
00014ebc: RDX := extract:127:64[#2733]
.address 0x40FD0F
00014ebf: OF := extract:127:64[#2733] <> 0
.address 0x40FD0F
00014ec2: CF := extract:127:64[#2733] <> 0
.address 0x40FD0F
00014ec5: SF := unknown[bits]:u1
.address 0x40FD0F
00014ec8: ZF := unknown[bits]:u1
.address 0x40FD0F
00014ecb: AF := unknown[bits]:u1
.address 0x40FD0F
00014ece: PF := unknown[bits]:u1
.address 0x40FD12
00014edc: #2734 := RDX
.address 0x40FD12
00014edf: RDX := RDX >> 3
.address 0x40FD12
00014ee2: CF := high:1[#2734 << 0x3D]
.address 0x40FD12
00014ee5: SF := high:1[RDX]
.address 0x40FD12
00014ee8: ZF := 0 = RDX
.address 0x40FD12
00014eeb: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FD12
00014eee: AF := unknown[bits]:u1
.address 0x40FD12
00014ef1: OF := unknown[bits]:u1
.address 0x40FD16
00014ef8: RAX := low:64[RDX + (RDX << 2)]
.address 0x40FD1A
00014f07: #2736 := RAX
.address 0x40FD1A
00014f0a: #2737 := RAX
.address 0x40FD1A
00014f0d: RAX := RAX + #2737
.address 0x40FD1A
00014f10: CF := RAX < #2736
.address 0x40FD1A
00014f13: OF := high:1[#2736] = high:1[#2737] & (high:1[#2736] | high:1[RAX]) & ~(
high:1[#2736] & high:1[RAX])
.address 0x40FD1A
00014f16: AF := 0x10 = (0x10 & (RAX ^ #2736 ^ #2737))
.address 0x40FD1A
00014f19: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FD1A
00014f1c: SF := high:1[RAX]
.address 0x40FD1A
00014f1f: ZF := 0 = RAX
.address 0x40FD1D
00014f2e: #2739 := RDI
.address 0x40FD1D
00014f31: #2740 := RAX
.address 0x40FD1D
00014f34: RDI := RDI - RAX
.address 0x40FD1D
00014f37: CF := #2739 < #2740
.address 0x40FD1D
00014f3a: OF := high:1[(#2739 ^ #2740) & (#2739 ^ RDI)]
.address 0x40FD1D
00014f3d: AF := 0x10 = (0x10 & (RDI ^ #2739 ^ #2740))
.address 0x40FD1D
00014f40: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FD1D
00014f43: SF := high:1[RDI]
.address 0x40FD1D
00014f46: ZF := 0 = RDI
.address 0x40FD20
00014f54: #2742 := low:32[RDI]
.address 0x40FD20
00014f57: RDI := pad:64[low:32[RDI] + 0x30]
.address 0x40FD20
00014f5a: CF := low:32[RDI] < #2742
.address 0x40FD20
00014f5d: OF := ~high:1[#2742] & (high:1[#2742] | high:1[low:32[RDI]]) & ~(
high:1[#2742] & high:1[low:32[RDI]])
.address 0x40FD20
00014f60: AF := 0x10 = (0x10 & (low:32[RDI] ^ #2742 ^ 0x30))
.address 0x40FD20
00014f63: PF := ~low:1[let $1 = low:32[RDI] >> 4 ^ low:32[RDI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FD20
00014f66: SF := high:1[low:32[RDI]]
.address 0x40FD20
00014f69: ZF := 0 = low:32[RDI]
.address 0x40FD23
00014f76: #2745 := RDX
.address 0x40FD23
00014f79: OF := 0
.address 0x40FD23
00014f7c: CF := 0
.address 0x40FD23
00014f7f: AF := unknown[bits]:u1
.address 0x40FD23
00014f82: PF := ~low:1[let $1 = #2745 >> 4 ^ #2745 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FD23
00014f85: SF := high:1[#2745]
.address 0x40FD23
00014f88: ZF := 0 = #2745
.address 0x40FD26
00014f8f: mem := mem with [RCX] <- low:8[RDI]
.address 0x40FD29
00014f96: RDI := RDX
.address 0x40FD2C
00014f9f: when ~ZF goto %00014e7f
00044c26: goto %00014fa5

.address 0x40FD2E
00014fa5: 
.address 0x40FD2E
00014faa: RAX := RCX
.address 0x40FD31
00014fb3: #2747 := mem[RSP, el]:u64
.address 0x40FD31
00014fb6: RSP := RSP + 8
.address 0x40FD31
00014fba: call #2747 with noreturn


.address 0x40FD40
000443dd: sub sub_40fd40()
.address 0x40FD40
00014fc2: 
.address 0x40FD40
00014fc9: #2748 := R15
.address 0x40FD40
00014fcc: RSP := RSP - 8
.address 0x40FD40
00014fcf: mem := mem with [RSP, el]:u64 <- #2748
.address 0x40FD42
00014fd8: #2749 := R14
.address 0x40FD42
00014fdb: RSP := RSP - 8
.address 0x40FD42
00014fde: mem := mem with [RSP, el]:u64 <- #2749
.address 0x40FD44
00014fe5: R14 := RDI
.address 0x40FD47
00014fee: #2750 := R13
.address 0x40FD47
00014ff1: RSP := RSP - 8
.address 0x40FD47
00014ff4: mem := mem with [RSP, el]:u64 <- #2750
.address 0x40FD49
00014ffd: #2751 := R12
.address 0x40FD49
00015000: RSP := RSP - 8
.address 0x40FD49
00015003: mem := mem with [RSP, el]:u64 <- #2751
.address 0x40FD4B
0001500a: R13 := RSI
.address 0x40FD4E
00015013: #2752 := RBP
.address 0x40FD4E
00015016: RSP := RSP - 8
.address 0x40FD4E
00015019: mem := mem with [RSP, el]:u64 <- #2752
.address 0x40FD4F
00015022: #2753 := RBX
.address 0x40FD4F
00015025: RSP := RSP - 8
.address 0x40FD4F
00015028: mem := mem with [RSP, el]:u64 <- #2753
.address 0x40FD50
0001502f: RBX := pad:64[low:32[R9]]
.address 0x40FD53
00015036: R12 := RCX
.address 0x40FD56
00015044: #2754 := RSP
.address 0x40FD56
00015047: RSP := RSP - 0x38
.address 0x40FD56
0001504a: CF := #2754 < 0x38
.address 0x40FD56
0001504d: OF := high:1[(#2754 ^ 0x38) & (#2754 ^ RSP)]
.address 0x40FD56
00015050: AF := 0x10 = (0x10 & (RSP ^ #2754 ^ 0x38))
.address 0x40FD56
00015053: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FD56
00015056: SF := high:1[RSP]
.address 0x40FD56
00015059: ZF := 0 = RSP
.address 0x40FD5A
00015060: mem := mem with [RSP + 0x10, el]:u64 <- RDX
.address 0x40FD5F
00015067: mem := mem with [RSP + 0x1C, el]:u32 <- low:32[R8]
.address 0x40FD64
00015070: RSP := RSP - 8
.address 0x40FD64
00015073: mem := mem with [RSP, el]:u64 <- 0x40FD69
.address 0x40FD64
00015076: call @sub_403950 with return %00015078

.address 0x40FD69
00015078: 
.address 0x40FD69
00015083: #2757 := low:8[RBX] & 2
.address 0x40FD69
00015086: OF := 0
.address 0x40FD69
00015089: CF := 0
.address 0x40FD69
0001508c: AF := unknown[bits]:u1
.address 0x40FD69
0001508f: PF := ~low:1[let $1 = #2757 >> 4 ^ #2757 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FD69
00015092: SF := high:1[#2757]
.address 0x40FD69
00015095: ZF := 0 = #2757
.address 0x40FD6C
0001509c: R15 := RAX
.address 0x40FD6F
000150a3: mem := mem with [RSP + 8, el]:u64 <- RAX
.address 0x40FD74
000150ad: when ZF goto %000150a7
00044c27: goto %000150e2

.address 0x40FEE0
000150a7: 
.address 0x40FEE0
000150b9: RSP := RSP - 8
.address 0x40FEE0
000150bc: mem := mem with [RSP, el]:u64 <- 0x40FEE5
.address 0x40FEE0
000150bf: call @sub_403940 with return %000150c1

.address 0x40FEE5
000150c1: 
.address 0x40FEE5
000150cc: #2759 := RAX - 1
.address 0x40FEE5
000150cf: CF := RAX < 1
.address 0x40FEE5
000150d2: OF := high:1[(RAX ^ 1) & (RAX ^ #2759)]
.address 0x40FEE5
000150d5: AF := 0x10 = (0x10 & (#2759 ^ RAX ^ 1))
.address 0x40FEE5
000150d8: PF := ~low:1[let $1 = #2759 >> 4 ^ #2759 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FEE5
000150db: SF := high:1[#2759]
.address 0x40FEE5
000150de: ZF := 0 = #2759
.address 0x40FEE9
000150e8: when CF | ZF goto %000150e2
00044c28: goto %0001d3cf

.address 0x40FEEF
0001d3cf: 
.address 0x40FEEF
0001d3da: RDX := 0
.address 0x40FEEF
0001d3dd: AF := unknown[bits]:u1
.address 0x40FEEF
0001d3e0: ZF := 1
.address 0x40FEEF
0001d3e3: PF := 1
.address 0x40FEEF
0001d3e6: OF := 0
.address 0x40FEEF
0001d3e9: CF := 0
.address 0x40FEEF
0001d3ec: SF := 0
.address 0x40FEF1
0001d3f9: RDI := 0
.address 0x40FEF1
0001d3fc: AF := unknown[bits]:u1
.address 0x40FEF1
0001d3ff: ZF := 1
.address 0x40FEF1
0001d402: PF := 1
.address 0x40FEF1
0001d405: OF := 0
.address 0x40FEF1
0001d408: CF := 0
.address 0x40FEF1
0001d40b: SF := 0
.address 0x40FEF3
0001d412: RSI := R14
.address 0x40FEF6
0001d41b: RSP := RSP - 8
.address 0x40FEF6
0001d41e: mem := mem with [RSP, el]:u64 <- 0x40FEFB
.address 0x40FEF6
0001d421: call @sub_4038a0 with return %0001d423

.address 0x40FEFB
0001d423: 
.address 0x40FEFB
0001d42e: #4082 := RAX - 0xFFFFFFFFFFFFFFFF
.address 0x40FEFB
0001d431: CF := RAX < 0xFFFFFFFFFFFFFFFF
.address 0x40FEFB
0001d434: OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ #4082)]
.address 0x40FEFB
0001d437: AF := 0x10 = (0x10 & (#4082 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
.address 0x40FEFB
0001d43a: PF := ~low:1[let $1 = #4082 >> 4 ^ #4082 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FEFB
0001d43d: SF := high:1[#4082]
.address 0x40FEFB
0001d440: ZF := 0 = #4082
.address 0x40FEFF
0001d44a: when ~ZF goto %0001d444
00044c29: goto %0001da35

.address 0x40FF30
0001d444: 
.address 0x40FF30
0001d454: RBP := low:64[RAX + 1]
.address 0x40FF34
0001d45b: RAX := low:64[RBP << 2]
.address 0x40FF3C
0001d462: RDI := RAX
.address 0x40FF3F
0001d469: mem := mem with [RSP + 0x20, el]:u64 <- RAX
.address 0x40FF44
0001d472: RSP := RSP - 8
.address 0x40FF44
0001d475: mem := mem with [RSP, el]:u64 <- 0x40FF49
.address 0x40FF44
0001d478: call @sub_403e78 with return %0001d47a

.address 0x40FF49
0001d47a: 
.address 0x40FF49
0001d485: #4084 := RAX
.address 0x40FF49
0001d488: OF := 0
.address 0x40FF49
0001d48b: CF := 0
.address 0x40FF49
0001d48e: AF := unknown[bits]:u1
.address 0x40FF49
0001d491: PF := ~low:1[let $1 = #4084 >> 4 ^ #4084 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FF49
0001d494: SF := high:1[#4084]
.address 0x40FF49
0001d497: ZF := 0 = #4084
.address 0x40FF4C
0001d49e: mem := mem with [RSP, el]:u64 <- RAX
.address 0x40FF50
0001d4a8: when ZF goto %0001d4a2
00044c2a: goto %0001d811

.address 0x4100D5
0001d4a2: 
.address 0x4100D5
0001d4b8: #4086 := low:8[RBX] & 1
.address 0x4100D5
0001d4bb: OF := 0
.address 0x4100D5
0001d4be: CF := 0
.address 0x4100D5
0001d4c1: AF := unknown[bits]:u1
.address 0x4100D5
0001d4c4: PF := ~low:1[let $1 = #4086 >> 4 ^ #4086 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4100D5
0001d4c7: SF := high:1[#4086]
.address 0x4100D5
0001d4ca: ZF := 0 = #4086
.address 0x4100D8
0001d4d1: RBP := R15
.address 0x4100DB
0001d4d8: mem := mem with [RSP + 8, el]:u64 <- 0
.address 0x4100E4
0001d4e1: when ~ZF goto %00015102
00044c2b: goto %0001d4e7

.address 0x4100EA
0001d4e7: 
.address 0x4100EA
0001d4ed: goto %0001d4e9

.address 0x40FF56
0001d811: 
.address 0x40FF56
0001d816: RDI := mem[RSP, el]:u64
.address 0x40FF5A
0001d81d: RDX := RBP
.address 0x40FF5D
0001d824: RSI := R14
.address 0x40FF60
0001d82d: RSP := RSP - 8
.address 0x40FF60
0001d830: mem := mem with [RSP, el]:u64 <- 0x40FF65
.address 0x40FF60
0001d833: call @sub_4038a0 with return %0001d835

.address 0x40FF65
0001d835: 
.address 0x40FF65
0001d840: #4111 := RAX
.address 0x40FF65
0001d843: OF := 0
.address 0x40FF65
0001d846: CF := 0
.address 0x40FF65
0001d849: AF := unknown[bits]:u1
.address 0x40FF65
0001d84c: PF := ~low:1[let $1 = #4111 >> 4 ^ #4111 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FF65
0001d84f: SF := high:1[#4111]
.address 0x40FF65
0001d852: ZF := 0 = #4111
.address 0x40FF68
0001d85b: when ZF goto %0001d57a
00044c2c: goto %0001d861

.address 0x410074
0001d57a: 
.address 0x410074
0001d57f: RBP := R15
.address 0x410077
0001d586: mem := mem with [RSP + 8, el]:u64 <- 0
.address 0x410080
0001d58d: goto %00015102

.address 0x40FF6E
0001d861: 
.address 0x40FF6E
0001d866: RAX := mem[RSP, el]:u64
.address 0x40FF72
0001d86d: RCX := mem[RSP + 0x20, el]:u64
.address 0x40FF77
0001d874: mem := mem with [RAX + RCX - 4, el]:u32 <- 0
.address 0x40FF7F
0001d87b: RDI := pad:64[mem[RAX, el]:u32]
.address 0x40FF81
0001d882: RDX := RAX
.address 0x40FF84
0001d88f: #4113 := low:32[RDI]
.address 0x40FF84
0001d892: OF := 0
.address 0x40FF84
0001d895: CF := 0
.address 0x40FF84
0001d898: AF := unknown[bits]:u1
.address 0x40FF84
0001d89b: PF := ~low:1[let $1 = #4113 >> 4 ^ #4113 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FF84
0001d89e: SF := high:1[#4113]
.address 0x40FF84
0001d8a1: ZF := 0 = #4113
.address 0x40FF86
0001d8aa: when ZF goto %0001d58f
00044c2d: goto %0001d8b0

.address 0x410085
0001d58f: 
.address 0x410085
0001d594: RDI := mem[RSP, el]:u64
.address 0x410089
0001d59b: RSI := RBP
.address 0x41008C
0001d5a4: RSP := RSP - 8
.address 0x41008C
0001d5a7: mem := mem with [RSP, el]:u64 <- 0x410091
.address 0x41008C
0001d5aa: call @sub_403880 with return %0001d5ac

.address 0x410091
0001d5ac: 
.address 0x410091
0001d5b1: RBP := extend:64[low:32[RAX]]
00044c2e: goto %0001d5b6

.address 0x40FF8C
0001d8b0: 
.address 0x40FF8C
0001d8b5: mem := mem with [RSP + 0x20] <- 0
00044c2f: goto %0001d8ba

.address 0x40FF98
0001d8ba: 
.address 0x40FF98
0001d8bf: mem := mem with [RSP + 0x28, el]:u64 <- RDX
.address 0x40FF9D
0001d8c8: RSP := RSP - 8
.address 0x40FF9D
0001d8cb: mem := mem with [RSP, el]:u64 <- 0x40FFA2
.address 0x40FF9D
0001d8ce: call @sub_403e20 with return %0001d8d0

.address 0x40FFA2
0001d8d0: 
.address 0x40FFA2
0001d8db: #4115 := low:32[RAX]
.address 0x40FFA2
0001d8de: OF := 0
.address 0x40FFA2
0001d8e1: CF := 0
.address 0x40FFA2
0001d8e4: AF := unknown[bits]:u1
.address 0x40FFA2
0001d8e7: PF := ~low:1[let $1 = #4115 >> 4 ^ #4115 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FFA2
0001d8ea: SF := high:1[#4115]
.address 0x40FFA2
0001d8ed: ZF := 0 = #4115
.address 0x40FFA4
0001d8f4: RDX := mem[RSP + 0x28, el]:u64
.address 0x40FFA9
0001d8fe: when ~ZF goto %0001d8f8
00044c30: goto %0001da27

.address 0x40FFAB
0001da27: 
.address 0x40FFAB
0001da2c: mem := mem with [RDX, el]:u32 <- 0xFFFD
.address 0x40FFB1
0001da33: mem := mem with [RSP + 0x20] <- 1
00044c31: goto %0001d8f8

.address 0x40FFB6
0001d8f8: 
.address 0x40FFB6
0001d90f: #4117 := RDX
.address 0x40FFB6
0001d912: RDX := RDX + 4
.address 0x40FFB6
0001d915: CF := RDX < #4117
.address 0x40FFB6
0001d918: OF := ~high:1[#4117] & (high:1[#4117] | high:1[RDX]) & ~(high:1[#4117] & high:1[RDX])
.address 0x40FFB6
0001d91b: AF := 0x10 = (0x10 & (RDX ^ #4117 ^ 4))
.address 0x40FFB6
0001d91e: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FFB6
0001d921: SF := high:1[RDX]
.address 0x40FFB6
0001d924: ZF := 0 = RDX
.address 0x40FFBA
0001d92b: RDI := pad:64[mem[RDX, el]:u32]
.address 0x40FFBC
0001d938: #4120 := low:32[RDI]
.address 0x40FFBC
0001d93b: OF := 0
.address 0x40FFBC
0001d93e: CF := 0
.address 0x40FFBC
0001d941: AF := unknown[bits]:u1
.address 0x40FFBC
0001d944: PF := ~low:1[let $1 = #4120 >> 4 ^ #4120 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FFBC
0001d947: SF := high:1[#4120]
.address 0x40FFBC
0001d94a: ZF := 0 = #4120
.address 0x40FFBE
0001d953: when ~ZF goto %0001d8ba
00044c32: goto %0001d959

.address 0x40FFC0
0001d959: 
.address 0x40FFC0
0001d95e: RDI := mem[RSP, el]:u64
.address 0x40FFC4
0001d965: RSI := RBP
.address 0x40FFC7
0001d96e: RSP := RSP - 8
.address 0x40FFC7
0001d971: mem := mem with [RSP, el]:u64 <- 0x40FFCC
.address 0x40FFC7
0001d974: call @sub_403880 with return %0001d976

.address 0x40FFCC
0001d976: 
.address 0x40FFCC
0001d981: #4122 := mem[RSP + 0x20]
.address 0x40FFCC
0001d984: CF := mem[RSP + 0x20] < 0
.address 0x40FFCC
0001d987: OF := high:1[mem[RSP + 0x20] & (mem[RSP + 0x20] ^ #4122)]
.address 0x40FFCC
0001d98a: AF := 0x10 = (0x10 & (#4122 ^ mem[RSP + 0x20]))
.address 0x40FFCC
0001d98d: PF := ~low:1[let $1 = #4122 >> 4 ^ #4122 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FFCC
0001d990: SF := high:1[#4122]
.address 0x40FFCC
0001d993: ZF := 0 = #4122
.address 0x40FFD1
0001d99a: RBP := extend:64[low:32[RAX]]
.address 0x40FFD4
0001d9a3: when ZF goto %0001d5b6
00044c33: goto %0001d9a9

.address 0x410098
0001d5b6: 
.address 0x410098
0001d5bb: RAX := mem[R12, el]:u64
.address 0x41009C
0001d5c8: #4088 := RAX - RBP
.address 0x41009C
0001d5cb: CF := RAX < RBP
.address 0x41009C
0001d5ce: OF := high:1[(RAX ^ RBP) & (RAX ^ #4088)]
.address 0x41009C
0001d5d1: AF := 0x10 = (0x10 & (#4088 ^ RAX ^ RBP))
.address 0x41009C
0001d5d4: PF := ~low:1[let $1 = #4088 >> 4 ^ #4088 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41009C
0001d5d7: SF := high:1[#4088]
.address 0x41009C
0001d5da: ZF := 0 = #4088
.address 0x41009F
0001d5e3: when ~CF goto %00015358
00044c34: goto %0001d5e9

.address 0x4100A5
0001d5e9: 
.address 0x4100A5
0001d5ee: RAX := mem[RSP + 8, el]:u64
.address 0x4100AA
0001d5fc: #4090 := RAX
.address 0x4100AA
0001d5ff: RAX := RAX + 1
.address 0x4100AA
0001d602: CF := RAX < #4090
.address 0x4100AA
0001d605: OF := ~high:1[#4090] & (high:1[#4090] | high:1[RAX]) & ~(high:1[#4090] & high:1[RAX])
.address 0x4100AA
0001d608: AF := 0x10 = (0x10 & (RAX ^ #4090 ^ 1))
.address 0x4100AA
0001d60b: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4100AA
0001d60e: SF := high:1[RAX]
.address 0x4100AA
0001d611: ZF := 0 = RAX
.address 0x4100AE
0001d618: mem := mem with [RSP + 0x20, el]:u64 <- RAX
.address 0x4100B3
0001d620: goto %0001d61c

.address 0x40FEA0
00015358: 
.address 0x40FEA0
0001535d: mem := mem with [RSP + 8, el]:u64 <- 0
00044c35: goto %0001512a

.address 0x40FFDA
0001d9a9: 
.address 0x40FFDA
0001d9ae: RSI := mem[RSP, el]:u64
.address 0x40FFDE
0001d9bb: RDX := 0
.address 0x40FFDE
0001d9be: AF := unknown[bits]:u1
.address 0x40FFDE
0001d9c1: ZF := 1
.address 0x40FFDE
0001d9c4: PF := 1
.address 0x40FFDE
0001d9c7: OF := 0
.address 0x40FFDE
0001d9ca: CF := 0
.address 0x40FFDE
0001d9cd: SF := 0
.address 0x40FFE0
0001d9da: RDI := 0
.address 0x40FFE0
0001d9dd: AF := unknown[bits]:u1
.address 0x40FFE0
0001d9e0: ZF := 1
.address 0x40FFE0
0001d9e3: PF := 1
.address 0x40FFE0
0001d9e6: OF := 0
.address 0x40FFE0
0001d9e9: CF := 0
.address 0x40FFE0
0001d9ec: SF := 0
.address 0x40FFE2
0001d9f5: RSP := RSP - 8
.address 0x40FFE2
0001d9f8: mem := mem with [RSP, el]:u64 <- 0x40FFE7
.address 0x40FFE2
0001d9fb: call @sub_403d80 with return %0001d9fd

.address 0x40FFE7
0001d9fd: 
.address 0x40FFE7
0001da09: #4124 := RAX
.address 0x40FFE7
0001da0c: RAX := RAX + 1
.address 0x40FFE7
0001da0f: CF := RAX < #4124
.address 0x40FFE7
0001da12: OF := ~high:1[#4124] & (high:1[#4124] | high:1[RAX]) & ~(high:1[#4124] & high:1[RAX])
.address 0x40FFE7
0001da15: AF := 0x10 = (0x10 & (RAX ^ #4124 ^ 1))
.address 0x40FFE7
0001da18: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FFE7
0001da1b: SF := high:1[RAX]
.address 0x40FFE7
0001da1e: ZF := 0 = RAX
.address 0x40FFEB
0001da25: mem := mem with [RSP + 0x20, el]:u64 <- RAX
00044c36: goto %0001d61c

.address 0x40FFF0
0001d61c: 
.address 0x40FFF0
0001d626: RDI := mem[RSP + 0x20, el]:u64
.address 0x40FFF5
0001d62f: RSP := RSP - 8
.address 0x40FFF5
0001d632: mem := mem with [RSP, el]:u64 <- 0x40FFFA
.address 0x40FFF5
0001d635: call @sub_403e78 with return %0001d637

.address 0x40FFFA
0001d637: 
.address 0x40FFFA
0001d642: #4093 := RAX
.address 0x40FFFA
0001d645: OF := 0
.address 0x40FFFA
0001d648: CF := 0
.address 0x40FFFA
0001d64b: AF := unknown[bits]:u1
.address 0x40FFFA
0001d64e: PF := ~low:1[let $1 = #4093 >> 4 ^ #4093 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FFFA
0001d651: SF := high:1[#4093]
.address 0x40FFFA
0001d654: ZF := 0 = #4093
.address 0x40FFFD
0001d65b: mem := mem with [RSP + 8, el]:u64 <- RAX
.address 0x410002
0001d665: when ZF goto %0001d65f
00044c37: goto %0001d6a4

.address 0x4100C0
0001d65f: 
.address 0x4100C0
0001d675: #4095 := low:8[RBX] & 1
.address 0x4100C0
0001d678: OF := 0
.address 0x4100C0
0001d67b: CF := 0
.address 0x4100C0
0001d67e: AF := unknown[bits]:u1
.address 0x4100C0
0001d681: PF := ~low:1[let $1 = #4095 >> 4 ^ #4095 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4100C0
0001d684: SF := high:1[#4095]
.address 0x4100C0
0001d687: ZF := 0 = #4095
.address 0x4100C3
0001d690: when ~ZF goto %00015102
00044c38: goto %0001d696

.address 0x4100C9
0001d696: 
.address 0x4100C9
0001d69b: R12 := 0xFFFFFFFFFFFFFFFF
.address 0x4100D0
0001d6a2: goto %000152a2

.address 0x410008
0001d6a4: 
.address 0x410008
0001d6a9: R15 := mem[RSP, el]:u64
.address 0x41000C
0001d6b0: R14 := mem[R12, el]:u64
.address 0x410010
0001d6b7: RDI := pad:64[mem[R15, el]:u32]
.address 0x410013
0001d6c4: #4097 := low:32[RDI]
.address 0x410013
0001d6c7: OF := 0
.address 0x410013
0001d6ca: CF := 0
.address 0x410013
0001d6cd: AF := unknown[bits]:u1
.address 0x410013
0001d6d0: PF := ~low:1[let $1 = #4097 >> 4 ^ #4097 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410013
0001d6d3: SF := high:1[#4097]
.address 0x410013
0001d6d6: ZF := 0 = #4097
.address 0x410015
0001d6df: when ZF goto %0001d50d
00044c39: goto %0001d6e5

.address 0x4100EF
0001d50d: 
.address 0x4100EF
0001d512: R15 := mem[RSP, el]:u64
.address 0x4100F3
0001d51f: RBP := 0
.address 0x4100F3
0001d522: AF := unknown[bits]:u1
.address 0x4100F3
0001d525: ZF := 1
.address 0x4100F3
0001d528: PF := 1
.address 0x4100F3
0001d52b: OF := 0
.address 0x4100F3
0001d52e: CF := 0
.address 0x4100F3
0001d531: SF := 0
.address 0x4100F5
0001d539: goto %0001d535

.address 0x41001B
0001d6e5: 
.address 0x41001B
0001d6f0: RBP := 0
.address 0x41001B
0001d6f3: AF := unknown[bits]:u1
.address 0x41001B
0001d6f6: ZF := 1
.address 0x41001B
0001d6f9: PF := 1
.address 0x41001B
0001d6fc: OF := 0
.address 0x41001B
0001d6ff: CF := 0
.address 0x41001B
0001d702: SF := 0
.address 0x41001D
0001d70a: goto %0001d706

.address 0x41002E
0001d706: 
.address 0x41002E
0001d712: RSP := RSP - 8
.address 0x41002E
0001d715: mem := mem with [RSP, el]:u64 <- 0x410033
.address 0x41002E
0001d718: call @sub_403c00 with return %0001d71a

.address 0x410033
0001d71a: 
.address 0x410033
0001d725: #4099 := low:32[RAX] - 0xFFFFFFFF
.address 0x410033
0001d728: CF := low:32[RAX] < 0xFFFFFFFF
.address 0x410033
0001d72b: OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ #4099)]
.address 0x410033
0001d72e: AF := 0x10 = (0x10 & (#4099 ^ low:32[RAX] ^ 0xFFFFFFFF))
.address 0x410033
0001d731: PF := ~low:1[let $1 = #4099 >> 4 ^ #4099 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410033
0001d734: SF := high:1[#4099]
.address 0x410033
0001d737: ZF := 0 = #4099
.address 0x410036
0001d73e: RDX := extend:64[low:32[RAX]]
.address 0x410039
0001d748: when ~ZF goto %0001d742
00044c3a: goto %0001d7fd

.address 0x41003B
0001d7fd: 
.address 0x41003B
0001d802: mem := mem with [R15, el]:u32 <- 0xFFFD
.address 0x410042
0001d809: RDX := 1
00044c3b: goto %0001d742

.address 0x410047
0001d742: 
.address 0x410047
0001d75a: #4101 := RDX
.address 0x410047
0001d75d: #4102 := RBP
.address 0x410047
0001d760: RDX := RDX + #4102
.address 0x410047
0001d763: CF := RDX < #4101
.address 0x410047
0001d766: OF := high:1[#4101] = high:1[#4102] & (high:1[#4101] | high:1[RDX]) & ~(
high:1[#4101] & high:1[RDX])
.address 0x410047
0001d769: AF := 0x10 = (0x10 & (RDX ^ #4101 ^ #4102))
.address 0x410047
0001d76c: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410047
0001d76f: SF := high:1[RDX]
.address 0x410047
0001d772: ZF := 0 = RDX
.address 0x41004A
0001d77f: #4104 := R14 - RDX
.address 0x41004A
0001d782: CF := R14 < RDX
.address 0x41004A
0001d785: OF := high:1[(R14 ^ RDX) & (R14 ^ #4104)]
.address 0x41004A
0001d788: AF := 0x10 = (0x10 & (#4104 ^ R14 ^ RDX))
.address 0x41004A
0001d78b: PF := ~low:1[let $1 = #4104 >> 4 ^ #4104 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41004A
0001d78e: SF := high:1[#4104]
.address 0x41004A
0001d791: ZF := 0 = #4104
.address 0x41004D
0001d79b: when ~CF goto %0001d795
00044c3c: goto %0001d535

.address 0x410020
0001d795: 
.address 0x410020
0001d7ac: #4106 := R15
.address 0x410020
0001d7af: R15 := R15 + 4
.address 0x410020
0001d7b2: CF := R15 < #4106
.address 0x410020
0001d7b5: OF := ~high:1[#4106] & (high:1[#4106] | high:1[R15]) & ~(high:1[#4106] & high:1[R15])
.address 0x410020
0001d7b8: AF := 0x10 = (0x10 & (R15 ^ #4106 ^ 4))
.address 0x410020
0001d7bb: PF := ~low:1[let $1 = R15 >> 4 ^ R15 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410020
0001d7be: SF := high:1[R15]
.address 0x410020
0001d7c1: ZF := 0 = R15
.address 0x410024
0001d7c8: RDI := pad:64[mem[R15, el]:u32]
.address 0x410027
0001d7cf: RBP := RDX
.address 0x41002A
0001d7dc: #4109 := low:32[RDI]
.address 0x41002A
0001d7df: OF := 0
.address 0x41002A
0001d7e2: CF := 0
.address 0x41002A
0001d7e5: AF := unknown[bits]:u1
.address 0x41002A
0001d7e8: PF := ~low:1[let $1 = #4109 >> 4 ^ #4109 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41002A
0001d7eb: SF := high:1[#4109]
.address 0x41002A
0001d7ee: ZF := 0 = #4109
.address 0x41002C
0001d7f7: when ZF goto %0001d535
00044c3d: goto %0001d706

.address 0x41004F
0001d535: 
.address 0x41004F
0001d53f: R14 := mem[RSP + 8, el]:u64
.address 0x410054
0001d546: RDX := mem[RSP + 0x20, el]:u64
.address 0x410059
0001d54d: RSI := mem[RSP, el]:u64
.address 0x41005D
0001d554: mem := mem with [R15, el]:u32 <- 0
.address 0x410064
0001d55b: RDI := R14
.address 0x410067
0001d564: RSP := RSP - 8
.address 0x410067
0001d567: mem := mem with [RSP, el]:u64 <- 0x41006C
.address 0x410067
0001d56a: call @sub_403d80 with return %0001d56c

.address 0x41006C
0001d56c: 
.address 0x41006C
0001d571: R15 := RAX
.address 0x41006F
0001d578: goto %00015102

.address 0x40FF01
0001da35: 
.address 0x40FF01
0001da40: #4127 := low:8[RBX] & 1
.address 0x40FF01
0001da43: OF := 0
.address 0x40FF01
0001da46: CF := 0
.address 0x40FF01
0001da49: AF := unknown[bits]:u1
.address 0x40FF01
0001da4c: PF := ~low:1[let $1 = #4127 >> 4 ^ #4127 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FF01
0001da4f: SF := high:1[#4127]
.address 0x40FF01
0001da52: ZF := 0 = #4127
.address 0x40FF04
0001da5b: when ~ZF goto %000150e2
00044c3e: goto %0001d4e9

.address 0x40FF0A
0001d4e9: 
.address 0x40FF0A
0001d4f3: mem := mem with [RSP, el]:u64 <- 0
.address 0x40FF12
0001d4fa: mem := mem with [RSP + 8, el]:u64 <- 0
.address 0x40FF1B
0001d501: R12 := 0xFFFFFFFFFFFFFFFF
.address 0x40FF22
0001d508: goto %000152a2

.address 0x40FD7A
000150e2: 
.address 0x40FD7A
000150f2: RBP := R15
.address 0x40FD7D
000150f9: mem := mem with [RSP, el]:u64 <- 0
.address 0x40FD85
00015100: mem := mem with [RSP + 8, el]:u64 <- 0
00044c3f: goto %00015102

.address 0x40FD8E
00015102: 
.address 0x40FD8E
00015107: RAX := mem[R12, el]:u64
.address 0x40FD92
00015114: #2761 := RAX - RBP
.address 0x40FD92
00015117: CF := RAX < RBP
.address 0x40FD92
0001511a: OF := high:1[(RAX ^ RBP) & (RAX ^ #2761)]
.address 0x40FD92
0001511d: AF := 0x10 = (0x10 & (#2761 ^ RAX ^ RBP))
.address 0x40FD92
00015120: PF := ~low:1[let $1 = #2761 >> 4 ^ #2761 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FD92
00015123: SF := high:1[#2761]
.address 0x40FD92
00015126: ZF := 0 = #2761
.address 0x40FD95
00015130: when ~CF goto %0001512a
00044c40: goto %0001d3a9

.address 0x40FEA9
0001512a: 
.address 0x40FEA9
00015140: #2763 := RBP - RAX
.address 0x40FEA9
00015143: CF := RBP < RAX
.address 0x40FEA9
00015146: OF := high:1[(RBP ^ RAX) & (RBP ^ #2763)]
.address 0x40FEA9
00015149: AF := 0x10 = (0x10 & (#2763 ^ RBP ^ RAX))
.address 0x40FEA9
0001514c: PF := ~low:1[let $1 = #2763 >> 4 ^ #2763 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FEA9
0001514f: SF := high:1[#2763]
.address 0x40FEA9
00015152: ZF := 0 = #2763
.address 0x40FEAC
0001515c: when ~CF goto %00015156
00044c41: goto %0001d33a

.address 0x4100FA
00015156: 
.address 0x4100FA
00015166: RAX := RBP
.address 0x4100FD
00015173: RDX := 0
.address 0x4100FD
00015176: AF := unknown[bits]:u1
.address 0x4100FD
00015179: ZF := 1
.address 0x4100FD
0001517c: PF := 1
.address 0x4100FD
0001517f: OF := 0
.address 0x4100FD
00015182: CF := 0
.address 0x4100FD
00015185: SF := 0
.address 0x4100FF
0001518d: goto %00015189

.address 0x40FEB2
0001d33a: 
.address 0x40FEB2
0001d347: #4077 := RAX
.address 0x40FEB2
0001d34a: #4078 := RBP
.address 0x40FEB2
0001d34d: RAX := RAX - RBP
.address 0x40FEB2
0001d350: CF := #4077 < #4078
.address 0x40FEB2
0001d353: OF := high:1[(#4077 ^ #4078) & (#4077 ^ RAX)]
.address 0x40FEB2
0001d356: AF := 0x10 = (0x10 & (RAX ^ #4077 ^ #4078))
.address 0x40FEB2
0001d359: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FEB2
0001d35c: SF := high:1[RAX]
.address 0x40FEB2
0001d35f: ZF := 0 = RAX
.address 0x40FEB5
0001d366: RDX := RAX
.address 0x40FEB8
0001d36d: RAX := RBP
.address 0x40FEBB
0001d374: mem := mem with [R12, el]:u64 <- RAX
.address 0x40FEBF
0001d37b: RAX := pad:64[mem[RSP + 0x1C, el]:u32]
.address 0x40FEC3
0001d388: #4080 := low:32[RAX]
.address 0x40FEC3
0001d38b: OF := 0
.address 0x40FEC3
0001d38e: CF := 0
.address 0x40FEC3
0001d391: AF := unknown[bits]:u1
.address 0x40FEC3
0001d394: PF := ~low:1[let $1 = #4080 >> 4 ^ #4080 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FEC3
0001d397: SF := high:1[#4080]
.address 0x40FEC3
0001d39a: ZF := 0 = #4080
.address 0x40FEC5
0001d3a3: when ~ZF goto %00015686
00044c42: goto %000151bd

.address 0x40FD9B
0001d3a9: 
.address 0x40FD9B
0001d3ae: R15 := RAX
.address 0x40FD9E
0001d3bb: RDX := 0
.address 0x40FD9E
0001d3be: AF := unknown[bits]:u1
.address 0x40FD9E
0001d3c1: ZF := 1
.address 0x40FD9E
0001d3c4: PF := 1
.address 0x40FD9E
0001d3c7: OF := 0
.address 0x40FD9E
0001d3ca: CF := 0
.address 0x40FD9E
0001d3cd: SF := 0
00044c43: goto %00015189

.address 0x40FDA0
00015189: 
.address 0x40FDA0
00015193: mem := mem with [R12, el]:u64 <- RAX
.address 0x40FDA4
0001519a: RAX := pad:64[mem[RSP + 0x1C, el]:u32]
.address 0x40FDA8
000151a7: #2765 := low:32[RAX]
.address 0x40FDA8
000151aa: OF := 0
.address 0x40FDA8
000151ad: CF := 0
.address 0x40FDA8
000151b0: AF := unknown[bits]:u1
.address 0x40FDA8
000151b3: PF := ~low:1[let $1 = #2765 >> 4 ^ #2765 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FDA8
000151b6: SF := high:1[#2765]
.address 0x40FDA8
000151b9: ZF := 0 = #2765
.address 0x40FDAA
000151c3: when ZF goto %000151bd
00044c44: goto %00015686

.address 0x40FECB
000151bd: 
.address 0x40FECB
000151cd: RBP := RDX
.address 0x40FECE
000151da: RDX := 0
.address 0x40FECE
000151dd: AF := unknown[bits]:u1
.address 0x40FECE
000151e0: ZF := 1
.address 0x40FECE
000151e3: PF := 1
.address 0x40FECE
000151e6: OF := 0
.address 0x40FECE
000151e9: CF := 0
.address 0x40FECE
000151ec: SF := 0
.address 0x40FED0
000151f4: goto %000151f0

.address 0x40FDB0
00015686: 
.address 0x40FDB0
00015691: RBP := 0
.address 0x40FDB0
00015694: AF := unknown[bits]:u1
.address 0x40FDB0
00015697: ZF := 1
.address 0x40FDB0
0001569a: PF := 1
.address 0x40FDB0
0001569d: OF := 0
.address 0x40FDB0
000156a0: CF := 0
.address 0x40FDB0
000156a3: SF := 0
.address 0x40FDB2
000156b0: #2816 := low:32[RAX] - 1
.address 0x40FDB2
000156b3: CF := low:32[RAX] < 1
.address 0x40FDB2
000156b6: OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #2816)]
.address 0x40FDB2
000156b9: AF := 0x10 = (0x10 & (#2816 ^ low:32[RAX] ^ 1))
.address 0x40FDB2
000156bc: PF := ~low:1[let $1 = #2816 >> 4 ^ #2816 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FDB2
000156bf: SF := high:1[#2816]
.address 0x40FDB2
000156c2: ZF := 0 = #2816
.address 0x40FDB5
000156cb: when ZF goto %000151f0
00044c45: goto %000156d1

.address 0x40FDB7
000156d1: 
.address 0x40FDB7
000156d6: RBP := RDX
.address 0x40FDBA
000156e3: RDX := pad:64[low:32[RDX] & 1]
.address 0x40FDBA
000156e6: OF := 0
.address 0x40FDBA
000156e9: CF := 0
.address 0x40FDBA
000156ec: AF := unknown[bits]:u1
.address 0x40FDBA
000156ef: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FDBA
000156f2: SF := high:1[low:32[RDX]]
.address 0x40FDBA
000156f5: ZF := 0 = low:32[RDX]
.address 0x40FDBD
00015703: #2819 := RBP
.address 0x40FDBD
00015706: RBP := RBP >> 1
.address 0x40FDBD
00015709: CF := high:1[#2819 << 0x3F]
.address 0x40FDBD
0001570c: SF := high:1[RBP]
.address 0x40FDBD
0001570f: ZF := 0 = RBP
.address 0x40FDBD
00015712: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FDBD
00015715: AF := unknown[bits]:u1
.address 0x40FDBD
00015718: OF := high:1[#2819]
.address 0x40FDC0
00015727: #2821 := RDX
.address 0x40FDC0
0001572a: #2822 := RBP
.address 0x40FDC0
0001572d: RDX := RDX + #2822
.address 0x40FDC0
00015730: CF := RDX < #2821
.address 0x40FDC0
00015733: OF := high:1[#2821] = high:1[#2822] & (high:1[#2821] | high:1[RDX]) & ~(
high:1[#2821] & high:1[RDX])
.address 0x40FDC0
00015736: AF := 0x10 = (0x10 & (RDX ^ #2821 ^ #2822))
.address 0x40FDC0
00015739: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FDC0
0001573c: SF := high:1[RDX]
.address 0x40FDC0
0001573f: ZF := 0 = RDX
00044c46: goto %000151f0

.address 0x40FDC3
000151f0: 
.address 0x40FDC3
00015200: #2767 := low:8[RBX] & 4
.address 0x40FDC3
00015203: OF := 0
.address 0x40FDC3
00015206: CF := 0
.address 0x40FDC3
00015209: AF := unknown[bits]:u1
.address 0x40FDC3
0001520c: PF := ~low:1[let $1 = #2767 >> 4 ^ #2767 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FDC3
0001520f: SF := high:1[#2767]
.address 0x40FDC3
00015212: ZF := 0 = #2767
.address 0x40FDC6
00015219: R12 := low:64[RDX + R15]
.address 0x40FDCA
00015223: when ZF goto %0001521d
00044c47: goto %0001565d

.address 0x40FDCC
0001565d: 
.address 0x40FDCC
00015662: R12 := R15
.address 0x40FDCF
0001566f: RDX := 0
.address 0x40FDCF
00015672: AF := unknown[bits]:u1
.address 0x40FDCF
00015675: ZF := 1
.address 0x40FDCF
00015678: PF := 1
.address 0x40FDCF
0001567b: OF := 0
.address 0x40FDCF
0001567e: CF := 0
.address 0x40FDCF
00015681: SF := 0
00044c48: goto %0001521d

.address 0x40FDD1
0001521d: 
.address 0x40FDD1
00015233: RBX := pad:64[low:32[RBX] & 8]
.address 0x40FDD1
00015236: OF := 0
.address 0x40FDD1
00015239: CF := 0
.address 0x40FDD1
0001523c: AF := unknown[bits]:u1
.address 0x40FDD1
0001523f: PF := ~low:1[let $1 = low:32[RBX] >> 4 ^ low:32[RBX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FDD1
00015242: SF := high:1[low:32[RBX]]
.address 0x40FDD1
00015245: ZF := 0 = low:32[RBX]
.address 0x40FDD4
0001524f: when ~ZF goto %00015249
00044c49: goto %00015636

.address 0x40FED8
00015249: 
.address 0x40FED8
0001525f: RBP := 0
.address 0x40FED8
00015262: AF := unknown[bits]:u1
.address 0x40FED8
00015265: ZF := 1
.address 0x40FED8
00015268: PF := 1
.address 0x40FED8
0001526b: OF := 0
.address 0x40FED8
0001526e: CF := 0
.address 0x40FED8
00015271: SF := 0
.address 0x40FEDA
00015279: goto %00015275

.address 0x40FDDA
00015636: 
.address 0x40FDDA
00015643: #2813 := R12
.address 0x40FDDA
00015646: #2814 := RBP
.address 0x40FDDA
00015649: R12 := R12 + #2814
.address 0x40FDDA
0001564c: CF := R12 < #2813
.address 0x40FDDA
0001564f: OF := high:1[#2813] = high:1[#2814] & (high:1[#2813] | high:1[R12]) & ~(
high:1[#2813] & high:1[R12])
.address 0x40FDDA
00015652: AF := 0x10 = (0x10 & (R12 ^ #2813 ^ #2814))
.address 0x40FDDA
00015655: PF := ~low:1[let $1 = R12 >> 4 ^ R12 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FDDA
00015658: SF := high:1[R12]
.address 0x40FDDA
0001565b: ZF := 0 = R12
00044c4a: goto %00015275

.address 0x40FDDD
00015275: 
.address 0x40FDDD
0001527f: RAX := mem[RSP + 0x10, el]:u64
.address 0x40FDE2
0001528c: #2770 := RAX
.address 0x40FDE2
0001528f: OF := 0
.address 0x40FDE2
00015292: CF := 0
.address 0x40FDE2
00015295: AF := unknown[bits]:u1
.address 0x40FDE2
00015298: PF := ~low:1[let $1 = #2770 >> 4 ^ #2770 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FDE2
0001529b: SF := high:1[#2770]
.address 0x40FDE2
0001529e: ZF := 0 = #2770
.address 0x40FDE5
000152a8: when ZF goto %000152a2
00044c4b: goto %0001535f

.address 0x40FDEB
0001535f: 
.address 0x40FDEB
00015364: RBX := low:64[R13 + RAX - 1]
.address 0x40FDF0
0001536b: RAX := low:64[RDX - 1]
.address 0x40FDF4
00015378: #2776 := R13 - RBX
.address 0x40FDF4
0001537b: CF := R13 < RBX
.address 0x40FDF4
0001537e: OF := high:1[(R13 ^ RBX) & (R13 ^ #2776)]
.address 0x40FDF4
00015381: AF := 0x10 = (0x10 & (#2776 ^ R13 ^ RBX))
.address 0x40FDF4
00015384: PF := ~low:1[let $1 = #2776 >> 4 ^ #2776 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FDF4
00015387: SF := high:1[#2776]
.address 0x40FDF4
0001538a: ZF := 0 = #2776
.address 0x40FDF7
00015394: when ~CF goto %0001538e
00044c4c: goto %0001553f

.address 0x40FDF9
0001553f: 
.address 0x40FDF9
0001554a: #2799 := RDX
.address 0x40FDF9
0001554d: OF := 0
.address 0x40FDF9
00015550: CF := 0
.address 0x40FDF9
00015553: AF := unknown[bits]:u1
.address 0x40FDF9
00015556: PF := ~low:1[let $1 = #2799 >> 4 ^ #2799 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FDF9
00015559: SF := high:1[#2799]
.address 0x40FDF9
0001555c: ZF := 0 = #2799
.address 0x40FDFC
00015565: when ZF goto %0001538e
00044c4d: goto %0001556b

.address 0x40FDFE
0001556b: 
00044c4e: goto %0001556e

.address 0x40FE00
0001556e: 
.address 0x40FE00
0001557a: #2801 := R13
.address 0x40FE00
0001557d: R13 := R13 + 1
.address 0x40FE00
00015580: CF := R13 < #2801
.address 0x40FE00
00015583: OF := ~high:1[#2801] & (high:1[#2801] | high:1[R13]) & ~(high:1[#2801] & high:1[R13])
.address 0x40FE00
00015586: AF := 0x10 = (0x10 & (R13 ^ #2801 ^ 1))
.address 0x40FE00
00015589: PF := ~low:1[let $1 = R13 >> 4 ^ R13 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FE00
0001558c: SF := high:1[R13]
.address 0x40FE00
0001558f: ZF := 0 = R13
.address 0x40FE04
00015596: mem := mem with [R13 - 1] <- 0x20
.address 0x40FE09
000155a3: #2804 := RBX - R13
.address 0x40FE09
000155a6: CF := RBX < R13
.address 0x40FE09
000155a9: OF := high:1[(RBX ^ R13) & (RBX ^ #2804)]
.address 0x40FE09
000155ac: AF := 0x10 = (0x10 & (#2804 ^ RBX ^ R13))
.address 0x40FE09
000155af: PF := ~low:1[let $1 = #2804 >> 4 ^ #2804 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FE09
000155b2: SF := high:1[#2804]
.address 0x40FE09
000155b5: ZF := 0 = #2804
.address 0x40FE0C
000155bc: RSI := extract:63:8[RSI].pad:8[~(CF | ZF)]
.address 0x40FE10
000155c9: #2806 := RAX
.address 0x40FE10
000155cc: OF := 0
.address 0x40FE10
000155cf: CF := 0
.address 0x40FE10
000155d2: AF := unknown[bits]:u1
.address 0x40FE10
000155d5: PF := ~low:1[let $1 = #2806 >> 4 ^ #2806 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FE10
000155d8: SF := high:1[#2806]
.address 0x40FE10
000155db: ZF := 0 = #2806
.address 0x40FE13
000155e2: RDX := extract:63:8[RDX].pad:8[~ZF]
.address 0x40FE16
000155f0: #2808 := RAX
.address 0x40FE16
000155f3: RAX := RAX - 1
.address 0x40FE16
000155f6: CF := #2808 < 1
.address 0x40FE16
000155f9: OF := high:1[(#2808 ^ 1) & (#2808 ^ RAX)]
.address 0x40FE16
000155fc: AF := 0x10 = (0x10 & (RAX ^ #2808 ^ 1))
.address 0x40FE16
000155ff: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FE16
00015602: SF := high:1[RAX]
.address 0x40FE16
00015605: ZF := 0 = RAX
.address 0x40FE1A
00015612: #2811 := low:8[RSI] & low:8[RDX]
.address 0x40FE1A
00015615: OF := 0
.address 0x40FE1A
00015618: CF := 0
.address 0x40FE1A
0001561b: AF := unknown[bits]:u1
.address 0x40FE1A
0001561e: PF := ~low:1[let $1 = #2811 >> 4 ^ #2811 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FE1A
00015621: SF := high:1[#2811]
.address 0x40FE1A
00015624: ZF := 0 = #2811
.address 0x40FE1D
0001562d: when ~ZF goto %0001556e
00044c4f: goto %0001538e

.address 0x40FE1F
0001538e: 
.address 0x40FE1F
0001539e: RDX := RBX
.address 0x40FE22
000153a5: mem := mem with [R13] <- 0
.address 0x40FE27
000153ac: RSI := R14
.address 0x40FE2A
000153bb: #2778 := RDX
.address 0x40FE2A
000153be: #2779 := R13
.address 0x40FE2A
000153c1: RDX := RDX - R13
.address 0x40FE2A
000153c4: CF := #2778 < #2779
.address 0x40FE2A
000153c7: OF := high:1[(#2778 ^ #2779) & (#2778 ^ RDX)]
.address 0x40FE2A
000153ca: AF := 0x10 = (0x10 & (RDX ^ #2778 ^ #2779))
.address 0x40FE2A
000153cd: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FE2A
000153d0: SF := high:1[RDX]
.address 0x40FE2A
000153d3: ZF := 0 = RDX
.address 0x40FE2D
000153da: RDI := R13
.address 0x40FE30
000153e7: #2781 := RDX - R15
.address 0x40FE30
000153ea: CF := RDX < R15
.address 0x40FE30
000153ed: OF := high:1[(RDX ^ R15) & (RDX ^ #2781)]
.address 0x40FE30
000153f0: AF := 0x10 = (0x10 & (#2781 ^ RDX ^ R15))
.address 0x40FE30
000153f3: PF := ~low:1[let $1 = #2781 >> 4 ^ #2781 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FE30
000153f6: SF := high:1[#2781]
.address 0x40FE30
000153f9: ZF := 0 = #2781
.address 0x40FE33
00015400: RDX := if ~(CF | ZF) then R15 else RDX
.address 0x40FE37
00015409: RSP := RSP - 8
.address 0x40FE37
0001540c: mem := mem with [RSP, el]:u64 <- 0x40FE3C
.address 0x40FE37
0001540f: call @sub_403d00 with return %00015411

.address 0x40FE3C
00015411: 
.address 0x40FE3C
0001541c: #2783 := RBX - RAX
.address 0x40FE3C
0001541f: CF := RBX < RAX
.address 0x40FE3C
00015422: OF := high:1[(RBX ^ RAX) & (RBX ^ #2783)]
.address 0x40FE3C
00015425: AF := 0x10 = (0x10 & (#2783 ^ RBX ^ RAX))
.address 0x40FE3C
00015428: PF := ~low:1[let $1 = #2783 >> 4 ^ #2783 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FE3C
0001542b: SF := high:1[#2783]
.address 0x40FE3C
0001542e: ZF := 0 = #2783
.address 0x40FE3F
00015435: RDX := low:64[RBP - 1]
.address 0x40FE43
0001543f: when CF | ZF goto %00015439
00044c50: goto %0001544b

.address 0x40FE45
0001544b: 
.address 0x40FE45
00015456: #2785 := RBP
.address 0x40FE45
00015459: OF := 0
.address 0x40FE45
0001545c: CF := 0
.address 0x40FE45
0001545f: AF := unknown[bits]:u1
.address 0x40FE45
00015462: PF := ~low:1[let $1 = #2785 >> 4 ^ #2785 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FE45
00015465: SF := high:1[#2785]
.address 0x40FE45
00015468: ZF := 0 = #2785
.address 0x40FE48
00015471: when ZF goto %00015439
00044c51: goto %00015477

.address 0x40FE4A
00015477: 
00044c52: goto %0001547a

.address 0x40FE50
0001547a: 
.address 0x40FE50
00015486: #2787 := RAX
.address 0x40FE50
00015489: RAX := RAX + 1
.address 0x40FE50
0001548c: CF := RAX < #2787
.address 0x40FE50
0001548f: OF := ~high:1[#2787] & (high:1[#2787] | high:1[RAX]) & ~(high:1[#2787] & high:1[RAX])
.address 0x40FE50
00015492: AF := 0x10 = (0x10 & (RAX ^ #2787 ^ 1))
.address 0x40FE50
00015495: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FE50
00015498: SF := high:1[RAX]
.address 0x40FE50
0001549b: ZF := 0 = RAX
.address 0x40FE54
000154a8: #2790 := RDX
.address 0x40FE54
000154ab: OF := 0
.address 0x40FE54
000154ae: CF := 0
.address 0x40FE54
000154b1: AF := unknown[bits]:u1
.address 0x40FE54
000154b4: PF := ~low:1[let $1 = #2790 >> 4 ^ #2790 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FE54
000154b7: SF := high:1[#2790]
.address 0x40FE54
000154ba: ZF := 0 = #2790
.address 0x40FE57
000154c1: mem := mem with [RAX - 1] <- 0x20
.address 0x40FE5B
000154c8: RSI := extract:63:8[RSI].pad:8[~ZF]
.address 0x40FE5F
000154d5: #2792 := RBX - RAX
.address 0x40FE5F
000154d8: CF := RBX < RAX
.address 0x40FE5F
000154db: OF := high:1[(RBX ^ RAX) & (RBX ^ #2792)]
.address 0x40FE5F
000154de: AF := 0x10 = (0x10 & (#2792 ^ RBX ^ RAX))
.address 0x40FE5F
000154e1: PF := ~low:1[let $1 = #2792 >> 4 ^ #2792 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FE5F
000154e4: SF := high:1[#2792]
.address 0x40FE5F
000154e7: ZF := 0 = #2792
.address 0x40FE62
000154ee: RCX := extract:63:8[RCX].pad:8[~(CF | ZF)]
.address 0x40FE65
000154fc: #2794 := RDX
.address 0x40FE65
000154ff: RDX := RDX - 1
.address 0x40FE65
00015502: CF := #2794 < 1
.address 0x40FE65
00015505: OF := high:1[(#2794 ^ 1) & (#2794 ^ RDX)]
.address 0x40FE65
00015508: AF := 0x10 = (0x10 & (RDX ^ #2794 ^ 1))
.address 0x40FE65
0001550b: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FE65
0001550e: SF := high:1[RDX]
.address 0x40FE65
00015511: ZF := 0 = RDX
.address 0x40FE69
0001551e: #2797 := low:8[RSI] & low:8[RCX]
.address 0x40FE69
00015521: OF := 0
.address 0x40FE69
00015524: CF := 0
.address 0x40FE69
00015527: AF := unknown[bits]:u1
.address 0x40FE69
0001552a: PF := ~low:1[let $1 = #2797 >> 4 ^ #2797 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x40FE69
0001552d: SF := high:1[#2797]
.address 0x40FE69
00015530: ZF := 0 = #2797
.address 0x40FE6C
00015539: when ~ZF goto %0001547a
00044c53: goto %00015439

.address 0x40FE6E
00015439: 
.address 0x40FE6E
00015449: mem := mem with [RAX] <- 0
00044c54: goto %000152a2

.address 0x40FE71
000152a2: 
.address 0x40FE71
000152b2: RDI := mem[RSP, el]:u64
.address 0x40FE75
000152bb: RSP := RSP - 8
.address 0x40FE75
000152be: mem := mem with [RSP, el]:u64 <- 0x40FE7A
.address 0x40FE75
000152c1: call @sub_403e70 with return %000152c3

.address 0x40FE7A
000152c3: 
.address 0x40FE7A
000152c8: RDI := mem[RSP + 8, el]:u64
.address 0x40FE7F
000152d1: RSP := RSP - 8
.address 0x40FE7F
000152d4: mem := mem with [RSP, el]:u64 <- 0x40FE84
.address 0x40FE7F
000152d7: call @sub_403e70 with return %000152d9

.address 0x40FE84
000152d9: 
.address 0x40FE84
000152e5: #2772 := RSP
.address 0x40FE84
000152e8: RSP := RSP + 0x38
.address 0x40FE84
000152eb: CF := RSP < #2772
.address 0x40FE84
000152ee: OF := ~high:1[#2772] & (high:1[#2772] | high:1[RSP]) & ~(high:1[#2772] & high:1[RSP])
.address 0x40FE84
000152f1: AF := 0x10 = (0x10 & (RSP ^ #2772 ^ 0x38))
.address 0x40FE84
000152f4: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x40FE84
000152f7: SF := high:1[RSP]
.address 0x40FE84
000152fa: ZF := 0 = RSP
.address 0x40FE88
00015301: RAX := R12
.address 0x40FE8B
00015309: RBX := mem[RSP, el]:u64
.address 0x40FE8B
0001530c: RSP := RSP + 8
.address 0x40FE8C
00015314: RBP := mem[RSP, el]:u64
.address 0x40FE8C
00015317: RSP := RSP + 8
.address 0x40FE8D
0001531f: R12 := mem[RSP, el]:u64
.address 0x40FE8D
00015322: RSP := RSP + 8
.address 0x40FE8F
0001532a: R13 := mem[RSP, el]:u64
.address 0x40FE8F
0001532d: RSP := RSP + 8
.address 0x40FE91
00015335: R14 := mem[RSP, el]:u64
.address 0x40FE91
00015338: RSP := RSP + 8
.address 0x40FE93
00015340: R15 := mem[RSP, el]:u64
.address 0x40FE93
00015343: RSP := RSP + 8
.address 0x40FE95
0001534c: #2775 := mem[RSP, el]:u64
.address 0x40FE95
0001534f: RSP := RSP + 8
.address 0x40FE95
00015353: call #2775 with noreturn


.address 0x4101B0
0004440c: sub sub_4101b0()
.address 0x4101B0
00015945: 
.address 0x4101B0
0001594c: #2839 := R15
.address 0x4101B0
0001594f: RSP := RSP - 8
.address 0x4101B0
00015952: mem := mem with [RSP, el]:u64 <- #2839
.address 0x4101B2
0001595b: #2840 := R14
.address 0x4101B2
0001595e: RSP := RSP - 8
.address 0x4101B2
00015961: mem := mem with [RSP, el]:u64 <- #2840
.address 0x4101B4
0001596a: #2841 := R13
.address 0x4101B4
0001596d: RSP := RSP - 8
.address 0x4101B4
00015970: mem := mem with [RSP, el]:u64 <- #2841
.address 0x4101B6
00015979: #2842 := R12
.address 0x4101B6
0001597c: RSP := RSP - 8
.address 0x4101B6
0001597f: mem := mem with [RSP, el]:u64 <- #2842
.address 0x4101B8
00015986: R13 := low:64[RDI + RSI]
.address 0x4101BC
0001598f: #2843 := RBP
.address 0x4101BC
00015992: RSP := RSP - 8
.address 0x4101BC
00015995: mem := mem with [RSP, el]:u64 <- #2843
.address 0x4101BD
0001599e: #2844 := RBX
.address 0x4101BD
000159a1: RSP := RSP - 8
.address 0x4101BD
000159a4: mem := mem with [RSP, el]:u64 <- #2844
.address 0x4101BE
000159ab: RBX := RDI
.address 0x4101C1
000159b9: #2845 := RSP
.address 0x4101C1
000159bc: RSP := RSP - 0x38
.address 0x4101C1
000159bf: CF := #2845 < 0x38
.address 0x4101C1
000159c2: OF := high:1[(#2845 ^ 0x38) & (#2845 ^ RSP)]
.address 0x4101C1
000159c5: AF := 0x10 = (0x10 & (RSP ^ #2845 ^ 0x38))
.address 0x4101C1
000159c8: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4101C1
000159cb: SF := high:1[RSP]
.address 0x4101C1
000159ce: ZF := 0 = RSP
.address 0x4101C5
000159d5: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x4101CE
000159dc: mem := mem with [RSP + 0x28, el]:u64 <- RAX
.address 0x4101D3
000159e9: RAX := 0
.address 0x4101D3
000159ec: AF := unknown[bits]:u1
.address 0x4101D3
000159ef: ZF := 1
.address 0x4101D3
000159f2: PF := 1
.address 0x4101D3
000159f5: OF := 0
.address 0x4101D3
000159f8: CF := 0
.address 0x4101D3
000159fb: SF := 0
.address 0x4101D5
00015a02: mem := mem with [RSP + 0xC, el]:u32 <- low:32[RDX]
.address 0x4101D9
00015a0b: RSP := RSP - 8
.address 0x4101D9
00015a0e: mem := mem with [RSP, el]:u64 <- 0x4101DE
.address 0x4101D9
00015a11: call @sub_403940 with return %00015a13

.address 0x4101DE
00015a13: 
.address 0x4101DE
00015a1e: #2848 := RAX - 1
.address 0x4101DE
00015a21: CF := RAX < 1
.address 0x4101DE
00015a24: OF := high:1[(RAX ^ 1) & (RAX ^ #2848)]
.address 0x4101DE
00015a27: AF := 0x10 = (0x10 & (#2848 ^ RAX ^ 1))
.address 0x4101DE
00015a2a: PF := ~low:1[let $1 = #2848 >> 4 ^ #2848 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4101DE
00015a2d: SF := high:1[#2848]
.address 0x4101DE
00015a30: ZF := 0 = #2848
.address 0x4101E2
00015a3a: when CF | ZF goto %00015a34
00044c55: goto %0001d238

.address 0x410318
00015a34: 
.address 0x410318
00015a4a: RBP := 0
.address 0x410318
00015a4d: AF := unknown[bits]:u1
.address 0x410318
00015a50: ZF := 1
.address 0x410318
00015a53: PF := 1
.address 0x410318
00015a56: OF := 0
.address 0x410318
00015a59: CF := 0
.address 0x410318
00015a5c: SF := 0
.address 0x41031A
00015a69: #2850 := RBX - R13
.address 0x41031A
00015a6c: CF := RBX < R13
.address 0x41031A
00015a6f: OF := high:1[(RBX ^ R13) & (RBX ^ #2850)]
.address 0x41031A
00015a72: AF := 0x10 = (0x10 & (#2850 ^ RBX ^ R13))
.address 0x41031A
00015a75: PF := ~low:1[let $1 = #2850 >> 4 ^ #2850 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41031A
00015a78: SF := high:1[#2850]
.address 0x41031A
00015a7b: ZF := 0 = #2850
.address 0x41031D
00015a85: when ~CF goto %00015a7f
00044c56: goto %0001d0a3

.address 0x41031F
0001d0a3: 
.address 0x41031F
0001d0aa: RSP := RSP - 8
.address 0x41031F
0001d0ad: mem := mem with [RSP, el]:u64 <- 0x410324
.address 0x41031F
0001d0b0: call @sub_403e50 with return %0001d0b2

.address 0x410324
0001d0b2: 
.address 0x410324
0001d0b7: RDX := pad:64[mem[RSP + 0xC, el]:u32]
.address 0x410328
0001d0be: RCX := mem[RAX, el]:u64
.address 0x41032B
0001d0cb: RBP := 0
.address 0x41032B
0001d0ce: AF := unknown[bits]:u1
.address 0x41032B
0001d0d1: ZF := 1
.address 0x41032B
0001d0d4: PF := 1
.address 0x41032B
0001d0d7: OF := 0
.address 0x41032B
0001d0da: CF := 0
.address 0x41032B
0001d0dd: SF := 0
.address 0x41032D
0001d0ea: RDX := pad:64[low:32[RDX] & 2]
.address 0x41032D
0001d0ed: OF := 0
.address 0x41032D
0001d0f0: CF := 0
.address 0x41032D
0001d0f3: AF := unknown[bits]:u1
.address 0x41032D
0001d0f6: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41032D
0001d0f9: SF := high:1[low:32[RDX]]
.address 0x41032D
0001d0fc: ZF := 0 = low:32[RDX]
00044c57: goto %0001d0fe

.address 0x410330
0001d0fe: 
.address 0x410330
0001d10a: #4055 := RBX
.address 0x410330
0001d10d: RBX := RBX + 1
.address 0x410330
0001d110: CF := RBX < #4055
.address 0x410330
0001d113: OF := ~high:1[#4055] & (high:1[#4055] | high:1[RBX]) & ~(high:1[#4055] & high:1[RBX])
.address 0x410330
0001d116: AF := 0x10 = (0x10 & (RBX ^ #4055 ^ 1))
.address 0x410330
0001d119: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410330
0001d11c: SF := high:1[RBX]
.address 0x410330
0001d11f: ZF := 0 = RBX
.address 0x410334
0001d126: RAX := pad:64[pad:32[mem[RBX - 1]]]
.address 0x410338
0001d12d: RAX := pad:64[pad:32[mem[RCX + (RAX << 1), el]:u16]]
.address 0x41033C
0001d13a: #4058 := high:8[low:16[RAX]] & 0x40
.address 0x41033C
0001d13d: OF := 0
.address 0x41033C
0001d140: CF := 0
.address 0x41033C
0001d143: AF := unknown[bits]:u1
.address 0x41033C
0001d146: PF := ~low:1[let $1 = #4058 >> 4 ^ #4058 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41033C
0001d149: SF := high:1[#4058]
.address 0x41033C
0001d14c: ZF := 0 = #4058
.address 0x41033F
0001d156: when ~ZF goto %0001d150
00044c58: goto %0001d1e0

.address 0x410341
0001d1e0: 
.address 0x410341
0001d1eb: #4067 := low:32[RDX]
.address 0x410341
0001d1ee: OF := 0
.address 0x410341
0001d1f1: CF := 0
.address 0x410341
0001d1f4: AF := unknown[bits]:u1
.address 0x410341
0001d1f7: PF := ~low:1[let $1 = #4067 >> 4 ^ #4067 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410341
0001d1fa: SF := high:1[#4067]
.address 0x410341
0001d1fd: ZF := 0 = #4067
.address 0x410343
0001d206: when ~ZF goto %0001cb77
00044c59: goto %0001d20c

.address 0x410345
0001d20c: 
.address 0x410345
0001d217: #4069 := low:8[RAX] & 2
.address 0x410345
0001d21a: OF := 0
.address 0x410345
0001d21d: CF := 0
.address 0x410345
0001d220: AF := unknown[bits]:u1
.address 0x410345
0001d223: PF := ~low:1[let $1 = #4069 >> 4 ^ #4069 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410345
0001d226: SF := high:1[#4069]
.address 0x410345
0001d229: ZF := 0 = #4069
.address 0x410347
0001d232: when ~ZF goto %0001d1aa
00044c5a: goto %0001d150

.address 0x410349
0001d150: 
.address 0x410349
0001d166: #4060 := low:32[RBP] - 0x7FFFFFFF
.address 0x410349
0001d169: CF := low:32[RBP] < 0x7FFFFFFF
.address 0x410349
0001d16c: OF := high:1[(low:32[RBP] ^ 0x7FFFFFFF) & (low:32[RBP] ^ #4060)]
.address 0x410349
0001d16f: AF := 0x10 = (0x10 & (#4060 ^ low:32[RBP] ^ 0x7FFFFFFF))
.address 0x410349
0001d172: PF := ~low:1[let $1 = #4060 >> 4 ^ #4060 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410349
0001d175: SF := high:1[#4060]
.address 0x410349
0001d178: ZF := 0 = #4060
.address 0x41034F
0001d181: when ZF goto %00015a7f
00044c5b: goto %0001d187

.address 0x410351
0001d187: 
.address 0x410351
0001d193: #4062 := low:32[RBP]
.address 0x410351
0001d196: RBP := pad:64[low:32[RBP] + 1]
.address 0x410351
0001d199: CF := low:32[RBP] < #4062
.address 0x410351
0001d19c: OF := ~high:1[#4062] & (high:1[#4062] | high:1[low:32[RBP]]) & ~(
high:1[#4062] & high:1[low:32[RBP]])
.address 0x410351
0001d19f: AF := 0x10 = (0x10 & (low:32[RBP] ^ #4062 ^ 1))
.address 0x410351
0001d1a2: PF := ~low:1[let $1 = low:32[RBP] >> 4 ^ low:32[RBP] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410351
0001d1a5: SF := high:1[low:32[RBP]]
.address 0x410351
0001d1a8: ZF := 0 = low:32[RBP]
00044c5c: goto %0001d1aa

.address 0x410354
0001d1aa: 
.address 0x410354
0001d1b5: #4065 := R13 - RBX
.address 0x410354
0001d1b8: CF := R13 < RBX
.address 0x410354
0001d1bb: OF := high:1[(R13 ^ RBX) & (R13 ^ #4065)]
.address 0x410354
0001d1be: AF := 0x10 = (0x10 & (#4065 ^ R13 ^ RBX))
.address 0x410354
0001d1c1: PF := ~low:1[let $1 = #4065 >> 4 ^ #4065 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410354
0001d1c4: SF := high:1[#4065]
.address 0x410354
0001d1c7: ZF := 0 = #4065
.address 0x410357
0001d1d0: when ~ZF goto %0001d0fe
00044c5d: goto %0001d1d6

.address 0x410359
0001d1d6: 
.address 0x410359
0001d1db: goto %00015a7f

.address 0x4101E8
0001d238: 
.address 0x4101E8
0001d243: RBP := 0
.address 0x4101E8
0001d246: AF := unknown[bits]:u1
.address 0x4101E8
0001d249: ZF := 1
.address 0x4101E8
0001d24c: PF := 1
.address 0x4101E8
0001d24f: OF := 0
.address 0x4101E8
0001d252: CF := 0
.address 0x4101E8
0001d255: SF := 0
.address 0x4101EA
0001d262: #4071 := RBX - R13
.address 0x4101EA
0001d265: CF := RBX < R13
.address 0x4101EA
0001d268: OF := high:1[(RBX ^ R13) & (RBX ^ #4071)]
.address 0x4101EA
0001d26b: AF := 0x10 = (0x10 & (#4071 ^ RBX ^ R13))
.address 0x4101EA
0001d26e: PF := ~low:1[let $1 = #4071 >> 4 ^ #4071 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4101EA
0001d271: SF := high:1[#4071]
.address 0x4101EA
0001d274: ZF := 0 = #4071
.address 0x4101ED
0001d27d: when ~CF goto %00015a7f
00044c5e: goto %0001d283

.address 0x4101F3
0001d283: 
.address 0x4101F3
0001d288: R12 := low:64[RSP + 0x20]
.address 0x4101F8
0001d28f: R14 := low:64[RSP + 0x1C]
.address 0x4101FD
0001d296: goto %0001cbe6

.address 0x41021B
0001cbe6: 
.address 0x41021B
0001cbeb: RAX := pad:64[pad:32[mem[RBX]]]
.address 0x41021E
0001cbf8: #3995 := low:8[RAX] - 0x3F
.address 0x41021E
0001cbfb: CF := low:8[RAX] < 0x3F
.address 0x41021E
0001cbfe: OF := high:1[(low:8[RAX] ^ 0x3F) & (low:8[RAX] ^ #3995)]
.address 0x41021E
0001cc01: AF := 0x10 = (0x10 & (#3995 ^ low:8[RAX] ^ 0x3F))
.address 0x41021E
0001cc04: PF := ~low:1[let $1 = #3995 >> 4 ^ #3995 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41021E
0001cc07: SF := high:1[#3995]
.address 0x41021E
0001cc0a: ZF := 0 = #3995
.address 0x410220
0001cc14: when ZF | (SF | OF) & ~(SF & OF) goto %0001cc0e
00044c5f: goto %0001cff9

.address 0x410222
0001cff9: 
.address 0x410222
0001d004: #4045 := low:8[RAX] - 0x41
.address 0x410222
0001d007: CF := low:8[RAX] < 0x41
.address 0x410222
0001d00a: OF := high:1[(low:8[RAX] ^ 0x41) & (low:8[RAX] ^ #4045)]
.address 0x410222
0001d00d: AF := 0x10 = (0x10 & (#4045 ^ low:8[RAX] ^ 0x41))
.address 0x410222
0001d010: PF := ~low:1[let $1 = #4045 >> 4 ^ #4045 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410222
0001d013: SF := high:1[#4045]
.address 0x410222
0001d016: ZF := 0 = #4045
.address 0x410224
0001d01f: when (SF | OF) & ~(SF & OF) goto %0001cccf
00044c60: goto %0001d025

.address 0x410226
0001d025: 
.address 0x410226
0001d030: #4047 := low:8[RAX] - 0x5F
.address 0x410226
0001d033: CF := low:8[RAX] < 0x5F
.address 0x410226
0001d036: OF := high:1[(low:8[RAX] ^ 0x5F) & (low:8[RAX] ^ #4047)]
.address 0x410226
0001d039: AF := 0x10 = (0x10 & (#4047 ^ low:8[RAX] ^ 0x5F))
.address 0x410226
0001d03c: PF := ~low:1[let $1 = #4047 >> 4 ^ #4047 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410226
0001d03f: SF := high:1[#4047]
.address 0x410226
0001d042: ZF := 0 = #4047
.address 0x410228
0001d04b: when ZF | (SF | OF) & ~(SF & OF) goto %0001cc3a
00044c61: goto %0001d051

.address 0x41022A
0001d051: 
.address 0x41022A
0001d05d: #4049 := low:32[RAX]
.address 0x41022A
0001d060: RAX := pad:64[low:32[RAX] - 0x61]
.address 0x41022A
0001d063: CF := #4049 < 0x61
.address 0x41022A
0001d066: OF := high:1[(#4049 ^ 0x61) & (#4049 ^ low:32[RAX])]
.address 0x41022A
0001d069: AF := 0x10 = (0x10 & (low:32[RAX] ^ #4049 ^ 0x61))
.address 0x41022A
0001d06c: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41022A
0001d06f: SF := high:1[low:32[RAX]]
.address 0x41022A
0001d072: ZF := 0 = low:32[RAX]
.address 0x41022D
0001d07f: #4052 := low:8[RAX] - 0x1D
.address 0x41022D
0001d082: CF := low:8[RAX] < 0x1D
.address 0x41022D
0001d085: OF := high:1[(low:8[RAX] ^ 0x1D) & (low:8[RAX] ^ #4052)]
.address 0x41022D
0001d088: AF := 0x10 = (0x10 & (#4052 ^ low:8[RAX] ^ 0x1D))
.address 0x41022D
0001d08b: PF := ~low:1[let $1 = #4052 >> 4 ^ #4052 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41022D
0001d08e: SF := high:1[#4052]
.address 0x41022D
0001d091: ZF := 0 = #4052
.address 0x41022F
0001d09a: when CF | ZF goto %0001cc3a
00044c62: goto %0001cccf

.address 0x410200
0001cc0e: 
.address 0x410200
0001cc24: #3997 := low:8[RAX] - 0x25
.address 0x410200
0001cc27: CF := low:8[RAX] < 0x25
.address 0x410200
0001cc2a: OF := high:1[(low:8[RAX] ^ 0x25) & (low:8[RAX] ^ #3997)]
.address 0x410200
0001cc2d: AF := 0x10 = (0x10 & (#3997 ^ low:8[RAX] ^ 0x25))
.address 0x410200
0001cc30: PF := ~low:1[let $1 = #3997 >> 4 ^ #3997 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410200
0001cc33: SF := high:1[#3997]
.address 0x410200
0001cc36: ZF := 0 = #3997
.address 0x410202
0001cc40: when ~((SF | OF) & ~(SF & OF)) goto %0001cc3a
00044c63: goto %0001cc8b

.address 0x410204
0001cc8b: 
.address 0x410204
0001cc97: #4005 := low:32[RAX]
.address 0x410204
0001cc9a: RAX := pad:64[low:32[RAX] - 0x20]
.address 0x410204
0001cc9d: CF := #4005 < 0x20
.address 0x410204
0001cca0: OF := high:1[(#4005 ^ 0x20) & (#4005 ^ low:32[RAX])]
.address 0x410204
0001cca3: AF := 0x10 = (0x10 & (low:32[RAX] ^ #4005 ^ 0x20))
.address 0x410204
0001cca6: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410204
0001cca9: SF := high:1[low:32[RAX]]
.address 0x410204
0001ccac: ZF := 0 = low:32[RAX]
.address 0x410207
0001ccb9: #4008 := low:8[RAX] - 3
.address 0x410207
0001ccbc: CF := low:8[RAX] < 3
.address 0x410207
0001ccbf: OF := high:1[(low:8[RAX] ^ 3) & (low:8[RAX] ^ #4008)]
.address 0x410207
0001ccc2: AF := 0x10 = (0x10 & (#4008 ^ low:8[RAX] ^ 3))
.address 0x410207
0001ccc5: PF := ~low:1[let $1 = #4008 >> 4 ^ #4008 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410207
0001ccc8: SF := high:1[#4008]
.address 0x410207
0001cccb: ZF := 0 = #4008
.address 0x410209
0001ccd5: when ~(CF | ZF) goto %0001cccf
00044c64: goto %0001cc3a

.address 0x410231
0001cccf: 
.address 0x410231
0001ccdf: mem := mem with [R12, el]:u64 <- 0
.address 0x410239
0001cce7: goto %0001cce3

.address 0x410260
0001cce3: 
.address 0x410260
0001cced: RDX := R13
.address 0x410263
0001ccf4: RCX := R12
.address 0x410266
0001ccfb: RSI := RBX
.address 0x410269
0001cd0a: #4010 := RDX
.address 0x410269
0001cd0d: #4011 := RBX
.address 0x410269
0001cd10: RDX := RDX - RBX
.address 0x410269
0001cd13: CF := #4010 < #4011
.address 0x410269
0001cd16: OF := high:1[(#4010 ^ #4011) & (#4010 ^ RDX)]
.address 0x410269
0001cd19: AF := 0x10 = (0x10 & (RDX ^ #4010 ^ #4011))
.address 0x410269
0001cd1c: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410269
0001cd1f: SF := high:1[RDX]
.address 0x410269
0001cd22: ZF := 0 = RDX
.address 0x41026C
0001cd29: RDI := R14
.address 0x41026F
0001cd32: RSP := RSP - 8
.address 0x41026F
0001cd35: mem := mem with [RSP, el]:u64 <- 0x410274
.address 0x41026F
0001cd38: call @sub_415310 with return %0001cd3a

.address 0x410274
0001cd3a: 
.address 0x410274
0001cd45: #4013 := RAX - 0xFFFFFFFFFFFFFFFF
.address 0x410274
0001cd48: CF := RAX < 0xFFFFFFFFFFFFFFFF
.address 0x410274
0001cd4b: OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ #4013)]
.address 0x410274
0001cd4e: AF := 0x10 = (0x10 & (#4013 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
.address 0x410274
0001cd51: PF := ~low:1[let $1 = #4013 >> 4 ^ #4013 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410274
0001cd54: SF := high:1[#4013]
.address 0x410274
0001cd57: ZF := 0 = #4013
.address 0x410278
0001cd5e: R15 := RAX
.address 0x41027B
0001cd68: when ZF goto %0001cd62
00044c65: goto %0001cd9c

.address 0x4102C8
0001cd62: 
.address 0x4102C8
0001cd78: #4015 := mem[RSP + 0xC] & 1
.address 0x4102C8
0001cd7b: OF := 0
.address 0x4102C8
0001cd7e: CF := 0
.address 0x4102C8
0001cd81: AF := unknown[bits]:u1
.address 0x4102C8
0001cd84: PF := ~low:1[let $1 = #4015 >> 4 ^ #4015 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4102C8
0001cd87: SF := high:1[#4015]
.address 0x4102C8
0001cd8a: ZF := 0 = #4015
.address 0x4102CD
0001cd93: when ZF goto %0001cc3a
00044c66: goto %0001cd99

.address 0x4102D3
0001cd99: 
00044c67: goto %0001cb77

.address 0x41027D
0001cd9c: 
.address 0x41027D
0001cda7: #4017 := RAX - 0xFFFFFFFFFFFFFFFE
.address 0x41027D
0001cdaa: CF := RAX < 0xFFFFFFFFFFFFFFFE
.address 0x41027D
0001cdad: OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFE) & (RAX ^ #4017)]
.address 0x41027D
0001cdb0: AF := 0x10 = (0x10 & (#4017 ^ RAX ^ 0xFFFFFFFFFFFFFFFE))
.address 0x41027D
0001cdb3: PF := ~low:1[let $1 = #4017 >> 4 ^ #4017 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41027D
0001cdb6: SF := high:1[#4017]
.address 0x41027D
0001cdb9: ZF := 0 = #4017
.address 0x410281
0001cdc2: when ZF goto %0001cb56
00044c68: goto %0001cdc8

.address 0x410300
0001cb56: 
.address 0x410300
0001cb61: #3988 := mem[RSP + 0xC] & 1
.address 0x410300
0001cb64: OF := 0
.address 0x410300
0001cb67: CF := 0
.address 0x410300
0001cb6a: AF := unknown[bits]:u1
.address 0x410300
0001cb6d: PF := ~low:1[let $1 = #3988 >> 4 ^ #3988 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410300
0001cb70: SF := high:1[#3988]
.address 0x410300
0001cb73: ZF := 0 = #3988
.address 0x410305
0001cb7d: when ~ZF goto %0001cb77
00044c69: goto %0001cb89

.address 0x410307
0001cb89: 
.address 0x410307
0001cb95: #3990 := low:32[RBP]
.address 0x410307
0001cb98: RBP := pad:64[low:32[RBP] + 1]
.address 0x410307
0001cb9b: CF := low:32[RBP] < #3990
.address 0x410307
0001cb9e: OF := ~high:1[#3990] & (high:1[#3990] | high:1[low:32[RBP]]) & ~(
high:1[#3990] & high:1[low:32[RBP]])
.address 0x410307
0001cba1: AF := 0x10 = (0x10 & (low:32[RBP] ^ #3990 ^ 1))
.address 0x410307
0001cba4: PF := ~low:1[let $1 = low:32[RBP] >> 4 ^ low:32[RBP] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410307
0001cba7: SF := high:1[low:32[RBP]]
.address 0x410307
0001cbaa: ZF := 0 = low:32[RBP]
.address 0x41030A
0001cbb1: RBX := R13
.address 0x41030D
0001cbb9: goto %0001cbb5

.address 0x410283
0001cdc8: 
.address 0x410283
0001cdcd: RDI := pad:64[mem[RSP + 0x1C, el]:u32]
.address 0x410287
0001cdda: #4019 := RAX
.address 0x410287
0001cddd: OF := 0
.address 0x410287
0001cde0: CF := 0
.address 0x410287
0001cde3: AF := unknown[bits]:u1
.address 0x410287
0001cde6: PF := ~low:1[let $1 = #4019 >> 4 ^ #4019 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410287
0001cde9: SF := high:1[#4019]
.address 0x410287
0001cdec: ZF := 0 = #4019
.address 0x41028A
0001cdf3: RAX := 1
.address 0x41028F
0001cdfa: R15 := if ZF then RAX else R15
.address 0x410293
0001ce03: RSP := RSP - 8
.address 0x410293
0001ce06: mem := mem with [RSP, el]:u64 <- 0x410298
.address 0x410293
0001ce09: call @sub_403c00 with return %0001ce0b

.address 0x410298
0001ce0b: 
.address 0x410298
0001ce16: #4021 := low:32[RAX]
.address 0x410298
0001ce19: OF := 0
.address 0x410298
0001ce1c: CF := 0
.address 0x410298
0001ce1f: AF := unknown[bits]:u1
.address 0x410298
0001ce22: PF := ~low:1[let $1 = #4021 >> 4 ^ #4021 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410298
0001ce25: SF := high:1[#4021]
.address 0x410298
0001ce28: ZF := 0 = #4021
.address 0x41029A
0001ce32: when ~SF goto %0001ce2c
00044c6a: goto %0001cf2f

.address 0x41029C
0001cf2f: 
.address 0x41029C
0001cf3a: #4036 := mem[RSP + 0xC] & 2
.address 0x41029C
0001cf3d: OF := 0
.address 0x41029C
0001cf40: CF := 0
.address 0x41029C
0001cf43: AF := unknown[bits]:u1
.address 0x41029C
0001cf46: PF := ~low:1[let $1 = #4036 >> 4 ^ #4036 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41029C
0001cf49: SF := high:1[#4036]
.address 0x41029C
0001cf4c: ZF := 0 = #4036
.address 0x4102A1
0001cf55: when ~ZF goto %0001cb77
00044c6b: goto %0001cf5b

.address 0x4102D8
0001cb77: 
.address 0x4102D8
0001cb87: RBP := 0xFFFFFFFF
00044c6c: goto %00015a7f

.address 0x4102A3
0001cf5b: 
.address 0x4102A3
0001cf60: RDI := pad:64[mem[RSP + 0x1C, el]:u32]
.address 0x4102A7
0001cf69: RSP := RSP - 8
.address 0x4102A7
0001cf6c: mem := mem with [RSP, el]:u64 <- 0x4102AC
.address 0x4102A7
0001cf6f: call @sub_403870 with return %0001cf71

.address 0x4102AC
0001cf71: 
.address 0x4102AC
0001cf7c: #4038 := low:32[RAX]
.address 0x4102AC
0001cf7f: OF := 0
.address 0x4102AC
0001cf82: CF := 0
.address 0x4102AC
0001cf85: AF := unknown[bits]:u1
.address 0x4102AC
0001cf88: PF := ~low:1[let $1 = #4038 >> 4 ^ #4038 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4102AC
0001cf8b: SF := high:1[#4038]
.address 0x4102AC
0001cf8e: ZF := 0 = #4038
.address 0x4102AE
0001cf97: when ~ZF goto %0001cec6
00044c6d: goto %0001cf9d

.address 0x4102B0
0001cf9d: 
.address 0x4102B0
0001cfa8: #4040 := low:32[RBP] - 0x7FFFFFFF
.address 0x4102B0
0001cfab: CF := low:32[RBP] < 0x7FFFFFFF
.address 0x4102B0
0001cfae: OF := high:1[(low:32[RBP] ^ 0x7FFFFFFF) & (low:32[RBP] ^ #4040)]
.address 0x4102B0
0001cfb1: AF := 0x10 = (0x10 & (#4040 ^ low:32[RBP] ^ 0x7FFFFFFF))
.address 0x4102B0
0001cfb4: PF := ~low:1[let $1 = #4040 >> 4 ^ #4040 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4102B0
0001cfb7: SF := high:1[#4040]
.address 0x4102B0
0001cfba: ZF := 0 = #4040
.address 0x4102B6
0001cfc3: when ZF goto %0001ce86
00044c6e: goto %0001cfc9

.address 0x4102BC
0001cfc9: 
.address 0x4102BC
0001cfd5: #4042 := low:32[RBP]
.address 0x4102BC
0001cfd8: RBP := pad:64[low:32[RBP] + 1]
.address 0x4102BC
0001cfdb: CF := low:32[RBP] < #4042
.address 0x4102BC
0001cfde: OF := ~high:1[#4042] & (high:1[#4042] | high:1[low:32[RBP]]) & ~(
high:1[#4042] & high:1[low:32[RBP]])
.address 0x4102BC
0001cfe1: AF := 0x10 = (0x10 & (low:32[RBP] ^ #4042 ^ 1))
.address 0x4102BC
0001cfe4: PF := ~low:1[let $1 = low:32[RBP] >> 4 ^ low:32[RBP] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4102BC
0001cfe7: SF := high:1[low:32[RBP]]
.address 0x4102BC
0001cfea: ZF := 0 = low:32[RBP]
.address 0x4102BF
0001cff1: goto %0001cec6

.address 0x410240
0001ce2c: 
.address 0x410240
0001ce3c: RCX := 0x7FFFFFFF
.address 0x410245
0001ce4b: #4023 := low:32[RCX]
.address 0x410245
0001ce4e: #4024 := low:32[RBP]
.address 0x410245
0001ce51: RCX := pad:64[low:32[RCX] - low:32[RBP]]
.address 0x410245
0001ce54: CF := #4023 < #4024
.address 0x410245
0001ce57: OF := high:1[(#4023 ^ #4024) & (#4023 ^ low:32[RCX])]
.address 0x410245
0001ce5a: AF := 0x10 = (0x10 & (low:32[RCX] ^ #4023 ^ #4024))
.address 0x410245
0001ce5d: PF := ~low:1[let $1 = low:32[RCX] >> 4 ^ low:32[RCX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410245
0001ce60: SF := high:1[low:32[RCX]]
.address 0x410245
0001ce63: ZF := 0 = low:32[RCX]
.address 0x410247
0001ce70: #4026 := low:32[RCX] - low:32[RAX]
.address 0x410247
0001ce73: CF := low:32[RCX] < low:32[RAX]
.address 0x410247
0001ce76: OF := high:1[(low:32[RCX] ^ low:32[RAX]) & (low:32[RCX] ^ #4026)]
.address 0x410247
0001ce79: AF := 0x10 = (0x10 & (#4026 ^ low:32[RCX] ^ low:32[RAX]))
.address 0x410247
0001ce7c: PF := ~low:1[let $1 = #4026 >> 4 ^ #4026 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410247
0001ce7f: SF := high:1[#4026]
.address 0x410247
0001ce82: ZF := 0 = #4026
.address 0x410249
0001ce8c: when (SF | OF) & ~(SF & OF) goto %0001ce86
00044c6f: goto %0001ce9f

.address 0x410360
0001ce86: 
.address 0x410360
0001ce96: RBP := 0x7FFFFFFF
.address 0x410365
0001ce9d: goto %00015a7f

.address 0x41024F
0001ce9f: 
.address 0x41024F
0001ceac: #4028 := low:32[RBP]
.address 0x41024F
0001ceaf: #4029 := low:32[RAX]
.address 0x41024F
0001ceb2: RBP := pad:64[low:32[RBP] + #4029]
.address 0x41024F
0001ceb5: CF := low:32[RBP] < #4028
.address 0x41024F
0001ceb8: OF := high:1[#4028] = high:1[#4029] & (high:1[#4028] | high:1[low:32[RBP]]) & ~(
high:1[#4028] & high:1[low:32[RBP]])
.address 0x41024F
0001cebb: AF := 0x10 = (0x10 & (low:32[RBP] ^ #4028 ^ #4029))
.address 0x41024F
0001cebe: PF := ~low:1[let $1 = low:32[RBP] >> 4 ^ low:32[RBP] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41024F
0001cec1: SF := high:1[low:32[RBP]]
.address 0x41024F
0001cec4: ZF := 0 = low:32[RBP]
00044c70: goto %0001cec6

.address 0x410251
0001cec6: 
.address 0x410251
0001cecb: RDI := R12
.address 0x410254
0001ceda: #4031 := RBX
.address 0x410254
0001cedd: #4032 := R15
.address 0x410254
0001cee0: RBX := RBX + #4032
.address 0x410254
0001cee3: CF := RBX < #4031
.address 0x410254
0001cee6: OF := high:1[#4031] = high:1[#4032] & (high:1[#4031] | high:1[RBX]) & ~(
high:1[#4031] & high:1[RBX])
.address 0x410254
0001cee9: AF := 0x10 = (0x10 & (RBX ^ #4031 ^ #4032))
.address 0x410254
0001ceec: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410254
0001ceef: SF := high:1[RBX]
.address 0x410254
0001cef2: ZF := 0 = RBX
.address 0x410257
0001cefb: RSP := RSP - 8
.address 0x410257
0001cefe: mem := mem with [RSP, el]:u64 <- 0x41025C
.address 0x410257
0001cf01: call @sub_403e10 with return %0001cf03

.address 0x41025C
0001cf03: 
.address 0x41025C
0001cf0e: #4034 := low:32[RAX]
.address 0x41025C
0001cf11: OF := 0
.address 0x41025C
0001cf14: CF := 0
.address 0x41025C
0001cf17: AF := unknown[bits]:u1
.address 0x41025C
0001cf1a: PF := ~low:1[let $1 = #4034 >> 4 ^ #4034 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41025C
0001cf1d: SF := high:1[#4034]
.address 0x41025C
0001cf20: ZF := 0 = #4034
.address 0x41025E
0001cf29: when ~ZF goto %0001cbb5
00044c71: goto %0001cce3

.address 0x41020B
0001cc3a: 
.address 0x41020B
0001cc51: #3999 := RBX
.address 0x41020B
0001cc54: RBX := RBX + 1
.address 0x41020B
0001cc57: CF := RBX < #3999
.address 0x41020B
0001cc5a: OF := ~high:1[#3999] & (high:1[#3999] | high:1[RBX]) & ~(high:1[#3999] & high:1[RBX])
.address 0x41020B
0001cc5d: AF := 0x10 = (0x10 & (RBX ^ #3999 ^ 1))
.address 0x41020B
0001cc60: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41020B
0001cc63: SF := high:1[RBX]
.address 0x41020B
0001cc66: ZF := 0 = RBX
.address 0x41020F
0001cc74: #4002 := low:32[RBP]
.address 0x41020F
0001cc77: RBP := pad:64[low:32[RBP] + 1]
.address 0x41020F
0001cc7a: CF := low:32[RBP] < #4002
.address 0x41020F
0001cc7d: OF := ~high:1[#4002] & (high:1[#4002] | high:1[low:32[RBP]]) & ~(
high:1[#4002] & high:1[low:32[RBP]])
.address 0x41020F
0001cc80: AF := 0x10 = (0x10 & (low:32[RBP] ^ #4002 ^ 1))
.address 0x41020F
0001cc83: PF := ~low:1[let $1 = low:32[RBP] >> 4 ^ low:32[RBP] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41020F
0001cc86: SF := high:1[low:32[RBP]]
.address 0x41020F
0001cc89: ZF := 0 = low:32[RBP]
00044c72: goto %0001cbb5

.address 0x410212
0001cbb5: 
.address 0x410212
0001cbc5: #3993 := RBX - R13
.address 0x410212
0001cbc8: CF := RBX < R13
.address 0x410212
0001cbcb: OF := high:1[(RBX ^ R13) & (RBX ^ #3993)]
.address 0x410212
0001cbce: AF := 0x10 = (0x10 & (#3993 ^ RBX ^ R13))
.address 0x410212
0001cbd1: PF := ~low:1[let $1 = #3993 >> 4 ^ #3993 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410212
0001cbd4: SF := high:1[#3993]
.address 0x410212
0001cbd7: ZF := 0 = #3993
.address 0x410215
0001cbe0: when ~CF goto %00015a7f
00044c73: goto %0001cbe6

.address 0x4102DD
00015a7f: 
.address 0x4102DD
00015a8f: RSI := mem[RSP + 0x28, el]:u64
.address 0x4102E2
00015a9c: RSI := RSI ^ mem[FS_BASE + 0x28, el]:u64
.address 0x4102E2
00015a9f: OF := 0
.address 0x4102E2
00015aa2: CF := 0
.address 0x4102E2
00015aa5: AF := unknown[bits]:u1
.address 0x4102E2
00015aa8: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4102E2
00015aab: SF := high:1[RSI]
.address 0x4102E2
00015aae: ZF := 0 = RSI
.address 0x4102EB
00015ab5: RAX := pad:64[low:32[RBP]]
.address 0x4102ED
00015abf: when ~ZF goto %00015ab9
00044c74: goto %0001cade

.address 0x41036A
00015ab9: 
.address 0x41036A
00015acb: RSP := RSP - 8
.address 0x41036A
00015ace: mem := mem with [RSP, el]:u64 <- 0x41036F
.address 0x41036A
00015ad1: call @sub_403970 with return %00015ad3

.address 0x41036F
00015ad3: 
00044c75: call @sub_410370 with noreturn

.address 0x4102EF
0001cade: 
.address 0x4102EF
0001caea: #3984 := RSP
.address 0x4102EF
0001caed: RSP := RSP + 0x38
.address 0x4102EF
0001caf0: CF := RSP < #3984
.address 0x4102EF
0001caf3: OF := ~high:1[#3984] & (high:1[#3984] | high:1[RSP]) & ~(high:1[#3984] & high:1[RSP])
.address 0x4102EF
0001caf6: AF := 0x10 = (0x10 & (RSP ^ #3984 ^ 0x38))
.address 0x4102EF
0001caf9: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4102EF
0001cafc: SF := high:1[RSP]
.address 0x4102EF
0001caff: ZF := 0 = RSP
.address 0x4102F3
0001cb07: RBX := mem[RSP, el]:u64
.address 0x4102F3
0001cb0a: RSP := RSP + 8
.address 0x4102F4
0001cb12: RBP := mem[RSP, el]:u64
.address 0x4102F4
0001cb15: RSP := RSP + 8
.address 0x4102F5
0001cb1d: R12 := mem[RSP, el]:u64
.address 0x4102F5
0001cb20: RSP := RSP + 8
.address 0x4102F7
0001cb28: R13 := mem[RSP, el]:u64
.address 0x4102F7
0001cb2b: RSP := RSP + 8
.address 0x4102F9
0001cb33: R14 := mem[RSP, el]:u64
.address 0x4102F9
0001cb36: RSP := RSP + 8
.address 0x4102FB
0001cb3e: R15 := mem[RSP, el]:u64
.address 0x4102FB
0001cb41: RSP := RSP + 8
.address 0x4102FD
0001cb4a: #3987 := mem[RSP, el]:u64
.address 0x4102FD
0001cb4d: RSP := RSP + 8
.address 0x4102FD
0001cb51: call #3987 with noreturn


.address 0x410370
0004442e: sub sub_410370()
.address 0x410370
00015ad6: 
.address 0x410370
00015add: #2853 := RBP
.address 0x410370
00015ae0: RSP := RSP - 8
.address 0x410370
00015ae3: mem := mem with [RSP, el]:u64 <- #2853
.address 0x410371
00015aec: #2854 := RBX
.address 0x410371
00015aef: RSP := RSP - 8
.address 0x410371
00015af2: mem := mem with [RSP, el]:u64 <- #2854
.address 0x410372
00015af9: RBP := pad:64[low:32[RSI]]
.address 0x410374
00015b00: RBX := RDI
.address 0x410377
00015b0e: #2855 := RSP
.address 0x410377
00015b11: RSP := RSP - 8
.address 0x410377
00015b14: CF := #2855 < 8
.address 0x410377
00015b17: OF := high:1[(#2855 ^ 8) & (#2855 ^ RSP)]
.address 0x410377
00015b1a: AF := 0x10 = (0x10 & (RSP ^ #2855 ^ 8))
.address 0x410377
00015b1d: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410377
00015b20: SF := high:1[RSP]
.address 0x410377
00015b23: ZF := 0 = RSP
.address 0x41037B
00015b2c: RSP := RSP - 8
.address 0x41037B
00015b2f: mem := mem with [RSP, el]:u64 <- 0x410380
.address 0x41037B
00015b32: call @sub_403950 with return %00015b34

.address 0x410380
00015b34: 
.address 0x410380
00015b40: #2858 := RSP
.address 0x410380
00015b43: RSP := RSP + 8
.address 0x410380
00015b46: CF := RSP < #2858
.address 0x410380
00015b49: OF := ~high:1[#2858] & (high:1[#2858] | high:1[RSP]) & ~(high:1[#2858] & high:1[RSP])
.address 0x410380
00015b4c: AF := 0x10 = (0x10 & (RSP ^ #2858 ^ 8))
.address 0x410380
00015b4f: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410380
00015b52: SF := high:1[RSP]
.address 0x410380
00015b55: ZF := 0 = RSP
.address 0x410384
00015b5c: RDX := pad:64[low:32[RBP]]
.address 0x410386
00015b63: RDI := RBX
.address 0x410389
00015b6b: RBX := mem[RSP, el]:u64
.address 0x410389
00015b6e: RSP := RSP + 8
.address 0x41038A
00015b76: RBP := mem[RSP, el]:u64
.address 0x41038A
00015b79: RSP := RSP + 8
.address 0x41038B
00015b80: RSI := RAX
.address 0x41038E
00015b87: call @sub_4101b0 with noreturn


.address 0x4103A0
0004442f: sub sub_4103a0()
.address 0x4103A0
00015b8f: 
.address 0x4103A0
00015b96: #2861 := R15
.address 0x4103A0
00015b99: RSP := RSP - 8
.address 0x4103A0
00015b9c: mem := mem with [RSP, el]:u64 <- #2861
.address 0x4103A2
00015ba5: #2862 := R14
.address 0x4103A2
00015ba8: RSP := RSP - 8
.address 0x4103A2
00015bab: mem := mem with [RSP, el]:u64 <- #2862
.address 0x4103A4
00015bb4: #2863 := R13
.address 0x4103A4
00015bb7: RSP := RSP - 8
.address 0x4103A4
00015bba: mem := mem with [RSP, el]:u64 <- #2863
.address 0x4103A6
00015bc3: #2864 := R12
.address 0x4103A6
00015bc6: RSP := RSP - 8
.address 0x4103A6
00015bc9: mem := mem with [RSP, el]:u64 <- #2864
.address 0x4103A8
00015bd0: R13 := RDI
.address 0x4103AB
00015bd9: #2865 := RBP
.address 0x4103AB
00015bdc: RSP := RSP - 8
.address 0x4103AB
00015bdf: mem := mem with [RSP, el]:u64 <- #2865
.address 0x4103AC
00015be8: #2866 := RBX
.address 0x4103AC
00015beb: RSP := RSP - 8
.address 0x4103AC
00015bee: mem := mem with [RSP, el]:u64 <- #2866
.address 0x4103AD
00015bf5: RBX := RCX
.address 0x4103B0
00015c03: #2867 := RSP
.address 0x4103B0
00015c06: RSP := RSP - 0x38
.address 0x4103B0
00015c09: CF := #2867 < 0x38
.address 0x4103B0
00015c0c: OF := high:1[(#2867 ^ 0x38) & (#2867 ^ RSP)]
.address 0x4103B0
00015c0f: AF := 0x10 = (0x10 & (RSP ^ #2867 ^ 0x38))
.address 0x4103B0
00015c12: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4103B0
00015c15: SF := high:1[RSP]
.address 0x4103B0
00015c18: ZF := 0 = RSP
.address 0x4103B4
00015c25: #2870 := RSI - 2
.address 0x4103B4
00015c28: CF := RSI < 2
.address 0x4103B4
00015c2b: OF := high:1[(RSI ^ 2) & (RSI ^ #2870)]
.address 0x4103B4
00015c2e: AF := 0x10 = (0x10 & (#2870 ^ RSI ^ 2))
.address 0x4103B4
00015c31: PF := ~low:1[let $1 = #2870 >> 4 ^ #2870 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4103B4
00015c34: SF := high:1[#2870]
.address 0x4103B4
00015c37: ZF := 0 = #2870
.address 0x4103B8
00015c3e: mem := mem with [RSP, el]:u64 <- RSI
.address 0x4103BC
00015c45: mem := mem with [RSP + 0x10, el]:u64 <- RDX
.address 0x4103C1
00015c4f: when ~(CF | ZF) goto %00015c49
00044c76: goto %0001ca67

.address 0x4103F0
00015c49: 
.address 0x4103F0
00015c59: RAX := mem[RSP, el]:u64
.address 0x4103F4
00015c60: R15 := mem[RSP + 0x10, el]:u64
.address 0x4103F9
00015c67: RCX := RAX
.address 0x4103FC
00015c6e: RSI := RAX
.address 0x4103FF
00015c75: RDX := R15
.address 0x410402
00015c83: #2872 := RCX
.address 0x410402
00015c86: RCX := RCX >> 1
.address 0x410402
00015c89: CF := high:1[#2872 << 0x3F]
.address 0x410402
00015c8c: SF := high:1[RCX]
.address 0x410402
00015c8f: ZF := 0 = RCX
.address 0x410402
00015c92: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410402
00015c95: AF := unknown[bits]:u1
.address 0x410402
00015c98: OF := high:1[#2872]
.address 0x410405
00015c9f: RDI := low:64[RDI + (RCX << 3)]
.address 0x410409
00015cae: #2874 := RSI
.address 0x410409
00015cb1: #2875 := RCX
.address 0x410409
00015cb4: RSI := RSI - RCX
.address 0x410409
00015cb7: CF := #2874 < #2875
.address 0x410409
00015cba: OF := high:1[(#2874 ^ #2875) & (#2874 ^ RSI)]
.address 0x410409
00015cbd: AF := 0x10 = (0x10 & (RSI ^ #2874 ^ #2875))
.address 0x410409
00015cc0: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410409
00015cc3: SF := high:1[RSI]
.address 0x410409
00015cc6: ZF := 0 = RSI
.address 0x41040C
00015ccd: R14 := RCX
.address 0x41040F
00015cd4: mem := mem with [RSP + 0x18, el]:u64 <- RCX
.address 0x410414
00015cdb: RCX := RBX
.address 0x410417
00015ce2: mem := mem with [RSP + 0x28, el]:u64 <- RDI
.address 0x41041C
00015ceb: RSP := RSP - 8
.address 0x41041C
00015cee: mem := mem with [RSP, el]:u64 <- 0x410421
.address 0x41041C
00015cf1: call @sub_4103a0 with return %00015cf3

.address 0x410421
00015cf3: 
.address 0x410421
00015cfe: #2877 := R14 - 1
.address 0x410421
00015d01: CF := R14 < 1
.address 0x410421
00015d04: OF := high:1[(R14 ^ 1) & (R14 ^ #2877)]
.address 0x410421
00015d07: AF := 0x10 = (0x10 & (#2877 ^ R14 ^ 1))
.address 0x410421
00015d0a: PF := ~low:1[let $1 = #2877 >> 4 ^ #2877 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410421
00015d0d: SF := high:1[#2877]
.address 0x410421
00015d10: ZF := 0 = #2877
.address 0x410425
00015d1a: when ~ZF goto %00015d14
00044c77: goto %0001ca59

.address 0x4104F0
00015d14: 
.address 0x4104F0
00015d24: R14 := mem[RSP, el]:u64
.address 0x4104F4
00015d2b: R12 := mem[RSP + 0x10, el]:u64
.address 0x4104F9
00015d32: RCX := RBX
.address 0x4104FC
00015d39: RSI := mem[RSP + 0x18, el]:u64
.address 0x410501
00015d47: #2879 := R14
.address 0x410501
00015d4a: R14 := R14 >> 2
.address 0x410501
00015d4d: CF := high:1[#2879 << 0x3E]
.address 0x410501
00015d50: SF := high:1[R14]
.address 0x410501
00015d53: ZF := 0 = R14
.address 0x410501
00015d56: PF := ~low:1[let $1 = R14 >> 4 ^ R14 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410501
00015d59: AF := unknown[bits]:u1
.address 0x410501
00015d5c: OF := unknown[bits]:u1
.address 0x410505
00015d63: RDX := R12
.address 0x410508
00015d6a: R15 := low:64[R13 + (R14 << 3)]
.address 0x41050D
00015d79: #2881 := RSI
.address 0x41050D
00015d7c: #2882 := R14
.address 0x41050D
00015d7f: RSI := RSI - R14
.address 0x41050D
00015d82: CF := #2881 < #2882
.address 0x41050D
00015d85: OF := high:1[(#2881 ^ #2882) & (#2881 ^ RSI)]
.address 0x41050D
00015d88: AF := 0x10 = (0x10 & (RSI ^ #2881 ^ #2882))
.address 0x41050D
00015d8b: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41050D
00015d8e: SF := high:1[RSI]
.address 0x41050D
00015d91: ZF := 0 = RSI
.address 0x410510
00015d98: mem := mem with [RSP + 0x20, el]:u64 <- R14
.address 0x410515
00015d9f: RBP := R14
.address 0x410518
00015da6: RDI := R15
.address 0x41051B
00015daf: RSP := RSP - 8
.address 0x41051B
00015db2: mem := mem with [RSP, el]:u64 <- 0x410520
.address 0x41051B
00015db5: call @sub_4103a0 with return %00015db7

.address 0x410520
00015db7: 
.address 0x410520
00015dbc: RSI := R14
.address 0x410523
00015dc3: RCX := RBX
.address 0x410526
00015dca: RDX := R12
.address 0x410529
00015dd1: RDI := R13
.address 0x41052C
00015dda: RSP := RSP - 8
.address 0x41052C
00015ddd: mem := mem with [RSP, el]:u64 <- 0x410531
.address 0x41052C
00015de0: call @sub_4103a0 with return %00015de2

.address 0x410531
00015de2: 
.address 0x410531
00015de7: R14 := mem[R13, el]:u64
.address 0x410535
00015dee: R15 := mem[R15, el]:u64
.address 0x410538
00015df5: mem := mem with [RSP + 8, el]:u64 <- 0
00044c78: goto %00015dfa

.address 0x410548
00015dfa: 
.address 0x410548
00015dff: RSI := R15
.address 0x41054B
00015e06: RDI := R14
.address 0x41054E
00015e14: #2884 := R12
.address 0x41054E
00015e17: R12 := R12 + 8
.address 0x41054E
00015e1a: CF := R12 < #2884
.address 0x41054E
00015e1d: OF := ~high:1[#2884] & (high:1[#2884] | high:1[R12]) & ~(high:1[#2884] & high:1[R12])
.address 0x41054E
00015e20: AF := 0x10 = (0x10 & (R12 ^ #2884 ^ 8))
.address 0x41054E
00015e23: PF := ~low:1[let $1 = R12 >> 4 ^ R12 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41054E
00015e26: SF := high:1[R12]
.address 0x41054E
00015e29: ZF := 0 = R12
.address 0x410552
00015e33: #2887 := RBX
.address 0x410552
00015e36: RSP := RSP - 8
.address 0x410552
00015e39: mem := mem with [RSP, el]:u64 <- 0x410554
.address 0x410552
00015e3d: call #2887 with return %00015e3f

.address 0x410554
00015e3f: 
.address 0x410554
00015e4a: #2888 := low:32[RAX]
.address 0x410554
00015e4d: OF := 0
.address 0x410554
00015e50: CF := 0
.address 0x410554
00015e53: AF := unknown[bits]:u1
.address 0x410554
00015e56: PF := ~low:1[let $1 = #2888 >> 4 ^ #2888 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410554
00015e59: SF := high:1[#2888]
.address 0x410554
00015e5c: ZF := 0 = #2888
.address 0x410556
00015e66: when ZF | (SF | OF) & ~(SF & OF) goto %00015e60
00044c79: goto %0001c98b

.address 0x410558
0001c98b: 
.address 0x410558
0001c997: #3970 := RBP
.address 0x410558
0001c99a: RBP := RBP + 1
.address 0x410558
0001c99d: CF := RBP < #3970
.address 0x410558
0001c9a0: OF := ~high:1[#3970] & (high:1[#3970] | high:1[RBP]) & ~(high:1[#3970] & high:1[RBP])
.address 0x410558
0001c9a3: AF := 0x10 = (0x10 & (RBP ^ #3970 ^ 1))
.address 0x410558
0001c9a6: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410558
0001c9a9: SF := high:1[RBP]
.address 0x410558
0001c9ac: ZF := 0 = RBP
.address 0x41055C
0001c9b9: #3973 := mem[RSP + 0x18, el]:u64 - RBP
.address 0x41055C
0001c9bc: CF := mem[RSP + 0x18, el]:u64 < RBP
.address 0x41055C
0001c9bf: OF := high:1[(mem[RSP + 0x18, el]:u64 ^ RBP) & (mem[RSP + 0x18, el]:u64 ^ #3973)]
.address 0x41055C
0001c9c2: AF := 0x10 = (0x10 & (#3973 ^ mem[RSP + 0x18, el]:u64 ^ RBP))
.address 0x41055C
0001c9c5: PF := ~low:1[let $1 = #3973 >> 4 ^ #3973 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41055C
0001c9c8: SF := high:1[#3973]
.address 0x41055C
0001c9cb: ZF := 0 = #3973
.address 0x410561
0001c9d2: mem := mem with [R12 - 8, el]:u64 <- R15
.address 0x410566
0001c9db: when ZF goto %00015edd
00044c7a: goto %0001c9e1

.address 0x410568
0001c9e1: 
.address 0x410568
0001c9e6: R15 := mem[R13 + (RBP << 3), el]:u64
.address 0x41056D
0001c9ed: RDI := R14
.address 0x410570
0001c9fb: #3975 := R12
.address 0x410570
0001c9fe: R12 := R12 + 8
.address 0x410570
0001ca01: CF := R12 < #3975
.address 0x410570
0001ca04: OF := ~high:1[#3975] & (high:1[#3975] | high:1[R12]) & ~(high:1[#3975] & high:1[R12])
.address 0x410570
0001ca07: AF := 0x10 = (0x10 & (R12 ^ #3975 ^ 8))
.address 0x410570
0001ca0a: PF := ~low:1[let $1 = R12 >> 4 ^ R12 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410570
0001ca0d: SF := high:1[R12]
.address 0x410570
0001ca10: ZF := 0 = R12
.address 0x410574
0001ca17: RSI := R15
.address 0x410577
0001ca21: #3978 := RBX
.address 0x410577
0001ca24: RSP := RSP - 8
.address 0x410577
0001ca27: mem := mem with [RSP, el]:u64 <- 0x410579
.address 0x410577
0001ca2b: call #3978 with return %0001ca2d

.address 0x410579
0001ca2d: 
.address 0x410579
0001ca38: #3979 := low:32[RAX]
.address 0x410579
0001ca3b: OF := 0
.address 0x410579
0001ca3e: CF := 0
.address 0x410579
0001ca41: AF := unknown[bits]:u1
.address 0x410579
0001ca44: PF := ~low:1[let $1 = #3979 >> 4 ^ #3979 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410579
0001ca47: SF := high:1[#3979]
.address 0x410579
0001ca4a: ZF := 0 = #3979
.address 0x41057B
0001ca53: when ~(ZF | (SF | OF) & ~(SF & OF)) goto %0001c98b
00044c7b: goto %00015e60

.address 0x41057D
00015e60: 
.address 0x41057D
00015e77: #2890 := mem[RSP + 8, el]:u64
.address 0x41057D
00015e7a: mem := mem with [RSP + 8, el]:u64 <- mem[RSP + 8, el]:u64 + 1
.address 0x41057D
00015e7d: CF := mem[RSP + 8, el]:u64 < #2890
.address 0x41057D
00015e80: OF := ~high:1[#2890] & (high:1[#2890] | high:1[mem[RSP + 8, el]:u64]) & ~(
high:1[#2890] & high:1[mem[RSP + 8, el]:u64])
.address 0x41057D
00015e83: AF := 0x10 = (0x10 & (mem[RSP + 8, el]:u64 ^ #2890 ^ 1))
.address 0x41057D
00015e86: PF := ~low:1[let $1 = mem[RSP + 8, el]:u64 >> 4 ^ mem[RSP + 8, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41057D
00015e89: SF := high:1[mem[RSP + 8, el]:u64]
.address 0x41057D
00015e8c: ZF := 0 = mem[RSP + 8, el]:u64
.address 0x410583
00015e93: mem := mem with [R12 - 8, el]:u64 <- R14
.address 0x410588
00015e9a: RAX := mem[RSP + 8, el]:u64
.address 0x41058D
00015ea7: #2893 := mem[RSP + 0x20, el]:u64 - RAX
.address 0x41058D
00015eaa: CF := mem[RSP + 0x20, el]:u64 < RAX
.address 0x41058D
00015ead: OF := high:1[(mem[RSP + 0x20, el]:u64 ^ RAX) & (mem[RSP + 0x20, el]:u64 ^ #2893)]
.address 0x41058D
00015eb0: AF := 0x10 = (0x10 & (#2893 ^ mem[RSP + 0x20, el]:u64 ^ RAX))
.address 0x41058D
00015eb3: PF := ~low:1[let $1 = #2893 >> 4 ^ #2893 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41058D
00015eb6: SF := high:1[#2893]
.address 0x41058D
00015eb9: ZF := 0 = #2893
.address 0x410592
00015ec3: when ZF goto %00015ebd
00044c7c: goto %0001c97a

.address 0x4105A0
00015ebd: 
.address 0x4105A0
00015ecd: RAX := mem[RSP + 0x18, el]:u64
.address 0x4105A5
00015ed4: mem := mem with [RSP + 8, el]:u64 <- RBP
.address 0x4105AA
00015edb: mem := mem with [RSP + 0x20, el]:u64 <- RAX
00044c7d: goto %00015edd

.address 0x4105AF
00015edd: 
.address 0x4105AF
00015ee2: RAX := mem[RSP + 8, el]:u64
.address 0x4105B4
00015ee9: RDX := mem[RSP + 0x20, el]:u64
.address 0x4105B9
00015ef0: RDI := R12
.address 0x4105BC
00015eff: #2895 := RDX
.address 0x4105BC
00015f02: #2896 := RAX
.address 0x4105BC
00015f05: RDX := RDX - RAX
.address 0x4105BC
00015f08: CF := #2895 < #2896
.address 0x4105BC
00015f0b: OF := high:1[(#2895 ^ #2896) & (#2895 ^ RDX)]
.address 0x4105BC
00015f0e: AF := 0x10 = (0x10 & (RDX ^ #2895 ^ #2896))
.address 0x4105BC
00015f11: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4105BC
00015f14: SF := high:1[RDX]
.address 0x4105BC
00015f17: ZF := 0 = RDX
.address 0x4105BF
00015f1e: RSI := low:64[R13 + (RAX << 3)]
.address 0x4105C4
00015f2c: #2898 := RDX
.address 0x4105C4
00015f2f: RDX := RDX << 3
.address 0x4105C4
00015f32: CF := low:1[#2898 >> 0x3D]
.address 0x4105C4
00015f35: SF := high:1[RDX]
.address 0x4105C4
00015f38: ZF := 0 = RDX
.address 0x4105C4
00015f3b: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4105C4
00015f3e: AF := unknown[bits]:u1
.address 0x4105C4
00015f41: OF := unknown[bits]:u1
.address 0x4105C8
00015f4a: RSP := RSP - 8
.address 0x4105C8
00015f4d: mem := mem with [RSP, el]:u64 <- 0x4105CD
.address 0x4105C8
00015f50: call @sub_403b80 with return %00015f52

.address 0x4105CD
00015f52: 
.address 0x4105CD
00015f57: RAX := mem[RSP + 0x10, el]:u64
.address 0x4105D2
00015f5e: R14 := mem[RAX, el]:u64
.address 0x4105D5
00015f66: goto %00015f62

.address 0x410594
0001c97a: 
.address 0x410594
0001c97f: R14 := mem[R13 + (RAX << 3), el]:u64
.address 0x410599
0001c986: goto %00015dfa

.address 0x41042B
0001ca59: 
.address 0x41042B
0001ca5e: R14 := mem[R13, el]:u64
.address 0x41042F
0001ca65: mem := mem with [R15, el]:u64 <- R14
00044c7e: goto %00015f62

.address 0x410432
00015f62: 
.address 0x410432
00015f6c: RAX := mem[RSP + 0x28, el]:u64
.address 0x410437
00015f73: R15 := mem[RSP + 0x18, el]:u64
.address 0x41043C
00015f80: R12 := 0
.address 0x41043C
00015f83: AF := unknown[bits]:u1
.address 0x41043C
00015f86: ZF := 1
.address 0x41043C
00015f89: PF := 1
.address 0x41043C
00015f8c: OF := 0
.address 0x41043C
00015f8f: CF := 0
.address 0x41043C
00015f92: SF := 0
.address 0x41043F
00015f99: mem := mem with [RSP + 8, el]:u64 <- 0
.address 0x410448
00015fa0: RBP := mem[RAX, el]:u64
00044c7f: goto %00015fa5

.address 0x410450
00015fa5: 
.address 0x410450
00015faa: RSI := RBP
.address 0x410453
00015fb1: RDI := R14
.address 0x410456
00015fbf: #2900 := R12
.address 0x410456
00015fc2: R12 := R12 + 1
.address 0x410456
00015fc5: CF := R12 < #2900
.address 0x410456
00015fc8: OF := ~high:1[#2900] & (high:1[#2900] | high:1[R12]) & ~(high:1[#2900] & high:1[R12])
.address 0x410456
00015fcb: AF := 0x10 = (0x10 & (R12 ^ #2900 ^ 1))
.address 0x410456
00015fce: PF := ~low:1[let $1 = R12 >> 4 ^ R12 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410456
00015fd1: SF := high:1[R12]
.address 0x410456
00015fd4: ZF := 0 = R12
.address 0x41045A
00015fde: #2903 := RBX
.address 0x41045A
00015fe1: RSP := RSP - 8
.address 0x41045A
00015fe4: mem := mem with [RSP, el]:u64 <- 0x41045C
.address 0x41045A
00015fe8: call #2903 with return %00015fea

.address 0x41045C
00015fea: 
.address 0x41045C
00015ff5: #2904 := low:32[RAX]
.address 0x41045C
00015ff8: OF := 0
.address 0x41045C
00015ffb: CF := 0
.address 0x41045C
00015ffe: AF := unknown[bits]:u1
.address 0x41045C
00016001: PF := ~low:1[let $1 = #2904 >> 4 ^ #2904 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41045C
00016004: SF := high:1[#2904]
.address 0x41045C
00016007: ZF := 0 = #2904
.address 0x41045E
00016011: when ZF | (SF | OF) & ~(SF & OF) goto %0001600b
00044c80: goto %000161c3

.address 0x410460
000161c3: 
.address 0x410460
000161cf: #2921 := R15
.address 0x410460
000161d2: R15 := R15 + 1
.address 0x410460
000161d5: CF := R15 < #2921
.address 0x410460
000161d8: OF := ~high:1[#2921] & (high:1[#2921] | high:1[R15]) & ~(high:1[#2921] & high:1[R15])
.address 0x410460
000161db: AF := 0x10 = (0x10 & (R15 ^ #2921 ^ 1))
.address 0x410460
000161de: PF := ~low:1[let $1 = R15 >> 4 ^ R15 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410460
000161e1: SF := high:1[R15]
.address 0x410460
000161e4: ZF := 0 = R15
.address 0x410464
000161f1: #2924 := mem[RSP, el]:u64 - R15
.address 0x410464
000161f4: CF := mem[RSP, el]:u64 < R15
.address 0x410464
000161f7: OF := high:1[(mem[RSP, el]:u64 ^ R15) & (mem[RSP, el]:u64 ^ #2924)]
.address 0x410464
000161fa: AF := 0x10 = (0x10 & (#2924 ^ mem[RSP, el]:u64 ^ R15))
.address 0x410464
000161fd: PF := ~low:1[let $1 = #2924 >> 4 ^ #2924 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410464
00016200: SF := high:1[#2924]
.address 0x410464
00016203: ZF := 0 = #2924
.address 0x410468
0001620a: mem := mem with [R13 + (R12 << 3) - 8, el]:u64 <- RBP
.address 0x41046D
00016213: when ZF goto %00016103
00044c81: goto %00016219

.address 0x4104B0
00016103: 
.address 0x4104B0
00016108: RAX := mem[RSP + 8, el]:u64
.address 0x4104B5
0001610f: RDI := low:64[R13 + (R12 << 3)]
.address 0x4104BA
00016116: R12 := mem[RSP + 0x18, el]:u64
.address 0x4104BF
0001611d: RCX := mem[RSP + 0x10, el]:u64
.address 0x4104C4
0001612b: #2915 := RSP
.address 0x4104C4
0001612e: RSP := RSP + 0x38
.address 0x4104C4
00016131: CF := RSP < #2915
.address 0x4104C4
00016134: OF := ~high:1[#2915] & (high:1[#2915] | high:1[RSP]) & ~(high:1[#2915] & high:1[RSP])
.address 0x4104C4
00016137: AF := 0x10 = (0x10 & (RSP ^ #2915 ^ 0x38))
.address 0x4104C4
0001613a: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4104C4
0001613d: SF := high:1[RSP]
.address 0x4104C4
00016140: ZF := 0 = RSP
.address 0x4104C8
00016148: RBX := mem[RSP, el]:u64
.address 0x4104C8
0001614b: RSP := RSP + 8
.address 0x4104C9
0001615a: #2918 := R12
.address 0x4104C9
0001615d: #2919 := RAX
.address 0x4104C9
00016160: R12 := R12 - RAX
.address 0x4104C9
00016163: CF := #2918 < #2919
.address 0x4104C9
00016166: OF := high:1[(#2918 ^ #2919) & (#2918 ^ R12)]
.address 0x4104C9
00016169: AF := 0x10 = (0x10 & (R12 ^ #2918 ^ #2919))
.address 0x4104C9
0001616c: PF := ~low:1[let $1 = R12 >> 4 ^ R12 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4104C9
0001616f: SF := high:1[R12]
.address 0x4104C9
00016172: ZF := 0 = R12
.address 0x4104CC
0001617a: RBP := mem[RSP, el]:u64
.address 0x4104CC
0001617d: RSP := RSP + 8
.address 0x4104CD
00016184: RDX := low:64[R12 << 3]
.address 0x4104D5
0001618b: RSI := low:64[RCX + (RAX << 3)]
.address 0x4104D9
00016193: R12 := mem[RSP, el]:u64
.address 0x4104D9
00016196: RSP := RSP + 8
.address 0x4104DB
0001619e: R13 := mem[RSP, el]:u64
.address 0x4104DB
000161a1: RSP := RSP + 8
.address 0x4104DD
000161a9: R14 := mem[RSP, el]:u64
.address 0x4104DD
000161ac: RSP := RSP + 8
.address 0x4104DF
000161b4: R15 := mem[RSP, el]:u64
.address 0x4104DF
000161b7: RSP := RSP + 8
.address 0x4104E1
000161be: call @sub_403b80 with noreturn

.address 0x41046F
00016219: 
.address 0x41046F
0001621e: RBP := mem[R13 + (R15 << 3), el]:u64
.address 0x410474
00016225: RDI := R14
.address 0x410477
00016233: #2926 := R12
.address 0x410477
00016236: R12 := R12 + 1
.address 0x410477
00016239: CF := R12 < #2926
.address 0x410477
0001623c: OF := ~high:1[#2926] & (high:1[#2926] | high:1[R12]) & ~(high:1[#2926] & high:1[R12])
.address 0x410477
0001623f: AF := 0x10 = (0x10 & (R12 ^ #2926 ^ 1))
.address 0x410477
00016242: PF := ~low:1[let $1 = R12 >> 4 ^ R12 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410477
00016245: SF := high:1[R12]
.address 0x410477
00016248: ZF := 0 = R12
.address 0x41047B
0001624f: RSI := RBP
.address 0x41047E
00016259: #2929 := RBX
.address 0x41047E
0001625c: RSP := RSP - 8
.address 0x41047E
0001625f: mem := mem with [RSP, el]:u64 <- 0x410480
.address 0x41047E
00016263: call #2929 with return %00016265

.address 0x410480
00016265: 
.address 0x410480
00016270: #2930 := low:32[RAX]
.address 0x410480
00016273: OF := 0
.address 0x410480
00016276: CF := 0
.address 0x410480
00016279: AF := unknown[bits]:u1
.address 0x410480
0001627c: PF := ~low:1[let $1 = #2930 >> 4 ^ #2930 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410480
0001627f: SF := high:1[#2930]
.address 0x410480
00016282: ZF := 0 = #2930
.address 0x410482
0001628b: when ~(ZF | (SF | OF) & ~(SF & OF)) goto %000161c3
00044c82: goto %0001600b

.address 0x410484
0001600b: 
.address 0x410484
00016022: #2906 := mem[RSP + 8, el]:u64
.address 0x410484
00016025: mem := mem with [RSP + 8, el]:u64 <- mem[RSP + 8, el]:u64 + 1
.address 0x410484
00016028: CF := mem[RSP + 8, el]:u64 < #2906
.address 0x410484
0001602b: OF := ~high:1[#2906] & (high:1[#2906] | high:1[mem[RSP + 8, el]:u64]) & ~(
high:1[#2906] & high:1[mem[RSP + 8, el]:u64])
.address 0x410484
0001602e: AF := 0x10 = (0x10 & (mem[RSP + 8, el]:u64 ^ #2906 ^ 1))
.address 0x410484
00016031: PF := ~low:1[let $1 = mem[RSP + 8, el]:u64 >> 4 ^ mem[RSP + 8, el]:u64 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410484
00016034: SF := high:1[mem[RSP + 8, el]:u64]
.address 0x410484
00016037: ZF := 0 = mem[RSP + 8, el]:u64
.address 0x41048A
0001603e: mem := mem with [R13 + (R12 << 3) - 8, el]:u64 <- R14
.address 0x41048F
00016045: RAX := mem[RSP + 8, el]:u64
.address 0x410494
00016052: #2909 := mem[RSP + 0x18, el]:u64 - RAX
.address 0x410494
00016055: CF := mem[RSP + 0x18, el]:u64 < RAX
.address 0x410494
00016058: OF := high:1[(mem[RSP + 0x18, el]:u64 ^ RAX) & (mem[RSP + 0x18, el]:u64 ^ #2909)]
.address 0x410494
0001605b: AF := 0x10 = (0x10 & (#2909 ^ mem[RSP + 0x18, el]:u64 ^ RAX))
.address 0x410494
0001605e: PF := ~low:1[let $1 = #2909 >> 4 ^ #2909 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410494
00016061: SF := high:1[#2909]
.address 0x410494
00016064: ZF := 0 = #2909
.address 0x410499
0001606e: when ZF goto %00016068
00044c83: goto %000160eb

.address 0x41049F
000160eb: 
.address 0x41049F
000160f0: RDX := mem[RSP + 0x10, el]:u64
.address 0x4104A4
000160f7: R14 := mem[RDX + (RAX << 3), el]:u64
.address 0x4104A8
000160fe: goto %00015fa5

.address 0x4103C3
0001ca67: 
.address 0x4103C3
0001ca6e: when ~ZF goto %00016068
00044c84: goto %0001ca74

.address 0x4103C5
0001ca74: 
.address 0x4103C5
0001ca79: R12 := mem[RDI + 8, el]:u64
.address 0x4103C9
0001ca80: RBP := mem[RDI, el]:u64
.address 0x4103CC
0001ca87: RSI := R12
.address 0x4103CF
0001ca8e: RDI := RBP
.address 0x4103D2
0001ca98: #3981 := RCX
.address 0x4103D2
0001ca9b: RSP := RSP - 8
.address 0x4103D2
0001ca9e: mem := mem with [RSP, el]:u64 <- 0x4103D4
.address 0x4103D2
0001caa2: call #3981 with return %0001caa4

.address 0x4103D4
0001caa4: 
.address 0x4103D4
0001caaf: #3982 := low:32[RAX]
.address 0x4103D4
0001cab2: OF := 0
.address 0x4103D4
0001cab5: CF := 0
.address 0x4103D4
0001cab8: AF := unknown[bits]:u1
.address 0x4103D4
0001cabb: PF := ~low:1[let $1 = #3982 >> 4 ^ #3982 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4103D4
0001cabe: SF := high:1[#3982]
.address 0x4103D4
0001cac1: ZF := 0 = #3982
.address 0x4103D6
0001caca: when ZF | (SF | OF) & ~(SF & OF) goto %00016068
00044c85: goto %0001cad0

.address 0x4103D8
0001cad0: 
.address 0x4103D8
0001cad5: mem := mem with [R13, el]:u64 <- R12
.address 0x4103DC
0001cadc: mem := mem with [R13 + 8, el]:u64 <- RBP
00044c86: goto %00016068

.address 0x4103E0
00016068: 
.address 0x4103E0
0001607f: #2911 := RSP
.address 0x4103E0
00016082: RSP := RSP + 0x38
.address 0x4103E0
00016085: CF := RSP < #2911
.address 0x4103E0
00016088: OF := ~high:1[#2911] & (high:1[#2911] | high:1[RSP]) & ~(high:1[#2911] & high:1[RSP])
.address 0x4103E0
0001608b: AF := 0x10 = (0x10 & (RSP ^ #2911 ^ 0x38))
.address 0x4103E0
0001608e: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4103E0
00016091: SF := high:1[RSP]
.address 0x4103E0
00016094: ZF := 0 = RSP
.address 0x4103E4
0001609c: RBX := mem[RSP, el]:u64
.address 0x4103E4
0001609f: RSP := RSP + 8
.address 0x4103E5
000160a7: RBP := mem[RSP, el]:u64
.address 0x4103E5
000160aa: RSP := RSP + 8
.address 0x4103E6
000160b2: R12 := mem[RSP, el]:u64
.address 0x4103E6
000160b5: RSP := RSP + 8
.address 0x4103E8
000160bd: R13 := mem[RSP, el]:u64
.address 0x4103E8
000160c0: RSP := RSP + 8
.address 0x4103EA
000160c8: R14 := mem[RSP, el]:u64
.address 0x4103EA
000160cb: RSP := RSP + 8
.address 0x4103EC
000160d3: R15 := mem[RSP, el]:u64
.address 0x4103EC
000160d6: RSP := RSP + 8
.address 0x4103EE
000160df: #2914 := mem[RSP, el]:u64
.address 0x4103EE
000160e2: RSP := RSP + 8
.address 0x4103EE
000160e6: call #2914 with noreturn


.address 0x4105E0
00044441: sub sub_4105e0()
.address 0x4105E0
00016294: 
.address 0x4105E0
00016299: RAX := low:64[RDI + (RSI << 3)]
.address 0x4105E4
000162a0: RCX := RDX
.address 0x4105E7
000162a7: RDX := RAX
.address 0x4105EA
000162ae: call @sub_4103a0 with noreturn


.address 0x4105F0
00044442: sub sub_4105f0()
.address 0x4105F0
000162b3: 
.address 0x4105F0
000162be: #2932 := RDX
.address 0x4105F0
000162c1: OF := 0
.address 0x4105F0
000162c4: CF := 0
.address 0x4105F0
000162c7: AF := unknown[bits]:u1
.address 0x4105F0
000162ca: PF := ~low:1[let $1 = #2932 >> 4 ^ #2932 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4105F0
000162cd: SF := high:1[#2932]
.address 0x4105F0
000162d0: ZF := 0 = #2932
.address 0x4105F3
000162d9: #2934 := R12
.address 0x4105F3
000162dc: RSP := RSP - 8
.address 0x4105F3
000162df: mem := mem with [RSP, el]:u64 <- #2934
.address 0x4105F5
000162e8: #2935 := RBP
.address 0x4105F5
000162eb: RSP := RSP - 8
.address 0x4105F5
000162ee: mem := mem with [RSP, el]:u64 <- #2935
.address 0x4105F6
000162f5: RBP := RDI
.address 0x4105F9
000162fe: #2936 := RBX
.address 0x4105F9
00016301: RSP := RSP - 8
.address 0x4105F9
00016304: mem := mem with [RSP, el]:u64 <- #2936
.address 0x4105FA
0001630e: when ZF goto %00016308
00044c87: goto %0001c8ef

.address 0x4105FC
0001c8ef: 
.address 0x4105FC
0001c8f4: R12 := RSI
.address 0x4105FF
0001c8fb: RBX := low:64[RDX - 1]
.address 0x410603
0001c904: RSP := RSP - 8
.address 0x410603
0001c907: mem := mem with [RSP, el]:u64 <- 0x410608
.address 0x410603
0001c90a: call @sub_403e40 with return %0001c90c

.address 0x410608
0001c90c: 
00044c88: goto %0001c90f

.address 0x410610
0001c90f: 
.address 0x410610
0001c914: RCX := pad:64[pad:32[mem[R12 + RBX]]]
.address 0x410615
0001c91b: RDX := mem[RAX, el]:u64
.address 0x410618
0001c922: RDX := pad:64[mem[RDX + (RCX << 2), el]:u32]
.address 0x41061B
0001c929: mem := mem with [RBP + RBX] <- low:8[RDX]
.address 0x41061F
0001c937: #3965 := RBX
.address 0x41061F
0001c93a: RBX := RBX - 1
.address 0x41061F
0001c93d: CF := #3965 < 1
.address 0x41061F
0001c940: OF := high:1[(#3965 ^ 1) & (#3965 ^ RBX)]
.address 0x41061F
0001c943: AF := 0x10 = (0x10 & (RBX ^ #3965 ^ 1))
.address 0x41061F
0001c946: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41061F
0001c949: SF := high:1[RBX]
.address 0x41061F
0001c94c: ZF := 0 = RBX
.address 0x410623
0001c959: #3968 := RBX - 0xFFFFFFFFFFFFFFFF
.address 0x410623
0001c95c: CF := RBX < 0xFFFFFFFFFFFFFFFF
.address 0x410623
0001c95f: OF := high:1[(RBX ^ 0xFFFFFFFFFFFFFFFF) & (RBX ^ #3968)]
.address 0x410623
0001c962: AF := 0x10 = (0x10 & (#3968 ^ RBX ^ 0xFFFFFFFFFFFFFFFF))
.address 0x410623
0001c965: PF := ~low:1[let $1 = #3968 >> 4 ^ #3968 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410623
0001c968: SF := high:1[#3968]
.address 0x410623
0001c96b: ZF := 0 = #3968
.address 0x410627
0001c974: when ~ZF goto %0001c90f
00044c89: goto %00016308

.address 0x410629
00016308: 
.address 0x410629
00016318: RAX := RBP
.address 0x41062C
00016320: RBX := mem[RSP, el]:u64
.address 0x41062C
00016323: RSP := RSP + 8
.address 0x41062D
0001632b: RBP := mem[RSP, el]:u64
.address 0x41062D
0001632e: RSP := RSP + 8
.address 0x41062E
00016336: R12 := mem[RSP, el]:u64
.address 0x41062E
00016339: RSP := RSP + 8
.address 0x410630
00016342: #2937 := mem[RSP, el]:u64
.address 0x410630
00016345: RSP := RSP + 8
.address 0x410630
00016349: call #2937 with noreturn


.address 0x410640
00044446: sub sub_410640()
.address 0x410640
00016351: 
.address 0x410640
0001635c: #2938 := RDX
.address 0x410640
0001635f: OF := 0
.address 0x410640
00016362: CF := 0
.address 0x410640
00016365: AF := unknown[bits]:u1
.address 0x410640
00016368: PF := ~low:1[let $1 = #2938 >> 4 ^ #2938 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410640
0001636b: SF := high:1[#2938]
.address 0x410640
0001636e: ZF := 0 = #2938
.address 0x410643
00016377: #2940 := R12
.address 0x410643
0001637a: RSP := RSP - 8
.address 0x410643
0001637d: mem := mem with [RSP, el]:u64 <- #2940
.address 0x410645
00016386: #2941 := RBP
.address 0x410645
00016389: RSP := RSP - 8
.address 0x410645
0001638c: mem := mem with [RSP, el]:u64 <- #2941
.address 0x410646
00016393: RBP := RDI
.address 0x410649
0001639c: #2942 := RBX
.address 0x410649
0001639f: RSP := RSP - 8
.address 0x410649
000163a2: mem := mem with [RSP, el]:u64 <- #2942
.address 0x41064A
000163ac: when ZF goto %000163a6
00044c8a: goto %0001c864

.address 0x41064C
0001c864: 
.address 0x41064C
0001c869: R12 := RSI
.address 0x41064F
0001c870: RBX := low:64[RDX - 1]
.address 0x410653
0001c879: RSP := RSP - 8
.address 0x410653
0001c87c: mem := mem with [RSP, el]:u64 <- 0x410658
.address 0x410653
0001c87f: call @sub_403780 with return %0001c881

.address 0x410658
0001c881: 
00044c8b: goto %0001c884

.address 0x410660
0001c884: 
.address 0x410660
0001c889: RCX := pad:64[pad:32[mem[R12 + RBX]]]
.address 0x410665
0001c890: RDX := mem[RAX, el]:u64
.address 0x410668
0001c897: RDX := pad:64[mem[RDX + (RCX << 2), el]:u32]
.address 0x41066B
0001c89e: mem := mem with [RBP + RBX] <- low:8[RDX]
.address 0x41066F
0001c8ac: #3960 := RBX
.address 0x41066F
0001c8af: RBX := RBX - 1
.address 0x41066F
0001c8b2: CF := #3960 < 1
.address 0x41066F
0001c8b5: OF := high:1[(#3960 ^ 1) & (#3960 ^ RBX)]
.address 0x41066F
0001c8b8: AF := 0x10 = (0x10 & (RBX ^ #3960 ^ 1))
.address 0x41066F
0001c8bb: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41066F
0001c8be: SF := high:1[RBX]
.address 0x41066F
0001c8c1: ZF := 0 = RBX
.address 0x410673
0001c8ce: #3963 := RBX - 0xFFFFFFFFFFFFFFFF
.address 0x410673
0001c8d1: CF := RBX < 0xFFFFFFFFFFFFFFFF
.address 0x410673
0001c8d4: OF := high:1[(RBX ^ 0xFFFFFFFFFFFFFFFF) & (RBX ^ #3963)]
.address 0x410673
0001c8d7: AF := 0x10 = (0x10 & (#3963 ^ RBX ^ 0xFFFFFFFFFFFFFFFF))
.address 0x410673
0001c8da: PF := ~low:1[let $1 = #3963 >> 4 ^ #3963 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410673
0001c8dd: SF := high:1[#3963]
.address 0x410673
0001c8e0: ZF := 0 = #3963
.address 0x410677
0001c8e9: when ~ZF goto %0001c884
00044c8c: goto %000163a6

.address 0x410679
000163a6: 
.address 0x410679
000163b6: RAX := RBP
.address 0x41067C
000163be: RBX := mem[RSP, el]:u64
.address 0x41067C
000163c1: RSP := RSP + 8
.address 0x41067D
000163c9: RBP := mem[RSP, el]:u64
.address 0x41067D
000163cc: RSP := RSP + 8
.address 0x41067E
000163d4: R12 := mem[RSP, el]:u64
.address 0x41067E
000163d7: RSP := RSP + 8
.address 0x410680
000163e0: #2943 := mem[RSP, el]:u64
.address 0x410680
000163e3: RSP := RSP + 8
.address 0x410680
000163e7: call #2943 with noreturn


.address 0x410690
0004444a: sub sub_410690()
.address 0x410690
000163ef: 
.address 0x410690
000163f6: #2944 := R15
.address 0x410690
000163f9: RSP := RSP - 8
.address 0x410690
000163fc: mem := mem with [RSP, el]:u64 <- #2944
.address 0x410692
00016405: #2945 := R14
.address 0x410692
00016408: RSP := RSP - 8
.address 0x410692
0001640b: mem := mem with [RSP, el]:u64 <- #2945
.address 0x410694
00016412: R15 := RDI
.address 0x410697
0001641b: #2946 := R13
.address 0x410697
0001641e: RSP := RSP - 8
.address 0x410697
00016421: mem := mem with [RSP, el]:u64 <- #2946
.address 0x410699
0001642a: #2947 := R12
.address 0x410699
0001642d: RSP := RSP - 8
.address 0x410699
00016430: mem := mem with [RSP, el]:u64 <- #2947
.address 0x41069B
00016437: RAX := 0x417C4A
.address 0x4106A2
00016440: #2948 := RBP
.address 0x4106A2
00016443: RSP := RSP - 8
.address 0x4106A2
00016446: mem := mem with [RSP, el]:u64 <- #2948
.address 0x4106A3
0001644f: #2949 := RBX
.address 0x4106A3
00016452: RSP := RSP - 8
.address 0x4106A3
00016455: mem := mem with [RSP, el]:u64 <- #2949
.address 0x4106A4
0001645c: R10 := RSI
.address 0x4106A7
00016463: R11 := RDX
.address 0x4106AA
00016471: #2950 := RSP
.address 0x4106AA
00016474: RSP := RSP - 0x4D8
.address 0x4106AA
00016477: CF := #2950 < 0x4D8
.address 0x4106AA
0001647a: OF := high:1[(#2950 ^ 0x4D8) & (#2950 ^ RSP)]
.address 0x4106AA
0001647d: AF := 0x10 = (0x10 & (RSP ^ #2950 ^ 0x4D8))
.address 0x4106AA
00016480: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4106AA
00016483: SF := high:1[RSP]
.address 0x4106AA
00016486: ZF := 0 = RSP
.address 0x4106B1
0001648d: RBX := mem[RCX + 0x30, el]:u64
.address 0x4106B5
00016494: R14 := pad:64[mem[RCX + 8, el]:u32]
.address 0x4106B9
0001649b: RDI := mem[RSP + 0x510, el]:u64
.address 0x4106C1
000164a2: mem := mem with [RSP + 8, el]:u64 <- RCX
.address 0x4106C6
000164a9: mem := mem with [RSP + 0x38, el]:u64 <- R9
.address 0x4106CB
000164b0: mem := mem with [RSP + 0x4B] <- low:8[R8]
.address 0x4106D0
000164b7: mem := mem with [RSP + 0x30, el]:u64 <- RDI
.address 0x4106D5
000164be: RDI := mem[FS_BASE + 0x28, el]:u64
.address 0x4106DE
000164c5: mem := mem with [RSP + 0x4C8, el]:u64 <- RDI
.address 0x4106E6
000164d2: RDI := 0
.address 0x4106E6
000164d5: AF := unknown[bits]:u1
.address 0x4106E6
000164d8: ZF := 1
.address 0x4106E6
000164db: PF := 1
.address 0x4106E6
000164de: OF := 0
.address 0x4106E6
000164e1: CF := 0
.address 0x4106E6
000164e4: SF := 0
.address 0x4106E8
000164f1: #2953 := RBX
.address 0x4106E8
000164f4: OF := 0
.address 0x4106E8
000164f7: CF := 0
.address 0x4106E8
000164fa: AF := unknown[bits]:u1
.address 0x4106E8
000164fd: PF := ~low:1[let $1 = #2953 >> 4 ^ #2953 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4106E8
00016500: SF := high:1[#2953]
.address 0x4106E8
00016503: ZF := 0 = #2953
.address 0x4106EB
0001650a: RAX := if ~ZF then RBX else RAX
.address 0x4106EF
00016517: #2955 := low:32[R14] - 0xC
.address 0x4106EF
0001651a: CF := low:32[R14] < 0xC
.address 0x4106EF
0001651d: OF := high:1[(low:32[R14] ^ 0xC) & (low:32[R14] ^ #2955)]
.address 0x4106EF
00016520: AF := 0x10 = (0x10 & (#2955 ^ low:32[R14] ^ 0xC))
.address 0x4106EF
00016523: PF := ~low:1[let $1 = #2955 >> 4 ^ #2955 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4106EF
00016526: SF := high:1[#2955]
.address 0x4106EF
00016529: ZF := 0 = #2955
.address 0x4106F3
00016530: mem := mem with [RSP + 0x40, el]:u64 <- RAX
.address 0x4106F8
0001653a: when ZF | (SF | OF) & ~(SF & OF) goto %00016534
00044c8d: goto %0001c841

.address 0x410810
00016534: 
.address 0x410810
0001654a: #2957 := low:32[R14]
.address 0x410810
0001654d: OF := 0
.address 0x410810
00016550: CF := 0
.address 0x410810
00016553: AF := unknown[bits]:u1
.address 0x410810
00016556: PF := ~low:1[let $1 = #2957 >> 4 ^ #2957 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410810
00016559: SF := high:1[#2957]
.address 0x410810
0001655c: ZF := 0 = #2957
.address 0x410813
00016563: RAX := 0xC
.address 0x410818
0001656a: R14 := pad:64[if ZF then low:32[RAX] else low:32[R14]]
.address 0x41081C
00016572: goto %0001656e

.address 0x4106FE
0001c841: 
.address 0x4106FE
0001c84d: #3957 := low:32[R14]
.address 0x4106FE
0001c850: R14 := pad:64[low:32[R14] - 0xC]
.address 0x4106FE
0001c853: CF := #3957 < 0xC
.address 0x4106FE
0001c856: OF := high:1[(#3957 ^ 0xC) & (#3957 ^ low:32[R14])]
.address 0x4106FE
0001c859: AF := 0x10 = (0x10 & (low:32[R14] ^ #3957 ^ 0xC))
.address 0x4106FE
0001c85c: PF := ~low:1[let $1 = low:32[R14] >> 4 ^ low:32[R14] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4106FE
0001c85f: SF := high:1[low:32[R14]]
.address 0x4106FE
0001c862: ZF := 0 = low:32[R14]
00044c8e: goto %0001656e

.address 0x410702
0001656e: 
.address 0x410702
00016578: RAX := pad:64[pad:32[mem[R11]]]
.address 0x410706
00016585: R13 := 0
.address 0x410706
00016588: AF := unknown[bits]:u1
.address 0x410706
0001658b: ZF := 1
.address 0x410706
0001658e: PF := 1
.address 0x410706
00016591: OF := 0
.address 0x410706
00016594: CF := 0
.address 0x410706
00016597: SF := 0
.address 0x410709
000165a4: #2959 := low:8[RAX]
.address 0x410709
000165a7: OF := 0
.address 0x410709
000165aa: CF := 0
.address 0x410709
000165ad: AF := unknown[bits]:u1
.address 0x410709
000165b0: PF := ~low:1[let $1 = #2959 >> 4 ^ #2959 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410709
000165b3: SF := high:1[#2959]
.address 0x410709
000165b6: ZF := 0 = #2959
.address 0x41070B
000165c0: when ZF goto %000165ba
00044c8f: goto %0001c814

.address 0x41070D
0001c814: 
.address 0x41070D
0001c819: RSI := low:64[RSP + 0xBB]
.address 0x410715
0001c820: RDI := low:64[RSP + 0xBD]
.address 0x41071D
0001c827: mem := mem with [RSP + 0x4C, el]:u32 <- low:32[R14]
.address 0x410722
0001c82e: R12 := R10
.address 0x410725
0001c835: mem := mem with [RSP + 0x10, el]:u64 <- RSI
.address 0x41072A
0001c83c: mem := mem with [RSP + 0x28, el]:u64 <- RDI
00044c90: goto %0001674f

.address 0x41072F
0001674f: 
.address 0x41072F
00016765: #2971 := low:8[RAX] - 0x25
.address 0x41072F
00016768: CF := low:8[RAX] < 0x25
.address 0x41072F
0001676b: OF := high:1[(low:8[RAX] ^ 0x25) & (low:8[RAX] ^ #2971)]
.address 0x41072F
0001676e: AF := 0x10 = (0x10 & (#2971 ^ low:8[RAX] ^ 0x25))
.address 0x41072F
00016771: PF := ~low:1[let $1 = #2971 >> 4 ^ #2971 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41072F
00016774: SF := high:1[#2971]
.address 0x41072F
00016777: ZF := 0 = #2971
.address 0x410731
00016781: when ZF goto %0001677b
00044c91: goto %0001c30a

.address 0x4107B0
0001677b: 
.address 0x4107B0
0001678b: RAX := pad:64[pad:32[mem[RSP + 0x4B]]]
.address 0x4107B5
00016798: R8 := 0
.address 0x4107B5
0001679b: AF := unknown[bits]:u1
.address 0x4107B5
0001679e: ZF := 1
.address 0x4107B5
000167a1: PF := 1
.address 0x4107B5
000167a4: OF := 0
.address 0x4107B5
000167a7: CF := 0
.address 0x4107B5
000167aa: SF := 0
.address 0x4107B8
000167b1: mem := mem with [RSP + 0x20, el]:u32 <- 0
.address 0x4107C0
000167b8: mem := mem with [RSP + 0x18] <- low:8[RAX]
00044c92: goto %000167ba

.address 0x4107C4
000167ba: 
.address 0x4107C4
000167c6: #2973 := R11
.address 0x4107C4
000167c9: R11 := R11 + 1
.address 0x4107C4
000167cc: CF := R11 < #2973
.address 0x4107C4
000167cf: OF := ~high:1[#2973] & (high:1[#2973] | high:1[R11]) & ~(high:1[#2973] & high:1[R11])
.address 0x4107C4
000167d2: AF := 0x10 = (0x10 & (R11 ^ #2973 ^ 1))
.address 0x4107C4
000167d5: PF := ~low:1[let $1 = R11 >> 4 ^ R11 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4107C4
000167d8: SF := high:1[R11]
.address 0x4107C4
000167db: ZF := 0 = R11
.address 0x4107C8
000167e2: RBP := pad:64[extend:32[mem[R11]]]
.address 0x4107CC
000167ef: #2976 := low:8[RBP] - 0x30
.address 0x4107CC
000167f2: CF := low:8[RBP] < 0x30
.address 0x4107CC
000167f5: OF := high:1[(low:8[RBP] ^ 0x30) & (low:8[RBP] ^ #2976)]
.address 0x4107CC
000167f8: AF := 0x10 = (0x10 & (#2976 ^ low:8[RBP] ^ 0x30))
.address 0x4107CC
000167fb: PF := ~low:1[let $1 = #2976 >> 4 ^ #2976 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4107CC
000167fe: SF := high:1[#2976]
.address 0x4107CC
00016801: ZF := 0 = #2976
.address 0x4107D0
00016808: RCX := pad:64[low:32[RBP]]
.address 0x4107D2
0001680f: RDI := pad:64[low:32[RBP]]
.address 0x4107D4
00016819: when ZF goto %00016813
00044c93: goto %0001682f

.address 0x4107D6
0001682f: 
.address 0x4107D6
00016837: when ~(ZF | (SF | OF) & ~(SF & OF)) goto %00016831
00044c94: goto %0001c2cd

.address 0x4107F0
00016831: 
.address 0x4107F0
00016847: #2978 := low:8[RBP] - 0x5E
.address 0x4107F0
0001684a: CF := low:8[RBP] < 0x5E
.address 0x4107F0
0001684d: OF := high:1[(low:8[RBP] ^ 0x5E) & (low:8[RBP] ^ #2978)]
.address 0x4107F0
00016850: AF := 0x10 = (0x10 & (#2978 ^ low:8[RBP] ^ 0x5E))
.address 0x4107F0
00016853: PF := ~low:1[let $1 = #2978 >> 4 ^ #2978 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4107F0
00016856: SF := high:1[#2978]
.address 0x4107F0
00016859: ZF := 0 = #2978
.address 0x4107F4
00016863: when ~ZF goto %0001685d
00044c95: goto %0001c290

.address 0x410828
0001685d: 
.address 0x410828
00016873: #2980 := low:8[RBP] - 0x5F
.address 0x410828
00016876: CF := low:8[RBP] < 0x5F
.address 0x410828
00016879: OF := high:1[(low:8[RBP] ^ 0x5F) & (low:8[RBP] ^ #2980)]
.address 0x410828
0001687c: AF := 0x10 = (0x10 & (#2980 ^ low:8[RBP] ^ 0x5F))
.address 0x410828
0001687f: PF := ~low:1[let $1 = #2980 >> 4 ^ #2980 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410828
00016882: SF := high:1[#2980]
.address 0x410828
00016885: ZF := 0 = #2980
.address 0x41082C
0001688e: when ZF goto %00016813
00044c96: goto %00016894

.address 0x4107F6
0001c290: 
.address 0x4107F6
0001c295: mem := mem with [RSP + 0x18] <- 1
.address 0x4107FB
0001c29c: goto %000167ba

.address 0x4107D8
0001c2cd: 
.address 0x4107D8
0001c2d8: #3904 := low:8[RBP] - 0x23
.address 0x4107D8
0001c2db: CF := low:8[RBP] < 0x23
.address 0x4107D8
0001c2de: OF := high:1[(low:8[RBP] ^ 0x23) & (low:8[RBP] ^ #3904)]
.address 0x4107D8
0001c2e1: AF := 0x10 = (0x10 & (#3904 ^ low:8[RBP] ^ 0x23))
.address 0x4107D8
0001c2e4: PF := ~low:1[let $1 = #3904 >> 4 ^ #3904 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4107D8
0001c2e7: SF := high:1[#3904]
.address 0x4107D8
0001c2ea: ZF := 0 = #3904
.address 0x4107DC
0001c2f3: when ~ZF goto %0001c2a1
00044c97: goto %0001c2f9

.address 0x410800
0001c2a1: 
.address 0x410800
0001c2ac: #3902 := low:8[RBP] - 0x2D
.address 0x410800
0001c2af: CF := low:8[RBP] < 0x2D
.address 0x410800
0001c2b2: OF := high:1[(low:8[RBP] ^ 0x2D) & (low:8[RBP] ^ #3902)]
.address 0x410800
0001c2b5: AF := 0x10 = (0x10 & (#3902 ^ low:8[RBP] ^ 0x2D))
.address 0x410800
0001c2b8: PF := ~low:1[let $1 = #3902 >> 4 ^ #3902 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410800
0001c2bb: SF := high:1[#3902]
.address 0x410800
0001c2be: ZF := 0 = #3902
.address 0x410804
0001c2c7: when ~ZF goto %00016894
00044c98: goto %00016813

.address 0x41082E
00016894: 
.address 0x41082E
00016899: RAX := pad:64[low:32[RBP - 0x30]]
.address 0x410831
000168a0: RBX := 0xFFFFFFFF
.address 0x410836
000168ad: #2982 := low:32[RAX] - 9
.address 0x410836
000168b0: CF := low:32[RAX] < 9
.address 0x410836
000168b3: OF := high:1[(low:32[RAX] ^ 9) & (low:32[RAX] ^ #2982)]
.address 0x410836
000168b6: AF := 0x10 = (0x10 & (#2982 ^ low:32[RAX] ^ 9))
.address 0x410836
000168b9: PF := ~low:1[let $1 = #2982 >> 4 ^ #2982 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410836
000168bc: SF := high:1[#2982]
.address 0x410836
000168bf: ZF := 0 = #2982
.address 0x410839
000168c9: when CF | ZF goto %000168c3
00044c99: goto %00016978

.address 0x410938
000168c3: 
.address 0x410938
000168d9: RBX := 0
.address 0x410938
000168dc: AF := unknown[bits]:u1
.address 0x410938
000168df: ZF := 1
.address 0x410938
000168e2: PF := 1
.address 0x410938
000168e5: OF := 0
.address 0x410938
000168e8: CF := 0
.address 0x410938
000168eb: SF := 0
00044c9a: goto %000168ed

.address 0x41093A
000168ed: 
.address 0x41093A
000168f2: RBP := pad:64[extend:32[mem[R11 + 1]]]
.address 0x41093F
000168ff: #2984 := low:32[RBX] - 0xCCCCCCC
.address 0x41093F
00016902: CF := low:32[RBX] < 0xCCCCCCC
.address 0x41093F
00016905: OF := high:1[(low:32[RBX] ^ 0xCCCCCCC) & (low:32[RBX] ^ #2984)]
.address 0x41093F
00016908: AF := 0x10 = (0x10 & (#2984 ^ low:32[RBX] ^ 0xCCCCCCC))
.address 0x41093F
0001690b: PF := ~low:1[let $1 = #2984 >> 4 ^ #2984 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41093F
0001690e: SF := high:1[#2984]
.address 0x41093F
00016911: ZF := 0 = #2984
.address 0x410945
00016918: RSI := low:64[R11 + 1]
.address 0x410949
0001691f: RCX := pad:64[low:32[RBP]]
.address 0x41094B
00016926: RAX := pad:64[low:32[RBP - 0x30]]
.address 0x41094E
00016930: when ~(ZF | (SF | OF) & ~(SF & OF)) goto %0001692a
00044c9b: goto %0001c27c

.address 0x410950
0001c27c: 
.address 0x410950
0001c281: RDX := pad:64[extend:32[mem[R11]]]
.address 0x410954
0001c28a: when ZF goto %0001c238
00044c9c: goto %0001c259

.address 0x410970
0001c238: 
.address 0x410970
0001c243: #3900 := low:8[RDX] - 0x37
.address 0x410970
0001c246: CF := low:8[RDX] < 0x37
.address 0x410970
0001c249: OF := high:1[(low:8[RDX] ^ 0x37) & (low:8[RDX] ^ #3900)]
.address 0x410970
0001c24c: AF := 0x10 = (0x10 & (#3900 ^ low:8[RDX] ^ 0x37))
.address 0x410970
0001c24f: PF := ~low:1[let $1 = #3900 >> 4 ^ #3900 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410970
0001c252: SF := high:1[#3900]
.address 0x410970
0001c255: ZF := 0 = #3900
.address 0x410973
0001c25f: when ZF | (SF | OF) & ~(SF & OF) goto %0001c259
00044c9d: goto %0001692a

.address 0x410975
0001692a: 
.address 0x410975
00016940: #2986 := low:32[RAX] - 9
.address 0x410975
00016943: CF := low:32[RAX] < 9
.address 0x410975
00016946: OF := high:1[(low:32[RAX] ^ 9) & (low:32[RAX] ^ #2986)]
.address 0x410975
00016949: AF := 0x10 = (0x10 & (#2986 ^ low:32[RAX] ^ 9))
.address 0x410975
0001694c: PF := ~low:1[let $1 = #2986 >> 4 ^ #2986 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410975
0001694f: SF := high:1[#2986]
.address 0x410975
00016952: ZF := 0 = #2986
.address 0x410978
0001695c: when ~(CF | ZF) goto %00016956
00044c9e: goto %0001c1b5

.address 0x410990
00016956: 
.address 0x410990
00016966: RDI := pad:64[low:32[RBP]]
.address 0x410992
0001696d: R11 := RSI
.address 0x410995
00016974: RBX := 0x7FFFFFFF
.address 0x41099A
0001697c: goto %00016978

.address 0x41097A
0001c1b5: 
.address 0x41097A
0001c1ba: RBP := pad:64[extend:32[mem[R11 + 2]]]
.address 0x41097F
0001c1c1: RBX := 0x7FFFFFFF
.address 0x410984
0001c1cf: #3895 := R11
.address 0x410984
0001c1d2: R11 := R11 + 2
.address 0x410984
0001c1d5: CF := R11 < #3895
.address 0x410984
0001c1d8: OF := ~high:1[#3895] & (high:1[#3895] | high:1[R11]) & ~(high:1[#3895] & high:1[R11])
.address 0x410984
0001c1db: AF := 0x10 = (0x10 & (R11 ^ #3895 ^ 2))
.address 0x410984
0001c1de: PF := ~low:1[let $1 = R11 >> 4 ^ R11 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410984
0001c1e1: SF := high:1[R11]
.address 0x410984
0001c1e4: ZF := 0 = R11
.address 0x410988
0001c1eb: RCX := pad:64[low:32[RBP]]
.address 0x41098A
0001c1f2: RAX := pad:64[low:32[RBP - 0x30]]
.address 0x41098D
0001c1fa: goto %0001c1f6

.address 0x410956
0001c259: 
.address 0x410956
0001c269: RDI := pad:64[low:32[RBX + (RBX << 2)]]
.address 0x410959
0001c270: R11 := RSI
.address 0x41095C
0001c277: RBX := pad:64[low:32[RDX + (RDI << 1) - 0x30]]
00044c9f: goto %0001c1f6

.address 0x410960
0001c1f6: 
.address 0x410960
0001c206: #3898 := low:32[RAX] - 9
.address 0x410960
0001c209: CF := low:32[RAX] < 9
.address 0x410960
0001c20c: OF := high:1[(low:32[RAX] ^ 9) & (low:32[RAX] ^ #3898)]
.address 0x410960
0001c20f: AF := 0x10 = (0x10 & (#3898 ^ low:32[RAX] ^ 9))
.address 0x410960
0001c212: PF := ~low:1[let $1 = #3898 >> 4 ^ #3898 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410960
0001c215: SF := high:1[#3898]
.address 0x410960
0001c218: ZF := 0 = #3898
.address 0x410963
0001c221: when CF | ZF goto %000168ed
00044ca0: goto %0001c227

.address 0x410965
0001c227: 
.address 0x410965
0001c22c: RDI := pad:64[low:32[RBP]]
.address 0x410967
0001c233: goto %00016978

.address 0x41083F
00016978: 
.address 0x41083F
00016988: #2988 := low:8[RCX] - 0x45
.address 0x41083F
0001698b: CF := low:8[RCX] < 0x45
.address 0x41083F
0001698e: OF := high:1[(low:8[RCX] ^ 0x45) & (low:8[RCX] ^ #2988)]
.address 0x41083F
00016991: AF := 0x10 = (0x10 & (#2988 ^ low:8[RCX] ^ 0x45))
.address 0x41083F
00016994: PF := ~low:1[let $1 = #2988 >> 4 ^ #2988 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41083F
00016997: SF := high:1[#2988]
.address 0x41083F
0001699a: ZF := 0 = #2988
.address 0x410842
000169a4: when ZF goto %0001699e
00044ca1: goto %0001c167

.address 0x410844
0001c167: 
.address 0x410844
0001c172: #3893 := low:8[RCX] - 0x4F
.address 0x410844
0001c175: CF := low:8[RCX] < 0x4F
.address 0x410844
0001c178: OF := high:1[(low:8[RCX] ^ 0x4F) & (low:8[RCX] ^ #3893)]
.address 0x410844
0001c17b: AF := 0x10 = (0x10 & (#3893 ^ low:8[RCX] ^ 0x4F))
.address 0x410844
0001c17e: PF := ~low:1[let $1 = #3893 >> 4 ^ #3893 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410844
0001c181: SF := high:1[#3893]
.address 0x410844
0001c184: ZF := 0 = #3893
.address 0x410847
0001c18d: when ZF goto %0001699e
00044ca2: goto %0001c193

.address 0x410868
0001699e: 
.address 0x410868
000169ae: RDI := pad:64[extend:32[mem[R11 + 1]]]
.address 0x41086D
000169bc: #2990 := R11
.address 0x41086D
000169bf: R11 := R11 + 1
.address 0x41086D
000169c2: CF := R11 < #2990
.address 0x41086D
000169c5: OF := ~high:1[#2990] & (high:1[#2990] | high:1[R11]) & ~(high:1[#2990] & high:1[R11])
.address 0x41086D
000169c8: AF := 0x10 = (0x10 & (R11 ^ #2990 ^ 1))
.address 0x41086D
000169cb: PF := ~low:1[let $1 = R11 >> 4 ^ R11 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41086D
000169ce: SF := high:1[R11]
.address 0x41086D
000169d1: ZF := 0 = R11
.address 0x410871
000169d8: RCX := pad:64[low:32[RDI]]
.address 0x410873
000169e0: goto %000169dc

.address 0x410849
0001c193: 
.address 0x410849
0001c19e: RBP := 0
.address 0x410849
0001c1a1: AF := unknown[bits]:u1
.address 0x410849
0001c1a4: ZF := 1
.address 0x410849
0001c1a7: PF := 1
.address 0x410849
0001c1aa: OF := 0
.address 0x410849
0001c1ad: CF := 0
.address 0x410849
0001c1b0: SF := 0
00044ca3: goto %000169dc

.address 0x41084B
000169dc: 
.address 0x41084B
000169ec: #2993 := low:8[RCX] - 0x7A
.address 0x41084B
000169ef: CF := low:8[RCX] < 0x7A
.address 0x41084B
000169f2: OF := high:1[(low:8[RCX] ^ 0x7A) & (low:8[RCX] ^ #2993)]
.address 0x41084B
000169f5: AF := 0x10 = (0x10 & (#2993 ^ low:8[RCX] ^ 0x7A))
.address 0x41084B
000169f8: PF := ~low:1[let $1 = #2993 >> 4 ^ #2993 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41084B
000169fb: SF := high:1[#2993]
.address 0x41084B
000169fe: ZF := 0 = #2993
.address 0x41084E
00016a08: when ~(CF | ZF) goto %00016a02
00044ca4: goto %0001c120

.address 0x410880
00016a02: 
.address 0x410880
00016a12: RAX := low:64[R11 - 1]
.address 0x410884
00016a19: RCX := 1
00044ca5: goto %00016a1b

.address 0x410889
00016a1b: 
.address 0x410889
00016a20: R8 := RAX
.address 0x41088C
00016a27: RAX := low:64[RAX - 1]
.address 0x410890
00016a35: #2995 := low:32[RCX]
.address 0x410890
00016a38: RCX := pad:64[low:32[RCX] + 1]
.address 0x410890
00016a3b: CF := low:32[RCX] < #2995
.address 0x410890
00016a3e: OF := ~high:1[#2995] & (high:1[#2995] | high:1[low:32[RCX]]) & ~(
high:1[#2995] & high:1[low:32[RCX]])
.address 0x410890
00016a41: AF := 0x10 = (0x10 & (low:32[RCX] ^ #2995 ^ 1))
.address 0x410890
00016a44: PF := ~low:1[let $1 = low:32[RCX] >> 4 ^ low:32[RCX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410890
00016a47: SF := high:1[low:32[RCX]]
.address 0x410890
00016a4a: ZF := 0 = low:32[RCX]
.address 0x410893
00016a57: #2998 := mem[RAX + 1] - 0x25
.address 0x410893
00016a5a: CF := mem[RAX + 1] < 0x25
.address 0x410893
00016a5d: OF := high:1[(mem[RAX + 1] ^ 0x25) & (mem[RAX + 1] ^ #2998)]
.address 0x410893
00016a60: AF := 0x10 = (0x10 & (#2998 ^ mem[RAX + 1] ^ 0x25))
.address 0x410893
00016a63: PF := ~low:1[let $1 = #2998 >> 4 ^ #2998 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410893
00016a66: SF := high:1[#2998]
.address 0x410893
00016a69: ZF := 0 = #2998
.address 0x410897
00016a72: when ~ZF goto %00016a1b
00044ca6: goto %00016a78

.address 0x410899
00016a78: 
.address 0x410899
00016a7d: RDX := R12
.address 0x41089C
00016a84: RAX := 0
.address 0x4108A1
00016a8b: RBP := extend:64[low:32[RCX]]
.address 0x4108A4
00016a9a: #3000 := RDX
.address 0x4108A4
00016a9d: #3001 := R13
.address 0x4108A4
00016aa0: RDX := RDX - R13
.address 0x4108A4
00016aa3: CF := #3000 < #3001
.address 0x4108A4
00016aa6: OF := high:1[(#3000 ^ #3001) & (#3000 ^ RDX)]
.address 0x4108A4
00016aa9: AF := 0x10 = (0x10 & (RDX ^ #3000 ^ #3001))
.address 0x4108A4
00016aac: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4108A4
00016aaf: SF := high:1[RDX]
.address 0x4108A4
00016ab2: ZF := 0 = RDX
.address 0x4108A7
00016abf: #3003 := low:32[RBX]
.address 0x4108A7
00016ac2: OF := 0
.address 0x4108A7
00016ac5: CF := 0
.address 0x4108A7
00016ac8: AF := unknown[bits]:u1
.address 0x4108A7
00016acb: PF := ~low:1[let $1 = #3003 >> 4 ^ #3003 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4108A7
00016ace: SF := high:1[#3003]
.address 0x4108A7
00016ad1: ZF := 0 = #3003
.address 0x4108A9
00016ad8: R14 := R11
.address 0x4108AC
00016adf: RAX := pad:64[if ~SF then low:32[RBX] else low:32[RAX]]
.address 0x4108AF
00016ae6: RAX := extend:64[low:32[RAX]]
.address 0x4108B1
00016af3: #3005 := RBP - RAX
.address 0x4108B1
00016af6: CF := RBP < RAX
.address 0x4108B1
00016af9: OF := high:1[(RBP ^ RAX) & (RBP ^ #3005)]
.address 0x4108B1
00016afc: AF := 0x10 = (0x10 & (#3005 ^ RBP ^ RAX))
.address 0x4108B1
00016aff: PF := ~low:1[let $1 = #3005 >> 4 ^ #3005 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4108B1
00016b02: SF := high:1[#3005]
.address 0x4108B1
00016b05: ZF := 0 = #3005
.address 0x4108B4
00016b0c: R9 := RAX
.address 0x4108B7
00016b13: R9 := if ~CF then RBP else R9
00044ca7: goto %00016b15

.address 0x4108BB
00016b15: 
.address 0x4108BB
00016b20: #3007 := RDX - R9
.address 0x4108BB
00016b23: CF := RDX < R9
.address 0x4108BB
00016b26: OF := high:1[(RDX ^ R9) & (RDX ^ #3007)]
.address 0x4108BB
00016b29: AF := 0x10 = (0x10 & (#3007 ^ RDX ^ R9))
.address 0x4108BB
00016b2c: PF := ~low:1[let $1 = #3007 >> 4 ^ #3007 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4108BB
00016b2f: SF := high:1[#3007]
.address 0x4108BB
00016b32: ZF := 0 = #3007
.address 0x4108BE
00016b3c: when CF | ZF goto %00016b36
00044ca8: goto %00016b60

.address 0x4108C4
00016b60: 
.address 0x4108C4
00016b6b: #3009 := R15
.address 0x4108C4
00016b6e: OF := 0
.address 0x4108C4
00016b71: CF := 0
.address 0x4108C4
00016b74: AF := unknown[bits]:u1
.address 0x4108C4
00016b77: PF := ~low:1[let $1 = #3009 >> 4 ^ #3009 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4108C4
00016b7a: SF := high:1[#3009]
.address 0x4108C4
00016b7d: ZF := 0 = #3009
.address 0x4108C7
00016b87: when ZF goto %00016b81
00044ca9: goto %00016bbd

.address 0x4108C9
00016bbd: 
.address 0x4108C9
00016bc8: #3014 := RBP - RAX
.address 0x4108C9
00016bcb: CF := RBP < RAX
.address 0x4108C9
00016bce: OF := high:1[(RBP ^ RAX) & (RBP ^ #3014)]
.address 0x4108C9
00016bd1: AF := 0x10 = (0x10 & (#3014 ^ RBP ^ RAX))
.address 0x4108C9
00016bd4: PF := ~low:1[let $1 = #3014 >> 4 ^ #3014 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4108C9
00016bd7: SF := high:1[#3014]
.address 0x4108C9
00016bda: ZF := 0 = #3014
.address 0x4108CC
00016be4: when ~CF goto %00016bde
00044caa: goto %00016d4b

.address 0x4108CE
00016d4b: 
.address 0x4108CE
00016d50: RDX := extend:64[low:32[RBX]]
.address 0x4108D1
00016d57: mem := mem with [RSP + 0x50, el]:u64 <- R9
.address 0x4108D6
00016d66: #3025 := RDX
.address 0x4108D6
00016d69: #3026 := RBP
.address 0x4108D6
00016d6c: RDX := RDX - RBP
.address 0x4108D6
00016d6f: CF := #3025 < #3026
.address 0x4108D6
00016d72: OF := high:1[(#3025 ^ #3026) & (#3025 ^ RDX)]
.address 0x4108D6
00016d75: AF := 0x10 = (0x10 & (RDX ^ #3025 ^ #3026))
.address 0x4108D6
00016d78: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4108D6
00016d7b: SF := high:1[RDX]
.address 0x4108D6
00016d7e: ZF := 0 = RDX
.address 0x4108D9
00016d8b: #3028 := mem[RSP + 0x20, el]:u32 - 0x30
.address 0x4108D9
00016d8e: CF := mem[RSP + 0x20, el]:u32 < 0x30
.address 0x4108D9
00016d91: OF := high:1[(mem[RSP + 0x20, el]:u32 ^ 0x30) & (mem[RSP + 0x20, el]:u32 ^ #3028)]
.address 0x4108D9
00016d94: AF := 0x10 = (0x10 & (#3028 ^ mem[RSP + 0x20, el]:u32 ^ 0x30))
.address 0x4108D9
00016d97: PF := ~low:1[let $1 = #3028 >> 4 ^ #3028 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4108D9
00016d9a: SF := high:1[#3028]
.address 0x4108D9
00016d9d: ZF := 0 = #3028
.address 0x4108DE
00016da4: mem := mem with [RSP + 0x20, el]:u64 <- R8
.address 0x4108E3
00016dab: RBX := low:64[R15 + RDX]
.address 0x4108E7
00016db5: when ZF goto %00016daf
00044cab: goto %0001c0ee

.address 0x411A4F
00016daf: 
.address 0x411A4F
00016dbf: RDI := R15
.address 0x411A52
00016dc6: RSI := 0x30
.address 0x411A57
00016dcd: R15 := RBX
.address 0x411A5A
00016dd6: RSP := RSP - 8
.address 0x411A5A
00016dd9: mem := mem with [RSP, el]:u64 <- 0x411A5F
.address 0x411A5A
00016ddc: call @sub_403a60 with return %00016dde

.address 0x411A5F
00016dde: 
.address 0x411A5F
00016de3: R8 := mem[RSP + 0x20, el]:u64
.address 0x411A64
00016dea: R9 := mem[RSP + 0x50, el]:u64
.address 0x411A69
00016df1: goto %00016bde

.address 0x4108ED
0001c0ee: 
.address 0x4108ED
0001c0f3: RDI := R15
.address 0x4108F0
0001c0fa: RSI := 0x20
.address 0x4108F5
0001c101: R15 := RBX
.address 0x4108F8
0001c10a: RSP := RSP - 8
.address 0x4108F8
0001c10d: mem := mem with [RSP, el]:u64 <- 0x4108FD
.address 0x4108F8
0001c110: call @sub_403a60 with return %0001c112

.address 0x4108FD
0001c112: 
.address 0x4108FD
0001c117: R9 := mem[RSP + 0x50, el]:u64
.address 0x410902
0001c11e: R8 := mem[RSP + 0x20, el]:u64
00044cac: goto %00016bde

.address 0x410907
00016bde: 
.address 0x410907
00016bf4: #3016 := mem[RSP + 0x18]
.address 0x410907
00016bf7: CF := mem[RSP + 0x18] < 0
.address 0x410907
00016bfa: OF := high:1[mem[RSP + 0x18] & (mem[RSP + 0x18] ^ #3016)]
.address 0x410907
00016bfd: AF := 0x10 = (0x10 & (#3016 ^ mem[RSP + 0x18]))
.address 0x410907
00016c00: PF := ~low:1[let $1 = #3016 >> 4 ^ #3016 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410907
00016c03: SF := high:1[#3016]
.address 0x410907
00016c06: ZF := 0 = #3016
.address 0x41090C
00016c0d: RDX := RBP
.address 0x41090F
00016c14: mem := mem with [RSP + 0x18, el]:u64 <- R9
.address 0x410914
00016c1b: RSI := R8
.address 0x410917
00016c22: RDI := R15
.address 0x41091A
00016c2c: when ~ZF goto %00016c26
00044cad: goto %00016d35

.address 0x4109A0
00016c26: 
.address 0x4109A0
00016c38: RSP := RSP - 8
.address 0x4109A0
00016c3b: mem := mem with [RSP, el]:u64 <- 0x4109A5
.address 0x4109A0
00016c3e: call @sub_410640 with return %00016c40

.address 0x4109A5
00016c40: 
.address 0x4109A5
00016c45: R9 := mem[RSP + 0x18, el]:u64
.address 0x4109AA
00016c4d: goto %00016c49

.address 0x410920
00016d35: 
.address 0x410920
00016d3c: RSP := RSP - 8
.address 0x410920
00016d3f: mem := mem with [RSP, el]:u64 <- 0x410925
.address 0x410920
00016d42: call @sub_403b80 with return %00016d44

.address 0x410925
00016d44: 
.address 0x410925
00016d49: R9 := mem[RSP + 0x18, el]:u64
00044cae: goto %00016c49

.address 0x41092A
00016c49: 
.address 0x41092A
00016c5b: #3018 := R15
.address 0x41092A
00016c5e: #3019 := RBP
.address 0x41092A
00016c61: R15 := R15 + #3019
.address 0x41092A
00016c64: CF := R15 < #3018
.address 0x41092A
00016c67: OF := high:1[#3018] = high:1[#3019] & (high:1[#3018] | high:1[R15]) & ~(
high:1[#3018] & high:1[R15])
.address 0x41092A
00016c6a: AF := 0x10 = (0x10 & (R15 ^ #3018 ^ #3019))
.address 0x41092A
00016c6d: PF := ~low:1[let $1 = R15 >> 4 ^ R15 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41092A
00016c70: SF := high:1[R15]
.address 0x41092A
00016c73: ZF := 0 = R15
00044caf: goto %00016b81

.address 0x410850
0001c120: 
.address 0x410850
0001c125: RSI := 0x41A47C
.address 0x410857
0001c12c: RAX := pad:64[pad:32[low:8[RCX]]]
.address 0x41085A
0001c133: RAX := extend:64[mem[RSI + (RAX << 2), el]:u32]
.address 0x41085E
0001c142: #3890 := RAX
.address 0x41085E
0001c145: #3891 := RSI
.address 0x41085E
0001c148: RAX := RAX + #3891
.address 0x41085E
0001c14b: CF := RAX < #3890
.address 0x41085E
0001c14e: OF := high:1[#3890] = high:1[#3891] & (high:1[#3890] | high:1[RAX]) & ~(
high:1[#3890] & high:1[RAX])
.address 0x41085E
0001c151: AF := 0x10 = (0x10 & (RAX ^ #3890 ^ #3891))
.address 0x41085E
0001c154: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41085E
0001c157: SF := high:1[RAX]
.address 0x41085E
0001c15a: ZF := 0 = RAX
.address 0x410861
0001c162: call RAX with noreturn

.address 0x410806
00016813: 
.address 0x410806
00016823: mem := mem with [RSP + 0x20, el]:u32 <- low:32[RBP]
.address 0x41080A
0001682a: goto %000167ba

.address 0x4107DE
0001c2f9: 
.address 0x4107DE
0001c2fe: R8 := 1
.address 0x4107E4
0001c305: goto %000167ba

.address 0x410733
0001c30a: 
.address 0x410733
0001c30f: RDX := R12
.address 0x410736
0001c31e: #3906 := RDX
.address 0x410736
0001c321: #3907 := R13
.address 0x410736
0001c324: RDX := RDX - R13
.address 0x410736
0001c327: CF := #3906 < #3907
.address 0x410736
0001c32a: OF := high:1[(#3906 ^ #3907) & (#3906 ^ RDX)]
.address 0x410736
0001c32d: AF := 0x10 = (0x10 & (RDX ^ #3906 ^ #3907))
.address 0x410736
0001c330: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410736
0001c333: SF := high:1[RDX]
.address 0x410736
0001c336: ZF := 0 = RDX
.address 0x410739
0001c343: #3909 := RDX - 1
.address 0x410739
0001c346: CF := RDX < 1
.address 0x410739
0001c349: OF := high:1[(RDX ^ 1) & (RDX ^ #3909)]
.address 0x410739
0001c34c: AF := 0x10 = (0x10 & (#3909 ^ RDX ^ 1))
.address 0x410739
0001c34f: PF := ~low:1[let $1 = #3909 >> 4 ^ #3909 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410739
0001c352: SF := high:1[#3909]
.address 0x410739
0001c355: ZF := 0 = #3909
.address 0x41073D
0001c35e: when CF | ZF goto %00016b36
00044cb0: goto %0001c364

.address 0x41073F
0001c364: 
.address 0x41073F
0001c36f: #3911 := R15
.address 0x41073F
0001c372: OF := 0
.address 0x41073F
0001c375: CF := 0
.address 0x41073F
0001c378: AF := unknown[bits]:u1
.address 0x41073F
0001c37b: PF := ~low:1[let $1 = #3911 >> 4 ^ #3911 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41073F
0001c37e: SF := high:1[#3911]
.address 0x41073F
0001c381: ZF := 0 = #3911
.address 0x410742
0001c38b: when ZF goto %0001c385
00044cb1: goto %0001c3ba

.address 0x410744
0001c3ba: 
.address 0x410744
0001c3bf: mem := mem with [R15] <- low:8[RAX]
.address 0x410747
0001c3cd: #3916 := R15
.address 0x410747
0001c3d0: R15 := R15 + 1
.address 0x410747
0001c3d3: CF := R15 < #3916
.address 0x410747
0001c3d6: OF := ~high:1[#3916] & (high:1[#3916] | high:1[R15]) & ~(high:1[#3916] & high:1[R15])
.address 0x410747
0001c3d9: AF := 0x10 = (0x10 & (R15 ^ #3916 ^ 1))
.address 0x410747
0001c3dc: PF := ~low:1[let $1 = R15 >> 4 ^ R15 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410747
0001c3df: SF := high:1[R15]
.address 0x410747
0001c3e2: ZF := 0 = R15
00044cb2: goto %0001c385

.address 0x41074B
0001c385: 
.address 0x41074B
0001c39c: #3913 := R13
.address 0x41074B
0001c39f: R13 := R13 + 1
.address 0x41074B
0001c3a2: CF := R13 < #3913
.address 0x41074B
0001c3a5: OF := ~high:1[#3913] & (high:1[#3913] | high:1[R13]) & ~(high:1[#3913] & high:1[R13])
.address 0x41074B
0001c3a8: AF := 0x10 = (0x10 & (R13 ^ #3913 ^ 1))
.address 0x41074B
0001c3ab: PF := ~low:1[let $1 = R13 >> 4 ^ R13 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41074B
0001c3ae: SF := high:1[R13]
.address 0x41074B
0001c3b1: ZF := 0 = R13
.address 0x41074F
0001c3b8: R14 := R11
00044cb3: goto %00016715

.address 0x410752
00016715: 
.address 0x410752
00016725: RAX := pad:64[pad:32[mem[R14 + 1]]]
.address 0x410757
0001672c: R11 := low:64[R14 + 1]
.address 0x41075B
00016739: #2969 := low:8[RAX]
.address 0x41075B
0001673c: OF := 0
.address 0x41075B
0001673f: CF := 0
.address 0x41075B
00016742: AF := unknown[bits]:u1
.address 0x41075B
00016745: PF := ~low:1[let $1 = #2969 >> 4 ^ #2969 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41075B
00016748: SF := high:1[#2969]
.address 0x41075B
0001674b: ZF := 0 = #2969
.address 0x41075D
00016755: when ~ZF goto %0001674f
00044cb4: goto %0001c3e4

.address 0x41075F
0001c3e4: 
.address 0x41075F
0001c3e9: R10 := R12
00044cb5: goto %000165ba

.address 0x410762
000165ba: 
.address 0x410762
000165d0: #2961 := R15
.address 0x410762
000165d3: OF := 0
.address 0x410762
000165d6: CF := 0
.address 0x410762
000165d9: AF := unknown[bits]:u1
.address 0x410762
000165dc: PF := ~low:1[let $1 = #2961 >> 4 ^ #2961 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410762
000165df: SF := high:1[#2961]
.address 0x410762
000165e2: ZF := 0 = #2961
.address 0x410765
000165ec: when ZF goto %000165e6
00044cb6: goto %0001c7d7

.address 0x410767
0001c7d7: 
.address 0x410767
0001c7e2: #3955 := R10
.address 0x410767
0001c7e5: OF := 0
.address 0x410767
0001c7e8: CF := 0
.address 0x410767
0001c7eb: AF := unknown[bits]:u1
.address 0x410767
0001c7ee: PF := ~low:1[let $1 = #3955 >> 4 ^ #3955 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410767
0001c7f1: SF := high:1[#3955]
.address 0x410767
0001c7f4: ZF := 0 = #3955
.address 0x41076A
0001c7fd: when ZF goto %000165e6
00044cb7: goto %0001c803

.address 0x41076C
0001c803: 
.address 0x41076C
0001c808: mem := mem with [R15] <- 0
.address 0x410770
0001c80f: goto %000165e6

.address 0x41077B
000165e6: 
.address 0x41077B
000165f6: RDI := mem[RSP + 0x4C8, el]:u64
.address 0x410783
00016603: RDI := RDI ^ mem[FS_BASE + 0x28, el]:u64
.address 0x410783
00016606: OF := 0
.address 0x410783
00016609: CF := 0
.address 0x410783
0001660c: AF := unknown[bits]:u1
.address 0x410783
0001660f: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410783
00016612: SF := high:1[RDI]
.address 0x410783
00016615: ZF := 0 = RDI
.address 0x41078C
0001661c: RAX := R13
.address 0x41078F
00016626: when ~ZF goto %00016620
00044cb8: goto %0001c75f

.address 0x411F6A
00016620: 
.address 0x411F6A
00016632: RSP := RSP - 8
.address 0x411F6A
00016635: mem := mem with [RSP, el]:u64 <- 0x411F6F
.address 0x411F6A
00016638: call @sub_403970 with return %0001663a

.address 0x411F6F
0001663a: 
.address 0x411F6F
00016645: R10 := 0
.address 0x411F6F
00016648: AF := unknown[bits]:u1
.address 0x411F6F
0001664b: ZF := 1
.address 0x411F6F
0001664e: PF := 1
.address 0x411F6F
00016651: OF := 0
.address 0x411F6F
00016654: CF := 0
.address 0x411F6F
00016657: SF := 0
.address 0x411F72
0001665f: goto %0001665b

.address 0x410B9C
0001665b: 
.address 0x410B9C
00016665: RAX := mem[RSP + 0x10, el]:u64
.address 0x410BA1
0001666c: mem := mem with [RSP + 0xBD] <- low:8[RBP]
.address 0x410BA9
00016673: R14 := R11
.address 0x410BAC
0001667a: RBP := pad:64[low:32[R10]]
.address 0x410BAF
00016688: #2964 := RAX
.address 0x410BAF
0001668b: RAX := RAX + 3
.address 0x410BAF
0001668e: CF := RAX < #2964
.address 0x410BAF
00016691: OF := ~high:1[#2964] & (high:1[#2964] | high:1[RAX]) & ~(high:1[#2964] & high:1[RAX])
.address 0x410BAF
00016694: AF := 0x10 = (0x10 & (RAX ^ #2964 ^ 3))
.address 0x410BAF
00016697: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410BAF
0001669a: SF := high:1[RAX]
.address 0x410BAF
0001669d: ZF := 0 = RAX
.address 0x410BB3
000166a5: goto %000166a1

.address 0x4109E8
000166a1: 
.address 0x4109E8
000166ab: mem := mem with [RAX] <- low:8[RCX]
.address 0x4109EA
000166b2: mem := mem with [RAX + 1] <- 0
.address 0x4109EE
000166b9: RAX := low:64[RSP + 0xC0]
.address 0x4109F6
000166c0: RCX := mem[RSP + 8, el]:u64
.address 0x4109FB
000166c7: RDX := mem[RSP + 0x10, el]:u64
.address 0x410A00
000166ce: RSI := 0x400
.address 0x410A05
000166d5: RDI := RAX
.address 0x410A08
000166dc: mem := mem with [RSP + 0x58] <- low:8[R8]
.address 0x410A0D
000166e3: mem := mem with [RSP + 0x50, el]:u64 <- RAX
.address 0x410A12
000166ec: RSP := RSP - 8
.address 0x410A12
000166ef: mem := mem with [RSP, el]:u64 <- 0x410A17
.address 0x410A12
000166f2: call @sub_403cf0 with return %000166f4

.address 0x410A17
000166f4: 
.address 0x410A17
000166ff: #2967 := RAX
.address 0x410A17
00016702: OF := 0
.address 0x410A17
00016705: CF := 0
.address 0x410A17
00016708: AF := unknown[bits]:u1
.address 0x410A17
0001670b: PF := ~low:1[let $1 = #2967 >> 4 ^ #2967 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410A17
0001670e: SF := high:1[#2967]
.address 0x410A17
00016711: ZF := 0 = #2967
.address 0x410A1A
0001671b: when ZF goto %00016715
00044cb9: goto %0001c3eb

.address 0x410A20
0001c3eb: 
.address 0x410A20
0001c3f0: RCX := low:64[RAX - 1]
.address 0x410A24
0001c3fd: #3919 := low:32[RBX]
.address 0x410A24
0001c400: OF := 0
.address 0x410A24
0001c403: CF := 0
.address 0x410A24
0001c406: AF := unknown[bits]:u1
.address 0x410A24
0001c409: PF := ~low:1[let $1 = #3919 >> 4 ^ #3919 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410A24
0001c40c: SF := high:1[#3919]
.address 0x410A24
0001c40f: ZF := 0 = #3919
.address 0x410A26
0001c416: RAX := 0
.address 0x410A2B
0001c41d: RAX := pad:64[if ~SF then low:32[RBX] else low:32[RAX]]
.address 0x410A2E
0001c424: RDX := R12
.address 0x410A31
0001c42b: RAX := extend:64[low:32[RAX]]
.address 0x410A33
0001c438: #3921 := RCX - RAX
.address 0x410A33
0001c43b: CF := RCX < RAX
.address 0x410A33
0001c43e: OF := high:1[(RCX ^ RAX) & (RCX ^ #3921)]
.address 0x410A33
0001c441: AF := 0x10 = (0x10 & (#3921 ^ RCX ^ RAX))
.address 0x410A33
0001c444: PF := ~low:1[let $1 = #3921 >> 4 ^ #3921 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410A33
0001c447: SF := high:1[#3921]
.address 0x410A33
0001c44a: ZF := 0 = #3921
.address 0x410A36
0001c451: R9 := RAX
.address 0x410A39
0001c458: R9 := if ~CF then RCX else R9
.address 0x410A3D
0001c467: #3923 := RDX
.address 0x410A3D
0001c46a: #3924 := R13
.address 0x410A3D
0001c46d: RDX := RDX - R13
.address 0x410A3D
0001c470: CF := #3923 < #3924
.address 0x410A3D
0001c473: OF := high:1[(#3923 ^ #3924) & (#3923 ^ RDX)]
.address 0x410A3D
0001c476: AF := 0x10 = (0x10 & (RDX ^ #3923 ^ #3924))
.address 0x410A3D
0001c479: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410A3D
0001c47c: SF := high:1[RDX]
.address 0x410A3D
0001c47f: ZF := 0 = RDX
.address 0x410A40
0001c48c: #3926 := RDX - R9
.address 0x410A40
0001c48f: CF := RDX < R9
.address 0x410A40
0001c492: OF := high:1[(RDX ^ R9) & (RDX ^ #3926)]
.address 0x410A40
0001c495: AF := 0x10 = (0x10 & (#3926 ^ RDX ^ R9))
.address 0x410A40
0001c498: PF := ~low:1[let $1 = #3926 >> 4 ^ #3926 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410A40
0001c49b: SF := high:1[#3926]
.address 0x410A40
0001c49e: ZF := 0 = #3926
.address 0x410A43
0001c4a7: when CF | ZF goto %00016b36
00044cba: goto %0001c4ad

.address 0x410A49
0001c4ad: 
.address 0x410A49
0001c4b8: #3928 := R15
.address 0x410A49
0001c4bb: OF := 0
.address 0x410A49
0001c4be: CF := 0
.address 0x410A49
0001c4c1: AF := unknown[bits]:u1
.address 0x410A49
0001c4c4: PF := ~low:1[let $1 = #3928 >> 4 ^ #3928 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410A49
0001c4c7: SF := high:1[#3928]
.address 0x410A49
0001c4ca: ZF := 0 = #3928
.address 0x410A4C
0001c4d3: when ZF goto %00016b81
00044cbb: goto %0001c4d9

.address 0x410A52
0001c4d9: 
.address 0x410A52
0001c4e4: #3930 := low:32[RBP]
.address 0x410A52
0001c4e7: OF := 0
.address 0x410A52
0001c4ea: CF := 0
.address 0x410A52
0001c4ed: AF := unknown[bits]:u1
.address 0x410A52
0001c4f0: PF := ~low:1[let $1 = #3930 >> 4 ^ #3930 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410A52
0001c4f3: SF := high:1[#3930]
.address 0x410A52
0001c4f6: ZF := 0 = #3930
.address 0x410A54
0001c4fd: R8 := pad:64[pad:32[mem[RSP + 0x58]]]
.address 0x410A5A
0001c506: when ~ZF goto %0001b140
00044cbc: goto %0001c50c

.address 0x410A5C
0001c50c: 
.address 0x410A5C
0001c517: #3932 := RCX - RAX
.address 0x410A5C
0001c51a: CF := RCX < RAX
.address 0x410A5C
0001c51d: OF := high:1[(RCX ^ RAX) & (RCX ^ #3932)]
.address 0x410A5C
0001c520: AF := 0x10 = (0x10 & (#3932 ^ RCX ^ RAX))
.address 0x410A5C
0001c523: PF := ~low:1[let $1 = #3932 >> 4 ^ #3932 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410A5C
0001c526: SF := high:1[#3932]
.address 0x410A5C
0001c529: ZF := 0 = #3932
.address 0x410A5F
0001c532: when ~CF goto %0001b140
00044cbd: goto %0001c538

.address 0x410A61
0001c538: 
.address 0x410A61
0001c53d: RDX := extend:64[low:32[RBX]]
.address 0x410A64
0001c544: mem := mem with [RSP + 0x60, el]:u64 <- R9
.address 0x410A69
0001c54b: mem := mem with [RSP + 0x58, el]:u64 <- RCX
.address 0x410A6E
0001c55a: #3934 := RDX
.address 0x410A6E
0001c55d: #3935 := RCX
.address 0x410A6E
0001c560: RDX := RDX - RCX
.address 0x410A6E
0001c563: CF := #3934 < #3935
.address 0x410A6E
0001c566: OF := high:1[(#3934 ^ #3935) & (#3934 ^ RDX)]
.address 0x410A6E
0001c569: AF := 0x10 = (0x10 & (RDX ^ #3934 ^ #3935))
.address 0x410A6E
0001c56c: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410A6E
0001c56f: SF := high:1[RDX]
.address 0x410A6E
0001c572: ZF := 0 = RDX
.address 0x410A71
0001c57f: #3937 := mem[RSP + 0x20, el]:u32 - 0x30
.address 0x410A71
0001c582: CF := mem[RSP + 0x20, el]:u32 < 0x30
.address 0x410A71
0001c585: OF := high:1[(mem[RSP + 0x20, el]:u32 ^ 0x30) & (mem[RSP + 0x20, el]:u32 ^ #3937)]
.address 0x410A71
0001c588: AF := 0x10 = (0x10 & (#3937 ^ mem[RSP + 0x20, el]:u32 ^ 0x30))
.address 0x410A71
0001c58b: PF := ~low:1[let $1 = #3937 >> 4 ^ #3937 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410A71
0001c58e: SF := high:1[#3937]
.address 0x410A71
0001c591: ZF := 0 = #3937
.address 0x410A76
0001c598: mem := mem with [RSP + 0x20] <- low:8[R8]
.address 0x410A7B
0001c59f: RBP := low:64[R15 + RDX]
.address 0x410A7F
0001c5a8: when ZF goto %0001b105
00044cbe: goto %0001c5ae

.address 0x411A2A
0001b105: 
.address 0x411A2A
0001b10a: RDI := R15
.address 0x411A2D
0001b111: RSI := 0x30
.address 0x411A32
0001b118: R15 := RBP
.address 0x411A35
0001b121: RSP := RSP - 8
.address 0x411A35
0001b124: mem := mem with [RSP, el]:u64 <- 0x411A3A
.address 0x411A35
0001b127: call @sub_403a60 with return %0001b129

.address 0x411A3A
0001b129: 
.address 0x411A3A
0001b12e: R8 := pad:64[pad:32[mem[RSP + 0x20]]]
.address 0x411A40
0001b135: RCX := mem[RSP + 0x58, el]:u64
.address 0x411A45
0001b13c: R9 := mem[RSP + 0x60, el]:u64
.address 0x411A4A
0001b144: goto %0001b140

.address 0x410A85
0001c5ae: 
.address 0x410A85
0001c5b3: RDI := R15
.address 0x410A88
0001c5ba: RSI := 0x20
.address 0x410A8D
0001c5c1: R15 := RBP
.address 0x410A90
0001c5ca: RSP := RSP - 8
.address 0x410A90
0001c5cd: mem := mem with [RSP, el]:u64 <- 0x410A95
.address 0x410A90
0001c5d0: call @sub_403a60 with return %0001c5d2

.address 0x410A95
0001c5d2: 
.address 0x410A95
0001c5d7: R8 := pad:64[pad:32[mem[RSP + 0x20]]]
.address 0x410A9B
0001c5de: R9 := mem[RSP + 0x60, el]:u64
.address 0x410AA0
0001c5e5: RCX := mem[RSP + 0x58, el]:u64
00044cbf: goto %0001b140

.address 0x410AA5
0001b140: 
.address 0x410AA5
0001b150: #3736 := low:8[R8]
.address 0x410AA5
0001b153: OF := 0
.address 0x410AA5
0001b156: CF := 0
.address 0x410AA5
0001b159: AF := unknown[bits]:u1
.address 0x410AA5
0001b15c: PF := ~low:1[let $1 = #3736 >> 4 ^ #3736 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410AA5
0001b15f: SF := high:1[#3736]
.address 0x410AA5
0001b162: ZF := 0 = #3736
.address 0x410AA8
0001b16c: when ~ZF goto %0001b166
00044cc0: goto %0001b1de

.address 0x411968
0001b166: 
.address 0x411968
0001b176: RSI := mem[RSP + 0x50, el]:u64
.address 0x41196D
0001b17d: RDX := RCX
.address 0x411970
0001b184: RDI := R15
.address 0x411973
0001b18b: mem := mem with [RSP + 0x20, el]:u64 <- R9
.address 0x411978
0001b192: mem := mem with [RSP + 0x18, el]:u64 <- RCX
.address 0x41197D
0001b1a0: #3738 := RSI
.address 0x41197D
0001b1a3: RSI := RSI + 1
.address 0x41197D
0001b1a6: CF := RSI < #3738
.address 0x41197D
0001b1a9: OF := ~high:1[#3738] & (high:1[#3738] | high:1[RSI]) & ~(high:1[#3738] & high:1[RSI])
.address 0x41197D
0001b1ac: AF := 0x10 = (0x10 & (RSI ^ #3738 ^ 1))
.address 0x41197D
0001b1af: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41197D
0001b1b2: SF := high:1[RSI]
.address 0x41197D
0001b1b5: ZF := 0 = RSI
.address 0x411981
0001b1be: RSP := RSP - 8
.address 0x411981
0001b1c1: mem := mem with [RSP, el]:u64 <- 0x411986
.address 0x411981
0001b1c4: call @sub_4105f0 with return %0001b1c6

.address 0x411986
0001b1c6: 
.address 0x411986
0001b1cb: RCX := mem[RSP + 0x18, el]:u64
.address 0x41198B
0001b1d2: R9 := mem[RSP + 0x20, el]:u64
.address 0x411990
0001b1d9: goto %00017659

.address 0x410AAE
0001b1de: 
.address 0x410AAE
0001b1e9: #3741 := mem[RSP + 0x18]
.address 0x410AAE
0001b1ec: CF := mem[RSP + 0x18] < 0
.address 0x410AAE
0001b1ef: OF := high:1[mem[RSP + 0x18] & (mem[RSP + 0x18] ^ #3741)]
.address 0x410AAE
0001b1f2: AF := 0x10 = (0x10 & (#3741 ^ mem[RSP + 0x18]))
.address 0x410AAE
0001b1f5: PF := ~low:1[let $1 = #3741 >> 4 ^ #3741 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x410AAE
0001b1f8: SF := high:1[#3741]
.address 0x410AAE
0001b1fb: ZF := 0 = #3741
.address 0x410AB3
0001b202: mem := mem with [RSP + 0x20, el]:u64 <- R9
.address 0x410AB8
0001b209: RSI := mem[RSP + 0x50, el]:u64
.address 0x410ABD
0001b213: when ZF goto %0001b20d
00044cc1: goto %0001b277

.address 0x411940
0001b20d: 
.address 0x411940
0001b21d: RDX := RCX
.address 0x411943
0001b22b: #3743 := RSI
.address 0x411943
0001b22e: RSI := RSI + 1
.address 0x411943
0001b231: CF := RSI < #3743
.address 0x411943
0001b234: OF := ~high:1[#3743] & (high:1[#3743] | high:1[RSI]) & ~(high:1[#3743] & high:1[RSI])
.address 0x411943
0001b237: AF := 0x10 = (0x10 & (RSI ^ #3743 ^ 1))
.address 0x411943
0001b23a: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x411943
0001b23d: SF := high:1[RSI]
.address 0x411943
0001b240: ZF := 0 = RSI
.address 0x411947
0001b247: RDI := R15
.address 0x41194A
0001b24e: mem := mem with [RSP + 0x18, el]:u64 <- RCX
.address 0x41194F
0001b257: RSP := RSP - 8
.address 0x41194F
0001b25a: mem := mem with [RSP, el]:u64 <- 0x411954
.address 0x41194F
0001b25d: call @sub_403b80 with return %0001b25f

.address 0x411954
0001b25f: 
.address 0x411954
0001b264: R9 := mem[RSP + 0x20, el]:u64
.address 0x411959
0001b26b: RCX := mem[RSP + 0x18, el]:u64
.address 0x41195E
0001b272: goto %00017659

.address 0x410AC3
0001b277: 
.address 0x410AC3
0001b27c: RDX := RCX
.address 0x410AC6
0001b28a: #3746 := RSI
.address 0x410AC6
0001b28d: RSI := RSI + 1
.address 0x410AC6
0001b290: CF := RSI < #3746
.address 0x410AC6
0001b293: OF := ~high:1[#3746] & (high:1[#3746] | high:1[RSI]) & ~(high:1[#3746] & high:1[RSI])
.address 0x410AC6
0001b296: AF := 0x10 = (0x10 & (RSI ^ #3746 ^ 1))
.address 0x410AC6
0001b299: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410AC6
0001b29c: SF := high:1[RSI]
.address 0x410AC6
0001b29f: ZF := 0 = RSI
.address 0x410ACA
0001b2a6: RDI := R15
.address 0x410ACD
0001b2ad: mem := mem with [RSP + 0x18, el]:u64 <- RCX
.address 0x410AD2
0001b2b6: RSP := RSP - 8
.address 0x410AD2
0001b2b9: mem := mem with [RSP, el]:u64 <- 0x410AD7
.address 0x410AD2
0001b2bc: call @sub_410640 with return %0001b2be

.address 0x410AD7
0001b2be: 
.address 0x410AD7
0001b2c3: RCX := mem[RSP + 0x18, el]:u64
.address 0x410ADC
0001b2ca: R9 := mem[RSP + 0x20, el]:u64
00044cc2: goto %00017659

.address 0x410AE1
00017659: 
.address 0x410AE1
0001766b: #3118 := R15
.address 0x410AE1
0001766e: #3119 := RCX
.address 0x410AE1
00017671: R15 := R15 + #3119
.address 0x410AE1
00017674: CF := R15 < #3118
.address 0x410AE1
00017677: OF := high:1[#3118] = high:1[#3119] & (high:1[#3118] | high:1[R15]) & ~(
high:1[#3118] & high:1[R15])
.address 0x410AE1
0001767a: AF := 0x10 = (0x10 & (R15 ^ #3118 ^ #3119))
.address 0x410AE1
0001767d: PF := ~low:1[let $1 = R15 >> 4 ^ R15 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410AE1
00017680: SF := high:1[R15]
.address 0x410AE1
00017683: ZF := 0 = R15
.address 0x410AE4
00017692: #3121 := R13
.address 0x410AE4
00017695: #3122 := R9
.address 0x410AE4
00017698: R13 := R13 + #3122
.address 0x410AE4
0001769b: CF := R13 < #3121
.address 0x410AE4
0001769e: OF := high:1[#3121] = high:1[#3122] & (high:1[#3121] | high:1[R13]) & ~(
high:1[#3121] & high:1[R13])
.address 0x410AE4
000176a1: AF := 0x10 = (0x10 & (R13 ^ #3121 ^ #3122))
.address 0x410AE4
000176a4: PF := ~low:1[let $1 = R13 >> 4 ^ R13 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410AE4
000176a7: SF := high:1[R13]
.address 0x410AE4
000176aa: ZF := 0 = R13
.address 0x410AE7
000176b1: goto %00016715

.address 0x41092D
00016b81: 
.address 0x41092D
00016b99: #3011 := R13
.address 0x41092D
00016b9c: #3012 := R9
.address 0x41092D
00016b9f: R13 := R13 + #3012
.address 0x41092D
00016ba2: CF := R13 < #3011
.address 0x41092D
00016ba5: OF := high:1[#3011] = high:1[#3012] & (high:1[#3011] | high:1[R13]) & ~(
high:1[#3011] & high:1[R13])
.address 0x41092D
00016ba8: AF := 0x10 = (0x10 & (R13 ^ #3011 ^ #3012))
.address 0x41092D
00016bab: PF := ~low:1[let $1 = R13 >> 4 ^ R13 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41092D
00016bae: SF := high:1[R13]
.address 0x41092D
00016bb1: ZF := 0 = R13
.address 0x410930
00016bb8: goto %00016715

.address 0x410778
00016b36: 
.address 0x410778
00016b4c: R13 := 0
.address 0x410778
00016b4f: AF := unknown[bits]:u1
.address 0x410778
00016b52: ZF := 1
.address 0x410778
00016b55: PF := 1
.address 0x410778
00016b58: OF := 0
.address 0x410778
00016b5b: CF := 0
.address 0x410778
00016b5e: SF := 0
00044cc3: goto %000165e6

.address 0x410795
0001c75f: 
.address 0x410795
0001c76b: #3951 := RSP
.address 0x410795
0001c76e: RSP := RSP + 0x4D8
.address 0x410795
0001c771: CF := RSP < #3951
.address 0x410795
0001c774: OF := ~high:1[#3951] & (high:1[#3951] | high:1[RSP]) & ~(high:1[#3951] & high:1[RSP])
.address 0x410795
0001c777: AF := 0x10 = (0x10 & (RSP ^ #3951 ^ 0x4D8))
.address 0x410795
0001c77a: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x410795
0001c77d: SF := high:1[RSP]
.address 0x410795
0001c780: ZF := 0 = RSP
.address 0x41079C
0001c788: RBX := mem[RSP, el]:u64
.address 0x41079C
0001c78b: RSP := RSP + 8
.address 0x41079D
0001c793: RBP := mem[RSP, el]:u64
.address 0x41079D
0001c796: RSP := RSP + 8
.address 0x41079E
0001c79e: R12 := mem[RSP, el]:u64
.address 0x41079E
0001c7a1: RSP := RSP + 8
.address 0x4107A0
0001c7a9: R13 := mem[RSP, el]:u64
.address 0x4107A0
0001c7ac: RSP := RSP + 8
.address 0x4107A2
0001c7b4: R14 := mem[RSP, el]:u64
.address 0x4107A2
0001c7b7: RSP := RSP + 8
.address 0x4107A4
0001c7bf: R15 := mem[RSP, el]:u64
.address 0x4107A4
0001c7c2: RSP := RSP + 8
.address 0x4107A6
0001c7cb: #3954 := mem[RSP, el]:u64
.address 0x4107A6
0001c7ce: RSP := RSP + 8
.address 0x4107A6
0001c7d2: call #3954 with noreturn


.address 0x411F80
00044482: sub sub_411f80()
.address 0x411F80
0001c627: 
.address 0x411F80
0001c633: #3941 := RSP
.address 0x411F80
0001c636: RSP := RSP - 0x18
.address 0x411F80
0001c639: CF := #3941 < 0x18
.address 0x411F80
0001c63c: OF := high:1[(#3941 ^ 0x18) & (#3941 ^ RSP)]
.address 0x411F80
0001c63f: AF := 0x10 = (0x10 & (RSP ^ #3941 ^ 0x18))
.address 0x411F80
0001c642: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x411F80
0001c645: SF := high:1[RSP]
.address 0x411F80
0001c648: ZF := 0 = RSP
.address 0x411F84
0001c64f: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x411F8D
0001c656: mem := mem with [RSP + 8, el]:u64 <- RAX
.address 0x411F92
0001c663: RAX := 0
.address 0x411F92
0001c666: AF := unknown[bits]:u1
.address 0x411F92
0001c669: ZF := 1
.address 0x411F92
0001c66c: PF := 1
.address 0x411F92
0001c66f: OF := 0
.address 0x411F92
0001c672: CF := 0
.address 0x411F92
0001c675: SF := 0
.address 0x411F94
0001c67c: mem := mem with [RSP + 7] <- 0
.address 0x411F99
0001c685: #3944 := R9
.address 0x411F99
0001c688: RSP := RSP - 8
.address 0x411F99
0001c68b: mem := mem with [RSP, el]:u64 <- #3944
.address 0x411F9B
0001c694: #3945 := R8
.address 0x411F9B
0001c697: RSP := RSP - 8
.address 0x411F9B
0001c69a: mem := mem with [RSP, el]:u64 <- #3945
.address 0x411F9D
0001c6a7: R8 := 0
.address 0x411F9D
0001c6aa: AF := unknown[bits]:u1
.address 0x411F9D
0001c6ad: ZF := 1
.address 0x411F9D
0001c6b0: PF := 1
.address 0x411F9D
0001c6b3: OF := 0
.address 0x411F9D
0001c6b6: CF := 0
.address 0x411F9D
0001c6b9: SF := 0
.address 0x411FA0
0001c6c0: R9 := low:64[RSP + 0x17]
.address 0x411FA5
0001c6c9: RSP := RSP - 8
.address 0x411FA5
0001c6cc: mem := mem with [RSP, el]:u64 <- 0x411FAA
.address 0x411FA5
0001c6cf: call @sub_410690 with return %0001c6d1

.address 0x411FAA
0001c6d1: 
.address 0x411FAA
0001c6d7: RDX := mem[RSP, el]:u64
.address 0x411FAA
0001c6da: RSP := RSP + 8
.address 0x411FAB
0001c6e2: RCX := mem[RSP, el]:u64
.address 0x411FAB
0001c6e5: RSP := RSP + 8
.address 0x411FAC
0001c6ec: RDX := mem[RSP + 8, el]:u64
.address 0x411FB1
0001c6f9: RDX := RDX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x411FB1
0001c6fc: OF := 0
.address 0x411FB1
0001c6ff: CF := 0
.address 0x411FB1
0001c702: AF := unknown[bits]:u1
.address 0x411FB1
0001c705: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x411FB1
0001c708: SF := high:1[RDX]
.address 0x411FB1
0001c70b: ZF := 0 = RDX
.address 0x411FBA
0001c715: when ~ZF goto %0001c70f
00044cc4: goto %0001c72c

.address 0x411FC1
0001c70f: 
.address 0x411FC1
0001c721: RSP := RSP - 8
.address 0x411FC1
0001c724: mem := mem with [RSP, el]:u64 <- 0x411FC6
.address 0x411FC1
0001c727: call @sub_403970 with return %0001c729

.address 0x411FC6
0001c729: 
00044cc5: call @sub_411fd0 with noreturn

.address 0x411FBC
0001c72c: 
.address 0x411FBC
0001c738: #3947 := RSP
.address 0x411FBC
0001c73b: RSP := RSP + 0x18
.address 0x411FBC
0001c73e: CF := RSP < #3947
.address 0x411FBC
0001c741: OF := ~high:1[#3947] & (high:1[#3947] | high:1[RSP]) & ~(high:1[#3947] & high:1[RSP])
.address 0x411FBC
0001c744: AF := 0x10 = (0x10 & (RSP ^ #3947 ^ 0x18))
.address 0x411FBC
0001c747: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x411FBC
0001c74a: SF := high:1[RSP]
.address 0x411FBC
0001c74d: ZF := 0 = RSP
.address 0x411FC0
0001c756: #3950 := mem[RSP, el]:u64
.address 0x411FC0
0001c759: RSP := RSP + 8
.address 0x411FC0
0001c75d: call #3950 with noreturn


.address 0x411FD0
00044485: sub sub_411fd0()
.address 0x411FD0
00000ce7: 
.address 0x411FD0
00000cfd: #132 := RDI
.address 0x411FD0
00000d00: OF := 0
.address 0x411FD0
00000d03: CF := 0
.address 0x411FD0
00000d06: AF := unknown[bits]:u1
.address 0x411FD0
00000d09: PF := ~low:1[let $1 = #132 >> 4 ^ #132 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x411FD0
00000d0c: SF := high:1[#132]
.address 0x411FD0
00000d0f: ZF := 0 = #132
.address 0x411FD3
00000d18: #134 := RBX
.address 0x411FD3
00000d1b: RSP := RSP - 8
.address 0x411FD3
00000d1e: mem := mem with [RSP, el]:u64 <- #134
.address 0x411FD4
00000d28: when ZF goto %00000d22
00044cc6: goto %000293b3

.address 0x412047
00000d22: 
.address 0x412047
00000d32: RCX := mem[0x6202C0, el]:u64
.address 0x41204E
00000d39: RDI := 0x41A668
.address 0x412055
00000d40: RDX := 0x37
.address 0x41205A
00000d47: RSI := 1
.address 0x41205F
00000d50: RSP := RSP - 8
.address 0x41205F
00000d53: mem := mem with [RSP, el]:u64 <- 0x412064
.address 0x41205F
00000d56: call @sub_403de0 with return %00000d58

.address 0x412064
00000d58: 
.address 0x412064
00000d5f: RSP := RSP - 8
.address 0x412064
00000d62: mem := mem with [RSP, el]:u64 <- 0x412069
.address 0x412064
00000d65: call @sub_4037e0 with return %00000d67

.address 0x412069
00000d67: 
00044cc7: call @sub_412070 with noreturn

.address 0x411FD6
000293b3: 
.address 0x411FD6
000293b8: RSI := 0x2F
.address 0x411FDB
000293bf: RBX := RDI
.address 0x411FDE
000293c8: RSP := RSP - 8
.address 0x411FDE
000293cb: mem := mem with [RSP, el]:u64 <- 0x411FE3
.address 0x411FDE
000293ce: call @sub_4039e0 with return %000293d0

.address 0x411FE3
000293d0: 
.address 0x411FE3
000293db: #5729 := RAX
.address 0x411FE3
000293de: OF := 0
.address 0x411FE3
000293e1: CF := 0
.address 0x411FE3
000293e4: AF := unknown[bits]:u1
.address 0x411FE3
000293e7: PF := ~low:1[let $1 = #5729 >> 4 ^ #5729 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x411FE3
000293ea: SF := high:1[#5729]
.address 0x411FE3
000293ed: ZF := 0 = #5729
.address 0x411FE6
000293f7: when ZF goto %000293f1
00044cc8: goto %00029425

.address 0x411FE8
00029425: 
.address 0x411FE8
0002942a: RDX := low:64[RAX + 1]
.address 0x411FEC
00029431: RCX := RDX
.address 0x411FEF
00029440: #5732 := RCX
.address 0x411FEF
00029443: #5733 := RBX
.address 0x411FEF
00029446: RCX := RCX - RBX
.address 0x411FEF
00029449: CF := #5732 < #5733
.address 0x411FEF
0002944c: OF := high:1[(#5732 ^ #5733) & (#5732 ^ RCX)]
.address 0x411FEF
0002944f: AF := 0x10 = (0x10 & (RCX ^ #5732 ^ #5733))
.address 0x411FEF
00029452: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x411FEF
00029455: SF := high:1[RCX]
.address 0x411FEF
00029458: ZF := 0 = RCX
.address 0x411FF2
00029465: #5735 := RCX - 6
.address 0x411FF2
00029468: CF := RCX < 6
.address 0x411FF2
0002946b: OF := high:1[(RCX ^ 6) & (RCX ^ #5735)]
.address 0x411FF2
0002946e: AF := 0x10 = (0x10 & (#5735 ^ RCX ^ 6))
.address 0x411FF2
00029471: PF := ~low:1[let $1 = #5735 >> 4 ^ #5735 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x411FF2
00029474: SF := high:1[#5735]
.address 0x411FF2
00029477: ZF := 0 = #5735
.address 0x411FF6
00029480: when ZF | (SF | OF) & ~(SF & OF) goto %000293f1
00044cc9: goto %00029486

.address 0x411FF8
00029486: 
.address 0x411FF8
0002948b: RSI := low:64[RAX - 6]
.address 0x411FFC
00029492: RDI := 0x41A6A0
.address 0x412003
00029499: RCX := 7
.address 0x412008
000294a1: #5741 := 1
.address 0x412008
000294c3: goto %000294bd

000294a3: 
.address 0x412008
000294a4: #5737 := mem[RSI]
.address 0x412008
000294a6: #5738 := mem[RDI]
.address 0x412008
000294a8: #5739 := #5737 - #5738
.address 0x412008
000294aa: RSI := RSI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x412008
000294ac: RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x412008
000294ae: CF := #5737 < #5738
.address 0x412008
000294b0: OF := high:1[(#5737 ^ #5738) & (#5737 ^ #5739)]
.address 0x412008
000294b2: AF := 0x10 = (0x10 & (#5739 ^ #5737 ^ #5738))
.address 0x412008
000294b4: PF := ~low:1[let $1 = #5739 >> 4 ^ #5739 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x412008
000294b6: SF := high:1[#5739]
.address 0x412008
000294b8: ZF := 0 = #5739
.address 0x412008
000294ba: RCX := RCX - 1
.address 0x412008
000294bc: #5741 := ZF
.address 0x412008
000294c1: goto %000294be

000294bd: 
.address 0x412008
000294c0: goto %000294be

000294be: 
.address 0x412008
000294bf: when RCX <> 0 & #5741 goto %000294a3
00044cca: goto %000294ca

000294ca: 
.address 0x41200A
000294cb: when ~ZF goto %000293f1
00044ccb: goto %000294d1

.address 0x41200C
000294d1: 
.address 0x41200C
000294d6: RDI := 0x41A6A8
.address 0x412013
000294dd: RCX := 3
.address 0x412018
000294e4: RSI := RDX
.address 0x41201B
000294eb: RBX := RDX
.address 0x41201E
000294f3: #5746 := 1
.address 0x41201E
00029515: goto %0002950f

000294f5: 
.address 0x41201E
000294f6: #5742 := mem[RSI]
.address 0x41201E
000294f8: #5743 := mem[RDI]
.address 0x41201E
000294fa: #5744 := #5742 - #5743
.address 0x41201E
000294fc: RSI := RSI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x41201E
000294fe: RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x41201E
00029500: CF := #5742 < #5743
.address 0x41201E
00029502: OF := high:1[(#5742 ^ #5743) & (#5742 ^ #5744)]
.address 0x41201E
00029504: AF := 0x10 = (0x10 & (#5744 ^ #5742 ^ #5743))
.address 0x41201E
00029506: PF := ~low:1[let $1 = #5744 >> 4 ^ #5744 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41201E
00029508: SF := high:1[#5744]
.address 0x41201E
0002950a: ZF := 0 = #5744
.address 0x41201E
0002950c: RCX := RCX - 1
.address 0x41201E
0002950e: #5746 := ZF
.address 0x41201E
00029513: goto %00029510

0002950f: 
.address 0x41201E
00029512: goto %00029510

00029510: 
.address 0x41201E
00029511: when RCX <> 0 & #5746 goto %000294f5
00044ccc: goto %0002951a

0002951a: 
.address 0x412020
0002951b: RSI := extract:63:8[RSI].pad:8[~(CF | ZF)]
.address 0x412024
00029522: RCX := extract:63:8[RCX].pad:8[CF]
.address 0x412027
0002952f: #5747 := low:8[RSI] - low:8[RCX]
.address 0x412027
00029532: CF := low:8[RSI] < low:8[RCX]
.address 0x412027
00029535: OF := high:1[(low:8[RSI] ^ low:8[RCX]) & (low:8[RSI] ^ #5747)]
.address 0x412027
00029538: AF := 0x10 = (0x10 & (#5747 ^ low:8[RSI] ^ low:8[RCX]))
.address 0x412027
0002953b: PF := ~low:1[let $1 = #5747 >> 4 ^ #5747 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x412027
0002953e: SF := high:1[#5747]
.address 0x412027
00029541: ZF := 0 = #5747
.address 0x41202A
0002954a: when ~ZF goto %000293f1
00044ccd: goto %00029550

.address 0x41202C
00029550: 
.address 0x41202C
00029555: RBX := low:64[RAX + 4]
.address 0x412030
0002955c: mem := mem with [0x620280, el]:u64 <- RBX
00044cce: goto %000293f1

.address 0x412037
000293f1: 
.address 0x412037
00029401: mem := mem with [0x621400, el]:u64 <- RBX
.address 0x41203E
00029408: mem := mem with [0x6202A8, el]:u64 <- RBX
.address 0x412045
00029410: RBX := mem[RSP, el]:u64
.address 0x412045
00029413: RSP := RSP + 8
.address 0x412046
0002941c: #5731 := mem[RSP, el]:u64
.address 0x412046
0002941f: RSP := RSP + 8
.address 0x412046
00029423: call #5731 with noreturn


.address 0x412070
0004448f: sub sub_412070()
.address 0x412070
00000d6a: 
.address 0x412070
00000d71: #135 := RBP
.address 0x412070
00000d74: RSP := RSP - 8
.address 0x412070
00000d77: mem := mem with [RSP, el]:u64 <- #135
.address 0x412071
00000d80: #136 := RBX
.address 0x412071
00000d83: RSP := RSP - 8
.address 0x412071
00000d86: mem := mem with [RSP, el]:u64 <- #136
.address 0x412072
00000d8d: RBP := RDI
.address 0x412075
00000d94: RBX := pad:64[low:32[RSI]]
.address 0x412077
00000da2: #137 := RSP
.address 0x412077
00000da5: RSP := RSP - 8
.address 0x412077
00000da8: CF := #137 < 8
.address 0x412077
00000dab: OF := high:1[(#137 ^ 8) & (#137 ^ RSP)]
.address 0x412077
00000dae: AF := 0x10 = (0x10 & (RSP ^ #137 ^ 8))
.address 0x412077
00000db1: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x412077
00000db4: SF := high:1[RSP]
.address 0x412077
00000db7: ZF := 0 = RSP
.address 0x41207B
00000dc1: RSP := RSP - 8
.address 0x41207B
00000dc4: mem := mem with [RSP, el]:u64 <- 0x412080
.address 0x41207B
00000dc7: call @sub_415d50 with return %00002556

.address 0x412080
00002556: 
.address 0x412080
0000255b: RDX := pad:64[pad:32[mem[RAX]]]
.address 0x412083
00002568: RDX := pad:64[low:32[RDX] & 0xFFFFFFDF]
.address 0x412083
0000256b: OF := 0
.address 0x412083
0000256e: CF := 0
.address 0x412083
00002571: AF := unknown[bits]:u1
.address 0x412083
00002574: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x412083
00002577: SF := high:1[low:32[RDX]]
.address 0x412083
0000257a: ZF := 0 = low:32[RDX]
.address 0x412086
00002587: #338 := low:8[RDX] - 0x55
.address 0x412086
0000258a: CF := low:8[RDX] < 0x55
.address 0x412086
0000258d: OF := high:1[(low:8[RDX] ^ 0x55) & (low:8[RDX] ^ #338)]
.address 0x412086
00002590: AF := 0x10 = (0x10 & (#338 ^ low:8[RDX] ^ 0x55))
.address 0x412086
00002593: PF := ~low:1[let $1 = #338 >> 4 ^ #338 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x412086
00002596: SF := high:1[#338]
.address 0x412086
00002599: ZF := 0 = #338
.address 0x412089
000025a3: when ZF goto %0000259d
00044ccf: goto %00029387

.address 0x412100
0000259d: 
.address 0x412100
000025ad: RDX := pad:64[pad:32[mem[RAX + 1]]]
.address 0x412104
000025ba: RDX := pad:64[low:32[RDX] & 0xFFFFFFDF]
.address 0x412104
000025bd: OF := 0
.address 0x412104
000025c0: CF := 0
.address 0x412104
000025c3: AF := unknown[bits]:u1
.address 0x412104
000025c6: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x412104
000025c9: SF := high:1[low:32[RDX]]
.address 0x412104
000025cc: ZF := 0 = low:32[RDX]
.address 0x412107
000025d9: #341 := low:8[RDX] - 0x54
.address 0x412107
000025dc: CF := low:8[RDX] < 0x54
.address 0x412107
000025df: OF := high:1[(low:8[RDX] ^ 0x54) & (low:8[RDX] ^ #341)]
.address 0x412107
000025e2: AF := 0x10 = (0x10 & (#341 ^ low:8[RDX] ^ 0x54))
.address 0x412107
000025e5: PF := ~low:1[let $1 = #341 >> 4 ^ #341 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x412107
000025e8: SF := high:1[#341]
.address 0x412107
000025eb: ZF := 0 = #341
.address 0x41210A
000025f5: when ~ZF goto %000025ef
00044cd0: goto %00002854

.address 0x41210C
00002854: 
.address 0x41210C
00002859: RDX := pad:64[pad:32[mem[RAX + 2]]]
.address 0x412110
00002866: RDX := pad:64[low:32[RDX] & 0xFFFFFFDF]
.address 0x412110
00002869: OF := 0
.address 0x412110
0000286c: CF := 0
.address 0x412110
0000286f: AF := unknown[bits]:u1
.address 0x412110
00002872: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x412110
00002875: SF := high:1[low:32[RDX]]
.address 0x412110
00002878: ZF := 0 = low:32[RDX]
.address 0x412113
00002885: #371 := low:8[RDX] - 0x46
.address 0x412113
00002888: CF := low:8[RDX] < 0x46
.address 0x412113
0000288b: OF := high:1[(low:8[RDX] ^ 0x46) & (low:8[RDX] ^ #371)]
.address 0x412113
0000288e: AF := 0x10 = (0x10 & (#371 ^ low:8[RDX] ^ 0x46))
.address 0x412113
00002891: PF := ~low:1[let $1 = #371 >> 4 ^ #371 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x412113
00002894: SF := high:1[#371]
.address 0x412113
00002897: ZF := 0 = #371
.address 0x412116
000028a0: when ~ZF goto %000025ef
00044cd1: goto %000028a6

.address 0x41211C
000028a6: 
.address 0x41211C
000028b1: #373 := mem[RAX + 3] - 0x2D
.address 0x41211C
000028b4: CF := mem[RAX + 3] < 0x2D
.address 0x41211C
000028b7: OF := high:1[(mem[RAX + 3] ^ 0x2D) & (mem[RAX + 3] ^ #373)]
.address 0x41211C
000028ba: AF := 0x10 = (0x10 & (#373 ^ mem[RAX + 3] ^ 0x2D))
.address 0x41211C
000028bd: PF := ~low:1[let $1 = #373 >> 4 ^ #373 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41211C
000028c0: SF := high:1[#373]
.address 0x41211C
000028c3: ZF := 0 = #373
.address 0x412120
000028cc: when ~ZF goto %000025ef
00044cd2: goto %000028d2

.address 0x412126
000028d2: 
.address 0x412126
000028dd: #375 := mem[RAX + 4] - 0x38
.address 0x412126
000028e0: CF := mem[RAX + 4] < 0x38
.address 0x412126
000028e3: OF := high:1[(mem[RAX + 4] ^ 0x38) & (mem[RAX + 4] ^ #375)]
.address 0x412126
000028e6: AF := 0x10 = (0x10 & (#375 ^ mem[RAX + 4] ^ 0x38))
.address 0x412126
000028e9: PF := ~low:1[let $1 = #375 >> 4 ^ #375 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x412126
000028ec: SF := high:1[#375]
.address 0x412126
000028ef: ZF := 0 = #375
.address 0x41212A
000028f8: when ~ZF goto %000025ef
00044cd3: goto %000028fe

.address 0x412130
000028fe: 
.address 0x412130
00002909: #377 := mem[RAX + 5]
.address 0x412130
0000290c: CF := mem[RAX + 5] < 0
.address 0x412130
0000290f: OF := high:1[mem[RAX + 5] & (mem[RAX + 5] ^ #377)]
.address 0x412130
00002912: AF := 0x10 = (0x10 & (#377 ^ mem[RAX + 5]))
.address 0x412130
00002915: PF := ~low:1[let $1 = #377 >> 4 ^ #377 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x412130
00002918: SF := high:1[#377]
.address 0x412130
0000291b: ZF := 0 = #377
.address 0x412134
00002924: when ~ZF goto %000025ef
00044cd4: goto %0000292a

.address 0x41213A
0000292a: 
.address 0x41213A
00002935: #379 := mem[RBP] - 0x60
.address 0x41213A
00002938: CF := mem[RBP] < 0x60
.address 0x41213A
0000293b: OF := high:1[(mem[RBP] ^ 0x60) & (mem[RBP] ^ #379)]
.address 0x41213A
0000293e: AF := 0x10 = (0x10 & (#379 ^ mem[RBP] ^ 0x60))
.address 0x41213A
00002941: PF := ~low:1[let $1 = #379 >> 4 ^ #379 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41213A
00002944: SF := high:1[#379]
.address 0x41213A
00002947: ZF := 0 = #379
.address 0x41213E
0000294e: RAX := 0x41A6AC
.address 0x412145
00002955: RDX := 0x41A6B0
.address 0x41214C
0000295c: RAX := if ~ZF then RDX else RAX
.address 0x412150
0000296a: #381 := RSP
.address 0x412150
0000296d: RSP := RSP + 8
.address 0x412150
00002970: CF := RSP < #381
.address 0x412150
00002973: OF := ~high:1[#381] & (high:1[#381] | high:1[RSP]) & ~(high:1[#381] & high:1[RSP])
.address 0x412150
00002976: AF := 0x10 = (0x10 & (RSP ^ #381 ^ 8))
.address 0x412150
00002979: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x412150
0000297c: SF := high:1[RSP]
.address 0x412150
0000297f: ZF := 0 = RSP
.address 0x412154
00002987: RBX := mem[RSP, el]:u64
.address 0x412154
0000298a: RSP := RSP + 8
.address 0x412155
00002992: RBP := mem[RSP, el]:u64
.address 0x412155
00002995: RSP := RSP + 8
.address 0x412156
0000299e: #384 := mem[RSP, el]:u64
.address 0x412156
000029a1: RSP := RSP + 8
.address 0x412156
000029a5: call #384 with noreturn

.address 0x41208B
00029387: 
.address 0x41208B
00029392: #5727 := low:8[RDX] - 0x47
.address 0x41208B
00029395: CF := low:8[RDX] < 0x47
.address 0x41208B
00029398: OF := high:1[(low:8[RDX] ^ 0x47) & (low:8[RDX] ^ #5727)]
.address 0x41208B
0002939b: AF := 0x10 = (0x10 & (#5727 ^ low:8[RDX] ^ 0x47))
.address 0x41208B
0002939e: PF := ~low:1[let $1 = #5727 >> 4 ^ #5727 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41208B
000293a1: SF := high:1[#5727]
.address 0x41208B
000293a4: ZF := 0 = #5727
.address 0x41208E
000293ad: when ZF goto %0000267a
00044cd5: goto %000025ef

.address 0x4120B0
0000267a: 
.address 0x4120B0
0000267f: RDX := pad:64[pad:32[mem[RAX + 1]]]
.address 0x4120B4
0000268c: RDX := pad:64[low:32[RDX] & 0xFFFFFFDF]
.address 0x4120B4
0000268f: OF := 0
.address 0x4120B4
00002692: CF := 0
.address 0x4120B4
00002695: AF := unknown[bits]:u1
.address 0x4120B4
00002698: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4120B4
0000269b: SF := high:1[low:32[RDX]]
.address 0x4120B4
0000269e: ZF := 0 = low:32[RDX]
.address 0x4120B7
000026ab: #350 := low:8[RDX] - 0x42
.address 0x4120B7
000026ae: CF := low:8[RDX] < 0x42
.address 0x4120B7
000026b1: OF := high:1[(low:8[RDX] ^ 0x42) & (low:8[RDX] ^ #350)]
.address 0x4120B7
000026b4: AF := 0x10 = (0x10 & (#350 ^ low:8[RDX] ^ 0x42))
.address 0x4120B7
000026b7: PF := ~low:1[let $1 = #350 >> 4 ^ #350 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4120B7
000026ba: SF := high:1[#350]
.address 0x4120B7
000026bd: ZF := 0 = #350
.address 0x4120BA
000026c6: when ~ZF goto %000025ef
00044cd6: goto %000026cc

.address 0x4120BC
000026cc: 
.address 0x4120BC
000026d7: #352 := mem[RAX + 2] - 0x31
.address 0x4120BC
000026da: CF := mem[RAX + 2] < 0x31
.address 0x4120BC
000026dd: OF := high:1[(mem[RAX + 2] ^ 0x31) & (mem[RAX + 2] ^ #352)]
.address 0x4120BC
000026e0: AF := 0x10 = (0x10 & (#352 ^ mem[RAX + 2] ^ 0x31))
.address 0x4120BC
000026e3: PF := ~low:1[let $1 = #352 >> 4 ^ #352 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4120BC
000026e6: SF := high:1[#352]
.address 0x4120BC
000026e9: ZF := 0 = #352
.address 0x4120C0
000026f2: when ~ZF goto %000025ef
00044cd7: goto %000026f8

.address 0x4120C2
000026f8: 
.address 0x4120C2
00002703: #354 := mem[RAX + 3] - 0x38
.address 0x4120C2
00002706: CF := mem[RAX + 3] < 0x38
.address 0x4120C2
00002709: OF := high:1[(mem[RAX + 3] ^ 0x38) & (mem[RAX + 3] ^ #354)]
.address 0x4120C2
0000270c: AF := 0x10 = (0x10 & (#354 ^ mem[RAX + 3] ^ 0x38))
.address 0x4120C2
0000270f: PF := ~low:1[let $1 = #354 >> 4 ^ #354 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4120C2
00002712: SF := high:1[#354]
.address 0x4120C2
00002715: ZF := 0 = #354
.address 0x4120C6
0000271e: when ~ZF goto %000025ef
00044cd8: goto %00002724

.address 0x4120C8
00002724: 
.address 0x4120C8
0000272f: #356 := mem[RAX + 4] - 0x30
.address 0x4120C8
00002732: CF := mem[RAX + 4] < 0x30
.address 0x4120C8
00002735: OF := high:1[(mem[RAX + 4] ^ 0x30) & (mem[RAX + 4] ^ #356)]
.address 0x4120C8
00002738: AF := 0x10 = (0x10 & (#356 ^ mem[RAX + 4] ^ 0x30))
.address 0x4120C8
0000273b: PF := ~low:1[let $1 = #356 >> 4 ^ #356 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4120C8
0000273e: SF := high:1[#356]
.address 0x4120C8
00002741: ZF := 0 = #356
.address 0x4120CC
0000274a: when ~ZF goto %000025ef
00044cd9: goto %00002750

.address 0x4120CE
00002750: 
.address 0x4120CE
0000275b: #358 := mem[RAX + 5] - 0x33
.address 0x4120CE
0000275e: CF := mem[RAX + 5] < 0x33
.address 0x4120CE
00002761: OF := high:1[(mem[RAX + 5] ^ 0x33) & (mem[RAX + 5] ^ #358)]
.address 0x4120CE
00002764: AF := 0x10 = (0x10 & (#358 ^ mem[RAX + 5] ^ 0x33))
.address 0x4120CE
00002767: PF := ~low:1[let $1 = #358 >> 4 ^ #358 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4120CE
0000276a: SF := high:1[#358]
.address 0x4120CE
0000276d: ZF := 0 = #358
.address 0x4120D2
00002776: when ~ZF goto %000025ef
00044cda: goto %0000277c

.address 0x4120D4
0000277c: 
.address 0x4120D4
00002787: #360 := mem[RAX + 6] - 0x30
.address 0x4120D4
0000278a: CF := mem[RAX + 6] < 0x30
.address 0x4120D4
0000278d: OF := high:1[(mem[RAX + 6] ^ 0x30) & (mem[RAX + 6] ^ #360)]
.address 0x4120D4
00002790: AF := 0x10 = (0x10 & (#360 ^ mem[RAX + 6] ^ 0x30))
.address 0x4120D4
00002793: PF := ~low:1[let $1 = #360 >> 4 ^ #360 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4120D4
00002796: SF := high:1[#360]
.address 0x4120D4
00002799: ZF := 0 = #360
.address 0x4120D8
000027a2: when ~ZF goto %000025ef
00044cdb: goto %000027a8

.address 0x4120DA
000027a8: 
.address 0x4120DA
000027b3: #362 := mem[RAX + 7]
.address 0x4120DA
000027b6: CF := mem[RAX + 7] < 0
.address 0x4120DA
000027b9: OF := high:1[mem[RAX + 7] & (mem[RAX + 7] ^ #362)]
.address 0x4120DA
000027bc: AF := 0x10 = (0x10 & (#362 ^ mem[RAX + 7]))
.address 0x4120DA
000027bf: PF := ~low:1[let $1 = #362 >> 4 ^ #362 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4120DA
000027c2: SF := high:1[#362]
.address 0x4120DA
000027c5: ZF := 0 = #362
.address 0x4120DE
000027ce: when ~ZF goto %000025ef
00044cdc: goto %000027d4

.address 0x4120E0
000027d4: 
.address 0x4120E0
000027df: #364 := mem[RBP] - 0x60
.address 0x4120E0
000027e2: CF := mem[RBP] < 0x60
.address 0x4120E0
000027e5: OF := high:1[(mem[RBP] ^ 0x60) & (mem[RBP] ^ #364)]
.address 0x4120E0
000027e8: AF := 0x10 = (0x10 & (#364 ^ mem[RBP] ^ 0x60))
.address 0x4120E0
000027eb: PF := ~low:1[let $1 = #364 >> 4 ^ #364 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4120E0
000027ee: SF := high:1[#364]
.address 0x4120E0
000027f1: ZF := 0 = #364
.address 0x4120E4
000027f8: RAX := 0x41A6B4
.address 0x4120EB
000027ff: RDX := 0x41A6B8
.address 0x4120F2
00002806: RAX := if ~ZF then RDX else RAX
.address 0x4120F6
00002814: #366 := RSP
.address 0x4120F6
00002817: RSP := RSP + 8
.address 0x4120F6
0000281a: CF := RSP < #366
.address 0x4120F6
0000281d: OF := ~high:1[#366] & (high:1[#366] | high:1[RSP]) & ~(high:1[#366] & high:1[RSP])
.address 0x4120F6
00002820: AF := 0x10 = (0x10 & (RSP ^ #366 ^ 8))
.address 0x4120F6
00002823: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4120F6
00002826: SF := high:1[RSP]
.address 0x4120F6
00002829: ZF := 0 = RSP
.address 0x4120FA
00002831: RBX := mem[RSP, el]:u64
.address 0x4120FA
00002834: RSP := RSP + 8
.address 0x4120FB
0000283c: RBP := mem[RSP, el]:u64
.address 0x4120FB
0000283f: RSP := RSP + 8
.address 0x4120FC
00002848: #369 := mem[RSP, el]:u64
.address 0x4120FC
0000284b: RSP := RSP + 8
.address 0x4120FC
0000284f: call #369 with noreturn

.address 0x412090
000025ef: 
.address 0x412090
000025ff: RAX := 0x41A6BB
.address 0x412097
00002606: RDX := 0x41B032
.address 0x41209E
00002613: #343 := low:32[RBX] - 9
.address 0x41209E
00002616: CF := low:32[RBX] < 9
.address 0x41209E
00002619: OF := high:1[(low:32[RBX] ^ 9) & (low:32[RBX] ^ #343)]
.address 0x41209E
0000261c: AF := 0x10 = (0x10 & (#343 ^ low:32[RBX] ^ 9))
.address 0x41209E
0000261f: PF := ~low:1[let $1 = #343 >> 4 ^ #343 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41209E
00002622: SF := high:1[#343]
.address 0x41209E
00002625: ZF := 0 = #343
.address 0x4120A1
0000262c: RAX := if ~ZF then RDX else RAX
.address 0x4120A5
0000263a: #345 := RSP
.address 0x4120A5
0000263d: RSP := RSP + 8
.address 0x4120A5
00002640: CF := RSP < #345
.address 0x4120A5
00002643: OF := ~high:1[#345] & (high:1[#345] | high:1[RSP]) & ~(high:1[#345] & high:1[RSP])
.address 0x4120A5
00002646: AF := 0x10 = (0x10 & (RSP ^ #345 ^ 8))
.address 0x4120A5
00002649: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4120A5
0000264c: SF := high:1[RSP]
.address 0x4120A5
0000264f: ZF := 0 = RSP
.address 0x4120A9
00002657: RBX := mem[RSP, el]:u64
.address 0x4120A9
0000265a: RSP := RSP + 8
.address 0x4120AA
00002662: RBP := mem[RSP, el]:u64
.address 0x4120AA
00002665: RSP := RSP + 8
.address 0x4120AB
0000266e: #348 := mem[RSP, el]:u64
.address 0x4120AB
00002671: RSP := RSP + 8
.address 0x4120AB
00002675: call #348 with noreturn


.address 0x412160
0004449e: sub sub_412160()
.address 0x412160
000029aa: 
.address 0x412160
000029b1: #385 := R15
.address 0x412160
000029b4: RSP := RSP - 8
.address 0x412160
000029b7: mem := mem with [RSP, el]:u64 <- #385
.address 0x412162
000029c0: #386 := R14
.address 0x412162
000029c3: RSP := RSP - 8
.address 0x412162
000029c6: mem := mem with [RSP, el]:u64 <- #386
.address 0x412164
000029cd: R15 := pad:64[low:32[R8]]
.address 0x412167
000029d6: #387 := R13
.address 0x412167
000029d9: RSP := RSP - 8
.address 0x412167
000029dc: mem := mem with [RSP, el]:u64 <- #387
.address 0x412169
000029e5: #388 := R12
.address 0x412169
000029e8: RSP := RSP - 8
.address 0x412169
000029eb: mem := mem with [RSP, el]:u64 <- #388
.address 0x41216B
000029f2: R14 := RDI
.address 0x41216E
000029fb: #389 := RBP
.address 0x41216E
000029fe: RSP := RSP - 8
.address 0x41216E
00002a01: mem := mem with [RSP, el]:u64 <- #389
.address 0x41216F
00002a0a: #390 := RBX
.address 0x41216F
00002a0d: RSP := RSP - 8
.address 0x41216F
00002a10: mem := mem with [RSP, el]:u64 <- #390
.address 0x412170
00002a17: RBX := pad:64[low:32[R9]]
.address 0x412173
00002a1e: R13 := RSI
.address 0x412176
00002a25: RBP := RCX
.address 0x412179
00002a32: RBX := pad:64[low:32[RBX] & 2]
.address 0x412179
00002a35: OF := 0
.address 0x412179
00002a38: CF := 0
.address 0x412179
00002a3b: AF := unknown[bits]:u1
.address 0x412179
00002a3e: PF := ~low:1[let $1 = low:32[RBX] >> 4 ^ low:32[RBX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x412179
00002a41: SF := high:1[low:32[RBX]]
.address 0x412179
00002a44: ZF := 0 = low:32[RBX]
.address 0x41217C
00002a52: #392 := RSP
.address 0x41217C
00002a55: RSP := RSP - 0xB8
.address 0x41217C
00002a58: CF := #392 < 0xB8
.address 0x41217C
00002a5b: OF := high:1[(#392 ^ 0xB8) & (#392 ^ RSP)]
.address 0x41217C
00002a5e: AF := 0x10 = (0x10 & (RSP ^ #392 ^ 0xB8))
.address 0x41217C
00002a61: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41217C
00002a64: SF := high:1[RSP]
.address 0x41217C
00002a67: ZF := 0 = RSP
.address 0x412183
00002a6e: RAX := mem[RSP + 0xF0, el]:u64
.address 0x41218B
00002a75: mem := mem with [RSP + 0x10, el]:u64 <- RDX
.address 0x412190
00002a7c: mem := mem with [RSP + 8, el]:u32 <- low:32[R8]
.address 0x412195
00002a83: mem := mem with [RSP + 0x78, el]:u32 <- low:32[R9]
.address 0x41219A
00002a8a: mem := mem with [RSP + 0x20, el]:u64 <- RAX
.address 0x41219F
00002a91: RAX := mem[RSP + 0xF8, el]:u64
.address 0x4121A7
00002a98: mem := mem with [RSP + 0x68, el]:u64 <- RAX
.address 0x4121AC
00002a9f: RAX := mem[RSP + 0x100, el]:u64
.address 0x4121B4
00002aa6: mem := mem with [RSP + 0x60, el]:u64 <- RAX
.address 0x4121B9
00002aad: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x4121C2
00002ab4: mem := mem with [RSP + 0xA8, el]:u64 <- RAX
.address 0x4121CA
00002ac1: RAX := 0
.address 0x4121CA
00002ac4: AF := unknown[bits]:u1
.address 0x4121CA
00002ac7: ZF := 1
.address 0x4121CA
00002aca: PF := 1
.address 0x4121CA
00002acd: OF := 0
.address 0x4121CA
00002ad0: CF := 0
.address 0x4121CA
00002ad3: SF := 0
.address 0x4121CC
00002adc: RSP := RSP - 8
.address 0x4121CC
00002adf: mem := mem with [RSP, el]:u64 <- 0x4121D1
.address 0x4121CC
00002ae2: call @sub_403940 with return %00002ae4

.address 0x4121D1
00002ae4: 
.address 0x4121D1
00002aef: #395 := low:32[R15] - 0xA
.address 0x4121D1
00002af2: CF := low:32[R15] < 0xA
.address 0x4121D1
00002af5: OF := high:1[(low:32[R15] ^ 0xA) & (low:32[R15] ^ #395)]
.address 0x4121D1
00002af8: AF := 0x10 = (0x10 & (#395 ^ low:32[R15] ^ 0xA))
.address 0x4121D1
00002afb: PF := ~low:1[let $1 = #395 >> 4 ^ #395 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4121D1
00002afe: SF := high:1[#395]
.address 0x4121D1
00002b01: ZF := 0 = #395
.address 0x4121D5
00002b08: mem := mem with [RSP + 0x58, el]:u64 <- RAX
.address 0x4121DA
00002b12: when ~(CF | ZF) goto %00002b0c
00044cdd: goto %0002573d

.address 0x41338F
00002b0c: 
.address 0x41338F
00002b1e: RSP := RSP - 8
.address 0x41338F
00002b21: mem := mem with [RSP, el]:u64 <- 0x413394
.address 0x41338F
00002b24: call @sub_4037e0 with return %00002b26

.address 0x413394
00002b26: 
00044cde: call @sub_4133a0 with noreturn

.address 0x4121E0
0002573d: 
.address 0x4121E0
00025742: RCX := 0x41A720
.address 0x4121E7
00025749: RDX := pad:64[low:32[R15]]
.address 0x4121EA
00025750: RAX := extend:64[mem[RCX + (RDX << 2), el]:u32]
.address 0x4121EE
0002575f: #5273 := RAX
.address 0x4121EE
00025762: #5274 := RCX
.address 0x4121EE
00025765: RAX := RAX + #5274
.address 0x4121EE
00025768: CF := RAX < #5273
.address 0x4121EE
0002576b: OF := high:1[#5273] = high:1[#5274] & (high:1[#5273] | high:1[RAX]) & ~(
high:1[#5273] & high:1[RAX])
.address 0x4121EE
0002576e: AF := 0x10 = (0x10 & (RAX ^ #5273 ^ #5274))
.address 0x4121EE
00025771: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4121EE
00025774: SF := high:1[RAX]
.address 0x4121EE
00025777: ZF := 0 = RAX
.address 0x4121F1
0002577f: call RAX with noreturn


.address 0x4133A0
000444a1: sub sub_4133a0()
.address 0x4133A0
00002b2c: 
.address 0x4133A0
00002b33: #397 := R15
.address 0x4133A0
00002b36: RSP := RSP - 8
.address 0x4133A0
00002b39: mem := mem with [RSP, el]:u64 <- #397
.address 0x4133A2
00002b42: #398 := R14
.address 0x4133A2
00002b45: RSP := RSP - 8
.address 0x4133A2
00002b48: mem := mem with [RSP, el]:u64 <- #398
.address 0x4133A4
00002b4f: R15 := extend:64[low:32[RDI]]
.address 0x4133A7
00002b58: #399 := R13
.address 0x4133A7
00002b5b: RSP := RSP - 8
.address 0x4133A7
00002b5e: mem := mem with [RSP, el]:u64 <- #399
.address 0x4133A9
00002b67: #400 := R12
.address 0x4133A9
00002b6a: RSP := RSP - 8
.address 0x4133A9
00002b6d: mem := mem with [RSP, el]:u64 <- #400
.address 0x4133AB
00002b74: R14 := RDX
.address 0x4133AE
00002b7d: #401 := RBP
.address 0x4133AE
00002b80: RSP := RSP - 8
.address 0x4133AE
00002b83: mem := mem with [RSP, el]:u64 <- #401
.address 0x4133AF
00002b8c: #402 := RBX
.address 0x4133AF
00002b8f: RSP := RSP - 8
.address 0x4133AF
00002b92: mem := mem with [RSP, el]:u64 <- #402
.address 0x4133B0
00002b99: RBP := RCX
.address 0x4133B3
00002ba7: #403 := RSP
.address 0x4133B3
00002baa: RSP := RSP - 0x28
.address 0x4133B3
00002bad: CF := #403 < 0x28
.address 0x4133B3
00002bb0: OF := high:1[(#403 ^ 0x28) & (#403 ^ RSP)]
.address 0x4133B3
00002bb3: AF := 0x10 = (0x10 & (RSP ^ #403 ^ 0x28))
.address 0x4133B3
00002bb6: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4133B3
00002bb9: SF := high:1[RSP]
.address 0x4133B3
00002bbc: ZF := 0 = RSP
.address 0x4133B7
00002bc3: mem := mem with [RSP + 8, el]:u64 <- RSI
.address 0x4133BC
00002bcc: RSP := RSP - 8
.address 0x4133BC
00002bcf: mem := mem with [RSP, el]:u64 <- 0x4133C1
.address 0x4133BC
00002bd2: call @sub_4037f0 with return %00002bd4

.address 0x4133C1
00002bd4: 
.address 0x4133C1
00002bd9: R13 := RAX
.address 0x4133C4
00002be0: RAX := pad:64[mem[RAX, el]:u32]
.address 0x4133C6
00002bed: #406 := low:32[R15]
.address 0x4133C6
00002bf0: OF := 0
.address 0x4133C6
00002bf3: CF := 0
.address 0x4133C6
00002bf6: AF := unknown[bits]:u1
.address 0x4133C6
00002bf9: PF := ~low:1[let $1 = #406 >> 4 ^ #406 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4133C6
00002bfc: SF := high:1[#406]
.address 0x4133C6
00002bff: ZF := 0 = #406
.address 0x4133C9
00002c06: RBX := mem[0x620240, el]:u64
.address 0x4133D0
00002c0d: mem := mem with [RSP + 0x18, el]:u32 <- low:32[RAX]
.address 0x4133D4
00002c17: when SF goto %00002c11
00044cdf: goto %000251f3

.address 0x413541
00002c11: 
.address 0x413541
00002c23: RSP := RSP - 8
.address 0x413541
00002c26: mem := mem with [RSP, el]:u64 <- 0x413546
.address 0x413541
00002c29: call @sub_4037e0 with return %00002c2b

.address 0x4133DA
000251f3: 
.address 0x4133DA
000251fe: #5223 := mem[0x620238, el]:u32 - low:32[R15]
.address 0x4133DA
00025201: CF := mem[0x620238, el]:u32 < low:32[R15]
.address 0x4133DA
00025204: OF := high:1[(mem[0x620238, el]:u32 ^ low:32[R15]) & (mem[0x620238, el]:u32 ^ #5223)]
.address 0x4133DA
00025207: AF := 0x10 = (0x10 & (#5223 ^ mem[0x620238, el]:u32 ^ low:32[R15]))
.address 0x4133DA
0002520a: PF := ~low:1[let $1 = #5223 >> 4 ^ #5223 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4133DA
0002520d: SF := high:1[#5223]
.address 0x4133DA
00025210: ZF := 0 = #5223
.address 0x4133E1
0002521a: when ~(ZF | (SF | OF) & ~(SF & OF)) goto %00025214
00044ce0: goto %00025689

.address 0x4133E3
00025689: 
.address 0x4133E3
00025694: #5267 := low:32[R15] - 0x7FFFFFFE
.address 0x4133E3
00025697: CF := low:32[R15] < 0x7FFFFFFE
.address 0x4133E3
0002569a: OF := high:1[(low:32[R15] ^ 0x7FFFFFFE) & (low:32[R15] ^ #5267)]
.address 0x4133E3
0002569d: AF := 0x10 = (0x10 & (#5267 ^ low:32[R15] ^ 0x7FFFFFFE))
.address 0x4133E3
000256a0: PF := ~low:1[let $1 = #5267 >> 4 ^ #5267 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4133E3
000256a3: SF := high:1[#5267]
.address 0x4133E3
000256a6: ZF := 0 = #5267
.address 0x4133EA
000256af: when ~(CF | ZF) goto %00002c2b
00044ce1: goto %000256b5

.address 0x413546
00002c2b: 
.address 0x413546
00002c33: RSP := RSP - 8
.address 0x413546
00002c36: mem := mem with [RSP, el]:u64 <- 0x41354B
.address 0x413546
00002c39: call @sub_4146d0 with return %000244df

.address 0x41354B
000244df: 
00044ce2: call @sub_413550 with noreturn

.address 0x4133F0
000256b5: 
.address 0x4133F0
000256ba: R12 := pad:64[low:32[R15 + 1]]
.address 0x4133F4
000256c1: RAX := 0x620250
.address 0x4133FB
000256c8: RSI := extend:64[low:32[R12]]
.address 0x4133FE
000256d6: #5269 := RSI
.address 0x4133FE
000256d9: RSI := RSI << 4
.address 0x4133FE
000256dc: CF := low:1[#5269 >> 0x3C]
.address 0x4133FE
000256df: SF := high:1[RSI]
.address 0x4133FE
000256e2: ZF := 0 = RSI
.address 0x4133FE
000256e5: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4133FE
000256e8: AF := unknown[bits]:u1
.address 0x4133FE
000256eb: OF := unknown[bits]:u1
.address 0x413402
000256f8: #5271 := RBX - RAX
.address 0x413402
000256fb: CF := RBX < RAX
.address 0x413402
000256fe: OF := high:1[(RBX ^ RAX) & (RBX ^ #5271)]
.address 0x413402
00025701: AF := 0x10 = (0x10 & (#5271 ^ RBX ^ RAX))
.address 0x413402
00025704: PF := ~low:1[let $1 = #5271 >> 4 ^ #5271 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413402
00025707: SF := high:1[#5271]
.address 0x413402
0002570a: ZF := 0 = #5271
.address 0x413405
00025713: when ZF goto %0002541e
00044ce3: goto %00025719

.address 0x413520
0002541e: 
.address 0x413520
00025429: RDI := 0
.address 0x413520
0002542c: AF := unknown[bits]:u1
.address 0x413520
0002542f: ZF := 1
.address 0x413520
00025432: PF := 1
.address 0x413520
00025435: OF := 0
.address 0x413520
00025438: CF := 0
.address 0x413520
0002543b: SF := 0
.address 0x413522
00025444: RSP := RSP - 8
.address 0x413522
00025447: mem := mem with [RSP, el]:u64 <- 0x413527
.address 0x413522
0002544a: call @sub_4144e0 with return %0002544c

.address 0x413527
0002544c: 
.address 0x413527
00025451: YMM0 := extract:255:128[YMM0].pad:128[mem[0x620250, el]:u128]
.address 0x41352F
00025458: RBX := RAX
.address 0x413532
0002545f: mem := mem with [0x620240, el]:u64 <- RAX
.address 0x413539
00025466: mem := mem with [RAX, el]:u128 <- low:128[YMM0]
.address 0x41353C
0002546e: goto %0002546a

.address 0x41340B
00025719: 
.address 0x41340B
0002571e: RDI := RBX
.address 0x41340E
00025727: RSP := RSP - 8
.address 0x41340E
0002572a: mem := mem with [RSP, el]:u64 <- 0x413413
.address 0x41340E
0002572d: call @sub_4144e0 with return %0002572f

.address 0x413413
0002572f: 
.address 0x413413
00025734: RBX := RAX
.address 0x413416
0002573b: mem := mem with [0x620240, el]:u64 <- RAX
00044ce4: goto %0002546a

.address 0x41341D
0002546a: 
.address 0x41341D
00025474: RDI := extend:64[mem[0x620238, el]:u32]
.address 0x413424
0002547b: RDX := pad:64[low:32[R12]]
.address 0x413427
00025488: RSI := 0
.address 0x413427
0002548b: AF := unknown[bits]:u1
.address 0x413427
0002548e: ZF := 1
.address 0x413427
00025491: PF := 1
.address 0x413427
00025494: OF := 0
.address 0x413427
00025497: CF := 0
.address 0x413427
0002549a: SF := 0
.address 0x413429
000254a9: #5246 := low:32[RDX]
.address 0x413429
000254ac: #5247 := low:32[RDI]
.address 0x413429
000254af: RDX := pad:64[low:32[RDX] - low:32[RDI]]
.address 0x413429
000254b2: CF := #5246 < #5247
.address 0x413429
000254b5: OF := high:1[(#5246 ^ #5247) & (#5246 ^ low:32[RDX])]
.address 0x413429
000254b8: AF := 0x10 = (0x10 & (low:32[RDX] ^ #5246 ^ #5247))
.address 0x413429
000254bb: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413429
000254be: SF := high:1[low:32[RDX]]
.address 0x413429
000254c1: ZF := 0 = low:32[RDX]
.address 0x41342B
000254cf: #5249 := RDI
.address 0x41342B
000254d2: RDI := RDI << 4
.address 0x41342B
000254d5: CF := low:1[#5249 >> 0x3C]
.address 0x41342B
000254d8: SF := high:1[RDI]
.address 0x41342B
000254db: ZF := 0 = RDI
.address 0x41342B
000254de: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41342B
000254e1: AF := unknown[bits]:u1
.address 0x41342B
000254e4: OF := unknown[bits]:u1
.address 0x41342F
000254eb: RDX := extend:64[low:32[RDX]]
.address 0x413432
000254fa: #5251 := RDI
.address 0x413432
000254fd: #5252 := RBX
.address 0x413432
00025500: RDI := RDI + #5252
.address 0x413432
00025503: CF := RDI < #5251
.address 0x413432
00025506: OF := high:1[#5251] = high:1[#5252] & (high:1[#5251] | high:1[RDI]) & ~(
high:1[#5251] & high:1[RDI])
.address 0x413432
00025509: AF := 0x10 = (0x10 & (RDI ^ #5251 ^ #5252))
.address 0x413432
0002550c: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x413432
0002550f: SF := high:1[RDI]
.address 0x413432
00025512: ZF := 0 = RDI
.address 0x413435
00025520: #5254 := RDX
.address 0x413435
00025523: RDX := RDX << 4
.address 0x413435
00025526: CF := low:1[#5254 >> 0x3C]
.address 0x413435
00025529: SF := high:1[RDX]
.address 0x413435
0002552c: ZF := 0 = RDX
.address 0x413435
0002552f: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x413435
00025532: AF := unknown[bits]:u1
.address 0x413435
00025535: OF := unknown[bits]:u1
.address 0x413439
0002553e: RSP := RSP - 8
.address 0x413439
00025541: mem := mem with [RSP, el]:u64 <- 0x41343E
.address 0x413439
00025544: call @sub_403a60 with return %00025546

.address 0x41343E
00025546: 
.address 0x41343E
0002554b: mem := mem with [0x620238, el]:u32 <- low:32[R12]
00044ce5: goto %00025214

.address 0x413445
00025214: 
.address 0x413445
00025224: RAX := pad:64[mem[RBP + 4, el]:u32]
.address 0x413448
00025232: #5225 := R15
.address 0x413448
00025235: R15 := R15 << 4
.address 0x413448
00025238: CF := low:1[#5225 >> 0x3C]
.address 0x413448
0002523b: SF := high:1[R15]
.address 0x413448
0002523e: ZF := 0 = R15
.address 0x413448
00025241: PF := ~low:1[let $1 = R15 >> 4 ^ R15 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x413448
00025244: AF := unknown[bits]:u1
.address 0x413448
00025247: OF := unknown[bits]:u1
.address 0x41344C
00025255: #5227 := RSP
.address 0x41344C
00025258: RSP := RSP - 8
.address 0x41344C
0002525b: CF := #5227 < 8
.address 0x41344C
0002525e: OF := high:1[(#5227 ^ 8) & (#5227 ^ RSP)]
.address 0x41344C
00025261: AF := 0x10 = (0x10 & (RSP ^ #5227 ^ 8))
.address 0x41344C
00025264: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41344C
00025267: SF := high:1[RSP]
.address 0x41344C
0002526a: ZF := 0 = RSP
.address 0x413450
00025279: #5230 := RBX
.address 0x413450
0002527c: #5231 := R15
.address 0x413450
0002527f: RBX := RBX + #5231
.address 0x413450
00025282: CF := RBX < #5230
.address 0x413450
00025285: OF := high:1[#5230] = high:1[#5231] & (high:1[#5230] | high:1[RBX]) & ~(
high:1[#5230] & high:1[RBX])
.address 0x413450
00025288: AF := 0x10 = (0x10 & (RBX ^ #5230 ^ #5231))
.address 0x413450
0002528b: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x413450
0002528e: SF := high:1[RBX]
.address 0x413450
00025291: ZF := 0 = RBX
.address 0x413453
00025298: R15 := low:64[RBP + 8]
.address 0x413457
0002529f: R8 := pad:64[mem[RBP, el]:u32]
.address 0x41345B
000252a6: R11 := mem[RBX, el]:u64
.address 0x41345E
000252ad: R12 := mem[RBX + 8, el]:u64
.address 0x413462
000252b4: RCX := R14
.address 0x413465
000252c1: RAX := pad:64[low:32[RAX] | 1]
.address 0x413465
000252c4: OF := 0
.address 0x413465
000252c7: CF := 0
.address 0x413465
000252ca: AF := unknown[bits]:u1
.address 0x413465
000252cd: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413465
000252d0: SF := high:1[low:32[RAX]]
.address 0x413465
000252d3: ZF := 0 = low:32[RAX]
.address 0x413468
000252da: mem := mem with [RSP + 0x24, el]:u32 <- low:32[RAX]
.address 0x41346C
000252e3: #5234 := mem[RBP + 0x30, el]:u64
.address 0x41346C
000252e6: RSP := RSP - 8
.address 0x41346C
000252e9: mem := mem with [RSP, el]:u64 <- #5234
.address 0x41346F
000252f0: R9 := pad:64[low:32[RAX]]
.address 0x413472
000252f9: #5235 := mem[RBP + 0x28, el]:u64
.address 0x413472
000252fc: RSP := RSP - 8
.address 0x413472
000252ff: mem := mem with [RSP, el]:u64 <- #5235
.address 0x413475
00025308: #5236 := R15
.address 0x413475
0002530b: RSP := RSP - 8
.address 0x413475
0002530e: mem := mem with [RSP, el]:u64 <- #5236
.address 0x413477
00025315: RSI := R11
.address 0x41347A
0002531c: RDX := mem[RSP + 0x28, el]:u64
.address 0x41347F
00025323: RDI := R12
.address 0x413482
0002532a: mem := mem with [RSP + 0x30, el]:u64 <- R11
.address 0x413487
00025333: RSP := RSP - 8
.address 0x413487
00025336: mem := mem with [RSP, el]:u64 <- 0x41348C
.address 0x413487
00025339: call @sub_412160 with return %0002533b

.address 0x41348C
0002533b: 
.address 0x41348C
00025347: #5237 := RSP
.address 0x41348C
0002534a: RSP := RSP + 0x20
.address 0x41348C
0002534d: CF := RSP < #5237
.address 0x41348C
00025350: OF := ~high:1[#5237] & (high:1[#5237] | high:1[RSP]) & ~(high:1[#5237] & high:1[RSP])
.address 0x41348C
00025353: AF := 0x10 = (0x10 & (RSP ^ #5237 ^ 0x20))
.address 0x41348C
00025356: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41348C
00025359: SF := high:1[RSP]
.address 0x41348C
0002535c: ZF := 0 = RSP
.address 0x413490
00025363: R11 := mem[RSP + 0x10, el]:u64
.address 0x413495
00025370: #5240 := R11 - RAX
.address 0x413495
00025373: CF := R11 < RAX
.address 0x413495
00025376: OF := high:1[(R11 ^ RAX) & (R11 ^ #5240)]
.address 0x413495
00025379: AF := 0x10 = (0x10 & (#5240 ^ R11 ^ RAX))
.address 0x413495
0002537c: PF := ~low:1[let $1 = #5240 >> 4 ^ #5240 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413495
0002537f: SF := high:1[#5240]
.address 0x413495
00025382: ZF := 0 = #5240
.address 0x413498
0002538c: when ~(CF | ZF) goto %00025386
00044ce6: goto %0002554d

.address 0x41349A
0002554d: 
.address 0x41349A
00025552: RSI := low:64[RAX + 1]
.address 0x41349E
00025559: RAX := 0x621420
.address 0x4134A5
00025566: #5256 := R12 - RAX
.address 0x4134A5
00025569: CF := R12 < RAX
.address 0x4134A5
0002556c: OF := high:1[(R12 ^ RAX) & (R12 ^ #5256)]
.address 0x4134A5
0002556f: AF := 0x10 = (0x10 & (#5256 ^ R12 ^ RAX))
.address 0x4134A5
00025572: PF := ~low:1[let $1 = #5256 >> 4 ^ #5256 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4134A5
00025575: SF := high:1[#5256]
.address 0x4134A5
00025578: ZF := 0 = #5256
.address 0x4134A8
0002557f: mem := mem with [RBX, el]:u64 <- RSI
.address 0x4134AB
00025589: when ZF goto %00025583
00044ce7: goto %00025665

.address 0x4134AD
00025665: 
.address 0x4134AD
0002566a: RDI := R12
.address 0x4134B0
00025671: mem := mem with [RSP + 0x10, el]:u64 <- RSI
.address 0x4134B5
0002567a: RSP := RSP - 8
.address 0x4134B5
0002567d: mem := mem with [RSP, el]:u64 <- 0x4134BA
.address 0x4134B5
00025680: call @sub_403e70 with return %00025682

.address 0x4134BA
00025682: 
.address 0x4134BA
00025687: RSI := mem[RSP + 0x10, el]:u64
00044ce8: goto %00025583

.address 0x4134BF
00025583: 
.address 0x4134BF
00025593: RDI := RSI
.address 0x4134C2
0002559a: mem := mem with [RSP + 0x10, el]:u64 <- RSI
.address 0x4134C7
000255a3: RSP := RSP - 8
.address 0x4134C7
000255a6: mem := mem with [RSP, el]:u64 <- 0x4134CC
.address 0x4134C7
000255a9: call @sub_414480 with return %000255ab

.address 0x4134CC
000255ab: 
.address 0x4134CC
000255b7: #5258 := RSP
.address 0x4134CC
000255ba: RSP := RSP - 8
.address 0x4134CC
000255bd: CF := #5258 < 8
.address 0x4134CC
000255c0: OF := high:1[(#5258 ^ 8) & (#5258 ^ RSP)]
.address 0x4134CC
000255c3: AF := 0x10 = (0x10 & (RSP ^ #5258 ^ 8))
.address 0x4134CC
000255c6: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4134CC
000255c9: SF := high:1[RSP]
.address 0x4134CC
000255cc: ZF := 0 = RSP
.address 0x4134D0
000255d3: mem := mem with [RBX + 8, el]:u64 <- RAX
.address 0x4134D4
000255da: R8 := pad:64[mem[RBP, el]:u32]
.address 0x4134D8
000255e3: #5261 := mem[RBP + 0x30, el]:u64
.address 0x4134D8
000255e6: RSP := RSP - 8
.address 0x4134D8
000255e9: mem := mem with [RSP, el]:u64 <- #5261
.address 0x4134DB
000255f2: #5262 := mem[RBP + 0x28, el]:u64
.address 0x4134DB
000255f5: RSP := RSP - 8
.address 0x4134DB
000255f8: mem := mem with [RSP, el]:u64 <- #5262
.address 0x4134DE
000255ff: RCX := R14
.address 0x4134E1
00025608: #5263 := R15
.address 0x4134E1
0002560b: RSP := RSP - 8
.address 0x4134E1
0002560e: mem := mem with [RSP, el]:u64 <- #5263
.address 0x4134E3
00025615: R9 := pad:64[mem[RSP + 0x3C, el]:u32]
.address 0x4134E8
0002561c: RDI := RAX
.address 0x4134EB
00025623: RDX := mem[RSP + 0x28, el]:u64
.address 0x4134F0
0002562a: RSI := mem[RSP + 0x30, el]:u64
.address 0x4134F5
00025631: R12 := RAX
.address 0x4134F8
0002563a: RSP := RSP - 8
.address 0x4134F8
0002563d: mem := mem with [RSP, el]:u64 <- 0x4134FD
.address 0x4134F8
00025640: call @sub_412160 with return %00025642

.address 0x4134FD
00025642: 
.address 0x4134FD
0002564e: #5264 := RSP
.address 0x4134FD
00025651: RSP := RSP + 0x20
.address 0x4134FD
00025654: CF := RSP < #5264
.address 0x4134FD
00025657: OF := ~high:1[#5264] & (high:1[#5264] | high:1[RSP]) & ~(high:1[#5264] & high:1[RSP])
.address 0x4134FD
0002565a: AF := 0x10 = (0x10 & (RSP ^ #5264 ^ 0x20))
.address 0x4134FD
0002565d: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4134FD
00025660: SF := high:1[RSP]
.address 0x4134FD
00025663: ZF := 0 = RSP
00044ce9: goto %00025386

.address 0x413501
00025386: 
.address 0x413501
00025396: RAX := pad:64[mem[RSP + 0x18, el]:u32]
.address 0x413505
0002539d: mem := mem with [R13, el]:u32 <- low:32[RAX]
.address 0x413509
000253ab: #5242 := RSP
.address 0x413509
000253ae: RSP := RSP + 0x28
.address 0x413509
000253b1: CF := RSP < #5242
.address 0x413509
000253b4: OF := ~high:1[#5242] & (high:1[#5242] | high:1[RSP]) & ~(high:1[#5242] & high:1[RSP])
.address 0x413509
000253b7: AF := 0x10 = (0x10 & (RSP ^ #5242 ^ 0x28))
.address 0x413509
000253ba: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x413509
000253bd: SF := high:1[RSP]
.address 0x413509
000253c0: ZF := 0 = RSP
.address 0x41350D
000253c7: RAX := R12
.address 0x413510
000253cf: RBX := mem[RSP, el]:u64
.address 0x413510
000253d2: RSP := RSP + 8
.address 0x413511
000253da: RBP := mem[RSP, el]:u64
.address 0x413511
000253dd: RSP := RSP + 8
.address 0x413512
000253e5: R12 := mem[RSP, el]:u64
.address 0x413512
000253e8: RSP := RSP + 8
.address 0x413514
000253f0: R13 := mem[RSP, el]:u64
.address 0x413514
000253f3: RSP := RSP + 8
.address 0x413516
000253fb: R14 := mem[RSP, el]:u64
.address 0x413516
000253fe: RSP := RSP + 8
.address 0x413518
00025406: R15 := mem[RSP, el]:u64
.address 0x413518
00025409: RSP := RSP + 8
.address 0x41351A
00025412: #5245 := mem[RSP, el]:u64
.address 0x41351A
00025415: RSP := RSP + 8
.address 0x41351A
00025419: call #5245 with noreturn


.address 0x413550
000444ad: sub sub_413550()
.address 0x413550
000244e2: 
.address 0x413550
000244e9: #5105 := R12
.address 0x413550
000244ec: RSP := RSP - 8
.address 0x413550
000244ef: mem := mem with [RSP, el]:u64 <- #5105
.address 0x413552
000244f8: #5106 := RBP
.address 0x413552
000244fb: RSP := RSP - 8
.address 0x413552
000244fe: mem := mem with [RSP, el]:u64 <- #5106
.address 0x413553
00024507: #5107 := RBX
.address 0x413553
0002450a: RSP := RSP - 8
.address 0x413553
0002450d: mem := mem with [RSP, el]:u64 <- #5107
.address 0x413554
00024514: RBX := RDI
.address 0x413557
0002451d: RSP := RSP - 8
.address 0x413557
00024520: mem := mem with [RSP, el]:u64 <- 0x41355C
.address 0x413557
00024523: call @sub_4037f0 with return %00024525

.address 0x41355C
00024525: 
.address 0x41355C
0002452a: R12 := pad:64[mem[RAX, el]:u32]
.address 0x41355F
00024531: RBP := RAX
.address 0x413562
00024538: RAX := 0x621520
.address 0x413569
00024545: #5108 := RBX
.address 0x413569
00024548: OF := 0
.address 0x413569
0002454b: CF := 0
.address 0x413569
0002454e: AF := unknown[bits]:u1
.address 0x413569
00024551: PF := ~low:1[let $1 = #5108 >> 4 ^ #5108 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413569
00024554: SF := high:1[#5108]
.address 0x413569
00024557: ZF := 0 = #5108
.address 0x41356C
0002455e: RSI := 0x38
.address 0x413571
00024565: RBX := if ZF then RAX else RBX
.address 0x413575
0002456c: RDI := RBX
.address 0x413578
00024575: RSP := RSP - 8
.address 0x413578
00024578: mem := mem with [RSP, el]:u64 <- 0x41357D
.address 0x413578
0002457b: call @sub_414680 with return %0002457d

.address 0x41357D
0002457d: 
.address 0x41357D
00024582: mem := mem with [RBP, el]:u32 <- low:32[R12]
.address 0x413581
0002458a: RBX := mem[RSP, el]:u64
.address 0x413581
0002458d: RSP := RSP + 8
.address 0x413582
00024595: RBP := mem[RSP, el]:u64
.address 0x413582
00024598: RSP := RSP + 8
.address 0x413583
000245a0: R12 := mem[RSP, el]:u64
.address 0x413583
000245a3: RSP := RSP + 8
.address 0x413585
000245ac: #5110 := mem[RSP, el]:u64
.address 0x413585
000245af: RSP := RSP + 8
.address 0x413585
000245b3: call #5110 with noreturn


.address 0x413590
000444ae: sub sub_413590()
.address 0x413590
000245b8: 
.address 0x413590
000245bd: RAX := 0x621520
.address 0x413597
000245ca: #5111 := RDI
.address 0x413597
000245cd: OF := 0
.address 0x413597
000245d0: CF := 0
.address 0x413597
000245d3: AF := unknown[bits]:u1
.address 0x413597
000245d6: PF := ~low:1[let $1 = #5111 >> 4 ^ #5111 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413597
000245d9: SF := high:1[#5111]
.address 0x413597
000245dc: ZF := 0 = #5111
.address 0x41359A
000245e3: RDI := if ZF then RAX else RDI
00044cea: call @sub_41359e with noreturn


.address 0x41359E
000444b0: sub sub_41359e()
.address 0x41359E
000245e5: 
.address 0x41359E
000245ea: RAX := pad:64[mem[RDI, el]:u32]
.address 0x4135A0
000245f3: #5113 := mem[RSP, el]:u64
.address 0x4135A0
000245f6: RSP := RSP + 8
.address 0x4135A0
000245fa: call #5113 with noreturn


.address 0x4135B0
000444b1: sub sub_4135b0()
.address 0x4135B0
00024602: 
.address 0x4135B0
00024607: RAX := 0x621520
.address 0x4135B7
00024614: #5114 := RDI
.address 0x4135B7
00024617: OF := 0
.address 0x4135B7
0002461a: CF := 0
.address 0x4135B7
0002461d: AF := unknown[bits]:u1
.address 0x4135B7
00024620: PF := ~low:1[let $1 = #5114 >> 4 ^ #5114 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4135B7
00024623: SF := high:1[#5114]
.address 0x4135B7
00024626: ZF := 0 = #5114
.address 0x4135BA
0002462d: RDI := if ZF then RAX else RDI
.address 0x4135BE
00024634: mem := mem with [RDI, el]:u32 <- low:32[RSI]
.address 0x4135C0
0002463d: #5116 := mem[RSP, el]:u64
.address 0x4135C0
00024640: RSP := RSP + 8
.address 0x4135C0
00024644: call #5116 with noreturn


.address 0x4135D0
000444b2: sub sub_4135d0()
.address 0x4135D0
0002464c: 
.address 0x4135D0
00024651: RAX := 0x621520
.address 0x4135D7
0002465e: #5117 := RDI
.address 0x4135D7
00024661: OF := 0
.address 0x4135D7
00024664: CF := 0
.address 0x4135D7
00024667: AF := unknown[bits]:u1
.address 0x4135D7
0002466a: PF := ~low:1[let $1 = #5117 >> 4 ^ #5117 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4135D7
0002466d: SF := high:1[#5117]
.address 0x4135D7
00024670: ZF := 0 = #5117
.address 0x4135DA
00024677: RCX := pad:64[low:32[RSI]]
.address 0x4135DC
0002467e: RDI := if ZF then RAX else RDI
.address 0x4135E0
00024685: RAX := pad:64[low:32[RSI]]
.address 0x4135E2
00024692: RCX := pad:64[low:32[RCX] & 0x1F]
.address 0x4135E2
00024695: OF := 0
.address 0x4135E2
00024698: CF := 0
.address 0x4135E2
0002469b: AF := unknown[bits]:u1
.address 0x4135E2
0002469e: PF := ~low:1[let $1 = low:32[RCX] >> 4 ^ low:32[RCX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4135E2
000246a1: SF := high:1[low:32[RCX]]
.address 0x4135E2
000246a4: ZF := 0 = low:32[RCX]
.address 0x4135E5
000246b2: #5120 := low:8[RAX]
.address 0x4135E5
000246b5: RAX := extract:63:8[RAX].low:8[RAX] >> 5
.address 0x4135E5
000246b8: CF := high:1[#5120 << 3]
.address 0x4135E5
000246bb: SF := high:1[low:8[RAX]]
.address 0x4135E5
000246be: ZF := 0 = low:8[RAX]
.address 0x4135E5
000246c1: PF := ~low:1[let $1 = low:8[RAX] >> 4 ^ low:8[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4135E5
000246c4: AF := unknown[bits]:u1
.address 0x4135E5
000246c7: OF := unknown[bits]:u1
.address 0x4135E8
000246ce: RAX := pad:64[pad:32[low:8[RAX]]]
.address 0x4135EB
000246d5: RDI := low:64[RDI + (RAX << 2) + 8]
.address 0x4135F0
000246dc: RSI := pad:64[mem[RDI, el]:u32]
.address 0x4135F2
000246e3: RAX := pad:64[low:32[RSI]]
.address 0x4135F4
000246f6: #5122 := low:32[RAX]
.address 0x4135F4
00024725: goto %000246f8

0002470e: 
.address 0x4135F4
0002470f: OF := unknown[bits]:u1
.address 0x4135F4
00024716: goto %00024712

0002470a: 
.address 0x4135F4
0002470b: OF := high:1[#5122]
.address 0x4135F4
00024715: goto %00024712

00024711: 
.address 0x4135F4
00024713: when (low:32[RCX] & 0x1F) = 1 goto %0002470a
.address 0x4135F4
00024714: goto %0002470e

00024707: 
.address 0x4135F4
00024708: AF := unknown[bits]:u1
.address 0x4135F4
00024718: goto %00024711

00024704: 
.address 0x4135F4
00024705: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4135F4
00024719: goto %00024707

00024701: 
.address 0x4135F4
00024702: ZF := 0 = low:32[RAX]
.address 0x4135F4
0002471a: goto %00024704

000246fe: 
.address 0x4135F4
000246ff: SF := high:1[low:32[RAX]]
.address 0x4135F4
0002471b: goto %00024701

000246fb: 
.address 0x4135F4
000246fc: CF := high:1[#5122 << 0x20 - (low:32[RCX] & 0x1F)]
.address 0x4135F4
0002471c: goto %000246fe

00024712: 
.address 0x4135F4
00024722: goto %0002471f

0002471e: 
.address 0x4135F4
00024720: when (low:32[RCX] & 0x1F) <> 0 goto %000246fb
.address 0x4135F4
00024721: goto %0002471f

000246f8: 
.address 0x4135F4
000246f9: RAX := pad:64[low:32[RAX] >> (low:32[RCX] & 0x1F)]
.address 0x4135F4
00024724: goto %0002471e

0002471f: 
.address 0x4135F6
00024731: RDX := pad:64[low:32[RDX] ^ low:32[RAX]]
.address 0x4135F6
00024734: OF := 0
.address 0x4135F6
00024737: CF := 0
.address 0x4135F6
0002473a: AF := unknown[bits]:u1
.address 0x4135F6
0002473d: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4135F6
00024740: SF := high:1[low:32[RDX]]
.address 0x4135F6
00024743: ZF := 0 = low:32[RDX]
.address 0x4135F8
00024750: RAX := pad:64[low:32[RAX] & 1]
.address 0x4135F8
00024753: OF := 0
.address 0x4135F8
00024756: CF := 0
.address 0x4135F8
00024759: AF := unknown[bits]:u1
.address 0x4135F8
0002475c: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4135F8
0002475f: SF := high:1[low:32[RAX]]
.address 0x4135F8
00024762: ZF := 0 = low:32[RAX]
.address 0x4135FB
0002476f: RDX := pad:64[low:32[RDX] & 1]
.address 0x4135FB
00024772: OF := 0
.address 0x4135FB
00024775: CF := 0
.address 0x4135FB
00024778: AF := unknown[bits]:u1
.address 0x4135FB
0002477b: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4135FB
0002477e: SF := high:1[low:32[RDX]]
.address 0x4135FB
00024781: ZF := 0 = low:32[RDX]
.address 0x4135FE
00024794: #5127 := low:32[RDX]
.address 0x4135FE
000247c3: goto %00024796

000247ac: 
.address 0x4135FE
000247ad: OF := unknown[bits]:u1
.address 0x4135FE
000247b4: goto %000247b0

000247a8: 
.address 0x4135FE
000247a9: OF := (high:1[low:32[RDX]] | CF) & ~(high:1[low:32[RDX]] & CF)
.address 0x4135FE
000247b3: goto %000247b0

000247af: 
.address 0x4135FE
000247b1: when (low:32[RCX] & 0x1F) = 1 goto %000247a8
.address 0x4135FE
000247b2: goto %000247ac

000247a5: 
.address 0x4135FE
000247a6: AF := unknown[bits]:u1
.address 0x4135FE
000247b6: goto %000247af

000247a2: 
.address 0x4135FE
000247a3: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4135FE
000247b7: goto %000247a5

0002479f: 
.address 0x4135FE
000247a0: ZF := 0 = low:32[RDX]
.address 0x4135FE
000247b8: goto %000247a2

0002479c: 
.address 0x4135FE
0002479d: SF := high:1[low:32[RDX]]
.address 0x4135FE
000247b9: goto %0002479f

00024799: 
.address 0x4135FE
0002479a: CF := low:1[#5127 >> 0x20 - (low:32[RCX] & 0x1F)]
.address 0x4135FE
000247ba: goto %0002479c

000247b0: 
.address 0x4135FE
000247c0: goto %000247bd

000247bc: 
.address 0x4135FE
000247be: when (low:32[RCX] & 0x1F) <> 0 goto %00024799
.address 0x4135FE
000247bf: goto %000247bd

00024796: 
.address 0x4135FE
00024797: RDX := pad:64[low:32[RDX] << (low:32[RCX] & 0x1F)]
.address 0x4135FE
000247c2: goto %000247bc

000247bd: 
.address 0x413600
000247cf: RDX := pad:64[low:32[RDX] ^ low:32[RSI]]
.address 0x413600
000247d2: OF := 0
.address 0x413600
000247d5: CF := 0
.address 0x413600
000247d8: AF := unknown[bits]:u1
.address 0x413600
000247db: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413600
000247de: SF := high:1[low:32[RDX]]
.address 0x413600
000247e1: ZF := 0 = low:32[RDX]
.address 0x413602
000247e8: mem := mem with [RDI, el]:u32 <- low:32[RDX]
.address 0x413604
000247f1: #5130 := mem[RSP, el]:u64
.address 0x413604
000247f4: RSP := RSP + 8
.address 0x413604
000247f8: call #5130 with noreturn


.address 0x413660
000444b3: sub sub_413660()
.address 0x413660
000248e3: 
.address 0x413660
000248ea: #5141 := R15
.address 0x413660
000248ed: RSP := RSP - 8
.address 0x413660
000248f0: mem := mem with [RSP, el]:u64 <- #5141
.address 0x413662
000248f9: #5142 := R14
.address 0x413662
000248fc: RSP := RSP - 8
.address 0x413662
000248ff: mem := mem with [RSP, el]:u64 <- #5142
.address 0x413664
00024906: RAX := 0x621520
.address 0x41366B
0002490f: #5143 := R13
.address 0x41366B
00024912: RSP := RSP - 8
.address 0x41366B
00024915: mem := mem with [RSP, el]:u64 <- #5143
.address 0x41366D
0002491e: #5144 := R12
.address 0x41366D
00024921: RSP := RSP - 8
.address 0x41366D
00024924: mem := mem with [RSP, el]:u64 <- #5144
.address 0x41366F
0002492b: R13 := RDI
.address 0x413672
00024934: #5145 := RBP
.address 0x413672
00024937: RSP := RSP - 8
.address 0x413672
0002493a: mem := mem with [RSP, el]:u64 <- #5145
.address 0x413673
00024943: #5146 := RBX
.address 0x413673
00024946: RSP := RSP - 8
.address 0x413673
00024949: mem := mem with [RSP, el]:u64 <- #5146
.address 0x413674
00024950: RBX := R8
.address 0x413677
00024957: R14 := RSI
.address 0x41367A
0002495e: R15 := RDX
.address 0x41367D
0002496c: #5147 := RSP
.address 0x41367D
0002496f: RSP := RSP - 0x18
.address 0x41367D
00024972: CF := #5147 < 0x18
.address 0x41367D
00024975: OF := high:1[(#5147 ^ 0x18) & (#5147 ^ RSP)]
.address 0x41367D
00024978: AF := 0x10 = (0x10 & (RSP ^ #5147 ^ 0x18))
.address 0x41367D
0002497b: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41367D
0002497e: SF := high:1[RSP]
.address 0x41367D
00024981: ZF := 0 = RSP
.address 0x413681
0002498e: #5150 := R8
.address 0x413681
00024991: OF := 0
.address 0x413681
00024994: CF := 0
.address 0x413681
00024997: AF := unknown[bits]:u1
.address 0x413681
0002499a: PF := ~low:1[let $1 = #5150 >> 4 ^ #5150 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413681
0002499d: SF := high:1[#5150]
.address 0x413681
000249a0: ZF := 0 = #5150
.address 0x413684
000249a7: RBX := if ZF then RAX else RBX
.address 0x413688
000249ae: mem := mem with [RSP + 8, el]:u64 <- RCX
.address 0x41368D
000249b7: RSP := RSP - 8
.address 0x41368D
000249ba: mem := mem with [RSP, el]:u64 <- 0x413692
.address 0x41368D
000249bd: call @sub_4037f0 with return %000249bf

.address 0x413692
000249bf: 
.address 0x413692
000249c4: R12 := pad:64[mem[RAX, el]:u32]
.address 0x413695
000249cb: RBP := RAX
.address 0x413698
000249d2: RAX := low:64[RBX + 8]
.address 0x41369C
000249e0: #5152 := RSP
.address 0x41369C
000249e3: RSP := RSP - 8
.address 0x41369C
000249e6: CF := #5152 < 8
.address 0x41369C
000249e9: OF := high:1[(#5152 ^ 8) & (#5152 ^ RSP)]
.address 0x41369C
000249ec: AF := 0x10 = (0x10 & (RSP ^ #5152 ^ 8))
.address 0x41369C
000249ef: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41369C
000249f2: SF := high:1[RSP]
.address 0x41369C
000249f5: ZF := 0 = RSP
.address 0x4136A0
000249fc: R9 := pad:64[mem[RBX + 4, el]:u32]
.address 0x4136A4
00024a05: #5155 := mem[RBX + 0x30, el]:u64
.address 0x4136A4
00024a08: RSP := RSP - 8
.address 0x4136A4
00024a0b: mem := mem with [RSP, el]:u64 <- #5155
.address 0x4136A7
00024a12: R8 := pad:64[mem[RBX, el]:u32]
.address 0x4136AA
00024a1b: #5156 := mem[RBX + 0x28, el]:u64
.address 0x4136AA
00024a1e: RSP := RSP - 8
.address 0x4136AA
00024a21: mem := mem with [RSP, el]:u64 <- #5156
.address 0x4136AD
00024a28: RDX := R15
.address 0x4136B0
00024a31: #5157 := RAX
.address 0x4136B0
00024a34: RSP := RSP - 8
.address 0x4136B0
00024a37: mem := mem with [RSP, el]:u64 <- #5157
.address 0x4136B1
00024a3e: RCX := mem[RSP + 0x28, el]:u64
.address 0x4136B6
00024a45: RSI := R14
.address 0x4136B9
00024a4c: RDI := R13
.address 0x4136BC
00024a55: RSP := RSP - 8
.address 0x4136BC
00024a58: mem := mem with [RSP, el]:u64 <- 0x4136C1
.address 0x4136BC
00024a5b: call @sub_412160 with return %00024a5d

.address 0x4136C1
00024a5d: 
.address 0x4136C1
00024a62: mem := mem with [RBP, el]:u32 <- low:32[R12]
.address 0x4136C5
00024a70: #5158 := RSP
.address 0x4136C5
00024a73: RSP := RSP + 0x38
.address 0x4136C5
00024a76: CF := RSP < #5158
.address 0x4136C5
00024a79: OF := ~high:1[#5158] & (high:1[#5158] | high:1[RSP]) & ~(high:1[#5158] & high:1[RSP])
.address 0x4136C5
00024a7c: AF := 0x10 = (0x10 & (RSP ^ #5158 ^ 0x38))
.address 0x4136C5
00024a7f: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4136C5
00024a82: SF := high:1[RSP]
.address 0x4136C5
00024a85: ZF := 0 = RSP
.address 0x4136C9
00024a8d: RBX := mem[RSP, el]:u64
.address 0x4136C9
00024a90: RSP := RSP + 8
.address 0x4136CA
00024a98: RBP := mem[RSP, el]:u64
.address 0x4136CA
00024a9b: RSP := RSP + 8
.address 0x4136CB
00024aa3: R12 := mem[RSP, el]:u64
.address 0x4136CB
00024aa6: RSP := RSP + 8
.address 0x4136CD
00024aae: R13 := mem[RSP, el]:u64
.address 0x4136CD
00024ab1: RSP := RSP + 8
.address 0x4136CF
00024ab9: R14 := mem[RSP, el]:u64
.address 0x4136CF
00024abc: RSP := RSP + 8
.address 0x4136D1
00024ac4: R15 := mem[RSP, el]:u64
.address 0x4136D1
00024ac7: RSP := RSP + 8
.address 0x4136D3
00024ad0: #5161 := mem[RSP, el]:u64
.address 0x4136D3
00024ad3: RSP := RSP + 8
.address 0x4136D3
00024ad7: call #5161 with noreturn


.address 0x4138F0
000444b4: sub sub_4138f0()
.address 0x4138F0
0000e901: 
.address 0x4138F0
0000e918: #2068 := RSP
.address 0x4138F0
0000e91b: RSP := RSP - 0x48
.address 0x4138F0
0000e91e: CF := #2068 < 0x48
.address 0x4138F0
0000e921: OF := high:1[(#2068 ^ 0x48) & (#2068 ^ RSP)]
.address 0x4138F0
0000e924: AF := 0x10 = (0x10 & (RSP ^ #2068 ^ 0x48))
.address 0x4138F0
0000e927: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4138F0
0000e92a: SF := high:1[RSP]
.address 0x4138F0
0000e92d: ZF := 0 = RSP
.address 0x4138F4
0000e934: RAX := RDX
.address 0x4138F7
0000e93b: RDX := mem[FS_BASE + 0x28, el]:u64
.address 0x413900
0000e942: mem := mem with [RSP + 0x38, el]:u64 <- RDX
.address 0x413905
0000e94f: RDX := 0
.address 0x413905
0000e952: AF := unknown[bits]:u1
.address 0x413905
0000e955: ZF := 1
.address 0x413905
0000e958: PF := 1
.address 0x413905
0000e95b: OF := 0
.address 0x413905
0000e95e: CF := 0
.address 0x413905
0000e961: SF := 0
.address 0x413907
0000e96e: #2071 := low:32[RSI] - 0xA
.address 0x413907
0000e971: CF := low:32[RSI] < 0xA
.address 0x413907
0000e974: OF := high:1[(low:32[RSI] ^ 0xA) & (low:32[RSI] ^ #2071)]
.address 0x413907
0000e977: AF := 0x10 = (0x10 & (#2071 ^ low:32[RSI] ^ 0xA))
.address 0x413907
0000e97a: PF := ~low:1[let $1 = #2071 >> 4 ^ #2071 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413907
0000e97d: SF := high:1[#2071]
.address 0x413907
0000e980: ZF := 0 = #2071
.address 0x41390A
0000e98a: when ZF goto %0000e984
00044ceb: goto %0000f2a5

.address 0x413974
0000e984: 
.address 0x413974
0000e996: RSP := RSP - 8
.address 0x413974
0000e999: mem := mem with [RSP, el]:u64 <- 0x413979
.address 0x413974
0000e99c: call @sub_4037e0 with return %0000e99e

.address 0x41390C
0000f2a5: 
.address 0x41390C
0000f2aa: mem := mem with [RSP, el]:u32 <- low:32[RSI]
.address 0x41390F
0000f2b1: RCX := RSP
.address 0x413912
0000f2b8: RDX := 0xFFFFFFFFFFFFFFFF
.address 0x413919
0000f2bf: RSI := RAX
.address 0x41391C
0000f2c6: mem := mem with [RSP + 4, el]:u64 <- 0
.address 0x413925
0000f2cd: mem := mem with [RSP + 0xC, el]:u64 <- 0
.address 0x41392E
0000f2d4: mem := mem with [RSP + 0x14, el]:u64 <- 0
.address 0x413937
0000f2db: mem := mem with [RSP + 0x1C, el]:u64 <- 0
.address 0x413940
0000f2e2: mem := mem with [RSP + 0x24, el]:u64 <- 0
.address 0x413949
0000f2e9: mem := mem with [RSP + 0x2C, el]:u64 <- 0
.address 0x413952
0000f2f0: mem := mem with [RSP + 0x34, el]:u32 <- 0
.address 0x41395A
0000f2f9: RSP := RSP - 8
.address 0x41395A
0000f2fc: mem := mem with [RSP, el]:u64 <- 0x41395F
.address 0x41395A
0000f2ff: call @sub_4133a0 with return %0000f301

.address 0x41395F
0000f301: 
.address 0x41395F
0000f306: RCX := mem[RSP + 0x38, el]:u64
.address 0x413964
0000f313: RCX := RCX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x413964
0000f316: OF := 0
.address 0x413964
0000f319: CF := 0
.address 0x413964
0000f31c: AF := unknown[bits]:u1
.address 0x413964
0000f31f: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x413964
0000f322: SF := high:1[RCX]
.address 0x413964
0000f325: ZF := 0 = RCX
.address 0x41396D
0000f32e: when ~ZF goto %0000e99e
00044cec: goto %0000f334

.address 0x413979
0000e99e: 
.address 0x413979
0000e9a5: RSP := RSP - 8
.address 0x413979
0000e9a8: mem := mem with [RSP, el]:u64 <- 0x41397E
.address 0x413979
0000e9ab: call @sub_403970 with return %0000e9ad

.address 0x41397E
0000e9ad: 
00044ced: call @sub_413980 with noreturn

.address 0x41396F
0000f334: 
.address 0x41396F
0000f340: #2123 := RSP
.address 0x41396F
0000f343: RSP := RSP + 0x48
.address 0x41396F
0000f346: CF := RSP < #2123
.address 0x41396F
0000f349: OF := ~high:1[#2123] & (high:1[#2123] | high:1[RSP]) & ~(high:1[#2123] & high:1[RSP])
.address 0x41396F
0000f34c: AF := 0x10 = (0x10 & (RSP ^ #2123 ^ 0x48))
.address 0x41396F
0000f34f: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41396F
0000f352: SF := high:1[RSP]
.address 0x41396F
0000f355: ZF := 0 = RSP
.address 0x413973
0000f35e: #2126 := mem[RSP, el]:u64
.address 0x413973
0000f361: RSP := RSP + 8
.address 0x413973
0000f365: call #2126 with noreturn


.address 0x413980
000444b8: sub sub_413980()
.address 0x413980
0000e9b0: 
.address 0x413980
0000e9bc: #2073 := RSP
.address 0x413980
0000e9bf: RSP := RSP - 0x48
.address 0x413980
0000e9c2: CF := #2073 < 0x48
.address 0x413980
0000e9c5: OF := high:1[(#2073 ^ 0x48) & (#2073 ^ RSP)]
.address 0x413980
0000e9c8: AF := 0x10 = (0x10 & (RSP ^ #2073 ^ 0x48))
.address 0x413980
0000e9cb: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x413980
0000e9ce: SF := high:1[RSP]
.address 0x413980
0000e9d1: ZF := 0 = RSP
.address 0x413984
0000e9d8: RAX := RDX
.address 0x413987
0000e9df: RDX := RCX
.address 0x41398A
0000e9e6: RCX := mem[FS_BASE + 0x28, el]:u64
.address 0x413993
0000e9ed: mem := mem with [RSP + 0x38, el]:u64 <- RCX
.address 0x413998
0000e9fa: RCX := 0
.address 0x413998
0000e9fd: AF := unknown[bits]:u1
.address 0x413998
0000ea00: ZF := 1
.address 0x413998
0000ea03: PF := 1
.address 0x413998
0000ea06: OF := 0
.address 0x413998
0000ea09: CF := 0
.address 0x413998
0000ea0c: SF := 0
.address 0x41399A
0000ea19: #2076 := low:32[RSI] - 0xA
.address 0x41399A
0000ea1c: CF := low:32[RSI] < 0xA
.address 0x41399A
0000ea1f: OF := high:1[(low:32[RSI] ^ 0xA) & (low:32[RSI] ^ #2076)]
.address 0x41399A
0000ea22: AF := 0x10 = (0x10 & (#2076 ^ low:32[RSI] ^ 0xA))
.address 0x41399A
0000ea25: PF := ~low:1[let $1 = #2076 >> 4 ^ #2076 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41399A
0000ea28: SF := high:1[#2076]
.address 0x41399A
0000ea2b: ZF := 0 = #2076
.address 0x41399D
0000ea35: when ZF goto %0000ea2f
00044cee: goto %0000f1ea

.address 0x413A00
0000ea2f: 
.address 0x413A00
0000ea41: RSP := RSP - 8
.address 0x413A00
0000ea44: mem := mem with [RSP, el]:u64 <- 0x413A05
.address 0x413A00
0000ea47: call @sub_4037e0 with return %0000ea49

.address 0x41399F
0000f1ea: 
.address 0x41399F
0000f1ef: mem := mem with [RSP, el]:u32 <- low:32[RSI]
.address 0x4139A2
0000f1f6: RCX := RSP
.address 0x4139A5
0000f1fd: RSI := RAX
.address 0x4139A8
0000f204: mem := mem with [RSP + 4, el]:u64 <- 0
.address 0x4139B1
0000f20b: mem := mem with [RSP + 0xC, el]:u64 <- 0
.address 0x4139BA
0000f212: mem := mem with [RSP + 0x14, el]:u64 <- 0
.address 0x4139C3
0000f219: mem := mem with [RSP + 0x1C, el]:u64 <- 0
.address 0x4139CC
0000f220: mem := mem with [RSP + 0x24, el]:u64 <- 0
.address 0x4139D5
0000f227: mem := mem with [RSP + 0x2C, el]:u64 <- 0
.address 0x4139DE
0000f22e: mem := mem with [RSP + 0x34, el]:u32 <- 0
.address 0x4139E6
0000f237: RSP := RSP - 8
.address 0x4139E6
0000f23a: mem := mem with [RSP, el]:u64 <- 0x4139EB
.address 0x4139E6
0000f23d: call @sub_4133a0 with return %0000f23f

.address 0x4139EB
0000f23f: 
.address 0x4139EB
0000f244: RDX := mem[RSP + 0x38, el]:u64
.address 0x4139F0
0000f251: RDX := RDX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x4139F0
0000f254: OF := 0
.address 0x4139F0
0000f257: CF := 0
.address 0x4139F0
0000f25a: AF := unknown[bits]:u1
.address 0x4139F0
0000f25d: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4139F0
0000f260: SF := high:1[RDX]
.address 0x4139F0
0000f263: ZF := 0 = RDX
.address 0x4139F9
0000f26c: when ~ZF goto %0000ea49
00044cef: goto %0000f272

.address 0x413A05
0000ea49: 
.address 0x413A05
0000ea50: RSP := RSP - 8
.address 0x413A05
0000ea53: mem := mem with [RSP, el]:u64 <- 0x413A0A
.address 0x413A05
0000ea56: call @sub_403970 with return %0000ea58

.address 0x413A0A
0000ea58: 
00044cf0: call @sub_413a10 with noreturn

.address 0x4139FB
0000f272: 
.address 0x4139FB
0000f27e: #2118 := RSP
.address 0x4139FB
0000f281: RSP := RSP + 0x48
.address 0x4139FB
0000f284: CF := RSP < #2118
.address 0x4139FB
0000f287: OF := ~high:1[#2118] & (high:1[#2118] | high:1[RSP]) & ~(high:1[#2118] & high:1[RSP])
.address 0x4139FB
0000f28a: AF := 0x10 = (0x10 & (RSP ^ #2118 ^ 0x48))
.address 0x4139FB
0000f28d: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4139FB
0000f290: SF := high:1[RSP]
.address 0x4139FB
0000f293: ZF := 0 = RSP
.address 0x4139FF
0000f29c: #2121 := mem[RSP, el]:u64
.address 0x4139FF
0000f29f: RSP := RSP + 8
.address 0x4139FF
0000f2a3: call #2121 with noreturn


.address 0x413A10
000444bc: sub sub_413a10()
.address 0x413A10
0000ea5b: 
.address 0x413A10
0000ea60: RDX := RSI
.address 0x413A13
0000ea67: RSI := pad:64[low:32[RDI]]
.address 0x413A15
0000ea74: RDI := 0
.address 0x413A15
0000ea77: AF := unknown[bits]:u1
.address 0x413A15
0000ea7a: ZF := 1
.address 0x413A15
0000ea7d: PF := 1
.address 0x413A15
0000ea80: OF := 0
.address 0x413A15
0000ea83: CF := 0
.address 0x413A15
0000ea86: SF := 0
.address 0x413A17
0000ea8d: call @sub_4138f0 with noreturn


.address 0x413A20
000444bd: sub sub_413a20()
.address 0x413A20
0000ea92: 
.address 0x413A20
0000ea97: RCX := RDX
.address 0x413A23
0000ea9e: RDX := RSI
.address 0x413A26
0000eaa5: RSI := pad:64[low:32[RDI]]
.address 0x413A28
0000eab2: RDI := 0
.address 0x413A28
0000eab5: AF := unknown[bits]:u1
.address 0x413A28
0000eab8: ZF := 1
.address 0x413A28
0000eabb: PF := 1
.address 0x413A28
0000eabe: OF := 0
.address 0x413A28
0000eac1: CF := 0
.address 0x413A28
0000eac4: SF := 0
.address 0x413A2A
0000eacb: call @sub_413980 with noreturn


.address 0x413A30
000444be: sub sub_413a30()
.address 0x413A30
0000ead0: 
.address 0x413A30
0000eadc: #2078 := RSP
.address 0x413A30
0000eadf: RSP := RSP - 0x48
.address 0x413A30
0000eae2: CF := #2078 < 0x48
.address 0x413A30
0000eae5: OF := high:1[(#2078 ^ 0x48) & (#2078 ^ RSP)]
.address 0x413A30
0000eae8: AF := 0x10 = (0x10 & (RSP ^ #2078 ^ 0x48))
.address 0x413A30
0000eaeb: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x413A30
0000eaee: SF := high:1[RSP]
.address 0x413A30
0000eaf1: ZF := 0 = RSP
.address 0x413A34
0000eaf8: RCX := pad:64[low:32[RDX]]
.address 0x413A36
0000eaff: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x413A3F
0000eb06: mem := mem with [RSP + 0x38, el]:u64 <- RAX
.address 0x413A44
0000eb13: RAX := 0
.address 0x413A44
0000eb16: AF := unknown[bits]:u1
.address 0x413A44
0000eb19: ZF := 1
.address 0x413A44
0000eb1c: PF := 1
.address 0x413A44
0000eb1f: OF := 0
.address 0x413A44
0000eb22: CF := 0
.address 0x413A44
0000eb25: SF := 0
.address 0x413A46
0000eb2c: RAX := mem[0x621550, el]:u64
.address 0x413A4D
0000eb33: R8 := RSP
.address 0x413A50
0000eb40: RCX := pad:64[low:32[RCX] & 0x1F]
.address 0x413A50
0000eb43: OF := 0
.address 0x413A50
0000eb46: CF := 0
.address 0x413A50
0000eb49: AF := unknown[bits]:u1
.address 0x413A50
0000eb4c: PF := ~low:1[let $1 = low:32[RCX] >> 4 ^ low:32[RCX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413A50
0000eb4f: SF := high:1[low:32[RCX]]
.address 0x413A50
0000eb52: ZF := 0 = low:32[RCX]
.address 0x413A53
0000eb59: YMM0 := extract:255:128[YMM0].pad:128[mem[0x621520, el]:u128]
.address 0x413A5B
0000eb60: mem := mem with [RSP + 0x30, el]:u64 <- RAX
.address 0x413A60
0000eb67: RAX := pad:64[low:32[RDX]]
.address 0x413A62
0000eb72: mem := mem with [RSP, el]:u128 <- low:128[YMM0]
.address 0x413A62
0000eb7e: goto %0000eb78

0000eb75: 
.address 0x413A62
0000eb76: call %0000eb6c with noreturn

0000eb78: 
.address 0x413A62
0000eb7a: when (RSP & 0xF) = 0 goto %0000eb79
.address 0x413A62
0000eb7b: goto %0000eb75

0000eb79: 
00044cf1: goto %0000eb7f

.address 0x413A66
0000eb7f: 
.address 0x413A66
0000eb8b: #2082 := low:8[RAX]
.address 0x413A66
0000eb8e: RAX := extract:63:8[RAX].low:8[RAX] >> 5
.address 0x413A66
0000eb91: CF := high:1[#2082 << 3]
.address 0x413A66
0000eb94: SF := high:1[low:8[RAX]]
.address 0x413A66
0000eb97: ZF := 0 = low:8[RAX]
.address 0x413A66
0000eb9a: PF := ~low:1[let $1 = low:8[RAX] >> 4 ^ low:8[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413A66
0000eb9d: AF := unknown[bits]:u1
.address 0x413A66
0000eba0: OF := unknown[bits]:u1
.address 0x413A69
0000eba7: RAX := pad:64[pad:32[low:8[RAX]]]
.address 0x413A6C
0000ebae: R9 := low:64[R8 + (RAX << 2) + 8]
.address 0x413A71
0000ebb5: YMM0 := extract:255:128[YMM0].pad:128[mem[0x621530, el]:u128]
.address 0x413A79
0000ebbf: mem := mem with [RSP + 0x10, el]:u128 <- low:128[YMM0]
.address 0x413A79
0000ebcb: goto %0000ebc5

0000ebc2: 
.address 0x413A79
0000ebc3: call %0000eb6c with noreturn

0000ebc5: 
.address 0x413A79
0000ebc7: when (RSP + 0x10 & 0xF) = 0 goto %0000ebc6
.address 0x413A79
0000ebc8: goto %0000ebc2

0000ebc6: 
00044cf2: goto %0000ebcc

.address 0x413A7E
0000ebcc: 
.address 0x413A7E
0000ebd1: YMM0 := extract:255:128[YMM0].pad:128[mem[0x621540, el]:u128]
.address 0x413A86
0000ebdb: mem := mem with [RSP + 0x20, el]:u128 <- low:128[YMM0]
.address 0x413A86
0000ebe7: goto %0000ebe1

0000ebde: 
.address 0x413A86
0000ebdf: call %0000eb6c with noreturn

0000ebe1: 
.address 0x413A86
0000ebe3: when (RSP + 0x20 & 0xF) = 0 goto %0000ebe2
.address 0x413A86
0000ebe4: goto %0000ebde

0000ebe2: 
00044cf3: goto %0000ebe8

.address 0x413A8B
0000ebe8: 
.address 0x413A8B
0000ebed: RDX := pad:64[mem[R9, el]:u32]
.address 0x413A8E
0000ebf4: RAX := pad:64[low:32[RDX]]
.address 0x413A90
0000ec07: #2084 := low:32[RAX]
.address 0x413A90
0000ec36: goto %0000ec09

0000ec1f: 
.address 0x413A90
0000ec20: OF := unknown[bits]:u1
.address 0x413A90
0000ec27: goto %0000ec23

0000ec1b: 
.address 0x413A90
0000ec1c: OF := high:1[#2084]
.address 0x413A90
0000ec26: goto %0000ec23

0000ec22: 
.address 0x413A90
0000ec24: when (low:32[RCX] & 0x1F) = 1 goto %0000ec1b
.address 0x413A90
0000ec25: goto %0000ec1f

0000ec18: 
.address 0x413A90
0000ec19: AF := unknown[bits]:u1
.address 0x413A90
0000ec29: goto %0000ec22

0000ec15: 
.address 0x413A90
0000ec16: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413A90
0000ec2a: goto %0000ec18

0000ec12: 
.address 0x413A90
0000ec13: ZF := 0 = low:32[RAX]
.address 0x413A90
0000ec2b: goto %0000ec15

0000ec0f: 
.address 0x413A90
0000ec10: SF := high:1[low:32[RAX]]
.address 0x413A90
0000ec2c: goto %0000ec12

0000ec0c: 
.address 0x413A90
0000ec0d: CF := high:1[#2084 << 0x20 - (low:32[RCX] & 0x1F)]
.address 0x413A90
0000ec2d: goto %0000ec0f

0000ec23: 
.address 0x413A90
0000ec33: goto %0000ec30

0000ec2f: 
.address 0x413A90
0000ec31: when (low:32[RCX] & 0x1F) <> 0 goto %0000ec0c
.address 0x413A90
0000ec32: goto %0000ec30

0000ec09: 
.address 0x413A90
0000ec0a: RAX := pad:64[low:32[RAX] >> (low:32[RCX] & 0x1F)]
.address 0x413A90
0000ec35: goto %0000ec2f

0000ec30: 
.address 0x413A92
0000ec3c: RAX := pad:64[~low:32[RAX]]
.address 0x413A94
0000ec49: RAX := pad:64[low:32[RAX] & 1]
.address 0x413A94
0000ec4c: OF := 0
.address 0x413A94
0000ec4f: CF := 0
.address 0x413A94
0000ec52: AF := unknown[bits]:u1
.address 0x413A94
0000ec55: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413A94
0000ec58: SF := high:1[low:32[RAX]]
.address 0x413A94
0000ec5b: ZF := 0 = low:32[RAX]
.address 0x413A97
0000ec6e: #2087 := low:32[RAX]
.address 0x413A97
0000ec9d: goto %0000ec70

0000ec86: 
.address 0x413A97
0000ec87: OF := unknown[bits]:u1
.address 0x413A97
0000ec8e: goto %0000ec8a

0000ec82: 
.address 0x413A97
0000ec83: OF := (high:1[low:32[RAX]] | CF) & ~(high:1[low:32[RAX]] & CF)
.address 0x413A97
0000ec8d: goto %0000ec8a

0000ec89: 
.address 0x413A97
0000ec8b: when (low:32[RCX] & 0x1F) = 1 goto %0000ec82
.address 0x413A97
0000ec8c: goto %0000ec86

0000ec7f: 
.address 0x413A97
0000ec80: AF := unknown[bits]:u1
.address 0x413A97
0000ec90: goto %0000ec89

0000ec7c: 
.address 0x413A97
0000ec7d: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413A97
0000ec91: goto %0000ec7f

0000ec79: 
.address 0x413A97
0000ec7a: ZF := 0 = low:32[RAX]
.address 0x413A97
0000ec92: goto %0000ec7c

0000ec76: 
.address 0x413A97
0000ec77: SF := high:1[low:32[RAX]]
.address 0x413A97
0000ec93: goto %0000ec79

0000ec73: 
.address 0x413A97
0000ec74: CF := low:1[#2087 >> 0x20 - (low:32[RCX] & 0x1F)]
.address 0x413A97
0000ec94: goto %0000ec76

0000ec8a: 
.address 0x413A97
0000ec9a: goto %0000ec97

0000ec96: 
.address 0x413A97
0000ec98: when (low:32[RCX] & 0x1F) <> 0 goto %0000ec73
.address 0x413A97
0000ec99: goto %0000ec97

0000ec70: 
.address 0x413A97
0000ec71: RAX := pad:64[low:32[RAX] << (low:32[RCX] & 0x1F)]
.address 0x413A97
0000ec9c: goto %0000ec96

0000ec97: 
.address 0x413A99
0000eca3: RCX := R8
.address 0x413A9C
0000ecb0: RAX := pad:64[low:32[RAX] ^ low:32[RDX]]
.address 0x413A9C
0000ecb3: OF := 0
.address 0x413A9C
0000ecb6: CF := 0
.address 0x413A9C
0000ecb9: AF := unknown[bits]:u1
.address 0x413A9C
0000ecbc: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413A9C
0000ecbf: SF := high:1[low:32[RAX]]
.address 0x413A9C
0000ecc2: ZF := 0 = low:32[RAX]
.address 0x413A9E
0000ecc9: RDX := RSI
.address 0x413AA1
0000ecd0: RSI := RDI
.address 0x413AA4
0000ecd7: mem := mem with [R9, el]:u32 <- low:32[RAX]
.address 0x413AA7
0000ece4: RDI := 0
.address 0x413AA7
0000ece7: AF := unknown[bits]:u1
.address 0x413AA7
0000ecea: ZF := 1
.address 0x413AA7
0000eced: PF := 1
.address 0x413AA7
0000ecf0: OF := 0
.address 0x413AA7
0000ecf3: CF := 0
.address 0x413AA7
0000ecf6: SF := 0
.address 0x413AA9
0000ecff: RSP := RSP - 8
.address 0x413AA9
0000ed02: mem := mem with [RSP, el]:u64 <- 0x413AAE
.address 0x413AA9
0000ed05: call @sub_4133a0 with return %0000ed07

.address 0x413AAE
0000ed07: 
.address 0x413AAE
0000ed0c: RSI := mem[RSP + 0x38, el]:u64
.address 0x413AB3
0000ed19: RSI := RSI ^ mem[FS_BASE + 0x28, el]:u64
.address 0x413AB3
0000ed1c: OF := 0
.address 0x413AB3
0000ed1f: CF := 0
.address 0x413AB3
0000ed22: AF := unknown[bits]:u1
.address 0x413AB3
0000ed25: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x413AB3
0000ed28: SF := high:1[RSI]
.address 0x413AB3
0000ed2b: ZF := 0 = RSI
.address 0x413ABC
0000ed35: when ~ZF goto %0000ed2f
00044cf4: goto %0000f1b7

.address 0x413AC3
0000ed2f: 
.address 0x413AC3
0000ed41: RSP := RSP - 8
.address 0x413AC3
0000ed44: mem := mem with [RSP, el]:u64 <- 0x413AC8
.address 0x413AC3
0000ed47: call @sub_403970 with return %0000ed49

.address 0x413AC8
0000ed49: 
00044cf5: call @sub_413ad0 with noreturn

.address 0x413ABE
0000f1b7: 
.address 0x413ABE
0000f1c3: #2113 := RSP
.address 0x413ABE
0000f1c6: RSP := RSP + 0x48
.address 0x413ABE
0000f1c9: CF := RSP < #2113
.address 0x413ABE
0000f1cc: OF := ~high:1[#2113] & (high:1[#2113] | high:1[RSP]) & ~(high:1[#2113] & high:1[RSP])
.address 0x413ABE
0000f1cf: AF := 0x10 = (0x10 & (RSP ^ #2113 ^ 0x48))
.address 0x413ABE
0000f1d2: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x413ABE
0000f1d5: SF := high:1[RSP]
.address 0x413ABE
0000f1d8: ZF := 0 = RSP
.address 0x413AC2
0000f1e1: #2116 := mem[RSP, el]:u64
.address 0x413AC2
0000f1e4: RSP := RSP + 8
.address 0x413AC2
0000f1e8: call #2116 with noreturn


.address 0x413AD0
000444c4: sub sub_413ad0()
.address 0x413AD0
0000ed4c: 
.address 0x413AD0
0000ed51: RDX := pad:64[extend:32[low:8[RSI]]]
.address 0x413AD4
0000ed58: RSI := 0xFFFFFFFFFFFFFFFF
.address 0x413ADB
0000ed5f: call @sub_413a30 with noreturn


.address 0x413AE0
000444c5: sub sub_413ae0()
.address 0x413AE0
0000ed61: 
.address 0x413AE0
0000ed66: RDX := 0x3A
.address 0x413AE5
0000ed6d: RSI := 0xFFFFFFFFFFFFFFFF
.address 0x413AEC
0000ed74: call @sub_413a30 with noreturn


.address 0x413B10
000444c6: sub sub_413b10()
.address 0x413B10
0000ed8d: 
.address 0x413B10
0000ed99: #2091 := RSP
.address 0x413B10
0000ed9c: RSP := RSP - 0x48
.address 0x413B10
0000ed9f: CF := #2091 < 0x48
.address 0x413B10
0000eda2: OF := high:1[(#2091 ^ 0x48) & (#2091 ^ RSP)]
.address 0x413B10
0000eda5: AF := 0x10 = (0x10 & (RSP ^ #2091 ^ 0x48))
.address 0x413B10
0000eda8: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x413B10
0000edab: SF := high:1[RSP]
.address 0x413B10
0000edae: ZF := 0 = RSP
.address 0x413B14
0000edb5: RAX := RDX
.address 0x413B17
0000edbc: RDX := mem[FS_BASE + 0x28, el]:u64
.address 0x413B20
0000edc3: mem := mem with [RSP + 0x38, el]:u64 <- RDX
.address 0x413B25
0000edd0: RDX := 0
.address 0x413B25
0000edd3: AF := unknown[bits]:u1
.address 0x413B25
0000edd6: ZF := 1
.address 0x413B25
0000edd9: PF := 1
.address 0x413B25
0000eddc: OF := 0
.address 0x413B25
0000eddf: CF := 0
.address 0x413B25
0000ede2: SF := 0
.address 0x413B27
0000edef: #2094 := low:32[RSI] - 0xA
.address 0x413B27
0000edf2: CF := low:32[RSI] < 0xA
.address 0x413B27
0000edf5: OF := high:1[(low:32[RSI] ^ 0xA) & (low:32[RSI] ^ #2094)]
.address 0x413B27
0000edf8: AF := 0x10 = (0x10 & (#2094 ^ low:32[RSI] ^ 0xA))
.address 0x413B27
0000edfb: PF := ~low:1[let $1 = #2094 >> 4 ^ #2094 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413B27
0000edfe: SF := high:1[#2094]
.address 0x413B27
0000ee01: ZF := 0 = #2094
.address 0x413B2A
0000ee0b: when ZF goto %0000ee05
00044cf6: goto %0000f0f5

.address 0x413B94
0000ee05: 
.address 0x413B94
0000ee17: RSP := RSP - 8
.address 0x413B94
0000ee1a: mem := mem with [RSP, el]:u64 <- 0x413B99
.address 0x413B94
0000ee1d: call @sub_4037e0 with return %0000ee1f

.address 0x413B2C
0000f0f5: 
.address 0x413B2C
0000f0fa: mem := mem with [RSP, el]:u32 <- low:32[RSI]
.address 0x413B2F
0000f101: RCX := RSP
.address 0x413B32
0000f108: RDX := 0xFFFFFFFFFFFFFFFF
.address 0x413B39
0000f10f: RSI := RAX
.address 0x413B3C
0000f116: mem := mem with [RSP + 4, el]:u64 <- 0
.address 0x413B45
0000f11d: mem := mem with [RSP + 0xC, el]:u64 <- 0x4000000
.address 0x413B4E
0000f124: mem := mem with [RSP + 0x14, el]:u64 <- 0
.address 0x413B57
0000f12b: mem := mem with [RSP + 0x1C, el]:u64 <- 0
.address 0x413B60
0000f132: mem := mem with [RSP + 0x24, el]:u64 <- 0
.address 0x413B69
0000f139: mem := mem with [RSP + 0x2C, el]:u64 <- 0
.address 0x413B72
0000f140: mem := mem with [RSP + 0x34, el]:u32 <- 0
.address 0x413B7A
0000f149: RSP := RSP - 8
.address 0x413B7A
0000f14c: mem := mem with [RSP, el]:u64 <- 0x413B7F
.address 0x413B7A
0000f14f: call @sub_4133a0 with return %0000f151

.address 0x413B7F
0000f151: 
.address 0x413B7F
0000f156: RCX := mem[RSP + 0x38, el]:u64
.address 0x413B84
0000f163: RCX := RCX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x413B84
0000f166: OF := 0
.address 0x413B84
0000f169: CF := 0
.address 0x413B84
0000f16c: AF := unknown[bits]:u1
.address 0x413B84
0000f16f: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x413B84
0000f172: SF := high:1[RCX]
.address 0x413B84
0000f175: ZF := 0 = RCX
.address 0x413B8D
0000f17e: when ~ZF goto %0000ee1f
00044cf7: goto %0000f184

.address 0x413B99
0000ee1f: 
.address 0x413B99
0000ee26: RSP := RSP - 8
.address 0x413B99
0000ee29: mem := mem with [RSP, el]:u64 <- 0x413B9E
.address 0x413B99
0000ee2c: call @sub_403970 with return %0000ee2e

.address 0x413B9E
0000ee2e: 
00044cf8: call @sub_413ba0 with noreturn

.address 0x413B8F
0000f184: 
.address 0x413B8F
0000f190: #2109 := RSP
.address 0x413B8F
0000f193: RSP := RSP + 0x48
.address 0x413B8F
0000f196: CF := RSP < #2109
.address 0x413B8F
0000f199: OF := ~high:1[#2109] & (high:1[#2109] | high:1[RSP]) & ~(high:1[#2109] & high:1[RSP])
.address 0x413B8F
0000f19c: AF := 0x10 = (0x10 & (RSP ^ #2109 ^ 0x48))
.address 0x413B8F
0000f19f: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x413B8F
0000f1a2: SF := high:1[RSP]
.address 0x413B8F
0000f1a5: ZF := 0 = RSP
.address 0x413B93
0000f1ae: #2112 := mem[RSP, el]:u64
.address 0x413B93
0000f1b1: RSP := RSP + 8
.address 0x413B93
0000f1b5: call #2112 with noreturn


.address 0x413BA0
000444ca: sub sub_413ba0()
.address 0x413BA0
0000ee31: 
.address 0x413BA0
0000ee3d: #2096 := RSP
.address 0x413BA0
0000ee40: RSP := RSP - 0x48
.address 0x413BA0
0000ee43: CF := #2096 < 0x48
.address 0x413BA0
0000ee46: OF := high:1[(#2096 ^ 0x48) & (#2096 ^ RSP)]
.address 0x413BA0
0000ee49: AF := 0x10 = (0x10 & (RSP ^ #2096 ^ 0x48))
.address 0x413BA0
0000ee4c: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x413BA0
0000ee4f: SF := high:1[RSP]
.address 0x413BA0
0000ee52: ZF := 0 = RSP
.address 0x413BA4
0000ee59: R9 := RCX
.address 0x413BA7
0000ee60: RCX := mem[0x621550, el]:u64
.address 0x413BAE
0000ee67: YMM0 := extract:255:128[YMM0].pad:128[mem[0x621520, el]:u128]
.address 0x413BB6
0000ee6e: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x413BBF
0000ee75: mem := mem with [RSP + 0x38, el]:u64 <- RAX
.address 0x413BC4
0000ee82: RAX := 0
.address 0x413BC4
0000ee85: AF := unknown[bits]:u1
.address 0x413BC4
0000ee88: ZF := 1
.address 0x413BC4
0000ee8b: PF := 1
.address 0x413BC4
0000ee8e: OF := 0
.address 0x413BC4
0000ee91: CF := 0
.address 0x413BC4
0000ee94: SF := 0
.address 0x413BC6
0000ee9e: mem := mem with [RSP, el]:u128 <- low:128[YMM0]
.address 0x413BC6
0000eeaa: goto %0000eea4

0000eea1: 
.address 0x413BC6
0000eea2: call %0000eb6c with noreturn

0000eea4: 
.address 0x413BC6
0000eea6: when (RSP & 0xF) = 0 goto %0000eea5
.address 0x413BC6
0000eea7: goto %0000eea1

0000eea5: 
00044cf9: goto %0000eeab

.address 0x413BCA
0000eeab: 
.address 0x413BCA
0000eeb6: #2099 := RSI
.address 0x413BCA
0000eeb9: OF := 0
.address 0x413BCA
0000eebc: CF := 0
.address 0x413BCA
0000eebf: AF := unknown[bits]:u1
.address 0x413BCA
0000eec2: PF := ~low:1[let $1 = #2099 >> 4 ^ #2099 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413BCA
0000eec5: SF := high:1[#2099]
.address 0x413BCA
0000eec8: ZF := 0 = #2099
.address 0x413BCD
0000eecf: mem := mem with [RSP + 0x30, el]:u64 <- RCX
.address 0x413BD2
0000eed6: mem := mem with [RSP, el]:u32 <- 0xA
.address 0x413BD9
0000eedd: YMM0 := extract:255:128[YMM0].pad:128[mem[0x621530, el]:u128]
.address 0x413BE1
0000eee7: mem := mem with [RSP + 0x10, el]:u128 <- low:128[YMM0]
.address 0x413BE1
0000eef3: goto %0000eeed

0000eeea: 
.address 0x413BE1
0000eeeb: call %0000eb6c with noreturn

0000eeed: 
.address 0x413BE1
0000eeef: when (RSP + 0x10 & 0xF) = 0 goto %0000eeee
.address 0x413BE1
0000eef0: goto %0000eeea

0000eeee: 
00044cfa: goto %0000eef4

.address 0x413BE6
0000eef4: 
.address 0x413BE6
0000eef9: YMM0 := extract:255:128[YMM0].pad:128[mem[0x621540, el]:u128]
.address 0x413BEE
0000ef03: mem := mem with [RSP + 0x20, el]:u128 <- low:128[YMM0]
.address 0x413BEE
0000ef0f: goto %0000ef09

0000ef06: 
.address 0x413BEE
0000ef07: call %0000eb6c with noreturn

0000ef09: 
.address 0x413BEE
0000ef0b: when (RSP + 0x20 & 0xF) = 0 goto %0000ef0a
.address 0x413BEE
0000ef0c: goto %0000ef06

0000ef0a: 
00044cfb: goto %0000ef10

.address 0x413BF3
0000ef10: 
.address 0x413BF3
0000ef18: when ZF goto %0000ef12
00044cfc: goto %0000f031

.address 0x413BF5
0000f031: 
.address 0x413BF5
0000f03c: #2101 := RDX
.address 0x413BF5
0000f03f: OF := 0
.address 0x413BF5
0000f042: CF := 0
.address 0x413BF5
0000f045: AF := unknown[bits]:u1
.address 0x413BF5
0000f048: PF := ~low:1[let $1 = #2101 >> 4 ^ #2101 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413BF5
0000f04b: SF := high:1[#2101]
.address 0x413BF5
0000f04e: ZF := 0 = #2101
.address 0x413BF8
0000f057: when ZF goto %0000ef12
00044cfd: goto %0000f05d

.address 0x413C27
0000ef12: 
.address 0x413C27
0000ef24: RSP := RSP - 8
.address 0x413C27
0000ef27: mem := mem with [RSP, el]:u64 <- 0x413C2C
.address 0x413C27
0000ef2a: call @sub_4037e0 with return %0000ef2c

.address 0x413BFA
0000f05d: 
.address 0x413BFA
0000f062: mem := mem with [RSP + 0x28, el]:u64 <- RSI
.address 0x413BFF
0000f069: mem := mem with [RSP + 0x30, el]:u64 <- RDX
.address 0x413C04
0000f070: RCX := RSP
.address 0x413C07
0000f077: RDX := R8
.address 0x413C0A
0000f07e: RSI := R9
.address 0x413C0D
0000f087: RSP := RSP - 8
.address 0x413C0D
0000f08a: mem := mem with [RSP, el]:u64 <- 0x413C12
.address 0x413C0D
0000f08d: call @sub_4133a0 with return %0000f08f

.address 0x413C12
0000f08f: 
.address 0x413C12
0000f094: RDI := mem[RSP + 0x38, el]:u64
.address 0x413C17
0000f0a1: RDI := RDI ^ mem[FS_BASE + 0x28, el]:u64
.address 0x413C17
0000f0a4: OF := 0
.address 0x413C17
0000f0a7: CF := 0
.address 0x413C17
0000f0aa: AF := unknown[bits]:u1
.address 0x413C17
0000f0ad: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x413C17
0000f0b0: SF := high:1[RDI]
.address 0x413C17
0000f0b3: ZF := 0 = RDI
.address 0x413C20
0000f0bc: when ~ZF goto %0000ef2c
00044cfe: goto %0000f0c2

.address 0x413C2C
0000ef2c: 
.address 0x413C2C
0000ef33: RSP := RSP - 8
.address 0x413C2C
0000ef36: mem := mem with [RSP, el]:u64 <- 0x413C31
.address 0x413C2C
0000ef39: call @sub_403970 with return %0000ef3b

.address 0x413C31
0000ef3b: 
00044cff: call @sub_413c40 with noreturn

.address 0x413C22
0000f0c2: 
.address 0x413C22
0000f0ce: #2104 := RSP
.address 0x413C22
0000f0d1: RSP := RSP + 0x48
.address 0x413C22
0000f0d4: CF := RSP < #2104
.address 0x413C22
0000f0d7: OF := ~high:1[#2104] & (high:1[#2104] | high:1[RSP]) & ~(high:1[#2104] & high:1[RSP])
.address 0x413C22
0000f0da: AF := 0x10 = (0x10 & (RSP ^ #2104 ^ 0x48))
.address 0x413C22
0000f0dd: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x413C22
0000f0e0: SF := high:1[RSP]
.address 0x413C22
0000f0e3: ZF := 0 = RSP
.address 0x413C26
0000f0ec: #2107 := mem[RSP, el]:u64
.address 0x413C26
0000f0ef: RSP := RSP + 8
.address 0x413C26
0000f0f3: call #2107 with noreturn


.address 0x413C40
000444d2: sub sub_413c40()
.address 0x413C40
0000ef41: 
.address 0x413C40
0000ef46: R8 := 0xFFFFFFFFFFFFFFFF
.address 0x413C47
0000ef4d: call @sub_413ba0 with noreturn


.address 0x413C70
000444d3: sub sub_413c70()
.address 0x413C70
0000ef97: 
.address 0x413C70
0000ef9c: R8 := RCX
.address 0x413C73
0000efa3: RCX := RDX
.address 0x413C76
0000efaa: RDX := RSI
.address 0x413C79
0000efb1: RSI := RDI
.address 0x413C7C
0000efbe: RDI := 0
.address 0x413C7C
0000efc1: AF := unknown[bits]:u1
.address 0x413C7C
0000efc4: ZF := 1
.address 0x413C7C
0000efc7: PF := 1
.address 0x413C7C
0000efca: OF := 0
.address 0x413C7C
0000efcd: CF := 0
.address 0x413C7C
0000efd0: SF := 0
.address 0x413C7E
0000efd7: call @sub_413ba0 with noreturn


.address 0x413CC0
000444d4: sub sub_413cc0()
.address 0x413CC0
0000e865: 
.address 0x413CC0
0000e875: RCX := 0x620200
.address 0x413CC7
0000e87c: RDX := 0xFFFFFFFFFFFFFFFF
.address 0x413CCE
0000e883: call @sub_4133a0 with noreturn


.address 0x413CE0
000444d5: sub sub_413ce0()
.address 0x413CE0
0000e88b: 
.address 0x413CE0
0000e890: RCX := 0x620200
.address 0x413CE7
0000e897: RSI := RDI
.address 0x413CEA
0000e89e: RDX := 0xFFFFFFFFFFFFFFFF
.address 0x413CF1
0000e8ab: RDI := 0
.address 0x413CF1
0000e8ae: AF := unknown[bits]:u1
.address 0x413CF1
0000e8b1: ZF := 1
.address 0x413CF1
0000e8b4: PF := 1
.address 0x413CF1
0000e8b7: OF := 0
.address 0x413CF1
0000e8ba: CF := 0
.address 0x413CF1
0000e8bd: SF := 0
.address 0x413CF3
0000e8c4: call @sub_4133a0 with noreturn


.address 0x413D00
000444d6: sub sub_413d00()
.address 0x413D00
000099aa: 
.address 0x413D00
000099bc: #1418 := R15
.address 0x413D00
000099bf: RSP := RSP - 8
.address 0x413D00
000099c2: mem := mem with [RSP, el]:u64 <- #1418
.address 0x413D02
000099cb: #1419 := R14
.address 0x413D02
000099ce: RSP := RSP - 8
.address 0x413D02
000099d1: mem := mem with [RSP, el]:u64 <- #1419
.address 0x413D04
000099da: #1420 := R13
.address 0x413D04
000099dd: RSP := RSP - 8
.address 0x413D04
000099e0: mem := mem with [RSP, el]:u64 <- #1420
.address 0x413D06
000099e9: #1421 := R12
.address 0x413D06
000099ec: RSP := RSP - 8
.address 0x413D06
000099ef: mem := mem with [RSP, el]:u64 <- #1421
.address 0x413D08
000099f6: R12 := RDI
.address 0x413D0B
000099ff: #1422 := RBP
.address 0x413D0B
00009a02: RSP := RSP - 8
.address 0x413D0B
00009a05: mem := mem with [RSP, el]:u64 <- #1422
.address 0x413D0C
00009a0e: #1423 := RBX
.address 0x413D0C
00009a11: RSP := RSP - 8
.address 0x413D0C
00009a14: mem := mem with [RSP, el]:u64 <- #1423
.address 0x413D0D
00009a1b: RBP := RSI
.address 0x413D10
00009a28: RBX := 0
.address 0x413D10
00009a2b: AF := unknown[bits]:u1
.address 0x413D10
00009a2e: ZF := 1
.address 0x413D10
00009a31: PF := 1
.address 0x413D10
00009a34: OF := 0
.address 0x413D10
00009a37: CF := 0
.address 0x413D10
00009a3a: SF := 0
.address 0x413D12
00009a48: #1424 := RSP
.address 0x413D12
00009a4b: RSP := RSP - 0x138
.address 0x413D12
00009a4e: CF := #1424 < 0x138
.address 0x413D12
00009a51: OF := high:1[(#1424 ^ 0x138) & (#1424 ^ RSP)]
.address 0x413D12
00009a54: AF := 0x10 = (0x10 & (RSP ^ #1424 ^ 0x138))
.address 0x413D12
00009a57: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x413D12
00009a5a: SF := high:1[RSP]
.address 0x413D12
00009a5d: ZF := 0 = RSP
.address 0x413D19
00009a64: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x413D22
00009a6b: mem := mem with [RSP + 0x128, el]:u64 <- RAX
.address 0x413D2A
00009a78: RAX := 0
.address 0x413D2A
00009a7b: AF := unknown[bits]:u1
.address 0x413D2A
00009a7e: ZF := 1
.address 0x413D2A
00009a81: PF := 1
.address 0x413D2A
00009a84: OF := 0
.address 0x413D2A
00009a87: CF := 0
.address 0x413D2A
00009a8a: SF := 0
.address 0x413D2C
00009a93: RSP := RSP - 8
.address 0x413D2C
00009a96: mem := mem with [RSP, el]:u64 <- 0x413D31
.address 0x413D2C
00009a99: call @sub_40ce10 with return %00009a9b

.address 0x413D31
00009a9b: 
.address 0x413D31
00009aa0: RDI := RBP
.address 0x413D34
00009aa7: R13 := RAX
.address 0x413D37
00009ab0: RSP := RSP - 8
.address 0x413D37
00009ab3: mem := mem with [RSP, el]:u64 <- 0x413D3C
.address 0x413D37
00009ab6: call @sub_40ce10 with return %00009ab8

.address 0x413D3C
00009ab8: 
.address 0x413D3C
00009abd: RDI := R13
.address 0x413D3F
00009ac4: R14 := RAX
.address 0x413D42
00009acd: RSP := RSP - 8
.address 0x413D42
00009ad0: mem := mem with [RSP, el]:u64 <- 0x413D47
.address 0x413D42
00009ad3: call @sub_40ce70 with return %00009ad5

.address 0x413D47
00009ad5: 
.address 0x413D47
00009ada: RDI := R14
.address 0x413D4A
00009ae1: R15 := RAX
.address 0x413D4D
00009aea: RSP := RSP - 8
.address 0x413D4D
00009aed: mem := mem with [RSP, el]:u64 <- 0x413D52
.address 0x413D4D
00009af0: call @sub_40ce70 with return %00009af2

.address 0x413D52
00009af2: 
.address 0x413D52
00009afd: #1427 := R15 - RAX
.address 0x413D52
00009b00: CF := R15 < RAX
.address 0x413D52
00009b03: OF := high:1[(R15 ^ RAX) & (R15 ^ #1427)]
.address 0x413D52
00009b06: AF := 0x10 = (0x10 & (#1427 ^ R15 ^ RAX))
.address 0x413D52
00009b09: PF := ~low:1[let $1 = #1427 >> 4 ^ #1427 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413D52
00009b0c: SF := high:1[#1427]
.address 0x413D52
00009b0f: ZF := 0 = #1427
.address 0x413D55
00009b19: when ZF goto %00009b13
00044d00: goto %00009b63

.address 0x413D88
00009b13: 
.address 0x413D88
00009b23: RDX := R15
.address 0x413D8B
00009b2a: RSI := R14
.address 0x413D8E
00009b31: RDI := R13
.address 0x413D91
00009b3a: RSP := RSP - 8
.address 0x413D91
00009b3d: mem := mem with [RSP, el]:u64 <- 0x413D96
.address 0x413D91
00009b40: call @sub_403ad0 with return %00009b42

.address 0x413D96
00009b42: 
.address 0x413D96
00009b4d: #1429 := low:32[RAX]
.address 0x413D96
00009b50: OF := 0
.address 0x413D96
00009b53: CF := 0
.address 0x413D96
00009b56: AF := unknown[bits]:u1
.address 0x413D96
00009b59: PF := ~low:1[let $1 = #1429 >> 4 ^ #1429 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413D96
00009b5c: SF := high:1[#1429]
.address 0x413D96
00009b5f: ZF := 0 = #1429
.address 0x413D98
00009b69: when ~ZF goto %00009b63
00044d01: goto %0000bb7f

.address 0x413D9A
0000bb7f: 
.address 0x413D9A
0000bb84: RDI := R12
.address 0x413D9D
0000bb8d: RSP := RSP - 8
.address 0x413D9D
0000bb90: mem := mem with [RSP, el]:u64 <- 0x413DA2
.address 0x413D9D
0000bb93: call @sub_415cf0 with return %0000bb95

.address 0x413DA2
0000bb95: 
.address 0x413DA2
0000bb9a: RDI := RBP
.address 0x413DA5
0000bba1: R12 := RAX
.address 0x413DA8
0000bbaa: RSP := RSP - 8
.address 0x413DA8
0000bbad: mem := mem with [RSP, el]:u64 <- 0x413DAD
.address 0x413DA8
0000bbb0: call @sub_415cf0 with return %0000bbb2

.address 0x413DAD
0000bbb2: 
.address 0x413DAD
0000bbb7: RDX := RSP
.address 0x413DB0
0000bbbe: RSI := R12
.address 0x413DB3
0000bbc5: RDI := 1
.address 0x413DB8
0000bbcc: RBP := RAX
.address 0x413DBB
0000bbd5: RSP := RSP - 8
.address 0x413DBB
0000bbd8: mem := mem with [RSP, el]:u64 <- 0x413DC0
.address 0x413DBB
0000bbdb: call @sub_403be0 with return %0000bbdd

.address 0x413DC0
0000bbdd: 
.address 0x413DC0
0000bbe8: #1663 := low:32[RAX]
.address 0x413DC0
0000bbeb: OF := 0
.address 0x413DC0
0000bbee: CF := 0
.address 0x413DC0
0000bbf1: AF := unknown[bits]:u1
.address 0x413DC0
0000bbf4: PF := ~low:1[let $1 = #1663 >> 4 ^ #1663 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413DC0
0000bbf7: SF := high:1[#1663]
.address 0x413DC0
0000bbfa: ZF := 0 = #1663
.address 0x413DC2
0000bc04: when ~ZF goto %0000bbfe
00044d02: goto %0000bc64

.address 0x413E40
0000bbfe: 
.address 0x413E40
0000bc10: RSP := RSP - 8
.address 0x413E40
0000bc13: mem := mem with [RSP, el]:u64 <- 0x413E45
.address 0x413E40
0000bc16: call @sub_4037f0 with return %0000bc18

.address 0x413E45
0000bc18: 
.address 0x413E45
0000bc1d: RSI := pad:64[mem[RAX, el]:u32]
.address 0x413E47
0000bc24: RDX := 0x41A2FC
.address 0x413E4E
0000bc2b: RCX := R12
.address 0x413E51
0000bc32: RDI := 1
.address 0x413E56
0000bc3f: RAX := 0
.address 0x413E56
0000bc42: AF := unknown[bits]:u1
.address 0x413E56
0000bc45: ZF := 1
.address 0x413E56
0000bc48: PF := 1
.address 0x413E56
0000bc4b: OF := 0
.address 0x413E56
0000bc4e: CF := 0
.address 0x413E56
0000bc51: SF := 0
.address 0x413E58
0000bc5a: RSP := RSP - 8
.address 0x413E58
0000bc5d: mem := mem with [RSP, el]:u64 <- 0x413E5D
.address 0x413E58
0000bc60: call @sub_403d20 with return %0000bc62

.address 0x413E5D
0000bc62: 
.address 0x413E5D
0000bc68: goto %0000bc64

.address 0x413DC4
0000bc64: 
.address 0x413DC4
0000bc6e: RDX := low:64[RSP + 0x90]
.address 0x413DCC
0000bc75: RSI := RBP
.address 0x413DCF
0000bc7c: RDI := 1
.address 0x413DD4
0000bc85: RSP := RSP - 8
.address 0x413DD4
0000bc88: mem := mem with [RSP, el]:u64 <- 0x413DD9
.address 0x413DD4
0000bc8b: call @sub_403be0 with return %0000bc8d

.address 0x413DD9
0000bc8d: 
.address 0x413DD9
0000bc98: #1665 := low:32[RAX]
.address 0x413DD9
0000bc9b: OF := 0
.address 0x413DD9
0000bc9e: CF := 0
.address 0x413DD9
0000bca1: AF := unknown[bits]:u1
.address 0x413DD9
0000bca4: PF := ~low:1[let $1 = #1665 >> 4 ^ #1665 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413DD9
0000bca7: SF := high:1[#1665]
.address 0x413DD9
0000bcaa: ZF := 0 = #1665
.address 0x413DDB
0000bcb4: when ~ZF goto %0000bcae
00044d03: goto %0000bd14

.address 0x413E18
0000bcae: 
.address 0x413E18
0000bcc0: RSP := RSP - 8
.address 0x413E18
0000bcc3: mem := mem with [RSP, el]:u64 <- 0x413E1D
.address 0x413E18
0000bcc6: call @sub_4037f0 with return %0000bcc8

.address 0x413E1D
0000bcc8: 
.address 0x413E1D
0000bccd: RSI := pad:64[mem[RAX, el]:u32]
.address 0x413E1F
0000bcd4: RDX := 0x41A2FC
.address 0x413E26
0000bcdb: RCX := RBP
.address 0x413E29
0000bce2: RDI := 1
.address 0x413E2E
0000bcef: RAX := 0
.address 0x413E2E
0000bcf2: AF := unknown[bits]:u1
.address 0x413E2E
0000bcf5: ZF := 1
.address 0x413E2E
0000bcf8: PF := 1
.address 0x413E2E
0000bcfb: OF := 0
.address 0x413E2E
0000bcfe: CF := 0
.address 0x413E2E
0000bd01: SF := 0
.address 0x413E30
0000bd0a: RSP := RSP - 8
.address 0x413E30
0000bd0d: mem := mem with [RSP, el]:u64 <- 0x413E35
.address 0x413E30
0000bd10: call @sub_403d20 with return %0000bd12

.address 0x413E35
0000bd12: 
.address 0x413E35
0000bd18: goto %0000bd14

.address 0x413DDD
0000bd14: 
.address 0x413DDD
0000bd24: RBX := 0
.address 0x413DDD
0000bd27: AF := unknown[bits]:u1
.address 0x413DDD
0000bd2a: ZF := 1
.address 0x413DDD
0000bd2d: PF := 1
.address 0x413DDD
0000bd30: OF := 0
.address 0x413DDD
0000bd33: CF := 0
.address 0x413DDD
0000bd36: SF := 0
.address 0x413DDF
0000bd3d: RAX := mem[RSP + 0x98, el]:u64
.address 0x413DE7
0000bd4a: #1667 := mem[RSP + 8, el]:u64 - RAX
.address 0x413DE7
0000bd4d: CF := mem[RSP + 8, el]:u64 < RAX
.address 0x413DE7
0000bd50: OF := high:1[(mem[RSP + 8, el]:u64 ^ RAX) & (mem[RSP + 8, el]:u64 ^ #1667)]
.address 0x413DE7
0000bd53: AF := 0x10 = (0x10 & (#1667 ^ mem[RSP + 8, el]:u64 ^ RAX))
.address 0x413DE7
0000bd56: PF := ~low:1[let $1 = #1667 >> 4 ^ #1667 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413DE7
0000bd59: SF := high:1[#1667]
.address 0x413DE7
0000bd5c: ZF := 0 = #1667
.address 0x413DEC
0000bd66: when ~ZF goto %0000bd60
00044d04: goto %0000bda1

.address 0x413DEE
0000bda1: 
.address 0x413DEE
0000bda6: RAX := mem[RSP + 0x90, el]:u64
.address 0x413DF6
0000bdb3: #1669 := mem[RSP, el]:u64 - RAX
.address 0x413DF6
0000bdb6: CF := mem[RSP, el]:u64 < RAX
.address 0x413DF6
0000bdb9: OF := high:1[(mem[RSP, el]:u64 ^ RAX) & (mem[RSP, el]:u64 ^ #1669)]
.address 0x413DF6
0000bdbc: AF := 0x10 = (0x10 & (#1669 ^ mem[RSP, el]:u64 ^ RAX))
.address 0x413DF6
0000bdbf: PF := ~low:1[let $1 = #1669 >> 4 ^ #1669 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413DF6
0000bdc2: SF := high:1[#1669]
.address 0x413DF6
0000bdc5: ZF := 0 = #1669
.address 0x413DFA
0000bdcc: RBX := extract:63:8[RBX].pad:8[ZF]
00044d05: goto %0000bd60

.address 0x413DFD
0000bd60: 
.address 0x413DFD
0000bd70: RDI := R12
.address 0x413E00
0000bd79: RSP := RSP - 8
.address 0x413E00
0000bd7c: mem := mem with [RSP, el]:u64 <- 0x413E05
.address 0x413E00
0000bd7f: call @sub_403e70 with return %0000bd81

.address 0x413E05
0000bd81: 
.address 0x413E05
0000bd86: RDI := RBP
.address 0x413E08
0000bd8f: RSP := RSP - 8
.address 0x413E08
0000bd92: mem := mem with [RSP, el]:u64 <- 0x413E0D
.address 0x413E08
0000bd95: call @sub_403e70 with return %0000bd97

.address 0x413E0D
0000bd97: 
.address 0x413E0D
0000bd9c: goto %00009b63

.address 0x413D57
00009b63: 
.address 0x413D57
00009b73: RCX := mem[RSP + 0x128, el]:u64
.address 0x413D5F
00009b80: RCX := RCX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x413D5F
00009b83: OF := 0
.address 0x413D5F
00009b86: CF := 0
.address 0x413D5F
00009b89: AF := unknown[bits]:u1
.address 0x413D5F
00009b8c: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x413D5F
00009b8f: SF := high:1[RCX]
.address 0x413D5F
00009b92: ZF := 0 = RCX
.address 0x413D68
00009b99: RAX := pad:64[low:32[RBX]]
.address 0x413D6A
00009ba3: when ~ZF goto %00009b9d
00044d06: goto %0000bb07

.address 0x413E62
00009b9d: 
.address 0x413E62
00009baf: RSP := RSP - 8
.address 0x413E62
00009bb2: mem := mem with [RSP, el]:u64 <- 0x413E67
.address 0x413E62
00009bb5: call @sub_403970 with return %00009bb7

.address 0x413E67
00009bb7: 
00044d07: call @sub_413e70 with noreturn

.address 0x413D70
0000bb07: 
.address 0x413D70
0000bb13: #1659 := RSP
.address 0x413D70
0000bb16: RSP := RSP + 0x138
.address 0x413D70
0000bb19: CF := RSP < #1659
.address 0x413D70
0000bb1c: OF := ~high:1[#1659] & (high:1[#1659] | high:1[RSP]) & ~(high:1[#1659] & high:1[RSP])
.address 0x413D70
0000bb1f: AF := 0x10 = (0x10 & (RSP ^ #1659 ^ 0x138))
.address 0x413D70
0000bb22: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x413D70
0000bb25: SF := high:1[RSP]
.address 0x413D70
0000bb28: ZF := 0 = RSP
.address 0x413D77
0000bb30: RBX := mem[RSP, el]:u64
.address 0x413D77
0000bb33: RSP := RSP + 8
.address 0x413D78
0000bb3b: RBP := mem[RSP, el]:u64
.address 0x413D78
0000bb3e: RSP := RSP + 8
.address 0x413D79
0000bb46: R12 := mem[RSP, el]:u64
.address 0x413D79
0000bb49: RSP := RSP + 8
.address 0x413D7B
0000bb51: R13 := mem[RSP, el]:u64
.address 0x413D7B
0000bb54: RSP := RSP + 8
.address 0x413D7D
0000bb5c: R14 := mem[RSP, el]:u64
.address 0x413D7D
0000bb5f: RSP := RSP + 8
.address 0x413D7F
0000bb67: R15 := mem[RSP, el]:u64
.address 0x413D7F
0000bb6a: RSP := RSP + 8
.address 0x413D81
0000bb73: #1662 := mem[RSP, el]:u64
.address 0x413D81
0000bb76: RSP := RSP + 8
.address 0x413D81
0000bb7a: call #1662 with noreturn


.address 0x413E70
000444df: sub sub_413e70()
.address 0x413E70
00009bba: 
.address 0x413E70
00009bc1: #1432 := R15
.address 0x413E70
00009bc4: RSP := RSP - 8
.address 0x413E70
00009bc7: mem := mem with [RSP, el]:u64 <- #1432
.address 0x413E72
00009bd0: #1433 := R14
.address 0x413E72
00009bd3: RSP := RSP - 8
.address 0x413E72
00009bd6: mem := mem with [RSP, el]:u64 <- #1433
.address 0x413E74
00009bdf: #1434 := R13
.address 0x413E74
00009be2: RSP := RSP - 8
.address 0x413E74
00009be5: mem := mem with [RSP, el]:u64 <- #1434
.address 0x413E76
00009bee: #1435 := R12
.address 0x413E76
00009bf1: RSP := RSP - 8
.address 0x413E76
00009bf4: mem := mem with [RSP, el]:u64 <- #1435
.address 0x413E78
00009bfb: R12 := R9
.address 0x413E7B
00009c04: #1436 := RBP
.address 0x413E7B
00009c07: RSP := RSP - 8
.address 0x413E7B
00009c0a: mem := mem with [RSP, el]:u64 <- #1436
.address 0x413E7C
00009c13: #1437 := RBX
.address 0x413E7C
00009c16: RSP := RSP - 8
.address 0x413E7C
00009c19: mem := mem with [RSP, el]:u64 <- #1437
.address 0x413E7D
00009c20: RBP := RDI
.address 0x413E80
00009c27: RBX := R8
.address 0x413E83
00009c35: #1438 := RSP
.address 0x413E83
00009c38: RSP := RSP - 0x28
.address 0x413E83
00009c3b: CF := #1438 < 0x28
.address 0x413E83
00009c3e: OF := high:1[(#1438 ^ 0x28) & (#1438 ^ RSP)]
.address 0x413E83
00009c41: AF := 0x10 = (0x10 & (RSP ^ #1438 ^ 0x28))
.address 0x413E83
00009c44: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x413E83
00009c47: SF := high:1[RSP]
.address 0x413E83
00009c4a: ZF := 0 = RSP
.address 0x413E87
00009c57: #1441 := RSI
.address 0x413E87
00009c5a: OF := 0
.address 0x413E87
00009c5d: CF := 0
.address 0x413E87
00009c60: AF := unknown[bits]:u1
.address 0x413E87
00009c63: PF := ~low:1[let $1 = #1441 >> 4 ^ #1441 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413E87
00009c66: SF := high:1[#1441]
.address 0x413E87
00009c69: ZF := 0 = #1441
.address 0x413E8A
00009c73: when ZF goto %00009c6d
00044d08: goto %0000bab6

.address 0x413F20
00009c6d: 
.address 0x413F20
00009c7d: R8 := RCX
.address 0x413F23
00009c84: RCX := RDX
.address 0x413F26
00009c8b: RDX := 0x41AB94
.address 0x413F2D
00009c92: RSI := 1
.address 0x413F32
00009c9f: RAX := 0
.address 0x413F32
00009ca2: AF := unknown[bits]:u1
.address 0x413F32
00009ca5: ZF := 1
.address 0x413F32
00009ca8: PF := 1
.address 0x413F32
00009cab: OF := 0
.address 0x413F32
00009cae: CF := 0
.address 0x413F32
00009cb1: SF := 0
.address 0x413F34
00009cba: RSP := RSP - 8
.address 0x413F34
00009cbd: mem := mem with [RSP, el]:u64 <- 0x413F39
.address 0x413F34
00009cc0: call @sub_403df0 with return %00009cc2

.address 0x413F39
00009cc2: 
.address 0x413F39
00009cc8: goto %00009cc4

.address 0x413E90
0000bab6: 
.address 0x413E90
0000babb: R8 := RDX
.address 0x413E93
0000bac2: RDX := 0x41AB88
.address 0x413E9A
0000bac9: R9 := RCX
.address 0x413E9D
0000bad6: RAX := 0
.address 0x413E9D
0000bad9: AF := unknown[bits]:u1
.address 0x413E9D
0000badc: ZF := 1
.address 0x413E9D
0000badf: PF := 1
.address 0x413E9D
0000bae2: OF := 0
.address 0x413E9D
0000bae5: CF := 0
.address 0x413E9D
0000bae8: SF := 0
.address 0x413E9F
0000baef: RCX := RSI
.address 0x413EA2
0000baf6: RSI := 1
.address 0x413EA7
0000baff: RSP := RSP - 8
.address 0x413EA7
0000bb02: mem := mem with [RSP, el]:u64 <- 0x413EAC
.address 0x413EA7
0000bb05: call @sub_403df0 with return %00009cc4

.address 0x413EAC
00009cc4: 
.address 0x413EAC
00009cce: RSI := 0x41AB9B
.address 0x413EB3
00009cdb: RDI := 0
.address 0x413EB3
00009cde: AF := unknown[bits]:u1
.address 0x413EB3
00009ce1: ZF := 1
.address 0x413EB3
00009ce4: PF := 1
.address 0x413EB3
00009ce7: OF := 0
.address 0x413EB3
00009cea: CF := 0
.address 0x413EB3
00009ced: SF := 0
.address 0x413EB5
00009cf4: RDX := 5
.address 0x413EBA
00009cfd: RSP := RSP - 8
.address 0x413EBA
00009d00: mem := mem with [RSP, el]:u64 <- 0x413EBF
.address 0x413EBA
00009d03: call @sub_403930 with return %00009d05

.address 0x413EBF
00009d05: 
.address 0x413EBF
00009d0a: RDX := 0x41AEC0
.address 0x413EC6
00009d11: RCX := RAX
.address 0x413EC9
00009d18: R8 := 0x7E1
.address 0x413ECF
00009d1f: RSI := 1
.address 0x413ED4
00009d26: RDI := RBP
.address 0x413ED7
00009d33: RAX := 0
.address 0x413ED7
00009d36: AF := unknown[bits]:u1
.address 0x413ED7
00009d39: ZF := 1
.address 0x413ED7
00009d3c: PF := 1
.address 0x413ED7
00009d3f: OF := 0
.address 0x413ED7
00009d42: CF := 0
.address 0x413ED7
00009d45: SF := 0
.address 0x413ED9
00009d4e: RSP := RSP - 8
.address 0x413ED9
00009d51: mem := mem with [RSP, el]:u64 <- 0x413EDE
.address 0x413ED9
00009d54: call @sub_403df0 with return %00009d56

.address 0x413EDE
00009d56: 
.address 0x413EDE
00009d5b: RSI := 0x41AC28
.address 0x413EE5
00009d68: RDI := 0
.address 0x413EE5
00009d6b: AF := unknown[bits]:u1
.address 0x413EE5
00009d6e: ZF := 1
.address 0x413EE5
00009d71: PF := 1
.address 0x413EE5
00009d74: OF := 0
.address 0x413EE5
00009d77: CF := 0
.address 0x413EE5
00009d7a: SF := 0
.address 0x413EE7
00009d81: RDX := 5
.address 0x413EEC
00009d8a: RSP := RSP - 8
.address 0x413EEC
00009d8d: mem := mem with [RSP, el]:u64 <- 0x413EF1
.address 0x413EEC
00009d90: call @sub_403930 with return %00009d92

.address 0x413EF1
00009d92: 
.address 0x413EF1
00009d97: RSI := RBP
.address 0x413EF4
00009d9e: RDI := RAX
.address 0x413EF7
00009da7: RSP := RSP - 8
.address 0x413EF7
00009daa: mem := mem with [RSP, el]:u64 <- 0x413EFC
.address 0x413EF7
00009dad: call @sub_403af0 with return %00009daf

.address 0x413EFC
00009daf: 
.address 0x413EFC
00009dba: #1443 := R12 - 9
.address 0x413EFC
00009dbd: CF := R12 < 9
.address 0x413EFC
00009dc0: OF := high:1[(R12 ^ 9) & (R12 ^ #1443)]
.address 0x413EFC
00009dc3: AF := 0x10 = (0x10 & (#1443 ^ R12 ^ 9))
.address 0x413EFC
00009dc6: PF := ~low:1[let $1 = #1443 >> 4 ^ #1443 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x413EFC
00009dc9: SF := high:1[#1443]
.address 0x413EFC
00009dcc: ZF := 0 = #1443
.address 0x413F00
00009dd6: when ~(CF | ZF) goto %00009dd0
00044d09: goto %0000b9c7

.address 0x414230
00009dd0: 
.address 0x414230
00009de0: R10 := mem[RBX + 0x40, el]:u64
.address 0x414234
00009de7: R9 := mem[RBX + 0x38, el]:u64
.address 0x414238
00009dee: RDX := 5
.address 0x41423D
00009df5: RAX := mem[RBX + 0x10, el]:u64
.address 0x414241
00009dfc: R8 := mem[RBX + 8, el]:u64
.address 0x414245
00009e03: RSI := 0x41AE00
.address 0x41424C
00009e0a: R13 := mem[RBX + 0x30, el]:u64
.address 0x414250
00009e11: R12 := mem[RBX + 0x28, el]:u64
.address 0x414254
00009e18: R15 := mem[RBX + 0x20, el]:u64
.address 0x414258
00009e1f: R14 := mem[RBX + 0x18, el]:u64
.address 0x41425C
00009e26: mem := mem with [RSP + 0x18, el]:u64 <- R10
.address 0x414261
00009e2d: mem := mem with [RSP + 0x10, el]:u64 <- R9
.address 0x414266
00009e34: mem := mem with [RSP, el]:u64 <- RAX
.address 0x41426A
00009e3b: mem := mem with [RSP + 8, el]:u64 <- R8
.address 0x41426F
00009e42: RBX := mem[RBX, el]:u64
.address 0x414272
00009e4a: goto %00009e46

.address 0x41400A
00009e46: 
.address 0x41400A
00009e56: RDI := 0
.address 0x41400A
00009e59: AF := unknown[bits]:u1
.address 0x41400A
00009e5c: ZF := 1
.address 0x41400A
00009e5f: PF := 1
.address 0x41400A
00009e62: OF := 0
.address 0x41400A
00009e65: CF := 0
.address 0x41400A
00009e68: SF := 0
.address 0x41400C
00009e71: RSP := RSP - 8
.address 0x41400C
00009e74: mem := mem with [RSP, el]:u64 <- 0x414011
.address 0x41400C
00009e77: call @sub_403930 with return %00009e79

.address 0x414011
00009e79: 
.address 0x414011
00009e7e: R10 := mem[RSP + 0x18, el]:u64
.address 0x414016
00009e87: #1445 := R10
.address 0x414016
00009e8a: RSP := RSP - 8
.address 0x414016
00009e8d: mem := mem with [RSP, el]:u64 <- #1445
.address 0x414018
00009e95: goto %00009e91

.address 0x413F84
00009e91: 
.address 0x413F84
00009e9b: R9 := mem[RSP + 0x18, el]:u64
.address 0x413F89
00009ea2: RCX := RBX
.address 0x413F8C
00009ea9: RDX := RAX
.address 0x413F8F
00009eb0: RDI := RBP
.address 0x413F92
00009eb7: RSI := 1
.address 0x413F97
00009ec4: RAX := 0
.address 0x413F97
00009ec7: AF := unknown[bits]:u1
.address 0x413F97
00009eca: ZF := 1
.address 0x413F97
00009ecd: PF := 1
.address 0x413F97
00009ed0: OF := 0
.address 0x413F97
00009ed3: CF := 0
.address 0x413F97
00009ed6: SF := 0
.address 0x413F99
00009edf: #1446 := R9
.address 0x413F99
00009ee2: RSP := RSP - 8
.address 0x413F99
00009ee5: mem := mem with [RSP, el]:u64 <- #1446
.address 0x413F9B
00009eee: #1447 := R13
.address 0x413F9B
00009ef1: RSP := RSP - 8
.address 0x413F9B
00009ef4: mem := mem with [RSP, el]:u64 <- #1447
.address 0x413F9D
00009efd: #1448 := R12
.address 0x413F9D
00009f00: RSP := RSP - 8
.address 0x413F9D
00009f03: mem := mem with [RSP, el]:u64 <- #1448
.address 0x413F9F
00009f0c: #1449 := R15
.address 0x413F9F
00009f0f: RSP := RSP - 8
.address 0x413F9F
00009f12: mem := mem with [RSP, el]:u64 <- #1449
.address 0x413FA1
00009f1b: #1450 := R14
.address 0x413FA1
00009f1e: RSP := RSP - 8
.address 0x413FA1
00009f21: mem := mem with [RSP, el]:u64 <- #1450
.address 0x413FA3
00009f28: R9 := mem[RSP + 0x30, el]:u64
.address 0x413FA8
00009f2f: R8 := mem[RSP + 0x38, el]:u64
.address 0x413FAD
00009f38: RSP := RSP - 8
.address 0x413FAD
00009f3b: mem := mem with [RSP, el]:u64 <- 0x413FB2
.address 0x413FAD
00009f3e: call @sub_403df0 with return %00009f40

.address 0x413FB2
00009f40: 
.address 0x413FB2
00009f4c: #1451 := RSP
.address 0x413FB2
00009f4f: RSP := RSP + 0x30
.address 0x413FB2
00009f52: CF := RSP < #1451
.address 0x413FB2
00009f55: OF := ~high:1[#1451] & (high:1[#1451] | high:1[RSP]) & ~(high:1[#1451] & high:1[RSP])
.address 0x413FB2
00009f58: AF := 0x10 = (0x10 & (RSP ^ #1451 ^ 0x30))
.address 0x413FB2
00009f5b: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x413FB2
00009f5e: SF := high:1[RSP]
.address 0x413FB2
00009f61: ZF := 0 = RSP
.address 0x413FB6
00009f6f: #1454 := RSP
.address 0x413FB6
00009f72: RSP := RSP + 0x28
.address 0x413FB6
00009f75: CF := RSP < #1454
.address 0x413FB6
00009f78: OF := ~high:1[#1454] & (high:1[#1454] | high:1[RSP]) & ~(high:1[#1454] & high:1[RSP])
.address 0x413FB6
00009f7b: AF := 0x10 = (0x10 & (RSP ^ #1454 ^ 0x28))
.address 0x413FB6
00009f7e: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x413FB6
00009f81: SF := high:1[RSP]
.address 0x413FB6
00009f84: ZF := 0 = RSP
.address 0x413FBA
00009f8c: RBX := mem[RSP, el]:u64
.address 0x413FBA
00009f8f: RSP := RSP + 8
.address 0x413FBB
00009f97: RBP := mem[RSP, el]:u64
.address 0x413FBB
00009f9a: RSP := RSP + 8
.address 0x413FBC
00009fa2: R12 := mem[RSP, el]:u64
.address 0x413FBC
00009fa5: RSP := RSP + 8
.address 0x413FBE
00009fad: R13 := mem[RSP, el]:u64
.address 0x413FBE
00009fb0: RSP := RSP + 8
.address 0x413FC0
00009fb8: R14 := mem[RSP, el]:u64
.address 0x413FC0
00009fbb: RSP := RSP + 8
.address 0x413FC2
00009fc3: R15 := mem[RSP, el]:u64
.address 0x413FC2
00009fc6: RSP := RSP + 8
.address 0x413FC4
00009fcf: #1457 := mem[RSP, el]:u64
.address 0x413FC4
00009fd2: RSP := RSP + 8
.address 0x413FC4
00009fd6: call #1457 with noreturn

.address 0x413F06
0000b9c7: 
.address 0x413F06
0000b9cc: RDX := 0x41AE80
.address 0x413F0D
0000b9d3: RAX := extend:64[mem[RDX + (R12 << 2), el]:u32]
.address 0x413F11
0000b9e2: #1653 := RAX
.address 0x413F11
0000b9e5: #1654 := RDX
.address 0x413F11
0000b9e8: RAX := RAX + #1654
.address 0x413F11
0000b9eb: CF := RAX < #1653
.address 0x413F11
0000b9ee: OF := high:1[#1653] = high:1[#1654] & (high:1[#1653] | high:1[RAX]) & ~(
high:1[#1653] & high:1[RAX])
.address 0x413F11
0000b9f1: AF := 0x10 = (0x10 & (RAX ^ #1653 ^ #1654))
.address 0x413F11
0000b9f4: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x413F11
0000b9f7: SF := high:1[RAX]
.address 0x413F11
0000b9fa: ZF := 0 = RAX
.address 0x413F14
0000ba02: call RAX with noreturn


.address 0x414280
000444e2: sub sub_414280()
.address 0x414280
0000a7a4: 
.address 0x414280
0000a7af: R9 := 0
.address 0x414280
0000a7b2: AF := unknown[bits]:u1
.address 0x414280
0000a7b5: ZF := 1
.address 0x414280
0000a7b8: PF := 1
.address 0x414280
0000a7bb: OF := 0
.address 0x414280
0000a7be: CF := 0
.address 0x414280
0000a7c1: SF := 0
.address 0x414283
0000a7ce: #1493 := mem[R8, el]:u64
.address 0x414283
0000a7d1: CF := mem[R8, el]:u64 < 0
.address 0x414283
0000a7d4: OF := high:1[mem[R8, el]:u64 & (mem[R8, el]:u64 ^ #1493)]
.address 0x414283
0000a7d7: AF := 0x10 = (0x10 & (#1493 ^ mem[R8, el]:u64))
.address 0x414283
0000a7da: PF := ~low:1[let $1 = #1493 >> 4 ^ #1493 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414283
0000a7dd: SF := high:1[#1493]
.address 0x414283
0000a7e0: ZF := 0 = #1493
.address 0x414287
0000a7ea: when ZF goto %0000a7e4
00044d0a: goto %0000b975

.address 0x414289
0000b975: 
00044d0b: goto %0000b978

.address 0x414290
0000b978: 
.address 0x414290
0000b984: #1648 := R9
.address 0x414290
0000b987: R9 := R9 + 1
.address 0x414290
0000b98a: CF := R9 < #1648
.address 0x414290
0000b98d: OF := ~high:1[#1648] & (high:1[#1648] | high:1[R9]) & ~(high:1[#1648] & high:1[R9])
.address 0x414290
0000b990: AF := 0x10 = (0x10 & (R9 ^ #1648 ^ 1))
.address 0x414290
0000b993: PF := ~low:1[let $1 = R9 >> 4 ^ R9 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414290
0000b996: SF := high:1[R9]
.address 0x414290
0000b999: ZF := 0 = R9
.address 0x414294
0000b9a6: #1651 := mem[R8 + (R9 << 3), el]:u64
.address 0x414294
0000b9a9: CF := mem[R8 + (R9 << 3), el]:u64 < 0
.address 0x414294
0000b9ac: OF := high:1[mem[R8 + (R9 << 3), el]:u64 & (mem[R8 + (R9 << 3), el]:u64 ^ #1651)]
.address 0x414294
0000b9af: AF := 0x10 = (0x10 & (#1651 ^ mem[R8 + (R9 << 3), el]:u64))
.address 0x414294
0000b9b2: PF := ~low:1[let $1 = #1651 >> 4 ^ #1651 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414294
0000b9b5: SF := high:1[#1651]
.address 0x414294
0000b9b8: ZF := 0 = #1651
.address 0x414299
0000b9c1: when ~ZF goto %0000b978
00044d0c: goto %0000a7e4

.address 0x41429B
0000a7e4: 
.address 0x41429B
0000a7f4: call @sub_413e70 with noreturn


.address 0x414320
000444e6: sub sub_414320()
.address 0x414320
0000a9d5: 
.address 0x414320
0000a9dc: #1512 := RBP
.address 0x414320
0000a9df: RSP := RSP - 8
.address 0x414320
0000a9e2: mem := mem with [RSP, el]:u64 <- #1512
.address 0x414321
0000a9eb: #1513 := RBX
.address 0x414321
0000a9ee: RSP := RSP - 8
.address 0x414321
0000a9f1: mem := mem with [RSP, el]:u64 <- #1513
.address 0x414322
0000a9f8: R10 := 0x20
.address 0x414328
0000aa05: R11 := 0
.address 0x414328
0000aa08: AF := unknown[bits]:u1
.address 0x414328
0000aa0b: ZF := 1
.address 0x414328
0000aa0e: PF := 1
.address 0x414328
0000aa11: OF := 0
.address 0x414328
0000aa14: CF := 0
.address 0x414328
0000aa17: SF := 0
.address 0x41432B
0000aa25: #1514 := RSP
.address 0x41432B
0000aa28: RSP := RSP - 0xB8
.address 0x41432B
0000aa2b: CF := #1514 < 0xB8
.address 0x41432B
0000aa2e: OF := high:1[(#1514 ^ 0xB8) & (#1514 ^ RSP)]
.address 0x41432B
0000aa31: AF := 0x10 = (0x10 & (RSP ^ #1514 ^ 0xB8))
.address 0x41432B
0000aa34: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41432B
0000aa37: SF := high:1[RSP]
.address 0x41432B
0000aa3a: ZF := 0 = RSP
.address 0x414332
0000aa41: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x41433B
0000aa48: mem := mem with [RSP + 0x78, el]:u64 <- RAX
.address 0x414340
0000aa55: RAX := 0
.address 0x414340
0000aa58: AF := unknown[bits]:u1
.address 0x414340
0000aa5b: ZF := 1
.address 0x414340
0000aa5e: PF := 1
.address 0x414340
0000aa61: OF := 0
.address 0x414340
0000aa64: CF := 0
.address 0x414340
0000aa67: SF := 0
.address 0x414342
0000aa6e: RAX := low:64[RSP + 0xD0]
.address 0x41434A
0000aa75: mem := mem with [RSP + 0xA0, el]:u64 <- R8
.address 0x414352
0000aa7c: RBX := low:64[RSP + 0xD0]
.address 0x41435A
0000aa83: R8 := low:64[RSP + 0x20]
.address 0x41435F
0000aa8a: mem := mem with [RSP + 0xA8, el]:u64 <- R9
.address 0x414367
0000aa91: mem := mem with [RSP + 8, el]:u32 <- 0x20
.address 0x41436F
0000aa98: mem := mem with [RSP + 0x10, el]:u64 <- RAX
.address 0x414374
0000aa9f: RAX := low:64[RSP + 0x80]
.address 0x41437C
0000aaac: R9 := 0
.address 0x41437C
0000aaaf: AF := unknown[bits]:u1
.address 0x41437C
0000aab2: ZF := 1
.address 0x41437C
0000aab5: PF := 1
.address 0x41437C
0000aab8: OF := 0
.address 0x41437C
0000aabb: CF := 0
.address 0x41437C
0000aabe: SF := 0
.address 0x41437F
0000aac5: mem := mem with [RSP + 0x18, el]:u64 <- RAX
.address 0x414384
0000aacc: RBP := RAX
00044d0d: goto %0000aad1

.address 0x414390
0000aad1: 
.address 0x414390
0000aadc: #1517 := low:32[R10] - 0x2F
.address 0x414390
0000aadf: CF := low:32[R10] < 0x2F
.address 0x414390
0000aae2: OF := high:1[(low:32[R10] ^ 0x2F) & (low:32[R10] ^ #1517)]
.address 0x414390
0000aae5: AF := 0x10 = (0x10 & (#1517 ^ low:32[R10] ^ 0x2F))
.address 0x414390
0000aae8: PF := ~low:1[let $1 = #1517 >> 4 ^ #1517 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414390
0000aaeb: SF := high:1[#1517]
.address 0x414390
0000aaee: ZF := 0 = #1517
.address 0x414394
0000aaf8: when ~(CF | ZF) goto %0000aaf2
00044d0e: goto %0000b8c5

.address 0x4143EC
0000aaf2: 
.address 0x4143EC
0000ab02: RAX := RBX
.address 0x4143EF
0000ab10: #1519 := RBX
.address 0x4143EF
0000ab13: RBX := RBX + 8
.address 0x4143EF
0000ab16: CF := RBX < #1519
.address 0x4143EF
0000ab19: OF := ~high:1[#1519] & (high:1[#1519] | high:1[RBX]) & ~(high:1[#1519] & high:1[RBX])
.address 0x4143EF
0000ab1c: AF := 0x10 = (0x10 & (RBX ^ #1519 ^ 8))
.address 0x4143EF
0000ab1f: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4143EF
0000ab22: SF := high:1[RBX]
.address 0x4143EF
0000ab25: ZF := 0 = RBX
.address 0x4143F3
0000ab2d: goto %0000ab29

.address 0x414396
0000b8c5: 
.address 0x414396
0000b8ca: RAX := pad:64[low:32[R10]]
.address 0x414399
0000b8d1: R11 := 1
.address 0x41439F
0000b8df: #1636 := low:32[R10]
.address 0x41439F
0000b8e2: R10 := pad:64[low:32[R10] + 8]
.address 0x41439F
0000b8e5: CF := low:32[R10] < #1636
.address 0x41439F
0000b8e8: OF := ~high:1[#1636] & (high:1[#1636] | high:1[low:32[R10]]) & ~(
high:1[#1636] & high:1[low:32[R10]])
.address 0x41439F
0000b8eb: AF := 0x10 = (0x10 & (low:32[R10] ^ #1636 ^ 8))
.address 0x41439F
0000b8ee: PF := ~low:1[let $1 = low:32[R10] >> 4 ^ low:32[R10] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41439F
0000b8f1: SF := high:1[low:32[R10]]
.address 0x41439F
0000b8f4: ZF := 0 = low:32[R10]
.address 0x4143A3
0000b903: #1639 := RAX
.address 0x4143A3
0000b906: #1640 := RBP
.address 0x4143A3
0000b909: RAX := RAX + #1640
.address 0x4143A3
0000b90c: CF := RAX < #1639
.address 0x4143A3
0000b90f: OF := high:1[#1639] = high:1[#1640] & (high:1[#1639] | high:1[RAX]) & ~(
high:1[#1639] & high:1[RAX])
.address 0x4143A3
0000b912: AF := 0x10 = (0x10 & (RAX ^ #1639 ^ #1640))
.address 0x4143A3
0000b915: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4143A3
0000b918: SF := high:1[RAX]
.address 0x4143A3
0000b91b: ZF := 0 = RAX
00044d0f: goto %0000ab29

.address 0x4143A6
0000ab29: 
.address 0x4143A6
0000ab33: RAX := mem[RAX, el]:u64
.address 0x4143A9
0000ab40: #1522 := RAX
.address 0x4143A9
0000ab43: OF := 0
.address 0x4143A9
0000ab46: CF := 0
.address 0x4143A9
0000ab49: AF := unknown[bits]:u1
.address 0x4143A9
0000ab4c: PF := ~low:1[let $1 = #1522 >> 4 ^ #1522 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4143A9
0000ab4f: SF := high:1[#1522]
.address 0x4143A9
0000ab52: ZF := 0 = #1522
.address 0x4143AC
0000ab59: mem := mem with [R8 + (R9 << 3), el]:u64 <- RAX
.address 0x4143B0
0000ab63: when ZF goto %0000ab5d
00044d10: goto %0000ac3c

.address 0x4143B2
0000ac3c: 
.address 0x4143B2
0000ac48: #1531 := R9
.address 0x4143B2
0000ac4b: R9 := R9 + 1
.address 0x4143B2
0000ac4e: CF := R9 < #1531
.address 0x4143B2
0000ac51: OF := ~high:1[#1531] & (high:1[#1531] | high:1[R9]) & ~(high:1[#1531] & high:1[R9])
.address 0x4143B2
0000ac54: AF := 0x10 = (0x10 & (R9 ^ #1531 ^ 1))
.address 0x4143B2
0000ac57: PF := ~low:1[let $1 = R9 >> 4 ^ R9 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4143B2
0000ac5a: SF := high:1[R9]
.address 0x4143B2
0000ac5d: ZF := 0 = R9
.address 0x4143B6
0000ac6a: #1534 := R9 - 0xA
.address 0x4143B6
0000ac6d: CF := R9 < 0xA
.address 0x4143B6
0000ac70: OF := high:1[(R9 ^ 0xA) & (R9 ^ #1534)]
.address 0x4143B6
0000ac73: AF := 0x10 = (0x10 & (#1534 ^ R9 ^ 0xA))
.address 0x4143B6
0000ac76: PF := ~low:1[let $1 = #1534 >> 4 ^ #1534 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4143B6
0000ac79: SF := high:1[#1534]
.address 0x4143B6
0000ac7c: ZF := 0 = #1534
.address 0x4143BA
0000ac85: when ~ZF goto %0000aad1
00044d11: goto %0000ab5d

.address 0x4143BC
0000ab5d: 
.address 0x4143BC
0000ab73: #1524 := low:8[R11]
.address 0x4143BC
0000ab76: OF := 0
.address 0x4143BC
0000ab79: CF := 0
.address 0x4143BC
0000ab7c: AF := unknown[bits]:u1
.address 0x4143BC
0000ab7f: PF := ~low:1[let $1 = #1524 >> 4 ^ #1524 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4143BC
0000ab82: SF := high:1[#1524]
.address 0x4143BC
0000ab85: ZF := 0 = #1524
.address 0x4143BF
0000ab8f: when ~ZF goto %0000ab89
00044d12: goto %0000ab9d

.address 0x4143C1
0000ab9d: 
.address 0x4143C1
0000aba9: RSP := RSP - 8
.address 0x4143C1
0000abac: mem := mem with [RSP, el]:u64 <- 0x4143C6
.address 0x4143C1
0000abaf: call @sub_413e70 with return %0000abb1

.address 0x4143C6
0000abb1: 
.address 0x4143C6
0000abb6: RAX := mem[RSP + 0x78, el]:u64
.address 0x4143CB
0000abc3: RAX := RAX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x4143CB
0000abc6: OF := 0
.address 0x4143CB
0000abc9: CF := 0
.address 0x4143CB
0000abcc: AF := unknown[bits]:u1
.address 0x4143CB
0000abcf: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4143CB
0000abd2: SF := high:1[RAX]
.address 0x4143CB
0000abd5: ZF := 0 = RAX
.address 0x4143D4
0000abdf: when ~ZF goto %0000abd9
00044d13: goto %0000abf3

.address 0x4143E0
0000abd9: 
.address 0x4143E0
0000abeb: RSP := RSP - 8
.address 0x4143E0
0000abee: mem := mem with [RSP, el]:u64 <- 0x4143E5
.address 0x4143E0
0000abf1: call @sub_403970 with return %0000ab89

.address 0x4143E5
0000ab89: 
.address 0x4143E5
0000ab99: mem := mem with [RSP + 8, el]:u32 <- low:32[R10]
.address 0x4143EA
0000aba1: goto %0000ab9d

.address 0x4143D6
0000abf3: 
.address 0x4143D6
0000abff: #1527 := RSP
.address 0x4143D6
0000ac02: RSP := RSP + 0xB8
.address 0x4143D6
0000ac05: CF := RSP < #1527
.address 0x4143D6
0000ac08: OF := ~high:1[#1527] & (high:1[#1527] | high:1[RSP]) & ~(high:1[#1527] & high:1[RSP])
.address 0x4143D6
0000ac0b: AF := 0x10 = (0x10 & (RSP ^ #1527 ^ 0xB8))
.address 0x4143D6
0000ac0e: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4143D6
0000ac11: SF := high:1[RSP]
.address 0x4143D6
0000ac14: ZF := 0 = RSP
.address 0x4143DD
0000ac1c: RBX := mem[RSP, el]:u64
.address 0x4143DD
0000ac1f: RSP := RSP + 8
.address 0x4143DE
0000ac27: RBP := mem[RSP, el]:u64
.address 0x4143DE
0000ac2a: RSP := RSP + 8
.address 0x4143DF
0000ac33: #1530 := mem[RSP, el]:u64
.address 0x4143DF
0000ac36: RSP := RSP + 8
.address 0x4143DF
0000ac3a: call #1530 with noreturn


.address 0x414480
000444ee: sub sub_414480()
.address 0x414480
0000ae08: 
.address 0x414480
0000ae0f: #1537 := RBX
.address 0x414480
0000ae12: RSP := RSP - 8
.address 0x414480
0000ae15: mem := mem with [RSP, el]:u64 <- #1537
.address 0x414481
0000ae1c: RBX := RDI
.address 0x414484
0000ae25: RSP := RSP - 8
.address 0x414484
0000ae28: mem := mem with [RSP, el]:u64 <- 0x414489
.address 0x414484
0000ae2b: call @sub_403e78 with return %0000ae2d

.address 0x414489
0000ae2d: 
.address 0x414489
0000ae38: #1538 := RAX
.address 0x414489
0000ae3b: OF := 0
.address 0x414489
0000ae3e: CF := 0
.address 0x414489
0000ae41: AF := unknown[bits]:u1
.address 0x414489
0000ae44: PF := ~low:1[let $1 = #1538 >> 4 ^ #1538 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414489
0000ae47: SF := high:1[#1538]
.address 0x414489
0000ae4a: ZF := 0 = #1538
.address 0x41448C
0000ae54: when ~ZF goto %0000ae4e
00044d14: goto %0000b899

.address 0x41448E
0000b899: 
.address 0x41448E
0000b8a4: #1634 := RBX
.address 0x41448E
0000b8a7: OF := 0
.address 0x41448E
0000b8aa: CF := 0
.address 0x41448E
0000b8ad: AF := unknown[bits]:u1
.address 0x41448E
0000b8b0: PF := ~low:1[let $1 = #1634 >> 4 ^ #1634 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41448E
0000b8b3: SF := high:1[#1634]
.address 0x41448E
0000b8b6: ZF := 0 = #1634
.address 0x414491
0000b8bf: when ~ZF goto %0000ae74
00044d15: goto %0000ae4e

.address 0x414495
0000ae74: 
.address 0x414495
0000ae7b: RSP := RSP - 8
.address 0x414495
0000ae7e: mem := mem with [RSP, el]:u64 <- 0x41449A
.address 0x414495
0000ae81: call @sub_4146d0 with return %0000ae83

.address 0x41449A
0000ae83: 
.address 0x4144A0
0000ae8b: RAX := RDI
.address 0x4144A3
0000ae9a: #1541 := pad:128[RAX] * pad:128[RSI]
.address 0x4144A3
0000ae9d: RAX := extract:63:0[#1541]
.address 0x4144A3
0000aea0: RDX := extract:127:64[#1541]
.address 0x4144A3
0000aea3: OF := extract:127:64[#1541] <> 0
.address 0x4144A3
0000aea6: CF := extract:127:64[#1541] <> 0
.address 0x4144A3
0000aea9: SF := unknown[bits]:u1
.address 0x4144A3
0000aeac: ZF := unknown[bits]:u1
.address 0x4144A3
0000aeaf: AF := unknown[bits]:u1
.address 0x4144A3
0000aeb2: PF := unknown[bits]:u1
.address 0x4144A6
0000aeb9: RDI := RAX
.address 0x4144A9
0000aec0: RAX := extract:63:8[RAX].pad:8[OF]
.address 0x4144AC
0000aecd: #1542 := RDI
.address 0x4144AC
0000aed0: OF := 0
.address 0x4144AC
0000aed3: CF := 0
.address 0x4144AC
0000aed6: AF := unknown[bits]:u1
.address 0x4144AC
0000aed9: PF := ~low:1[let $1 = #1542 >> 4 ^ #1542 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4144AC
0000aedc: SF := high:1[#1542]
.address 0x4144AC
0000aedf: ZF := 0 = #1542
.address 0x4144AF
0000aee9: when SF goto %0000aee3
00044d16: goto %0000b85f

.address 0x4144B1
0000b85f: 
.address 0x4144B1
0000b864: RAX := pad:64[pad:32[low:8[RAX]]]
.address 0x4144B4
0000b871: #1632 := RAX
.address 0x4144B4
0000b874: OF := 0
.address 0x4144B4
0000b877: CF := 0
.address 0x4144B4
0000b87a: AF := unknown[bits]:u1
.address 0x4144B4
0000b87d: PF := ~low:1[let $1 = #1632 >> 4 ^ #1632 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4144B4
0000b880: SF := high:1[#1632]
.address 0x4144B4
0000b883: ZF := 0 = #1632
.address 0x4144B7
0000b88c: when ~ZF goto %0000aee3
00044d17: goto %0000b892

.address 0x4144BB
0000aee3: 
.address 0x4144BB
0000aefa: #1544 := RSP
.address 0x4144BB
0000aefd: RSP := RSP - 8
.address 0x4144BB
0000af00: CF := #1544 < 8
.address 0x4144BB
0000af03: OF := high:1[(#1544 ^ 8) & (#1544 ^ RSP)]
.address 0x4144BB
0000af06: AF := 0x10 = (0x10 & (RSP ^ #1544 ^ 8))
.address 0x4144BB
0000af09: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4144BB
0000af0c: SF := high:1[RSP]
.address 0x4144BB
0000af0f: ZF := 0 = RSP
.address 0x4144BF
0000af18: RSP := RSP - 8
.address 0x4144BF
0000af1b: mem := mem with [RSP, el]:u64 <- 0x4144C4
.address 0x4144BF
0000af1e: call @sub_4146d0 with return %0000af20

.address 0x4144C4
0000af20: 
.address 0x4144D0
0000af2b: call @sub_414480 with noreturn

.address 0x4144B9
0000b892: 
.address 0x4144B9
0000b897: call @sub_414480 with noreturn

.address 0x414493
0000ae4e: 
.address 0x414493
0000ae5f: RBX := mem[RSP, el]:u64
.address 0x414493
0000ae62: RSP := RSP + 8
.address 0x414494
0000ae6b: #1540 := mem[RSP, el]:u64
.address 0x414494
0000ae6e: RSP := RSP + 8
.address 0x414494
0000ae72: call #1540 with noreturn


.address 0x4144E0
000444f3: sub sub_4144e0()
.address 0x4144E0
0000af33: 
.address 0x4144E0
0000af3e: #1547 := RSI
.address 0x4144E0
0000af41: OF := 0
.address 0x4144E0
0000af44: CF := 0
.address 0x4144E0
0000af47: AF := unknown[bits]:u1
.address 0x4144E0
0000af4a: PF := ~low:1[let $1 = #1547 >> 4 ^ #1547 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4144E0
0000af4d: SF := high:1[#1547]
.address 0x4144E0
0000af50: ZF := 0 = #1547
.address 0x4144E3
0000af59: #1549 := RBX
.address 0x4144E3
0000af5c: RSP := RSP - 8
.address 0x4144E3
0000af5f: mem := mem with [RSP, el]:u64 <- #1549
.address 0x4144E4
0000af66: RBX := RSI
.address 0x4144E7
0000af70: when ~ZF goto %0000af6a
00044d18: goto %0000b833

.address 0x4144E9
0000b833: 
.address 0x4144E9
0000b83e: #1630 := RDI
.address 0x4144E9
0000b841: OF := 0
.address 0x4144E9
0000b844: CF := 0
.address 0x4144E9
0000b847: AF := unknown[bits]:u1
.address 0x4144E9
0000b84a: PF := ~low:1[let $1 = #1630 >> 4 ^ #1630 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4144E9
0000b84d: SF := high:1[#1630]
.address 0x4144E9
0000b850: ZF := 0 = #1630
.address 0x4144EC
0000b859: when ~ZF goto %0000afd5
00044d19: goto %0000af6a

.address 0x414508
0000afd5: 
.address 0x414508
0000afdc: RSP := RSP - 8
.address 0x414508
0000afdf: mem := mem with [RSP, el]:u64 <- 0x41450D
.address 0x414508
0000afe2: call @sub_403e70 with return %0000afe4

.address 0x41450D
0000afe4: 
.address 0x41450D
0000afef: RAX := 0
.address 0x41450D
0000aff2: AF := unknown[bits]:u1
.address 0x41450D
0000aff5: ZF := 1
.address 0x41450D
0000aff8: PF := 1
.address 0x41450D
0000affb: OF := 0
.address 0x41450D
0000affe: CF := 0
.address 0x41450D
0000b001: SF := 0
.address 0x41450F
0000b009: RBX := mem[RSP, el]:u64
.address 0x41450F
0000b00c: RSP := RSP + 8
.address 0x414510
0000b015: #1553 := mem[RSP, el]:u64
.address 0x414510
0000b018: RSP := RSP + 8
.address 0x414510
0000b01c: call #1553 with noreturn

.address 0x4144EE
0000af6a: 
.address 0x4144EE
0000af7a: RSI := RBX
.address 0x4144F1
0000af83: RSP := RSP - 8
.address 0x4144F1
0000af86: mem := mem with [RSP, el]:u64 <- 0x4144F6
.address 0x4144F1
0000af89: call @sub_403c90 with return %0000af8b

.address 0x4144F6
0000af8b: 
.address 0x4144F6
0000af96: #1550 := RAX
.address 0x4144F6
0000af99: OF := 0
.address 0x4144F6
0000af9c: CF := 0
.address 0x4144F6
0000af9f: AF := unknown[bits]:u1
.address 0x4144F6
0000afa2: PF := ~low:1[let $1 = #1550 >> 4 ^ #1550 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4144F6
0000afa5: SF := high:1[#1550]
.address 0x4144F6
0000afa8: ZF := 0 = #1550
.address 0x4144F9
0000afb2: when ~ZF goto %0000afac
00044d1a: goto %0000b807

.address 0x4144FB
0000b807: 
.address 0x4144FB
0000b812: #1628 := RBX
.address 0x4144FB
0000b815: OF := 0
.address 0x4144FB
0000b818: CF := 0
.address 0x4144FB
0000b81b: AF := unknown[bits]:u1
.address 0x4144FB
0000b81e: PF := ~low:1[let $1 = #1628 >> 4 ^ #1628 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4144FB
0000b821: SF := high:1[#1628]
.address 0x4144FB
0000b824: ZF := 0 = #1628
.address 0x4144FE
0000b82d: when ~ZF goto %0000b01e
00044d1b: goto %0000afac

.address 0x414511
0000b01e: 
.address 0x414511
0000b025: RSP := RSP - 8
.address 0x414511
0000b028: mem := mem with [RSP, el]:u64 <- 0x414516
.address 0x414511
0000b02b: call @sub_4146d0 with return %0000b02d

.address 0x414516
0000b02d: 
.address 0x414520
0000b035: RAX := RSI
.address 0x414523
0000b044: #1554 := pad:128[RAX] * pad:128[RDX]
.address 0x414523
0000b047: RAX := extract:63:0[#1554]
.address 0x414523
0000b04a: RDX := extract:127:64[#1554]
.address 0x414523
0000b04d: OF := extract:127:64[#1554] <> 0
.address 0x414523
0000b050: CF := extract:127:64[#1554] <> 0
.address 0x414523
0000b053: SF := unknown[bits]:u1
.address 0x414523
0000b056: ZF := unknown[bits]:u1
.address 0x414523
0000b059: AF := unknown[bits]:u1
.address 0x414523
0000b05c: PF := unknown[bits]:u1
.address 0x414526
0000b063: RSI := RAX
.address 0x414529
0000b06a: RAX := extract:63:8[RAX].pad:8[OF]
.address 0x41452C
0000b077: #1555 := RSI
.address 0x41452C
0000b07a: OF := 0
.address 0x41452C
0000b07d: CF := 0
.address 0x41452C
0000b080: AF := unknown[bits]:u1
.address 0x41452C
0000b083: PF := ~low:1[let $1 = #1555 >> 4 ^ #1555 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41452C
0000b086: SF := high:1[#1555]
.address 0x41452C
0000b089: ZF := 0 = #1555
.address 0x41452F
0000b093: when SF goto %0000b08d
00044d1c: goto %0000b7cd

.address 0x414531
0000b7cd: 
.address 0x414531
0000b7d2: RAX := pad:64[pad:32[low:8[RAX]]]
.address 0x414534
0000b7df: #1626 := RAX
.address 0x414534
0000b7e2: OF := 0
.address 0x414534
0000b7e5: CF := 0
.address 0x414534
0000b7e8: AF := unknown[bits]:u1
.address 0x414534
0000b7eb: PF := ~low:1[let $1 = #1626 >> 4 ^ #1626 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414534
0000b7ee: SF := high:1[#1626]
.address 0x414534
0000b7f1: ZF := 0 = #1626
.address 0x414537
0000b7fa: when ~ZF goto %0000b08d
00044d1d: goto %0000b800

.address 0x41453B
0000b08d: 
.address 0x41453B
0000b0a4: #1557 := RSP
.address 0x41453B
0000b0a7: RSP := RSP - 8
.address 0x41453B
0000b0aa: CF := #1557 < 8
.address 0x41453B
0000b0ad: OF := high:1[(#1557 ^ 8) & (#1557 ^ RSP)]
.address 0x41453B
0000b0b0: AF := 0x10 = (0x10 & (RSP ^ #1557 ^ 8))
.address 0x41453B
0000b0b3: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41453B
0000b0b6: SF := high:1[RSP]
.address 0x41453B
0000b0b9: ZF := 0 = RSP
.address 0x41453F
0000b0c2: RSP := RSP - 8
.address 0x41453F
0000b0c5: mem := mem with [RSP, el]:u64 <- 0x414544
.address 0x41453F
0000b0c8: call @sub_4146d0 with return %0000b0ca

.address 0x414544
0000b0ca: 
.address 0x414550
0000b0db: #1560 := RDI
.address 0x414550
0000b0de: OF := 0
.address 0x414550
0000b0e1: CF := 0
.address 0x414550
0000b0e4: AF := unknown[bits]:u1
.address 0x414550
0000b0e7: PF := ~low:1[let $1 = #1560 >> 4 ^ #1560 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414550
0000b0ea: SF := high:1[#1560]
.address 0x414550
0000b0ed: ZF := 0 = #1560
.address 0x414553
0000b0f4: R9 := RDX
.address 0x414556
0000b0fb: RCX := mem[RSI, el]:u64
.address 0x414559
0000b105: when ZF goto %0000b0ff
00044d1e: goto %0000b6f3

.address 0x414590
0000b0ff: 
.address 0x414590
0000b115: #1562 := RCX
.address 0x414590
0000b118: OF := 0
.address 0x414590
0000b11b: CF := 0
.address 0x414590
0000b11e: AF := unknown[bits]:u1
.address 0x414590
0000b121: PF := ~low:1[let $1 = #1562 >> 4 ^ #1562 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414590
0000b124: SF := high:1[#1562]
.address 0x414590
0000b127: ZF := 0 = #1562
.address 0x414593
0000b131: when ZF goto %0000b12b
00044d1f: goto %0000b201

.address 0x41455B
0000b6f3: 
.address 0x41455B
0000b6fe: RDX := 0
.address 0x41455B
0000b701: AF := unknown[bits]:u1
.address 0x41455B
0000b704: ZF := 1
.address 0x41455B
0000b707: PF := 1
.address 0x41455B
0000b70a: OF := 0
.address 0x41455B
0000b70d: CF := 0
.address 0x41455B
0000b710: SF := 0
.address 0x41455D
0000b717: RAX := 0x5555555555555554
.address 0x414567
0000b730: #1618 := pad:128[R9]
.address 0x414567
0000b76f: goto %0000b732

0000b749: 
.address 0x414567
0000b74a: call %0000737f with noreturn

0000b73f: 
.address 0x414567
0000b740: #1621 := low:64[#1620].low:64[#1619]
.address 0x414567
0000b743: RAX := extract:63:0[#1621]
.address 0x414567
0000b746: RDX := extract:127:64[#1621]
.address 0x414567
0000b750: goto %0000b74d

0000b74c: 
.address 0x414567
0000b74e: when high:64[#1619] = 0 goto %0000b73f
.address 0x414567
0000b74f: goto %0000b749

0000b73c: 
.address 0x414567
0000b73d: #1620 := #1617 % #1618
.address 0x414567
0000b753: goto %0000b74c

0000b739: 
.address 0x414567
0000b73a: #1619 := #1617 / #1618
.address 0x414567
0000b754: goto %0000b73c

0000b74d: 
.address 0x414567
0000b75a: goto %0000b756

0000b735: 
.address 0x414567
0000b736: call %0000737f with noreturn

0000b755: 
.address 0x414567
0000b757: when #1618 = 0 goto %0000b735
.address 0x414567
0000b758: goto %0000b739

0000b732: 
.address 0x414567
0000b733: #1617 := RDX.RAX
.address 0x414567
0000b76e: goto %0000b755

0000b756: 
.address 0x414567
0000b75d: CF := unknown[bits]:u1
.address 0x414567
0000b760: OF := unknown[bits]:u1
.address 0x414567
0000b763: SF := unknown[bits]:u1
.address 0x414567
0000b766: ZF := unknown[bits]:u1
.address 0x414567
0000b769: AF := unknown[bits]:u1
.address 0x414567
0000b76c: PF := unknown[bits]:u1
00044d20: goto %0000b770

.address 0x41456A
0000b770: 
.address 0x41456A
0000b77b: #1622 := RAX - RCX
.address 0x41456A
0000b77e: CF := RAX < RCX
.address 0x41456A
0000b781: OF := high:1[(RAX ^ RCX) & (RAX ^ #1622)]
.address 0x41456A
0000b784: AF := 0x10 = (0x10 & (#1622 ^ RAX ^ RCX))
.address 0x41456A
0000b787: PF := ~low:1[let $1 = #1622 >> 4 ^ #1622 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41456A
0000b78a: SF := high:1[#1622]
.address 0x41456A
0000b78d: ZF := 0 = #1622
.address 0x41456D
0000b796: when CF | ZF goto %0000b263
00044d21: goto %0000b79c

.address 0x4145AB
0000b263: 
.address 0x4145AB
0000b27a: #1574 := RSP
.address 0x4145AB
0000b27d: RSP := RSP - 8
.address 0x4145AB
0000b280: CF := #1574 < 8
.address 0x4145AB
0000b283: OF := high:1[(#1574 ^ 8) & (#1574 ^ RSP)]
.address 0x4145AB
0000b286: AF := 0x10 = (0x10 & (RSP ^ #1574 ^ 8))
.address 0x4145AB
0000b289: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4145AB
0000b28c: SF := high:1[RSP]
.address 0x4145AB
0000b28f: ZF := 0 = RSP
.address 0x4145AF
0000b298: RSP := RSP - 8
.address 0x4145AF
0000b29b: mem := mem with [RSP, el]:u64 <- 0x4145B4
.address 0x4145AF
0000b29e: call @sub_4146d0 with return %0000b2a0

.address 0x4145B4
0000b2a0: 
00044d22: goto %0000b12b

.address 0x4145B8
0000b12b: 
.address 0x4145B8
0000b141: RDX := 0
.address 0x4145B8
0000b144: AF := unknown[bits]:u1
.address 0x4145B8
0000b147: ZF := 1
.address 0x4145B8
0000b14a: PF := 1
.address 0x4145B8
0000b14d: OF := 0
.address 0x4145B8
0000b150: CF := 0
.address 0x4145B8
0000b153: SF := 0
.address 0x4145BA
0000b15a: RAX := 0x80
.address 0x4145BF
0000b167: R8 := 0
.address 0x4145BF
0000b16a: AF := unknown[bits]:u1
.address 0x4145BF
0000b16d: ZF := 1
.address 0x4145BF
0000b170: PF := 1
.address 0x4145BF
0000b173: OF := 0
.address 0x4145BF
0000b176: CF := 0
.address 0x4145BF
0000b179: SF := 0
.address 0x4145C2
0000b192: #1565 := pad:128[R9]
.address 0x4145C2
0000b1d1: goto %0000b194

0000b1ab: 
.address 0x4145C2
0000b1ac: call %0000737f with noreturn

0000b1a1: 
.address 0x4145C2
0000b1a2: #1568 := low:64[#1567].low:64[#1566]
.address 0x4145C2
0000b1a5: RAX := extract:63:0[#1568]
.address 0x4145C2
0000b1a8: RDX := extract:127:64[#1568]
.address 0x4145C2
0000b1b2: goto %0000b1af

0000b1ae: 
.address 0x4145C2
0000b1b0: when high:64[#1566] = 0 goto %0000b1a1
.address 0x4145C2
0000b1b1: goto %0000b1ab

0000b19e: 
.address 0x4145C2
0000b19f: #1567 := #1564 % #1565
.address 0x4145C2
0000b1b5: goto %0000b1ae

0000b19b: 
.address 0x4145C2
0000b19c: #1566 := #1564 / #1565
.address 0x4145C2
0000b1b6: goto %0000b19e

0000b1af: 
.address 0x4145C2
0000b1bc: goto %0000b1b8

0000b197: 
.address 0x4145C2
0000b198: call %0000737f with noreturn

0000b1b7: 
.address 0x4145C2
0000b1b9: when #1565 = 0 goto %0000b197
.address 0x4145C2
0000b1ba: goto %0000b19b

0000b194: 
.address 0x4145C2
0000b195: #1564 := RDX.RAX
.address 0x4145C2
0000b1d0: goto %0000b1b7

0000b1b8: 
.address 0x4145C2
0000b1bf: CF := unknown[bits]:u1
.address 0x4145C2
0000b1c2: OF := unknown[bits]:u1
.address 0x4145C2
0000b1c5: SF := unknown[bits]:u1
.address 0x4145C2
0000b1c8: ZF := unknown[bits]:u1
.address 0x4145C2
0000b1cb: AF := unknown[bits]:u1
.address 0x4145C2
0000b1ce: PF := unknown[bits]:u1
00044d23: goto %0000b1d2

.address 0x4145C5
0000b1d2: 
.address 0x4145C5
0000b1dd: #1569 := RAX
.address 0x4145C5
0000b1e0: OF := 0
.address 0x4145C5
0000b1e3: CF := 0
.address 0x4145C5
0000b1e6: AF := unknown[bits]:u1
.address 0x4145C5
0000b1e9: PF := ~low:1[let $1 = #1569 >> 4 ^ #1569 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4145C5
0000b1ec: SF := high:1[#1569]
.address 0x4145C5
0000b1ef: ZF := 0 = #1569
.address 0x4145C8
0000b1f6: R8 := extract:63:8[R8].pad:8[ZF]
.address 0x4145CC
0000b1fd: RCX := low:64[R8 + RAX]
.address 0x4145D0
0000b205: goto %0000b201

.address 0x414595
0000b201: 
.address 0x414595
0000b20b: RAX := RCX
.address 0x414598
0000b21a: #1571 := pad:128[RAX] * pad:128[R9]
.address 0x414598
0000b21d: RAX := extract:63:0[#1571]
.address 0x414598
0000b220: RDX := extract:127:64[#1571]
.address 0x414598
0000b223: OF := extract:127:64[#1571] <> 0
.address 0x414598
0000b226: CF := extract:127:64[#1571] <> 0
.address 0x414598
0000b229: SF := unknown[bits]:u1
.address 0x414598
0000b22c: ZF := unknown[bits]:u1
.address 0x414598
0000b22f: AF := unknown[bits]:u1
.address 0x414598
0000b232: PF := unknown[bits]:u1
.address 0x41459B
0000b239: RDX := extract:63:8[RDX].pad:8[OF]
.address 0x41459E
0000b246: #1572 := RAX
.address 0x41459E
0000b249: OF := 0
.address 0x41459E
0000b24c: CF := 0
.address 0x41459E
0000b24f: AF := unknown[bits]:u1
.address 0x41459E
0000b252: PF := ~low:1[let $1 = #1572 >> 4 ^ #1572 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41459E
0000b255: SF := high:1[#1572]
.address 0x41459E
0000b258: ZF := 0 = #1572
.address 0x4145A1
0000b25f: RDX := pad:64[pad:32[low:8[RDX]]]
.address 0x4145A4
0000b269: when SF goto %0000b263
00044d24: goto %0000b2a3

.address 0x4145A6
0000b2a3: 
.address 0x4145A6
0000b2ae: #1577 := RDX
.address 0x4145A6
0000b2b1: OF := 0
.address 0x4145A6
0000b2b4: CF := 0
.address 0x4145A6
0000b2b7: AF := unknown[bits]:u1
.address 0x4145A6
0000b2ba: PF := ~low:1[let $1 = #1577 >> 4 ^ #1577 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4145A6
0000b2bd: SF := high:1[#1577]
.address 0x4145A6
0000b2c0: ZF := 0 = #1577
.address 0x4145A9
0000b2ca: when ZF goto %0000b2c4
00044d25: goto %0000b263

.address 0x41456F
0000b79c: 
.address 0x41456F
0000b7a1: RAX := RCX
.address 0x414572
0000b7af: #1624 := RAX
.address 0x414572
0000b7b2: RAX := RAX >> 1
.address 0x414572
0000b7b5: CF := high:1[#1624 << 0x3F]
.address 0x414572
0000b7b8: SF := high:1[RAX]
.address 0x414572
0000b7bb: ZF := 0 = RAX
.address 0x414572
0000b7be: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414572
0000b7c1: AF := unknown[bits]:u1
.address 0x414572
0000b7c4: OF := high:1[#1624]
.address 0x414575
0000b7cb: RCX := low:64[RAX + RCX + 1]
00044d26: goto %0000b2c4

.address 0x41457A
0000b2c4: 
.address 0x41457A
0000b2d4: mem := mem with [RSI, el]:u64 <- RCX
.address 0x41457D
0000b2e2: #1579 := extend:128[RCX] * extend:128[R9]
.address 0x41457D
0000b2e5: RCX := low:64[#1579]
.address 0x41457D
0000b2e8: OF := #1579 <> extend:128[RCX]
.address 0x41457D
0000b2eb: CF := #1579 <> extend:128[RCX]
.address 0x41457D
0000b2ee: PF := unknown[bits]:u1
.address 0x41457D
0000b2f1: SF := unknown[bits]:u1
.address 0x41457D
0000b2f4: ZF := unknown[bits]:u1
.address 0x41457D
0000b2f7: AF := unknown[bits]:u1
.address 0x414581
0000b2fe: RSI := RCX
.address 0x414584
0000b305: call @sub_4144e0 with noreturn

.address 0x414539
0000b800: 
.address 0x414539
0000b805: call @sub_4144e0 with noreturn

.address 0x414500
0000afac: 
.address 0x414500
0000afbd: RBX := mem[RSP, el]:u64
.address 0x414500
0000afc0: RSP := RSP + 8
.address 0x414501
0000afc9: #1552 := mem[RSP, el]:u64
.address 0x414501
0000afcc: RSP := RSP + 8
.address 0x414501
0000afd0: call #1552 with noreturn


.address 0x4145E0
00044503: sub sub_4145e0()
.address 0x4145E0
0000b310: 
.address 0x4145E0
0000b31b: #1580 := RDI
.address 0x4145E0
0000b31e: OF := 0
.address 0x4145E0
0000b321: CF := 0
.address 0x4145E0
0000b324: AF := unknown[bits]:u1
.address 0x4145E0
0000b327: PF := ~low:1[let $1 = #1580 >> 4 ^ #1580 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4145E0
0000b32a: SF := high:1[#1580]
.address 0x4145E0
0000b32d: ZF := 0 = #1580
.address 0x4145E3
0000b334: RAX := mem[RSI, el]:u64
.address 0x4145E6
0000b33e: when ZF goto %0000b338
00044d27: goto %0000b68f

.address 0x414610
0000b338: 
.address 0x414610
0000b34e: #1582 := RAX
.address 0x414610
0000b351: OF := 0
.address 0x414610
0000b354: CF := 0
.address 0x414610
0000b357: AF := unknown[bits]:u1
.address 0x414610
0000b35a: PF := ~low:1[let $1 = #1582 >> 4 ^ #1582 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414610
0000b35d: SF := high:1[#1582]
.address 0x414610
0000b360: ZF := 0 = #1582
.address 0x414613
0000b367: RDX := 0x80
.address 0x414618
0000b36e: RAX := if ZF then RDX else RAX
.address 0x41461C
0000b37b: #1584 := RAX
.address 0x41461C
0000b37e: OF := 0
.address 0x41461C
0000b381: CF := 0
.address 0x41461C
0000b384: AF := unknown[bits]:u1
.address 0x41461C
0000b387: PF := ~low:1[let $1 = #1584 >> 4 ^ #1584 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41461C
0000b38a: SF := high:1[#1584]
.address 0x41461C
0000b38d: ZF := 0 = #1584
.address 0x41461F
0000b397: when ~SF goto %0000b391
00044d28: goto %0000b3b4

.address 0x4145E8
0000b68f: 
.address 0x4145E8
0000b694: RDX := 0x5555555555555553
.address 0x4145F2
0000b6a1: #1613 := RAX - RDX
.address 0x4145F2
0000b6a4: CF := RAX < RDX
.address 0x4145F2
0000b6a7: OF := high:1[(RAX ^ RDX) & (RAX ^ #1613)]
.address 0x4145F2
0000b6aa: AF := 0x10 = (0x10 & (#1613 ^ RAX ^ RDX))
.address 0x4145F2
0000b6ad: PF := ~low:1[let $1 = #1613 >> 4 ^ #1613 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4145F2
0000b6b0: SF := high:1[#1613]
.address 0x4145F2
0000b6b3: ZF := 0 = #1613
.address 0x4145F5
0000b6bc: when ~(CF | ZF) goto %0000b3b4
00044d29: goto %0000b6c2

.address 0x414621
0000b3b4: 
.address 0x414621
0000b3c0: #1586 := RSP
.address 0x414621
0000b3c3: RSP := RSP - 8
.address 0x414621
0000b3c6: CF := #1586 < 8
.address 0x414621
0000b3c9: OF := high:1[(#1586 ^ 8) & (#1586 ^ RSP)]
.address 0x414621
0000b3cc: AF := 0x10 = (0x10 & (RSP ^ #1586 ^ 8))
.address 0x414621
0000b3cf: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414621
0000b3d2: SF := high:1[RSP]
.address 0x414621
0000b3d5: ZF := 0 = RSP
.address 0x414625
0000b3de: RSP := RSP - 8
.address 0x414625
0000b3e1: mem := mem with [RSP, el]:u64 <- 0x41462A
.address 0x414625
0000b3e4: call @sub_4146d0 with return %0000b3e6

.address 0x41462A
0000b3e6: 
.address 0x414630
0000b3f0: #1589 := RBX
.address 0x414630
0000b3f3: RSP := RSP - 8
.address 0x414630
0000b3f6: mem := mem with [RSP, el]:u64 <- #1589
.address 0x414631
0000b3fd: RBX := RDI
.address 0x414634
0000b406: RSP := RSP - 8
.address 0x414634
0000b409: mem := mem with [RSP, el]:u64 <- 0x414639
.address 0x414634
0000b40c: call @sub_414480 with return %0000b40e

.address 0x414639
0000b40e: 
.address 0x414639
0000b413: RDX := RBX
.address 0x41463C
0000b420: RSI := 0
.address 0x41463C
0000b423: AF := unknown[bits]:u1
.address 0x41463C
0000b426: ZF := 1
.address 0x41463C
0000b429: PF := 1
.address 0x41463C
0000b42c: OF := 0
.address 0x41463C
0000b42f: CF := 0
.address 0x41463C
0000b432: SF := 0
.address 0x41463E
0000b439: RDI := RAX
.address 0x414641
0000b441: RBX := mem[RSP, el]:u64
.address 0x414641
0000b444: RSP := RSP + 8
.address 0x414642
0000b44b: call @sub_403a60 with noreturn

.address 0x4145F7
0000b6c2: 
.address 0x4145F7
0000b6c7: RDX := RAX
.address 0x4145FA
0000b6d5: #1615 := RDX
.address 0x4145FA
0000b6d8: RDX := RDX >> 1
.address 0x4145FA
0000b6db: CF := high:1[#1615 << 0x3F]
.address 0x4145FA
0000b6de: SF := high:1[RDX]
.address 0x4145FA
0000b6e1: ZF := 0 = RDX
.address 0x4145FA
0000b6e4: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4145FA
0000b6e7: AF := unknown[bits]:u1
.address 0x4145FA
0000b6ea: OF := high:1[#1615]
.address 0x4145FD
0000b6f1: RAX := low:64[RDX + RAX + 1]
00044d2a: goto %0000b391

.address 0x414602
0000b391: 
.address 0x414602
0000b3a1: mem := mem with [RSI, el]:u64 <- RAX
.address 0x414605
0000b3a8: RSI := RAX
.address 0x414608
0000b3af: call @sub_4144e0 with noreturn


.address 0x414650
00044508: sub sub_414650()
.address 0x414650
0000b450: 
.address 0x414650
0000b455: RAX := RDI
.address 0x414653
0000b463: #1590 := RSP
.address 0x414653
0000b466: RSP := RSP - 8
.address 0x414653
0000b469: CF := #1590 < 8
.address 0x414653
0000b46c: OF := high:1[(#1590 ^ 8) & (#1590 ^ RSP)]
.address 0x414653
0000b46f: AF := 0x10 = (0x10 & (RSP ^ #1590 ^ 8))
.address 0x414653
0000b472: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414653
0000b475: SF := high:1[RSP]
.address 0x414653
0000b478: ZF := 0 = RSP
.address 0x414657
0000b487: #1593 := pad:128[RAX] * pad:128[RSI]
.address 0x414657
0000b48a: RAX := extract:63:0[#1593]
.address 0x414657
0000b48d: RDX := extract:127:64[#1593]
.address 0x414657
0000b490: OF := extract:127:64[#1593] <> 0
.address 0x414657
0000b493: CF := extract:127:64[#1593] <> 0
.address 0x414657
0000b496: SF := unknown[bits]:u1
.address 0x414657
0000b499: ZF := unknown[bits]:u1
.address 0x414657
0000b49c: AF := unknown[bits]:u1
.address 0x414657
0000b49f: PF := unknown[bits]:u1
.address 0x41465A
0000b4a6: RDX := extract:63:8[RDX].pad:8[OF]
.address 0x41465D
0000b4b3: #1594 := RAX
.address 0x41465D
0000b4b6: OF := 0
.address 0x41465D
0000b4b9: CF := 0
.address 0x41465D
0000b4bc: AF := unknown[bits]:u1
.address 0x41465D
0000b4bf: PF := ~low:1[let $1 = #1594 >> 4 ^ #1594 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41465D
0000b4c2: SF := high:1[#1594]
.address 0x41465D
0000b4c5: ZF := 0 = #1594
.address 0x414660
0000b4cf: when SF goto %0000b4c9
00044d2b: goto %0000b5ee

.address 0x414662
0000b5ee: 
.address 0x414662
0000b5f3: RDX := pad:64[pad:32[low:8[RDX]]]
.address 0x414665
0000b600: #1605 := RDX
.address 0x414665
0000b603: OF := 0
.address 0x414665
0000b606: CF := 0
.address 0x414665
0000b609: AF := unknown[bits]:u1
.address 0x414665
0000b60c: PF := ~low:1[let $1 = #1605 >> 4 ^ #1605 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414665
0000b60f: SF := high:1[#1605]
.address 0x414665
0000b612: ZF := 0 = #1605
.address 0x414668
0000b61b: when ~ZF goto %0000b4c9
00044d2c: goto %0000b621

.address 0x41466A
0000b621: 
.address 0x41466A
0000b628: RSP := RSP - 8
.address 0x41466A
0000b62b: mem := mem with [RSP, el]:u64 <- 0x41466F
.address 0x41466A
0000b62e: call @sub_403b00 with return %0000b630

.address 0x41466F
0000b630: 
.address 0x41466F
0000b63b: #1607 := RAX
.address 0x41466F
0000b63e: OF := 0
.address 0x41466F
0000b641: CF := 0
.address 0x41466F
0000b644: AF := unknown[bits]:u1
.address 0x41466F
0000b647: PF := ~low:1[let $1 = #1607 >> 4 ^ #1607 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41466F
0000b64a: SF := high:1[#1607]
.address 0x41466F
0000b64d: ZF := 0 = #1607
.address 0x414672
0000b656: when ZF goto %0000b4c9
00044d2d: goto %0000b65c

.address 0x414679
0000b4c9: 
.address 0x414679
0000b4db: RSP := RSP - 8
.address 0x414679
0000b4de: mem := mem with [RSP, el]:u64 <- 0x41467E
.address 0x414679
0000b4e1: call @sub_4146d0 with return %0000b4e3

.address 0x41467E
0000b4e3: 
00044d2e: call @sub_414680 with noreturn

.address 0x414674
0000b65c: 
.address 0x414674
0000b668: #1609 := RSP
.address 0x414674
0000b66b: RSP := RSP + 8
.address 0x414674
0000b66e: CF := RSP < #1609
.address 0x414674
0000b671: OF := ~high:1[#1609] & (high:1[#1609] | high:1[RSP]) & ~(high:1[#1609] & high:1[RSP])
.address 0x414674
0000b674: AF := 0x10 = (0x10 & (RSP ^ #1609 ^ 8))
.address 0x414674
0000b677: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414674
0000b67a: SF := high:1[RSP]
.address 0x414674
0000b67d: ZF := 0 = RSP
.address 0x414678
0000b686: #1612 := mem[RSP, el]:u64
.address 0x414678
0000b689: RSP := RSP + 8
.address 0x414678
0000b68d: call #1612 with noreturn


.address 0x414680
0004450d: sub sub_414680()
.address 0x414680
0000b4e6: 
.address 0x414680
0000b4ed: #1596 := RBP
.address 0x414680
0000b4f0: RSP := RSP - 8
.address 0x414680
0000b4f3: mem := mem with [RSP, el]:u64 <- #1596
.address 0x414681
0000b4fc: #1597 := RBX
.address 0x414681
0000b4ff: RSP := RSP - 8
.address 0x414681
0000b502: mem := mem with [RSP, el]:u64 <- #1597
.address 0x414682
0000b509: RBP := RDI
.address 0x414685
0000b510: RDI := RSI
.address 0x414688
0000b517: RBX := RSI
.address 0x41468B
0000b525: #1598 := RSP
.address 0x41468B
0000b528: RSP := RSP - 8
.address 0x41468B
0000b52b: CF := #1598 < 8
.address 0x41468B
0000b52e: OF := high:1[(#1598 ^ 8) & (#1598 ^ RSP)]
.address 0x41468B
0000b531: AF := 0x10 = (0x10 & (RSP ^ #1598 ^ 8))
.address 0x41468B
0000b534: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41468B
0000b537: SF := high:1[RSP]
.address 0x41468B
0000b53a: ZF := 0 = RSP
.address 0x41468F
0000b543: RSP := RSP - 8
.address 0x41468F
0000b546: mem := mem with [RSP, el]:u64 <- 0x414694
.address 0x41468F
0000b549: call @sub_414480 with return %0000b54b

.address 0x414694
0000b54b: 
.address 0x414694
0000b557: #1601 := RSP
.address 0x414694
0000b55a: RSP := RSP + 8
.address 0x414694
0000b55d: CF := RSP < #1601
.address 0x414694
0000b560: OF := ~high:1[#1601] & (high:1[#1601] | high:1[RSP]) & ~(high:1[#1601] & high:1[RSP])
.address 0x414694
0000b563: AF := 0x10 = (0x10 & (RSP ^ #1601 ^ 8))
.address 0x414694
0000b566: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414694
0000b569: SF := high:1[RSP]
.address 0x414694
0000b56c: ZF := 0 = RSP
.address 0x414698
0000b573: RDX := RBX
.address 0x41469B
0000b57a: RSI := RBP
.address 0x41469E
0000b582: RBX := mem[RSP, el]:u64
.address 0x41469E
0000b585: RSP := RSP + 8
.address 0x41469F
0000b58d: RBP := mem[RSP, el]:u64
.address 0x41469F
0000b590: RSP := RSP + 8
.address 0x4146A0
0000b597: RDI := RAX
.address 0x4146A3
0000b59e: call @sub_403b80 with noreturn


.address 0x4146B0
0004450e: sub sub_4146b0()
.address 0x4146B0
0000b5a3: 
.address 0x4146B0
0000b5aa: #1604 := RBX
.address 0x4146B0
0000b5ad: RSP := RSP - 8
.address 0x4146B0
0000b5b0: mem := mem with [RSP, el]:u64 <- #1604
.address 0x4146B1
0000b5b7: RBX := RDI
.address 0x4146B4
0000b5c0: RSP := RSP - 8
.address 0x4146B4
0000b5c3: mem := mem with [RSP, el]:u64 <- 0x4146B9
.address 0x4146B4
0000b5c6: call @sub_403950 with return %0000b5c8

.address 0x4146B9
0000b5c8: 
.address 0x4146B9
0000b5cd: RDI := RBX
.address 0x4146BC
0000b5d4: RSI := low:64[RAX + 1]
.address 0x4146C0
0000b5dc: RBX := mem[RSP, el]:u64
.address 0x4146C0
0000b5df: RSP := RSP + 8
.address 0x4146C1
0000b5e6: call @sub_414680 with noreturn


.address 0x4146D0
0004450f: sub sub_4146d0()
.address 0x4146D0
00002c2f: 
.address 0x4146D0
00002c3f: RSI := 0x41AEEF
00044d2f: call @sub_4146d7 with noreturn


.address 0x4146D7
00044511: sub sub_4146d7()
.address 0x4146D7
00002c41: 
.address 0x4146D7
00002c4d: #408 := RSP
.address 0x4146D7
00002c50: RSP := RSP - 8
.address 0x4146D7
00002c53: CF := #408 < 8
.address 0x4146D7
00002c56: OF := high:1[(#408 ^ 8) & (#408 ^ RSP)]
.address 0x4146D7
00002c59: AF := 0x10 = (0x10 & (RSP ^ #408 ^ 8))
.address 0x4146D7
00002c5c: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4146D7
00002c5f: SF := high:1[RSP]
.address 0x4146D7
00002c62: ZF := 0 = RSP
.address 0x4146DB
00002c69: RDX := 5
.address 0x4146E0
00002c76: RDI := 0
.address 0x4146E0
00002c79: AF := unknown[bits]:u1
.address 0x4146E0
00002c7c: ZF := 1
.address 0x4146E0
00002c7f: PF := 1
.address 0x4146E0
00002c82: OF := 0
.address 0x4146E0
00002c85: CF := 0
.address 0x4146E0
00002c88: SF := 0
.address 0x4146E2
00002c91: RSP := RSP - 8
.address 0x4146E2
00002c94: mem := mem with [RSP, el]:u64 <- 0x4146E7
.address 0x4146E2
00002c97: call @sub_403930 with return %00002c99

.address 0x4146E7
00002c99: 
.address 0x4146E7
00002c9e: RDI := pad:64[mem[0x6201F8, el]:u32]
.address 0x4146ED
00002ca5: RDX := 0x41A2FC
.address 0x4146F4
00002cac: RCX := RAX
.address 0x4146F7
00002cb9: RSI := 0
.address 0x4146F7
00002cbc: AF := unknown[bits]:u1
.address 0x4146F7
00002cbf: ZF := 1
.address 0x4146F7
00002cc2: PF := 1
.address 0x4146F7
00002cc5: OF := 0
.address 0x4146F7
00002cc8: CF := 0
.address 0x4146F7
00002ccb: SF := 0
.address 0x4146F9
00002cd8: RAX := 0
.address 0x4146F9
00002cdb: AF := unknown[bits]:u1
.address 0x4146F9
00002cde: ZF := 1
.address 0x4146F9
00002ce1: PF := 1
.address 0x4146F9
00002ce4: OF := 0
.address 0x4146F9
00002ce7: CF := 0
.address 0x4146F9
00002cea: SF := 0
.address 0x4146FB
00002cf3: RSP := RSP - 8
.address 0x4146FB
00002cf6: mem := mem with [RSP, el]:u64 <- 0x414700
.address 0x4146FB
00002cf9: call @sub_403d20 with return %00002cfb

.address 0x414700
00002cfb: 
.address 0x414700
00002d02: RSP := RSP - 8
.address 0x414700
00002d05: mem := mem with [RSP, el]:u64 <- 0x414705
.address 0x414700
00002d08: call @sub_4037e0 with return %00002d0a

.address 0x414705
00002d0a: 
00044d30: call @sub_414710 with noreturn


.address 0x414710
00044513: sub sub_414710()
.address 0x414710
00002d10: 
.address 0x414710
00002d17: #411 := R15
.address 0x414710
00002d1a: RSP := RSP - 8
.address 0x414710
00002d1d: mem := mem with [RSP, el]:u64 <- #411
.address 0x414712
00002d26: #412 := R14
.address 0x414712
00002d29: RSP := RSP - 8
.address 0x414712
00002d2c: mem := mem with [RSP, el]:u64 <- #412
.address 0x414714
00002d33: R15 := RCX
.address 0x414717
00002d3c: #413 := R13
.address 0x414717
00002d3f: RSP := RSP - 8
.address 0x414717
00002d42: mem := mem with [RSP, el]:u64 <- #413
.address 0x414719
00002d4b: #414 := R12
.address 0x414719
00002d4e: RSP := RSP - 8
.address 0x414719
00002d51: mem := mem with [RSP, el]:u64 <- #414
.address 0x41471B
00002d58: R14 := RDX
.address 0x41471E
00002d61: #415 := RBP
.address 0x41471E
00002d64: RSP := RSP - 8
.address 0x41471E
00002d67: mem := mem with [RSP, el]:u64 <- #415
.address 0x41471F
00002d70: #416 := RBX
.address 0x41471F
00002d73: RSP := RSP - 8
.address 0x41471F
00002d76: mem := mem with [RSP, el]:u64 <- #416
.address 0x414720
00002d7d: RDX := pad:64[low:32[RSI]]
.address 0x414722
00002d8a: RSI := 0
.address 0x414722
00002d8d: AF := unknown[bits]:u1
.address 0x414722
00002d90: ZF := 1
.address 0x414722
00002d93: PF := 1
.address 0x414722
00002d96: OF := 0
.address 0x414722
00002d99: CF := 0
.address 0x414722
00002d9c: SF := 0
.address 0x414724
00002da3: R12 := RDI
.address 0x414727
00002daa: R13 := R9
.address 0x41472A
00002db8: #417 := RSP
.address 0x41472A
00002dbb: RSP := RSP - 0x18
.address 0x41472A
00002dbe: CF := #417 < 0x18
.address 0x41472A
00002dc1: OF := high:1[(#417 ^ 0x18) & (#417 ^ RSP)]
.address 0x41472A
00002dc4: AF := 0x10 = (0x10 & (RSP ^ #417 ^ 0x18))
.address 0x41472A
00002dc7: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41472A
00002dca: SF := high:1[RSP]
.address 0x41472A
00002dcd: ZF := 0 = RSP
.address 0x41472E
00002dd4: RCX := RSP
.address 0x414731
00002ddb: RBX := pad:64[mem[RSP + 0x50, el]:u32]
.address 0x414735
00002de2: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x41473E
00002de9: mem := mem with [RSP + 8, el]:u64 <- RAX
.address 0x414743
00002df6: RAX := 0
.address 0x414743
00002df9: AF := unknown[bits]:u1
.address 0x414743
00002dfc: ZF := 1
.address 0x414743
00002dff: PF := 1
.address 0x414743
00002e02: OF := 0
.address 0x414743
00002e05: CF := 0
.address 0x414743
00002e08: SF := 0
.address 0x414745
00002e12: RSP := RSP - 8
.address 0x414745
00002e15: mem := mem with [RSP, el]:u64 <- 0x41474A
.address 0x414745
00002e18: call @sub_414e20 with return %000240f5

.address 0x41474A
000240f5: 
.address 0x41474A
00024100: #5069 := low:32[RAX]
.address 0x41474A
00024103: OF := 0
.address 0x41474A
00024106: CF := 0
.address 0x41474A
00024109: AF := unknown[bits]:u1
.address 0x41474A
0002410c: PF := ~low:1[let $1 = #5069 >> 4 ^ #5069 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41474A
0002410f: SF := high:1[#5069]
.address 0x41474A
00024112: ZF := 0 = #5069
.address 0x41474C
0002411c: when ~ZF goto %00024116
00044d31: goto %000243db

.address 0x4147E0
00024116: 
.address 0x4147E0
00024126: RBP := pad:64[low:32[RAX]]
.address 0x4147E2
0002412f: RSP := RSP - 8
.address 0x4147E2
00024132: mem := mem with [RSP, el]:u64 <- 0x4147E7
.address 0x4147E2
00024135: call @sub_4037f0 with return %00024137

.address 0x4147E7
00024137: 
.address 0x4147E7
00024142: #5071 := low:32[RBP] - 1
.address 0x4147E7
00024145: CF := low:32[RBP] < 1
.address 0x4147E7
00024148: OF := high:1[(low:32[RBP] ^ 1) & (low:32[RBP] ^ #5071)]
.address 0x4147E7
0002414b: AF := 0x10 = (0x10 & (#5071 ^ low:32[RBP] ^ 1))
.address 0x4147E7
0002414e: PF := ~low:1[let $1 = #5071 >> 4 ^ #5071 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4147E7
00024151: SF := high:1[#5071]
.address 0x4147E7
00024154: ZF := 0 = #5071
.address 0x4147EA
0002415b: R14 := RAX
.address 0x4147ED
00024165: when ZF goto %0002415f
00044d32: goto %0002439e

.address 0x414800
0002415f: 
.address 0x414800
0002416f: mem := mem with [RAX, el]:u32 <- 0x4B
.address 0x414806
00024177: goto %00024173

.address 0x4147EF
0002439e: 
.address 0x4147EF
000243a9: #5090 := low:32[RBP] - 3
.address 0x4147EF
000243ac: CF := low:32[RBP] < 3
.address 0x4147EF
000243af: OF := high:1[(low:32[RBP] ^ 3) & (low:32[RBP] ^ #5090)]
.address 0x4147EF
000243b2: AF := 0x10 = (0x10 & (#5090 ^ low:32[RBP] ^ 3))
.address 0x4147EF
000243b5: PF := ~low:1[let $1 = #5090 >> 4 ^ #5090 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4147EF
000243b8: SF := high:1[#5090]
.address 0x4147EF
000243bb: ZF := 0 = #5090
.address 0x4147F2
000243c4: when ~ZF goto %00024173
00044d33: goto %000243ca

.address 0x4147F4
000243ca: 
.address 0x4147F4
000243cf: mem := mem with [RAX, el]:u32 <- 0
.address 0x4147FA
000243d6: goto %00024173

.address 0x414752
000243db: 
.address 0x414752
000243e0: RBP := mem[RSP, el]:u64
.address 0x414756
000243ed: #5092 := RBP - R14
.address 0x414756
000243f0: CF := RBP < R14
.address 0x414756
000243f3: OF := high:1[(RBP ^ R14) & (RBP ^ #5092)]
.address 0x414756
000243f6: AF := 0x10 = (0x10 & (#5092 ^ RBP ^ R14))
.address 0x414756
000243f9: PF := ~low:1[let $1 = #5092 >> 4 ^ #5092 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414756
000243fc: SF := high:1[#5092]
.address 0x414756
000243ff: ZF := 0 = #5092
.address 0x414759
00024409: when CF goto %00024403
00044d34: goto %000244b3

.address 0x41475B
000244b3: 
.address 0x41475B
000244be: #5103 := RBP - R15
.address 0x41475B
000244c1: CF := RBP < R15
.address 0x41475B
000244c4: OF := high:1[(RBP ^ R15) & (RBP ^ #5103)]
.address 0x41475B
000244c7: AF := 0x10 = (0x10 & (#5103 ^ RBP ^ R15))
.address 0x41475B
000244ca: PF := ~low:1[let $1 = #5103 >> 4 ^ #5103 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41475B
000244cd: SF := high:1[#5103]
.address 0x41475B
000244d0: ZF := 0 = #5103
.address 0x41475E
000244d9: when CF | ZF goto %00024240
00044d35: goto %00024403

.address 0x414760
00024403: 
.address 0x414760
00024415: RSP := RSP - 8
.address 0x414760
00024418: mem := mem with [RSP, el]:u64 <- 0x414765
.address 0x414760
0002441b: call @sub_4037f0 with return %0002441d

.address 0x414765
0002441d: 
.address 0x414765
00024428: #5094 := RBP - 0x40000000
.address 0x414765
0002442b: CF := RBP < 0x40000000
.address 0x414765
0002442e: OF := high:1[(RBP ^ 0x40000000) & (RBP ^ #5094)]
.address 0x414765
00024431: AF := 0x10 = (0x10 & (#5094 ^ RBP ^ 0x40000000))
.address 0x414765
00024434: PF := ~low:1[let $1 = #5094 >> 4 ^ #5094 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414765
00024437: SF := high:1[#5094]
.address 0x414765
0002443a: ZF := 0 = #5094
.address 0x41476C
00024441: R14 := RAX
.address 0x41476F
00024450: #5096 := low:32[RAX]
.address 0x41476F
00024453: #5097 := low:32[RAX]
.address 0x41476F
00024456: RAX := pad:64[#5097 - #5096 + pad:32[CF]]
.address 0x41476F
00024459: OF := high:1[(#5096 ^ #5097) & (#5097 ^ low:32[RAX])]
.address 0x41476F
0002445c: CF := #5097 < #5096 + pad:32[CF] | #5096 + pad:32[CF] < #5096
.address 0x41476F
0002445f: AF := 0x10 = (0x10 & (low:32[RAX] ^ #5096 ^ #5097))
.address 0x41476F
00024462: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41476F
00024465: SF := high:1[low:32[RAX]]
.address 0x41476F
00024468: ZF := 0 = low:32[RAX]
.address 0x414771
00024475: RAX := pad:64[low:32[RAX] & 0xFFFFFFD7]
.address 0x414771
00024478: OF := 0
.address 0x414771
0002447b: CF := 0
.address 0x414771
0002447e: AF := unknown[bits]:u1
.address 0x414771
00024481: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414771
00024484: SF := high:1[low:32[RAX]]
.address 0x414771
00024487: ZF := 0 = low:32[RAX]
.address 0x414774
00024495: #5100 := low:32[RAX]
.address 0x414774
00024498: RAX := pad:64[low:32[RAX] + 0x4B]
.address 0x414774
0002449b: CF := low:32[RAX] < #5100
.address 0x414774
0002449e: OF := ~high:1[#5100] & (high:1[#5100] | high:1[low:32[RAX]]) & ~(
high:1[#5100] & high:1[low:32[RAX]])
.address 0x414774
000244a1: AF := 0x10 = (0x10 & (low:32[RAX] ^ #5100 ^ 0x4B))
.address 0x414774
000244a4: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414774
000244a7: SF := high:1[low:32[RAX]]
.address 0x414774
000244aa: ZF := 0 = low:32[RAX]
.address 0x414777
000244b1: mem := mem with [R14, el]:u32 <- low:32[RAX]
00044d36: goto %00024173

.address 0x41477A
00024173: 
.address 0x41477A
0002417d: RDI := R12
.address 0x41477D
00024186: RSP := RSP - 8
.address 0x41477D
00024189: mem := mem with [RSP, el]:u64 <- 0x414782
.address 0x41477D
0002418c: call @sub_413ce0 with return %0002418e

.address 0x414782
0002418e: 
.address 0x414782
00024193: RSI := pad:64[mem[R14, el]:u32]
.address 0x414785
0002419a: R8 := RAX
.address 0x414788
000241a1: RAX := 0
.address 0x41478D
000241a8: RDX := 0x417DD8
.address 0x414794
000241af: RCX := R13
.address 0x414797
000241bc: #5073 := low:32[RSI] - 0x16
.address 0x414797
000241bf: CF := low:32[RSI] < 0x16
.address 0x414797
000241c2: OF := high:1[(low:32[RSI] ^ 0x16) & (low:32[RSI] ^ #5073)]
.address 0x414797
000241c5: AF := 0x10 = (0x10 & (#5073 ^ low:32[RSI] ^ 0x16))
.address 0x414797
000241c8: PF := ~low:1[let $1 = #5073 >> 4 ^ #5073 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414797
000241cb: SF := high:1[#5073]
.address 0x414797
000241ce: ZF := 0 = #5073
.address 0x41479A
000241d5: RSI := pad:64[if ZF then low:32[RAX] else low:32[RSI]]
.address 0x41479D
000241e2: #5075 := low:32[RBX]
.address 0x41479D
000241e5: OF := 0
.address 0x41479D
000241e8: CF := 0
.address 0x41479D
000241eb: AF := unknown[bits]:u1
.address 0x41479D
000241ee: PF := ~low:1[let $1 = #5075 >> 4 ^ #5075 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41479D
000241f1: SF := high:1[#5075]
.address 0x41479D
000241f4: ZF := 0 = #5075
.address 0x41479F
000241fb: RAX := 1
.address 0x4147A4
00024202: RBX := pad:64[if ZF then low:32[RAX] else low:32[RBX]]
.address 0x4147A7
0002420f: RAX := 0
.address 0x4147A7
00024212: AF := unknown[bits]:u1
.address 0x4147A7
00024215: ZF := 1
.address 0x4147A7
00024218: PF := 1
.address 0x4147A7
0002421b: OF := 0
.address 0x4147A7
0002421e: CF := 0
.address 0x4147A7
00024221: SF := 0
.address 0x4147A9
00024228: RDI := pad:64[low:32[RBX]]
.address 0x4147AB
00024231: RSP := RSP - 8
.address 0x4147AB
00024234: mem := mem with [RSP, el]:u64 <- 0x4147B0
.address 0x4147AB
00024237: call @sub_403d20 with return %00024239

.address 0x4147B0
00024239: 
.address 0x4147B0
0002423e: RBP := mem[RSP, el]:u64
00044d37: goto %00024240

.address 0x4147B4
00024240: 
.address 0x4147B4
00024245: RDX := mem[RSP + 8, el]:u64
.address 0x4147B9
00024252: RDX := RDX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x4147B9
00024255: OF := 0
.address 0x4147B9
00024258: CF := 0
.address 0x4147B9
0002425b: AF := unknown[bits]:u1
.address 0x4147B9
0002425e: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4147B9
00024261: SF := high:1[RDX]
.address 0x4147B9
00024264: ZF := 0 = RDX
.address 0x4147C2
0002426b: RAX := RBP
.address 0x4147C5
00024275: when ~ZF goto %0002426f
00044d38: goto %00024326

.address 0x41480B
0002426f: 
.address 0x41480B
00024281: RSP := RSP - 8
.address 0x41480B
00024284: mem := mem with [RSP, el]:u64 <- 0x414810
.address 0x41480B
00024287: call @sub_403970 with return %00024289

.address 0x414810
00024289: 
.address 0x414810
00024295: #5078 := RSP
.address 0x414810
00024298: RSP := RSP - 0x10
.address 0x414810
0002429b: CF := #5078 < 0x10
.address 0x414810
0002429e: OF := high:1[(#5078 ^ 0x10) & (#5078 ^ RSP)]
.address 0x414810
000242a1: AF := 0x10 = (0x10 & (RSP ^ #5078 ^ 0x10))
.address 0x414810
000242a4: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414810
000242a7: SF := high:1[RSP]
.address 0x414810
000242aa: ZF := 0 = RSP
.address 0x414814
000242b3: #5081 := R9
.address 0x414814
000242b6: RSP := RSP - 8
.address 0x414814
000242b9: mem := mem with [RSP, el]:u64 <- #5081
.address 0x414816
000242c0: R9 := R8
.address 0x414819
000242c7: R8 := RCX
.address 0x41481C
000242ce: RCX := RDX
.address 0x41481F
000242d5: RDX := RSI
.address 0x414822
000242dc: RSI := 0xA
.address 0x414827
000242e5: RSP := RSP - 8
.address 0x414827
000242e8: mem := mem with [RSP, el]:u64 <- 0x41482C
.address 0x414827
000242eb: call @sub_414710 with return %000242ed

.address 0x41482C
000242ed: 
.address 0x41482C
000242f9: #5082 := RSP
.address 0x41482C
000242fc: RSP := RSP + 0x18
.address 0x41482C
000242ff: CF := RSP < #5082
.address 0x41482C
00024302: OF := ~high:1[#5082] & (high:1[#5082] | high:1[RSP]) & ~(high:1[#5082] & high:1[RSP])
.address 0x41482C
00024305: AF := 0x10 = (0x10 & (RSP ^ #5082 ^ 0x18))
.address 0x41482C
00024308: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41482C
0002430b: SF := high:1[RSP]
.address 0x41482C
0002430e: ZF := 0 = RSP
.address 0x414830
00024317: #5085 := mem[RSP, el]:u64
.address 0x414830
0002431a: RSP := RSP + 8
.address 0x414830
0002431e: call #5085 with noreturn

.address 0x4147C7
00024326: 
.address 0x4147C7
00024332: #5086 := RSP
.address 0x4147C7
00024335: RSP := RSP + 0x18
.address 0x4147C7
00024338: CF := RSP < #5086
.address 0x4147C7
0002433b: OF := ~high:1[#5086] & (high:1[#5086] | high:1[RSP]) & ~(high:1[#5086] & high:1[RSP])
.address 0x4147C7
0002433e: AF := 0x10 = (0x10 & (RSP ^ #5086 ^ 0x18))
.address 0x4147C7
00024341: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4147C7
00024344: SF := high:1[RSP]
.address 0x4147C7
00024347: ZF := 0 = RSP
.address 0x4147CB
0002434f: RBX := mem[RSP, el]:u64
.address 0x4147CB
00024352: RSP := RSP + 8
.address 0x4147CC
0002435a: RBP := mem[RSP, el]:u64
.address 0x4147CC
0002435d: RSP := RSP + 8
.address 0x4147CD
00024365: R12 := mem[RSP, el]:u64
.address 0x4147CD
00024368: RSP := RSP + 8
.address 0x4147CF
00024370: R13 := mem[RSP, el]:u64
.address 0x4147CF
00024373: RSP := RSP + 8
.address 0x4147D1
0002437b: R14 := mem[RSP, el]:u64
.address 0x4147D1
0002437e: RSP := RSP + 8
.address 0x4147D3
00024386: R15 := mem[RSP, el]:u64
.address 0x4147D3
00024389: RSP := RSP + 8
.address 0x4147D5
00024392: #5089 := mem[RSP, el]:u64
.address 0x4147D5
00024395: RSP := RSP + 8
.address 0x4147D5
00024399: call #5089 with noreturn


.address 0x414840
0004451c: sub sub_414840()
.address 0x414840
000126c4: 
.address 0x414840
000126d6: #2433 := RBX
.address 0x414840
000126d9: RSP := RSP - 8
.address 0x414840
000126dc: mem := mem with [RSP, el]:u64 <- #2433
.address 0x414841
000126e9: RSI := 0
.address 0x414841
000126ec: AF := unknown[bits]:u1
.address 0x414841
000126ef: ZF := 1
.address 0x414841
000126f2: PF := 1
.address 0x414841
000126f5: OF := 0
.address 0x414841
000126f8: CF := 0
.address 0x414841
000126fb: SF := 0
.address 0x414843
00012708: RDI := 0
.address 0x414843
0001270b: AF := unknown[bits]:u1
.address 0x414843
0001270e: ZF := 1
.address 0x414843
00012711: PF := 1
.address 0x414843
00012714: OF := 0
.address 0x414843
00012717: CF := 0
.address 0x414843
0001271a: SF := 0
.address 0x414845
00012723: RSP := RSP - 8
.address 0x414845
00012726: mem := mem with [RSP, el]:u64 <- 0x41484A
.address 0x414845
00012729: call @sub_403a90 with return %0001272b

.address 0x41484A
0001272b: 
.address 0x41484A
00012736: #2434 := RAX
.address 0x41484A
00012739: OF := 0
.address 0x41484A
0001273c: CF := 0
.address 0x41484A
0001273f: AF := unknown[bits]:u1
.address 0x41484A
00012742: PF := ~low:1[let $1 = #2434 >> 4 ^ #2434 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41484A
00012745: SF := high:1[#2434]
.address 0x41484A
00012748: ZF := 0 = #2434
.address 0x41484D
0001274f: RBX := RAX
.address 0x414850
00012759: when ZF goto %00012753
00044d39: goto %0001278e

.address 0x414860
00012753: 
.address 0x414860
00012765: RSP := RSP - 8
.address 0x414860
00012768: mem := mem with [RSP, el]:u64 <- 0x414865
.address 0x414860
0001276b: call @sub_4037f0 with return %0001276d

.address 0x414865
0001276d: 
.address 0x414865
00012778: #2436 := mem[RAX, el]:u32 - 0xC
.address 0x414865
0001277b: CF := mem[RAX, el]:u32 < 0xC
.address 0x414865
0001277e: OF := high:1[(mem[RAX, el]:u32 ^ 0xC) & (mem[RAX, el]:u32 ^ #2436)]
.address 0x414865
00012781: AF := 0x10 = (0x10 & (#2436 ^ mem[RAX, el]:u32 ^ 0xC))
.address 0x414865
00012784: PF := ~low:1[let $1 = #2436 >> 4 ^ #2436 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414865
00012787: SF := high:1[#2436]
.address 0x414865
0001278a: ZF := 0 = #2436
.address 0x414868
00012794: when ~ZF goto %0001278e
00044d3a: goto %000127be

.address 0x41486A
000127be: 
.address 0x41486A
000127c5: RSP := RSP - 8
.address 0x41486A
000127c8: mem := mem with [RSP, el]:u64 <- 0x41486F
.address 0x41486A
000127cb: call @sub_4146d0 with return %000127cd

.address 0x41486F
000127cd: 
00044d3b: call @sub_414870 with noreturn

.address 0x414852
0001278e: 
.address 0x414852
0001279e: RAX := RBX
.address 0x414855
000127a6: RBX := mem[RSP, el]:u64
.address 0x414855
000127a9: RSP := RSP + 8
.address 0x414856
000127b2: #2438 := mem[RSP, el]:u64
.address 0x414856
000127b5: RSP := RSP + 8
.address 0x414856
000127b9: call #2438 with noreturn


.address 0x414870
00044520: sub sub_414870()
.address 0x414870
000127d0: 
.address 0x414870
000127d7: #2439 := R14
.address 0x414870
000127da: RSP := RSP - 8
.address 0x414870
000127dd: mem := mem with [RSP, el]:u64 <- #2439
.address 0x414872
000127e6: #2440 := R13
.address 0x414872
000127e9: RSP := RSP - 8
.address 0x414872
000127ec: mem := mem with [RSP, el]:u64 <- #2440
.address 0x414874
000127f3: R13 := 0x1000401001
.address 0x41487E
000127fc: #2441 := R12
.address 0x41487E
000127ff: RSP := RSP - 8
.address 0x41487E
00012802: mem := mem with [RSP, el]:u64 <- #2441
.address 0x414880
0001280b: #2442 := RBP
.address 0x414880
0001280e: RSP := RSP - 8
.address 0x414880
00012811: mem := mem with [RSP, el]:u64 <- #2442
.address 0x414881
0001281a: #2443 := RBX
.address 0x414881
0001281d: RSP := RSP - 8
.address 0x414881
00012820: mem := mem with [RSP, el]:u64 <- #2443
.address 0x414882
0001282d: RBX := 0
.address 0x414882
00012830: AF := unknown[bits]:u1
.address 0x414882
00012833: ZF := 1
.address 0x414882
00012836: PF := 1
.address 0x414882
00012839: OF := 0
.address 0x414882
0001283c: CF := 0
.address 0x414882
0001283f: SF := 0
.address 0x414884
0001284d: #2444 := RSP
.address 0x414884
00012850: RSP := RSP - 0x10
.address 0x414884
00012853: CF := #2444 < 0x10
.address 0x414884
00012856: OF := high:1[(#2444 ^ 0x10) & (#2444 ^ RSP)]
.address 0x414884
00012859: AF := 0x10 = (0x10 & (RSP ^ #2444 ^ 0x10))
.address 0x414884
0001285c: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414884
0001285f: SF := high:1[RSP]
.address 0x414884
00012862: ZF := 0 = RSP
.address 0x414888
00012869: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x414891
00012870: mem := mem with [RSP + 8, el]:u64 <- RAX
.address 0x414896
0001287d: RAX := 0
.address 0x414896
00012880: AF := unknown[bits]:u1
.address 0x414896
00012883: ZF := 1
.address 0x414896
00012886: PF := 1
.address 0x414896
00012889: OF := 0
.address 0x414896
0001288c: CF := 0
.address 0x414896
0001288f: SF := 0
.address 0x414898
00012896: mem := mem with [RSP, el]:u64 <- 0x22
.address 0x4148A0
0001289d: R12 := RSP
.address 0x4148A3
000128a6: RSP := RSP - 8
.address 0x4148A3
000128a9: mem := mem with [RSP, el]:u64 <- 0x4148A8
.address 0x4148A3
000128ac: call @sub_4037f0 with return %000128ae

.address 0x4148A8
000128ae: 
.address 0x4148A8
000128b3: RBP := RAX
00044d3c: goto %000128b8

.address 0x4148B0
000128b8: 
.address 0x4148B0
000128bd: RDI := RBX
.address 0x4148B3
000128c4: RSI := R12
.address 0x4148B6
000128cd: RSP := RSP - 8
.address 0x4148B6
000128d0: mem := mem with [RSP, el]:u64 <- 0x4148BB
.address 0x4148B6
000128d3: call @sub_4145e0 with return %000128d5

.address 0x4148BB
000128d5: 
.address 0x4148BB
000128da: RSI := mem[RSP, el]:u64
.address 0x4148BF
000128e1: RDI := RAX
.address 0x4148C2
000128e8: RBX := RAX
.address 0x4148C5
000128ef: R14 := low:64[RAX + RSI - 2]
.address 0x4148CA
000128fd: #2447 := RSI
.address 0x4148CA
00012900: RSI := RSI - 1
.address 0x4148CA
00012903: CF := #2447 < 1
.address 0x4148CA
00012906: OF := high:1[(#2447 ^ 1) & (#2447 ^ RSI)]
.address 0x4148CA
00012909: AF := 0x10 = (0x10 & (RSI ^ #2447 ^ 1))
.address 0x4148CA
0001290c: PF := ~low:1[let $1 = RSI >> 4 ^ RSI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4148CA
0001290f: SF := high:1[RSI]
.address 0x4148CA
00012912: ZF := 0 = RSI
.address 0x4148CE
00012919: mem := mem with [R14] <- 0
.address 0x4148D2
00012920: mem := mem with [RBP, el]:u32 <- 0
.address 0x4148D9
00012929: RSP := RSP - 8
.address 0x4148D9
0001292c: mem := mem with [RSP, el]:u64 <- 0x4148DE
.address 0x4148D9
0001292f: call @sub_403db0 with return %00012931

.address 0x4148DE
00012931: 
.address 0x4148DE
0001293c: #2450 := low:32[RAX]
.address 0x4148DE
0001293f: OF := 0
.address 0x4148DE
00012942: CF := 0
.address 0x4148DE
00012945: AF := unknown[bits]:u1
.address 0x4148DE
00012948: PF := ~low:1[let $1 = #2450 >> 4 ^ #2450 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4148DE
0001294b: SF := high:1[#2450]
.address 0x4148DE
0001294e: ZF := 0 = #2450
.address 0x4148E0
00012958: when ~ZF goto %00012952
00044d3d: goto %00013e13

.address 0x414910
00012952: 
.address 0x414910
00012962: R14 := pad:64[mem[RBP, el]:u32]
.address 0x414914
0001296f: #2452 := low:32[R14] - 0x24
.address 0x414914
00012972: CF := low:32[R14] < 0x24
.address 0x414914
00012975: OF := high:1[(low:32[R14] ^ 0x24) & (low:32[R14] ^ #2452)]
.address 0x414914
00012978: AF := 0x10 = (0x10 & (#2452 ^ low:32[R14] ^ 0x24))
.address 0x414914
0001297b: PF := ~low:1[let $1 = #2452 >> 4 ^ #2452 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414914
0001297e: SF := high:1[#2452]
.address 0x414914
00012981: ZF := 0 = #2452
.address 0x414918
0001298b: when CF | ZF goto %00012985
00044d3e: goto %000129be

.address 0x414930
00012985: 
.address 0x414930
0001299b: #2454 := low:6[R14]
.address 0x414930
0001299e: CF := low:1[R13 >> #2454]
.address 0x414930
000129a1: OF := unknown[bits]:u1
.address 0x414930
000129a4: SF := unknown[bits]:u1
.address 0x414930
000129a7: ZF := unknown[bits]:u1
.address 0x414930
000129aa: AF := unknown[bits]:u1
.address 0x414930
000129ad: PF := unknown[bits]:u1
.address 0x414934
000129b6: when CF goto %000128b8
00044d3f: goto %000129bc

.address 0x41493A
000129bc: 
.address 0x41493A
000129c2: goto %000129be

.address 0x41491A
000129be: 
.address 0x41491A
000129c8: RDI := RBX
.address 0x41491D
000129d5: RBX := 0
.address 0x41491D
000129d8: AF := unknown[bits]:u1
.address 0x41491D
000129db: ZF := 1
.address 0x41491D
000129de: PF := 1
.address 0x41491D
000129e1: OF := 0
.address 0x41491D
000129e4: CF := 0
.address 0x41491D
000129e7: SF := 0
.address 0x41491F
000129f0: RSP := RSP - 8
.address 0x41491F
000129f3: mem := mem with [RSP, el]:u64 <- 0x414924
.address 0x41491F
000129f6: call @sub_403e70 with return %000129f8

.address 0x414924
000129f8: 
.address 0x414924
000129fd: mem := mem with [RBP, el]:u32 <- low:32[R14]
.address 0x414928
00012a05: goto %00012a01

.address 0x4148E2
00013e13: 
.address 0x4148E2
00013e1e: #2601 := mem[R14]
.address 0x4148E2
00013e21: CF := mem[R14] < 0
.address 0x4148E2
00013e24: OF := high:1[mem[R14] & (mem[R14] ^ #2601)]
.address 0x4148E2
00013e27: AF := 0x10 = (0x10 & (#2601 ^ mem[R14]))
.address 0x4148E2
00013e2a: PF := ~low:1[let $1 = #2601 >> 4 ^ #2601 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4148E2
00013e2d: SF := high:1[#2601]
.address 0x4148E2
00013e30: ZF := 0 = #2601
.address 0x4148E6
00013e39: when ~ZF goto %000128b8
00044d40: goto %00012a01

.address 0x4148E8
00012a01: 
.address 0x4148E8
00012a0b: RDX := mem[RSP + 8, el]:u64
.address 0x4148ED
00012a18: RDX := RDX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x4148ED
00012a1b: OF := 0
.address 0x4148ED
00012a1e: CF := 0
.address 0x4148ED
00012a21: AF := unknown[bits]:u1
.address 0x4148ED
00012a24: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4148ED
00012a27: SF := high:1[RDX]
.address 0x4148ED
00012a2a: ZF := 0 = RDX
.address 0x4148F6
00012a31: RAX := RBX
.address 0x4148F9
00012a3b: when ~ZF goto %00012a35
00044d41: goto %00013da3

.address 0x41493C
00012a35: 
.address 0x41493C
00012a47: RSP := RSP - 8
.address 0x41493C
00012a4a: mem := mem with [RSP, el]:u64 <- 0x414941
.address 0x41493C
00012a4d: call @sub_403970 with return %00012a4f

.address 0x414941
00012a4f: 
00044d42: call @sub_414950 with noreturn

.address 0x4148FB
00013da3: 
.address 0x4148FB
00013daf: #2597 := RSP
.address 0x4148FB
00013db2: RSP := RSP + 0x10
.address 0x4148FB
00013db5: CF := RSP < #2597
.address 0x4148FB
00013db8: OF := ~high:1[#2597] & (high:1[#2597] | high:1[RSP]) & ~(high:1[#2597] & high:1[RSP])
.address 0x4148FB
00013dbb: AF := 0x10 = (0x10 & (RSP ^ #2597 ^ 0x10))
.address 0x4148FB
00013dbe: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4148FB
00013dc1: SF := high:1[RSP]
.address 0x4148FB
00013dc4: ZF := 0 = RSP
.address 0x4148FF
00013dcc: RBX := mem[RSP, el]:u64
.address 0x4148FF
00013dcf: RSP := RSP + 8
.address 0x414900
00013dd7: RBP := mem[RSP, el]:u64
.address 0x414900
00013dda: RSP := RSP + 8
.address 0x414901
00013de2: R12 := mem[RSP, el]:u64
.address 0x414901
00013de5: RSP := RSP + 8
.address 0x414903
00013ded: R13 := mem[RSP, el]:u64
.address 0x414903
00013df0: RSP := RSP + 8
.address 0x414905
00013df8: R14 := mem[RSP, el]:u64
.address 0x414905
00013dfb: RSP := RSP + 8
.address 0x414907
00013e04: #2600 := mem[RSP, el]:u64
.address 0x414907
00013e07: RSP := RSP + 8
.address 0x414907
00013e0b: call #2600 with noreturn


.address 0x414950
00044528: sub sub_414950()
.address 0x414950
00012a55: 
.address 0x414950
00012a5c: #2456 := R15
.address 0x414950
00012a5f: RSP := RSP - 8
.address 0x414950
00012a62: mem := mem with [RSP, el]:u64 <- #2456
.address 0x414952
00012a6b: #2457 := R14
.address 0x414952
00012a6e: RSP := RSP - 8
.address 0x414952
00012a71: mem := mem with [RSP, el]:u64 <- #2457
.address 0x414954
00012a7a: #2458 := R13
.address 0x414954
00012a7d: RSP := RSP - 8
.address 0x414954
00012a80: mem := mem with [RSP, el]:u64 <- #2458
.address 0x414956
00012a89: #2459 := R12
.address 0x414956
00012a8c: RSP := RSP - 8
.address 0x414956
00012a8f: mem := mem with [RSP, el]:u64 <- #2459
.address 0x414958
00012a98: #2460 := RBP
.address 0x414958
00012a9b: RSP := RSP - 8
.address 0x414958
00012a9e: mem := mem with [RSP, el]:u64 <- #2460
.address 0x414959
00012aa7: #2461 := RBX
.address 0x414959
00012aaa: RSP := RSP - 8
.address 0x414959
00012aad: mem := mem with [RSP, el]:u64 <- #2461
.address 0x41495A
00012abb: #2462 := RSP
.address 0x41495A
00012abe: RSP := RSP - 0x28
.address 0x41495A
00012ac1: CF := #2462 < 0x28
.address 0x41495A
00012ac4: OF := high:1[(#2462 ^ 0x28) & (#2462 ^ RSP)]
.address 0x41495A
00012ac7: AF := 0x10 = (0x10 & (RSP ^ #2462 ^ 0x28))
.address 0x41495A
00012aca: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41495A
00012acd: SF := high:1[RSP]
.address 0x41495A
00012ad0: ZF := 0 = RSP
.address 0x41495E
00012ad7: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x414967
00012ade: mem := mem with [RSP + 0x18, el]:u64 <- RAX
.address 0x41496C
00012aeb: RAX := 0
.address 0x41496C
00012aee: AF := unknown[bits]:u1
.address 0x41496C
00012af1: ZF := 1
.address 0x41496C
00012af4: PF := 1
.address 0x41496C
00012af7: OF := 0
.address 0x41496C
00012afa: CF := 0
.address 0x41496C
00012afd: SF := 0
.address 0x41496E
00012b0a: #2465 := low:32[RDX] - 0x24
.address 0x41496E
00012b0d: CF := low:32[RDX] < 0x24
.address 0x41496E
00012b10: OF := high:1[(low:32[RDX] ^ 0x24) & (low:32[RDX] ^ #2465)]
.address 0x41496E
00012b13: AF := 0x10 = (0x10 & (#2465 ^ low:32[RDX] ^ 0x24))
.address 0x41496E
00012b16: PF := ~low:1[let $1 = #2465 >> 4 ^ #2465 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41496E
00012b19: SF := high:1[#2465]
.address 0x41496E
00012b1c: ZF := 0 = #2465
.address 0x414971
00012b26: when ~(CF | ZF) goto %00012b20
00044d43: goto %00013bbb

.address 0x414977
00013bbb: 
.address 0x414977
00013bc0: RAX := low:64[RSP + 0x10]
.address 0x41497C
00013bc7: R15 := RSI
.address 0x41497F
00013bd4: #2582 := RSI
.address 0x41497F
00013bd7: OF := 0
.address 0x41497F
00013bda: CF := 0
.address 0x41497F
00013bdd: AF := unknown[bits]:u1
.address 0x41497F
00013be0: PF := ~low:1[let $1 = #2582 >> 4 ^ #2582 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41497F
00013be3: SF := high:1[#2582]
.address 0x41497F
00013be6: ZF := 0 = #2582
.address 0x414982
00013bed: RBP := RDI
.address 0x414985
00013bf4: mem := mem with [RSP + 8, el]:u32 <- low:32[RDX]
.address 0x414989
00013bfb: R14 := RCX
.address 0x41498C
00013c02: R13 := R8
.address 0x41498F
00013c09: R15 := if ZF then RAX else R15
.address 0x414993
00013c12: RSP := RSP - 8
.address 0x414993
00013c15: mem := mem with [RSP, el]:u64 <- 0x414998
.address 0x414993
00013c18: call @sub_4037f0 with return %00013c1a

.address 0x414998
00013c1a: 
.address 0x414998
00013c1f: mem := mem with [RAX, el]:u32 <- 0
.address 0x41499E
00013c26: R12 := RAX
.address 0x4149A1
00013c2d: RBX := pad:64[pad:32[mem[RBP]]]
.address 0x4149A5
00013c36: RSP := RSP - 8
.address 0x4149A5
00013c39: mem := mem with [RSP, el]:u64 <- 0x4149AA
.address 0x4149A5
00013c3c: call @sub_403e50 with return %00013c3e

.address 0x4149AA
00013c3e: 
.address 0x4149AA
00013c43: RDX := pad:64[mem[RSP + 8, el]:u32]
.address 0x4149AE
00013c4a: RSI := mem[RAX, el]:u64
.address 0x4149B1
00013c51: RAX := RBP
.address 0x4149B4
00013c59: goto %00013c55

.address 0x4149C7
00013c55: 
.address 0x4149C7
00013c5f: RCX := pad:64[pad:32[low:8[RBX]]]
.address 0x4149CA
00013c6c: #2584 := mem[RSI + (RCX << 1) + 1] & 0x20
.address 0x4149CA
00013c6f: OF := 0
.address 0x4149CA
00013c72: CF := 0
.address 0x4149CA
00013c75: AF := unknown[bits]:u1
.address 0x4149CA
00013c78: PF := ~low:1[let $1 = #2584 >> 4 ^ #2584 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4149CA
00013c7b: SF := high:1[#2584]
.address 0x4149CA
00013c7e: ZF := 0 = #2584
.address 0x4149CF
00013c88: when ~ZF goto %00013c82
00044d44: goto %00013cb7

.address 0x4149D1
00013cb7: 
.address 0x4149D1
00013cc2: #2589 := low:8[RBX] - 0x2D
.address 0x4149D1
00013cc5: CF := low:8[RBX] < 0x2D
.address 0x4149D1
00013cc8: OF := high:1[(low:8[RBX] ^ 0x2D) & (low:8[RBX] ^ #2589)]
.address 0x4149D1
00013ccb: AF := 0x10 = (0x10 & (#2589 ^ low:8[RBX] ^ 0x2D))
.address 0x4149D1
00013cce: PF := ~low:1[let $1 = #2589 >> 4 ^ #2589 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4149D1
00013cd1: SF := high:1[#2589]
.address 0x4149D1
00013cd4: ZF := 0 = #2589
.address 0x4149D4
00013cdd: when ZF goto %00012e30
00044d45: goto %00013ce3

.address 0x4149D6
00013ce3: 
.address 0x4149D6
00013ce8: RSI := R15
.address 0x4149D9
00013cef: RDI := RBP
.address 0x4149DC
00013cf8: RSP := RSP - 8
.address 0x4149DC
00013cfb: mem := mem with [RSP, el]:u64 <- 0x4149E1
.address 0x4149DC
00013cfe: call @sub_403d60 with return %00013d00

.address 0x4149E1
00013d00: 
.address 0x4149E1
00013d05: RCX := mem[R15, el]:u64
.address 0x4149E4
00013d0c: RBX := RAX
.address 0x4149E7
00013d19: #2591 := RCX - RBP
.address 0x4149E7
00013d1c: CF := RCX < RBP
.address 0x4149E7
00013d1f: OF := high:1[(RCX ^ RBP) & (RCX ^ #2591)]
.address 0x4149E7
00013d22: AF := 0x10 = (0x10 & (#2591 ^ RCX ^ RBP))
.address 0x4149E7
00013d25: PF := ~low:1[let $1 = #2591 >> 4 ^ #2591 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4149E7
00013d28: SF := high:1[#2591]
.address 0x4149E7
00013d2b: ZF := 0 = #2591
.address 0x4149EA
00013d34: when ZF goto %00012dd5
00044d46: goto %00013d3a

.address 0x414A18
00012dd5: 
.address 0x414A18
00012de0: #2486 := R13
.address 0x414A18
00012de3: OF := 0
.address 0x414A18
00012de6: CF := 0
.address 0x414A18
00012de9: AF := unknown[bits]:u1
.address 0x414A18
00012dec: PF := ~low:1[let $1 = #2486 >> 4 ^ #2486 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414A18
00012def: SF := high:1[#2486]
.address 0x414A18
00012df2: ZF := 0 = #2486
.address 0x414A1B
00012df9: mem := mem with [RSP + 8, el]:u64 <- RCX
.address 0x414A20
00012e03: when ~ZF goto %00012dfd
00044d47: goto %00013a93

.address 0x414A60
00012dfd: 
.address 0x414A60
00012e0d: R12 := pad:64[pad:32[mem[RBP]]]
.address 0x414A65
00012e1a: #2488 := low:8[R12]
.address 0x414A65
00012e1d: OF := 0
.address 0x414A65
00012e20: CF := 0
.address 0x414A65
00012e23: AF := unknown[bits]:u1
.address 0x414A65
00012e26: PF := ~low:1[let $1 = #2488 >> 4 ^ #2488 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414A65
00012e29: SF := high:1[#2488]
.address 0x414A65
00012e2c: ZF := 0 = #2488
.address 0x414A68
00012e36: when ZF goto %00012e30
00044d48: goto %00012e42

.address 0x414A6A
00012e42: 
.address 0x414A6A
00012e47: RSI := pad:64[extend:32[low:8[R12]]]
.address 0x414A6E
00012e4e: RDI := R13
.address 0x414A71
00012e5b: RBP := 0
.address 0x414A71
00012e5e: AF := unknown[bits]:u1
.address 0x414A71
00012e61: ZF := 1
.address 0x414A71
00012e64: PF := 1
.address 0x414A71
00012e67: OF := 0
.address 0x414A71
00012e6a: CF := 0
.address 0x414A71
00012e6d: SF := 0
.address 0x414A73
00012e76: RSP := RSP - 8
.address 0x414A73
00012e79: mem := mem with [RSP, el]:u64 <- 0x414A78
.address 0x414A73
00012e7c: call @sub_4039a0 with return %00012e7e

.address 0x414A78
00012e7e: 
.address 0x414A78
00012e89: #2490 := RAX
.address 0x414A78
00012e8c: OF := 0
.address 0x414A78
00012e8f: CF := 0
.address 0x414A78
00012e92: AF := unknown[bits]:u1
.address 0x414A78
00012e95: PF := ~low:1[let $1 = #2490 >> 4 ^ #2490 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414A78
00012e98: SF := high:1[#2490]
.address 0x414A78
00012e9b: ZF := 0 = #2490
.address 0x414A7B
00012ea2: RBX := 1
.address 0x414A80
00012ea9: RCX := mem[RSP + 8, el]:u64
.address 0x414A85
00012eb2: when ZF goto %00012e30
00044d49: goto %00012eb8

.address 0x414A22
00013a93: 
00044d4a: goto %00012e30

.address 0x4149EC
00013d3a: 
.address 0x4149EC
00013d3f: RAX := pad:64[mem[R12, el]:u32]
.address 0x4149F0
00013d4c: #2593 := low:32[RAX]
.address 0x4149F0
00013d4f: OF := 0
.address 0x4149F0
00013d52: CF := 0
.address 0x4149F0
00013d55: AF := unknown[bits]:u1
.address 0x4149F0
00013d58: PF := ~low:1[let $1 = #2593 >> 4 ^ #2593 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4149F0
00013d5b: SF := high:1[#2593]
.address 0x4149F0
00013d5e: ZF := 0 = #2593
.address 0x4149F2
00013d67: when ZF goto %00012d72
00044d4b: goto %00013d6d

.address 0x414A58
00012d72: 
.address 0x414A58
00012d7d: RBP := 0
.address 0x414A58
00012d80: AF := unknown[bits]:u1
.address 0x414A58
00012d83: ZF := 1
.address 0x414A58
00012d86: PF := 1
.address 0x414A58
00012d89: OF := 0
.address 0x414A58
00012d8c: CF := 0
.address 0x414A58
00012d8f: SF := 0
.address 0x414A5A
00012d97: goto %00012d93

.address 0x4149F4
00013d6d: 
.address 0x4149F4
00013d78: #2595 := low:32[RAX] - 0x22
.address 0x4149F4
00013d7b: CF := low:32[RAX] < 0x22
.address 0x4149F4
00013d7e: OF := high:1[(low:32[RAX] ^ 0x22) & (low:32[RAX] ^ #2595)]
.address 0x4149F4
00013d81: AF := 0x10 = (0x10 & (#2595 ^ low:32[RAX] ^ 0x22))
.address 0x4149F4
00013d84: PF := ~low:1[let $1 = #2595 >> 4 ^ #2595 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4149F4
00013d87: SF := high:1[#2595]
.address 0x4149F4
00013d8a: ZF := 0 = #2595
.address 0x4149F7
00013d91: RBP := 1
.address 0x4149FC
00013d9a: when ~ZF goto %00012e30
00044d4c: goto %00012d93

.address 0x414A28
00012e30: 
.address 0x414A28
00012e40: RBP := 4
00044d4d: goto %00012cac

.address 0x4149FE
00012d93: 
.address 0x4149FE
00012da3: #2484 := R13
.address 0x4149FE
00012da6: OF := 0
.address 0x4149FE
00012da9: CF := 0
.address 0x4149FE
00012dac: AF := unknown[bits]:u1
.address 0x4149FE
00012daf: PF := ~low:1[let $1 = #2484 >> 4 ^ #2484 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4149FE
00012db2: SF := high:1[#2484]
.address 0x4149FE
00012db5: ZF := 0 = #2484
.address 0x414A01
00012dbf: when ZF goto %00012db9
00044d4e: goto %00013a96

.address 0x414A03
00013a96: 
.address 0x414A03
00013a9b: R12 := pad:64[pad:32[mem[RCX]]]
.address 0x414A07
00013aa8: #2576 := low:8[R12]
.address 0x414A07
00013aab: OF := 0
.address 0x414A07
00013aae: CF := 0
.address 0x414A07
00013ab1: AF := unknown[bits]:u1
.address 0x414A07
00013ab4: PF := ~low:1[let $1 = #2576 >> 4 ^ #2576 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414A07
00013ab7: SF := high:1[#2576]
.address 0x414A07
00013aba: ZF := 0 = #2576
.address 0x414A0A
00013ac3: when ~ZF goto %00012eb8
00044d4f: goto %00012db9

.address 0x414A87
00012eb8: 
.address 0x414A87
00012ebd: RSI := pad:64[extend:32[low:8[R12]]]
.address 0x414A8B
00012ec4: RDI := R13
.address 0x414A8E
00012ecb: mem := mem with [RSP + 8, el]:u64 <- RCX
.address 0x414A93
00012ed4: RSP := RSP - 8
.address 0x414A93
00012ed7: mem := mem with [RSP, el]:u64 <- 0x414A98
.address 0x414A93
00012eda: call @sub_4039a0 with return %00012edc

.address 0x414A98
00012edc: 
.address 0x414A98
00012ee7: #2492 := RAX
.address 0x414A98
00012eea: OF := 0
.address 0x414A98
00012eed: CF := 0
.address 0x414A98
00012ef0: AF := unknown[bits]:u1
.address 0x414A98
00012ef3: PF := ~low:1[let $1 = #2492 >> 4 ^ #2492 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414A98
00012ef6: SF := high:1[#2492]
.address 0x414A98
00012ef9: ZF := 0 = #2492
.address 0x414A9B
00012f00: RCX := mem[RSP + 8, el]:u64
.address 0x414AA0
00012f0a: when ZF goto %00012f04
00044d50: goto %00013925

.address 0x414AA6
00013925: 
.address 0x414AA6
0001392a: RAX := pad:64[low:32[R12 - 0x45]]
.address 0x414AAB
00013937: #2565 := low:8[RAX] - 0x2F
.address 0x414AAB
0001393a: CF := low:8[RAX] < 0x2F
.address 0x414AAB
0001393d: OF := high:1[(low:8[RAX] ^ 0x2F) & (low:8[RAX] ^ #2565)]
.address 0x414AAB
00013940: AF := 0x10 = (0x10 & (#2565 ^ low:8[RAX] ^ 0x2F))
.address 0x414AAB
00013943: PF := ~low:1[let $1 = #2565 >> 4 ^ #2565 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414AAB
00013946: SF := high:1[#2565]
.address 0x414AAB
00013949: ZF := 0 = #2565
.address 0x414AAD
00013953: when ~(CF | ZF) goto %0001394d
00044d51: goto %00013966

.address 0x414AAF
00013966: 
.address 0x414AAF
0001396b: RDX := 0x814400308945
.address 0x414AB9
00013978: #2567 := low:6[RAX]
.address 0x414AB9
0001397b: CF := low:1[RDX >> #2567]
.address 0x414AB9
0001397e: OF := unknown[bits]:u1
.address 0x414AB9
00013981: SF := unknown[bits]:u1
.address 0x414AB9
00013984: ZF := unknown[bits]:u1
.address 0x414AB9
00013987: AF := unknown[bits]:u1
.address 0x414AB9
0001398a: PF := unknown[bits]:u1
.address 0x414ABD
00013993: when ~CF goto %0001394d
00044d52: goto %00013999

.address 0x414ABF
00013999: 
.address 0x414ABF
0001399e: RSI := 0x30
.address 0x414AC4
000139a5: RDI := R13
.address 0x414AC7
000139ac: mem := mem with [RSP + 8, el]:u64 <- RCX
.address 0x414ACC
000139b5: RSP := RSP - 8
.address 0x414ACC
000139b8: mem := mem with [RSP, el]:u64 <- 0x414AD1
.address 0x414ACC
000139bb: call @sub_4039a0 with return %000139bd

.address 0x414AD1
000139bd: 
.address 0x414AD1
000139c8: #2568 := RAX
.address 0x414AD1
000139cb: OF := 0
.address 0x414AD1
000139ce: CF := 0
.address 0x414AD1
000139d1: AF := unknown[bits]:u1
.address 0x414AD1
000139d4: PF := ~low:1[let $1 = #2568 >> 4 ^ #2568 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414AD1
000139d7: SF := high:1[#2568]
.address 0x414AD1
000139da: ZF := 0 = #2568
.address 0x414AD4
000139e1: RCX := mem[RSP + 8, el]:u64
.address 0x414AD9
000139ea: when ZF goto %0001394d
00044d53: goto %000139f0

.address 0x414ADB
000139f0: 
.address 0x414ADB
000139f5: RAX := pad:64[pad:32[mem[RCX + 1]]]
.address 0x414ADF
00013a02: #2570 := low:8[RAX] - 0x44
.address 0x414ADF
00013a05: CF := low:8[RAX] < 0x44
.address 0x414ADF
00013a08: OF := high:1[(low:8[RAX] ^ 0x44) & (low:8[RAX] ^ #2570)]
.address 0x414ADF
00013a0b: AF := 0x10 = (0x10 & (#2570 ^ low:8[RAX] ^ 0x44))
.address 0x414ADF
00013a0e: PF := ~low:1[let $1 = #2570 >> 4 ^ #2570 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414ADF
00013a11: SF := high:1[#2570]
.address 0x414ADF
00013a14: ZF := 0 = #2570
.address 0x414AE1
00013a1e: when ZF goto %00013a18
00044d54: goto %00013a3b

.address 0x414AE3
00013a3b: 
.address 0x414AE3
00013a46: #2572 := low:8[RAX] - 0x69
.address 0x414AE3
00013a49: CF := low:8[RAX] < 0x69
.address 0x414AE3
00013a4c: OF := high:1[(low:8[RAX] ^ 0x69) & (low:8[RAX] ^ #2572)]
.address 0x414AE3
00013a4f: AF := 0x10 = (0x10 & (#2572 ^ low:8[RAX] ^ 0x69))
.address 0x414AE3
00013a52: PF := ~low:1[let $1 = #2572 >> 4 ^ #2572 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414AE3
00013a55: SF := high:1[#2572]
.address 0x414AE3
00013a58: ZF := 0 = #2572
.address 0x414AE5
00013a61: when ZF goto %0001343b
00044d55: goto %00013a67

.address 0x414CB8
0001343b: 
.address 0x414CB8
00013446: RDI := 0
.address 0x414CB8
00013449: AF := unknown[bits]:u1
.address 0x414CB8
0001344c: ZF := 1
.address 0x414CB8
0001344f: PF := 1
.address 0x414CB8
00013452: OF := 0
.address 0x414CB8
00013455: CF := 0
.address 0x414CB8
00013458: SF := 0
.address 0x414CBA
00013465: #2525 := mem[RCX + 2] - 0x42
.address 0x414CBA
00013468: CF := mem[RCX + 2] < 0x42
.address 0x414CBA
0001346b: OF := high:1[(mem[RCX + 2] ^ 0x42) & (mem[RCX + 2] ^ #2525)]
.address 0x414CBA
0001346e: AF := 0x10 = (0x10 & (#2525 ^ mem[RCX + 2] ^ 0x42))
.address 0x414CBA
00013471: PF := ~low:1[let $1 = #2525 >> 4 ^ #2525 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414CBA
00013474: SF := high:1[#2525]
.address 0x414CBA
00013477: ZF := 0 = #2525
.address 0x414CBE
0001347e: RSI := 0x400
.address 0x414CC3
00013485: RDI := extract:63:8[RDI].pad:8[ZF]
.address 0x414CC7
0001348c: RDI := pad:64[low:32[RDI + RDI + 1]]
.address 0x414CCB
00013494: goto %00013490

.address 0x414AEB
00013a67: 
.address 0x414AEB
00013a72: #2574 := low:8[RAX] - 0x42
.address 0x414AEB
00013a75: CF := low:8[RAX] < 0x42
.address 0x414AEB
00013a78: OF := high:1[(low:8[RAX] ^ 0x42) & (low:8[RAX] ^ #2574)]
.address 0x414AEB
00013a7b: AF := 0x10 = (0x10 & (#2574 ^ low:8[RAX] ^ 0x42))
.address 0x414AEB
00013a7e: PF := ~low:1[let $1 = #2574 >> 4 ^ #2574 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414AEB
00013a81: SF := high:1[#2574]
.address 0x414AEB
00013a84: ZF := 0 = #2574
.address 0x414AED
00013a8d: when ~ZF goto %0001394d
00044d56: goto %00013a18

.address 0x414B00
0001394d: 
.address 0x414B00
0001395d: RDI := 1
.address 0x414B05
00013964: RSI := 0x400
00044d57: goto %00013490

.address 0x414AEF
00013a18: 
.address 0x414AEF
00013a28: RDI := 2
.address 0x414AF4
00013a2f: RSI := 0x3E8
.address 0x414AF9
00013a36: goto %00013490

.address 0x414B0A
00013490: 
.address 0x414B0A
000134a1: #2527 := low:32[R12]
.address 0x414B0A
000134a4: R12 := pad:64[low:32[R12] - 0x42]
.address 0x414B0A
000134a7: CF := #2527 < 0x42
.address 0x414B0A
000134aa: OF := high:1[(#2527 ^ 0x42) & (#2527 ^ low:32[R12])]
.address 0x414B0A
000134ad: AF := 0x10 = (0x10 & (low:32[R12] ^ #2527 ^ 0x42))
.address 0x414B0A
000134b0: PF := ~low:1[let $1 = low:32[R12] >> 4 ^ low:32[R12] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414B0A
000134b3: SF := high:1[low:32[R12]]
.address 0x414B0A
000134b6: ZF := 0 = low:32[R12]
.address 0x414B0E
000134c3: #2530 := low:8[R12] - 0x35
.address 0x414B0E
000134c6: CF := low:8[R12] < 0x35
.address 0x414B0E
000134c9: OF := high:1[(low:8[R12] ^ 0x35) & (low:8[R12] ^ #2530)]
.address 0x414B0E
000134cc: AF := 0x10 = (0x10 & (#2530 ^ low:8[R12] ^ 0x35))
.address 0x414B0E
000134cf: PF := ~low:1[let $1 = #2530 >> 4 ^ #2530 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414B0E
000134d2: SF := high:1[#2530]
.address 0x414B0E
000134d5: ZF := 0 = #2530
.address 0x414B12
000134de: when ~(CF | ZF) goto %00012f04
00044d58: goto %000134e4

.address 0x414B6C
00012f04: 
.address 0x414B6C
00012f14: mem := mem with [R14, el]:u64 <- RBX
.address 0x414B6F
00012f21: RBP := pad:64[low:32[RBP] | 2]
.address 0x414B6F
00012f24: OF := 0
.address 0x414B6F
00012f27: CF := 0
.address 0x414B6F
00012f2a: AF := unknown[bits]:u1
.address 0x414B6F
00012f2d: PF := ~low:1[let $1 = low:32[RBP] >> 4 ^ low:32[RBP] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414B6F
00012f30: SF := high:1[low:32[RBP]]
.address 0x414B6F
00012f33: ZF := 0 = low:32[RBP]
.address 0x414B72
00012f3a: goto %00012cac

.address 0x414B14
000134e4: 
.address 0x414B14
000134e9: RDX := 0x41AF38
.address 0x414B1B
000134f0: R12 := pad:64[pad:32[low:8[R12]]]
.address 0x414B1F
000134f7: RAX := extend:64[mem[RDX + (R12 << 2), el]:u32]
.address 0x414B23
00013506: #2532 := RAX
.address 0x414B23
00013509: #2533 := RDX
.address 0x414B23
0001350c: RAX := RAX + #2533
.address 0x414B23
0001350f: CF := RAX < #2532
.address 0x414B23
00013512: OF := high:1[#2532] = high:1[#2533] & (high:1[#2532] | high:1[RAX]) & ~(
high:1[#2532] & high:1[RAX])
.address 0x414B23
00013515: AF := 0x10 = (0x10 & (RAX ^ #2532 ^ #2533))
.address 0x414B23
00013518: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414B23
0001351b: SF := high:1[RAX]
.address 0x414B23
0001351e: ZF := 0 = RAX
.address 0x414B26
00013526: call RAX with noreturn

.address 0x414A0C
00012db9: 
.address 0x414A0C
00012dc9: mem := mem with [R14, el]:u64 <- RBX
.address 0x414A0F
00012dd0: goto %00012cac

.address 0x414A2D
00012cac: 
.address 0x414A2D
00012cb6: RDI := mem[RSP + 0x18, el]:u64
.address 0x414A32
00012cc3: RDI := RDI ^ mem[FS_BASE + 0x28, el]:u64
.address 0x414A32
00012cc6: OF := 0
.address 0x414A32
00012cc9: CF := 0
.address 0x414A32
00012ccc: AF := unknown[bits]:u1
.address 0x414A32
00012ccf: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414A32
00012cd2: SF := high:1[RDI]
.address 0x414A32
00012cd5: ZF := 0 = RDI
.address 0x414A3B
00012cdc: RAX := pad:64[low:32[RBP]]
.address 0x414A3D
00012ce6: when ~ZF goto %00012ce0
00044d59: goto %00012cfa

.address 0x414CD0
00012ce0: 
.address 0x414CD0
00012cf2: RSP := RSP - 8
.address 0x414CD0
00012cf5: mem := mem with [RSP, el]:u64 <- 0x414CD5
.address 0x414CD0
00012cf8: call @sub_403970 with return %00012b20

.address 0x414CD5
00012b20: 
.address 0x414CD5
00012b30: RCX := 0x41B010
.address 0x414CDC
00012b37: RSI := 0x41AF00
.address 0x414CE3
00012b3e: RDI := 0x41AF10
.address 0x414CEA
00012b45: RDX := 0x60
.address 0x414CEF
00012b4e: RSP := RSP - 8
.address 0x414CEF
00012b51: mem := mem with [RSP, el]:u64 <- 0x414CF4
.address 0x414CEF
00012b54: call @sub_403a30 with return %00012b56

.address 0x414CF4
00012b56: 
.address 0x414CF4
00012b5b: R9 := 1
.address 0x414CFA
00012b68: RBX := 0xFFFFFFFFFFFFFFFF
.address 0x414CFA
00012b6b: OF := 0
.address 0x414CFA
00012b6e: CF := 0
.address 0x414CFA
00012b71: AF := unknown[bits]:u1
.address 0x414CFA
00012b74: PF := 1
.address 0x414CFA
00012b77: SF := 1
.address 0x414CFA
00012b7a: ZF := 0
.address 0x414CFE
00012b82: goto %00012b7e

.address 0x414C6B
00012b7e: 
.address 0x414C6B
00012b8f: #2468 := low:32[R8]
.address 0x414C6B
00012b92: R8 := pad:64[low:32[R8] - 1]
.address 0x414C6B
00012b95: CF := #2468 < 1
.address 0x414C6B
00012b98: OF := high:1[(#2468 ^ 1) & (#2468 ^ low:32[R8])]
.address 0x414C6B
00012b9b: AF := 0x10 = (0x10 & (low:32[R8] ^ #2468 ^ 1))
.address 0x414C6B
00012b9e: PF := ~low:1[let $1 = low:32[R8] >> 4 ^ low:32[R8] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414C6B
00012ba1: SF := high:1[low:32[R8]]
.address 0x414C6B
00012ba4: ZF := 0 = low:32[R8]
.address 0x414C6F
00012bae: when ~ZF goto %00012ba8
00044d5a: goto %00012bf5

.address 0x414C71
00012bf5: 
.address 0x414C71
00012bfb: goto %00012bf7

.address 0x414BC5
00012bf7: 
.address 0x414BC5
00012c07: RBP := pad:64[low:32[RBP] | low:32[R9]]
.address 0x414BC5
00012c0a: OF := 0
.address 0x414BC5
00012c0d: CF := 0
.address 0x414BC5
00012c10: AF := unknown[bits]:u1
.address 0x414BC5
00012c13: PF := ~low:1[let $1 = low:32[RBP] >> 4 ^ low:32[RBP] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414BC5
00012c16: SF := high:1[low:32[RBP]]
.address 0x414BC5
00012c19: ZF := 0 = low:32[RBP]
.address 0x414BC8
00012c21: goto %00012c1d

.address 0x414B50
00012c1d: 
.address 0x414B50
00012c27: RDI := extend:64[low:32[RDI]]
.address 0x414B53
00012c2e: RAX := pad:64[low:32[RBP]]
.address 0x414B55
00012c3d: #2473 := RCX
.address 0x414B55
00012c40: #2474 := RDI
.address 0x414B55
00012c43: RCX := RCX + #2474
.address 0x414B55
00012c46: CF := RCX < #2473
.address 0x414B55
00012c49: OF := high:1[#2473] = high:1[#2474] & (high:1[#2473] | high:1[RCX]) & ~(
high:1[#2473] & high:1[RCX])
.address 0x414B55
00012c4c: AF := 0x10 = (0x10 & (RCX ^ #2473 ^ #2474))
.address 0x414B55
00012c4f: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414B55
00012c52: SF := high:1[RCX]
.address 0x414B55
00012c55: ZF := 0 = RCX
.address 0x414B58
00012c62: RAX := pad:64[low:32[RAX] | 2]
.address 0x414B58
00012c65: OF := 0
.address 0x414B58
00012c68: CF := 0
.address 0x414B58
00012c6b: AF := unknown[bits]:u1
.address 0x414B58
00012c6e: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414B58
00012c71: SF := high:1[low:32[RAX]]
.address 0x414B58
00012c74: ZF := 0 = low:32[RAX]
.address 0x414B5B
00012c7b: mem := mem with [R15, el]:u64 <- RCX
.address 0x414B5E
00012c88: #2477 := mem[RCX]
.address 0x414B5E
00012c8b: CF := mem[RCX] < 0
.address 0x414B5E
00012c8e: OF := high:1[mem[RCX] & (mem[RCX] ^ #2477)]
.address 0x414B5E
00012c91: AF := 0x10 = (0x10 & (#2477 ^ mem[RCX]))
.address 0x414B5E
00012c94: PF := ~low:1[let $1 = #2477 >> 4 ^ #2477 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414B5E
00012c97: SF := high:1[#2477]
.address 0x414B5E
00012c9a: ZF := 0 = #2477
.address 0x414B61
00012ca1: mem := mem with [R14, el]:u64 <- RBX
.address 0x414B64
00012ca8: RBP := pad:64[if ~ZF then low:32[RAX] else low:32[RBP]]
.address 0x414B67
00012cb0: goto %00012cac

.address 0x414C5C
00012ba8: 
.address 0x414C5C
00012bb8: RAX := RBX
.address 0x414C5F
00012bc7: #2471 := pad:128[RAX] * pad:128[RSI]
.address 0x414C5F
00012bca: RAX := extract:63:0[#2471]
.address 0x414C5F
00012bcd: RDX := extract:127:64[#2471]
.address 0x414C5F
00012bd0: OF := extract:127:64[#2471] <> 0
.address 0x414C5F
00012bd3: CF := extract:127:64[#2471] <> 0
.address 0x414C5F
00012bd6: SF := unknown[bits]:u1
.address 0x414C5F
00012bd9: ZF := unknown[bits]:u1
.address 0x414C5F
00012bdc: AF := unknown[bits]:u1
.address 0x414C5F
00012bdf: PF := unknown[bits]:u1
.address 0x414C62
00012be6: RBX := RAX
.address 0x414C65
00012bef: when OF goto %00012b56
00044d5b: goto %00012b7e

.address 0x414A43
00012cfa: 
.address 0x414A43
00012d06: #2480 := RSP
.address 0x414A43
00012d09: RSP := RSP + 0x28
.address 0x414A43
00012d0c: CF := RSP < #2480
.address 0x414A43
00012d0f: OF := ~high:1[#2480] & (high:1[#2480] | high:1[RSP]) & ~(high:1[#2480] & high:1[RSP])
.address 0x414A43
00012d12: AF := 0x10 = (0x10 & (RSP ^ #2480 ^ 0x28))
.address 0x414A43
00012d15: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414A43
00012d18: SF := high:1[RSP]
.address 0x414A43
00012d1b: ZF := 0 = RSP
.address 0x414A47
00012d23: RBX := mem[RSP, el]:u64
.address 0x414A47
00012d26: RSP := RSP + 8
.address 0x414A48
00012d2e: RBP := mem[RSP, el]:u64
.address 0x414A48
00012d31: RSP := RSP + 8
.address 0x414A49
00012d39: R12 := mem[RSP, el]:u64
.address 0x414A49
00012d3c: RSP := RSP + 8
.address 0x414A4B
00012d44: R13 := mem[RSP, el]:u64
.address 0x414A4B
00012d47: RSP := RSP + 8
.address 0x414A4D
00012d4f: R14 := mem[RSP, el]:u64
.address 0x414A4D
00012d52: RSP := RSP + 8
.address 0x414A4F
00012d5a: R15 := mem[RSP, el]:u64
.address 0x414A4F
00012d5d: RSP := RSP + 8
.address 0x414A51
00012d66: #2483 := mem[RSP, el]:u64
.address 0x414A51
00012d69: RSP := RSP + 8
.address 0x414A51
00012d6d: call #2483 with noreturn

.address 0x4149C0
00013c82: 
.address 0x4149C0
00013c99: #2586 := RAX
.address 0x4149C0
00013c9c: RAX := RAX + 1
.address 0x4149C0
00013c9f: CF := RAX < #2586
.address 0x4149C0
00013ca2: OF := ~high:1[#2586] & (high:1[#2586] | high:1[RAX]) & ~(high:1[#2586] & high:1[RAX])
.address 0x4149C0
00013ca5: AF := 0x10 = (0x10 & (RAX ^ #2586 ^ 1))
.address 0x4149C0
00013ca8: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4149C0
00013cab: SF := high:1[RAX]
.address 0x4149C0
00013cae: ZF := 0 = RAX
.address 0x4149C4
00013cb5: RBX := pad:64[pad:32[mem[RAX]]]
00044d5c: goto %00013c55


.address 0x414D70
00044543: sub sub_414d70()
.address 0x414D70
00013585: 
.address 0x414D70
0001358c: #2536 := R13
.address 0x414D70
0001358f: RSP := RSP - 8
.address 0x414D70
00013592: mem := mem with [RSP, el]:u64 <- #2536
.address 0x414D72
0001359b: #2537 := R12
.address 0x414D72
0001359e: RSP := RSP - 8
.address 0x414D72
000135a1: mem := mem with [RSP, el]:u64 <- #2537
.address 0x414D74
000135a8: R10 := pad:64[low:32[RSI]]
.address 0x414D77
000135b1: #2538 := RBP
.address 0x414D77
000135b4: RSP := RSP - 8
.address 0x414D77
000135b7: mem := mem with [RSP, el]:u64 <- #2538
.address 0x414D78
000135c0: #2539 := RBX
.address 0x414D78
000135c3: RSP := RSP - 8
.address 0x414D78
000135c6: mem := mem with [RSP, el]:u64 <- #2539
.address 0x414D79
000135cd: R12 := R8
.address 0x414D7C
000135db: #2540 := RSP
.address 0x414D7C
000135de: RSP := RSP - 0x18
.address 0x414D7C
000135e1: CF := #2540 < 0x18
.address 0x414D7C
000135e4: OF := high:1[(#2540 ^ 0x18) & (#2540 ^ RSP)]
.address 0x414D7C
000135e7: AF := 0x10 = (0x10 & (RSP ^ #2540 ^ 0x18))
.address 0x414D7C
000135ea: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414D7C
000135ed: SF := high:1[RSP]
.address 0x414D7C
000135f0: ZF := 0 = RSP
.address 0x414D80
000135f7: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x414D89
000135fe: mem := mem with [RSP + 8, el]:u64 <- RAX
.address 0x414D8E
0001360b: RAX := 0
.address 0x414D8E
0001360e: AF := unknown[bits]:u1
.address 0x414D8E
00013611: ZF := 1
.address 0x414D8E
00013614: PF := 1
.address 0x414D8E
00013617: OF := 0
.address 0x414D8E
0001361a: CF := 0
.address 0x414D8E
0001361d: SF := 0
.address 0x414D90
0001362a: #2543 := low:32[RDI] - 3
.address 0x414D90
0001362d: CF := low:32[RDI] < 3
.address 0x414D90
00013630: OF := high:1[(low:32[RDI] ^ 3) & (low:32[RDI] ^ #2543)]
.address 0x414D90
00013633: AF := 0x10 = (0x10 & (#2543 ^ low:32[RDI] ^ 3))
.address 0x414D90
00013636: PF := ~low:1[let $1 = #2543 >> 4 ^ #2543 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414D90
00013639: SF := high:1[#2543]
.address 0x414D90
0001363c: ZF := 0 = #2543
.address 0x414D93
00013643: RBP := pad:64[mem[0x6201F8, el]:u32]
.address 0x414D99
0001364d: when ~(CF | ZF) goto %00013647
00044d5d: goto %000137ff

.address 0x414DF4
00013647: 
.address 0x414DF4
0001365d: #2545 := low:32[RDI] - 4
.address 0x414DF4
00013660: CF := low:32[RDI] < 4
.address 0x414DF4
00013663: OF := high:1[(low:32[RDI] ^ 4) & (low:32[RDI] ^ #2545)]
.address 0x414DF4
00013666: AF := 0x10 = (0x10 & (#2545 ^ low:32[RDI] ^ 4))
.address 0x414DF4
00013669: PF := ~low:1[let $1 = #2545 >> 4 ^ #2545 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414DF4
0001366c: SF := high:1[#2545]
.address 0x414DF4
0001366f: ZF := 0 = #2545
.address 0x414DF7
00013676: RSI := 0x41B019
.address 0x414DFE
00013680: when ZF goto %0001367a
00044d5e: goto %000137f8

.address 0x414E00
000137f8: 
.address 0x414E00
000137fd: goto %000137a7

.address 0x414D9B
000137ff: 
.address 0x414D9B
0001380a: #2554 := low:32[RDI] - 2
.address 0x414D9B
0001380d: CF := low:32[RDI] < 2
.address 0x414D9B
00013810: OF := high:1[(low:32[RDI] ^ 2) & (low:32[RDI] ^ #2554)]
.address 0x414D9B
00013813: AF := 0x10 = (0x10 & (#2554 ^ low:32[RDI] ^ 2))
.address 0x414D9B
00013816: PF := ~low:1[let $1 = #2554 >> 4 ^ #2554 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414D9B
00013819: SF := high:1[#2554]
.address 0x414D9B
0001381c: ZF := 0 = #2554
.address 0x414D9E
00013825: when ~CF goto %000137b6
00044d5f: goto %0001382b

.address 0x414DA0
0001382b: 
.address 0x414DA0
00013837: #2556 := low:32[RDI]
.address 0x414DA0
0001383a: RDI := pad:64[low:32[RDI] - 1]
.address 0x414DA0
0001383d: CF := #2556 < 1
.address 0x414DA0
00013840: OF := high:1[(#2556 ^ 1) & (#2556 ^ low:32[RDI])]
.address 0x414DA0
00013843: AF := 0x10 = (0x10 & (low:32[RDI] ^ #2556 ^ 1))
.address 0x414DA0
00013846: PF := ~low:1[let $1 = low:32[RDI] >> 4 ^ low:32[RDI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414DA0
00013849: SF := high:1[low:32[RDI]]
.address 0x414DA0
0001384c: ZF := 0 = low:32[RDI]
.address 0x414DA3
00013853: RSI := 0x41B034
.address 0x414DAA
0001385c: when ~ZF goto %000137a7
00044d60: goto %0001367a

.address 0x414DAC
0001367a: 
.address 0x414DAC
00013690: #2547 := low:32[R10]
.address 0x414DAC
00013693: OF := 0
.address 0x414DAC
00013696: CF := 0
.address 0x414DAC
00013699: AF := unknown[bits]:u1
.address 0x414DAC
0001369c: PF := ~low:1[let $1 = #2547 >> 4 ^ #2547 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414DAC
0001369f: SF := high:1[#2547]
.address 0x414DAC
000136a2: ZF := 0 = #2547
.address 0x414DAF
000136a9: RAX := extend:64[low:32[R10]]
.address 0x414DB2
000136b3: when SF goto %000136ad
00044d61: goto %000137c7

.address 0x414E02
000136ad: 
.address 0x414E02
000136bd: RBX := 0x41B051
.address 0x414E09
000136c4: mem := mem with [RSP + 6] <- low:8[RDX]
.address 0x414E0D
000136cb: mem := mem with [RSP + 7] <- 0
.address 0x414E12
000136d2: R13 := low:64[RSP + 6]
.address 0x414E17
000136e1: #2549 := RBX
.address 0x414E17
000136e4: #2550 := RAX
.address 0x414E17
000136e7: RBX := RBX - RAX
.address 0x414E17
000136ea: CF := #2549 < #2550
.address 0x414E17
000136ed: OF := high:1[(#2549 ^ #2550) & (#2549 ^ RBX)]
.address 0x414E17
000136f0: AF := 0x10 = (0x10 & (RBX ^ #2549 ^ #2550))
.address 0x414E17
000136f3: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414E17
000136f6: SF := high:1[RBX]
.address 0x414E17
000136f9: ZF := 0 = RBX
.address 0x414E1A
00013701: goto %000136fd

.address 0x414DB4
000137c7: 
.address 0x414DB4
000137d3: #2552 := RAX
.address 0x414DB4
000137d6: RAX := RAX << 5
.address 0x414DB4
000137d9: CF := low:1[#2552 >> 0x3B]
.address 0x414DB4
000137dc: SF := high:1[RAX]
.address 0x414DB4
000137df: ZF := 0 = RAX
.address 0x414DB4
000137e2: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414DB4
000137e5: AF := unknown[bits]:u1
.address 0x414DB4
000137e8: OF := unknown[bits]:u1
.address 0x414DB8
000137ef: RBX := 0x41B051
.address 0x414DBF
000137f6: R13 := mem[RCX + RAX, el]:u64
00044d62: goto %000136fd

.address 0x414DC3
000136fd: 
.address 0x414DC3
00013707: RDX := 5
.address 0x414DC8
00013714: RDI := 0
.address 0x414DC8
00013717: AF := unknown[bits]:u1
.address 0x414DC8
0001371a: ZF := 1
.address 0x414DC8
0001371d: PF := 1
.address 0x414DC8
00013720: OF := 0
.address 0x414DC8
00013723: CF := 0
.address 0x414DC8
00013726: SF := 0
.address 0x414DCA
0001372f: RSP := RSP - 8
.address 0x414DCA
00013732: mem := mem with [RSP, el]:u64 <- 0x414DCF
.address 0x414DCA
00013735: call @sub_403930 with return %00013737

.address 0x414DCF
00013737: 
.address 0x414DCF
0001373c: R9 := R12
.address 0x414DD2
00013743: RDX := RAX
.address 0x414DD5
0001374a: R8 := R13
.address 0x414DD8
00013751: RCX := RBX
.address 0x414DDB
0001375e: RSI := 0
.address 0x414DDB
00013761: AF := unknown[bits]:u1
.address 0x414DDB
00013764: ZF := 1
.address 0x414DDB
00013767: PF := 1
.address 0x414DDB
0001376a: OF := 0
.address 0x414DDB
0001376d: CF := 0
.address 0x414DDB
00013770: SF := 0
.address 0x414DDD
00013777: RDI := pad:64[low:32[RBP]]
.address 0x414DDF
00013784: RAX := 0
.address 0x414DDF
00013787: AF := unknown[bits]:u1
.address 0x414DDF
0001378a: ZF := 1
.address 0x414DDF
0001378d: PF := 1
.address 0x414DDF
00013790: OF := 0
.address 0x414DDF
00013793: CF := 0
.address 0x414DDF
00013796: SF := 0
.address 0x414DE1
0001379f: RSP := RSP - 8
.address 0x414DE1
000137a2: mem := mem with [RSP, el]:u64 <- 0x414DE6
.address 0x414DE1
000137a5: call @sub_403d20 with return %000137a7

.address 0x414DE6
000137a7: 
.address 0x414DE6
000137ae: RSP := RSP - 8
.address 0x414DE6
000137b1: mem := mem with [RSP, el]:u64 <- 0x414DEB
.address 0x414DE6
000137b4: call @sub_4037e0 with return %000137b6

.address 0x414DEB
000137b6: 
.address 0x414DEB
000137bb: RSI := 0x41B058
.address 0x414DF2
000137c2: goto %0001367a


.address 0x414E20
0004454a: sub sub_414e20()
.address 0x414E20
00002e0e: 
.address 0x414E20
00002e20: #420 := R15
.address 0x414E20
00002e23: RSP := RSP - 8
.address 0x414E20
00002e26: mem := mem with [RSP, el]:u64 <- #420
.address 0x414E22
00002e2f: #421 := R14
.address 0x414E22
00002e32: RSP := RSP - 8
.address 0x414E22
00002e35: mem := mem with [RSP, el]:u64 <- #421
.address 0x414E24
00002e3e: #422 := R13
.address 0x414E24
00002e41: RSP := RSP - 8
.address 0x414E24
00002e44: mem := mem with [RSP, el]:u64 <- #422
.address 0x414E26
00002e4d: #423 := R12
.address 0x414E26
00002e50: RSP := RSP - 8
.address 0x414E26
00002e53: mem := mem with [RSP, el]:u64 <- #423
.address 0x414E28
00002e5c: #424 := RBP
.address 0x414E28
00002e5f: RSP := RSP - 8
.address 0x414E28
00002e62: mem := mem with [RSP, el]:u64 <- #424
.address 0x414E29
00002e6b: #425 := RBX
.address 0x414E29
00002e6e: RSP := RSP - 8
.address 0x414E29
00002e71: mem := mem with [RSP, el]:u64 <- #425
.address 0x414E2A
00002e7f: #426 := RSP
.address 0x414E2A
00002e82: RSP := RSP - 0x28
.address 0x414E2A
00002e85: CF := #426 < 0x28
.address 0x414E2A
00002e88: OF := high:1[(#426 ^ 0x28) & (#426 ^ RSP)]
.address 0x414E2A
00002e8b: AF := 0x10 = (0x10 & (RSP ^ #426 ^ 0x28))
.address 0x414E2A
00002e8e: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414E2A
00002e91: SF := high:1[RSP]
.address 0x414E2A
00002e94: ZF := 0 = RSP
.address 0x414E2E
00002e9b: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x414E37
00002ea2: mem := mem with [RSP + 0x18, el]:u64 <- RAX
.address 0x414E3C
00002eaf: RAX := 0
.address 0x414E3C
00002eb2: AF := unknown[bits]:u1
.address 0x414E3C
00002eb5: ZF := 1
.address 0x414E3C
00002eb8: PF := 1
.address 0x414E3C
00002ebb: OF := 0
.address 0x414E3C
00002ebe: CF := 0
.address 0x414E3C
00002ec1: SF := 0
.address 0x414E3E
00002ece: #429 := low:32[RDX] - 0x24
.address 0x414E3E
00002ed1: CF := low:32[RDX] < 0x24
.address 0x414E3E
00002ed4: OF := high:1[(low:32[RDX] ^ 0x24) & (low:32[RDX] ^ #429)]
.address 0x414E3E
00002ed7: AF := 0x10 = (0x10 & (#429 ^ low:32[RDX] ^ 0x24))
.address 0x414E3E
00002eda: PF := ~low:1[let $1 = #429 >> 4 ^ #429 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414E3E
00002edd: SF := high:1[#429]
.address 0x414E3E
00002ee0: ZF := 0 = #429
.address 0x414E41
00002eea: when ~(CF | ZF) goto %00002ee4
00044d63: goto %00023eee

.address 0x414E47
00023eee: 
.address 0x414E47
00023ef3: RAX := low:64[RSP + 0x10]
.address 0x414E4C
00023efa: R15 := RSI
.address 0x414E4F
00023f07: #5054 := RSI
.address 0x414E4F
00023f0a: OF := 0
.address 0x414E4F
00023f0d: CF := 0
.address 0x414E4F
00023f10: AF := unknown[bits]:u1
.address 0x414E4F
00023f13: PF := ~low:1[let $1 = #5054 >> 4 ^ #5054 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414E4F
00023f16: SF := high:1[#5054]
.address 0x414E4F
00023f19: ZF := 0 = #5054
.address 0x414E52
00023f20: RBP := RDI
.address 0x414E55
00023f27: mem := mem with [RSP + 8, el]:u32 <- low:32[RDX]
.address 0x414E59
00023f2e: R14 := RCX
.address 0x414E5C
00023f35: R13 := R8
.address 0x414E5F
00023f3c: R15 := if ZF then RAX else R15
.address 0x414E63
00023f45: RSP := RSP - 8
.address 0x414E63
00023f48: mem := mem with [RSP, el]:u64 <- 0x414E68
.address 0x414E63
00023f4b: call @sub_4037f0 with return %00023f4d

.address 0x414E68
00023f4d: 
.address 0x414E68
00023f52: mem := mem with [RAX, el]:u32 <- 0
.address 0x414E6E
00023f59: R12 := RAX
.address 0x414E71
00023f60: RBX := pad:64[pad:32[mem[RBP]]]
.address 0x414E75
00023f69: RSP := RSP - 8
.address 0x414E75
00023f6c: mem := mem with [RSP, el]:u64 <- 0x414E7A
.address 0x414E75
00023f6f: call @sub_403e50 with return %00023f71

.address 0x414E7A
00023f71: 
.address 0x414E7A
00023f76: RDX := pad:64[mem[RSP + 8, el]:u32]
.address 0x414E7E
00023f7d: RSI := mem[RAX, el]:u64
.address 0x414E81
00023f84: RAX := RBP
.address 0x414E84
00023f8c: goto %00023f88

.address 0x414E97
00023f88: 
.address 0x414E97
00023f92: RCX := pad:64[pad:32[low:8[RBX]]]
.address 0x414E9A
00023f9f: #5056 := mem[RSI + (RCX << 1) + 1] & 0x20
.address 0x414E9A
00023fa2: OF := 0
.address 0x414E9A
00023fa5: CF := 0
.address 0x414E9A
00023fa8: AF := unknown[bits]:u1
.address 0x414E9A
00023fab: PF := ~low:1[let $1 = #5056 >> 4 ^ #5056 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414E9A
00023fae: SF := high:1[#5056]
.address 0x414E9A
00023fb1: ZF := 0 = #5056
.address 0x414E9F
00023fbb: when ~ZF goto %00023fb5
00044d64: goto %00023fea

.address 0x414EA1
00023fea: 
.address 0x414EA1
00023ff5: #5061 := low:8[RBX] - 0x2D
.address 0x414EA1
00023ff8: CF := low:8[RBX] < 0x2D
.address 0x414EA1
00023ffb: OF := high:1[(low:8[RBX] ^ 0x2D) & (low:8[RBX] ^ #5061)]
.address 0x414EA1
00023ffe: AF := 0x10 = (0x10 & (#5061 ^ low:8[RBX] ^ 0x2D))
.address 0x414EA1
00024001: PF := ~low:1[let $1 = #5061 >> 4 ^ #5061 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414EA1
00024004: SF := high:1[#5061]
.address 0x414EA1
00024007: ZF := 0 = #5061
.address 0x414EA4
00024010: when ZF goto %000031f4
00044d65: goto %00024016

.address 0x414EA6
00024016: 
.address 0x414EA6
00024021: RCX := 0
.address 0x414EA6
00024024: AF := unknown[bits]:u1
.address 0x414EA6
00024027: ZF := 1
.address 0x414EA6
0002402a: PF := 1
.address 0x414EA6
0002402d: OF := 0
.address 0x414EA6
00024030: CF := 0
.address 0x414EA6
00024033: SF := 0
.address 0x414EA8
0002403a: RSI := R15
.address 0x414EAB
00024041: RDI := RBP
.address 0x414EAE
0002404a: RSP := RSP - 8
.address 0x414EAE
0002404d: mem := mem with [RSP, el]:u64 <- 0x414EB3
.address 0x414EAE
00024050: call @sub_403a40 with return %00024052

.address 0x414EB3
00024052: 
.address 0x414EB3
00024057: RCX := mem[R15, el]:u64
.address 0x414EB6
0002405e: RBX := RAX
.address 0x414EB9
0002406b: #5063 := RCX - RBP
.address 0x414EB9
0002406e: CF := RCX < RBP
.address 0x414EB9
00024071: OF := high:1[(RCX ^ RBP) & (RCX ^ #5063)]
.address 0x414EB9
00024074: AF := 0x10 = (0x10 & (#5063 ^ RCX ^ RBP))
.address 0x414EB9
00024077: PF := ~low:1[let $1 = #5063 >> 4 ^ #5063 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414EB9
0002407a: SF := high:1[#5063]
.address 0x414EB9
0002407d: ZF := 0 = #5063
.address 0x414EBC
00024086: when ZF goto %00003199
00044d66: goto %0002408c

.address 0x414EE8
00003199: 
.address 0x414EE8
000031a4: #450 := R13
.address 0x414EE8
000031a7: OF := 0
.address 0x414EE8
000031aa: CF := 0
.address 0x414EE8
000031ad: AF := unknown[bits]:u1
.address 0x414EE8
000031b0: PF := ~low:1[let $1 = #450 >> 4 ^ #450 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414EE8
000031b3: SF := high:1[#450]
.address 0x414EE8
000031b6: ZF := 0 = #450
.address 0x414EEB
000031bd: mem := mem with [RSP + 8, el]:u64 <- RCX
.address 0x414EF0
000031c7: when ~ZF goto %000031c1
00044d67: goto %00023dc6

.address 0x414F30
000031c1: 
.address 0x414F30
000031d1: R12 := pad:64[pad:32[mem[RBP]]]
.address 0x414F35
000031de: #452 := low:8[R12]
.address 0x414F35
000031e1: OF := 0
.address 0x414F35
000031e4: CF := 0
.address 0x414F35
000031e7: AF := unknown[bits]:u1
.address 0x414F35
000031ea: PF := ~low:1[let $1 = #452 >> 4 ^ #452 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414F35
000031ed: SF := high:1[#452]
.address 0x414F35
000031f0: ZF := 0 = #452
.address 0x414F38
000031fa: when ZF goto %000031f4
00044d68: goto %00003206

.address 0x414F3A
00003206: 
.address 0x414F3A
0000320b: RSI := pad:64[extend:32[low:8[R12]]]
.address 0x414F3E
00003212: RDI := R13
.address 0x414F41
0000321f: RBP := 0
.address 0x414F41
00003222: AF := unknown[bits]:u1
.address 0x414F41
00003225: ZF := 1
.address 0x414F41
00003228: PF := 1
.address 0x414F41
0000322b: OF := 0
.address 0x414F41
0000322e: CF := 0
.address 0x414F41
00003231: SF := 0
.address 0x414F43
0000323a: RSP := RSP - 8
.address 0x414F43
0000323d: mem := mem with [RSP, el]:u64 <- 0x414F48
.address 0x414F43
00003240: call @sub_4039a0 with return %00003242

.address 0x414F48
00003242: 
.address 0x414F48
0000324d: #454 := RAX
.address 0x414F48
00003250: OF := 0
.address 0x414F48
00003253: CF := 0
.address 0x414F48
00003256: AF := unknown[bits]:u1
.address 0x414F48
00003259: PF := ~low:1[let $1 = #454 >> 4 ^ #454 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414F48
0000325c: SF := high:1[#454]
.address 0x414F48
0000325f: ZF := 0 = #454
.address 0x414F4B
00003266: RBX := 1
.address 0x414F50
0000326d: RCX := mem[RSP + 8, el]:u64
.address 0x414F55
00003276: when ZF goto %000031f4
00044d69: goto %0000327c

.address 0x414EF2
00023dc6: 
00044d6a: goto %000031f4

.address 0x414EBE
0002408c: 
.address 0x414EBE
00024091: RAX := pad:64[mem[R12, el]:u32]
.address 0x414EC2
0002409e: #5065 := low:32[RAX]
.address 0x414EC2
000240a1: OF := 0
.address 0x414EC2
000240a4: CF := 0
.address 0x414EC2
000240a7: AF := unknown[bits]:u1
.address 0x414EC2
000240aa: PF := ~low:1[let $1 = #5065 >> 4 ^ #5065 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414EC2
000240ad: SF := high:1[#5065]
.address 0x414EC2
000240b0: ZF := 0 = #5065
.address 0x414EC4
000240b9: when ZF goto %00003136
00044d6b: goto %000240bf

.address 0x414F28
00003136: 
.address 0x414F28
00003141: RBP := 0
.address 0x414F28
00003144: AF := unknown[bits]:u1
.address 0x414F28
00003147: ZF := 1
.address 0x414F28
0000314a: PF := 1
.address 0x414F28
0000314d: OF := 0
.address 0x414F28
00003150: CF := 0
.address 0x414F28
00003153: SF := 0
.address 0x414F2A
0000315b: goto %00003157

.address 0x414EC6
000240bf: 
.address 0x414EC6
000240ca: #5067 := low:32[RAX] - 0x22
.address 0x414EC6
000240cd: CF := low:32[RAX] < 0x22
.address 0x414EC6
000240d0: OF := high:1[(low:32[RAX] ^ 0x22) & (low:32[RAX] ^ #5067)]
.address 0x414EC6
000240d3: AF := 0x10 = (0x10 & (#5067 ^ low:32[RAX] ^ 0x22))
.address 0x414EC6
000240d6: PF := ~low:1[let $1 = #5067 >> 4 ^ #5067 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414EC6
000240d9: SF := high:1[#5067]
.address 0x414EC6
000240dc: ZF := 0 = #5067
.address 0x414EC9
000240e3: RBP := 1
.address 0x414ECE
000240ec: when ~ZF goto %000031f4
00044d6c: goto %00003157

.address 0x414EF8
000031f4: 
.address 0x414EF8
00003204: RBP := 4
00044d6d: goto %00003070

.address 0x414ED0
00003157: 
.address 0x414ED0
00003167: #448 := R13
.address 0x414ED0
0000316a: OF := 0
.address 0x414ED0
0000316d: CF := 0
.address 0x414ED0
00003170: AF := unknown[bits]:u1
.address 0x414ED0
00003173: PF := ~low:1[let $1 = #448 >> 4 ^ #448 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414ED0
00003176: SF := high:1[#448]
.address 0x414ED0
00003179: ZF := 0 = #448
.address 0x414ED3
00003183: when ZF goto %0000317d
00044d6e: goto %00023dc9

.address 0x414ED5
00023dc9: 
.address 0x414ED5
00023dce: R12 := pad:64[pad:32[mem[RCX]]]
.address 0x414ED9
00023ddb: #5048 := low:8[R12]
.address 0x414ED9
00023dde: OF := 0
.address 0x414ED9
00023de1: CF := 0
.address 0x414ED9
00023de4: AF := unknown[bits]:u1
.address 0x414ED9
00023de7: PF := ~low:1[let $1 = #5048 >> 4 ^ #5048 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414ED9
00023dea: SF := high:1[#5048]
.address 0x414ED9
00023ded: ZF := 0 = #5048
.address 0x414EDC
00023df6: when ~ZF goto %0000327c
00044d6f: goto %0000317d

.address 0x414F57
0000327c: 
.address 0x414F57
00003281: RSI := pad:64[extend:32[low:8[R12]]]
.address 0x414F5B
00003288: RDI := R13
.address 0x414F5E
0000328f: mem := mem with [RSP + 8, el]:u64 <- RCX
.address 0x414F63
00003298: RSP := RSP - 8
.address 0x414F63
0000329b: mem := mem with [RSP, el]:u64 <- 0x414F68
.address 0x414F63
0000329e: call @sub_4039a0 with return %000032a0

.address 0x414F68
000032a0: 
.address 0x414F68
000032ab: #456 := RAX
.address 0x414F68
000032ae: OF := 0
.address 0x414F68
000032b1: CF := 0
.address 0x414F68
000032b4: AF := unknown[bits]:u1
.address 0x414F68
000032b7: PF := ~low:1[let $1 = #456 >> 4 ^ #456 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414F68
000032ba: SF := high:1[#456]
.address 0x414F68
000032bd: ZF := 0 = #456
.address 0x414F6B
000032c4: RCX := mem[RSP + 8, el]:u64
.address 0x414F70
000032ce: when ZF goto %000032c8
00044d70: goto %00023c58

.address 0x414F76
00023c58: 
.address 0x414F76
00023c5d: RAX := pad:64[low:32[R12 - 0x45]]
.address 0x414F7B
00023c6a: #5037 := low:8[RAX] - 0x2F
.address 0x414F7B
00023c6d: CF := low:8[RAX] < 0x2F
.address 0x414F7B
00023c70: OF := high:1[(low:8[RAX] ^ 0x2F) & (low:8[RAX] ^ #5037)]
.address 0x414F7B
00023c73: AF := 0x10 = (0x10 & (#5037 ^ low:8[RAX] ^ 0x2F))
.address 0x414F7B
00023c76: PF := ~low:1[let $1 = #5037 >> 4 ^ #5037 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414F7B
00023c79: SF := high:1[#5037]
.address 0x414F7B
00023c7c: ZF := 0 = #5037
.address 0x414F7D
00023c86: when ~(CF | ZF) goto %00023c80
00044d71: goto %00023c99

.address 0x414F7F
00023c99: 
.address 0x414F7F
00023c9e: RDX := 0x814400308945
.address 0x414F89
00023cab: #5039 := low:6[RAX]
.address 0x414F89
00023cae: CF := low:1[RDX >> #5039]
.address 0x414F89
00023cb1: OF := unknown[bits]:u1
.address 0x414F89
00023cb4: SF := unknown[bits]:u1
.address 0x414F89
00023cb7: ZF := unknown[bits]:u1
.address 0x414F89
00023cba: AF := unknown[bits]:u1
.address 0x414F89
00023cbd: PF := unknown[bits]:u1
.address 0x414F8D
00023cc6: when ~CF goto %00023c80
00044d72: goto %00023ccc

.address 0x414F8F
00023ccc: 
.address 0x414F8F
00023cd1: RSI := 0x30
.address 0x414F94
00023cd8: RDI := R13
.address 0x414F97
00023cdf: mem := mem with [RSP + 8, el]:u64 <- RCX
.address 0x414F9C
00023ce8: RSP := RSP - 8
.address 0x414F9C
00023ceb: mem := mem with [RSP, el]:u64 <- 0x414FA1
.address 0x414F9C
00023cee: call @sub_4039a0 with return %00023cf0

.address 0x414FA1
00023cf0: 
.address 0x414FA1
00023cfb: #5040 := RAX
.address 0x414FA1
00023cfe: OF := 0
.address 0x414FA1
00023d01: CF := 0
.address 0x414FA1
00023d04: AF := unknown[bits]:u1
.address 0x414FA1
00023d07: PF := ~low:1[let $1 = #5040 >> 4 ^ #5040 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414FA1
00023d0a: SF := high:1[#5040]
.address 0x414FA1
00023d0d: ZF := 0 = #5040
.address 0x414FA4
00023d14: RCX := mem[RSP + 8, el]:u64
.address 0x414FA9
00023d1d: when ZF goto %00023c80
00044d73: goto %00023d23

.address 0x414FAB
00023d23: 
.address 0x414FAB
00023d28: RAX := pad:64[pad:32[mem[RCX + 1]]]
.address 0x414FAF
00023d35: #5042 := low:8[RAX] - 0x44
.address 0x414FAF
00023d38: CF := low:8[RAX] < 0x44
.address 0x414FAF
00023d3b: OF := high:1[(low:8[RAX] ^ 0x44) & (low:8[RAX] ^ #5042)]
.address 0x414FAF
00023d3e: AF := 0x10 = (0x10 & (#5042 ^ low:8[RAX] ^ 0x44))
.address 0x414FAF
00023d41: PF := ~low:1[let $1 = #5042 >> 4 ^ #5042 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414FAF
00023d44: SF := high:1[#5042]
.address 0x414FAF
00023d47: ZF := 0 = #5042
.address 0x414FB1
00023d51: when ZF goto %00023d4b
00044d74: goto %00023d6e

.address 0x414FB3
00023d6e: 
.address 0x414FB3
00023d79: #5044 := low:8[RAX] - 0x69
.address 0x414FB3
00023d7c: CF := low:8[RAX] < 0x69
.address 0x414FB3
00023d7f: OF := high:1[(low:8[RAX] ^ 0x69) & (low:8[RAX] ^ #5044)]
.address 0x414FB3
00023d82: AF := 0x10 = (0x10 & (#5044 ^ low:8[RAX] ^ 0x69))
.address 0x414FB3
00023d85: PF := ~low:1[let $1 = #5044 >> 4 ^ #5044 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414FB3
00023d88: SF := high:1[#5044]
.address 0x414FB3
00023d8b: ZF := 0 = #5044
.address 0x414FB5
00023d94: when ZF goto %000037ff
00044d75: goto %00023d9a

.address 0x415188
000037ff: 
.address 0x415188
0000380a: RDI := 0
.address 0x415188
0000380d: AF := unknown[bits]:u1
.address 0x415188
00003810: ZF := 1
.address 0x415188
00003813: PF := 1
.address 0x415188
00003816: OF := 0
.address 0x415188
00003819: CF := 0
.address 0x415188
0000381c: SF := 0
.address 0x41518A
00003829: #489 := mem[RCX + 2] - 0x42
.address 0x41518A
0000382c: CF := mem[RCX + 2] < 0x42
.address 0x41518A
0000382f: OF := high:1[(mem[RCX + 2] ^ 0x42) & (mem[RCX + 2] ^ #489)]
.address 0x41518A
00003832: AF := 0x10 = (0x10 & (#489 ^ mem[RCX + 2] ^ 0x42))
.address 0x41518A
00003835: PF := ~low:1[let $1 = #489 >> 4 ^ #489 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41518A
00003838: SF := high:1[#489]
.address 0x41518A
0000383b: ZF := 0 = #489
.address 0x41518E
00003842: RSI := 0x400
.address 0x415193
00003849: RDI := extract:63:8[RDI].pad:8[ZF]
.address 0x415197
00003850: RDI := pad:64[low:32[RDI + RDI + 1]]
.address 0x41519B
00003858: goto %00003854

.address 0x414FBB
00023d9a: 
.address 0x414FBB
00023da5: #5046 := low:8[RAX] - 0x42
.address 0x414FBB
00023da8: CF := low:8[RAX] < 0x42
.address 0x414FBB
00023dab: OF := high:1[(low:8[RAX] ^ 0x42) & (low:8[RAX] ^ #5046)]
.address 0x414FBB
00023dae: AF := 0x10 = (0x10 & (#5046 ^ low:8[RAX] ^ 0x42))
.address 0x414FBB
00023db1: PF := ~low:1[let $1 = #5046 >> 4 ^ #5046 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414FBB
00023db4: SF := high:1[#5046]
.address 0x414FBB
00023db7: ZF := 0 = #5046
.address 0x414FBD
00023dc0: when ~ZF goto %00023c80
00044d76: goto %00023d4b

.address 0x414FD0
00023c80: 
.address 0x414FD0
00023c90: RDI := 1
.address 0x414FD5
00023c97: RSI := 0x400
00044d77: goto %00003854

.address 0x414FBF
00023d4b: 
.address 0x414FBF
00023d5b: RDI := 2
.address 0x414FC4
00023d62: RSI := 0x3E8
.address 0x414FC9
00023d69: goto %00003854

.address 0x414FDA
00003854: 
.address 0x414FDA
00003865: #491 := low:32[R12]
.address 0x414FDA
00003868: R12 := pad:64[low:32[R12] - 0x42]
.address 0x414FDA
0000386b: CF := #491 < 0x42
.address 0x414FDA
0000386e: OF := high:1[(#491 ^ 0x42) & (#491 ^ low:32[R12])]
.address 0x414FDA
00003871: AF := 0x10 = (0x10 & (low:32[R12] ^ #491 ^ 0x42))
.address 0x414FDA
00003874: PF := ~low:1[let $1 = low:32[R12] >> 4 ^ low:32[R12] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x414FDA
00003877: SF := high:1[low:32[R12]]
.address 0x414FDA
0000387a: ZF := 0 = low:32[R12]
.address 0x414FDE
00003887: #494 := low:8[R12] - 0x35
.address 0x414FDE
0000388a: CF := low:8[R12] < 0x35
.address 0x414FDE
0000388d: OF := high:1[(low:8[R12] ^ 0x35) & (low:8[R12] ^ #494)]
.address 0x414FDE
00003890: AF := 0x10 = (0x10 & (#494 ^ low:8[R12] ^ 0x35))
.address 0x414FDE
00003893: PF := ~low:1[let $1 = #494 >> 4 ^ #494 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414FDE
00003896: SF := high:1[#494]
.address 0x414FDE
00003899: ZF := 0 = #494
.address 0x414FE2
000038a2: when ~(CF | ZF) goto %000032c8
00044d78: goto %000038a8

.address 0x41503C
000032c8: 
.address 0x41503C
000032d8: mem := mem with [R14, el]:u64 <- RBX
.address 0x41503F
000032e5: RBP := pad:64[low:32[RBP] | 2]
.address 0x41503F
000032e8: OF := 0
.address 0x41503F
000032eb: CF := 0
.address 0x41503F
000032ee: AF := unknown[bits]:u1
.address 0x41503F
000032f1: PF := ~low:1[let $1 = low:32[RBP] >> 4 ^ low:32[RBP] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41503F
000032f4: SF := high:1[low:32[RBP]]
.address 0x41503F
000032f7: ZF := 0 = low:32[RBP]
.address 0x415042
000032fe: goto %00003070

.address 0x414FE4
000038a8: 
.address 0x414FE4
000038ad: RDX := 0x41B080
.address 0x414FEB
000038b4: R12 := pad:64[pad:32[low:8[R12]]]
.address 0x414FEF
000038bb: RAX := extend:64[mem[RDX + (R12 << 2), el]:u32]
.address 0x414FF3
000038ca: #496 := RAX
.address 0x414FF3
000038cd: #497 := RDX
.address 0x414FF3
000038d0: RAX := RAX + #497
.address 0x414FF3
000038d3: CF := RAX < #496
.address 0x414FF3
000038d6: OF := high:1[#496] = high:1[#497] & (high:1[#496] | high:1[RAX]) & ~(
high:1[#496] & high:1[RAX])
.address 0x414FF3
000038d9: AF := 0x10 = (0x10 & (RAX ^ #496 ^ #497))
.address 0x414FF3
000038dc: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414FF3
000038df: SF := high:1[RAX]
.address 0x414FF3
000038e2: ZF := 0 = RAX
.address 0x414FF6
000038ea: call RAX with noreturn

.address 0x414EDE
0000317d: 
.address 0x414EDE
0000318d: mem := mem with [R14, el]:u64 <- RBX
.address 0x414EE1
00003194: goto %00003070

.address 0x414EFD
00003070: 
.address 0x414EFD
0000307a: RDI := mem[RSP + 0x18, el]:u64
.address 0x414F02
00003087: RDI := RDI ^ mem[FS_BASE + 0x28, el]:u64
.address 0x414F02
0000308a: OF := 0
.address 0x414F02
0000308d: CF := 0
.address 0x414F02
00003090: AF := unknown[bits]:u1
.address 0x414F02
00003093: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414F02
00003096: SF := high:1[RDI]
.address 0x414F02
00003099: ZF := 0 = RDI
.address 0x414F0B
000030a0: RAX := pad:64[low:32[RBP]]
.address 0x414F0D
000030aa: when ~ZF goto %000030a4
00044d79: goto %000030be

.address 0x4151A0
000030a4: 
.address 0x4151A0
000030b6: RSP := RSP - 8
.address 0x4151A0
000030b9: mem := mem with [RSP, el]:u64 <- 0x4151A5
.address 0x4151A0
000030bc: call @sub_403970 with return %00002ee4

.address 0x4151A5
00002ee4: 
.address 0x4151A5
00002ef4: RCX := 0x41B158
.address 0x4151AC
00002efb: RSI := 0x41AF00
.address 0x4151B3
00002f02: RDI := 0x41AF10
.address 0x4151BA
00002f09: RDX := 0x60
.address 0x4151BF
00002f12: RSP := RSP - 8
.address 0x4151BF
00002f15: mem := mem with [RSP, el]:u64 <- 0x4151C4
.address 0x4151BF
00002f18: call @sub_403a30 with return %00002f1a

.address 0x4151C4
00002f1a: 
.address 0x4151C4
00002f1f: R9 := 1
.address 0x4151CA
00002f2c: RBX := 0xFFFFFFFFFFFFFFFF
.address 0x4151CA
00002f2f: OF := 0
.address 0x4151CA
00002f32: CF := 0
.address 0x4151CA
00002f35: AF := unknown[bits]:u1
.address 0x4151CA
00002f38: PF := 1
.address 0x4151CA
00002f3b: SF := 1
.address 0x4151CA
00002f3e: ZF := 0
.address 0x4151CE
00002f46: goto %00002f42

.address 0x41513B
00002f42: 
.address 0x41513B
00002f53: #432 := low:32[R8]
.address 0x41513B
00002f56: R8 := pad:64[low:32[R8] - 1]
.address 0x41513B
00002f59: CF := #432 < 1
.address 0x41513B
00002f5c: OF := high:1[(#432 ^ 1) & (#432 ^ low:32[R8])]
.address 0x41513B
00002f5f: AF := 0x10 = (0x10 & (low:32[R8] ^ #432 ^ 1))
.address 0x41513B
00002f62: PF := ~low:1[let $1 = low:32[R8] >> 4 ^ low:32[R8] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41513B
00002f65: SF := high:1[low:32[R8]]
.address 0x41513B
00002f68: ZF := 0 = low:32[R8]
.address 0x41513F
00002f72: when ~ZF goto %00002f6c
00044d7a: goto %00002fb9

.address 0x415141
00002fb9: 
.address 0x415141
00002fbf: goto %00002fbb

.address 0x415095
00002fbb: 
.address 0x415095
00002fcb: RBP := pad:64[low:32[RBP] | low:32[R9]]
.address 0x415095
00002fce: OF := 0
.address 0x415095
00002fd1: CF := 0
.address 0x415095
00002fd4: AF := unknown[bits]:u1
.address 0x415095
00002fd7: PF := ~low:1[let $1 = low:32[RBP] >> 4 ^ low:32[RBP] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415095
00002fda: SF := high:1[low:32[RBP]]
.address 0x415095
00002fdd: ZF := 0 = low:32[RBP]
.address 0x415098
00002fe5: goto %00002fe1

.address 0x415020
00002fe1: 
.address 0x415020
00002feb: RDI := extend:64[low:32[RDI]]
.address 0x415023
00002ff2: RAX := pad:64[low:32[RBP]]
.address 0x415025
00003001: #437 := RCX
.address 0x415025
00003004: #438 := RDI
.address 0x415025
00003007: RCX := RCX + #438
.address 0x415025
0000300a: CF := RCX < #437
.address 0x415025
0000300d: OF := high:1[#437] = high:1[#438] & (high:1[#437] | high:1[RCX]) & ~(
high:1[#437] & high:1[RCX])
.address 0x415025
00003010: AF := 0x10 = (0x10 & (RCX ^ #437 ^ #438))
.address 0x415025
00003013: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415025
00003016: SF := high:1[RCX]
.address 0x415025
00003019: ZF := 0 = RCX
.address 0x415028
00003026: RAX := pad:64[low:32[RAX] | 2]
.address 0x415028
00003029: OF := 0
.address 0x415028
0000302c: CF := 0
.address 0x415028
0000302f: AF := unknown[bits]:u1
.address 0x415028
00003032: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415028
00003035: SF := high:1[low:32[RAX]]
.address 0x415028
00003038: ZF := 0 = low:32[RAX]
.address 0x41502B
0000303f: mem := mem with [R15, el]:u64 <- RCX
.address 0x41502E
0000304c: #441 := mem[RCX]
.address 0x41502E
0000304f: CF := mem[RCX] < 0
.address 0x41502E
00003052: OF := high:1[mem[RCX] & (mem[RCX] ^ #441)]
.address 0x41502E
00003055: AF := 0x10 = (0x10 & (#441 ^ mem[RCX]))
.address 0x41502E
00003058: PF := ~low:1[let $1 = #441 >> 4 ^ #441 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41502E
0000305b: SF := high:1[#441]
.address 0x41502E
0000305e: ZF := 0 = #441
.address 0x415031
00003065: mem := mem with [R14, el]:u64 <- RBX
.address 0x415034
0000306c: RBP := pad:64[if ~ZF then low:32[RAX] else low:32[RBP]]
.address 0x415037
00003074: goto %00003070

.address 0x41512C
00002f6c: 
.address 0x41512C
00002f7c: RAX := RBX
.address 0x41512F
00002f8b: #435 := pad:128[RAX] * pad:128[RSI]
.address 0x41512F
00002f8e: RAX := extract:63:0[#435]
.address 0x41512F
00002f91: RDX := extract:127:64[#435]
.address 0x41512F
00002f94: OF := extract:127:64[#435] <> 0
.address 0x41512F
00002f97: CF := extract:127:64[#435] <> 0
.address 0x41512F
00002f9a: SF := unknown[bits]:u1
.address 0x41512F
00002f9d: ZF := unknown[bits]:u1
.address 0x41512F
00002fa0: AF := unknown[bits]:u1
.address 0x41512F
00002fa3: PF := unknown[bits]:u1
.address 0x415132
00002faa: RBX := RAX
.address 0x415135
00002fb3: when OF goto %00002f1a
00044d7b: goto %00002f42

.address 0x414F13
000030be: 
.address 0x414F13
000030ca: #444 := RSP
.address 0x414F13
000030cd: RSP := RSP + 0x28
.address 0x414F13
000030d0: CF := RSP < #444
.address 0x414F13
000030d3: OF := ~high:1[#444] & (high:1[#444] | high:1[RSP]) & ~(high:1[#444] & high:1[RSP])
.address 0x414F13
000030d6: AF := 0x10 = (0x10 & (RSP ^ #444 ^ 0x28))
.address 0x414F13
000030d9: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414F13
000030dc: SF := high:1[RSP]
.address 0x414F13
000030df: ZF := 0 = RSP
.address 0x414F17
000030e7: RBX := mem[RSP, el]:u64
.address 0x414F17
000030ea: RSP := RSP + 8
.address 0x414F18
000030f2: RBP := mem[RSP, el]:u64
.address 0x414F18
000030f5: RSP := RSP + 8
.address 0x414F19
000030fd: R12 := mem[RSP, el]:u64
.address 0x414F19
00003100: RSP := RSP + 8
.address 0x414F1B
00003108: R13 := mem[RSP, el]:u64
.address 0x414F1B
0000310b: RSP := RSP + 8
.address 0x414F1D
00003113: R14 := mem[RSP, el]:u64
.address 0x414F1D
00003116: RSP := RSP + 8
.address 0x414F1F
0000311e: R15 := mem[RSP, el]:u64
.address 0x414F1F
00003121: RSP := RSP + 8
.address 0x414F21
0000312a: #447 := mem[RSP, el]:u64
.address 0x414F21
0000312d: RSP := RSP + 8
.address 0x414F21
00003131: call #447 with noreturn

.address 0x414E90
00023fb5: 
.address 0x414E90
00023fcc: #5058 := RAX
.address 0x414E90
00023fcf: RAX := RAX + 1
.address 0x414E90
00023fd2: CF := RAX < #5058
.address 0x414E90
00023fd5: OF := ~high:1[#5058] & (high:1[#5058] | high:1[RAX]) & ~(high:1[#5058] & high:1[RAX])
.address 0x414E90
00023fd8: AF := 0x10 = (0x10 & (RAX ^ #5058 ^ 1))
.address 0x414E90
00023fdb: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x414E90
00023fde: SF := high:1[RAX]
.address 0x414E90
00023fe1: ZF := 0 = RAX
.address 0x414E94
00023fe8: RBX := pad:64[pad:32[mem[RAX]]]
00044d7c: goto %00023f88


.address 0x415240
00044565: sub sub_415240()
.address 0x415240
00003949: 
.address 0x415240
00003954: #500 := low:32[RDI]
.address 0x415240
00003957: OF := 0
.address 0x415240
0000395a: CF := 0
.address 0x415240
0000395d: AF := unknown[bits]:u1
.address 0x415240
00003960: PF := ~low:1[let $1 = #500 >> 4 ^ #500 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415240
00003963: SF := high:1[#500]
.address 0x415240
00003966: ZF := 0 = #500
.address 0x415242
0000396f: #502 := RBX
.address 0x415242
00003972: RSP := RSP - 8
.address 0x415242
00003975: mem := mem with [RSP, el]:u64 <- #502
.address 0x415243
0000397f: when ZF goto %00003979
00044d7d: goto %00023a93

.address 0x415290
00003979: 
.address 0x415290
0000398b: RSP := RSP - 8
.address 0x415290
0000398e: mem := mem with [RSP, el]:u64 <- 0x415295
.address 0x415290
00003991: call @sub_4037f0 with return %00003993

.address 0x415295
00003993: 
.address 0x415295
00003998: mem := mem with [RAX, el]:u32 <- 0x5F
.address 0x41529B
0000399f: RAX := 0xFFFFFFFF
.address 0x4152A0
000039a7: RBX := mem[RSP, el]:u64
.address 0x4152A0
000039aa: RSP := RSP + 8
.address 0x4152A1
000039b3: #503 := mem[RSP, el]:u64
.address 0x4152A1
000039b6: RSP := RSP + 8
.address 0x4152A1
000039ba: call #503 with noreturn

.address 0x415245
00023a93: 
.address 0x415245
00023a9e: #5022 := low:32[RDI] - 0xA
.address 0x415245
00023aa1: CF := low:32[RDI] < 0xA
.address 0x415245
00023aa4: OF := high:1[(low:32[RDI] ^ 0xA) & (low:32[RDI] ^ #5022)]
.address 0x415245
00023aa7: AF := 0x10 = (0x10 & (#5022 ^ low:32[RDI] ^ 0xA))
.address 0x415245
00023aaa: PF := ~low:1[let $1 = #5022 >> 4 ^ #5022 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415245
00023aad: SF := high:1[#5022]
.address 0x415245
00023ab0: ZF := 0 = #5022
.address 0x415248
00023ab7: RAX := pad:64[low:32[RDI]]
.address 0x41524A
00023ac1: when ZF goto %00023abb
00044d7e: goto %00023b14

.address 0x415250
00023abb: 
.address 0x415250
00023acb: RDX := mem[RSI, el]:u64
.address 0x415253
00023ad2: RDI := 0x417CAB
.address 0x41525A
00023ad9: RBX := RSI
.address 0x41525D
00023ae0: RCX := 0xA
.address 0x415262
00023ae7: RSI := RDX
.address 0x415265
00023aef: #5028 := 1
.address 0x415265
00023b11: goto %00023b0b

00023af1: 
.address 0x415265
00023af2: #5024 := mem[RSI]
.address 0x415265
00023af4: #5025 := mem[RDI]
.address 0x415265
00023af6: #5026 := #5024 - #5025
.address 0x415265
00023af8: RSI := RSI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x415265
00023afa: RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
.address 0x415265
00023afc: CF := #5024 < #5025
.address 0x415265
00023afe: OF := high:1[(#5024 ^ #5025) & (#5024 ^ #5026)]
.address 0x415265
00023b00: AF := 0x10 = (0x10 & (#5026 ^ #5024 ^ #5025))
.address 0x415265
00023b02: PF := ~low:1[let $1 = #5026 >> 4 ^ #5026 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415265
00023b04: SF := high:1[#5026]
.address 0x415265
00023b06: ZF := 0 = #5026
.address 0x415265
00023b08: RCX := RCX - 1
.address 0x415265
00023b0a: #5028 := ZF
.address 0x415265
00023b0f: goto %00023b0c

00023b0b: 
.address 0x415265
00023b0e: goto %00023b0c

00023b0c: 
.address 0x415265
00023b0d: when RCX <> 0 & #5028 goto %00023af1
00044d7f: goto %00023b19

00023b19: 
.address 0x415267
00023b1a: when ~ZF goto %00023b14
00044d80: goto %00023b3d

.address 0x415269
00023b3d: 
.address 0x415269
00023b42: RDI := RDX
.address 0x41526C
00023b4b: RSP := RSP - 8
.address 0x41526C
00023b4e: mem := mem with [RSP, el]:u64 <- 0x415271
.address 0x41526C
00023b51: call @sub_403da0 with return %00023b53

.address 0x415271
00023b53: 
.address 0x415271
00023b58: mem := mem with [RBX, el]:u64 <- 0
.address 0x415278
00023b61: RSP := RSP - 8
.address 0x415278
00023b64: mem := mem with [RSP, el]:u64 <- 0x41527D
.address 0x415278
00023b67: call @sub_4037f0 with return %00023b69

.address 0x41527D
00023b69: 
.address 0x41527D
00023b6e: mem := mem with [RAX, el]:u32 <- 0x3D
.address 0x415283
00023b75: RAX := 0xFFFFFFFF
.address 0x415288
00023b7d: RBX := mem[RSP, el]:u64
.address 0x415288
00023b80: RSP := RSP + 8
.address 0x415289
00023b89: #5030 := mem[RSP, el]:u64
.address 0x415289
00023b8c: RSP := RSP + 8
.address 0x415289
00023b90: call #5030 with noreturn

.address 0x41524C
00023b14: 
.address 0x41524C
00023b25: RBX := mem[RSP, el]:u64
.address 0x41524C
00023b28: RSP := RSP + 8
.address 0x41524D
00023b31: #5029 := mem[RSP, el]:u64
.address 0x41524D
00023b34: RSP := RSP + 8
.address 0x41524D
00023b38: call #5029 with noreturn


.address 0x4152B0
0004456a: sub sub_4152b0()
.address 0x4152B0
000039c2: 
.address 0x4152B0
000039c9: #504 := RBX
.address 0x4152B0
000039cc: RSP := RSP - 8
.address 0x4152B0
000039cf: mem := mem with [RSP, el]:u64 <- #504
.address 0x4152B1
000039d6: RBX := RSI
.address 0x4152B4
000039df: RSP := RSP - 8
.address 0x4152B4
000039e2: mem := mem with [RSP, el]:u64 <- 0x4152B9
.address 0x4152B4
000039e5: call @sub_403ba0 with return %000039e7

.address 0x4152B9
000039e7: 
.address 0x4152B9
000039ec: RSI := RBX
.address 0x4152BC
000039f3: RDI := pad:64[low:32[RAX]]
.address 0x4152BE
000039fb: RBX := mem[RSP, el]:u64
.address 0x4152BE
000039fe: RSP := RSP + 8
.address 0x4152BF
00003a05: call @sub_415240 with noreturn


.address 0x4152D0
0004456b: sub sub_4152d0()
.address 0x4152D0
00003a0d: 
.address 0x4152D0
00003a14: #505 := RBX
.address 0x4152D0
00003a17: RSP := RSP - 8
.address 0x4152D0
00003a1a: mem := mem with [RSP, el]:u64 <- #505
.address 0x4152D1
00003a21: RBX := RSI
.address 0x4152D4
00003a2a: RSP := RSP - 8
.address 0x4152D4
00003a2d: mem := mem with [RSP, el]:u64 <- 0x4152D9
.address 0x4152D4
00003a30: call @sub_403b10 with return %00003a32

.address 0x4152D9
00003a32: 
.address 0x4152D9
00003a37: RSI := RBX
.address 0x4152DC
00003a3e: RDI := pad:64[low:32[RAX]]
.address 0x4152DE
00003a46: RBX := mem[RSP, el]:u64
.address 0x4152DE
00003a49: RSP := RSP + 8
.address 0x4152DF
00003a50: call @sub_415240 with noreturn


.address 0x415310
0004456c: sub sub_415310()
.address 0x415310
00003aa3: 
.address 0x415310
00003aaa: #507 := R13
.address 0x415310
00003aad: RSP := RSP - 8
.address 0x415310
00003ab0: mem := mem with [RSP, el]:u64 <- #507
.address 0x415312
00003ab9: #508 := R12
.address 0x415312
00003abc: RSP := RSP - 8
.address 0x415312
00003abf: mem := mem with [RSP, el]:u64 <- #508
.address 0x415314
00003ac6: R13 := RSI
.address 0x415317
00003acf: #509 := RBP
.address 0x415317
00003ad2: RSP := RSP - 8
.address 0x415317
00003ad5: mem := mem with [RSP, el]:u64 <- #509
.address 0x415318
00003ade: #510 := RBX
.address 0x415318
00003ae1: RSP := RSP - 8
.address 0x415318
00003ae4: mem := mem with [RSP, el]:u64 <- #510
.address 0x415319
00003aeb: RBX := RDI
.address 0x41531C
00003af2: R12 := RDX
.address 0x41531F
00003b00: #511 := RSP
.address 0x41531F
00003b03: RSP := RSP - 0x18
.address 0x41531F
00003b06: CF := #511 < 0x18
.address 0x41531F
00003b09: OF := high:1[(#511 ^ 0x18) & (#511 ^ RSP)]
.address 0x41531F
00003b0c: AF := 0x10 = (0x10 & (RSP ^ #511 ^ 0x18))
.address 0x41531F
00003b0f: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41531F
00003b12: SF := high:1[RSP]
.address 0x41531F
00003b15: ZF := 0 = RSP
.address 0x415323
00003b1c: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x41532C
00003b23: mem := mem with [RSP + 8, el]:u64 <- RAX
.address 0x415331
00003b30: RAX := 0
.address 0x415331
00003b33: AF := unknown[bits]:u1
.address 0x415331
00003b36: ZF := 1
.address 0x415331
00003b39: PF := 1
.address 0x415331
00003b3c: OF := 0
.address 0x415331
00003b3f: CF := 0
.address 0x415331
00003b42: SF := 0
.address 0x415333
00003b49: RAX := low:64[RSP + 4]
.address 0x415338
00003b56: #514 := RDI
.address 0x415338
00003b59: OF := 0
.address 0x415338
00003b5c: CF := 0
.address 0x415338
00003b5f: AF := unknown[bits]:u1
.address 0x415338
00003b62: PF := ~low:1[let $1 = #514 >> 4 ^ #514 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415338
00003b65: SF := high:1[#514]
.address 0x415338
00003b68: ZF := 0 = #514
.address 0x41533B
00003b6f: RBX := if ZF then RAX else RBX
.address 0x41533F
00003b76: RDI := RBX
.address 0x415342
00003b7f: RSP := RSP - 8
.address 0x415342
00003b82: mem := mem with [RSP, el]:u64 <- 0x415347
.address 0x415342
00003b85: call @sub_403990 with return %00003b87

.address 0x415347
00003b87: 
.address 0x415347
00003b92: #516 := RAX - 0xFFFFFFFFFFFFFFFD
.address 0x415347
00003b95: CF := RAX < 0xFFFFFFFFFFFFFFFD
.address 0x415347
00003b98: OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFD) & (RAX ^ #516)]
.address 0x415347
00003b9b: AF := 0x10 = (0x10 & (#516 ^ RAX ^ 0xFFFFFFFFFFFFFFFD))
.address 0x415347
00003b9e: PF := ~low:1[let $1 = #516 >> 4 ^ #516 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415347
00003ba1: SF := high:1[#516]
.address 0x415347
00003ba4: ZF := 0 = #516
.address 0x41534B
00003bab: RBP := RAX
.address 0x41534E
00003bb5: when CF | ZF goto %00003baf
00044d81: goto %000239f5

.address 0x415350
000239f5: 
.address 0x415350
00023a00: #5018 := R12
.address 0x415350
00023a03: OF := 0
.address 0x415350
00023a06: CF := 0
.address 0x415350
00023a09: AF := unknown[bits]:u1
.address 0x415350
00023a0c: PF := ~low:1[let $1 = #5018 >> 4 ^ #5018 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415350
00023a0f: SF := high:1[#5018]
.address 0x415350
00023a12: ZF := 0 = #5018
.address 0x415353
00023a1b: when ZF goto %00003baf
00044d82: goto %00023a21

.address 0x415355
00023a21: 
.address 0x415355
00023a2c: RDI := 0
.address 0x415355
00023a2f: AF := unknown[bits]:u1
.address 0x415355
00023a32: ZF := 1
.address 0x415355
00023a35: PF := 1
.address 0x415355
00023a38: OF := 0
.address 0x415355
00023a3b: CF := 0
.address 0x415355
00023a3e: SF := 0
.address 0x415357
00023a47: RSP := RSP - 8
.address 0x415357
00023a4a: mem := mem with [RSP, el]:u64 <- 0x41535C
.address 0x415357
00023a4d: call @sub_40d830 with return %00023a4f

.address 0x41535C
00023a4f: 
.address 0x41535C
00023a5a: #5020 := low:8[RAX]
.address 0x41535C
00023a5d: OF := 0
.address 0x41535C
00023a60: CF := 0
.address 0x41535C
00023a63: AF := unknown[bits]:u1
.address 0x41535C
00023a66: PF := ~low:1[let $1 = #5020 >> 4 ^ #5020 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41535C
00023a69: SF := high:1[#5020]
.address 0x41535C
00023a6c: ZF := 0 = #5020
.address 0x41535E
00023a75: when ~ZF goto %00003baf
00044d83: goto %00023a7b

.address 0x415360
00023a7b: 
.address 0x415360
00023a80: RAX := pad:64[pad:32[mem[R13]]]
.address 0x415365
00023a87: RBP := 1
.address 0x41536A
00023a8e: mem := mem with [RBX, el]:u32 <- low:32[RAX]
00044d84: goto %00003baf

.address 0x415370
00003baf: 
.address 0x415370
00003bbf: RDX := mem[RSP + 8, el]:u64
.address 0x415375
00003bcc: RDX := RDX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x415375
00003bcf: OF := 0
.address 0x415375
00003bd2: CF := 0
.address 0x415375
00003bd5: AF := unknown[bits]:u1
.address 0x415375
00003bd8: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415375
00003bdb: SF := high:1[RDX]
.address 0x415375
00003bde: ZF := 0 = RDX
.address 0x41537E
00003be5: RAX := RBP
.address 0x415381
00003bef: when ~ZF goto %00003be9
00044d85: goto %00023996

.address 0x41538E
00003be9: 
.address 0x41538E
00003bfb: RSP := RSP - 8
.address 0x41538E
00003bfe: mem := mem with [RSP, el]:u64 <- 0x415393
.address 0x41538E
00003c01: call @sub_403970 with return %00003c03

.address 0x415393
00003c03: 
.address 0x4153A0
00003c0e: RSI := 0x41AEEF
00044d86: call @sub_4153a7 with noreturn

.address 0x415383
00023996: 
.address 0x415383
000239a2: #5014 := RSP
.address 0x415383
000239a5: RSP := RSP + 0x18
.address 0x415383
000239a8: CF := RSP < #5014
.address 0x415383
000239ab: OF := ~high:1[#5014] & (high:1[#5014] | high:1[RSP]) & ~(high:1[#5014] & high:1[RSP])
.address 0x415383
000239ae: AF := 0x10 = (0x10 & (RSP ^ #5014 ^ 0x18))
.address 0x415383
000239b1: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415383
000239b4: SF := high:1[RSP]
.address 0x415383
000239b7: ZF := 0 = RSP
.address 0x415387
000239bf: RBX := mem[RSP, el]:u64
.address 0x415387
000239c2: RSP := RSP + 8
.address 0x415388
000239ca: RBP := mem[RSP, el]:u64
.address 0x415388
000239cd: RSP := RSP + 8
.address 0x415389
000239d5: R12 := mem[RSP, el]:u64
.address 0x415389
000239d8: RSP := RSP + 8
.address 0x41538B
000239e0: R13 := mem[RSP, el]:u64
.address 0x41538B
000239e3: RSP := RSP + 8
.address 0x41538D
000239ec: #5017 := mem[RSP, el]:u64
.address 0x41538D
000239ef: RSP := RSP + 8
.address 0x41538D
000239f3: call #5017 with noreturn


.address 0x4153A7
00044573: sub sub_4153a7()
.address 0x4153A7
00003c10: 
.address 0x4153A7
00003c1c: #519 := RSP
.address 0x4153A7
00003c1f: RSP := RSP - 8
.address 0x4153A7
00003c22: CF := #519 < 8
.address 0x4153A7
00003c25: OF := high:1[(#519 ^ 8) & (#519 ^ RSP)]
.address 0x4153A7
00003c28: AF := 0x10 = (0x10 & (RSP ^ #519 ^ 8))
.address 0x4153A7
00003c2b: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4153A7
00003c2e: SF := high:1[RSP]
.address 0x4153A7
00003c31: ZF := 0 = RSP
.address 0x4153AB
00003c38: RDX := 5
.address 0x4153B0
00003c45: RDI := 0
.address 0x4153B0
00003c48: AF := unknown[bits]:u1
.address 0x4153B0
00003c4b: ZF := 1
.address 0x4153B0
00003c4e: PF := 1
.address 0x4153B0
00003c51: OF := 0
.address 0x4153B0
00003c54: CF := 0
.address 0x4153B0
00003c57: SF := 0
.address 0x4153B2
00003c60: RSP := RSP - 8
.address 0x4153B2
00003c63: mem := mem with [RSP, el]:u64 <- 0x4153B7
.address 0x4153B2
00003c66: call @sub_403930 with return %00003c68

.address 0x4153B7
00003c68: 
.address 0x4153B7
00003c6d: RDI := mem[0x6202C0, el]:u64
.address 0x4153BE
00003c74: RDX := 0x41AB90
.address 0x4153C5
00003c7b: RCX := RAX
.address 0x4153C8
00003c82: RSI := 1
.address 0x4153CD
00003c8f: RAX := 0
.address 0x4153CD
00003c92: AF := unknown[bits]:u1
.address 0x4153CD
00003c95: ZF := 1
.address 0x4153CD
00003c98: PF := 1
.address 0x4153CD
00003c9b: OF := 0
.address 0x4153CD
00003c9e: CF := 0
.address 0x4153CD
00003ca1: SF := 0
.address 0x4153CF
00003caa: RSP := RSP - 8
.address 0x4153CF
00003cad: mem := mem with [RSP, el]:u64 <- 0x4153D4
.address 0x4153CF
00003cb0: call @sub_403df0 with return %00003cb2

.address 0x4153D4
00003cb2: 
.address 0x4153D4
00003cb7: RDI := pad:64[mem[0x6201F8, el]:u32]
.address 0x4153DA
00003cc0: RSP := RSP - 8
.address 0x4153DA
00003cc3: mem := mem with [RSP, el]:u64 <- 0x4153DF
.address 0x4153DA
00003cc6: call @sub_403dd0 with return %00003cc8

.address 0x4153DF
00003cc8: 
00044d87: call @sub_4153e0 with noreturn


.address 0x4153E0
00044575: sub sub_4153e0()
.address 0x4153E0
00003ccb: 
.address 0x4153E0
00003cd6: #522 := mem[RDI + 0x50] & 1
.address 0x4153E0
00003cd9: OF := 0
.address 0x4153E0
00003cdc: CF := 0
.address 0x4153E0
00003cdf: AF := unknown[bits]:u1
.address 0x4153E0
00003ce2: PF := ~low:1[let $1 = #522 >> 4 ^ #522 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4153E0
00003ce5: SF := high:1[#522]
.address 0x4153E0
00003ce8: ZF := 0 = #522
.address 0x4153E4
00003cef: RAX := mem[RDI + 0x38, el]:u64
.address 0x4153E8
00003cf9: when ~ZF goto %00003cf3
00044d88: goto %00023984

.address 0x4153F0
00003cf3: 
.address 0x4153F0
00003d03: RDI := mem[RDI + 0x48, el]:u64
.address 0x4153F4
00003d0b: call RAX with noreturn

.address 0x4153EA
00023984: 
.address 0x4153EA
00023989: RDI := RSI
.address 0x4153ED
00023991: call RAX with noreturn


.address 0x415400
00044577: sub sub_415400()
.address 0x415400
00003d10: 
.address 0x415400
00003d1b: #524 := mem[RDI + 0x50] & 1
.address 0x415400
00003d1e: OF := 0
.address 0x415400
00003d21: CF := 0
.address 0x415400
00003d24: AF := unknown[bits]:u1
.address 0x415400
00003d27: PF := ~low:1[let $1 = #524 >> 4 ^ #524 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415400
00003d2a: SF := high:1[#524]
.address 0x415400
00003d2d: ZF := 0 = #524
.address 0x415404
00003d34: RAX := mem[RDI + 0x40, el]:u64
.address 0x415408
00003d3e: when ~ZF goto %00003d38
00044d89: goto %00023972

.address 0x415410
00003d38: 
.address 0x415410
00003d48: RDI := mem[RDI + 0x48, el]:u64
.address 0x415414
00003d50: call RAX with noreturn

.address 0x41540A
00023972: 
.address 0x41540A
00023977: RDI := RSI
.address 0x41540D
0002397f: call RAX with noreturn


.address 0x415420
00044579: sub sub_415420()
.address 0x415420
00003d55: 
.address 0x415420
00003d60: #526 := RDX
.address 0x415420
00003d63: OF := 0
.address 0x415420
00003d66: CF := 0
.address 0x415420
00003d69: AF := unknown[bits]:u1
.address 0x415420
00003d6c: PF := ~low:1[let $1 = #526 >> 4 ^ #526 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415420
00003d6f: SF := high:1[#526]
.address 0x415420
00003d72: ZF := 0 = #526
.address 0x415423
00003d7b: #528 := R12
.address 0x415423
00003d7e: RSP := RSP - 8
.address 0x415423
00003d81: mem := mem with [RSP, el]:u64 <- #528
.address 0x415425
00003d8a: #529 := RBP
.address 0x415425
00003d8d: RSP := RSP - 8
.address 0x415425
00003d90: mem := mem with [RSP, el]:u64 <- #529
.address 0x415426
00003d99: #530 := RBX
.address 0x415426
00003d9c: RSP := RSP - 8
.address 0x415426
00003d9f: mem := mem with [RSP, el]:u64 <- #530
.address 0x415427
00003da6: RBX := RDI
.address 0x41542A
00003db0: when ZF goto %00003daa
00044d8a: goto %00023964

.address 0x415490
00003daa: 
.address 0x415490
00003dba: R12 := 0xF
.address 0x415496
00003dc1: RBP := 0x10
.address 0x41549B
00003dc9: goto %00003dc5

.address 0x41542C
00023964: 
.address 0x41542C
00023969: R12 := low:64[RDX - 1]
.address 0x415430
00023970: RBP := RDX
00044d8b: goto %00003dc5

.address 0x415433
00003dc5: 
.address 0x415433
00003dd5: #531 := RSI
.address 0x415433
00003dd8: OF := 0
.address 0x415433
00003ddb: CF := 0
.address 0x415433
00003dde: AF := unknown[bits]:u1
.address 0x415433
00003de1: PF := ~low:1[let $1 = #531 >> 4 ^ #531 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415433
00003de4: SF := high:1[#531]
.address 0x415433
00003de7: ZF := 0 = #531
.address 0x415436
00003dee: RAX := 0xFE0
.address 0x41543B
00003df5: mem := mem with [RBX + 0x30, el]:u64 <- R12
.address 0x41543F
00003dfc: RSI := if ZF then RAX else RSI
.address 0x415443
00003e03: RDI := RBX
.address 0x415446
00003e0a: mem := mem with [RBX, el]:u64 <- RSI
.address 0x415449
00003e13: RSP := RSP - 8
.address 0x415449
00003e16: mem := mem with [RSP, el]:u64 <- 0x41544E
.address 0x415449
00003e19: call @sub_4153e0 with return %00003e1b

.address 0x41544E
00003e1b: 
.address 0x41544E
00003e26: #533 := RAX
.address 0x41544E
00003e29: OF := 0
.address 0x41544E
00003e2c: CF := 0
.address 0x41544E
00003e2f: AF := unknown[bits]:u1
.address 0x41544E
00003e32: PF := ~low:1[let $1 = #533 >> 4 ^ #533 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41544E
00003e35: SF := high:1[#533]
.address 0x41544E
00003e38: ZF := 0 = #533
.address 0x415451
00003e3f: mem := mem with [RBX + 8, el]:u64 <- RAX
.address 0x415455
00003e49: when ZF goto %00003e43
00044d8c: goto %00023870

.address 0x41549D
00003e43: 
.address 0x41549D
00003e56: #535 := mem[0x620260, el]:u64
.address 0x41549D
00003e59: RSP := RSP - 8
.address 0x41549D
00003e5c: mem := mem with [RSP, el]:u64 <- 0x4154A3
.address 0x41549D
00003e60: call #535 with return %00003e62

.address 0x4154A3
00003e62: 
00044d8d: call @_obstack_begin with noreturn

.address 0x415457
00023870: 
.address 0x415457
00023875: RDX := low:64[RAX + R12 + 0x10]
.address 0x41545C
00023883: #5006 := RBP
.address 0x41545C
00023886: RBP := -RBP
.address 0x41545C
00023889: CF := if #5006 = 0 then 0 else 1
.address 0x41545C
0002388c: OF := if #5006 = 0x8000000000000000 then 1 else 0
.address 0x41545C
0002388f: AF := 0x10 = (0x10 & (RBP ^ #5006))
.address 0x41545C
00023892: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41545C
00023895: SF := high:1[RBP]
.address 0x41545C
00023898: ZF := 0 = RBP
.address 0x41545F
000238a5: RBP := RBP & RDX
.address 0x41545F
000238a8: OF := 0
.address 0x41545F
000238ab: CF := 0
.address 0x41545F
000238ae: AF := unknown[bits]:u1
.address 0x41545F
000238b1: PF := ~low:1[let $1 = RBP >> 4 ^ RBP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41545F
000238b4: SF := high:1[RBP]
.address 0x41545F
000238b7: ZF := 0 = RBP
.address 0x415462
000238be: RDX := mem[RBX, el]:u64
.address 0x415465
000238c5: mem := mem with [RBX + 0x10, el]:u64 <- RBP
.address 0x415469
000238cc: mem := mem with [RBX + 0x18, el]:u64 <- RBP
.address 0x41546D
000238db: #5009 := RDX
.address 0x41546D
000238de: #5010 := RAX
.address 0x41546D
000238e1: RDX := RDX + #5010
.address 0x41546D
000238e4: CF := RDX < #5009
.address 0x41546D
000238e7: OF := high:1[#5009] = high:1[#5010] & (high:1[#5009] | high:1[RDX]) & ~(
high:1[#5009] & high:1[RDX])
.address 0x41546D
000238ea: AF := 0x10 = (0x10 & (RDX ^ #5009 ^ #5010))
.address 0x41546D
000238ed: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41546D
000238f0: SF := high:1[RDX]
.address 0x41546D
000238f3: ZF := 0 = RDX
.address 0x415470
000238fa: mem := mem with [RAX, el]:u64 <- RDX
.address 0x415473
00023901: mem := mem with [RBX + 0x20, el]:u64 <- RDX
.address 0x415477
00023908: mem := mem with [RAX + 8, el]:u64 <- 0
.address 0x41547F
0002390f: RAX := 1
.address 0x415484
0002391c: mem := mem with [RBX + 0x50] <- mem[RBX + 0x50] & 0xF9
.address 0x415484
0002391f: OF := 0
.address 0x415484
00023922: CF := 0
.address 0x415484
00023925: AF := unknown[bits]:u1
.address 0x415484
00023928: PF := ~low:1[let $1 = mem[RBX + 0x50] >> 4 ^ mem[RBX + 0x50] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415484
0002392b: SF := high:1[mem[RBX + 0x50]]
.address 0x415484
0002392e: ZF := 0 = mem[RBX + 0x50]
.address 0x415488
00023936: RBX := mem[RSP, el]:u64
.address 0x415488
00023939: RSP := RSP + 8
.address 0x415489
00023941: RBP := mem[RSP, el]:u64
.address 0x415489
00023944: RSP := RSP + 8
.address 0x41548A
0002394c: R12 := mem[RSP, el]:u64
.address 0x41548A
0002394f: RSP := RSP + 8
.address 0x41548C
00023958: #5013 := mem[RSP, el]:u64
.address 0x41548C
0002395b: RSP := RSP + 8
.address 0x41548C
0002395f: call #5013 with noreturn


.address 0x415610
0004457e: sub sub_415610()
.address 0x415610
000235d3: 
.address 0x415610
000235d8: RAX := 1
.address 0x415615
000235e1: #4988 := mem[RSP, el]:u64
.address 0x415615
000235e4: RSP := RSP + 8
.address 0x415615
000235e8: call #4988 with noreturn


.address 0x4156C0
0004457f: sub sub_4156c0()
.address 0x4156C0
000041f5: 
.address 0x4156C0
00004200: #574 := RDI
.address 0x4156C0
00004203: OF := 0
.address 0x4156C0
00004206: CF := 0
.address 0x4156C0
00004209: AF := unknown[bits]:u1
.address 0x4156C0
0000420c: PF := ~low:1[let $1 = #574 >> 4 ^ #574 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4156C0
0000420f: SF := high:1[#574]
.address 0x4156C0
00004212: ZF := 0 = #574
.address 0x4156C3
0000421c: when ZF goto %00004216
00044d8e: goto %00023330

.address 0x4156E0
00004216: 
.address 0x4156E0
00004226: RDI := 0x417F3C
.address 0x4156E7
0000422d: goto %00000a2f

.address 0x403D50
00000a2f: 
.address 0x403D50
00000a35: call mem[0x61FF38, el]:u64 with noreturn

.address 0x4156C5
00023330: 
.address 0x4156C5
00023335: RSI := RDI
.address 0x4156C8
0002333c: RDI := 0x417F3C
.address 0x4156CF
00023343: RDX := 1
.address 0x4156D4
0002334a: goto %000002df

.address 0x4038D0
000002df: 
.address 0x4038D0
000002e5: call mem[0x61FCF8, el]:u64 with noreturn


.address 0x4156F0
00044581: sub sub_4156f0()
.address 0x4156F0
00004232: 
.address 0x4156F0
0000423d: #576 := RDI
.address 0x4156F0
00004240: OF := 0
.address 0x4156F0
00004243: CF := 0
.address 0x4156F0
00004246: AF := unknown[bits]:u1
.address 0x4156F0
00004249: PF := ~low:1[let $1 = #576 >> 4 ^ #576 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4156F0
0000424c: SF := high:1[#576]
.address 0x4156F0
0000424f: ZF := 0 = #576
.address 0x4156F3
00004259: when ZF goto %00004253
00044d8f: goto %000232b7

.address 0x415718
00004253: 
.address 0x415718
00004265: #578 := mem[RSP, el]:u64
.address 0x415718
00004268: RSP := RSP + 8
.address 0x415718
0000426c: call #578 with noreturn

.address 0x4156F5
000232b7: 
.address 0x4156F5
000232be: #4961 := RBX
.address 0x4156F5
000232c1: RSP := RSP - 8
.address 0x4156F5
000232c4: mem := mem with [RSP, el]:u64 <- #4961
00044d90: goto %000232c9

.address 0x415700
000232c9: 
.address 0x415700
000232ce: RBX := mem[RDI, el]:u64
.address 0x415703
000232d7: RSP := RSP - 8
.address 0x415703
000232da: mem := mem with [RSP, el]:u64 <- 0x415708
.address 0x415703
000232dd: call @sub_403e70 with return %000232df

.address 0x415708
000232df: 
.address 0x415708
000232ea: #4962 := RBX
.address 0x415708
000232ed: OF := 0
.address 0x415708
000232f0: CF := 0
.address 0x415708
000232f3: AF := unknown[bits]:u1
.address 0x415708
000232f6: PF := ~low:1[let $1 = #4962 >> 4 ^ #4962 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415708
000232f9: SF := high:1[#4962]
.address 0x415708
000232fc: ZF := 0 = #4962
.address 0x41570B
00023303: RDI := RBX
.address 0x41570E
0002330c: when ~ZF goto %000232c9
00044d91: goto %00023312

.address 0x415710
00023312: 
.address 0x415710
00023318: RBX := mem[RSP, el]:u64
.address 0x415710
0002331b: RSP := RSP + 8
.address 0x415711
00023324: #4964 := mem[RSP, el]:u64
.address 0x415711
00023327: RSP := RSP + 8
.address 0x415711
0002332b: call #4964 with noreturn


.address 0x415720
00044585: sub sub_415720()
.address 0x415720
00004271: 
.address 0x415720
00004278: #579 := R13
.address 0x415720
0000427b: RSP := RSP - 8
.address 0x415720
0000427e: mem := mem with [RSP, el]:u64 <- #579
00044d92: call @sub_415722 with noreturn


.address 0x415722
00044587: sub sub_415722()
.address 0x415722
00004280: 
.address 0x415722
00004287: #580 := R12
.address 0x415722
0000428a: RSP := RSP - 8
.address 0x415722
0000428d: mem := mem with [RSP, el]:u64 <- #580
.address 0x415724
00004296: #581 := RBP
.address 0x415724
00004299: RSP := RSP - 8
.address 0x415724
0000429c: mem := mem with [RSP, el]:u64 <- #581
.address 0x415725
000042a5: #582 := RBX
.address 0x415725
000042a8: RSP := RSP - 8
.address 0x415725
000042ab: mem := mem with [RSP, el]:u64 <- #582
.address 0x415726
000042b2: RBP := RDI
.address 0x415729
000042c0: #583 := RSP
.address 0x415729
000042c3: RSP := RSP - 8
.address 0x415729
000042c6: CF := #583 < 8
.address 0x415729
000042c9: OF := high:1[(#583 ^ 8) & (#583 ^ RSP)]
.address 0x415729
000042cc: AF := 0x10 = (0x10 & (RSP ^ #583 ^ 8))
.address 0x415729
000042cf: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415729
000042d2: SF := high:1[RSP]
.address 0x415729
000042d5: ZF := 0 = RSP
.address 0x41572D
000042de: RSP := RSP - 8
.address 0x41572D
000042e1: mem := mem with [RSP, el]:u64 <- 0x415732
.address 0x41572D
000042e4: call @sub_4037f0 with return %000042e6

.address 0x415732
000042e6: 
.address 0x415732
000042f1: #586 := mem[RBP + 8]
.address 0x415732
000042f4: CF := mem[RBP + 8] < 0
.address 0x415732
000042f7: OF := high:1[mem[RBP + 8] & (mem[RBP + 8] ^ #586)]
.address 0x415732
000042fa: AF := 0x10 = (0x10 & (#586 ^ mem[RBP + 8]))
.address 0x415732
000042fd: PF := ~low:1[let $1 = #586 >> 4 ^ #586 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415732
00004300: SF := high:1[#586]
.address 0x415732
00004303: ZF := 0 = #586
.address 0x415736
0000430a: RBX := RAX
.address 0x415739
00004311: R12 := pad:64[mem[RAX, el]:u32]
.address 0x41573C
00004318: RDI := low:64[RBP + 9]
.address 0x415740
00004322: when ~ZF goto %0000431c
00044d93: goto %00023298

.address 0x415742
00023298: 
.address 0x415742
000232a3: RDI := 0
.address 0x415742
000232a6: AF := unknown[bits]:u1
.address 0x415742
000232a9: ZF := 1
.address 0x415742
000232ac: PF := 1
.address 0x415742
000232af: OF := 0
.address 0x415742
000232b2: CF := 0
.address 0x415742
000232b5: SF := 0
00044d94: goto %0000431c

.address 0x415744
0000431c: 
.address 0x415744
0000432e: RSP := RSP - 8
.address 0x415744
00004331: mem := mem with [RSP, el]:u64 <- 0x415749
.address 0x415744
00004334: call @sub_4156c0 with return %00004336

.address 0x415749
00004336: 
.address 0x415749
00004341: #588 := low:32[RAX]
.address 0x415749
00004344: OF := 0
.address 0x415749
00004347: CF := 0
.address 0x415749
0000434a: AF := unknown[bits]:u1
.address 0x415749
0000434d: PF := ~low:1[let $1 = #588 >> 4 ^ #588 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415749
00004350: SF := high:1[#588]
.address 0x415749
00004353: ZF := 0 = #588
.address 0x41574B
0000435d: when ZF goto %00004357
00044d95: goto %00023272

.address 0x415770
00004357: 
.address 0x415770
00004369: RSP := RSP - 8
.address 0x415770
0000436c: mem := mem with [RSP, el]:u64 <- 0x415775
.address 0x415770
0000436f: call @sub_403bb0 with return %00004371

.address 0x415775
00004371: 
.address 0x415775
00004376: R13 := 1
.address 0x41577B
0000437e: goto %0000437a

.address 0x41574D
00023272: 
.address 0x41574D
00023277: R12 := pad:64[mem[RBX, el]:u32]
.address 0x415750
00023284: R13 := 0
.address 0x415750
00023287: AF := unknown[bits]:u1
.address 0x415750
0002328a: ZF := 1
.address 0x415750
0002328d: PF := 1
.address 0x415750
00023290: OF := 0
.address 0x415750
00023293: CF := 0
.address 0x415750
00023296: SF := 0
00044d96: goto %0000437a

.address 0x415753
0000437a: 
.address 0x415753
00004384: RDI := RBP
.address 0x415756
0000438d: RSP := RSP - 8
.address 0x415756
00004390: mem := mem with [RSP, el]:u64 <- 0x41575B
.address 0x415756
00004393: call @sub_4156f0 with return %00004395

.address 0x41575B
00004395: 
.address 0x41575B
0000439a: mem := mem with [RBX, el]:u32 <- low:32[R12]
.address 0x41575E
000043a8: #590 := RSP
.address 0x41575E
000043ab: RSP := RSP + 8
.address 0x41575E
000043ae: CF := RSP < #590
.address 0x41575E
000043b1: OF := ~high:1[#590] & (high:1[#590] | high:1[RSP]) & ~(high:1[#590] & high:1[RSP])
.address 0x41575E
000043b4: AF := 0x10 = (0x10 & (RSP ^ #590 ^ 8))
.address 0x41575E
000043b7: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41575E
000043ba: SF := high:1[RSP]
.address 0x41575E
000043bd: ZF := 0 = RSP
.address 0x415762
000043c4: RAX := pad:64[low:32[R13]]
.address 0x415765
000043cc: RBX := mem[RSP, el]:u64
.address 0x415765
000043cf: RSP := RSP + 8
.address 0x415766
000043d7: RBP := mem[RSP, el]:u64
.address 0x415766
000043da: RSP := RSP + 8
.address 0x415767
000043e2: R12 := mem[RSP, el]:u64
.address 0x415767
000043e5: RSP := RSP + 8
.address 0x415769
000043ed: R13 := mem[RSP, el]:u64
.address 0x415769
000043f0: RSP := RSP + 8
.address 0x41576B
000043f9: #593 := mem[RSP, el]:u64
.address 0x41576B
000043fc: RSP := RSP + 8
.address 0x41576B
00004400: call #593 with noreturn


.address 0x415780
0004458c: sub sub_415780()
.address 0x415780
00004408: 
.address 0x415780
00004413: #594 := RDI
.address 0x415780
00004416: OF := 0
.address 0x415780
00004419: CF := 0
.address 0x415780
0000441c: AF := unknown[bits]:u1
.address 0x415780
0000441f: PF := ~low:1[let $1 = #594 >> 4 ^ #594 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415780
00004422: SF := high:1[#594]
.address 0x415780
00004425: ZF := 0 = #594
.address 0x415783
0000442e: #596 := R12
.address 0x415783
00004431: RSP := RSP - 8
.address 0x415783
00004434: mem := mem with [RSP, el]:u64 <- #596
.address 0x415785
0000443d: #597 := RBP
.address 0x415785
00004440: RSP := RSP - 8
.address 0x415785
00004443: mem := mem with [RSP, el]:u64 <- #597
.address 0x415786
0000444c: #598 := RBX
.address 0x415786
0000444f: RSP := RSP - 8
.address 0x415786
00004452: mem := mem with [RSP, el]:u64 <- #598
.address 0x415787
0000445c: when ZF goto %00004456
00044d97: goto %00023164

.address 0x4157E8
00004456: 
.address 0x4157E8
00004466: RDI := 0x80
.address 0x4157ED
0000446f: RSP := RSP - 8
.address 0x4157ED
00004472: mem := mem with [RSP, el]:u64 <- 0x4157F2
.address 0x4157ED
00004475: call @sub_403e78 with return %00004477

.address 0x4157F2
00004477: 
.address 0x4157F2
00004482: #599 := RAX
.address 0x4157F2
00004485: OF := 0
.address 0x4157F2
00004488: CF := 0
.address 0x4157F2
0000448b: AF := unknown[bits]:u1
.address 0x4157F2
0000448e: PF := ~low:1[let $1 = #599 >> 4 ^ #599 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4157F2
00004491: SF := high:1[#599]
.address 0x4157F2
00004494: ZF := 0 = #599
.address 0x4157F5
0000449b: RBX := RAX
.address 0x4157F8
000044a5: when ZF goto %0000449f
00044d98: goto %000044e5

.address 0x4157FA
000044e5: 
.address 0x4157FA
000044f0: RDX := 0
.address 0x4157FA
000044f3: AF := unknown[bits]:u1
.address 0x4157FA
000044f6: ZF := 1
.address 0x4157FA
000044f9: PF := 1
.address 0x4157FA
000044fc: OF := 0
.address 0x4157FA
000044ff: CF := 0
.address 0x4157FA
00004502: SF := 0
.address 0x4157FC
00004509: mem := mem with [RBX, el]:u64 <- 0
.address 0x415803
00004510: RAX := RBX
.address 0x415806
00004517: mem := mem with [RBX + 8, el]:u16 <- low:16[RDX]
.address 0x41580A
0000451f: RBX := mem[RSP, el]:u64
.address 0x41580A
00004522: RSP := RSP + 8
.address 0x41580B
0000452a: RBP := mem[RSP, el]:u64
.address 0x41580B
0000452d: RSP := RSP + 8
.address 0x41580C
00004535: R12 := mem[RSP, el]:u64
.address 0x41580C
00004538: RSP := RSP + 8
.address 0x41580E
00004541: #602 := mem[RSP, el]:u64
.address 0x41580E
00004544: RSP := RSP + 8
.address 0x41580E
00004548: call #602 with noreturn

.address 0x415789
00023164: 
.address 0x415789
00023169: R12 := RDI
.address 0x41578C
00023172: RSP := RSP - 8
.address 0x41578C
00023175: mem := mem with [RSP, el]:u64 <- 0x415791
.address 0x41578C
00023178: call @sub_403950 with return %0002317a

.address 0x415791
0002317a: 
.address 0x415791
0002317f: RBP := low:64[RAX + 1]
.address 0x415795
00023186: RDI := 0x76
.address 0x41579A
00023193: #4953 := RBP - 0x76
.address 0x41579A
00023196: CF := RBP < 0x76
.address 0x41579A
00023199: OF := high:1[(RBP ^ 0x76) & (RBP ^ #4953)]
.address 0x41579A
0002319c: AF := 0x10 = (0x10 & (#4953 ^ RBP ^ 0x76))
.address 0x41579A
0002319f: PF := ~low:1[let $1 = #4953 >> 4 ^ #4953 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41579A
000231a2: SF := high:1[#4953]
.address 0x41579A
000231a5: ZF := 0 = #4953
.address 0x41579E
000231ac: RDI := if ~CF then RBP else RDI
.address 0x4157A2
000231ba: #4955 := RDI
.address 0x4157A2
000231bd: RDI := RDI + 0x11
.address 0x4157A2
000231c0: CF := RDI < #4955
.address 0x4157A2
000231c3: OF := ~high:1[#4955] & (high:1[#4955] | high:1[RDI]) & ~(high:1[#4955] & high:1[RDI])
.address 0x4157A2
000231c6: AF := 0x10 = (0x10 & (RDI ^ #4955 ^ 0x11))
.address 0x4157A2
000231c9: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4157A2
000231cc: SF := high:1[RDI]
.address 0x4157A2
000231cf: ZF := 0 = RDI
.address 0x4157A6
000231dc: RDI := RDI & 0xFFFFFFFFFFFFFFF8
.address 0x4157A6
000231df: OF := 0
.address 0x4157A6
000231e2: CF := 0
.address 0x4157A6
000231e5: AF := unknown[bits]:u1
.address 0x4157A6
000231e8: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4157A6
000231eb: SF := high:1[RDI]
.address 0x4157A6
000231ee: ZF := 0 = RDI
.address 0x4157AA
000231f7: RSP := RSP - 8
.address 0x4157AA
000231fa: mem := mem with [RSP, el]:u64 <- 0x4157AF
.address 0x4157AA
000231fd: call @sub_403e78 with return %000231ff

.address 0x4157AF
000231ff: 
.address 0x4157AF
0002320a: #4959 := RAX
.address 0x4157AF
0002320d: OF := 0
.address 0x4157AF
00023210: CF := 0
.address 0x4157AF
00023213: AF := unknown[bits]:u1
.address 0x4157AF
00023216: PF := ~low:1[let $1 = #4959 >> 4 ^ #4959 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4157AF
00023219: SF := high:1[#4959]
.address 0x4157AF
0002321c: ZF := 0 = #4959
.address 0x4157B2
00023223: RBX := RAX
.address 0x4157B5
0002322c: when ZF goto %0000449f
00044d99: goto %00023232

.address 0x4157B7
00023232: 
.address 0x4157B7
00023237: mem := mem with [RAX, el]:u64 <- 0
.address 0x4157BE
0002323e: RDI := low:64[RBX + 9]
.address 0x4157C2
00023245: RAX := 1
.address 0x4157C7
0002324c: mem := mem with [RBX + 8, el]:u16 <- low:16[RAX]
.address 0x4157CB
00023253: RDX := RBP
.address 0x4157CE
0002325a: RSI := R12
.address 0x4157D1
00023263: RSP := RSP - 8
.address 0x4157D1
00023266: mem := mem with [RSP, el]:u64 <- 0x4157D6
.address 0x4157D1
00023269: call @sub_403b80 with return %0002326b

.address 0x4157D6
0002326b: 
.address 0x4157D6
00023270: mem := mem with [RBX + RBP + 9] <- 0
00044d9a: goto %0000449f

.address 0x4157DB
0000449f: 
.address 0x4157DB
000044af: RAX := RBX
.address 0x4157DE
000044b7: RBX := mem[RSP, el]:u64
.address 0x4157DE
000044ba: RSP := RSP + 8
.address 0x4157DF
000044c2: RBP := mem[RSP, el]:u64
.address 0x4157DF
000044c5: RSP := RSP + 8
.address 0x4157E0
000044cd: R12 := mem[RSP, el]:u64
.address 0x4157E0
000044d0: RSP := RSP + 8
.address 0x4157E2
000044d9: #601 := mem[RSP, el]:u64
.address 0x4157E2
000044dc: RSP := RSP + 8
.address 0x4157E2
000044e0: call #601 with noreturn


.address 0x415810
00044591: sub sub_415810()
.address 0x415810
0000454d: 
.address 0x415810
00004554: #603 := R15
.address 0x415810
00004557: RSP := RSP - 8
.address 0x415810
0000455a: mem := mem with [RSP, el]:u64 <- #603
.address 0x415812
00004563: #604 := R14
.address 0x415812
00004566: RSP := RSP - 8
.address 0x415812
00004569: mem := mem with [RSP, el]:u64 <- #604
.address 0x415814
00004570: RAX := 1
.address 0x415819
00004579: #605 := R13
.address 0x415819
0000457c: RSP := RSP - 8
.address 0x415819
0000457f: mem := mem with [RSP, el]:u64 <- #605
.address 0x41581B
00004588: #606 := R12
.address 0x41581B
0000458b: RSP := RSP - 8
.address 0x41581B
0000458e: mem := mem with [RSP, el]:u64 <- #606
.address 0x41581D
00004597: #607 := RBP
.address 0x41581D
0000459a: RSP := RSP - 8
.address 0x41581D
0000459d: mem := mem with [RSP, el]:u64 <- #607
.address 0x41581E
000045a6: #608 := RBX
.address 0x41581E
000045a9: RSP := RSP - 8
.address 0x41581E
000045ac: mem := mem with [RSP, el]:u64 <- #608
.address 0x41581F
000045ba: #609 := RSP
.address 0x41581F
000045bd: RSP := RSP - 8
.address 0x41581F
000045c0: CF := #609 < 8
.address 0x41581F
000045c3: OF := high:1[(#609 ^ 8) & (#609 ^ RSP)]
.address 0x41581F
000045c6: AF := 0x10 = (0x10 & (RSP ^ #609 ^ 8))
.address 0x41581F
000045c9: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41581F
000045cc: SF := high:1[RSP]
.address 0x41581F
000045cf: ZF := 0 = RSP
.address 0x415823
000045d6: RBP := mem[RSI + 0x30, el]:u64
.address 0x415827
000045e3: #612 := RBP
.address 0x415827
000045e6: OF := 0
.address 0x415827
000045e9: CF := 0
.address 0x415827
000045ec: AF := unknown[bits]:u1
.address 0x415827
000045ef: PF := ~low:1[let $1 = #612 >> 4 ^ #612 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415827
000045f2: SF := high:1[#612]
.address 0x415827
000045f5: ZF := 0 = #612
.address 0x41582A
000045ff: when ZF goto %000045f9
00044d9b: goto %00022f09

.address 0x415830
00022f09: 
.address 0x415830
00022f14: #4933 := RSI - RBP
.address 0x415830
00022f17: CF := RSI < RBP
.address 0x415830
00022f1a: OF := high:1[(RSI ^ RBP) & (RSI ^ #4933)]
.address 0x415830
00022f1d: AF := 0x10 = (0x10 & (#4933 ^ RSI ^ RBP))
.address 0x415830
00022f20: PF := ~low:1[let $1 = #4933 >> 4 ^ #4933 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415830
00022f23: SF := high:1[#4933]
.address 0x415830
00022f26: ZF := 0 = #4933
.address 0x415833
00022f2d: R12 := RDI
.address 0x415836
00022f34: R13 := RSI
.address 0x415839
00022f3e: when ~(CF | ZF) goto %00022f38
00044d9c: goto %00023131

.address 0x41583B
00023131: 
.address 0x41583B
00023136: RDX := low:64[RSI + 0x38]
.address 0x41583F
00023143: #4951 := RBP - RDX
.address 0x41583F
00023146: CF := RBP < RDX
.address 0x41583F
00023149: OF := high:1[(RBP ^ RDX) & (RBP ^ #4951)]
.address 0x41583F
0002314c: AF := 0x10 = (0x10 & (#4951 ^ RBP ^ RDX))
.address 0x41583F
0002314f: PF := ~low:1[let $1 = #4951 >> 4 ^ #4951 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41583F
00023152: SF := high:1[#4951]
.address 0x41583F
00023155: ZF := 0 = #4951
.address 0x415842
0002315e: when CF goto %000045f9
00044d9d: goto %00022f38

.address 0x415844
00022f38: 
.address 0x415844
00022f4e: #4935 := mem[RBP]
.address 0x415844
00022f51: CF := mem[RBP] < 0
.address 0x415844
00022f54: OF := high:1[mem[RBP] & (mem[RBP] ^ #4935)]
.address 0x415844
00022f57: AF := 0x10 = (0x10 & (#4935 ^ mem[RBP]))
.address 0x415844
00022f5a: PF := ~low:1[let $1 = #4935 >> 4 ^ #4935 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415844
00022f5d: SF := high:1[#4935]
.address 0x415844
00022f60: ZF := 0 = #4935
.address 0x415848
00022f67: RBX := low:64[R12 + 9]
.address 0x41584D
00022f71: when ZF goto %00022f6b
00044d9e: goto %00022f7d

.address 0x4158B0
00022f6b: 
.address 0x4158B0
00022f7b: RBX := 0x417C4A
00044d9f: goto %0000476d

.address 0x41584F
00022f7d: 
00044da0: goto %00022f80

.address 0x415850
00022f80: 
.address 0x415850
00022f85: RSI := RBP
.address 0x415853
00022f8c: RDI := RBX
.address 0x415856
00022f95: RSP := RSP - 8
.address 0x415856
00022f98: mem := mem with [RSP, el]:u64 <- 0x41585B
.address 0x415856
00022f9b: call @sub_403b20 with return %00022f9d

.address 0x41585B
00022f9d: 
.address 0x41585B
00022fa8: #4937 := low:32[RAX]
.address 0x41585B
00022fab: OF := 0
.address 0x41585B
00022fae: CF := 0
.address 0x41585B
00022fb1: AF := unknown[bits]:u1
.address 0x41585B
00022fb4: PF := ~low:1[let $1 = #4937 >> 4 ^ #4937 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41585B
00022fb7: SF := high:1[#4937]
.address 0x41585B
00022fba: ZF := 0 = #4937
.address 0x41585D
00022fc3: when ZF goto %0000476d
00044da1: goto %00022fc9

.address 0x41585F
00022fc9: 
.address 0x41585F
00022fd4: #4939 := mem[RBX]
.address 0x41585F
00022fd7: CF := mem[RBX] < 0
.address 0x41585F
00022fda: OF := high:1[mem[RBX] & (mem[RBX] ^ #4939)]
.address 0x41585F
00022fdd: AF := 0x10 = (0x10 & (#4939 ^ mem[RBX]))
.address 0x41585F
00022fe0: PF := ~low:1[let $1 = #4939 >> 4 ^ #4939 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41585F
00022fe3: SF := high:1[#4939]
.address 0x41585F
00022fe6: ZF := 0 = #4939
.address 0x415862
00022ff0: when ~ZF goto %00022fea
00044da2: goto %000230d2

.address 0x415864
000230d2: 
.address 0x415864
000230d7: R14 := low:64[R12 + 9]
.address 0x415869
000230e4: #4947 := R14 - RBX
.address 0x415869
000230e7: CF := R14 < RBX
.address 0x415869
000230ea: OF := high:1[(R14 ^ RBX) & (R14 ^ #4947)]
.address 0x415869
000230ed: AF := 0x10 = (0x10 & (#4947 ^ R14 ^ RBX))
.address 0x415869
000230f0: PF := ~low:1[let $1 = #4947 >> 4 ^ #4947 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415869
000230f3: SF := high:1[#4947]
.address 0x415869
000230f6: ZF := 0 = #4947
.address 0x41586C
000230ff: when ~ZF goto %0000467c
00044da3: goto %00023105

.address 0x41586E
00023105: 
.address 0x41586E
00023110: #4949 := mem[R12 + 8]
.address 0x41586E
00023113: CF := mem[R12 + 8] < 0
.address 0x41586E
00023116: OF := high:1[mem[R12 + 8] & (mem[R12 + 8] ^ #4949)]
.address 0x41586E
00023119: AF := 0x10 = (0x10 & (#4949 ^ mem[R12 + 8]))
.address 0x41586E
0002311c: PF := ~low:1[let $1 = #4949 >> 4 ^ #4949 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41586E
0002311f: SF := high:1[#4949]
.address 0x41586E
00023122: ZF := 0 = #4949
.address 0x415874
0002312b: when ZF goto %0000467c
00044da4: goto %00022fea

.address 0x4158D0
0000467c: 
.address 0x4158D0
00004681: RDI := RBP
.address 0x4158D3
0000468a: RSP := RSP - 8
.address 0x4158D3
0000468d: mem := mem with [RSP, el]:u64 <- 0x4158D8
.address 0x4158D3
00004690: call @sub_403950 with return %00004692

.address 0x4158D8
00004692: 
.address 0x4158D8
00004697: RDX := low:64[RAX + 1]
.address 0x4158DC
0000469e: R15 := RAX
.address 0x4158DF
000046a5: RAX := RBX
.address 0x4158E2
000046b4: #618 := RAX
.address 0x4158E2
000046b7: #619 := R14
.address 0x4158E2
000046ba: RAX := RAX - R14
.address 0x4158E2
000046bd: CF := #618 < #619
.address 0x4158E2
000046c0: OF := high:1[(#618 ^ #619) & (#618 ^ RAX)]
.address 0x4158E2
000046c3: AF := 0x10 = (0x10 & (RAX ^ #618 ^ #619))
.address 0x4158E2
000046c6: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4158E2
000046c9: SF := high:1[RAX]
.address 0x4158E2
000046cc: ZF := 0 = RAX
.address 0x4158E5
000046d3: RCX := RAX
.address 0x4158E8
000046da: RCX := ~RCX
.address 0x4158EB
000046e7: #621 := RCX - RDX
.address 0x4158EB
000046ea: CF := RCX < RDX
.address 0x4158EB
000046ed: OF := high:1[(RCX ^ RDX) & (RCX ^ #621)]
.address 0x4158EB
000046f0: AF := 0x10 = (0x10 & (#621 ^ RCX ^ RDX))
.address 0x4158EB
000046f3: PF := ~low:1[let $1 = #621 >> 4 ^ #621 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4158EB
000046f6: SF := high:1[#621]
.address 0x4158EB
000046f9: ZF := 0 = #621
.address 0x4158EE
00004703: when CF goto %000046fd
00044da5: goto %00022e13

.address 0x415920
000046fd: 
.address 0x415920
0000470f: RSP := RSP - 8
.address 0x415920
00004712: mem := mem with [RSP, el]:u64 <- 0x415925
.address 0x415920
00004715: call @sub_4037f0 with return %00004717

.address 0x415925
00004717: 
.address 0x415925
0000471c: mem := mem with [RAX, el]:u32 <- 0xC
.address 0x41592B
00004729: RAX := 0
.address 0x41592B
0000472c: AF := unknown[bits]:u1
.address 0x41592B
0000472f: ZF := 1
.address 0x41592B
00004732: PF := 1
.address 0x41592B
00004735: OF := 0
.address 0x41592B
00004738: CF := 0
.address 0x41592B
0000473b: SF := 0
.address 0x41592D
00004742: goto %000045f9

.address 0x4158F0
00022e13: 
.address 0x4158F0
00022e20: #4923 := RAX
.address 0x4158F0
00022e23: #4924 := RDX
.address 0x4158F0
00022e26: RAX := RAX + #4924
.address 0x4158F0
00022e29: CF := RAX < #4923
.address 0x4158F0
00022e2c: OF := high:1[#4923] = high:1[#4924] & (high:1[#4923] | high:1[RAX]) & ~(
high:1[#4923] & high:1[RAX])
.address 0x4158F0
00022e2f: AF := 0x10 = (0x10 & (RAX ^ #4923 ^ #4924))
.address 0x4158F0
00022e32: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4158F0
00022e35: SF := high:1[RAX]
.address 0x4158F0
00022e38: ZF := 0 = RAX
.address 0x4158F3
00022e45: #4926 := RAX - 0x76
.address 0x4158F3
00022e48: CF := RAX < 0x76
.address 0x4158F3
00022e4b: OF := high:1[(RAX ^ 0x76) & (RAX ^ #4926)]
.address 0x4158F3
00022e4e: AF := 0x10 = (0x10 & (#4926 ^ RAX ^ 0x76))
.address 0x4158F3
00022e51: PF := ~low:1[let $1 = #4926 >> 4 ^ #4926 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4158F3
00022e54: SF := high:1[#4926]
.address 0x4158F3
00022e57: ZF := 0 = #4926
.address 0x4158F7
00022e60: when CF | ZF goto %00004747
00044da6: goto %00022e66

.address 0x415930
00004747: 
.address 0x415930
0000474c: RSI := RBP
.address 0x415933
00004753: RDI := RBX
.address 0x415936
0000475c: RSP := RSP - 8
.address 0x415936
0000475f: mem := mem with [RSP, el]:u64 <- 0x41593B
.address 0x415936
00004762: call @sub_403b80 with return %00004764

.address 0x41593B
00004764: 
.address 0x41593B
00004769: mem := mem with [RBX + R15 + 1] <- 0
.address 0x415941
00004771: goto %0000476d

.address 0x4158F9
00022e66: 
.address 0x4158F9
00022e6b: RDI := RBP
.address 0x4158FC
00022e74: RSP := RSP - 8
.address 0x4158FC
00022e77: mem := mem with [RSP, el]:u64 <- 0x415901
.address 0x4158FC
00022e7a: call @sub_415780 with return %00022e7c

.address 0x415901
00022e7c: 
.address 0x415901
00022e81: RBX := RAX
.address 0x415904
00022e88: mem := mem with [R12, el]:u64 <- RAX
.address 0x415908
00022e95: RAX := 0
.address 0x415908
00022e98: AF := unknown[bits]:u1
.address 0x415908
00022e9b: ZF := 1
.address 0x415908
00022e9e: PF := 1
.address 0x415908
00022ea1: OF := 0
.address 0x415908
00022ea4: CF := 0
.address 0x415908
00022ea7: SF := 0
.address 0x41590A
00022eb4: #4928 := RBX
.address 0x41590A
00022eb7: OF := 0
.address 0x41590A
00022eba: CF := 0
.address 0x41590A
00022ebd: AF := unknown[bits]:u1
.address 0x41590A
00022ec0: PF := ~low:1[let $1 = #4928 >> 4 ^ #4928 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41590A
00022ec3: SF := high:1[#4928]
.address 0x41590A
00022ec6: ZF := 0 = #4928
.address 0x41590D
00022ecf: when ZF goto %000045f9
00044da7: goto %00022ed5

.address 0x41590F
00022ed5: 
.address 0x41590F
00022eda: mem := mem with [RBX + 8] <- 0
.address 0x415913
00022ee8: #4930 := RBX
.address 0x415913
00022eeb: RBX := RBX + 9
.address 0x415913
00022eee: CF := RBX < #4930
.address 0x415913
00022ef1: OF := ~high:1[#4930] & (high:1[#4930] | high:1[RBX]) & ~(high:1[#4930] & high:1[RBX])
.address 0x415913
00022ef4: AF := 0x10 = (0x10 & (RBX ^ #4930 ^ 9))
.address 0x415913
00022ef7: PF := ~low:1[let $1 = RBX >> 4 ^ RBX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415913
00022efa: SF := high:1[RBX]
.address 0x415913
00022efd: ZF := 0 = RBX
.address 0x415917
00022f04: goto %0000476d

.address 0x415876
00022fea: 
.address 0x415876
00022ffa: RDI := RBX
.address 0x415879
00023003: RSP := RSP - 8
.address 0x415879
00023006: mem := mem with [RSP, el]:u64 <- 0x41587E
.address 0x415879
00023009: call @sub_403950 with return %0002300b

.address 0x41587E
0002300b: 
.address 0x41587E
00023010: RBX := low:64[RBX + RAX + 1]
.address 0x415883
0002301d: #4941 := mem[RBX]
.address 0x415883
00023020: CF := mem[RBX] < 0
.address 0x415883
00023023: OF := high:1[mem[RBX] & (mem[RBX] ^ #4941)]
.address 0x415883
00023026: AF := 0x10 = (0x10 & (#4941 ^ mem[RBX]))
.address 0x415883
00023029: PF := ~low:1[let $1 = #4941 >> 4 ^ #4941 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415883
0002302c: SF := high:1[#4941]
.address 0x415883
0002302f: ZF := 0 = #4941
.address 0x415886
00023038: when ~ZF goto %00022f80
00044da8: goto %0002303e

.address 0x415888
0002303e: 
.address 0x415888
00023043: RAX := mem[R12, el]:u64
.address 0x41588C
00023050: #4943 := RAX
.address 0x41588C
00023053: OF := 0
.address 0x41588C
00023056: CF := 0
.address 0x41588C
00023059: AF := unknown[bits]:u1
.address 0x41588C
0002305c: PF := ~low:1[let $1 = #4943 >> 4 ^ #4943 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x41588C
0002305f: SF := high:1[#4943]
.address 0x41588C
00023062: ZF := 0 = #4943
.address 0x41588F
0002306b: when ZF goto %00022f80
00044da9: goto %00023071

.address 0x415891
00023071: 
.address 0x415891
00023076: RBX := low:64[RAX + 9]
.address 0x415895
0002307d: RSI := RBP
.address 0x415898
00023084: R12 := RAX
.address 0x41589B
0002308b: RDI := RBX
.address 0x41589E
00023094: RSP := RSP - 8
.address 0x41589E
00023097: mem := mem with [RSP, el]:u64 <- 0x4158A3
.address 0x41589E
0002309a: call @sub_403b20 with return %0002309c

.address 0x4158A3
0002309c: 
.address 0x4158A3
000230a7: #4945 := low:32[RAX]
.address 0x4158A3
000230aa: OF := 0
.address 0x4158A3
000230ad: CF := 0
.address 0x4158A3
000230b0: AF := unknown[bits]:u1
.address 0x4158A3
000230b3: PF := ~low:1[let $1 = #4945 >> 4 ^ #4945 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4158A3
000230b6: SF := high:1[#4945]
.address 0x4158A3
000230b9: ZF := 0 = #4945
.address 0x4158A5
000230c2: when ~ZF goto %00022fc9
00044daa: goto %000230c8

.address 0x4158A7
000230c8: 
.address 0x4158A7
000230cd: goto %0000476d

.address 0x4158B7
0000476d: 
.address 0x4158B7
00004777: mem := mem with [R13 + 0x30, el]:u64 <- RBX
.address 0x4158BB
0000477e: RAX := 1
00044dab: goto %000045f9

.address 0x4158C0
000045f9: 
.address 0x4158C0
00004610: #614 := RSP
.address 0x4158C0
00004613: RSP := RSP + 8
.address 0x4158C0
00004616: CF := RSP < #614
.address 0x4158C0
00004619: OF := ~high:1[#614] & (high:1[#614] | high:1[RSP]) & ~(high:1[#614] & high:1[RSP])
.address 0x4158C0
0000461c: AF := 0x10 = (0x10 & (RSP ^ #614 ^ 8))
.address 0x4158C0
0000461f: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4158C0
00004622: SF := high:1[RSP]
.address 0x4158C0
00004625: ZF := 0 = RSP
.address 0x4158C4
0000462d: RBX := mem[RSP, el]:u64
.address 0x4158C4
00004630: RSP := RSP + 8
.address 0x4158C5
00004638: RBP := mem[RSP, el]:u64
.address 0x4158C5
0000463b: RSP := RSP + 8
.address 0x4158C6
00004643: R12 := mem[RSP, el]:u64
.address 0x4158C6
00004646: RSP := RSP + 8
.address 0x4158C8
0000464e: R13 := mem[RSP, el]:u64
.address 0x4158C8
00004651: RSP := RSP + 8
.address 0x4158CA
00004659: R14 := mem[RSP, el]:u64
.address 0x4158CA
0000465c: RSP := RSP + 8
.address 0x4158CC
00004664: R15 := mem[RSP, el]:u64
.address 0x4158CC
00004667: RSP := RSP + 8
.address 0x4158CE
00004670: #617 := mem[RSP, el]:u64
.address 0x4158CE
00004673: RSP := RSP + 8
.address 0x4158CE
00004677: call #617 with noreturn


.address 0x415950
000445a3: sub sub_415950()
.address 0x415950
00004783: 
.address 0x415950
0000478a: #623 := R12
.address 0x415950
0000478d: RSP := RSP - 8
.address 0x415950
00004790: mem := mem with [RSP, el]:u64 <- #623
.address 0x415952
00004799: #624 := RBP
.address 0x415952
0000479c: RSP := RSP - 8
.address 0x415952
0000479f: mem := mem with [RSP, el]:u64 <- #624
.address 0x415953
000047a6: RBP := RDI
.address 0x415956
000047af: #625 := RBX
.address 0x415956
000047b2: RSP := RSP - 8
.address 0x415956
000047b5: mem := mem with [RSP, el]:u64 <- #625
.address 0x415957
000047bc: RDI := 0x417F3C
.address 0x41595E
000047ca: #626 := RSP
.address 0x41595E
000047cd: RSP := RSP - 0x10
.address 0x41595E
000047d0: CF := #626 < 0x10
.address 0x41595E
000047d3: OF := high:1[(#626 ^ 0x10) & (#626 ^ RSP)]
.address 0x41595E
000047d6: AF := 0x10 = (0x10 & (RSP ^ #626 ^ 0x10))
.address 0x41595E
000047d9: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41595E
000047dc: SF := high:1[RSP]
.address 0x41595E
000047df: ZF := 0 = RSP
.address 0x415962
000047e8: RSP := RSP - 8
.address 0x415962
000047eb: mem := mem with [RSP, el]:u64 <- 0x415967
.address 0x415962
000047ee: call @sub_4037a0 with return %000047f0

.address 0x415967
000047f0: 
.address 0x415967
000047fb: #629 := RAX
.address 0x415967
000047fe: OF := 0
.address 0x415967
00004801: CF := 0
.address 0x415967
00004804: AF := unknown[bits]:u1
.address 0x415967
00004807: PF := ~low:1[let $1 = #629 >> 4 ^ #629 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415967
0000480a: SF := high:1[#629]
.address 0x415967
0000480d: ZF := 0 = #629
.address 0x41596A
00004814: RBX := RAX
.address 0x41596D
0000481e: when ZF goto %00004818
00044dac: goto %00022de7

.address 0x415A08
00004818: 
.address 0x415A08
0000482e: #631 := mem[RBP + 8]
.address 0x415A08
00004831: CF := mem[RBP + 8] < 0
.address 0x415A08
00004834: OF := high:1[mem[RBP + 8] & (mem[RBP + 8] ^ #631)]
.address 0x415A08
00004837: AF := 0x10 = (0x10 & (#631 ^ mem[RBP + 8]))
.address 0x415A08
0000483a: PF := ~low:1[let $1 = #631 >> 4 ^ #631 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415A08
0000483d: SF := high:1[#631]
.address 0x415A08
00004840: ZF := 0 = #631
.address 0x415A0C
00004847: R12 := 1
.address 0x415A12
00004851: when ~ZF goto %0000484b
00044dad: goto %00022d89

.address 0x415A18
00022d89: 
.address 0x415A18
00022d95: #4917 := RSP
.address 0x415A18
00022d98: RSP := RSP + 0x10
.address 0x415A18
00022d9b: CF := RSP < #4917
.address 0x415A18
00022d9e: OF := ~high:1[#4917] & (high:1[#4917] | high:1[RSP]) & ~(high:1[#4917] & high:1[RSP])
.address 0x415A18
00022da1: AF := 0x10 = (0x10 & (RSP ^ #4917 ^ 0x10))
.address 0x415A18
00022da4: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415A18
00022da7: SF := high:1[RSP]
.address 0x415A18
00022daa: ZF := 0 = RSP
.address 0x415A1C
00022db1: RAX := R12
.address 0x415A1F
00022db9: RBX := mem[RSP, el]:u64
.address 0x415A1F
00022dbc: RSP := RSP + 8
.address 0x415A20
00022dc4: RBP := mem[RSP, el]:u64
.address 0x415A20
00022dc7: RSP := RSP + 8
.address 0x415A21
00022dcf: R12 := mem[RSP, el]:u64
.address 0x415A21
00022dd2: RSP := RSP + 8
.address 0x415A23
00022ddb: #4920 := mem[RSP, el]:u64
.address 0x415A23
00022dde: RSP := RSP + 8
.address 0x415A23
00022de2: call #4920 with noreturn

.address 0x415973
00022de7: 
.address 0x415973
00022df2: #4921 := mem[RBP + 8]
.address 0x415973
00022df5: CF := mem[RBP + 8] < 0
.address 0x415973
00022df8: OF := high:1[mem[RBP + 8] & (mem[RBP + 8] ^ #4921)]
.address 0x415973
00022dfb: AF := 0x10 = (0x10 & (#4921 ^ mem[RBP + 8]))
.address 0x415973
00022dfe: PF := ~low:1[let $1 = #4921 >> 4 ^ #4921 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415973
00022e01: SF := high:1[#4921]
.address 0x415973
00022e04: ZF := 0 = #4921
.address 0x415977
00022e0d: when ~ZF goto %000048fd
00044dae: goto %0000484b

.address 0x4159E0
000048fd: 
.address 0x4159E0
00004902: RDI := low:64[RBP + 9]
.address 0x4159E4
00004909: RSI := RAX
.address 0x4159E7
00004910: R12 := 1
.address 0x4159ED
00004919: RSP := RSP - 8
.address 0x4159ED
0000491c: mem := mem with [RSP, el]:u64 <- 0x4159F2
.address 0x4159ED
0000491f: call @sub_403b20 with return %00004921

.address 0x4159F2
00004921: 
.address 0x4159F2
0000492c: #639 := low:32[RAX]
.address 0x4159F2
0000492f: OF := 0
.address 0x4159F2
00004932: CF := 0
.address 0x4159F2
00004935: AF := unknown[bits]:u1
.address 0x4159F2
00004938: PF := ~low:1[let $1 = #639 >> 4 ^ #639 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4159F2
0000493b: SF := high:1[#639]
.address 0x4159F2
0000493e: ZF := 0 = #639
.address 0x4159F4
00004947: when ~ZF goto %0000484b
00044daf: goto %0000494d

.address 0x4159F6
0000494d: 
.address 0x4159F6
00004959: #641 := RSP
.address 0x4159F6
0000495c: RSP := RSP + 0x10
.address 0x4159F6
0000495f: CF := RSP < #641
.address 0x4159F6
00004962: OF := ~high:1[#641] & (high:1[#641] | high:1[RSP]) & ~(high:1[#641] & high:1[RSP])
.address 0x4159F6
00004965: AF := 0x10 = (0x10 & (RSP ^ #641 ^ 0x10))
.address 0x4159F6
00004968: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4159F6
0000496b: SF := high:1[RSP]
.address 0x4159F6
0000496e: ZF := 0 = RSP
.address 0x4159FA
00004975: RAX := R12
.address 0x4159FD
0000497d: RBX := mem[RSP, el]:u64
.address 0x4159FD
00004980: RSP := RSP + 8
.address 0x4159FE
00004988: RBP := mem[RSP, el]:u64
.address 0x4159FE
0000498b: RSP := RSP + 8
.address 0x4159FF
00004993: R12 := mem[RSP, el]:u64
.address 0x4159FF
00004996: RSP := RSP + 8
.address 0x415A01
0000499f: #644 := mem[RSP, el]:u64
.address 0x415A01
000049a2: RSP := RSP + 8
.address 0x415A01
000049a6: call #644 with noreturn

.address 0x415979
0000484b: 
.address 0x415979
0000485b: RDI := RBX
.address 0x41597C
00004864: RSP := RSP - 8
.address 0x41597C
00004867: mem := mem with [RSP, el]:u64 <- 0x415981
.address 0x41597C
0000486a: call @sub_415780 with return %0000486c

.address 0x415981
0000486c: 
.address 0x415981
00004877: #633 := RAX
.address 0x415981
0000487a: OF := 0
.address 0x415981
0000487d: CF := 0
.address 0x415981
00004880: AF := unknown[bits]:u1
.address 0x415981
00004883: PF := ~low:1[let $1 = #633 >> 4 ^ #633 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415981
00004886: SF := high:1[#633]
.address 0x415981
00004889: ZF := 0 = #633
.address 0x415984
00004890: R12 := RAX
.address 0x415987
0000489a: when ZF goto %00004894
00044db0: goto %000049ab

.address 0x415989
000049ab: 
.address 0x415989
000049b6: RDI := 0
.address 0x415989
000049b9: AF := unknown[bits]:u1
.address 0x415989
000049bc: ZF := 1
.address 0x415989
000049bf: PF := 1
.address 0x415989
000049c2: OF := 0
.address 0x415989
000049c5: CF := 0
.address 0x415989
000049c8: SF := 0
.address 0x41598B
000049d5: #645 := mem[RBP + 8]
.address 0x41598B
000049d8: CF := mem[RBP + 8] < 0
.address 0x41598B
000049db: OF := high:1[mem[RBP + 8] & (mem[RBP + 8] ^ #645)]
.address 0x41598B
000049de: AF := 0x10 = (0x10 & (#645 ^ mem[RBP + 8]))
.address 0x41598B
000049e1: PF := ~low:1[let $1 = #645 >> 4 ^ #645 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41598B
000049e4: SF := high:1[#645]
.address 0x41598B
000049e7: ZF := 0 = #645
.address 0x41598F
000049f1: when ZF goto %000049eb
00044db1: goto %00022d82

.address 0x415991
00022d82: 
.address 0x415991
00022d87: RDI := low:64[RBP + 9]
00044db2: goto %000049eb

.address 0x415995
000049eb: 
.address 0x415995
000049fd: RSP := RSP - 8
.address 0x415995
00004a00: mem := mem with [RSP, el]:u64 <- 0x41599A
.address 0x415995
00004a03: call @sub_4156c0 with return %00004a05

.address 0x41599A
00004a05: 
.address 0x41599A
00004a10: #647 := low:32[RAX]
.address 0x41599A
00004a13: OF := 0
.address 0x41599A
00004a16: CF := 0
.address 0x41599A
00004a19: AF := unknown[bits]:u1
.address 0x41599A
00004a1c: PF := ~low:1[let $1 = #647 >> 4 ^ #647 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41599A
00004a1f: SF := high:1[#647]
.address 0x41599A
00004a22: ZF := 0 = #647
.address 0x41599C
00004a2c: when ZF goto %00004a26
00044db3: goto %00022cf3

.address 0x415A28
00004a26: 
.address 0x415A28
00004a38: RSP := RSP - 8
.address 0x415A28
00004a3b: mem := mem with [RSP, el]:u64 <- 0x415A2D
.address 0x415A28
00004a3e: call @sub_403bb0 with return %00004a40

.address 0x415A2D
00004a40: 
.address 0x415A2D
00004a45: goto %00004894

.address 0x4159A2
00022cf3: 
.address 0x4159A2
00022cfa: RSP := RSP - 8
.address 0x4159A2
00022cfd: mem := mem with [RSP, el]:u64 <- 0x4159A7
.address 0x4159A2
00022d00: call @sub_4037f0 with return %00022d02

.address 0x4159A7
00022d02: 
.address 0x4159A7
00022d0d: #4915 := R12 - 1
.address 0x4159A7
00022d10: CF := R12 < 1
.address 0x4159A7
00022d13: OF := high:1[(R12 ^ 1) & (R12 ^ #4915)]
.address 0x4159A7
00022d16: AF := 0x10 = (0x10 & (#4915 ^ R12 ^ 1))
.address 0x4159A7
00022d19: PF := ~low:1[let $1 = #4915 >> 4 ^ #4915 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4159A7
00022d1c: SF := high:1[#4915]
.address 0x4159A7
00022d1f: ZF := 0 = #4915
.address 0x4159AB
00022d26: RBX := pad:64[mem[RAX, el]:u32]
.address 0x4159AD
00022d30: when ZF goto %00022d2a
00044db4: goto %00022d5b

.address 0x4159AF
00022d5b: 
.address 0x4159AF
00022d60: RDI := R12
.address 0x4159B2
00022d67: mem := mem with [RSP + 8, el]:u64 <- RAX
.address 0x4159B7
00022d70: RSP := RSP - 8
.address 0x4159B7
00022d73: mem := mem with [RSP, el]:u64 <- 0x4159BC
.address 0x4159B7
00022d76: call @sub_4156f0 with return %00022d78

.address 0x4159BC
00022d78: 
.address 0x4159BC
00022d7d: RAX := mem[RSP + 8, el]:u64
00044db5: goto %00022d2a

.address 0x4159C8
00022d2a: 
.address 0x4159C8
00022d3a: mem := mem with [RAX, el]:u32 <- low:32[RBX]
.address 0x4159CA
00022d47: R12 := 0
.address 0x4159CA
00022d4a: AF := unknown[bits]:u1
.address 0x4159CA
00022d4d: ZF := 1
.address 0x4159CA
00022d50: PF := 1
.address 0x4159CA
00022d53: OF := 0
.address 0x4159CA
00022d56: CF := 0
.address 0x4159CA
00022d59: SF := 0
00044db6: goto %00004894

.address 0x4159CD
00004894: 
.address 0x4159CD
000048ab: #635 := RSP
.address 0x4159CD
000048ae: RSP := RSP + 0x10
.address 0x4159CD
000048b1: CF := RSP < #635
.address 0x4159CD
000048b4: OF := ~high:1[#635] & (high:1[#635] | high:1[RSP]) & ~(high:1[#635] & high:1[RSP])
.address 0x4159CD
000048b7: AF := 0x10 = (0x10 & (RSP ^ #635 ^ 0x10))
.address 0x4159CD
000048ba: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4159CD
000048bd: SF := high:1[RSP]
.address 0x4159CD
000048c0: ZF := 0 = RSP
.address 0x4159D1
000048c7: RAX := R12
.address 0x4159D4
000048cf: RBX := mem[RSP, el]:u64
.address 0x4159D4
000048d2: RSP := RSP + 8
.address 0x4159D5
000048da: RBP := mem[RSP, el]:u64
.address 0x4159D5
000048dd: RSP := RSP + 8
.address 0x4159D6
000048e5: R12 := mem[RSP, el]:u64
.address 0x4159D6
000048e8: RSP := RSP + 8
.address 0x4159D8
000048f1: #638 := mem[RSP, el]:u64
.address 0x4159D8
000048f4: RSP := RSP + 8
.address 0x4159D8
000048f8: call #638 with noreturn


.address 0x415A40
000445af: sub sub_415a40()
.address 0x415A40
00004a89: 
.address 0x415A40
00004a90: #652 := R13
.address 0x415A40
00004a93: RSP := RSP - 8
.address 0x415A40
00004a96: mem := mem with [RSP, el]:u64 <- #652
00044db7: call @sub_415a42 with noreturn


.address 0x415A42
000445b1: sub sub_415a42()
.address 0x415A42
00004a98: 
.address 0x415A42
00004a9f: #653 := R12
.address 0x415A42
00004aa2: RSP := RSP - 8
.address 0x415A42
00004aa5: mem := mem with [RSP, el]:u64 <- #653
.address 0x415A44
00004aae: #654 := RBP
.address 0x415A44
00004ab1: RSP := RSP - 8
.address 0x415A44
00004ab4: mem := mem with [RSP, el]:u64 <- #654
.address 0x415A45
00004abd: #655 := RBX
.address 0x415A45
00004ac0: RSP := RSP - 8
.address 0x415A45
00004ac3: mem := mem with [RSP, el]:u64 <- #655
.address 0x415A46
00004aca: RBP := RSI
.address 0x415A49
00004ad8: #656 := RSP
.address 0x415A49
00004adb: RSP := RSP - 8
.address 0x415A49
00004ade: CF := #656 < 8
.address 0x415A49
00004ae1: OF := high:1[(#656 ^ 8) & (#656 ^ RSP)]
.address 0x415A49
00004ae4: AF := 0x10 = (0x10 & (RSP ^ #656 ^ 8))
.address 0x415A49
00004ae7: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415A49
00004aea: SF := high:1[RSP]
.address 0x415A49
00004aed: ZF := 0 = RSP
.address 0x415A4D
00004afa: #659 := RDI
.address 0x415A4D
00004afd: OF := 0
.address 0x415A4D
00004b00: CF := 0
.address 0x415A4D
00004b03: AF := unknown[bits]:u1
.address 0x415A4D
00004b06: PF := ~low:1[let $1 = #659 >> 4 ^ #659 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415A4D
00004b09: SF := high:1[#659]
.address 0x415A4D
00004b0c: ZF := 0 = #659
.address 0x415A50
00004b16: when ZF goto %00004b10
00044db8: goto %00022bde

.address 0x415AC0
00004b10: 
.address 0x415AC0
00004b27: #661 := RSP
.address 0x415AC0
00004b2a: RSP := RSP + 8
.address 0x415AC0
00004b2d: CF := RSP < #661
.address 0x415AC0
00004b30: OF := ~high:1[#661] & (high:1[#661] | high:1[RSP]) & ~(high:1[#661] & high:1[RSP])
.address 0x415AC0
00004b33: AF := 0x10 = (0x10 & (RSP ^ #661 ^ 8))
.address 0x415AC0
00004b36: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415AC0
00004b39: SF := high:1[RSP]
.address 0x415AC0
00004b3c: ZF := 0 = RSP
.address 0x415AC4
00004b43: RDI := RBP
.address 0x415AC7
00004b4a: RSI := RDX
.address 0x415ACA
00004b52: RBX := mem[RSP, el]:u64
.address 0x415ACA
00004b55: RSP := RSP + 8
.address 0x415ACB
00004b5d: RBP := mem[RSP, el]:u64
.address 0x415ACB
00004b60: RSP := RSP + 8
.address 0x415ACC
00004b68: R12 := mem[RSP, el]:u64
.address 0x415ACC
00004b6b: RSP := RSP + 8
.address 0x415ACE
00004b73: R13 := mem[RSP, el]:u64
.address 0x415ACE
00004b76: RSP := RSP + 8
.address 0x415AD0
00004b7d: goto %000004cd

.address 0x403A00
000004cd: 
.address 0x403A00
000004d3: call mem[0x61FD90, el]:u64 with noreturn

.address 0x415A52
00022bde: 
.address 0x415A52
00022be3: R13 := RDX
.address 0x415A55
00022bea: RBX := RDI
.address 0x415A58
00022bf3: RSP := RSP - 8
.address 0x415A58
00022bf6: mem := mem with [RSP, el]:u64 <- 0x415A5D
.address 0x415A58
00022bf9: call @sub_415950 with return %00022bfb

.address 0x415A5D
00022bfb: 
.address 0x415A5D
00022c06: #4907 := RAX
.address 0x415A5D
00022c09: OF := 0
.address 0x415A5D
00022c0c: CF := 0
.address 0x415A5D
00022c0f: AF := unknown[bits]:u1
.address 0x415A5D
00022c12: PF := ~low:1[let $1 = #4907 >> 4 ^ #4907 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415A5D
00022c15: SF := high:1[#4907]
.address 0x415A5D
00022c18: ZF := 0 = #4907
.address 0x415A60
00022c1f: R12 := RAX
.address 0x415A63
00022c28: when ZF goto %00004c4b
00044db9: goto %00022c2e

.address 0x415A65
00022c2e: 
.address 0x415A65
00022c33: RSI := R13
.address 0x415A68
00022c3a: RDI := RBP
.address 0x415A6B
00022c43: RSP := RSP - 8
.address 0x415A6B
00022c46: mem := mem with [RSP, el]:u64 <- 0x415A70
.address 0x415A6B
00022c49: call @sub_403810 with return %00022c4b

.address 0x415A70
00022c4b: 
.address 0x415A70
00022c56: #4909 := RAX
.address 0x415A70
00022c59: OF := 0
.address 0x415A70
00022c5c: CF := 0
.address 0x415A70
00022c5f: AF := unknown[bits]:u1
.address 0x415A70
00022c62: PF := ~low:1[let $1 = #4909 >> 4 ^ #4909 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415A70
00022c65: SF := high:1[#4909]
.address 0x415A70
00022c68: ZF := 0 = #4909
.address 0x415A73
00022c71: when ZF goto %00004c2a
00044dba: goto %00022c77

.address 0x415A75
00022c77: 
.address 0x415A75
00022c7c: RSI := R13
.address 0x415A78
00022c83: RDI := RBX
.address 0x415A7B
00022c8c: RSP := RSP - 8
.address 0x415A7B
00022c8f: mem := mem with [RSP, el]:u64 <- 0x415A80
.address 0x415A7B
00022c92: call @sub_415810 with return %00022c94

.address 0x415A80
00022c94: 
.address 0x415A80
00022c9f: #4911 := low:8[RAX]
.address 0x415A80
00022ca2: OF := 0
.address 0x415A80
00022ca5: CF := 0
.address 0x415A80
00022ca8: AF := unknown[bits]:u1
.address 0x415A80
00022cab: PF := ~low:1[let $1 = #4911 >> 4 ^ #4911 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415A80
00022cae: SF := high:1[#4911]
.address 0x415A80
00022cb1: ZF := 0 = #4911
.address 0x415A82
00022cba: when ZF goto %00004c2a
00044dbb: goto %00022cc0

.address 0x415AA0
00004c2a: 
.address 0x415AA0
00004c35: #670 := R12 - 1
.address 0x415AA0
00004c38: CF := R12 < 1
.address 0x415AA0
00004c3b: OF := high:1[(R12 ^ 1) & (R12 ^ #670)]
.address 0x415AA0
00004c3e: AF := 0x10 = (0x10 & (#670 ^ R12 ^ 1))
.address 0x415AA0
00004c41: PF := ~low:1[let $1 = #670 >> 4 ^ #670 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415AA0
00004c44: SF := high:1[#670]
.address 0x415AA0
00004c47: ZF := 0 = #670
.address 0x415AA4
00004c51: when ZF goto %00004c4b
00044dbc: goto %00004cd7

.address 0x415AA6
00004cd7: 
.address 0x415AA6
00004cdc: RDI := R12
.address 0x415AA9
00004ce5: RSP := RSP - 8
.address 0x415AA9
00004ce8: mem := mem with [RSP, el]:u64 <- 0x415AAE
.address 0x415AA9
00004ceb: call @sub_415720 with return %00004c4b

.address 0x415A84
00022cc0: 
.address 0x415A84
00022ccb: #4913 := R12 - 1
.address 0x415A84
00022cce: CF := R12 < 1
.address 0x415A84
00022cd1: OF := high:1[(R12 ^ 1) & (R12 ^ #4913)]
.address 0x415A84
00022cd4: AF := 0x10 = (0x10 & (#4913 ^ R12 ^ 1))
.address 0x415A84
00022cd7: PF := ~low:1[let $1 = #4913 >> 4 ^ #4913 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415A84
00022cda: SF := high:1[#4913]
.address 0x415A84
00022cdd: ZF := 0 = #4913
.address 0x415A88
00022ce6: when ~ZF goto %00004b7f
00044dbd: goto %00004bb6

.address 0x415AD5
00004b7f: 
.address 0x415AD5
00004b84: RDI := R12
.address 0x415AD8
00004b8d: RSP := RSP - 8
.address 0x415AD8
00004b90: mem := mem with [RSP, el]:u64 <- 0x415ADD
.address 0x415AD8
00004b93: call @sub_415720 with return %00004b95

.address 0x415ADD
00004b95: 
.address 0x415ADD
00004ba0: #664 := low:8[RAX]
.address 0x415ADD
00004ba3: OF := 0
.address 0x415ADD
00004ba6: CF := 0
.address 0x415ADD
00004ba9: AF := unknown[bits]:u1
.address 0x415ADD
00004bac: PF := ~low:1[let $1 = #664 >> 4 ^ #664 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415ADD
00004baf: SF := high:1[#664]
.address 0x415ADD
00004bb2: ZF := 0 = #664
.address 0x415ADF
00004bbc: when ~ZF goto %00004bb6
00044dbe: goto %00004ced

.address 0x415AE1
00004ced: 
.address 0x415AE1
00004cf2: goto %00004c4b

.address 0x415AAE
00004c4b: 
.address 0x415AAE
00004c62: #672 := RSP
.address 0x415AAE
00004c65: RSP := RSP + 8
.address 0x415AAE
00004c68: CF := RSP < #672
.address 0x415AAE
00004c6b: OF := ~high:1[#672] & (high:1[#672] | high:1[RSP]) & ~(high:1[#672] & high:1[RSP])
.address 0x415AAE
00004c6e: AF := 0x10 = (0x10 & (RSP ^ #672 ^ 8))
.address 0x415AAE
00004c71: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415AAE
00004c74: SF := high:1[RSP]
.address 0x415AAE
00004c77: ZF := 0 = RSP
.address 0x415AB2
00004c84: RAX := 0
.address 0x415AB2
00004c87: AF := unknown[bits]:u1
.address 0x415AB2
00004c8a: ZF := 1
.address 0x415AB2
00004c8d: PF := 1
.address 0x415AB2
00004c90: OF := 0
.address 0x415AB2
00004c93: CF := 0
.address 0x415AB2
00004c96: SF := 0
.address 0x415AB4
00004c9e: RBX := mem[RSP, el]:u64
.address 0x415AB4
00004ca1: RSP := RSP + 8
.address 0x415AB5
00004ca9: RBP := mem[RSP, el]:u64
.address 0x415AB5
00004cac: RSP := RSP + 8
.address 0x415AB6
00004cb4: R12 := mem[RSP, el]:u64
.address 0x415AB6
00004cb7: RSP := RSP + 8
.address 0x415AB8
00004cbf: R13 := mem[RSP, el]:u64
.address 0x415AB8
00004cc2: RSP := RSP + 8
.address 0x415ABA
00004ccb: #675 := mem[RSP, el]:u64
.address 0x415ABA
00004cce: RSP := RSP + 8
.address 0x415ABA
00004cd2: call #675 with noreturn

.address 0x415A8A
00004bb6: 
.address 0x415A8A
00004bcd: #666 := RSP
.address 0x415A8A
00004bd0: RSP := RSP + 8
.address 0x415A8A
00004bd3: CF := RSP < #666
.address 0x415A8A
00004bd6: OF := ~high:1[#666] & (high:1[#666] | high:1[RSP]) & ~(high:1[#666] & high:1[RSP])
.address 0x415A8A
00004bd9: AF := 0x10 = (0x10 & (RSP ^ #666 ^ 8))
.address 0x415A8A
00004bdc: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415A8A
00004bdf: SF := high:1[RSP]
.address 0x415A8A
00004be2: ZF := 0 = RSP
.address 0x415A8E
00004be9: RAX := R13
.address 0x415A91
00004bf1: RBX := mem[RSP, el]:u64
.address 0x415A91
00004bf4: RSP := RSP + 8
.address 0x415A92
00004bfc: RBP := mem[RSP, el]:u64
.address 0x415A92
00004bff: RSP := RSP + 8
.address 0x415A93
00004c07: R12 := mem[RSP, el]:u64
.address 0x415A93
00004c0a: RSP := RSP + 8
.address 0x415A95
00004c12: R13 := mem[RSP, el]:u64
.address 0x415A95
00004c15: RSP := RSP + 8
.address 0x415A97
00004c1e: #669 := mem[RSP, el]:u64
.address 0x415A97
00004c21: RSP := RSP + 8
.address 0x415A97
00004c25: call #669 with noreturn


.address 0x415AF0
000445b9: sub sub_415af0()
.address 0x415AF0
00004cfa: 
.address 0x415AF0
00004d01: #676 := R12
.address 0x415AF0
00004d04: RSP := RSP - 8
.address 0x415AF0
00004d07: mem := mem with [RSP, el]:u64 <- #676
.address 0x415AF2
00004d10: #677 := RBP
.address 0x415AF2
00004d13: RSP := RSP - 8
.address 0x415AF2
00004d16: mem := mem with [RSP, el]:u64 <- #677
.address 0x415AF3
00004d1f: #678 := RBX
.address 0x415AF3
00004d22: RSP := RSP - 8
.address 0x415AF3
00004d25: mem := mem with [RSP, el]:u64 <- #678
.address 0x415AF4
00004d2c: RBX := RSI
.address 0x415AF7
00004d3a: #679 := RSP
.address 0x415AF7
00004d3d: RSP := RSP - 0x50
.address 0x415AF7
00004d40: CF := #679 < 0x50
.address 0x415AF7
00004d43: OF := high:1[(#679 ^ 0x50) & (#679 ^ RSP)]
.address 0x415AF7
00004d46: AF := 0x10 = (0x10 & (RSP ^ #679 ^ 0x50))
.address 0x415AF7
00004d49: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415AF7
00004d4c: SF := high:1[RSP]
.address 0x415AF7
00004d4f: ZF := 0 = RSP
.address 0x415AFB
00004d56: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x415B04
00004d5d: mem := mem with [RSP + 0x48, el]:u64 <- RAX
.address 0x415B09
00004d6a: RAX := 0
.address 0x415B09
00004d6d: AF := unknown[bits]:u1
.address 0x415B09
00004d70: ZF := 1
.address 0x415B09
00004d73: PF := 1
.address 0x415B09
00004d76: OF := 0
.address 0x415B09
00004d79: CF := 0
.address 0x415B09
00004d7c: SF := 0
.address 0x415B0B
00004d89: #682 := RDI
.address 0x415B0B
00004d8c: OF := 0
.address 0x415B0B
00004d8f: CF := 0
.address 0x415B0B
00004d92: AF := unknown[bits]:u1
.address 0x415B0B
00004d95: PF := ~low:1[let $1 = #682 >> 4 ^ #682 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415B0B
00004d98: SF := high:1[#682]
.address 0x415B0B
00004d9b: ZF := 0 = #682
.address 0x415B0E
00004da5: when ZF goto %00004d9f
00044dbf: goto %00022b4c

.address 0x415C10
00004d9f: 
.address 0x415C10
00004daf: RDI := RSI
.address 0x415C13
00004db8: RSP := RSP - 8
.address 0x415C13
00004dbb: mem := mem with [RSP, el]:u64 <- 0x415C18
.address 0x415C13
00004dbe: call @sub_403ce0 with return %00004dc0

.address 0x415C18
00004dc0: 
.address 0x415C18
00004dc6: goto %00004dc2

.address 0x415B14
00022b4c: 
.address 0x415B14
00022b51: RBP := RDI
.address 0x415B17
00022b5a: RSP := RSP - 8
.address 0x415B17
00022b5d: mem := mem with [RSP, el]:u64 <- 0x415B1C
.address 0x415B17
00022b60: call @sub_415950 with return %00022b62

.address 0x415B1C
00022b62: 
.address 0x415B1C
00022b6d: #4903 := RAX
.address 0x415B1C
00022b70: OF := 0
.address 0x415B1C
00022b73: CF := 0
.address 0x415B1C
00022b76: AF := unknown[bits]:u1
.address 0x415B1C
00022b79: PF := ~low:1[let $1 = #4903 >> 4 ^ #4903 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415B1C
00022b7c: SF := high:1[#4903]
.address 0x415B1C
00022b7f: ZF := 0 = #4903
.address 0x415B1F
00022b86: R12 := RAX
.address 0x415B22
00022b8f: when ZF goto %0002284d
00044dc0: goto %00022b95

.address 0x415B28
00022b95: 
.address 0x415B28
00022b9a: RDI := RBX
.address 0x415B2B
00022ba3: RSP := RSP - 8
.address 0x415B2B
00022ba6: mem := mem with [RSP, el]:u64 <- 0x415B30
.address 0x415B2B
00022ba9: call @sub_403c60 with return %00022bab

.address 0x415B30
00022bab: 
.address 0x415B30
00022bb6: #4905 := RAX - 0xFFFFFFFFFFFFFFFF
.address 0x415B30
00022bb9: CF := RAX < 0xFFFFFFFFFFFFFFFF
.address 0x415B30
00022bbc: OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ #4905)]
.address 0x415B30
00022bbf: AF := 0x10 = (0x10 & (#4905 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
.address 0x415B30
00022bc2: PF := ~low:1[let $1 = #4905 >> 4 ^ #4905 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415B30
00022bc5: SF := high:1[#4905]
.address 0x415B30
00022bc8: ZF := 0 = #4905
.address 0x415B34
00022bcf: mem := mem with [RSP + 8, el]:u64 <- RAX
.address 0x415B39
00022bd8: when ZF goto %0002279a
00044dc1: goto %00022a8c

.address 0x415B90
0002279a: 
.address 0x415B90
0002279f: RSI := low:64[RSP + 0x10]
.address 0x415B95
000227a6: RDI := low:64[RSP + 8]
.address 0x415B9A
000227af: RSP := RSP - 8
.address 0x415B9A
000227b2: mem := mem with [RSP, el]:u64 <- 0x415B9F
.address 0x415B9A
000227b5: call @sub_403810 with return %000227b7

.address 0x415B9F
000227b7: 
.address 0x415B9F
000227c2: #4872 := RAX
.address 0x415B9F
000227c5: OF := 0
.address 0x415B9F
000227c8: CF := 0
.address 0x415B9F
000227cb: AF := unknown[bits]:u1
.address 0x415B9F
000227ce: PF := ~low:1[let $1 = #4872 >> 4 ^ #4872 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415B9F
000227d1: SF := high:1[#4872]
.address 0x415B9F
000227d4: ZF := 0 = #4872
.address 0x415BA2
000227de: when ZF goto %000227d8
00044dc2: goto %00022866

.address 0x415BA4
00022866: 
.address 0x415BA4
0002286b: RAX := pad:64[mem[RBX, el]:u32]
.address 0x415BA6
00022872: RDX := pad:64[mem[RBX + 4, el]:u32]
.address 0x415BA9
0002287f: RAX := pad:64[low:32[RAX] ^ mem[RSP + 0x10, el]:u32]
.address 0x415BA9
00022882: OF := 0
.address 0x415BA9
00022885: CF := 0
.address 0x415BA9
00022888: AF := unknown[bits]:u1
.address 0x415BA9
0002288b: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415BA9
0002288e: SF := high:1[low:32[RAX]]
.address 0x415BA9
00022891: ZF := 0 = low:32[RAX]
.address 0x415BAD
0002289e: RDX := pad:64[low:32[RDX] ^ mem[RSP + 0x14, el]:u32]
.address 0x415BAD
000228a1: OF := 0
.address 0x415BAD
000228a4: CF := 0
.address 0x415BAD
000228a7: AF := unknown[bits]:u1
.address 0x415BAD
000228aa: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415BAD
000228ad: SF := high:1[low:32[RDX]]
.address 0x415BAD
000228b0: ZF := 0 = low:32[RDX]
.address 0x415BB1
000228b7: RCX := pad:64[mem[RSP + 0x30, el]:u32]
.address 0x415BB5
000228c4: RAX := pad:64[low:32[RAX] | low:32[RDX]]
.address 0x415BB5
000228c7: OF := 0
.address 0x415BB5
000228ca: CF := 0
.address 0x415BB5
000228cd: AF := unknown[bits]:u1
.address 0x415BB5
000228d0: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415BB5
000228d3: SF := high:1[low:32[RAX]]
.address 0x415BB5
000228d6: ZF := 0 = low:32[RAX]
.address 0x415BB7
000228dd: RDX := pad:64[mem[RBX + 8, el]:u32]
.address 0x415BBA
000228ea: RDX := pad:64[low:32[RDX] ^ mem[RSP + 0x18, el]:u32]
.address 0x415BBA
000228ed: OF := 0
.address 0x415BBA
000228f0: CF := 0
.address 0x415BBA
000228f3: AF := unknown[bits]:u1
.address 0x415BBA
000228f6: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415BBA
000228f9: SF := high:1[low:32[RDX]]
.address 0x415BBA
000228fc: ZF := 0 = low:32[RDX]
.address 0x415BBE
00022909: RAX := pad:64[low:32[RAX] | low:32[RDX]]
.address 0x415BBE
0002290c: OF := 0
.address 0x415BBE
0002290f: CF := 0
.address 0x415BBE
00022912: AF := unknown[bits]:u1
.address 0x415BBE
00022915: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415BBE
00022918: SF := high:1[low:32[RAX]]
.address 0x415BBE
0002291b: ZF := 0 = low:32[RAX]
.address 0x415BC0
00022922: RDX := pad:64[mem[RBX + 0xC, el]:u32]
.address 0x415BC3
0002292f: RDX := pad:64[low:32[RDX] ^ mem[RSP + 0x1C, el]:u32]
.address 0x415BC3
00022932: OF := 0
.address 0x415BC3
00022935: CF := 0
.address 0x415BC3
00022938: AF := unknown[bits]:u1
.address 0x415BC3
0002293b: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415BC3
0002293e: SF := high:1[low:32[RDX]]
.address 0x415BC3
00022941: ZF := 0 = low:32[RDX]
.address 0x415BC7
0002294e: RAX := pad:64[low:32[RAX] | low:32[RDX]]
.address 0x415BC7
00022951: OF := 0
.address 0x415BC7
00022954: CF := 0
.address 0x415BC7
00022957: AF := unknown[bits]:u1
.address 0x415BC7
0002295a: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415BC7
0002295d: SF := high:1[low:32[RAX]]
.address 0x415BC7
00022960: ZF := 0 = low:32[RAX]
.address 0x415BC9
00022967: RDX := pad:64[mem[RBX + 0x10, el]:u32]
.address 0x415BCC
00022974: RDX := pad:64[low:32[RDX] ^ mem[RSP + 0x20, el]:u32]
.address 0x415BCC
00022977: OF := 0
.address 0x415BCC
0002297a: CF := 0
.address 0x415BCC
0002297d: AF := unknown[bits]:u1
.address 0x415BCC
00022980: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415BCC
00022983: SF := high:1[low:32[RDX]]
.address 0x415BCC
00022986: ZF := 0 = low:32[RDX]
.address 0x415BD0
00022993: RAX := pad:64[low:32[RAX] | low:32[RDX]]
.address 0x415BD0
00022996: OF := 0
.address 0x415BD0
00022999: CF := 0
.address 0x415BD0
0002299c: AF := unknown[bits]:u1
.address 0x415BD0
0002299f: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415BD0
000229a2: SF := high:1[low:32[RAX]]
.address 0x415BD0
000229a5: ZF := 0 = low:32[RAX]
.address 0x415BD2
000229ac: RDX := pad:64[mem[RBX + 0x14, el]:u32]
.address 0x415BD5
000229b9: RDX := pad:64[low:32[RDX] ^ mem[RSP + 0x24, el]:u32]
.address 0x415BD5
000229bc: OF := 0
.address 0x415BD5
000229bf: CF := 0
.address 0x415BD5
000229c2: AF := unknown[bits]:u1
.address 0x415BD5
000229c5: PF := ~low:1[let $1 = low:32[RDX] >> 4 ^ low:32[RDX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415BD5
000229c8: SF := high:1[low:32[RDX]]
.address 0x415BD5
000229cb: ZF := 0 = low:32[RDX]
.address 0x415BD9
000229d8: RAX := pad:64[low:32[RAX] | low:32[RDX]]
.address 0x415BD9
000229db: OF := 0
.address 0x415BD9
000229de: CF := 0
.address 0x415BD9
000229e1: AF := unknown[bits]:u1
.address 0x415BD9
000229e4: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415BD9
000229e7: SF := high:1[low:32[RAX]]
.address 0x415BD9
000229ea: ZF := 0 = low:32[RAX]
.address 0x415BDB
000229f1: RDX := pad:64[mem[RBX + 0x20, el]:u32]
.address 0x415BDE
000229fe: #4889 := low:32[RDX]
.address 0x415BDE
00022a01: OF := 0
.address 0x415BDE
00022a04: CF := 0
.address 0x415BDE
00022a07: AF := unknown[bits]:u1
.address 0x415BDE
00022a0a: PF := ~low:1[let $1 = #4889 >> 4 ^ #4889 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415BDE
00022a0d: SF := high:1[#4889]
.address 0x415BDE
00022a10: ZF := 0 = #4889
.address 0x415BE0
00022a17: RDI := extract:63:8[RDI].pad:8[ZF]
.address 0x415BE4
00022a24: #4891 := low:32[RCX]
.address 0x415BE4
00022a27: OF := 0
.address 0x415BE4
00022a2a: CF := 0
.address 0x415BE4
00022a2d: AF := unknown[bits]:u1
.address 0x415BE4
00022a30: PF := ~low:1[let $1 = #4891 >> 4 ^ #4891 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415BE4
00022a33: SF := high:1[#4891]
.address 0x415BE4
00022a36: ZF := 0 = #4891
.address 0x415BE6
00022a3d: RSI := extract:63:8[RSI].pad:8[ZF]
.address 0x415BEA
00022a4a: #4893 := low:8[RDI] - low:8[RSI]
.address 0x415BEA
00022a4d: CF := low:8[RDI] < low:8[RSI]
.address 0x415BEA
00022a50: OF := high:1[(low:8[RDI] ^ low:8[RSI]) & (low:8[RDI] ^ #4893)]
.address 0x415BEA
00022a53: AF := 0x10 = (0x10 & (#4893 ^ low:8[RDI] ^ low:8[RSI]))
.address 0x415BEA
00022a56: PF := ~low:1[let $1 = #4893 >> 4 ^ #4893 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415BEA
00022a59: SF := high:1[#4893]
.address 0x415BEA
00022a5c: ZF := 0 = #4893
.address 0x415BED
00022a66: when ZF goto %00022a60
00044dc3: goto %00022af1

.address 0x415BEF
00022af1: 
.address 0x415BEF
00022afc: #4899 := low:32[RDX]
.address 0x415BEF
00022aff: OF := 0
.address 0x415BEF
00022b02: CF := 0
.address 0x415BEF
00022b05: AF := unknown[bits]:u1
.address 0x415BEF
00022b08: PF := ~low:1[let $1 = #4899 >> 4 ^ #4899 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415BEF
00022b0b: SF := high:1[#4899]
.address 0x415BEF
00022b0e: ZF := 0 = #4899
.address 0x415BF1
00022b17: when SF goto %00022a60
00044dc4: goto %00022b1d

.address 0x415BF3
00022b1d: 
.address 0x415BF3
00022b28: #4901 := low:32[RCX]
.address 0x415BF3
00022b2b: OF := 0
.address 0x415BF3
00022b2e: CF := 0
.address 0x415BF3
00022b31: AF := unknown[bits]:u1
.address 0x415BF3
00022b34: PF := ~low:1[let $1 = #4901 >> 4 ^ #4901 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415BF3
00022b37: SF := high:1[#4901]
.address 0x415BF3
00022b3a: ZF := 0 = #4901
.address 0x415BF5
00022b43: when ~SF goto %000227d8
00044dc5: goto %00022a60

.address 0x415BFB
00022a60: 
.address 0x415BFB
00022a76: #4895 := low:32[RAX]
.address 0x415BFB
00022a79: OF := 0
.address 0x415BFB
00022a7c: CF := 0
.address 0x415BFB
00022a7f: AF := unknown[bits]:u1
.address 0x415BFB
00022a82: PF := ~low:1[let $1 = #4895 >> 4 ^ #4895 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415BFB
00022a85: SF := high:1[#4895]
.address 0x415BFB
00022a88: ZF := 0 = #4895
.address 0x415BFD
00022a92: when ZF goto %00022a8c
00044dc6: goto %00022ae7

.address 0x415C03
00022ae7: 
.address 0x415C03
00022aec: goto %000227d8

.address 0x415B3B
00022a8c: 
.address 0x415B3B
00022a9c: RSI := RBX
.address 0x415B3E
00022aa3: RDI := RBP
.address 0x415B41
00022aac: RSP := RSP - 8
.address 0x415B41
00022aaf: mem := mem with [RSP, el]:u64 <- 0x415B46
.address 0x415B41
00022ab2: call @sub_415810 with return %00022ab4

.address 0x415B46
00022ab4: 
.address 0x415B46
00022abf: #4897 := low:8[RAX]
.address 0x415B46
00022ac2: OF := 0
.address 0x415B46
00022ac5: CF := 0
.address 0x415B46
00022ac8: AF := unknown[bits]:u1
.address 0x415B46
00022acb: PF := ~low:1[let $1 = #4897 >> 4 ^ #4897 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415B46
00022ace: SF := high:1[#4897]
.address 0x415B46
00022ad1: ZF := 0 = #4897
.address 0x415B48
00022ada: when ~ZF goto %000227d8
00044dc7: goto %00022ae0

.address 0x415B4A
00022ae0: 
.address 0x415B4A
00022ae5: mem := mem with [RSP + 8, el]:u64 <- 0xFFFFFFFFFFFFFFFF
00044dc8: goto %000227d8

.address 0x415B53
000227d8: 
.address 0x415B53
000227ee: #4874 := R12 - 1
.address 0x415B53
000227f1: CF := R12 < 1
.address 0x415B53
000227f4: OF := high:1[(R12 ^ 1) & (R12 ^ #4874)]
.address 0x415B53
000227f7: AF := 0x10 = (0x10 & (#4874 ^ R12 ^ 1))
.address 0x415B53
000227fa: PF := ~low:1[let $1 = #4874 >> 4 ^ #4874 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415B53
000227fd: SF := high:1[#4874]
.address 0x415B53
00022800: ZF := 0 = #4874
.address 0x415B57
0002280a: when ZF goto %00022804
00044dc9: goto %00022816

.address 0x415B59
00022816: 
.address 0x415B59
0002281b: RDI := R12
.address 0x415B5C
00022824: RSP := RSP - 8
.address 0x415B5C
00022827: mem := mem with [RSP, el]:u64 <- 0x415B61
.address 0x415B5C
0002282a: call @sub_415720 with return %0002282c

.address 0x415B61
0002282c: 
.address 0x415B61
00022837: #4876 := low:8[RAX]
.address 0x415B61
0002283a: OF := 0
.address 0x415B61
0002283d: CF := 0
.address 0x415B61
00022840: AF := unknown[bits]:u1
.address 0x415B61
00022843: PF := ~low:1[let $1 = #4876 >> 4 ^ #4876 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415B61
00022846: SF := high:1[#4876]
.address 0x415B61
00022849: ZF := 0 = #4876
.address 0x415B63
00022853: when ZF goto %0002284d
00044dca: goto %00022804

.address 0x415C20
0002284d: 
.address 0x415C20
0002285d: RAX := 0xFFFFFFFFFFFFFFFF
.address 0x415C27
00022864: goto %00004dc2

.address 0x415B69
00022804: 
.address 0x415B69
00022814: RAX := mem[RSP + 8, el]:u64
00044dcb: goto %00004dc2

.address 0x415B6E
00004dc2: 
.address 0x415B6E
00004dcc: RCX := mem[RSP + 0x48, el]:u64
.address 0x415B73
00004dd9: RCX := RCX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x415B73
00004ddc: OF := 0
.address 0x415B73
00004ddf: CF := 0
.address 0x415B73
00004de2: AF := unknown[bits]:u1
.address 0x415B73
00004de5: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415B73
00004de8: SF := high:1[RCX]
.address 0x415B73
00004deb: ZF := 0 = RCX
.address 0x415B7C
00004df5: when ~ZF goto %00004def
00044dcc: goto %00022743

.address 0x415C2C
00004def: 
.address 0x415C2C
00004e01: RSP := RSP - 8
.address 0x415C2C
00004e04: mem := mem with [RSP, el]:u64 <- 0x415C31
.address 0x415C2C
00004e07: call @sub_403970 with return %00004e09

.address 0x415C31
00004e09: 
00044dcd: call @sub_415c40 with noreturn

.address 0x415B82
00022743: 
.address 0x415B82
0002274f: #4868 := RSP
.address 0x415B82
00022752: RSP := RSP + 0x50
.address 0x415B82
00022755: CF := RSP < #4868
.address 0x415B82
00022758: OF := ~high:1[#4868] & (high:1[#4868] | high:1[RSP]) & ~(high:1[#4868] & high:1[RSP])
.address 0x415B82
0002275b: AF := 0x10 = (0x10 & (RSP ^ #4868 ^ 0x50))
.address 0x415B82
0002275e: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415B82
00022761: SF := high:1[RSP]
.address 0x415B82
00022764: ZF := 0 = RSP
.address 0x415B86
0002276c: RBX := mem[RSP, el]:u64
.address 0x415B86
0002276f: RSP := RSP + 8
.address 0x415B87
00022777: RBP := mem[RSP, el]:u64
.address 0x415B87
0002277a: RSP := RSP + 8
.address 0x415B88
00022782: R12 := mem[RSP, el]:u64
.address 0x415B88
00022785: RSP := RSP + 8
.address 0x415B8A
0002278e: #4871 := mem[RSP, el]:u64
.address 0x415B8A
00022791: RSP := RSP + 8
.address 0x415B8A
00022795: call #4871 with noreturn


.address 0x415C40
000445c9: sub sub_415c40()
.address 0x415C40
00004e0f: 
.address 0x415C40
00004e1a: #685 := low:32[RDI] - 0x16
.address 0x415C40
00004e1d: CF := low:32[RDI] < 0x16
.address 0x415C40
00004e20: OF := high:1[(low:32[RDI] ^ 0x16) & (low:32[RDI] ^ #685)]
.address 0x415C40
00004e23: AF := 0x10 = (0x10 & (#685 ^ low:32[RDI] ^ 0x16))
.address 0x415C40
00004e26: PF := ~low:1[let $1 = #685 >> 4 ^ #685 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415C40
00004e29: SF := high:1[#685]
.address 0x415C40
00004e2c: ZF := 0 = #685
.address 0x415C43
00004e36: when ZF goto %00004e30
00044dce: goto %00022698

.address 0x415C45
00022698: 
.address 0x415C45
000226a0: when ZF | (SF | OF) & ~(SF & OF) goto %0002269a
00044dcf: goto %000226eb

.address 0x415C60
0002269a: 
.address 0x415C60
000226b0: #4861 := low:32[RDI] - 0x10
.address 0x415C60
000226b3: CF := low:32[RDI] < 0x10
.address 0x415C60
000226b6: OF := high:1[(low:32[RDI] ^ 0x10) & (low:32[RDI] ^ #4861)]
.address 0x415C60
000226b9: AF := 0x10 = (0x10 & (#4861 ^ low:32[RDI] ^ 0x10))
.address 0x415C60
000226bc: PF := ~low:1[let $1 = #4861 >> 4 ^ #4861 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415C60
000226bf: SF := high:1[#4861]
.address 0x415C60
000226c2: ZF := 0 = #4861
.address 0x415C63
000226cc: when ~ZF goto %000226c6
00044dd0: goto %00004e30

.address 0x415C47
000226eb: 
.address 0x415C47
000226f6: #4864 := low:32[RDI] - 0x26
.address 0x415C47
000226f9: CF := low:32[RDI] < 0x26
.address 0x415C47
000226fc: OF := high:1[(low:32[RDI] ^ 0x26) & (low:32[RDI] ^ #4864)]
.address 0x415C47
000226ff: AF := 0x10 = (0x10 & (#4864 ^ low:32[RDI] ^ 0x26))
.address 0x415C47
00022702: PF := ~low:1[let $1 = #4864 >> 4 ^ #4864 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415C47
00022705: SF := high:1[#4864]
.address 0x415C47
00022708: ZF := 0 = #4864
.address 0x415C4A
00022711: when ZF goto %00004e30
00044dd1: goto %00022717

.address 0x415C4C
00022717: 
.address 0x415C4C
00022722: #4866 := low:32[RDI] - 0x5F
.address 0x415C4C
00022725: CF := low:32[RDI] < 0x5F
.address 0x415C4C
00022728: OF := high:1[(low:32[RDI] ^ 0x5F) & (low:32[RDI] ^ #4866)]
.address 0x415C4C
0002272b: AF := 0x10 = (0x10 & (#4866 ^ low:32[RDI] ^ 0x5F))
.address 0x415C4C
0002272e: PF := ~low:1[let $1 = #4866 >> 4 ^ #4866 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415C4C
00022731: SF := high:1[#4866]
.address 0x415C4C
00022734: ZF := 0 = #4866
.address 0x415C4F
0002273d: when ZF goto %00004e30
00044dd2: goto %000226c6

.address 0x415C65
00004e30: 
.address 0x415C65
00004e46: RAX := 0
.address 0x415C65
00004e49: AF := unknown[bits]:u1
.address 0x415C65
00004e4c: ZF := 1
.address 0x415C65
00004e4f: PF := 1
.address 0x415C65
00004e52: OF := 0
.address 0x415C65
00004e55: CF := 0
.address 0x415C65
00004e58: SF := 0
.address 0x415C67
00004e61: #687 := mem[RSP, el]:u64
.address 0x415C67
00004e64: RSP := RSP + 8
.address 0x415C67
00004e68: call #687 with noreturn

.address 0x415C51
000226c6: 
.address 0x415C51
000226d6: RAX := 1
.address 0x415C56
000226df: #4863 := mem[RSP, el]:u64
.address 0x415C56
000226e2: RSP := RSP + 8
.address 0x415C56
000226e6: call #4863 with noreturn


.address 0x415C70
000445cf: sub sub_415c70()
.address 0x415C70
00004e6d: 
.address 0x415C70
00004e74: #688 := R12
.address 0x415C70
00004e77: RSP := RSP - 8
.address 0x415C70
00004e7a: mem := mem with [RSP, el]:u64 <- #688
.address 0x415C72
00004e83: #689 := RBP
.address 0x415C72
00004e86: RSP := RSP - 8
.address 0x415C72
00004e89: mem := mem with [RSP, el]:u64 <- #689
.address 0x415C73
00004e90: RBP := RDI
.address 0x415C76
00004e99: #690 := RBX
.address 0x415C76
00004e9c: RSP := RSP - 8
.address 0x415C76
00004e9f: mem := mem with [RSP, el]:u64 <- #690
.address 0x415C77
00004ea8: RSP := RSP - 8
.address 0x415C77
00004eab: mem := mem with [RSP, el]:u64 <- 0x415C7C
.address 0x415C77
00004eae: call @sub_403840 with return %00004eb0

.address 0x415C7C
00004eb0: 
.address 0x415C7C
00004eb5: RBX := pad:64[mem[RBP, el]:u32]
.address 0x415C7F
00004ebc: RDI := RBP
.address 0x415C82
00004ec3: R12 := RAX
.address 0x415C85
00004ecc: RSP := RSP - 8
.address 0x415C85
00004ecf: mem := mem with [RSP, el]:u64 <- 0x415C8A
.address 0x415C85
00004ed2: call @sub_4161a0 with return %00004ed4

.address 0x415C8A
00004ed4: 
.address 0x415C8A
00004edf: RBX := pad:64[low:32[RBX] & 0x20]
.address 0x415C8A
00004ee2: OF := 0
.address 0x415C8A
00004ee5: CF := 0
.address 0x415C8A
00004ee8: AF := unknown[bits]:u1
.address 0x415C8A
00004eeb: PF := ~low:1[let $1 = low:32[RBX] >> 4 ^ low:32[RBX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415C8A
00004eee: SF := high:1[low:32[RBX]]
.address 0x415C8A
00004ef1: ZF := 0 = low:32[RBX]
.address 0x415C8D
00004efe: #692 := low:32[RBX]
.address 0x415C8D
00004f01: OF := 0
.address 0x415C8D
00004f04: CF := 0
.address 0x415C8D
00004f07: AF := unknown[bits]:u1
.address 0x415C8D
00004f0a: PF := ~low:1[let $1 = #692 >> 4 ^ #692 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415C8D
00004f0d: SF := high:1[#692]
.address 0x415C8D
00004f10: ZF := 0 = #692
.address 0x415C8F
00004f1a: when ~ZF goto %00004f14
00044dd3: goto %00022605

.address 0x415CA8
00004f14: 
.address 0x415CA8
00004f2a: #694 := low:32[RAX]
.address 0x415CA8
00004f2d: OF := 0
.address 0x415CA8
00004f30: CF := 0
.address 0x415CA8
00004f33: AF := unknown[bits]:u1
.address 0x415CA8
00004f36: PF := ~low:1[let $1 = #694 >> 4 ^ #694 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415CA8
00004f39: SF := high:1[#694]
.address 0x415CA8
00004f3c: ZF := 0 = #694
.address 0x415CAA
00004f46: when ~ZF goto %00004f40
00044dd4: goto %000225b4

.address 0x415CC8
00004f40: 
.address 0x415CC8
00004f51: RBX := mem[RSP, el]:u64
.address 0x415CC8
00004f54: RSP := RSP + 8
.address 0x415CC9
00004f5b: RAX := 0xFFFFFFFF
.address 0x415CCE
00004f63: RBP := mem[RSP, el]:u64
.address 0x415CCE
00004f66: RSP := RSP + 8
.address 0x415CCF
00004f6e: R12 := mem[RSP, el]:u64
.address 0x415CCF
00004f71: RSP := RSP + 8
.address 0x415CD1
00004f7a: #696 := mem[RSP, el]:u64
.address 0x415CD1
00004f7d: RSP := RSP + 8
.address 0x415CD1
00004f81: call #696 with noreturn

.address 0x415CAC
000225b4: 
.address 0x415CAC
000225bb: RSP := RSP - 8
.address 0x415CAC
000225be: mem := mem with [RSP, el]:u64 <- 0x415CB1
.address 0x415CAC
000225c1: call @sub_4037f0 with return %000225c3

.address 0x415CB1
000225c3: 
.address 0x415CB1
000225c8: mem := mem with [RAX, el]:u32 <- 0
.address 0x415CB7
000225cf: RAX := 0xFFFFFFFF
.address 0x415CBC
000225d7: RBX := mem[RSP, el]:u64
.address 0x415CBC
000225da: RSP := RSP + 8
.address 0x415CBD
000225e2: RBP := mem[RSP, el]:u64
.address 0x415CBD
000225e5: RSP := RSP + 8
.address 0x415CBE
000225ed: R12 := mem[RSP, el]:u64
.address 0x415CBE
000225f0: RSP := RSP + 8
.address 0x415CC0
000225f9: #4855 := mem[RSP, el]:u64
.address 0x415CC0
000225fc: RSP := RSP + 8
.address 0x415CC0
00022600: call #4855 with noreturn

.address 0x415C91
00022605: 
.address 0x415C91
00022610: #4856 := low:32[RAX]
.address 0x415C91
00022613: OF := 0
.address 0x415C91
00022616: CF := 0
.address 0x415C91
00022619: AF := unknown[bits]:u1
.address 0x415C91
0002261c: PF := ~low:1[let $1 = #4856 >> 4 ^ #4856 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415C91
0002261f: SF := high:1[#4856]
.address 0x415C91
00022622: ZF := 0 = #4856
.address 0x415C93
0002262c: when ZF goto %00022626
00044dd5: goto %00022665

.address 0x415C95
00022665: 
.address 0x415C95
00022670: #4859 := R12
.address 0x415C95
00022673: OF := 0
.address 0x415C95
00022676: CF := 0
.address 0x415C95
00022679: AF := unknown[bits]:u1
.address 0x415C95
0002267c: PF := ~low:1[let $1 = #4859 >> 4 ^ #4859 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415C95
0002267f: SF := high:1[#4859]
.address 0x415C95
00022682: ZF := 0 = #4859
.address 0x415C98
00022689: RAX := 0xFFFFFFFF
.address 0x415C9D
00022692: when ZF goto %00004f86
00044dd6: goto %00022626

.address 0x415CD8
00004f86: 
.address 0x415CD8
00004f8d: RSP := RSP - 8
.address 0x415CD8
00004f90: mem := mem with [RSP, el]:u64 <- 0x415CDD
.address 0x415CD8
00004f93: call @sub_4037f0 with return %00004f95

.address 0x415CDD
00004f95: 
.address 0x415CDD
00004fa0: #697 := mem[RAX, el]:u32 - 9
.address 0x415CDD
00004fa3: CF := mem[RAX, el]:u32 < 9
.address 0x415CDD
00004fa6: OF := high:1[(mem[RAX, el]:u32 ^ 9) & (mem[RAX, el]:u32 ^ #697)]
.address 0x415CDD
00004fa9: AF := 0x10 = (0x10 & (#697 ^ mem[RAX, el]:u32 ^ 9))
.address 0x415CDD
00004fac: PF := ~low:1[let $1 = #697 >> 4 ^ #697 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415CDD
00004faf: SF := high:1[#697]
.address 0x415CDD
00004fb2: ZF := 0 = #697
.address 0x415CE0
00004fba: RBX := mem[RSP, el]:u64
.address 0x415CE0
00004fbd: RSP := RSP + 8
.address 0x415CE1
00004fc5: RBP := mem[RSP, el]:u64
.address 0x415CE1
00004fc8: RSP := RSP + 8
.address 0x415CE2
00004fd0: R12 := mem[RSP, el]:u64
.address 0x415CE2
00004fd3: RSP := RSP + 8
.address 0x415CE4
00004fda: RAX := extract:63:8[RAX].pad:8[~ZF]
.address 0x415CE7
00004fe1: RAX := pad:64[pad:32[low:8[RAX]]]
.address 0x415CEA
00004fef: #699 := low:32[RAX]
.address 0x415CEA
00004ff2: RAX := pad:64[-low:32[RAX]]
.address 0x415CEA
00004ff5: CF := if #699 = 0 then 0 else 1
.address 0x415CEA
00004ff8: OF := if #699 = 0x80000000 then 1 else 0
.address 0x415CEA
00004ffb: AF := 0x10 = (0x10 & (low:32[RAX] ^ #699))
.address 0x415CEA
00004ffe: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415CEA
00005001: SF := high:1[low:32[RAX]]
.address 0x415CEA
00005004: ZF := 0 = low:32[RAX]
.address 0x415CEC
0000500d: #701 := mem[RSP, el]:u64
.address 0x415CEC
00005010: RSP := RSP + 8
.address 0x415CEC
00005014: call #701 with noreturn

.address 0x415C9F
00022626: 
.address 0x415C9F
00022637: RBX := mem[RSP, el]:u64
.address 0x415C9F
0002263a: RSP := RSP + 8
.address 0x415CA0
00022642: RBP := mem[RSP, el]:u64
.address 0x415CA0
00022645: RSP := RSP + 8
.address 0x415CA1
0002264d: R12 := mem[RSP, el]:u64
.address 0x415CA1
00022650: RSP := RSP + 8
.address 0x415CA3
00022659: #4858 := mem[RSP, el]:u64
.address 0x415CA3
0002265c: RSP := RSP + 8
.address 0x415CA3
00022660: call #4858 with noreturn


.address 0x415CF0
000445d4: sub sub_415cf0()
.address 0x415CF0
00005019: 
.address 0x415CF0
00005025: #702 := RSP
.address 0x415CF0
00005028: RSP := RSP - 8
.address 0x415CF0
0000502b: CF := #702 < 8
.address 0x415CF0
0000502e: OF := high:1[(#702 ^ 8) & (#702 ^ RSP)]
.address 0x415CF0
00005031: AF := 0x10 = (0x10 & (RSP ^ #702 ^ 8))
.address 0x415CF0
00005034: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415CF0
00005037: SF := high:1[RSP]
.address 0x415CF0
0000503a: ZF := 0 = RSP
.address 0x415CF4
00005044: RSP := RSP - 8
.address 0x415CF4
00005047: mem := mem with [RSP, el]:u64 <- 0x415CF9
.address 0x415CF4
0000504a: call @sub_40cdb0 with return %00022543

.address 0x415CF9
00022543: 
.address 0x415CF9
0002254e: #4849 := RAX
.address 0x415CF9
00022551: OF := 0
.address 0x415CF9
00022554: CF := 0
.address 0x415CF9
00022557: AF := unknown[bits]:u1
.address 0x415CF9
0002255a: PF := ~low:1[let $1 = #4849 >> 4 ^ #4849 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415CF9
0002255d: SF := high:1[#4849]
.address 0x415CF9
00022560: ZF := 0 = #4849
.address 0x415CFC
0002256a: when ZF goto %00022564
00044dd7: goto %00022581

.address 0x415D03
00022564: 
.address 0x415D03
00022576: RSP := RSP - 8
.address 0x415D03
00022579: mem := mem with [RSP, el]:u64 <- 0x415D08
.address 0x415D03
0002257c: call @sub_4146d0 with return %0002257e

.address 0x415D08
0002257e: 
00044dd8: call @sub_415d10 with noreturn

.address 0x415CFE
00022581: 
.address 0x415CFE
0002258d: #4851 := RSP
.address 0x415CFE
00022590: RSP := RSP + 8
.address 0x415CFE
00022593: CF := RSP < #4851
.address 0x415CFE
00022596: OF := ~high:1[#4851] & (high:1[#4851] | high:1[RSP]) & ~(high:1[#4851] & high:1[RSP])
.address 0x415CFE
00022599: AF := 0x10 = (0x10 & (RSP ^ #4851 ^ 8))
.address 0x415CFE
0002259c: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415CFE
0002259f: SF := high:1[RSP]
.address 0x415CFE
000225a2: ZF := 0 = RSP
.address 0x415D02
000225ab: #4854 := mem[RSP, el]:u64
.address 0x415D02
000225ae: RSP := RSP + 8
.address 0x415D02
000225b2: call #4854 with noreturn


.address 0x415D10
000445d7: sub sub_415d10()
.address 0x415D10
000095ad: 
.address 0x415D10
000095bd: RCX := extend:64[mem[RDI]]
.address 0x415D14
000095ca: #1376 := low:8[RCX]
.address 0x415D14
000095cd: OF := 0
.address 0x415D14
000095d0: CF := 0
.address 0x415D14
000095d3: AF := unknown[bits]:u1
.address 0x415D14
000095d6: PF := ~low:1[let $1 = #1376 >> 4 ^ #1376 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415D14
000095d9: SF := high:1[#1376]
.address 0x415D14
000095dc: ZF := 0 = #1376
.address 0x415D16
000095e6: when ZF goto %000095e0
00044dd9: goto %00009624

.address 0x415D40
000095e0: 
.address 0x415D40
000095f6: RDX := 0
.address 0x415D40
000095f9: AF := unknown[bits]:u1
.address 0x415D40
000095fc: ZF := 1
.address 0x415D40
000095ff: PF := 1
.address 0x415D40
00009602: OF := 0
.address 0x415D40
00009605: CF := 0
.address 0x415D40
00009608: SF := 0
.address 0x415D42
0000960f: RAX := RDX
.address 0x415D45
00009618: #1378 := mem[RSP, el]:u64
.address 0x415D45
0000961b: RSP := RSP + 8
.address 0x415D45
0000961f: call #1378 with noreturn

.address 0x415D18
00009624: 
.address 0x415D18
0000962f: RAX := 0
.address 0x415D18
00009632: AF := unknown[bits]:u1
.address 0x415D18
00009635: ZF := 1
.address 0x415D18
00009638: PF := 1
.address 0x415D18
0000963b: OF := 0
.address 0x415D18
0000963e: CF := 0
.address 0x415D18
00009641: SF := 0
00044dda: goto %00009646

.address 0x415D20
00009646: 
.address 0x415D20
0000964c: RAX := RAX << 9 | RAX >> 0x37
.address 0x415D20
0000964f: OF := unknown[bits]:u1
.address 0x415D24
0000965d: #1380 := RDI
.address 0x415D24
00009660: RDI := RDI + 1
.address 0x415D24
00009663: CF := RDI < #1380
.address 0x415D24
00009666: OF := ~high:1[#1380] & (high:1[#1380] | high:1[RDI]) & ~(high:1[#1380] & high:1[RDI])
.address 0x415D24
00009669: AF := 0x10 = (0x10 & (RDI ^ #1380 ^ 1))
.address 0x415D24
0000966c: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415D24
0000966f: SF := high:1[RDI]
.address 0x415D24
00009672: ZF := 0 = RDI
.address 0x415D28
00009681: #1383 := RAX
.address 0x415D28
00009684: #1384 := RCX
.address 0x415D28
00009687: RAX := RAX + #1384
.address 0x415D28
0000968a: CF := RAX < #1383
.address 0x415D28
0000968d: OF := high:1[#1383] = high:1[#1384] & (high:1[#1383] | high:1[RAX]) & ~(
high:1[#1383] & high:1[RAX])
.address 0x415D28
00009690: AF := 0x10 = (0x10 & (RAX ^ #1383 ^ #1384))
.address 0x415D28
00009693: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415D28
00009696: SF := high:1[RAX]
.address 0x415D28
00009699: ZF := 0 = RAX
.address 0x415D2B
000096a0: RCX := extend:64[mem[RDI]]
.address 0x415D2F
000096ad: #1386 := low:8[RCX]
.address 0x415D2F
000096b0: OF := 0
.address 0x415D2F
000096b3: CF := 0
.address 0x415D2F
000096b6: AF := unknown[bits]:u1
.address 0x415D2F
000096b9: PF := ~low:1[let $1 = #1386 >> 4 ^ #1386 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415D2F
000096bc: SF := high:1[#1386]
.address 0x415D2F
000096bf: ZF := 0 = #1386
.address 0x415D31
000096c8: when ~ZF goto %00009646
00044ddb: goto %000096ce

.address 0x415D33
000096ce: 
.address 0x415D33
000096d9: RDX := 0
.address 0x415D33
000096dc: AF := unknown[bits]:u1
.address 0x415D33
000096df: ZF := 1
.address 0x415D33
000096e2: PF := 1
.address 0x415D33
000096e5: OF := 0
.address 0x415D33
000096e8: CF := 0
.address 0x415D33
000096eb: SF := 0
.address 0x415D35
00009704: #1389 := pad:128[RSI]
.address 0x415D35
00009743: goto %00009706

0000971d: 
.address 0x415D35
0000971e: call %0000737f with noreturn

00009713: 
.address 0x415D35
00009714: #1392 := low:64[#1391].low:64[#1390]
.address 0x415D35
00009717: RAX := extract:63:0[#1392]
.address 0x415D35
0000971a: RDX := extract:127:64[#1392]
.address 0x415D35
00009724: goto %00009721

00009720: 
.address 0x415D35
00009722: when high:64[#1390] = 0 goto %00009713
.address 0x415D35
00009723: goto %0000971d

00009710: 
.address 0x415D35
00009711: #1391 := #1388 % #1389
.address 0x415D35
00009727: goto %00009720

0000970d: 
.address 0x415D35
0000970e: #1390 := #1388 / #1389
.address 0x415D35
00009728: goto %00009710

00009721: 
.address 0x415D35
0000972e: goto %0000972a

00009709: 
.address 0x415D35
0000970a: call %0000737f with noreturn

00009729: 
.address 0x415D35
0000972b: when #1389 = 0 goto %00009709
.address 0x415D35
0000972c: goto %0000970d

00009706: 
.address 0x415D35
00009707: #1388 := RDX.RAX
.address 0x415D35
00009742: goto %00009729

0000972a: 
.address 0x415D35
00009731: CF := unknown[bits]:u1
.address 0x415D35
00009734: OF := unknown[bits]:u1
.address 0x415D35
00009737: SF := unknown[bits]:u1
.address 0x415D35
0000973a: ZF := unknown[bits]:u1
.address 0x415D35
0000973d: AF := unknown[bits]:u1
.address 0x415D35
00009740: PF := unknown[bits]:u1
00044ddc: goto %00009744

.address 0x415D38
00009744: 
.address 0x415D38
00009749: RAX := RDX
.address 0x415D3B
00009752: #1393 := mem[RSP, el]:u64
.address 0x415D3B
00009755: RSP := RSP + 8
.address 0x415D3B
00009759: call #1393 with noreturn


.address 0x415D50
000445dc: sub sub_415d50()
.address 0x415D50
00000dbd: 
.address 0x415D50
00000dcf: #140 := R15
.address 0x415D50
00000dd2: RSP := RSP - 8
.address 0x415D50
00000dd5: mem := mem with [RSP, el]:u64 <- #140
.address 0x415D52
00000dde: #141 := R14
.address 0x415D52
00000de1: RSP := RSP - 8
.address 0x415D52
00000de4: mem := mem with [RSP, el]:u64 <- #141
.address 0x415D54
00000deb: RDI := 0xE
.address 0x415D59
00000df4: #142 := R13
.address 0x415D59
00000df7: RSP := RSP - 8
.address 0x415D59
00000dfa: mem := mem with [RSP, el]:u64 <- #142
.address 0x415D5B
00000e03: #143 := R12
.address 0x415D5B
00000e06: RSP := RSP - 8
.address 0x415D5B
00000e09: mem := mem with [RSP, el]:u64 <- #143
.address 0x415D5D
00000e12: #144 := RBP
.address 0x415D5D
00000e15: RSP := RSP - 8
.address 0x415D5D
00000e18: mem := mem with [RSP, el]:u64 <- #144
.address 0x415D5E
00000e21: #145 := RBX
.address 0x415D5E
00000e24: RSP := RSP - 8
.address 0x415D5E
00000e27: mem := mem with [RSP, el]:u64 <- #145
.address 0x415D5F
00000e35: #146 := RSP
.address 0x415D5F
00000e38: RSP := RSP - 0xA8
.address 0x415D5F
00000e3b: CF := #146 < 0xA8
.address 0x415D5F
00000e3e: OF := high:1[(#146 ^ 0xA8) & (#146 ^ RSP)]
.address 0x415D5F
00000e41: AF := 0x10 = (0x10 & (RSP ^ #146 ^ 0xA8))
.address 0x415D5F
00000e44: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415D5F
00000e47: SF := high:1[RSP]
.address 0x415D5F
00000e4a: ZF := 0 = RSP
.address 0x415D66
00000e51: RAX := mem[FS_BASE + 0x28, el]:u64
.address 0x415D6F
00000e58: mem := mem with [RSP + 0x98, el]:u64 <- RAX
.address 0x415D77
00000e65: RAX := 0
.address 0x415D77
00000e68: AF := unknown[bits]:u1
.address 0x415D77
00000e6b: ZF := 1
.address 0x415D77
00000e6e: PF := 1
.address 0x415D77
00000e71: OF := 0
.address 0x415D77
00000e74: CF := 0
.address 0x415D77
00000e77: SF := 0
.address 0x415D79
00000e80: RSP := RSP - 8
.address 0x415D79
00000e83: mem := mem with [RSP, el]:u64 <- 0x415D7E
.address 0x415D79
00000e86: call @sub_403c20 with return %00000e88

.address 0x415D7E
00000e88: 
.address 0x415D7E
00000e8d: R15 := mem[0x621558, el]:u64
.address 0x415D85
00000e9a: #149 := RAX
.address 0x415D85
00000e9d: OF := 0
.address 0x415D85
00000ea0: CF := 0
.address 0x415D85
00000ea3: AF := unknown[bits]:u1
.address 0x415D85
00000ea6: PF := ~low:1[let $1 = #149 >> 4 ^ #149 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415D85
00000ea9: SF := high:1[#149]
.address 0x415D85
00000eac: ZF := 0 = #149
.address 0x415D88
00000eb3: RBX := RAX
.address 0x415D8B
00000eba: RAX := 0x417C4A
.address 0x415D92
00000ec1: RBX := if ZF then RAX else RBX
.address 0x415D96
00000ece: #151 := R15
.address 0x415D96
00000ed1: OF := 0
.address 0x415D96
00000ed4: CF := 0
.address 0x415D96
00000ed7: AF := unknown[bits]:u1
.address 0x415D96
00000eda: PF := ~low:1[let $1 = #151 >> 4 ^ #151 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415D96
00000edd: SF := high:1[#151]
.address 0x415D96
00000ee0: ZF := 0 = #151
.address 0x415D99
00000eea: when ~ZF goto %00000ee4
00044ddd: goto %0000254f

.address 0x415D9B
0000254f: 
.address 0x415D9B
00002554: goto %0000238b

.address 0x415E30
0000238b: 
.address 0x415E30
00002390: RDI := 0x41B183
.address 0x415E37
00002399: RSP := RSP - 8
.address 0x415E37
0000239c: mem := mem with [RSP, el]:u64 <- 0x415E3C
.address 0x415E37
0000239f: call @sub_4037a0 with return %000023a1

.address 0x415E3C
000023a1: 
.address 0x415E3C
000023ac: #325 := RAX
.address 0x415E3C
000023af: OF := 0
.address 0x415E3C
000023b2: CF := 0
.address 0x415E3C
000023b5: AF := unknown[bits]:u1
.address 0x415E3C
000023b8: PF := ~low:1[let $1 = #325 >> 4 ^ #325 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415E3C
000023bb: SF := high:1[#325]
.address 0x415E3C
000023be: ZF := 0 = #325
.address 0x415E3F
000023c5: R13 := RAX
.address 0x415E42
000023ce: when ZF goto %00001023
00044dde: goto %000023d4

.address 0x415E44
000023d4: 
.address 0x415E44
000023df: #327 := mem[RAX]
.address 0x415E44
000023e2: CF := mem[RAX] < 0
.address 0x415E44
000023e5: OF := high:1[mem[RAX] & (mem[RAX] ^ #327)]
.address 0x415E44
000023e8: AF := 0x10 = (0x10 & (#327 ^ mem[RAX]))
.address 0x415E44
000023eb: PF := ~low:1[let $1 = #327 >> 4 ^ #327 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415E44
000023ee: SF := high:1[#327]
.address 0x415E44
000023f1: ZF := 0 = #327
.address 0x415E47
000023fa: when ZF goto %00001023
00044ddf: goto %00002400

.address 0x415E90
00001023: 
.address 0x415E90
00001028: R13 := 0x41B169
.address 0x415E97
0000102f: RDI := 0x28
.address 0x415E9C
00001036: R12 := 0x1A
.address 0x415EA2
0000103d: R14 := 0x19
00044de0: goto %00000fc4

.address 0x415E49
00002400: 
.address 0x415E49
00002405: RDI := RAX
.address 0x415E4C
0000240e: RSP := RSP - 8
.address 0x415E4C
00002411: mem := mem with [RSP, el]:u64 <- 0x415E51
.address 0x415E4C
00002414: call @sub_403950 with return %00002416

.address 0x415E51
00002416: 
.address 0x415E51
00002421: #329 := RAX
.address 0x415E51
00002424: OF := 0
.address 0x415E51
00002427: CF := 0
.address 0x415E51
0000242a: AF := unknown[bits]:u1
.address 0x415E51
0000242d: PF := ~low:1[let $1 = #329 >> 4 ^ #329 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415E51
00002430: SF := high:1[#329]
.address 0x415E51
00002433: ZF := 0 = #329
.address 0x415E54
0000243a: R12 := RAX
.address 0x415E57
00002441: R14 := RAX
.address 0x415E5A
0000244a: when ~ZF goto %000020f0
00044de1: goto %00002450

.address 0x41617B
000020f0: 
.address 0x41617B
000020fb: #300 := mem[R13 + RAX - 1] - 0x2F
.address 0x41617B
000020fe: CF := mem[R13 + RAX - 1] < 0x2F
.address 0x41617B
00002101: OF := high:1[(mem[R13 + RAX - 1] ^ 0x2F) & (mem[R13 + RAX - 1] ^ #300)]
.address 0x41617B
00002104: AF := 0x10 = (0x10 & (#300 ^ mem[R13 + RAX - 1] ^ 0x2F))
.address 0x41617B
00002107: PF := ~low:1[let $1 = #300 >> 4 ^ #300 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41617B
0000210a: SF := high:1[#300]
.address 0x41617B
0000210d: ZF := 0 = #300
.address 0x416181
00002116: when ~ZF goto %00000f98
00044de2: goto %0000211c

.address 0x416183
0000211c: 
.address 0x416183
00002121: RDI := low:64[RAX + 0xE]
.address 0x416187
00002129: goto %00002125

.address 0x415E60
00002450: 
.address 0x415E60
00002455: RDI := 0xE
00044de3: goto %00002125

.address 0x415E65
00002125: 
.address 0x415E65
00002131: RSP := RSP - 8
.address 0x415E65
00002134: mem := mem with [RSP, el]:u64 <- 0x415E6A
.address 0x415E65
00002137: call @sub_403e78 with return %00002139

.address 0x415E6A
00002139: 
.address 0x415E6A
00002144: #302 := RAX
.address 0x415E6A
00002147: OF := 0
.address 0x415E6A
0000214a: CF := 0
.address 0x415E6A
0000214d: AF := unknown[bits]:u1
.address 0x415E6A
00002150: PF := ~low:1[let $1 = #302 >> 4 ^ #302 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415E6A
00002153: SF := high:1[#302]
.address 0x415E6A
00002156: ZF := 0 = #302
.address 0x415E6D
0000215d: RBP := RAX
.address 0x415E70
00002166: when ~ZF goto %000011da
00044de4: goto %00001000

.address 0x415F18
000011da: 
.address 0x415F18
000011df: RDX := R14
.address 0x415F1B
000011e6: RSI := R13
.address 0x415F1E
000011ed: RDI := RBP
.address 0x415F21
000011f6: RSP := RSP - 8
.address 0x415F21
000011f9: mem := mem with [RSP, el]:u64 <- 0x415F26
.address 0x415F21
000011fc: call @sub_403b80 with return %000011fe

.address 0x415F26
000011fe: 
.address 0x415F26
00001203: goto %0000106a

.address 0x415E76
00001000: 
.address 0x415E76
00001010: R15 := 0x417C4A
00044de5: goto %00001012

.address 0x415E7D
00001012: 
.address 0x415E7D
00001017: mem := mem with [0x621558, el]:u64 <- R15
.address 0x415E84
0000101e: goto %00000ee4

.address 0x415DBA
00000ee4: 
.address 0x415DBA
00000ef4: RBP := pad:64[pad:32[mem[R15]]]
.address 0x415DBE
00000f01: #153 := low:8[RBP]
.address 0x415DBE
00000f04: OF := 0
.address 0x415DBE
00000f07: CF := 0
.address 0x415DBE
00000f0a: AF := unknown[bits]:u1
.address 0x415DBE
00000f0d: PF := ~low:1[let $1 = #153 >> 4 ^ #153 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415DBE
00000f10: SF := high:1[#153]
.address 0x415DBE
00000f13: ZF := 0 = #153
.address 0x415DC1
00000f1d: when ZF goto %00000f17
00044de6: goto %00002457

.address 0x415DC3
00002457: 
.address 0x415DC3
0000245c: RSI := R15
.address 0x415DC6
00002463: RDI := RBX
.address 0x415DC9
0000246c: RSP := RSP - 8
.address 0x415DC9
0000246f: mem := mem with [RSP, el]:u64 <- 0x415DCE
.address 0x415DC9
00002472: call @sub_403b20 with return %00002474

.address 0x415DCE
00002474: 
.address 0x415DCE
0000247f: #331 := low:32[RAX]
.address 0x415DCE
00002482: OF := 0
.address 0x415DCE
00002485: CF := 0
.address 0x415DCE
00002488: AF := unknown[bits]:u1
.address 0x415DCE
0000248b: PF := ~low:1[let $1 = #331 >> 4 ^ #331 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415DCE
0000248e: SF := high:1[#331]
.address 0x415DCE
00002491: ZF := 0 = #331
.address 0x415DD0
0000249b: when ZF goto %00002495
00044de7: goto %000024bd

.address 0x415DD2
000024bd: 
.address 0x415DD2
000024c8: #333 := low:8[RBP] - 0x2A
.address 0x415DD2
000024cb: CF := low:8[RBP] < 0x2A
.address 0x415DD2
000024ce: OF := high:1[(low:8[RBP] ^ 0x2A) & (low:8[RBP] ^ #333)]
.address 0x415DD2
000024d1: AF := 0x10 = (0x10 & (#333 ^ low:8[RBP] ^ 0x2A))
.address 0x415DD2
000024d4: PF := ~low:1[let $1 = #333 >> 4 ^ #333 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415DD2
000024d7: SF := high:1[#333]
.address 0x415DD2
000024da: ZF := 0 = #333
.address 0x415DD6
000024e4: when ~ZF goto %000024de
00044de8: goto %00002523

.address 0x415DD8
00002523: 
.address 0x415DD8
0000252e: #335 := mem[R15 + 1]
.address 0x415DD8
00002531: CF := mem[R15 + 1] < 0
.address 0x415DD8
00002534: OF := high:1[mem[R15 + 1] & (mem[R15 + 1] ^ #335)]
.address 0x415DD8
00002537: AF := 0x10 = (0x10 & (#335 ^ mem[R15 + 1]))
.address 0x415DD8
0000253a: PF := ~low:1[let $1 = #335 >> 4 ^ #335 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415DD8
0000253d: SF := high:1[#335]
.address 0x415DD8
00002540: ZF := 0 = #335
.address 0x415DDD
00002549: when ~ZF goto %000024de
00044de9: goto %00002495

.address 0x415DDF
00002495: 
.address 0x415DDF
000024a5: RDI := R15
.address 0x415DE2
000024ae: RSP := RSP - 8
.address 0x415DE2
000024b1: mem := mem with [RSP, el]:u64 <- 0x415DE7
.address 0x415DE2
000024b4: call @sub_403950 with return %000024b6

.address 0x415DE7
000024b6: 
.address 0x415DE7
000024bb: RBX := low:64[R15 + RAX + 1]
00044dea: goto %00000f17

.address 0x415DEC
00000f17: 
.address 0x415DEC
00000f2d: #155 := mem[RBX]
.address 0x415DEC
00000f30: CF := mem[RBX] < 0
.address 0x415DEC
00000f33: OF := high:1[mem[RBX] & (mem[RBX] ^ #155)]
.address 0x415DEC
00000f36: AF := 0x10 = (0x10 & (#155 ^ mem[RBX]))
.address 0x415DEC
00000f39: PF := ~low:1[let $1 = #155 >> 4 ^ #155 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415DEC
00000f3c: SF := high:1[#155]
.address 0x415DEC
00000f3f: ZF := 0 = #155
.address 0x415DEF
00000f46: RAX := 0x41B163
.address 0x415DF6
00000f4d: RBX := if ZF then RAX else RBX
.address 0x415DFA
00000f54: RCX := mem[RSP + 0x98, el]:u64
.address 0x415E02
00000f61: RCX := RCX ^ mem[FS_BASE + 0x28, el]:u64
.address 0x415E02
00000f64: OF := 0
.address 0x415E02
00000f67: CF := 0
.address 0x415E02
00000f6a: AF := unknown[bits]:u1
.address 0x415E02
00000f6d: PF := ~low:1[let $1 = RCX >> 4 ^ RCX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415E02
00000f70: SF := high:1[RCX]
.address 0x415E02
00000f73: ZF := 0 = RCX
.address 0x415E0B
00000f7a: RAX := RBX
.address 0x415E0E
00000f84: when ~ZF goto %00000f7e
00044deb: goto %00002313

.address 0x41618C
00000f7e: 
.address 0x41618C
00000f90: RSP := RSP - 8
.address 0x41618C
00000f93: mem := mem with [RSP, el]:u64 <- 0x416191
.address 0x41618C
00000f96: call @sub_403970 with return %00000f98

.address 0x416191
00000f98: 
.address 0x416191
00000f9d: RDI := low:64[RAX + 0xF]
.address 0x416195
00000fab: #158 := R12
.address 0x416195
00000fae: R12 := R12 + 1
.address 0x416195
00000fb1: CF := R12 < #158
.address 0x416195
00000fb4: OF := ~high:1[#158] & (high:1[#158] | high:1[R12]) & ~(high:1[#158] & high:1[R12])
.address 0x416195
00000fb7: AF := 0x10 = (0x10 & (R12 ^ #158 ^ 1))
.address 0x416195
00000fba: PF := ~low:1[let $1 = R12 >> 4 ^ R12 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x416195
00000fbd: SF := high:1[R12]
.address 0x416195
00000fc0: ZF := 0 = R12
.address 0x416199
00000fc8: goto %00000fc4

.address 0x415EA8
00000fc4: 
.address 0x415EA8
00000fd0: RSP := RSP - 8
.address 0x415EA8
00000fd3: mem := mem with [RSP, el]:u64 <- 0x415EAD
.address 0x415EA8
00000fd6: call @sub_403e78 with return %00000fd8

.address 0x415EAD
00000fd8: 
.address 0x415EAD
00000fe3: #161 := RAX
.address 0x415EAD
00000fe6: OF := 0
.address 0x415EAD
00000fe9: CF := 0
.address 0x415EAD
00000fec: AF := unknown[bits]:u1
.address 0x415EAD
00000fef: PF := ~low:1[let $1 = #161 >> 4 ^ #161 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415EAD
00000ff2: SF := high:1[#161]
.address 0x415EAD
00000ff5: ZF := 0 = #161
.address 0x415EB0
00000ffc: RBP := RAX
.address 0x415EB3
00001006: when ZF goto %00001000
00044dec: goto %0000103f

.address 0x415EB5
0000103f: 
.address 0x415EB5
00001044: RDX := R14
.address 0x415EB8
0000104b: RSI := R13
.address 0x415EBB
00001052: RDI := RBP
.address 0x415EBE
0000105b: RSP := RSP - 8
.address 0x415EBE
0000105e: mem := mem with [RSP, el]:u64 <- 0x415EC3
.address 0x415EBE
00001061: call @sub_403b80 with return %00001063

.address 0x415EC3
00001063: 
.address 0x415EC3
00001068: mem := mem with [RBP + R14] <- 0x2F
00044ded: goto %0000106a

.address 0x415EC9
0000106a: 
.address 0x415EC9
00001077: #163 := R12
.address 0x415EC9
0000107a: #164 := RBP
.address 0x415EC9
0000107d: R12 := R12 + #164
.address 0x415EC9
00001080: CF := R12 < #163
.address 0x415EC9
00001083: OF := high:1[#163] = high:1[#164] & (high:1[#163] | high:1[R12]) & ~(
high:1[#163] & high:1[R12])
.address 0x415EC9
00001086: AF := 0x10 = (0x10 & (R12 ^ #163 ^ #164))
.address 0x415EC9
00001089: PF := ~low:1[let $1 = R12 >> 4 ^ R12 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415EC9
0000108c: SF := high:1[R12]
.address 0x415EC9
0000108f: ZF := 0 = R12
.address 0x415ECC
00001096: RAX := 0x2E74657372616863
.address 0x415ED6
0000109d: RSI := 0x20000
.address 0x415EDB
000010a4: mem := mem with [R12, el]:u64 <- RAX
.address 0x415EDF
000010ab: RAX := 0x73
.address 0x415EE4
000010b2: mem := mem with [R12 + 8, el]:u32 <- 0x61696C61
.address 0x415EED
000010b9: mem := mem with [R12 + 0xC, el]:u16 <- low:16[RAX]
.address 0x415EF3
000010c0: RDI := RBP
.address 0x415EF6
000010cd: RAX := 0
.address 0x415EF6
000010d0: AF := unknown[bits]:u1
.address 0x415EF6
000010d3: ZF := 1
.address 0x415EF6
000010d6: PF := 1
.address 0x415EF6
000010d9: OF := 0
.address 0x415EF6
000010dc: CF := 0
.address 0x415EF6
000010df: SF := 0
.address 0x415EF8
000010e8: RSP := RSP - 8
.address 0x415EF8
000010eb: mem := mem with [RSP, el]:u64 <- 0x415EFD
.address 0x415EF8
000010ee: call @sub_403d30 with return %000010f0

.address 0x415EFD
000010f0: 
.address 0x415EFD
000010fb: #166 := low:32[RAX]
.address 0x415EFD
000010fe: OF := 0
.address 0x415EFD
00001101: CF := 0
.address 0x415EFD
00001104: AF := unknown[bits]:u1
.address 0x415EFD
00001107: PF := ~low:1[let $1 = #166 >> 4 ^ #166 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415EFD
0000110a: SF := high:1[#166]
.address 0x415EFD
0000110d: ZF := 0 = #166
.address 0x415EFF
00001114: R12 := pad:64[low:32[RAX]]
.address 0x415F02
0000111e: when ~SF goto %00001118
00044dee: goto %000011b1

.address 0x415F28
00001118: 
.address 0x415F28
00001128: RSI := 0x417F6A
.address 0x415F2F
0000112f: RDI := pad:64[low:32[RAX]]
.address 0x415F31
0000113c: R15 := 0
.address 0x415F31
0000113f: AF := unknown[bits]:u1
.address 0x415F31
00001142: ZF := 1
.address 0x415F31
00001145: PF := 1
.address 0x415F31
00001148: OF := 0
.address 0x415F31
0000114b: CF := 0
.address 0x415F31
0000114e: SF := 0
.address 0x415F34
00001157: RSP := RSP - 8
.address 0x415F34
0000115a: mem := mem with [RSP, el]:u64 <- 0x415F39
.address 0x415F34
0000115d: call @sub_403cb0 with return %0000115f

.address 0x415F39
0000115f: 
.address 0x415F39
0000116a: #168 := RAX
.address 0x415F39
0000116d: OF := 0
.address 0x415F39
00001170: CF := 0
.address 0x415F39
00001173: AF := unknown[bits]:u1
.address 0x415F39
00001176: PF := ~low:1[let $1 = #168 >> 4 ^ #168 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415F39
00001179: SF := high:1[#168]
.address 0x415F39
0000117c: ZF := 0 = #168
.address 0x415F3C
00001183: R14 := RAX
.address 0x415F3F
0000118a: mem := mem with [RSP, el]:u64 <- 0
.address 0x415F47
00001194: when ZF goto %0000118e
00044def: goto %000022f4

.address 0x416123
0000118e: 
.address 0x416123
0000119e: RDI := pad:64[low:32[R12]]
.address 0x416126
000011a7: RSP := RSP - 8
.address 0x416126
000011aa: mem := mem with [RSP, el]:u64 <- 0x41612B
.address 0x416126
000011ad: call @sub_403aa0 with return %000011af

.address 0x41612B
000011af: 
.address 0x41612B
000011b5: goto %000011b1

.address 0x415F4D
000022f4: 
.address 0x415F4D
000022f9: RAX := low:64[RSP + 0x60]
.address 0x415F52
00002300: mem := mem with [RSP + 8, el]:u64 <- RAX
.address 0x415F57
00002307: RAX := low:64[RSP + 0x20]
.address 0x415F5C
0000230e: mem := mem with [RSP + 0x10, el]:u64 <- RAX
00044df0: goto %00001b8a

.address 0x415F61
00001b8a: 
.address 0x415F61
00001b94: RAX := mem[R14 + 8, el]:u64
.address 0x415F65
00001ba1: #245 := RAX - mem[R14 + 0x10, el]:u64
.address 0x415F65
00001ba4: CF := RAX < mem[R14 + 0x10, el]:u64
.address 0x415F65
00001ba7: OF := high:1[(RAX ^ mem[R14 + 0x10, el]:u64) & (RAX ^ #245)]
.address 0x415F65
00001baa: AF := 0x10 = (0x10 & (#245 ^ RAX ^ mem[R14 + 0x10, el]:u64))
.address 0x415F65
00001bad: PF := ~low:1[let $1 = #245 >> 4 ^ #245 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415F65
00001bb0: SF := high:1[#245]
.address 0x415F65
00001bb3: ZF := 0 = #245
.address 0x415F69
00001bbd: when ~CF goto %00001bb7
00044df1: goto %000022a2

.address 0x415F6F
000022a2: 
.address 0x415F6F
000022b2: RDX := low:64[RAX + 1]
.address 0x415F73
000022b9: mem := mem with [R14 + 8, el]:u64 <- RDX
.address 0x415F77
000022c0: RDI := pad:64[pad:32[mem[RAX]]]
00044df2: goto %00001c00

.address 0x415F7A
00001c00: 
.address 0x415F7A
00001c10: RAX := pad:64[low:32[RDI - 9]]
.address 0x415F7D
00001c1d: #249 := low:32[RAX] - 1
.address 0x415F7D
00001c20: CF := low:32[RAX] < 1
.address 0x415F7D
00001c23: OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #249)]
.address 0x415F7D
00001c26: AF := 0x10 = (0x10 & (#249 ^ low:32[RAX] ^ 1))
.address 0x415F7D
00001c29: PF := ~low:1[let $1 = #249 >> 4 ^ #249 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415F7D
00001c2c: SF := high:1[#249]
.address 0x415F7D
00001c2f: ZF := 0 = #249
.address 0x415F80
00001c38: when CF | ZF goto %00001b8a
00044df3: goto %00001c3e

.address 0x415F82
00001c3e: 
.address 0x415F82
00001c49: #251 := low:32[RDI] - 0x20
.address 0x415F82
00001c4c: CF := low:32[RDI] < 0x20
.address 0x415F82
00001c4f: OF := high:1[(low:32[RDI] ^ 0x20) & (low:32[RDI] ^ #251)]
.address 0x415F82
00001c52: AF := 0x10 = (0x10 & (#251 ^ low:32[RDI] ^ 0x20))
.address 0x415F82
00001c55: PF := ~low:1[let $1 = #251 >> 4 ^ #251 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415F82
00001c58: SF := high:1[#251]
.address 0x415F82
00001c5b: ZF := 0 = #251
.address 0x415F85
00001c64: when ZF goto %00001b8a
00044df4: goto %00001c6a

.address 0x415F87
00001c6a: 
.address 0x415F87
00001c75: #253 := low:32[RDI] - 0x23
.address 0x415F87
00001c78: CF := low:32[RDI] < 0x23
.address 0x415F87
00001c7b: OF := high:1[(low:32[RDI] ^ 0x23) & (low:32[RDI] ^ #253)]
.address 0x415F87
00001c7e: AF := 0x10 = (0x10 & (#253 ^ low:32[RDI] ^ 0x23))
.address 0x415F87
00001c81: PF := ~low:1[let $1 = #253 >> 4 ^ #253 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415F87
00001c84: SF := high:1[#253]
.address 0x415F87
00001c87: ZF := 0 = #253
.address 0x415F8A
00001c90: when ZF goto %00001b12
00044df5: goto %00001c96

.address 0x416109
00001b12: 
.address 0x416109
00001b17: RAX := mem[R14 + 8, el]:u64
.address 0x41610D
00001b24: #241 := RAX - mem[R14 + 0x10, el]:u64
.address 0x41610D
00001b27: CF := RAX < mem[R14 + 0x10, el]:u64
.address 0x41610D
00001b2a: OF := high:1[(RAX ^ mem[R14 + 0x10, el]:u64) & (RAX ^ #241)]
.address 0x41610D
00001b2d: AF := 0x10 = (0x10 & (#241 ^ RAX ^ mem[R14 + 0x10, el]:u64))
.address 0x41610D
00001b30: PF := ~low:1[let $1 = #241 >> 4 ^ #241 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41610D
00001b33: SF := high:1[#241]
.address 0x41610D
00001b36: ZF := 0 = #241
.address 0x416111
00001b3f: when CF goto %00001a9e
00044df6: goto %00001b45

.address 0x416113
00001b45: 
.address 0x416113
00001b4a: RDI := R14
.address 0x416116
00001b53: RSP := RSP - 8
.address 0x416116
00001b56: mem := mem with [RSP, el]:u64 <- 0x41611B
.address 0x416116
00001b59: call @sub_403790 with return %00001b5b

.address 0x41611B
00001b5b: 
.address 0x41611B
00001b66: #243 := low:32[RAX] - 0xFFFFFFFF
.address 0x41611B
00001b69: CF := low:32[RAX] < 0xFFFFFFFF
.address 0x41611B
00001b6c: OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ #243)]
.address 0x41611B
00001b6f: AF := 0x10 = (0x10 & (#243 ^ low:32[RAX] ^ 0xFFFFFFFF))
.address 0x41611B
00001b72: PF := ~low:1[let $1 = #243 >> 4 ^ #243 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41611B
00001b75: SF := high:1[#243]
.address 0x41611B
00001b78: ZF := 0 = #243
.address 0x41611E
00001b7f: RDX := extract:63:8[RDX].pad:8[~ZF]
.address 0x416121
00001b86: goto %00001aba

.address 0x4160F0
00001a9e: 
.address 0x4160F0
00001aa3: RDX := low:64[RAX + 1]
.address 0x4160F4
00001aaa: mem := mem with [R14 + 8, el]:u64 <- RDX
.address 0x4160F8
00001ab1: RAX := pad:64[pad:32[mem[RAX]]]
.address 0x4160FB
00001ab8: RDX := 1
00044df7: goto %00001aba

.address 0x416100
00001aba: 
.address 0x416100
00001ac5: #237 := low:32[RAX] - 0xA
.address 0x416100
00001ac8: CF := low:32[RAX] < 0xA
.address 0x416100
00001acb: OF := high:1[(low:32[RAX] ^ 0xA) & (low:32[RAX] ^ #237)]
.address 0x416100
00001ace: AF := 0x10 = (0x10 & (#237 ^ low:32[RAX] ^ 0xA))
.address 0x416100
00001ad1: PF := ~low:1[let $1 = #237 >> 4 ^ #237 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x416100
00001ad4: SF := high:1[#237]
.address 0x416100
00001ad7: ZF := 0 = #237
.address 0x416103
00001ae0: when ZF goto %00001205
00044df8: goto %00001ae6

.address 0x416105
00001ae6: 
.address 0x416105
00001af1: #239 := low:8[RDX]
.address 0x416105
00001af4: OF := 0
.address 0x416105
00001af7: CF := 0
.address 0x416105
00001afa: AF := unknown[bits]:u1
.address 0x416105
00001afd: PF := ~low:1[let $1 = #239 >> 4 ^ #239 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x416105
00001b00: SF := high:1[#239]
.address 0x416105
00001b03: ZF := 0 = #239
.address 0x416107
00001b0c: when ZF goto %00001205
00044df9: goto %00001b12

.address 0x416130
00001205: 
.address 0x416130
00001210: #170 := low:32[RAX] - 0xFFFFFFFF
.address 0x416130
00001213: CF := low:32[RAX] < 0xFFFFFFFF
.address 0x416130
00001216: OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ #170)]
.address 0x416130
00001219: AF := 0x10 = (0x10 & (#170 ^ low:32[RAX] ^ 0xFFFFFFFF))
.address 0x416130
0000121c: PF := ~low:1[let $1 = #170 >> 4 ^ #170 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x416130
0000121f: SF := high:1[#170]
.address 0x416130
00001222: ZF := 0 = #170
.address 0x416133
0000122c: when ZF goto %00001226
00044dfa: goto %00001b88

.address 0x416135
00001b88: 
.address 0x416135
00001b8e: goto %00001b8a

.address 0x415F90
00001c96: 
.address 0x415F90
00001c9b: RSI := R14
.address 0x415F93
00001ca4: RSP := RSP - 8
.address 0x415F93
00001ca7: mem := mem with [RSP, el]:u64 <- 0x415F98
.address 0x415F93
00001caa: call @sub_403c30 with return %00001cac

.address 0x415F98
00001cac: 
.address 0x415F98
00001cb1: R13 := mem[RSP + 0x10, el]:u64
.address 0x415F9D
00001cb8: RCX := mem[RSP + 8, el]:u64
.address 0x415FA2
00001cbf: RSI := 0x41B193
.address 0x415FA9
00001ccc: RAX := 0
.address 0x415FA9
00001ccf: AF := unknown[bits]:u1
.address 0x415FA9
00001cd2: ZF := 1
.address 0x415FA9
00001cd5: PF := 1
.address 0x415FA9
00001cd8: OF := 0
.address 0x415FA9
00001cdb: CF := 0
.address 0x415FA9
00001cde: SF := 0
.address 0x415FAB
00001ce5: RDI := R14
.address 0x415FAE
00001cec: RDX := R13
.address 0x415FB1
00001cf5: RSP := RSP - 8
.address 0x415FB1
00001cf8: mem := mem with [RSP, el]:u64 <- 0x415FB6
.address 0x415FB1
00001cfb: call @sub_403a70 with return %00001cfd

.address 0x415FB6
00001cfd: 
.address 0x415FB6
00001d08: #255 := low:32[RAX] - 1
.address 0x415FB6
00001d0b: CF := low:32[RAX] < 1
.address 0x415FB6
00001d0e: OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #255)]
.address 0x415FB6
00001d11: AF := 0x10 = (0x10 & (#255 ^ low:32[RAX] ^ 1))
.address 0x415FB6
00001d14: PF := ~low:1[let $1 = #255 >> 4 ^ #255 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415FB6
00001d17: SF := high:1[#255]
.address 0x415FB6
00001d1a: ZF := 0 = #255
.address 0x415FB9
00001d23: when ZF | (SF | OF) & ~(SF & OF) goto %00001226
00044dfb: goto %00001d29

.address 0x415FBF
00001d29: 
.address 0x415FBF
00001d2e: RDX := R13
00044dfc: goto %00001d30

.address 0x415FC2
00001d30: 
.address 0x415FC2
00001d35: RCX := pad:64[mem[RDX, el]:u32]
.address 0x415FC4
00001d43: #257 := RDX
.address 0x415FC4
00001d46: RDX := RDX + 4
.address 0x415FC4
00001d49: CF := RDX < #257
.address 0x415FC4
00001d4c: OF := ~high:1[#257] & (high:1[#257] | high:1[RDX]) & ~(high:1[#257] & high:1[RDX])
.address 0x415FC4
00001d4f: AF := 0x10 = (0x10 & (RDX ^ #257 ^ 4))
.address 0x415FC4
00001d52: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415FC4
00001d55: SF := high:1[RDX]
.address 0x415FC4
00001d58: ZF := 0 = RDX
.address 0x415FC8
00001d5f: RAX := pad:64[low:32[RCX - 0x1010101]]
.address 0x415FCE
00001d66: RCX := pad:64[~low:32[RCX]]
.address 0x415FD0
00001d73: RAX := pad:64[low:32[RAX] & low:32[RCX]]
.address 0x415FD0
00001d76: OF := 0
.address 0x415FD0
00001d79: CF := 0
.address 0x415FD0
00001d7c: AF := unknown[bits]:u1
.address 0x415FD0
00001d7f: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415FD0
00001d82: SF := high:1[low:32[RAX]]
.address 0x415FD0
00001d85: ZF := 0 = low:32[RAX]
.address 0x415FD2
00001d92: RAX := pad:64[low:32[RAX] & 0x80808080]
.address 0x415FD2
00001d95: OF := 0
.address 0x415FD2
00001d98: CF := 0
.address 0x415FD2
00001d9b: AF := unknown[bits]:u1
.address 0x415FD2
00001d9e: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415FD2
00001da1: SF := high:1[low:32[RAX]]
.address 0x415FD2
00001da4: ZF := 0 = low:32[RAX]
.address 0x415FD7
00001dad: when ZF goto %00001d30
00044dfd: goto %00001db3

.address 0x415FD9
00001db3: 
.address 0x415FD9
00001db8: RCX := pad:64[low:32[RAX]]
.address 0x415FDB
00001dbf: R13 := mem[RSP + 8, el]:u64
.address 0x415FE0
00001dcd: #262 := low:32[RCX]
.address 0x415FE0
00001dd0: RCX := pad:64[low:32[RCX] >> 0x10]
.address 0x415FE0
00001dd3: CF := high:1[#262 << 0x10]
.address 0x415FE0
00001dd6: SF := high:1[low:32[RCX]]
.address 0x415FE0
00001dd9: ZF := 0 = low:32[RCX]
.address 0x415FE0
00001ddc: PF := ~low:1[let $1 = low:32[RCX] >> 4 ^ low:32[RCX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415FE0
00001ddf: AF := unknown[bits]:u1
.address 0x415FE0
00001de2: OF := unknown[bits]:u1
.address 0x415FE3
00001def: #264 := low:32[RAX] & 0x8080
.address 0x415FE3
00001df2: OF := 0
.address 0x415FE3
00001df5: CF := 0
.address 0x415FE3
00001df8: AF := unknown[bits]:u1
.address 0x415FE3
00001dfb: PF := ~low:1[let $1 = #264 >> 4 ^ #264 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415FE3
00001dfe: SF := high:1[#264]
.address 0x415FE3
00001e01: ZF := 0 = #264
.address 0x415FE8
00001e08: RAX := pad:64[if ZF then low:32[RCX] else low:32[RAX]]
.address 0x415FEB
00001e0f: RCX := low:64[RDX + 2]
.address 0x415FEF
00001e16: RDX := if ZF then RCX else RDX
.address 0x415FF3
00001e1d: RCX := pad:64[low:32[RAX]]
.address 0x415FF5
00001e2c: #266 := low:8[RCX]
.address 0x415FF5
00001e2f: #267 := low:8[RAX]
.address 0x415FF5
00001e32: RCX := extract:63:8[RCX].low:8[RCX] + #267
.address 0x415FF5
00001e35: CF := low:8[RCX] < #266
.address 0x415FF5
00001e38: OF := high:1[#266] = high:1[#267] & (high:1[#266] | high:1[low:8[RCX]]) & ~(
high:1[#266] & high:1[low:8[RCX]])
.address 0x415FF5
00001e3b: AF := 0x10 = (0x10 & (low:8[RCX] ^ #266 ^ #267))
.address 0x415FF5
00001e3e: PF := ~low:1[let $1 = low:8[RCX] >> 4 ^ low:8[RCX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x415FF5
00001e41: SF := high:1[low:8[RCX]]
.address 0x415FF5
00001e44: ZF := 0 = low:8[RCX]
.address 0x415FF7
00001e52: #270 := RDX
.address 0x415FF7
00001e55: RDX := #270 - 3 + pad:64[CF]
.address 0x415FF7
00001e58: OF := high:1[(3 ^ #270) & (#270 ^ RDX)]
.address 0x415FF7
00001e5b: CF := #270 < 3 + pad:64[CF] | 3 + pad:64[CF] < 3
.address 0x415FF7
00001e5e: AF := 0x10 = (0x10 & (RDX ^ 3 ^ #270))
.address 0x415FF7
00001e61: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415FF7
00001e64: SF := high:1[RDX]
.address 0x415FF7
00001e67: ZF := 0 = RDX
.address 0x415FFB
00001e76: #272 := RDX
.address 0x415FFB
00001e79: #273 := mem[RSP + 0x10, el]:u64
.address 0x415FFB
00001e7c: RDX := RDX - mem[RSP + 0x10, el]:u64
.address 0x415FFB
00001e7f: CF := #272 < #273
.address 0x415FFB
00001e82: OF := high:1[(#272 ^ #273) & (#272 ^ RDX)]
.address 0x415FFB
00001e85: AF := 0x10 = (0x10 & (RDX ^ #272 ^ #273))
.address 0x415FFB
00001e88: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415FFB
00001e8b: SF := high:1[RDX]
.address 0x415FFB
00001e8e: ZF := 0 = RDX
00044dfe: goto %00001e90

.address 0x416000
00001e90: 
.address 0x416000
00001e95: RSI := pad:64[mem[R13, el]:u32]
.address 0x416004
00001ea3: #275 := R13
.address 0x416004
00001ea6: R13 := R13 + 4
.address 0x416004
00001ea9: CF := R13 < #275
.address 0x416004
00001eac: OF := ~high:1[#275] & (high:1[#275] | high:1[R13]) & ~(high:1[#275] & high:1[R13])
.address 0x416004
00001eaf: AF := 0x10 = (0x10 & (R13 ^ #275 ^ 4))
.address 0x416004
00001eb2: PF := ~low:1[let $1 = R13 >> 4 ^ R13 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x416004
00001eb5: SF := high:1[R13]
.address 0x416004
00001eb8: ZF := 0 = R13
.address 0x416008
00001ebf: RAX := pad:64[low:32[RSI - 0x1010101]]
.address 0x41600E
00001ec6: RSI := pad:64[~low:32[RSI]]
.address 0x416010
00001ed3: RAX := pad:64[low:32[RAX] & low:32[RSI]]
.address 0x416010
00001ed6: OF := 0
.address 0x416010
00001ed9: CF := 0
.address 0x416010
00001edc: AF := unknown[bits]:u1
.address 0x416010
00001edf: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x416010
00001ee2: SF := high:1[low:32[RAX]]
.address 0x416010
00001ee5: ZF := 0 = low:32[RAX]
.address 0x416012
00001ef2: RAX := pad:64[low:32[RAX] & 0x80808080]
.address 0x416012
00001ef5: OF := 0
.address 0x416012
00001ef8: CF := 0
.address 0x416012
00001efb: AF := unknown[bits]:u1
.address 0x416012
00001efe: PF := ~low:1[let $1 = low:32[RAX] >> 4 ^ low:32[RAX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x416012
00001f01: SF := high:1[low:32[RAX]]
.address 0x416012
00001f04: ZF := 0 = low:32[RAX]
.address 0x416017
00001f0d: when ZF goto %00001e90
00044dff: goto %00001f13

.address 0x416019
00001f13: 
.address 0x416019
00001f18: RSI := pad:64[low:32[RAX]]
.address 0x41601B
00001f1f: mem := mem with [RSP + 0x18, el]:u64 <- RDX
.address 0x416020
00001f2d: #280 := low:32[RSI]
.address 0x416020
00001f30: RSI := pad:64[low:32[RSI] >> 0x10]
.address 0x416020
00001f33: CF := high:1[#280 << 0x10]
.address 0x416020
00001f36: SF := high:1[low:32[RSI]]
.address 0x416020
00001f39: ZF := 0 = low:32[RSI]
.address 0x416020
00001f3c: PF := ~low:1[let $1 = low:32[RSI] >> 4 ^ low:32[RSI] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x416020
00001f3f: AF := unknown[bits]:u1
.address 0x416020
00001f42: OF := unknown[bits]:u1
.address 0x416023
00001f4f: #282 := low:32[RAX] & 0x8080
.address 0x416023
00001f52: OF := 0
.address 0x416023
00001f55: CF := 0
.address 0x416023
00001f58: AF := unknown[bits]:u1
.address 0x416023
00001f5b: PF := ~low:1[let $1 = #282 >> 4 ^ #282 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x416023
00001f5e: SF := high:1[#282]
.address 0x416023
00001f61: ZF := 0 = #282
.address 0x416028
00001f68: RAX := pad:64[if ZF then low:32[RSI] else low:32[RAX]]
.address 0x41602B
00001f6f: RSI := low:64[R13 + 2]
.address 0x41602F
00001f76: RCX := pad:64[low:32[RAX]]
.address 0x416031
00001f7d: R13 := if ZF then RSI else R13
.address 0x416035
00001f8c: #284 := low:8[RCX]
.address 0x416035
00001f8f: #285 := low:8[RAX]
.address 0x416035
00001f92: RCX := extract:63:8[RCX].low:8[RCX] + #285
.address 0x416035
00001f95: CF := low:8[RCX] < #284
.address 0x416035
00001f98: OF := high:1[#284] = high:1[#285] & (high:1[#284] | high:1[low:8[RCX]]) & ~(
high:1[#284] & high:1[low:8[RCX]])
.address 0x416035
00001f9b: AF := 0x10 = (0x10 & (low:8[RCX] ^ #284 ^ #285))
.address 0x416035
00001f9e: PF := ~low:1[let $1 = low:8[RCX] >> 4 ^ low:8[RCX] in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x416035
00001fa1: SF := high:1[low:8[RCX]]
.address 0x416035
00001fa4: ZF := 0 = low:8[RCX]
.address 0x416037
00001fb2: #288 := R13
.address 0x416037
00001fb5: R13 := #288 - 3 + pad:64[CF]
.address 0x416037
00001fb8: OF := high:1[(3 ^ #288) & (#288 ^ R13)]
.address 0x416037
00001fbb: CF := #288 < 3 + pad:64[CF] | 3 + pad:64[CF] < 3
.address 0x416037
00001fbe: AF := 0x10 = (0x10 & (R13 ^ 3 ^ #288))
.address 0x416037
00001fc1: PF := ~low:1[let $1 = R13 >> 4 ^ R13 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x416037
00001fc4: SF := high:1[R13]
.address 0x416037
00001fc7: ZF := 0 = R13
.address 0x41603B
00001fd6: #290 := R13
.address 0x41603B
00001fd9: #291 := mem[RSP + 8, el]:u64
.address 0x41603B
00001fdc: R13 := R13 - mem[RSP + 8, el]:u64
.address 0x41603B
00001fdf: CF := #290 < #291
.address 0x41603B
00001fe2: OF := high:1[(#290 ^ #291) & (#290 ^ R13)]
.address 0x41603B
00001fe5: AF := 0x10 = (0x10 & (R13 ^ #290 ^ #291))
.address 0x41603B
00001fe8: PF := ~low:1[let $1 = R13 >> 4 ^ R13 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41603B
00001feb: SF := high:1[R13]
.address 0x41603B
00001fee: ZF := 0 = R13
.address 0x416040
00001ffb: #293 := mem[RSP, el]:u64
.address 0x416040
00001ffe: CF := mem[RSP, el]:u64 < 0
.address 0x416040
00002001: OF := high:1[mem[RSP, el]:u64 & (mem[RSP, el]:u64 ^ #293)]
.address 0x416040
00002004: AF := 0x10 = (0x10 & (#293 ^ mem[RSP, el]:u64))
.address 0x416040
00002007: PF := ~low:1[let $1 = #293 >> 4 ^ #293 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x416040
0000200a: SF := high:1[#293]
.address 0x416040
0000200d: ZF := 0 = #293
.address 0x416045
00002014: RAX := low:64[RDX + R13]
.address 0x416049
0000201e: when ~ZF goto %00002018
00044e00: goto %000022c2

.address 0x41613A
00002018: 
.address 0x41613A
00002030: #295 := RAX
.address 0x41613A
00002033: #296 := mem[RSP, el]:u64
.address 0x41613A
00002036: RAX := RAX + #296
.address 0x41613A
00002039: CF := RAX < #295
.address 0x41613A
0000203c: OF := high:1[#295] = high:1[#296] & (high:1[#295] | high:1[RAX]) & ~(
high:1[#295] & high:1[RAX])
.address 0x41613A
0000203f: AF := 0x10 = (0x10 & (RAX ^ #295 ^ #296))
.address 0x41613A
00002042: PF := ~low:1[let $1 = RAX >> 4 ^ RAX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41613A
00002045: SF := high:1[RAX]
.address 0x41613A
00002048: ZF := 0 = RAX
.address 0x41613E
0000204f: RDI := R15
.address 0x416141
00002056: RCX := low:64[RAX + 2]
.address 0x416145
0000205d: RSI := low:64[RAX + 3]
.address 0x416149
00002064: mem := mem with [RSP, el]:u64 <- RCX
.address 0x41614D
0000206d: RSP := RSP - 8
.address 0x41614D
00002070: mem := mem with [RSP, el]:u64 <- 0x416152
.address 0x41614D
00002073: call @sub_403c90 with return %00002075

.address 0x416152
00002075: 
.address 0x416152
0000207a: RDX := mem[RSP + 0x18, el]:u64
.address 0x416157
00002081: R12 := RAX
.address 0x41615A
00002089: goto %00002085

.address 0x41604F
000022c2: 
.address 0x41604F
000022c7: RCX := low:64[RAX + 2]
.address 0x416053
000022ce: RDI := low:64[RAX + 3]
.address 0x416057
000022d5: mem := mem with [RSP, el]:u64 <- RCX
.address 0x41605B
000022de: RSP := RSP - 8
.address 0x41605B
000022e1: mem := mem with [RSP, el]:u64 <- 0x416060
.address 0x41605B
000022e4: call @sub_403e78 with return %000022e6

.address 0x416060
000022e6: 
.address 0x416060
000022eb: RDX := mem[RSP + 0x18, el]:u64
.address 0x416065
000022f2: R12 := RAX
00044e01: goto %00002085

.address 0x416068
00002085: 
.address 0x416068
00002095: #298 := R12
.address 0x416068
00002098: OF := 0
.address 0x416068
0000209b: CF := 0
.address 0x416068
0000209e: AF := unknown[bits]:u1
.address 0x416068
000020a1: PF := ~low:1[let $1 = #298 >> 4 ^ #298 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x416068
000020a4: SF := high:1[#298]
.address 0x416068
000020a7: ZF := 0 = #298
.address 0x41606B
000020b1: when ZF goto %000020ab
00044e02: goto %0000216c

.address 0x41615F
000020ab: 
.address 0x41615F
000020bb: RDI := R15
.address 0x416162
000020c2: R15 := 0x417C4A
.address 0x416169
000020cb: RSP := RSP - 8
.address 0x416169
000020ce: mem := mem with [RSP, el]:u64 <- 0x41616E
.address 0x416169
000020d1: call @sub_403e70 with return %000020d3

.address 0x41616E
000020d3: 
.address 0x41616E
000020d8: RDI := R14
.address 0x416171
000020e1: RSP := RSP - 8
.address 0x416171
000020e4: mem := mem with [RSP, el]:u64 <- 0x416176
.address 0x416171
000020e7: call @sub_4161a0 with return %000020e9

.address 0x416176
000020e9: 
.address 0x416176
000020ee: goto %000011bd

.address 0x416071
0000216c: 
.address 0x416071
00002171: R15 := mem[RSP, el]:u64
.address 0x416075
00002178: RDI := 0xFFFFFFFFFFFFFFFE
.address 0x41607C
0000217f: RSI := mem[RSP + 0x10, el]:u64
.address 0x416081
0000218e: #304 := RDI
.address 0x416081
00002191: #305 := RDX
.address 0x416081
00002194: RDI := RDI - RDX
.address 0x416081
00002197: CF := #304 < #305
.address 0x416081
0000219a: OF := high:1[(#304 ^ #305) & (#304 ^ RDI)]
.address 0x416081
0000219d: AF := 0x10 = (0x10 & (RDI ^ #304 ^ #305))
.address 0x416081
000021a0: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x416081
000021a3: SF := high:1[RDI]
.address 0x416081
000021a6: ZF := 0 = RDI
.address 0x416084
000021b4: #307 := RDX
.address 0x416084
000021b7: RDX := RDX + 1
.address 0x416084
000021ba: CF := RDX < #307
.address 0x416084
000021bd: OF := ~high:1[#307] & (high:1[#307] | high:1[RDX]) & ~(high:1[#307] & high:1[RDX])
.address 0x416084
000021c0: AF := 0x10 = (0x10 & (RDX ^ #307 ^ 1))
.address 0x416084
000021c3: PF := ~low:1[let $1 = RDX >> 4 ^ RDX in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x416084
000021c6: SF := high:1[RDX]
.address 0x416084
000021c9: ZF := 0 = RDX
.address 0x416088
000021d8: #310 := R15
.address 0x416088
000021db: #311 := R13
.address 0x416088
000021de: R15 := R15 - R13
.address 0x416088
000021e1: CF := #310 < #311
.address 0x416088
000021e4: OF := high:1[(#310 ^ #311) & (#310 ^ R15)]
.address 0x416088
000021e7: AF := 0x10 = (0x10 & (R15 ^ #310 ^ #311))
.address 0x416088
000021ea: PF := ~low:1[let $1 = R15 >> 4 ^ R15 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x416088
000021ed: SF := high:1[R15]
.address 0x416088
000021f0: ZF := 0 = R15
.address 0x41608B
000021ff: #313 := RDI
.address 0x41608B
00002202: #314 := R15
.address 0x41608B
00002205: RDI := RDI + #314
.address 0x41608B
00002208: CF := RDI < #313
.address 0x41608B
0000220b: OF := high:1[#313] = high:1[#314] & (high:1[#313] | high:1[RDI]) & ~(
high:1[#313] & high:1[RDI])
.address 0x41608B
0000220e: AF := 0x10 = (0x10 & (RDI ^ #313 ^ #314))
.address 0x41608B
00002211: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41608B
00002214: SF := high:1[RDI]
.address 0x41608B
00002217: ZF := 0 = RDI
.address 0x41608E
00002226: #316 := RDI
.address 0x41608E
00002229: #317 := R12
.address 0x41608E
0000222c: RDI := RDI + #317
.address 0x41608E
0000222f: CF := RDI < #316
.address 0x41608E
00002232: OF := high:1[#316] = high:1[#317] & (high:1[#316] | high:1[RDI]) & ~(
high:1[#316] & high:1[RDI])
.address 0x41608E
00002235: AF := 0x10 = (0x10 & (RDI ^ #316 ^ #317))
.address 0x41608E
00002238: PF := ~low:1[let $1 = RDI >> 4 ^ RDI in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41608E
0000223b: SF := high:1[RDI]
.address 0x41608E
0000223e: ZF := 0 = RDI
.address 0x416091
00002247: RSP := RSP - 8
.address 0x416091
0000224a: mem := mem with [RSP, el]:u64 <- 0x416096
.address 0x416091
0000224d: call @sub_403b80 with return %0000224f

.address 0x416096
0000224f: 
.address 0x416096
00002254: RSI := mem[RSP + 8, el]:u64
.address 0x41609B
0000225b: RDI := low:64[R12 + R15 - 1]
.address 0x4160A0
00002262: RDX := low:64[R13 + 1]
.address 0x4160A4
00002269: R15 := R12
.address 0x4160A7
00002272: RSP := RSP - 8
.address 0x4160A7
00002275: mem := mem with [RSP, el]:u64 <- 0x4160AC
.address 0x4160A7
00002278: call @sub_403b80 with return %0000227a

.address 0x4160AC
0000227a: 
.address 0x4160AC
0000227f: RAX := mem[R14 + 8, el]:u64
.address 0x4160B0
0000228c: #319 := RAX - mem[R14 + 0x10, el]:u64
.address 0x4160B0
0000228f: CF := RAX < mem[R14 + 0x10, el]:u64
.address 0x4160B0
00002292: OF := high:1[(RAX ^ mem[R14 + 0x10, el]:u64) & (RAX ^ #319)]
.address 0x4160B0
00002295: AF := 0x10 = (0x10 & (#319 ^ RAX ^ mem[R14 + 0x10, el]:u64))
.address 0x4160B0
00002298: PF := ~low:1[let $1 = #319 >> 4 ^ #319 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4160B0
0000229b: SF := high:1[#319]
.address 0x4160B0
0000229e: ZF := 0 = #319
.address 0x4160B4
000022a8: when CF goto %000022a2
00044e03: goto %00001bb7

.address 0x4160BA
00001bb7: 
.address 0x4160BA
00001bc7: RDI := R14
.address 0x4160BD
00001bd0: RSP := RSP - 8
.address 0x4160BD
00001bd3: mem := mem with [RSP, el]:u64 <- 0x4160C2
.address 0x4160BD
00001bd6: call @sub_403790 with return %00001bd8

.address 0x4160C2
00001bd8: 
.address 0x4160C2
00001be3: #247 := low:32[RAX] - 0xFFFFFFFF
.address 0x4160C2
00001be6: CF := low:32[RAX] < 0xFFFFFFFF
.address 0x4160C2
00001be9: OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ #247)]
.address 0x4160C2
00001bec: AF := 0x10 = (0x10 & (#247 ^ low:32[RAX] ^ 0xFFFFFFFF))
.address 0x4160C2
00001bef: PF := ~low:1[let $1 = #247 >> 4 ^ #247 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4160C2
00001bf2: SF := high:1[#247]
.address 0x4160C2
00001bf5: ZF := 0 = #247
.address 0x4160C5
00001bfc: RDI := pad:64[low:32[RAX]]
.address 0x4160C7
00001c06: when ~ZF goto %00001c00
00044e04: goto %00001226

.address 0x4160CD
00001226: 
.address 0x4160CD
00001236: RDI := R14
.address 0x4160D0
00001240: RSP := RSP - 8
.address 0x4160D0
00001243: mem := mem with [RSP, el]:u64 <- 0x4160D5
.address 0x4160D0
00001246: call @sub_4161a0 with return %00001a5a

.address 0x4160D5
00001a5a: 
.address 0x4160D5
00001a5f: RAX := mem[RSP, el]:u64
.address 0x4160D9
00001a6c: #235 := RAX
.address 0x4160D9
00001a6f: OF := 0
.address 0x4160D9
00001a72: CF := 0
.address 0x4160D9
00001a75: AF := unknown[bits]:u1
.address 0x4160D9
00001a78: PF := ~low:1[let $1 = #235 >> 4 ^ #235 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4160D9
00001a7b: SF := high:1[#235]
.address 0x4160D9
00001a7e: ZF := 0 = #235
.address 0x4160DC
00001a87: when ZF goto %000011b1
00044e05: goto %00001a8d

.address 0x4160E2
00001a8d: 
.address 0x4160E2
00001a92: mem := mem with [R15 + RAX] <- 0
.address 0x4160E7
00001a99: goto %000011bd

.address 0x415F04
000011b1: 
.address 0x415F04
000011bb: R15 := 0x417C4A
00044e06: goto %000011bd

.address 0x415F0B
000011bd: 
.address 0x415F0B
000011c2: RDI := RBP
.address 0x415F0E
000011cb: RSP := RSP - 8
.address 0x415F0E
000011ce: mem := mem with [RSP, el]:u64 <- 0x415F13
.address 0x415F0E
000011d1: call @sub_403e70 with return %000011d3

.address 0x415F13
000011d3: 
.address 0x415F13
000011d8: goto %00001012

.address 0x415E14
00002313: 
.address 0x415E14
0000231f: #321 := RSP
.address 0x415E14
00002322: RSP := RSP + 0xA8
.address 0x415E14
00002325: CF := RSP < #321
.address 0x415E14
00002328: OF := ~high:1[#321] & (high:1[#321] | high:1[RSP]) & ~(high:1[#321] & high:1[RSP])
.address 0x415E14
0000232b: AF := 0x10 = (0x10 & (RSP ^ #321 ^ 0xA8))
.address 0x415E14
0000232e: PF := ~low:1[let $1 = RSP >> 4 ^ RSP in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x415E14
00002331: SF := high:1[RSP]
.address 0x415E14
00002334: ZF := 0 = RSP
.address 0x415E1B
0000233c: RBX := mem[RSP, el]:u64
.address 0x415E1B
0000233f: RSP := RSP + 8
.address 0x415E1C
00002347: RBP := mem[RSP, el]:u64
.address 0x415E1C
0000234a: RSP := RSP + 8
.address 0x415E1D
00002352: R12 := mem[RSP, el]:u64
.address 0x415E1D
00002355: RSP := RSP + 8
.address 0x415E1F
0000235d: R13 := mem[RSP, el]:u64
.address 0x415E1F
00002360: RSP := RSP + 8
.address 0x415E21
00002368: R14 := mem[RSP, el]:u64
.address 0x415E21
0000236b: RSP := RSP + 8
.address 0x415E23
00002373: R15 := mem[RSP, el]:u64
.address 0x415E23
00002376: RSP := RSP + 8
.address 0x415E25
0000237f: #324 := mem[RSP, el]:u64
.address 0x415E25
00002382: RSP := RSP + 8
.address 0x415E25
00002386: call #324 with noreturn

.address 0x415DA0
000024de: 
.address 0x415DA0
000024ee: RDI := R15
.address 0x415DA3
000024f7: RSP := RSP - 8
.address 0x415DA3
000024fa: mem := mem with [RSP, el]:u64 <- 0x415DA8
.address 0x415DA3
000024fd: call @sub_403950 with return %000024ff

.address 0x415DA8
000024ff: 
.address 0x415DA8
00002504: RBP := low:64[R15 + RAX + 1]
.address 0x415DAD
0000250b: RDI := RBP
.address 0x415DB0
00002514: RSP := RSP - 8
.address 0x415DB0
00002517: mem := mem with [RSP, el]:u64 <- 0x415DB5
.address 0x415DB0
0000251a: call @sub_403950 with return %0000251c

.address 0x415DB5
0000251c: 
.address 0x415DB5
00002521: R15 := low:64[RBP + RAX + 1]
00044e07: goto %00000ee4


.address 0x4161A0
00044608: sub sub_4161a0()
.address 0x4161A0
0000123c: 
.address 0x4161A0
0000124e: #172 := R12
.address 0x4161A0
00001251: RSP := RSP - 8
.address 0x4161A0
00001254: mem := mem with [RSP, el]:u64 <- #172
.address 0x4161A2
0000125d: #173 := RBP
.address 0x4161A2
00001260: RSP := RSP - 8
.address 0x4161A2
00001263: mem := mem with [RSP, el]:u64 <- #173
.address 0x4161A3
0000126c: #174 := RBX
.address 0x4161A3
0000126f: RSP := RSP - 8
.address 0x4161A3
00001272: mem := mem with [RSP, el]:u64 <- #174
.address 0x4161A4
00001279: RBX := RDI
.address 0x4161A7
00001282: RSP := RSP - 8
.address 0x4161A7
00001285: mem := mem with [RSP, el]:u64 <- 0x4161AC
.address 0x4161A7
00001288: call @sub_403bc0 with return %0000128a

.address 0x4161AC
0000128a: 
.address 0x4161AC
00001295: #175 := low:32[RAX]
.address 0x4161AC
00001298: OF := 0
.address 0x4161AC
0000129b: CF := 0
.address 0x4161AC
0000129e: AF := unknown[bits]:u1
.address 0x4161AC
000012a1: PF := ~low:1[let $1 = #175 >> 4 ^ #175 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4161AC
000012a4: SF := high:1[#175]
.address 0x4161AC
000012a7: ZF := 0 = #175
.address 0x4161AE
000012ae: RDI := RBX
.address 0x4161B1
000012b8: when SF goto %000012b2
00044e08: goto %00001a1f

.address 0x4161B3
00001a1f: 
.address 0x4161B3
00001a26: RSP := RSP - 8
.address 0x4161B3
00001a29: mem := mem with [RSP, el]:u64 <- 0x4161B8
.address 0x4161B3
00001a2c: call @sub_403c70 with return %00001a2e

.address 0x4161B8
00001a2e: 
.address 0x4161B8
00001a39: #233 := low:32[RAX]
.address 0x4161B8
00001a3c: OF := 0
.address 0x4161B8
00001a3f: CF := 0
.address 0x4161B8
00001a42: AF := unknown[bits]:u1
.address 0x4161B8
00001a45: PF := ~low:1[let $1 = #233 >> 4 ^ #233 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4161B8
00001a48: SF := high:1[#233]
.address 0x4161B8
00001a4b: ZF := 0 = #233
.address 0x4161BA
00001a54: when ~ZF goto %0000132e
00044e09: goto %000013a1

.address 0x4161E8
0000132e: 
.address 0x4161E8
00001333: RDI := RBX
.address 0x4161EB
0000133c: RSP := RSP - 8
.address 0x4161EB
0000133f: mem := mem with [RSP, el]:u64 <- 0x4161F0
.address 0x4161EB
00001342: call @sub_403bc0 with return %00001344

.address 0x4161F0
00001344: 
.address 0x4161F0
0000134f: RSI := 0
.address 0x4161F0
00001352: AF := unknown[bits]:u1
.address 0x4161F0
00001355: ZF := 1
.address 0x4161F0
00001358: PF := 1
.address 0x4161F0
0000135b: OF := 0
.address 0x4161F0
0000135e: CF := 0
.address 0x4161F0
00001361: SF := 0
.address 0x4161F2
00001368: RDX := 1
.address 0x4161F7
0000136f: RDI := pad:64[low:32[RAX]]
.address 0x4161F9
00001378: RSP := RSP - 8
.address 0x4161F9
0000137b: mem := mem with [RSP, el]:u64 <- 0x4161FE
.address 0x4161F9
0000137e: call @sub_403a10 with return %00001380

.address 0x4161FE
00001380: 
.address 0x4161FE
0000138b: #178 := RAX - 0xFFFFFFFFFFFFFFFF
.address 0x4161FE
0000138e: CF := RAX < 0xFFFFFFFFFFFFFFFF
.address 0x4161FE
00001391: OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ #178)]
.address 0x4161FE
00001394: AF := 0x10 = (0x10 & (#178 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
.address 0x4161FE
00001397: PF := ~low:1[let $1 = #178 >> 4 ^ #178 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4161FE
0000139a: SF := high:1[#178]
.address 0x4161FE
0000139d: ZF := 0 = #178
.address 0x416202
000013a7: when ~ZF goto %000013a1
00044e0a: goto %000019ab

.address 0x4161BC
000013a1: 
.address 0x4161BC
000013b1: RDI := RBX
.address 0x4161BF
000013bb: RSP := RSP - 8
.address 0x4161BF
000013be: mem := mem with [RSP, el]:u64 <- 0x4161C4
.address 0x4161BF
000013c1: call @sub_416220 with return %0000198a

.address 0x4161C4
0000198a: 
.address 0x4161C4
00001995: #229 := low:32[RAX]
.address 0x4161C4
00001998: OF := 0
.address 0x4161C4
0000199b: CF := 0
.address 0x4161C4
0000199e: AF := unknown[bits]:u1
.address 0x4161C4
000019a1: PF := ~low:1[let $1 = #229 >> 4 ^ #229 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4161C4
000019a4: SF := high:1[#229]
.address 0x4161C4
000019a7: ZF := 0 = #229
.address 0x4161C6
000019b1: when ZF goto %000019ab
00044e0b: goto %000019bd

.address 0x416204
000019ab: 
.address 0x416204
000019bb: RDI := RBX
00044e0c: goto %000012b2

.address 0x416207
000012b2: 
.address 0x416207
000012c3: RBX := mem[RSP, el]:u64
.address 0x416207
000012c6: RSP := RSP + 8
.address 0x416208
000012ce: RBP := mem[RSP, el]:u64
.address 0x416208
000012d1: RSP := RSP + 8
.address 0x416209
000012d9: R12 := mem[RSP, el]:u64
.address 0x416209
000012dc: RSP := RSP + 8
.address 0x41620B
000012e3: call @sub_4038f0 with noreturn

.address 0x4161C8
000019bd: 
.address 0x4161C8
000019c4: RSP := RSP - 8
.address 0x4161C8
000019c7: mem := mem with [RSP, el]:u64 <- 0x4161CD
.address 0x4161C8
000019ca: call @sub_4037f0 with return %000019cc

.address 0x4161CD
000019cc: 
.address 0x4161CD
000019d1: R12 := pad:64[mem[RAX, el]:u32]
.address 0x4161D0
000019d8: RDI := RBX
.address 0x4161D3
000019df: RBP := RAX
.address 0x4161D6
000019e8: RSP := RSP - 8
.address 0x4161D6
000019eb: mem := mem with [RSP, el]:u64 <- 0x4161DB
.address 0x4161D6
000019ee: call @sub_4038f0 with return %000019f0

.address 0x4161DB
000019f0: 
.address 0x4161DB
000019fb: #231 := low:32[R12]
.address 0x4161DB
000019fe: OF := 0
.address 0x4161DB
00001a01: CF := 0
.address 0x4161DB
00001a04: AF := unknown[bits]:u1
.address 0x4161DB
00001a07: PF := ~low:1[let $1 = #231 >> 4 ^ #231 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4161DB
00001a0a: SF := high:1[#231]
.address 0x4161DB
00001a0d: ZF := 0 = #231
.address 0x4161DE
00001a16: when ~ZF goto %000012e5
00044e0d: goto %000012f5

.address 0x416210
000012e5: 
.address 0x416210
000012ea: mem := mem with [RBP, el]:u32 <- low:32[R12]
.address 0x416214
000012f1: RAX := 0xFFFFFFFF
.address 0x416219
000012f9: goto %000012f5

.address 0x4161E0
000012f5: 
.address 0x4161E0
00001300: RBX := mem[RSP, el]:u64
.address 0x4161E0
00001303: RSP := RSP + 8
.address 0x4161E1
0000130b: RBP := mem[RSP, el]:u64
.address 0x4161E1
0000130e: RSP := RSP + 8
.address 0x4161E2
00001316: R12 := mem[RSP, el]:u64
.address 0x4161E2
00001319: RSP := RSP + 8
.address 0x4161E4
00001322: #177 := mem[RSP, el]:u64
.address 0x4161E4
00001325: RSP := RSP + 8
.address 0x4161E4
00001329: call #177 with noreturn


.address 0x416220
0004460f: sub sub_416220()
.address 0x416220
000013b7: 
.address 0x416220
000013cd: #180 := RDI
.address 0x416220
000013d0: OF := 0
.address 0x416220
000013d3: CF := 0
.address 0x416220
000013d6: AF := unknown[bits]:u1
.address 0x416220
000013d9: PF := ~low:1[let $1 = #180 >> 4 ^ #180 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x416220
000013dc: SF := high:1[#180]
.address 0x416220
000013df: ZF := 0 = #180
.address 0x416223
000013e8: #182 := RBX
.address 0x416223
000013eb: RSP := RSP - 8
.address 0x416223
000013ee: mem := mem with [RSP, el]:u64 <- #182
.address 0x416224
000013f5: RBX := RDI
.address 0x416227
000013ff: when ZF goto %000013f9
00044e0e: goto %00001923

.address 0x416229
00001923: 
.address 0x416229
0000192a: RSP := RSP - 8
.address 0x416229
0000192d: mem := mem with [RSP, el]:u64 <- 0x41622E
.address 0x416229
00001930: call @sub_403c70 with return %00001932

.address 0x41622E
00001932: 
.address 0x41622E
0000193d: #225 := low:32[RAX]
.address 0x41622E
00001940: OF := 0
.address 0x41622E
00001943: CF := 0
.address 0x41622E
00001946: AF := unknown[bits]:u1
.address 0x41622E
00001949: PF := ~low:1[let $1 = #225 >> 4 ^ #225 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41622E
0000194c: SF := high:1[#225]
.address 0x41622E
0000194f: ZF := 0 = #225
.address 0x416230
00001958: when ZF goto %000013f9
00044e0f: goto %0000195e

.address 0x416232
0000195e: 
.address 0x416232
00001969: #227 := mem[RBX, el]:u32 & 0x100
.address 0x416232
0000196c: OF := 0
.address 0x416232
0000196f: CF := 0
.address 0x416232
00001972: AF := unknown[bits]:u1
.address 0x416232
00001975: PF := ~low:1[let $1 = #227 >> 4 ^ #227 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x416232
00001978: SF := high:1[#227]
.address 0x416232
0000197b: ZF := 0 = #227
.address 0x416238
00001984: when ~ZF goto %00001420
00044e10: goto %000013f9

.address 0x416248
00001420: 
.address 0x416248
00001425: RDI := RBX
.address 0x41624B
0000142c: RDX := 1
.address 0x416250
00001439: RSI := 0
.address 0x416250
0000143c: AF := unknown[bits]:u1
.address 0x416250
0000143f: ZF := 1
.address 0x416250
00001442: PF := 1
.address 0x416250
00001445: OF := 0
.address 0x416250
00001448: CF := 0
.address 0x416250
0000144b: SF := 0
.address 0x416252
00001455: RSP := RSP - 8
.address 0x416252
00001458: mem := mem with [RSP, el]:u64 <- 0x416257
.address 0x416252
0000145b: call @sub_416260 with return %0000190a

.address 0x416257
0000190a: 
.address 0x416257
0000190f: RDI := RBX
.address 0x41625A
00001917: RBX := mem[RSP, el]:u64
.address 0x41625A
0000191a: RSP := RSP + 8
.address 0x41625B
00001921: goto %00000827

.address 0x41623A
000013f9: 
.address 0x41623A
00001409: RDI := RBX
.address 0x41623D
00001411: RBX := mem[RSP, el]:u64
.address 0x41623D
00001414: RSP := RSP + 8
.address 0x41623E
0000141b: goto %00000827

.address 0x403C10
00000827: 
.address 0x403C10
0000082d: call mem[0x61FE98, el]:u64 with noreturn


.address 0x416260
00044613: sub sub_416260()
.address 0x416260
00001451: 
.address 0x416260
00001461: RAX := mem[RDI + 8, el]:u64
.address 0x416264
0000146e: #183 := mem[RDI + 0x10, el]:u64 - RAX
.address 0x416264
00001471: CF := mem[RDI + 0x10, el]:u64 < RAX
.address 0x416264
00001474: OF := high:1[(mem[RDI + 0x10, el]:u64 ^ RAX) & (mem[RDI + 0x10, el]:u64 ^ #183)]
.address 0x416264
00001477: AF := 0x10 = (0x10 & (#183 ^ mem[RDI + 0x10, el]:u64 ^ RAX))
.address 0x416264
0000147a: PF := ~low:1[let $1 = #183 >> 4 ^ #183 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x416264
0000147d: SF := high:1[#183]
.address 0x416264
00001480: ZF := 0 = #183
.address 0x416268
0000148a: when ZF goto %00001484
00044e11: goto %000014b7

.address 0x416270
00001484: 
.address 0x416270
00001494: RAX := mem[RDI + 0x20, el]:u64
.address 0x416274
000014a1: #185 := mem[RDI + 0x28, el]:u64 - RAX
.address 0x416274
000014a4: CF := mem[RDI + 0x28, el]:u64 < RAX
.address 0x416274
000014a7: OF := high:1[(mem[RDI + 0x28, el]:u64 ^ RAX) & (mem[RDI + 0x28, el]:u64 ^ #185)]
.address 0x416274
000014aa: AF := 0x10 = (0x10 & (#185 ^ mem[RDI + 0x28, el]:u64 ^ RAX))
.address 0x416274
000014ad: PF := ~low:1[let $1 = #185 >> 4 ^ #185 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x416274
000014b0: SF := high:1[#185]
.address 0x416274
000014b3: ZF := 0 = #185
.address 0x416278
000014bd: when ~ZF goto %000014b7
00044e12: goto %000014cc

.address 0x41627A
000014cc: 
.address 0x41627A
000014d7: #187 := mem[RDI + 0x48, el]:u64
.address 0x41627A
000014da: CF := mem[RDI + 0x48, el]:u64 < 0
.address 0x41627A
000014dd: OF := high:1[mem[RDI + 0x48, el]:u64 & (mem[RDI + 0x48, el]:u64 ^ #187)]
.address 0x41627A
000014e0: AF := 0x10 = (0x10 & (#187 ^ mem[RDI + 0x48, el]:u64))
.address 0x41627A
000014e3: PF := ~low:1[let $1 = #187 >> 4 ^ #187 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x41627A
000014e6: SF := high:1[#187]
.address 0x41627A
000014e9: ZF := 0 = #187
.address 0x41627F
000014f2: when ~ZF goto %000014b7
00044e13: goto %000014f8

.address 0x416281
000014f8: 
.address 0x416281
000014ff: #189 := R12
.address 0x416281
00001502: RSP := RSP - 8
.address 0x416281
00001505: mem := mem with [RSP, el]:u64 <- #189
.address 0x416283
0000150e: #190 := RBP
.address 0x416283
00001511: RSP := RSP - 8
.address 0x416283
00001514: mem := mem with [RSP, el]:u64 <- #190
.address 0x416284
0000151b: R12 := pad:64[low:32[RDX]]
.address 0x416287
00001524: #191 := RBX
.address 0x416287
00001527: RSP := RSP - 8
.address 0x416287
0000152a: mem := mem with [RSP, el]:u64 <- #191
.address 0x416288
00001531: RBP := RSI
.address 0x41628B
00001538: RBX := RDI
.address 0x41628E
00001541: RSP := RSP - 8
.address 0x41628E
00001544: mem := mem with [RSP, el]:u64 <- 0x416293
.address 0x41628E
00001547: call @sub_403bc0 with return %00001549

.address 0x416293
00001549: 
.address 0x416293
0000154e: RDX := pad:64[low:32[R12]]
.address 0x416296
00001555: RSI := RBP
.address 0x416299
0000155c: RDI := pad:64[low:32[RAX]]
.address 0x41629B
00001565: RSP := RSP - 8
.address 0x41629B
00001568: mem := mem with [RSP, el]:u64 <- 0x4162A0
.address 0x41629B
0000156b: call @sub_403a10 with return %0000156d

.address 0x4162A0
0000156d: 
.address 0x4162A0
00001578: #192 := RAX - 0xFFFFFFFFFFFFFFFF
.address 0x4162A0
0000157b: CF := RAX < 0xFFFFFFFFFFFFFFFF
.address 0x4162A0
0000157e: OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ #192)]
.address 0x4162A0
00001581: AF := 0x10 = (0x10 & (#192 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
.address 0x4162A0
00001584: PF := ~low:1[let $1 = #192 >> 4 ^ #192 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x4162A0
00001587: SF := high:1[#192]
.address 0x4162A0
0000158a: ZF := 0 = #192
.address 0x4162A4
00001594: when ZF goto %0000158e
00044e14: goto %000018c5

.address 0x4162A6
000018c5: 
.address 0x4162A6
000018d0: mem := mem with [RBX, el]:u32 <- mem[RBX, el]:u32 & 0xFFFFFFEF
.address 0x4162A6
000018d3: OF := 0
.address 0x4162A6
000018d6: CF := 0
.address 0x4162A6
000018d9: AF := unknown[bits]:u1
.address 0x4162A6
000018dc: PF := ~low:1[let $1 = mem[RBX, el]:u32 >> 4 ^ mem[RBX, el]:u32 in
let $2 = $1 >> 2 ^ $1 in $2 >> 1 ^ $2]
.address 0x4162A6
000018df: SF := high:1[mem[RBX, el]:u32]
.address 0x4162A6
000018e2: ZF := 0 = mem[RBX, el]:u32
.address 0x4162A9
000018e9: mem := mem with [RBX + 0x90, el]:u64 <- RAX
.address 0x4162B0
000018f6: RAX := 0
.address 0x4162B0
000018f9: AF := unknown[bits]:u1
.address 0x4162B0
000018fc: ZF := 1
.address 0x4162B0
000018ff: PF := 1
.address 0x4162B0
00001902: OF := 0
.address 0x4162B0
00001905: CF := 0
.address 0x4162B0
00001908: SF := 0
00044e15: goto %0000158e

.address 0x4162B2
0000158e: 
.address 0x4162B2
0000159f: RBX := mem[RSP, el]:u64
.address 0x4162B2
000015a2: RSP := RSP + 8
.address 0x4162B3
000015aa: RBP := mem[RSP, el]:u64
.address 0x4162B3
000015ad: RSP := RSP + 8
.address 0x4162B4
000015b5: R12 := mem[RSP, el]:u64
.address 0x4162B4
000015b8: RSP := RSP + 8
.address 0x4162B6
000015c1: #194 := mem[RSP, el]:u64
.address 0x4162B6
000015c4: RSP := RSP + 8
.address 0x4162B6
000015c8: call #194 with noreturn

.address 0x41626A
000014b7: 
.address 0x41626A
000014c7: goto %00000a15

.address 0x403D40
00000a15: 
.address 0x403D40
00000a1b: call mem[0x61FF30, el]:u64 with noreturn


.address 0x416340
00044619: sub sub_416340()
.address 0x416340
00001783: 
.address 0x416340
00001788: RAX := 0x620008
.address 0x416347
00001795: #216 := RAX
.address 0x416347
00001798: OF := 0
.address 0x416347
0000179b: CF := 0
.address 0x416347
0000179e: AF := unknown[bits]:u1
.address 0x416347
000017a1: PF := ~low:1[let $1 = #216 >> 4 ^ #216 in let $2 = $1 >> 2 ^ $1 in
$2 >> 1 ^ $2]
.address 0x416347
000017a4: SF := high:1[#216]
.address 0x416347
000017a7: ZF := 0 = #216
.address 0x41634A
000017b1: when ZF goto %000017ab
00044e16: goto %000017fb

.address 0x416360
000017ab: 
.address 0x416360
000017c1: RDX := 0
.address 0x416360
000017c4: AF := unknown[bits]:u1
.address 0x416360
000017c7: ZF := 1
.address 0x416360
000017ca: PF := 1
.address 0x416360
000017cd: OF := 0
.address 0x416360
000017d0: CF := 0
.address 0x416360
000017d3: SF := 0
.address 0x416362
000017e0: RSI := 0
.address 0x416362
000017e3: AF := unknown[bits]:u1
.address 0x416362
000017e6: ZF := 1
.address 0x416362
000017e9: PF := 1
.address 0x416362
000017ec: OF := 0
.address 0x416362
000017ef: CF := 0
.address 0x416362
000017f2: SF := 0
.address 0x416364
000017f9: goto %00000a63

.address 0x41634C
000017fb: 
.address 0x41634C
00001800: RDX := mem[RAX, el]:u64
.address 0x41634F
0000180d: RSI := 0
.address 0x41634F
00001810: AF := unknown[bits]:u1
.address 0x41634F
00001813: ZF := 1
.address 0x41634F
00001816: PF := 1
.address 0x41634F
00001819: OF := 0
.address 0x41634F
0000181c: CF := 0
.address 0x41634F
0000181f: SF := 0
.address 0x416351
00001826: goto %00000a63

.address 0x403D70
00000a63: 
.address 0x403D70
00000a69: call mem[0x61FF48, el]:u64 with noreturn


0000737f: sub %0000737f()

0000eb6c: sub %0000eb6c()


